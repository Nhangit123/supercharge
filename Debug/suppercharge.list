
suppercharge.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000120bc  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005f8  08012360  08012360  00013360  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08012958  08012958  00013958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08012960  08012960  00013960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08012964  08012964  00013964  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001d8  24000000  08012968  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000904  240001d8  08012b40  000141d8  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  24000adc  08012b40  00014adc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000141d8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00023b4b  00000000  00000000  00014206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003f39  00000000  00000000  00037d51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001b50  00000000  00000000  0003bc90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001551  00000000  00000000  0003d7e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00005eb3  00000000  00000000  0003ed31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002894e  00000000  00000000  00044be4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00180c3c  00000000  00000000  0006d532  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001ee16e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000084ac  00000000  00000000  001ee1b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000004a  00000000  00000000  001f6660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001d8 	.word	0x240001d8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08012344 	.word	0x08012344

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001dc 	.word	0x240001dc
 80002dc:	08012344 	.word	0x08012344

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <eeprom_devaddr7>:
#include "at24c08c.h"
extern I2C_HandleTypeDef hi2c1;

// Gom thành hàm nhỏ: tính addr 7-bit sau khi nhét A2, P1, P0
static inline uint8_t eeprom_devaddr7(uint16_t mem_addr_10bit)
{
 8000680:	b480      	push	{r7}
 8000682:	b085      	sub	sp, #20
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	80fb      	strh	r3, [r7, #6]
    uint8_t block = (mem_addr_10bit >> 8) & 0x03;  // A9..A8 → P1,P0
 800068a:	88fb      	ldrh	r3, [r7, #6]
 800068c:	0a1b      	lsrs	r3, r3, #8
 800068e:	b29b      	uxth	r3, r3
 8000690:	b2db      	uxtb	r3, r3
 8000692:	f003 0303 	and.w	r3, r3, #3
 8000696:	73fb      	strb	r3, [r7, #15]
    return (AT24C08_BASE_ADDR_7B | (AT24C08_A2 << 2) | block); // 7-bit
 8000698:	7bfb      	ldrb	r3, [r7, #15]
 800069a:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 800069e:	b2db      	uxtb	r3, r3
}
 80006a0:	4618      	mov	r0, r3
 80006a2:	3714      	adds	r7, #20
 80006a4:	46bd      	mov	sp, r7
 80006a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006aa:	4770      	bx	lr

080006ac <EEPROM_WriteByte>:

void EEPROM_WriteByte(uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b088      	sub	sp, #32
 80006b0:	af02      	add	r7, sp, #8
 80006b2:	60ba      	str	r2, [r7, #8]
 80006b4:	461a      	mov	r2, r3
 80006b6:	4603      	mov	r3, r0
 80006b8:	81fb      	strh	r3, [r7, #14]
 80006ba:	460b      	mov	r3, r1
 80006bc:	81bb      	strh	r3, [r7, #12]
 80006be:	4613      	mov	r3, r2
 80006c0:	80fb      	strh	r3, [r7, #6]
    if (page >= PAGE_NUM || offset >= PAGE_SIZE || size == 0) return;
 80006c2:	89fb      	ldrh	r3, [r7, #14]
 80006c4:	2b3f      	cmp	r3, #63	@ 0x3f
 80006c6:	d82b      	bhi.n	8000720 <EEPROM_WriteByte+0x74>
 80006c8:	89bb      	ldrh	r3, [r7, #12]
 80006ca:	2b0f      	cmp	r3, #15
 80006cc:	d828      	bhi.n	8000720 <EEPROM_WriteByte+0x74>
 80006ce:	88fb      	ldrh	r3, [r7, #6]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d025      	beq.n	8000720 <EEPROM_WriteByte+0x74>
    if (offset + size > PAGE_SIZE) size = PAGE_SIZE - offset;
 80006d4:	89ba      	ldrh	r2, [r7, #12]
 80006d6:	88fb      	ldrh	r3, [r7, #6]
 80006d8:	4413      	add	r3, r2
 80006da:	2b10      	cmp	r3, #16
 80006dc:	dd03      	ble.n	80006e6 <EEPROM_WriteByte+0x3a>
 80006de:	89bb      	ldrh	r3, [r7, #12]
 80006e0:	f1c3 0310 	rsb	r3, r3, #16
 80006e4:	80fb      	strh	r3, [r7, #6]

    uint16_t mem_addr = (page * PAGE_SIZE) + offset;     // 0..1023 (10-bit)
 80006e6:	89fb      	ldrh	r3, [r7, #14]
 80006e8:	011b      	lsls	r3, r3, #4
 80006ea:	b29a      	uxth	r2, r3
 80006ec:	89bb      	ldrh	r3, [r7, #12]
 80006ee:	4413      	add	r3, r2
 80006f0:	82fb      	strh	r3, [r7, #22]
    uint8_t  dev7     = eeprom_devaddr7(mem_addr);       // 7-bit device address
 80006f2:	8afb      	ldrh	r3, [r7, #22]
 80006f4:	4618      	mov	r0, r3
 80006f6:	f7ff ffc3 	bl	8000680 <eeprom_devaddr7>
 80006fa:	4603      	mov	r3, r0
 80006fc:	757b      	strb	r3, [r7, #21]
    uint8_t  mem8     = (uint8_t)(mem_addr & 0xFF);      // địa chỉ ô nhớ thấp 8 bit
 80006fe:	8afb      	ldrh	r3, [r7, #22]
 8000700:	753b      	strb	r3, [r7, #20]

    // HAL mong DevAddress là địa chỉ 7-bit << 1
    HAL_I2C_Mem_Write_DMA(&hi2c1, (uint16_t)(dev7 << 1), mem8, I2C_MEMADD_SIZE_8BIT, data, size);
 8000702:	7d7b      	ldrb	r3, [r7, #21]
 8000704:	b29b      	uxth	r3, r3
 8000706:	005b      	lsls	r3, r3, #1
 8000708:	b299      	uxth	r1, r3
 800070a:	7d3b      	ldrb	r3, [r7, #20]
 800070c:	b29a      	uxth	r2, r3
 800070e:	88fb      	ldrh	r3, [r7, #6]
 8000710:	9301      	str	r3, [sp, #4]
 8000712:	68bb      	ldr	r3, [r7, #8]
 8000714:	9300      	str	r3, [sp, #0]
 8000716:	2301      	movs	r3, #1
 8000718:	4803      	ldr	r0, [pc, #12]	@ (8000728 <EEPROM_WriteByte+0x7c>)
 800071a:	f006 fb51 	bl	8006dc0 <HAL_I2C_Mem_Write_DMA>
 800071e:	e000      	b.n	8000722 <EEPROM_WriteByte+0x76>
    if (page >= PAGE_NUM || offset >= PAGE_SIZE || size == 0) return;
 8000720:	bf00      	nop

}
 8000722:	3718      	adds	r7, #24
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	240002e0 	.word	0x240002e0

0800072c <EEPROM_ReadByte>:

uint8_t EEPROM_ReadByte(uint16_t page, uint16_t offset)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b088      	sub	sp, #32
 8000730:	af04      	add	r7, sp, #16
 8000732:	4603      	mov	r3, r0
 8000734:	460a      	mov	r2, r1
 8000736:	80fb      	strh	r3, [r7, #6]
 8000738:	4613      	mov	r3, r2
 800073a:	80bb      	strh	r3, [r7, #4]
    if (page >= PAGE_NUM || offset >= PAGE_SIZE) return 0;
 800073c:	88fb      	ldrh	r3, [r7, #6]
 800073e:	2b3f      	cmp	r3, #63	@ 0x3f
 8000740:	d802      	bhi.n	8000748 <EEPROM_ReadByte+0x1c>
 8000742:	88bb      	ldrh	r3, [r7, #4]
 8000744:	2b0f      	cmp	r3, #15
 8000746:	d901      	bls.n	800074c <EEPROM_ReadByte+0x20>
 8000748:	2300      	movs	r3, #0
 800074a:	e021      	b.n	8000790 <EEPROM_ReadByte+0x64>

    uint16_t mem_addr = (page * PAGE_SIZE) + offset;     // 0..1023
 800074c:	88fb      	ldrh	r3, [r7, #6]
 800074e:	011b      	lsls	r3, r3, #4
 8000750:	b29a      	uxth	r2, r3
 8000752:	88bb      	ldrh	r3, [r7, #4]
 8000754:	4413      	add	r3, r2
 8000756:	81fb      	strh	r3, [r7, #14]
    uint8_t  dev7     = eeprom_devaddr7(mem_addr);
 8000758:	89fb      	ldrh	r3, [r7, #14]
 800075a:	4618      	mov	r0, r3
 800075c:	f7ff ff90 	bl	8000680 <eeprom_devaddr7>
 8000760:	4603      	mov	r3, r0
 8000762:	737b      	strb	r3, [r7, #13]
    uint8_t  mem8     = (uint8_t)(mem_addr & 0xFF);
 8000764:	89fb      	ldrh	r3, [r7, #14]
 8000766:	733b      	strb	r3, [r7, #12]
    uint8_t  data     = 0;
 8000768:	2300      	movs	r3, #0
 800076a:	72fb      	strb	r3, [r7, #11]

    HAL_I2C_Mem_Read(&hi2c1, (uint16_t)(dev7 << 1), mem8, I2C_MEMADD_SIZE_8BIT, &data, 1,100);
 800076c:	7b7b      	ldrb	r3, [r7, #13]
 800076e:	b29b      	uxth	r3, r3
 8000770:	005b      	lsls	r3, r3, #1
 8000772:	b299      	uxth	r1, r3
 8000774:	7b3b      	ldrb	r3, [r7, #12]
 8000776:	b29a      	uxth	r2, r3
 8000778:	2364      	movs	r3, #100	@ 0x64
 800077a:	9302      	str	r3, [sp, #8]
 800077c:	2301      	movs	r3, #1
 800077e:	9301      	str	r3, [sp, #4]
 8000780:	f107 030b 	add.w	r3, r7, #11
 8000784:	9300      	str	r3, [sp, #0]
 8000786:	2301      	movs	r3, #1
 8000788:	4803      	ldr	r0, [pc, #12]	@ (8000798 <EEPROM_ReadByte+0x6c>)
 800078a:	f006 f9ff 	bl	8006b8c <HAL_I2C_Mem_Read>
    return data;
 800078e:	7afb      	ldrb	r3, [r7, #11]
}
 8000790:	4618      	mov	r0, r3
 8000792:	3710      	adds	r7, #16
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	240002e0 	.word	0x240002e0
 800079c:	00000000 	.word	0x00000000

080007a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
//	uint8_t data_write = 0xAB;
  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80007a6:	f000 fca5 	bl	80010f4 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007aa:	f001 fe4f 	bl	800244c <HAL_Init>
//   app_init();

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ae:	f000 f84b 	bl	8000848 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007b2:	f000 fbc9 	bl	8000f48 <MX_GPIO_Init>
  MX_DMA_Init();
 80007b6:	f000 fb97 	bl	8000ee8 <MX_DMA_Init>
  MX_TIM4_Init();
 80007ba:	f000 faaf 	bl	8000d1c <MX_TIM4_Init>
  MX_USART2_UART_Init();
 80007be:	f000 fb47 	bl	8000e50 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80007c2:	f000 f973 	bl	8000aac <MX_I2C1_Init>
  MX_SPI3_Init();
 80007c6:	f000 f9b1 	bl	8000b2c <MX_SPI3_Init>
  MX_ADC1_Init();
 80007ca:	f000 f8bb 	bl	8000944 <MX_ADC1_Init>
  MX_TIM1_Init();
 80007ce:	f000 fa03 	bl	8000bd8 <MX_TIM1_Init>
  MX_UART7_Init();
 80007d2:	f000 faf1 	bl	8000db8 <MX_UART7_Init>
  MX_TIM2_Init();
 80007d6:	f000 fa53 	bl	8000c80 <MX_TIM2_Init>
  Control_Init();
 80007da:	f000 fdc5 	bl	8001368 <Control_Init>

  double V_CB;
  double V_Bat;
  double Vref;
  double Ib;
  double D = 0;
 80007de:	f04f 0200 	mov.w	r2, #0
 80007e2:	f04f 0300 	mov.w	r3, #0
 80007e6:	e9c7 2300 	strd	r2, r3, [r7]
//
//	    	   //Add delay or wait for timer interrupt
//	    	  delay_ns(500);  // Adjust based on your control frequency


	  	  data_read_test_eeprom = EEPROM_ReadByte(page_read_test_eeprom, 0);
 80007ea:	4b15      	ldr	r3, [pc, #84]	@ (8000840 <main+0xa0>)
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	2100      	movs	r1, #0
 80007f0:	4618      	mov	r0, r3
 80007f2:	f7ff ff9b 	bl	800072c <EEPROM_ReadByte>
 80007f6:	4603      	mov	r3, r0
 80007f8:	461a      	mov	r2, r3
 80007fa:	4b12      	ldr	r3, [pc, #72]	@ (8000844 <main+0xa4>)
 80007fc:	701a      	strb	r2, [r3, #0]
	  	  send_data_to_winform(data_read_test_eeprom, 0, 0, 0);
 80007fe:	4b11      	ldr	r3, [pc, #68]	@ (8000844 <main+0xa4>)
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	ee07 3a90 	vmov	s15, r3
 8000806:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800080a:	ed9f 3b0b 	vldr	d3, [pc, #44]	@ 8000838 <main+0x98>
 800080e:	ed9f 2b0a 	vldr	d2, [pc, #40]	@ 8000838 <main+0x98>
 8000812:	ed9f 1b09 	vldr	d1, [pc, #36]	@ 8000838 <main+0x98>
 8000816:	eeb0 0b47 	vmov.f64	d0, d7
 800081a:	f001 fdab 	bl	8002374 <send_data_to_winform>
	  	  page_read_test_eeprom++;
 800081e:	4b08      	ldr	r3, [pc, #32]	@ (8000840 <main+0xa0>)
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	3301      	adds	r3, #1
 8000824:	b2da      	uxtb	r2, r3
 8000826:	4b06      	ldr	r3, [pc, #24]	@ (8000840 <main+0xa0>)
 8000828:	701a      	strb	r2, [r3, #0]
	  	  HAL_Delay(1000);
 800082a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800082e:	f001 fe9f 	bl	8002570 <HAL_Delay>
	  	  data_read_test_eeprom = EEPROM_ReadByte(page_read_test_eeprom, 0);
 8000832:	bf00      	nop
 8000834:	e7d9      	b.n	80007ea <main+0x4a>
 8000836:	bf00      	nop
	...
 8000840:	24000202 	.word	0x24000202
 8000844:	24000201 	.word	0x24000201

08000848 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b09c      	sub	sp, #112	@ 0x70
 800084c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800084e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000852:	224c      	movs	r2, #76	@ 0x4c
 8000854:	2100      	movs	r1, #0
 8000856:	4618      	mov	r0, r3
 8000858:	f00f fd17 	bl	801028a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800085c:	1d3b      	adds	r3, r7, #4
 800085e:	2220      	movs	r2, #32
 8000860:	2100      	movs	r1, #0
 8000862:	4618      	mov	r0, r3
 8000864:	f00f fd11 	bl	801028a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000868:	2002      	movs	r0, #2
 800086a:	f008 fc81 	bl	8009170 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800086e:	2300      	movs	r3, #0
 8000870:	603b      	str	r3, [r7, #0]
 8000872:	4b32      	ldr	r3, [pc, #200]	@ (800093c <SystemClock_Config+0xf4>)
 8000874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000876:	4a31      	ldr	r2, [pc, #196]	@ (800093c <SystemClock_Config+0xf4>)
 8000878:	f023 0301 	bic.w	r3, r3, #1
 800087c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800087e:	4b2f      	ldr	r3, [pc, #188]	@ (800093c <SystemClock_Config+0xf4>)
 8000880:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000882:	f003 0301 	and.w	r3, r3, #1
 8000886:	603b      	str	r3, [r7, #0]
 8000888:	4b2d      	ldr	r3, [pc, #180]	@ (8000940 <SystemClock_Config+0xf8>)
 800088a:	699b      	ldr	r3, [r3, #24]
 800088c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000890:	4a2b      	ldr	r2, [pc, #172]	@ (8000940 <SystemClock_Config+0xf8>)
 8000892:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000896:	6193      	str	r3, [r2, #24]
 8000898:	4b29      	ldr	r3, [pc, #164]	@ (8000940 <SystemClock_Config+0xf8>)
 800089a:	699b      	ldr	r3, [r3, #24]
 800089c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008a0:	603b      	str	r3, [r7, #0]
 80008a2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008a4:	bf00      	nop
 80008a6:	4b26      	ldr	r3, [pc, #152]	@ (8000940 <SystemClock_Config+0xf8>)
 80008a8:	699b      	ldr	r3, [r3, #24]
 80008aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80008ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80008b2:	d1f8      	bne.n	80008a6 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008b4:	2302      	movs	r3, #2
 80008b6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80008b8:	2301      	movs	r3, #1
 80008ba:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008bc:	2340      	movs	r3, #64	@ 0x40
 80008be:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008c0:	2302      	movs	r3, #2
 80008c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008c4:	2300      	movs	r3, #0
 80008c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008c8:	2304      	movs	r3, #4
 80008ca:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 80008cc:	2312      	movs	r3, #18
 80008ce:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008d0:	2302      	movs	r3, #2
 80008d2:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80008d4:	2303      	movs	r3, #3
 80008d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008d8:	2302      	movs	r3, #2
 80008da:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80008dc:	230c      	movs	r3, #12
 80008de:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008e0:	2300      	movs	r3, #0
 80008e2:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008e4:	2300      	movs	r3, #0
 80008e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008ec:	4618      	mov	r0, r3
 80008ee:	f008 fc79 	bl	80091e4 <HAL_RCC_OscConfig>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80008f8:	f000 fc28 	bl	800114c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008fc:	233f      	movs	r3, #63	@ 0x3f
 80008fe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000900:	2303      	movs	r3, #3
 8000902:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000904:	2300      	movs	r3, #0
 8000906:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000908:	2300      	movs	r3, #0
 800090a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800090c:	2340      	movs	r3, #64	@ 0x40
 800090e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV4;
 8000910:	2350      	movs	r3, #80	@ 0x50
 8000912:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV8;
 8000914:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000918:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800091a:	2340      	movs	r3, #64	@ 0x40
 800091c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800091e:	1d3b      	adds	r3, r7, #4
 8000920:	2103      	movs	r1, #3
 8000922:	4618      	mov	r0, r3
 8000924:	f009 f8b8 	bl	8009a98 <HAL_RCC_ClockConfig>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <SystemClock_Config+0xea>
  {
    Error_Handler();
 800092e:	f000 fc0d 	bl	800114c <Error_Handler>
  }
}
 8000932:	bf00      	nop
 8000934:	3770      	adds	r7, #112	@ 0x70
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	58000400 	.word	0x58000400
 8000940:	58024800 	.word	0x58024800

08000944 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b08a      	sub	sp, #40	@ 0x28
 8000948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800094a:	f107 031c 	add.w	r3, r7, #28
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]
 8000952:	605a      	str	r2, [r3, #4]
 8000954:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000956:	463b      	mov	r3, r7
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]
 8000964:	615a      	str	r2, [r3, #20]
 8000966:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000968:	4b4a      	ldr	r3, [pc, #296]	@ (8000a94 <MX_ADC1_Init+0x150>)
 800096a:	4a4b      	ldr	r2, [pc, #300]	@ (8000a98 <MX_ADC1_Init+0x154>)
 800096c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800096e:	4b49      	ldr	r3, [pc, #292]	@ (8000a94 <MX_ADC1_Init+0x150>)
 8000970:	2201      	movs	r2, #1
 8000972:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000974:	4b47      	ldr	r3, [pc, #284]	@ (8000a94 <MX_ADC1_Init+0x150>)
 8000976:	2208      	movs	r2, #8
 8000978:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800097a:	4b46      	ldr	r3, [pc, #280]	@ (8000a94 <MX_ADC1_Init+0x150>)
 800097c:	2200      	movs	r2, #0
 800097e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000980:	4b44      	ldr	r3, [pc, #272]	@ (8000a94 <MX_ADC1_Init+0x150>)
 8000982:	2200      	movs	r2, #0
 8000984:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 4;
 8000986:	4b43      	ldr	r3, [pc, #268]	@ (8000a94 <MX_ADC1_Init+0x150>)
 8000988:	2204      	movs	r2, #4
 800098a:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800098c:	4b41      	ldr	r3, [pc, #260]	@ (8000a94 <MX_ADC1_Init+0x150>)
 800098e:	2200      	movs	r2, #0
 8000990:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000992:	4b40      	ldr	r3, [pc, #256]	@ (8000a94 <MX_ADC1_Init+0x150>)
 8000994:	2200      	movs	r2, #0
 8000996:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000998:	4b3e      	ldr	r3, [pc, #248]	@ (8000a94 <MX_ADC1_Init+0x150>)
 800099a:	2200      	movs	r2, #0
 800099c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_ONESHOT;
 800099e:	4b3d      	ldr	r3, [pc, #244]	@ (8000a94 <MX_ADC1_Init+0x150>)
 80009a0:	2201      	movs	r2, #1
 80009a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009a4:	4b3b      	ldr	r3, [pc, #236]	@ (8000a94 <MX_ADC1_Init+0x150>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80009aa:	4b3a      	ldr	r3, [pc, #232]	@ (8000a94 <MX_ADC1_Init+0x150>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80009b0:	4b38      	ldr	r3, [pc, #224]	@ (8000a94 <MX_ADC1_Init+0x150>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 1;
 80009b8:	4b36      	ldr	r3, [pc, #216]	@ (8000a94 <MX_ADC1_Init+0x150>)
 80009ba:	2201      	movs	r2, #1
 80009bc:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009be:	4835      	ldr	r0, [pc, #212]	@ (8000a94 <MX_ADC1_Init+0x150>)
 80009c0:	f001 ff92 	bl	80028e8 <HAL_ADC_Init>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80009ca:	f000 fbbf 	bl	800114c <Error_Handler>
  }
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80009ce:	4b31      	ldr	r3, [pc, #196]	@ (8000a94 <MX_ADC1_Init+0x150>)
 80009d0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80009d4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80009d6:	4b2f      	ldr	r3, [pc, #188]	@ (8000a94 <MX_ADC1_Init+0x150>)
 80009d8:	2200      	movs	r2, #0
 80009da:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009dc:	482d      	ldr	r0, [pc, #180]	@ (8000a94 <MX_ADC1_Init+0x150>)
 80009de:	f001 ff83 	bl	80028e8 <HAL_ADC_Init>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 80009e8:	f000 fbb0 	bl	800114c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80009ec:	2300      	movs	r3, #0
 80009ee:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80009f0:	f107 031c 	add.w	r3, r7, #28
 80009f4:	4619      	mov	r1, r3
 80009f6:	4827      	ldr	r0, [pc, #156]	@ (8000a94 <MX_ADC1_Init+0x150>)
 80009f8:	f002 fda6 	bl	8003548 <HAL_ADCEx_MultiModeConfigChannel>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8000a02:	f000 fba3 	bl	800114c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000a06:	4b25      	ldr	r3, [pc, #148]	@ (8000a9c <MX_ADC1_Init+0x158>)
 8000a08:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a0a:	2306      	movs	r3, #6
 8000a0c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a12:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000a16:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a18:	2304      	movs	r3, #4
 8000a1a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000a20:	2300      	movs	r3, #0
 8000a22:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a24:	463b      	mov	r3, r7
 8000a26:	4619      	mov	r1, r3
 8000a28:	481a      	ldr	r0, [pc, #104]	@ (8000a94 <MX_ADC1_Init+0x150>)
 8000a2a:	f002 f8ff 	bl	8002c2c <HAL_ADC_ConfigChannel>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 8000a34:	f000 fb8a 	bl	800114c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000a38:	4b19      	ldr	r3, [pc, #100]	@ (8000aa0 <MX_ADC1_Init+0x15c>)
 8000a3a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000a3c:	230c      	movs	r3, #12
 8000a3e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a40:	463b      	mov	r3, r7
 8000a42:	4619      	mov	r1, r3
 8000a44:	4813      	ldr	r0, [pc, #76]	@ (8000a94 <MX_ADC1_Init+0x150>)
 8000a46:	f002 f8f1 	bl	8002c2c <HAL_ADC_ConfigChannel>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_ADC1_Init+0x110>
  {
    Error_Handler();
 8000a50:	f000 fb7c 	bl	800114c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000a54:	4b13      	ldr	r3, [pc, #76]	@ (8000aa4 <MX_ADC1_Init+0x160>)
 8000a56:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000a58:	2312      	movs	r3, #18
 8000a5a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a5c:	463b      	mov	r3, r7
 8000a5e:	4619      	mov	r1, r3
 8000a60:	480c      	ldr	r0, [pc, #48]	@ (8000a94 <MX_ADC1_Init+0x150>)
 8000a62:	f002 f8e3 	bl	8002c2c <HAL_ADC_ConfigChannel>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_ADC1_Init+0x12c>
  {
    Error_Handler();
 8000a6c:	f000 fb6e 	bl	800114c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 8000a70:	4b0d      	ldr	r3, [pc, #52]	@ (8000aa8 <MX_ADC1_Init+0x164>)
 8000a72:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000a74:	2318      	movs	r3, #24
 8000a76:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a78:	463b      	mov	r3, r7
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4805      	ldr	r0, [pc, #20]	@ (8000a94 <MX_ADC1_Init+0x150>)
 8000a7e:	f002 f8d5 	bl	8002c2c <HAL_ADC_ConfigChannel>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_ADC1_Init+0x148>
  {
    Error_Handler();
 8000a88:	f000 fb60 	bl	800114c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a8c:	bf00      	nop
 8000a8e:	3728      	adds	r7, #40	@ 0x28
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	24000204 	.word	0x24000204
 8000a98:	40022000 	.word	0x40022000
 8000a9c:	1d500080 	.word	0x1d500080
 8000aa0:	10c00010 	.word	0x10c00010
 8000aa4:	21800100 	.word	0x21800100
 8000aa8:	4b840000 	.word	0x4b840000

08000aac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ab0:	4b1b      	ldr	r3, [pc, #108]	@ (8000b20 <MX_I2C1_Init+0x74>)
 8000ab2:	4a1c      	ldr	r2, [pc, #112]	@ (8000b24 <MX_I2C1_Init+0x78>)
 8000ab4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00305FFF;
 8000ab6:	4b1a      	ldr	r3, [pc, #104]	@ (8000b20 <MX_I2C1_Init+0x74>)
 8000ab8:	4a1b      	ldr	r2, [pc, #108]	@ (8000b28 <MX_I2C1_Init+0x7c>)
 8000aba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000abc:	4b18      	ldr	r3, [pc, #96]	@ (8000b20 <MX_I2C1_Init+0x74>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ac2:	4b17      	ldr	r3, [pc, #92]	@ (8000b20 <MX_I2C1_Init+0x74>)
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ac8:	4b15      	ldr	r3, [pc, #84]	@ (8000b20 <MX_I2C1_Init+0x74>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ace:	4b14      	ldr	r3, [pc, #80]	@ (8000b20 <MX_I2C1_Init+0x74>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ad4:	4b12      	ldr	r3, [pc, #72]	@ (8000b20 <MX_I2C1_Init+0x74>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ada:	4b11      	ldr	r3, [pc, #68]	@ (8000b20 <MX_I2C1_Init+0x74>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ae0:	4b0f      	ldr	r3, [pc, #60]	@ (8000b20 <MX_I2C1_Init+0x74>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ae6:	480e      	ldr	r0, [pc, #56]	@ (8000b20 <MX_I2C1_Init+0x74>)
 8000ae8:	f005 ffb4 	bl	8006a54 <HAL_I2C_Init>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000af2:	f000 fb2b 	bl	800114c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000af6:	2100      	movs	r1, #0
 8000af8:	4809      	ldr	r0, [pc, #36]	@ (8000b20 <MX_I2C1_Init+0x74>)
 8000afa:	f008 faa1 	bl	8009040 <HAL_I2CEx_ConfigAnalogFilter>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000b04:	f000 fb22 	bl	800114c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b08:	2100      	movs	r1, #0
 8000b0a:	4805      	ldr	r0, [pc, #20]	@ (8000b20 <MX_I2C1_Init+0x74>)
 8000b0c:	f008 fae3 	bl	80090d6 <HAL_I2CEx_ConfigDigitalFilter>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000b16:	f000 fb19 	bl	800114c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b1a:	bf00      	nop
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	240002e0 	.word	0x240002e0
 8000b24:	40005400 	.word	0x40005400
 8000b28:	00305fff 	.word	0x00305fff

08000b2c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000b30:	4b27      	ldr	r3, [pc, #156]	@ (8000bd0 <MX_SPI3_Init+0xa4>)
 8000b32:	4a28      	ldr	r2, [pc, #160]	@ (8000bd4 <MX_SPI3_Init+0xa8>)
 8000b34:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000b36:	4b26      	ldr	r3, [pc, #152]	@ (8000bd0 <MX_SPI3_Init+0xa4>)
 8000b38:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000b3c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000b3e:	4b24      	ldr	r3, [pc, #144]	@ (8000bd0 <MX_SPI3_Init+0xa4>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000b44:	4b22      	ldr	r3, [pc, #136]	@ (8000bd0 <MX_SPI3_Init+0xa4>)
 8000b46:	2203      	movs	r2, #3
 8000b48:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b4a:	4b21      	ldr	r3, [pc, #132]	@ (8000bd0 <MX_SPI3_Init+0xa4>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b50:	4b1f      	ldr	r3, [pc, #124]	@ (8000bd0 <MX_SPI3_Init+0xa4>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000b56:	4b1e      	ldr	r3, [pc, #120]	@ (8000bd0 <MX_SPI3_Init+0xa4>)
 8000b58:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000b5c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b5e:	4b1c      	ldr	r3, [pc, #112]	@ (8000bd0 <MX_SPI3_Init+0xa4>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b64:	4b1a      	ldr	r3, [pc, #104]	@ (8000bd0 <MX_SPI3_Init+0xa4>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b6a:	4b19      	ldr	r3, [pc, #100]	@ (8000bd0 <MX_SPI3_Init+0xa4>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b70:	4b17      	ldr	r3, [pc, #92]	@ (8000bd0 <MX_SPI3_Init+0xa4>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8000b76:	4b16      	ldr	r3, [pc, #88]	@ (8000bd0 <MX_SPI3_Init+0xa4>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b7c:	4b14      	ldr	r3, [pc, #80]	@ (8000bd0 <MX_SPI3_Init+0xa4>)
 8000b7e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b82:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000b84:	4b12      	ldr	r3, [pc, #72]	@ (8000bd0 <MX_SPI3_Init+0xa4>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000b8a:	4b11      	ldr	r3, [pc, #68]	@ (8000bd0 <MX_SPI3_Init+0xa4>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000b90:	4b0f      	ldr	r3, [pc, #60]	@ (8000bd0 <MX_SPI3_Init+0xa4>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000b96:	4b0e      	ldr	r3, [pc, #56]	@ (8000bd0 <MX_SPI3_Init+0xa4>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000b9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000bd0 <MX_SPI3_Init+0xa4>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000ba2:	4b0b      	ldr	r3, [pc, #44]	@ (8000bd0 <MX_SPI3_Init+0xa4>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000ba8:	4b09      	ldr	r3, [pc, #36]	@ (8000bd0 <MX_SPI3_Init+0xa4>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000bae:	4b08      	ldr	r3, [pc, #32]	@ (8000bd0 <MX_SPI3_Init+0xa4>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000bb4:	4b06      	ldr	r3, [pc, #24]	@ (8000bd0 <MX_SPI3_Init+0xa4>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000bba:	4805      	ldr	r0, [pc, #20]	@ (8000bd0 <MX_SPI3_Init+0xa4>)
 8000bbc:	f00b fff6 	bl	800cbac <HAL_SPI_Init>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 8000bc6:	f000 fac1 	bl	800114c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	24000424 	.word	0x24000424
 8000bd4:	40003c00 	.word	0x40003c00

08000bd8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b088      	sub	sp, #32
 8000bdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bde:	f107 0310 	add.w	r3, r7, #16
 8000be2:	2200      	movs	r2, #0
 8000be4:	601a      	str	r2, [r3, #0]
 8000be6:	605a      	str	r2, [r3, #4]
 8000be8:	609a      	str	r2, [r3, #8]
 8000bea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bec:	1d3b      	adds	r3, r7, #4
 8000bee:	2200      	movs	r2, #0
 8000bf0:	601a      	str	r2, [r3, #0]
 8000bf2:	605a      	str	r2, [r3, #4]
 8000bf4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000bf6:	4b20      	ldr	r3, [pc, #128]	@ (8000c78 <MX_TIM1_Init+0xa0>)
 8000bf8:	4a20      	ldr	r2, [pc, #128]	@ (8000c7c <MX_TIM1_Init+0xa4>)
 8000bfa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1-1;
 8000bfc:	4b1e      	ldr	r3, [pc, #120]	@ (8000c78 <MX_TIM1_Init+0xa0>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c02:	4b1d      	ldr	r3, [pc, #116]	@ (8000c78 <MX_TIM1_Init+0xa0>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000c08:	4b1b      	ldr	r3, [pc, #108]	@ (8000c78 <MX_TIM1_Init+0xa0>)
 8000c0a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c0e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c10:	4b19      	ldr	r3, [pc, #100]	@ (8000c78 <MX_TIM1_Init+0xa0>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c16:	4b18      	ldr	r3, [pc, #96]	@ (8000c78 <MX_TIM1_Init+0xa0>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c1c:	4b16      	ldr	r3, [pc, #88]	@ (8000c78 <MX_TIM1_Init+0xa0>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c22:	4815      	ldr	r0, [pc, #84]	@ (8000c78 <MX_TIM1_Init+0xa0>)
 8000c24:	f00c fbbb 	bl	800d39e <HAL_TIM_Base_Init>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000c2e:	f000 fa8d 	bl	800114c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c32:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c36:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c38:	f107 0310 	add.w	r3, r7, #16
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	480e      	ldr	r0, [pc, #56]	@ (8000c78 <MX_TIM1_Init+0xa0>)
 8000c40:	f00c fd0c 	bl	800d65c <HAL_TIM_ConfigClockSource>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000c4a:	f000 fa7f 	bl	800114c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000c52:	2300      	movs	r3, #0
 8000c54:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c56:	2300      	movs	r3, #0
 8000c58:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c5a:	1d3b      	adds	r3, r7, #4
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4806      	ldr	r0, [pc, #24]	@ (8000c78 <MX_TIM1_Init+0xa0>)
 8000c60:	f00c ff60 	bl	800db24 <HAL_TIMEx_MasterConfigSynchronization>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000c6a:	f000 fa6f 	bl	800114c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000c6e:	bf00      	nop
 8000c70:	3720      	adds	r7, #32
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	240004ac 	.word	0x240004ac
 8000c7c:	40010000 	.word	0x40010000

08000c80 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b088      	sub	sp, #32
 8000c84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c86:	f107 0310 	add.w	r3, r7, #16
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	601a      	str	r2, [r3, #0]
 8000c8e:	605a      	str	r2, [r3, #4]
 8000c90:	609a      	str	r2, [r3, #8]
 8000c92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c94:	1d3b      	adds	r3, r7, #4
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	605a      	str	r2, [r3, #4]
 8000c9c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c9e:	4b1e      	ldr	r3, [pc, #120]	@ (8000d18 <MX_TIM2_Init+0x98>)
 8000ca0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ca4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200-1;
 8000ca6:	4b1c      	ldr	r3, [pc, #112]	@ (8000d18 <MX_TIM2_Init+0x98>)
 8000ca8:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8000cac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cae:	4b1a      	ldr	r3, [pc, #104]	@ (8000d18 <MX_TIM2_Init+0x98>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000cb4:	4b18      	ldr	r3, [pc, #96]	@ (8000d18 <MX_TIM2_Init+0x98>)
 8000cb6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000cba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cbc:	4b16      	ldr	r3, [pc, #88]	@ (8000d18 <MX_TIM2_Init+0x98>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cc2:	4b15      	ldr	r3, [pc, #84]	@ (8000d18 <MX_TIM2_Init+0x98>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000cc8:	4813      	ldr	r0, [pc, #76]	@ (8000d18 <MX_TIM2_Init+0x98>)
 8000cca:	f00c fb68 	bl	800d39e <HAL_TIM_Base_Init>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000cd4:	f000 fa3a 	bl	800114c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cd8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cdc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000cde:	f107 0310 	add.w	r3, r7, #16
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	480c      	ldr	r0, [pc, #48]	@ (8000d18 <MX_TIM2_Init+0x98>)
 8000ce6:	f00c fcb9 	bl	800d65c <HAL_TIM_ConfigClockSource>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000cf0:	f000 fa2c 	bl	800114c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cfc:	1d3b      	adds	r3, r7, #4
 8000cfe:	4619      	mov	r1, r3
 8000d00:	4805      	ldr	r0, [pc, #20]	@ (8000d18 <MX_TIM2_Init+0x98>)
 8000d02:	f00c ff0f 	bl	800db24 <HAL_TIMEx_MasterConfigSynchronization>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000d0c:	f000 fa1e 	bl	800114c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d10:	bf00      	nop
 8000d12:	3720      	adds	r7, #32
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	240004f8 	.word	0x240004f8

08000d1c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b088      	sub	sp, #32
 8000d20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d22:	f107 0310 	add.w	r3, r7, #16
 8000d26:	2200      	movs	r2, #0
 8000d28:	601a      	str	r2, [r3, #0]
 8000d2a:	605a      	str	r2, [r3, #4]
 8000d2c:	609a      	str	r2, [r3, #8]
 8000d2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d30:	1d3b      	adds	r3, r7, #4
 8000d32:	2200      	movs	r2, #0
 8000d34:	601a      	str	r2, [r3, #0]
 8000d36:	605a      	str	r2, [r3, #4]
 8000d38:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000d3a:	4b1d      	ldr	r3, [pc, #116]	@ (8000db0 <MX_TIM4_Init+0x94>)
 8000d3c:	4a1d      	ldr	r2, [pc, #116]	@ (8000db4 <MX_TIM4_Init+0x98>)
 8000d3e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1-1;
 8000d40:	4b1b      	ldr	r3, [pc, #108]	@ (8000db0 <MX_TIM4_Init+0x94>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d46:	4b1a      	ldr	r3, [pc, #104]	@ (8000db0 <MX_TIM4_Init+0x94>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 179-1;
 8000d4c:	4b18      	ldr	r3, [pc, #96]	@ (8000db0 <MX_TIM4_Init+0x94>)
 8000d4e:	22b2      	movs	r2, #178	@ 0xb2
 8000d50:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d52:	4b17      	ldr	r3, [pc, #92]	@ (8000db0 <MX_TIM4_Init+0x94>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d58:	4b15      	ldr	r3, [pc, #84]	@ (8000db0 <MX_TIM4_Init+0x94>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000d5e:	4814      	ldr	r0, [pc, #80]	@ (8000db0 <MX_TIM4_Init+0x94>)
 8000d60:	f00c fb1d 	bl	800d39e <HAL_TIM_Base_Init>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000d6a:	f000 f9ef 	bl	800114c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d6e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d72:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000d74:	f107 0310 	add.w	r3, r7, #16
 8000d78:	4619      	mov	r1, r3
 8000d7a:	480d      	ldr	r0, [pc, #52]	@ (8000db0 <MX_TIM4_Init+0x94>)
 8000d7c:	f00c fc6e 	bl	800d65c <HAL_TIM_ConfigClockSource>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000d86:	f000 f9e1 	bl	800114c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d92:	1d3b      	adds	r3, r7, #4
 8000d94:	4619      	mov	r1, r3
 8000d96:	4806      	ldr	r0, [pc, #24]	@ (8000db0 <MX_TIM4_Init+0x94>)
 8000d98:	f00c fec4 	bl	800db24 <HAL_TIMEx_MasterConfigSynchronization>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000da2:	f000 f9d3 	bl	800114c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000da6:	bf00      	nop
 8000da8:	3720      	adds	r7, #32
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	24000544 	.word	0x24000544
 8000db4:	40000800 	.word	0x40000800

08000db8 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8000dbc:	4b22      	ldr	r3, [pc, #136]	@ (8000e48 <MX_UART7_Init+0x90>)
 8000dbe:	4a23      	ldr	r2, [pc, #140]	@ (8000e4c <MX_UART7_Init+0x94>)
 8000dc0:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8000dc2:	4b21      	ldr	r3, [pc, #132]	@ (8000e48 <MX_UART7_Init+0x90>)
 8000dc4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000dc8:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8000dca:	4b1f      	ldr	r3, [pc, #124]	@ (8000e48 <MX_UART7_Init+0x90>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8000dd0:	4b1d      	ldr	r3, [pc, #116]	@ (8000e48 <MX_UART7_Init+0x90>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8000dd6:	4b1c      	ldr	r3, [pc, #112]	@ (8000e48 <MX_UART7_Init+0x90>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8000ddc:	4b1a      	ldr	r3, [pc, #104]	@ (8000e48 <MX_UART7_Init+0x90>)
 8000dde:	220c      	movs	r2, #12
 8000de0:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000de2:	4b19      	ldr	r3, [pc, #100]	@ (8000e48 <MX_UART7_Init+0x90>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8000de8:	4b17      	ldr	r3, [pc, #92]	@ (8000e48 <MX_UART7_Init+0x90>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dee:	4b16      	ldr	r3, [pc, #88]	@ (8000e48 <MX_UART7_Init+0x90>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000df4:	4b14      	ldr	r3, [pc, #80]	@ (8000e48 <MX_UART7_Init+0x90>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dfa:	4b13      	ldr	r3, [pc, #76]	@ (8000e48 <MX_UART7_Init+0x90>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8000e00:	4811      	ldr	r0, [pc, #68]	@ (8000e48 <MX_UART7_Init+0x90>)
 8000e02:	f00c ff3b 	bl	800dc7c <HAL_UART_Init>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8000e0c:	f000 f99e 	bl	800114c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e10:	2100      	movs	r1, #0
 8000e12:	480d      	ldr	r0, [pc, #52]	@ (8000e48 <MX_UART7_Init+0x90>)
 8000e14:	f00e fbfe 	bl	800f614 <HAL_UARTEx_SetTxFifoThreshold>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 8000e1e:	f000 f995 	bl	800114c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e22:	2100      	movs	r1, #0
 8000e24:	4808      	ldr	r0, [pc, #32]	@ (8000e48 <MX_UART7_Init+0x90>)
 8000e26:	f00e fc33 	bl	800f690 <HAL_UARTEx_SetRxFifoThreshold>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8000e30:	f000 f98c 	bl	800114c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8000e34:	4804      	ldr	r0, [pc, #16]	@ (8000e48 <MX_UART7_Init+0x90>)
 8000e36:	f00e fbb4 	bl	800f5a2 <HAL_UARTEx_DisableFifoMode>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 8000e40:	f000 f984 	bl	800114c <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8000e44:	bf00      	nop
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	24000590 	.word	0x24000590
 8000e4c:	40007800 	.word	0x40007800

08000e50 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e54:	4b22      	ldr	r3, [pc, #136]	@ (8000ee0 <MX_USART2_UART_Init+0x90>)
 8000e56:	4a23      	ldr	r2, [pc, #140]	@ (8000ee4 <MX_USART2_UART_Init+0x94>)
 8000e58:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e5a:	4b21      	ldr	r3, [pc, #132]	@ (8000ee0 <MX_USART2_UART_Init+0x90>)
 8000e5c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e60:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e62:	4b1f      	ldr	r3, [pc, #124]	@ (8000ee0 <MX_USART2_UART_Init+0x90>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e68:	4b1d      	ldr	r3, [pc, #116]	@ (8000ee0 <MX_USART2_UART_Init+0x90>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e6e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ee0 <MX_USART2_UART_Init+0x90>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e74:	4b1a      	ldr	r3, [pc, #104]	@ (8000ee0 <MX_USART2_UART_Init+0x90>)
 8000e76:	220c      	movs	r2, #12
 8000e78:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e7a:	4b19      	ldr	r3, [pc, #100]	@ (8000ee0 <MX_USART2_UART_Init+0x90>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e80:	4b17      	ldr	r3, [pc, #92]	@ (8000ee0 <MX_USART2_UART_Init+0x90>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e86:	4b16      	ldr	r3, [pc, #88]	@ (8000ee0 <MX_USART2_UART_Init+0x90>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e8c:	4b14      	ldr	r3, [pc, #80]	@ (8000ee0 <MX_USART2_UART_Init+0x90>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e92:	4b13      	ldr	r3, [pc, #76]	@ (8000ee0 <MX_USART2_UART_Init+0x90>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e98:	4811      	ldr	r0, [pc, #68]	@ (8000ee0 <MX_USART2_UART_Init+0x90>)
 8000e9a:	f00c feef 	bl	800dc7c <HAL_UART_Init>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000ea4:	f000 f952 	bl	800114c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	480d      	ldr	r0, [pc, #52]	@ (8000ee0 <MX_USART2_UART_Init+0x90>)
 8000eac:	f00e fbb2 	bl	800f614 <HAL_UARTEx_SetTxFifoThreshold>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000eb6:	f000 f949 	bl	800114c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000eba:	2100      	movs	r1, #0
 8000ebc:	4808      	ldr	r0, [pc, #32]	@ (8000ee0 <MX_USART2_UART_Init+0x90>)
 8000ebe:	f00e fbe7 	bl	800f690 <HAL_UARTEx_SetRxFifoThreshold>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000ec8:	f000 f940 	bl	800114c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000ecc:	4804      	ldr	r0, [pc, #16]	@ (8000ee0 <MX_USART2_UART_Init+0x90>)
 8000ece:	f00e fb68 	bl	800f5a2 <HAL_UARTEx_DisableFifoMode>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000ed8:	f000 f938 	bl	800114c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000edc:	bf00      	nop
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	24000624 	.word	0x24000624
 8000ee4:	40004400 	.word	0x40004400

08000ee8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000eee:	4b15      	ldr	r3, [pc, #84]	@ (8000f44 <MX_DMA_Init+0x5c>)
 8000ef0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ef4:	4a13      	ldr	r2, [pc, #76]	@ (8000f44 <MX_DMA_Init+0x5c>)
 8000ef6:	f043 0301 	orr.w	r3, r3, #1
 8000efa:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000efe:	4b11      	ldr	r3, [pc, #68]	@ (8000f44 <MX_DMA_Init+0x5c>)
 8000f00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000f04:	f003 0301 	and.w	r3, r3, #1
 8000f08:	607b      	str	r3, [r7, #4]
 8000f0a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	2100      	movs	r1, #0
 8000f10:	200b      	movs	r0, #11
 8000f12:	f002 fcd2 	bl	80038ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000f16:	200b      	movs	r0, #11
 8000f18:	f002 fce9 	bl	80038ee <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	2100      	movs	r1, #0
 8000f20:	200c      	movs	r0, #12
 8000f22:	f002 fcca 	bl	80038ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000f26:	200c      	movs	r0, #12
 8000f28:	f002 fce1 	bl	80038ee <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	2100      	movs	r1, #0
 8000f30:	200d      	movs	r0, #13
 8000f32:	f002 fcc2 	bl	80038ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000f36:	200d      	movs	r0, #13
 8000f38:	f002 fcd9 	bl	80038ee <HAL_NVIC_EnableIRQ>

}
 8000f3c:	bf00      	nop
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	58024400 	.word	0x58024400

08000f48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b08c      	sub	sp, #48	@ 0x30
 8000f4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f4e:	f107 031c 	add.w	r3, r7, #28
 8000f52:	2200      	movs	r2, #0
 8000f54:	601a      	str	r2, [r3, #0]
 8000f56:	605a      	str	r2, [r3, #4]
 8000f58:	609a      	str	r2, [r3, #8]
 8000f5a:	60da      	str	r2, [r3, #12]
 8000f5c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f5e:	4b60      	ldr	r3, [pc, #384]	@ (80010e0 <MX_GPIO_Init+0x198>)
 8000f60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f64:	4a5e      	ldr	r2, [pc, #376]	@ (80010e0 <MX_GPIO_Init+0x198>)
 8000f66:	f043 0304 	orr.w	r3, r3, #4
 8000f6a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f6e:	4b5c      	ldr	r3, [pc, #368]	@ (80010e0 <MX_GPIO_Init+0x198>)
 8000f70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f74:	f003 0304 	and.w	r3, r3, #4
 8000f78:	61bb      	str	r3, [r7, #24]
 8000f7a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f7c:	4b58      	ldr	r3, [pc, #352]	@ (80010e0 <MX_GPIO_Init+0x198>)
 8000f7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f82:	4a57      	ldr	r2, [pc, #348]	@ (80010e0 <MX_GPIO_Init+0x198>)
 8000f84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f88:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f8c:	4b54      	ldr	r3, [pc, #336]	@ (80010e0 <MX_GPIO_Init+0x198>)
 8000f8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f96:	617b      	str	r3, [r7, #20]
 8000f98:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f9a:	4b51      	ldr	r3, [pc, #324]	@ (80010e0 <MX_GPIO_Init+0x198>)
 8000f9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fa0:	4a4f      	ldr	r2, [pc, #316]	@ (80010e0 <MX_GPIO_Init+0x198>)
 8000fa2:	f043 0301 	orr.w	r3, r3, #1
 8000fa6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000faa:	4b4d      	ldr	r3, [pc, #308]	@ (80010e0 <MX_GPIO_Init+0x198>)
 8000fac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fb0:	f003 0301 	and.w	r3, r3, #1
 8000fb4:	613b      	str	r3, [r7, #16]
 8000fb6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fb8:	4b49      	ldr	r3, [pc, #292]	@ (80010e0 <MX_GPIO_Init+0x198>)
 8000fba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fbe:	4a48      	ldr	r2, [pc, #288]	@ (80010e0 <MX_GPIO_Init+0x198>)
 8000fc0:	f043 0308 	orr.w	r3, r3, #8
 8000fc4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fc8:	4b45      	ldr	r3, [pc, #276]	@ (80010e0 <MX_GPIO_Init+0x198>)
 8000fca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fce:	f003 0308 	and.w	r3, r3, #8
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd6:	4b42      	ldr	r3, [pc, #264]	@ (80010e0 <MX_GPIO_Init+0x198>)
 8000fd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fdc:	4a40      	ldr	r2, [pc, #256]	@ (80010e0 <MX_GPIO_Init+0x198>)
 8000fde:	f043 0302 	orr.w	r3, r3, #2
 8000fe2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fe6:	4b3e      	ldr	r3, [pc, #248]	@ (80010e0 <MX_GPIO_Init+0x198>)
 8000fe8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fec:	f003 0302 	and.w	r3, r3, #2
 8000ff0:	60bb      	str	r3, [r7, #8]
 8000ff2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ff4:	4b3a      	ldr	r3, [pc, #232]	@ (80010e0 <MX_GPIO_Init+0x198>)
 8000ff6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ffa:	4a39      	ldr	r2, [pc, #228]	@ (80010e0 <MX_GPIO_Init+0x198>)
 8000ffc:	f043 0310 	orr.w	r3, r3, #16
 8001000:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001004:	4b36      	ldr	r3, [pc, #216]	@ (80010e0 <MX_GPIO_Init+0x198>)
 8001006:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800100a:	f003 0310 	and.w	r3, r3, #16
 800100e:	607b      	str	r3, [r7, #4]
 8001010:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, bypass_Pin|reset_Pin, GPIO_PIN_RESET);
 8001012:	2200      	movs	r2, #0
 8001014:	f248 0140 	movw	r1, #32832	@ 0x8040
 8001018:	4832      	ldr	r0, [pc, #200]	@ (80010e4 <MX_GPIO_Init+0x19c>)
 800101a:	f005 fd01 	bl	8006a20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 800101e:	2200      	movs	r2, #0
 8001020:	f24f 0111 	movw	r1, #61457	@ 0xf011
 8001024:	4830      	ldr	r0, [pc, #192]	@ (80010e8 <MX_GPIO_Init+0x1a0>)
 8001026:	f005 fcfb 	bl	8006a20 <HAL_GPIO_WritePin>
                          |select_Pin|MODBUS_nWR2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800102a:	2200      	movs	r2, #0
 800102c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001030:	482e      	ldr	r0, [pc, #184]	@ (80010ec <MX_GPIO_Init+0x1a4>)
 8001032:	f005 fcf5 	bl	8006a20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, GPIO_PIN_RESET);
 8001036:	2200      	movs	r2, #0
 8001038:	2101      	movs	r1, #1
 800103a:	482d      	ldr	r0, [pc, #180]	@ (80010f0 <MX_GPIO_Init+0x1a8>)
 800103c:	f005 fcf0 	bl	8006a20 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : bypass_Pin reset_Pin */
  GPIO_InitStruct.Pin = bypass_Pin|reset_Pin;
 8001040:	f248 0340 	movw	r3, #32832	@ 0x8040
 8001044:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001046:	2301      	movs	r3, #1
 8001048:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104a:	2300      	movs	r3, #0
 800104c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104e:	2300      	movs	r3, #0
 8001050:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001052:	f107 031c 	add.w	r3, r7, #28
 8001056:	4619      	mov	r1, r3
 8001058:	4822      	ldr	r0, [pc, #136]	@ (80010e4 <MX_GPIO_Init+0x19c>)
 800105a:	f005 fb31 	bl	80066c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15
                           select_Pin MODBUS_nWR2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 800105e:	f24f 0311 	movw	r3, #61457	@ 0xf011
 8001062:	61fb      	str	r3, [r7, #28]
                          |select_Pin|MODBUS_nWR2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001064:	2301      	movs	r3, #1
 8001066:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001068:	2300      	movs	r3, #0
 800106a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106c:	2300      	movs	r3, #0
 800106e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001070:	f107 031c 	add.w	r3, r7, #28
 8001074:	4619      	mov	r1, r3
 8001076:	481c      	ldr	r0, [pc, #112]	@ (80010e8 <MX_GPIO_Init+0x1a0>)
 8001078:	f005 fb22 	bl	80066c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800107c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001080:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001082:	2302      	movs	r3, #2
 8001084:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001086:	2300      	movs	r3, #0
 8001088:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108a:	2300      	movs	r3, #0
 800108c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800108e:	2309      	movs	r3, #9
 8001090:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001092:	f107 031c 	add.w	r3, r7, #28
 8001096:	4619      	mov	r1, r3
 8001098:	4812      	ldr	r0, [pc, #72]	@ (80010e4 <MX_GPIO_Init+0x19c>)
 800109a:	f005 fb11 	bl	80066c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800109e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80010a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a4:	2301      	movs	r3, #1
 80010a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a8:	2300      	movs	r3, #0
 80010aa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ac:	2300      	movs	r3, #0
 80010ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b0:	f107 031c 	add.w	r3, r7, #28
 80010b4:	4619      	mov	r1, r3
 80010b6:	480d      	ldr	r0, [pc, #52]	@ (80010ec <MX_GPIO_Init+0x1a4>)
 80010b8:	f005 fb02 	bl	80066c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80010bc:	2301      	movs	r3, #1
 80010be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c0:	2301      	movs	r3, #1
 80010c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c4:	2300      	movs	r3, #0
 80010c6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c8:	2300      	movs	r3, #0
 80010ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010cc:	f107 031c 	add.w	r3, r7, #28
 80010d0:	4619      	mov	r1, r3
 80010d2:	4807      	ldr	r0, [pc, #28]	@ (80010f0 <MX_GPIO_Init+0x1a8>)
 80010d4:	f005 faf4 	bl	80066c0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010d8:	bf00      	nop
 80010da:	3730      	adds	r7, #48	@ 0x30
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	58024400 	.word	0x58024400
 80010e4:	58020000 	.word	0x58020000
 80010e8:	58020c00 	.word	0x58020c00
 80010ec:	58020400 	.word	0x58020400
 80010f0:	58021000 	.word	0x58021000

080010f4 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80010fa:	463b      	mov	r3, r7
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	605a      	str	r2, [r3, #4]
 8001102:	609a      	str	r2, [r3, #8]
 8001104:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001106:	f002 fc0d 	bl	8003924 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800110a:	2301      	movs	r3, #1
 800110c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800110e:	2300      	movs	r3, #0
 8001110:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001112:	2300      	movs	r3, #0
 8001114:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001116:	231f      	movs	r3, #31
 8001118:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800111a:	2387      	movs	r3, #135	@ 0x87
 800111c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800111e:	2300      	movs	r3, #0
 8001120:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001122:	2300      	movs	r3, #0
 8001124:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001126:	2301      	movs	r3, #1
 8001128:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800112a:	2301      	movs	r3, #1
 800112c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800112e:	2300      	movs	r3, #0
 8001130:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001132:	2300      	movs	r3, #0
 8001134:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001136:	463b      	mov	r3, r7
 8001138:	4618      	mov	r0, r3
 800113a:	f002 fc2b 	bl	8003994 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800113e:	2004      	movs	r0, #4
 8001140:	f002 fc08 	bl	8003954 <HAL_MPU_Enable>

}
 8001144:	bf00      	nop
 8001146:	3710      	adds	r7, #16
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}

0800114c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001150:	b672      	cpsid	i
}
 8001152:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001154:	bf00      	nop
 8001156:	e7fd      	b.n	8001154 <Error_Handler+0x8>

08001158 <modbus_send_data>:
static void resetArray(uint8_t *arr, size_t size)
{
  memset(arr, 0, size);
}
void modbus_send_data(uint8_t *data,uint8_t num)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	460b      	mov	r3, r1
 8001162:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(MODBUS_GPIO_WRITE_PORT,MODBUS_WRITE_PORT,GPIO_PIN_SET);
 8001164:	2201      	movs	r2, #1
 8001166:	2110      	movs	r1, #16
 8001168:	4809      	ldr	r0, [pc, #36]	@ (8001190 <modbus_send_data+0x38>)
 800116a:	f005 fc59 	bl	8006a20 <HAL_GPIO_WritePin>
	HAL_UART_Transmit(&huart2,data,num,100);
 800116e:	78fb      	ldrb	r3, [r7, #3]
 8001170:	b29a      	uxth	r2, r3
 8001172:	2364      	movs	r3, #100	@ 0x64
 8001174:	6879      	ldr	r1, [r7, #4]
 8001176:	4807      	ldr	r0, [pc, #28]	@ (8001194 <modbus_send_data+0x3c>)
 8001178:	f00c fdd0 	bl	800dd1c <HAL_UART_Transmit>
	HAL_GPIO_WritePin(MODBUS_GPIO_WRITE_PORT,MODBUS_WRITE_PORT,GPIO_PIN_RESET);
 800117c:	2200      	movs	r2, #0
 800117e:	2110      	movs	r1, #16
 8001180:	4803      	ldr	r0, [pc, #12]	@ (8001190 <modbus_send_data+0x38>)
 8001182:	f005 fc4d 	bl	8006a20 <HAL_GPIO_WritePin>
}
 8001186:	bf00      	nop
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	58020c00 	.word	0x58020c00
 8001194:	24000624 	.word	0x24000624

08001198 <modbus_respone_data>:
void modbus_respone_data()
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b086      	sub	sp, #24
 800119c:	af00      	add	r7, sp, #0
	uint8_t slave_id_ = 1;
 800119e:	2301      	movs	r3, #1
 80011a0:	72fb      	strb	r3, [r7, #11]
	if(slave_id_ == modbus_receive[0])
 80011a2:	4b31      	ldr	r3, [pc, #196]	@ (8001268 <modbus_respone_data+0xd0>)
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	7afa      	ldrb	r2, [r7, #11]
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d159      	bne.n	8001260 <modbus_respone_data+0xc8>
	{
		uint16_t start_addr = (modbus_receive[2] << 8) | modbus_receive[3]; // start address
 80011ac:	4b2e      	ldr	r3, [pc, #184]	@ (8001268 <modbus_respone_data+0xd0>)
 80011ae:	789b      	ldrb	r3, [r3, #2]
 80011b0:	021b      	lsls	r3, r3, #8
 80011b2:	b21a      	sxth	r2, r3
 80011b4:	4b2c      	ldr	r3, [pc, #176]	@ (8001268 <modbus_respone_data+0xd0>)
 80011b6:	78db      	ldrb	r3, [r3, #3]
 80011b8:	b21b      	sxth	r3, r3
 80011ba:	4313      	orrs	r3, r2
 80011bc:	b21b      	sxth	r3, r3
 80011be:	82fb      	strh	r3, [r7, #22]
    uint16_t num_registers = (modbus_receive[4] << 8) | modbus_receive[5]; // number of registers
 80011c0:	4b29      	ldr	r3, [pc, #164]	@ (8001268 <modbus_respone_data+0xd0>)
 80011c2:	791b      	ldrb	r3, [r3, #4]
 80011c4:	021b      	lsls	r3, r3, #8
 80011c6:	b21a      	sxth	r2, r3
 80011c8:	4b27      	ldr	r3, [pc, #156]	@ (8001268 <modbus_respone_data+0xd0>)
 80011ca:	795b      	ldrb	r3, [r3, #5]
 80011cc:	b21b      	sxth	r3, r3
 80011ce:	4313      	orrs	r3, r2
 80011d0:	b21b      	sxth	r3, r3
 80011d2:	813b      	strh	r3, [r7, #8]
		modbus_send[0] = MODBUS_ID;  // slave ID
 80011d4:	4b25      	ldr	r3, [pc, #148]	@ (800126c <modbus_respone_data+0xd4>)
 80011d6:	2201      	movs	r2, #1
 80011d8:	701a      	strb	r2, [r3, #0]
	  modbus_send[1] = HOLDING_REGISTERS_READ_FUCTION_CODE;  // function code
 80011da:	4b24      	ldr	r3, [pc, #144]	@ (800126c <modbus_respone_data+0xd4>)
 80011dc:	2203      	movs	r2, #3
 80011de:	705a      	strb	r2, [r3, #1]
	  modbus_send[2] = num_registers*2;  // Byte count
 80011e0:	893b      	ldrh	r3, [r7, #8]
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	b2da      	uxtb	r2, r3
 80011e8:	4b20      	ldr	r3, [pc, #128]	@ (800126c <modbus_respone_data+0xd4>)
 80011ea:	709a      	strb	r2, [r3, #2]
		int indx = 3;  // we need to keep track of how many bytes has been stored in TxData Buffer
 80011ec:	2303      	movs	r3, #3
 80011ee:	613b      	str	r3, [r7, #16]

		for (int i=0; i<num_registers; i++)   // Load the actual data into TxData buffer
 80011f0:	2300      	movs	r3, #0
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	e013      	b.n	800121e <modbus_respone_data+0x86>
		{
			modbus_send[indx++] = (modbus_database[start_addr]>>8)&0xFF;  // extract the higher byte
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	1c5a      	adds	r2, r3, #1
 80011fa:	613a      	str	r2, [r7, #16]
 80011fc:	4a1b      	ldr	r2, [pc, #108]	@ (800126c <modbus_respone_data+0xd4>)
 80011fe:	2100      	movs	r1, #0
 8001200:	54d1      	strb	r1, [r2, r3]
			modbus_send[indx++] = (modbus_database[start_addr])&0xFF;   // extract the lower byte
 8001202:	8afa      	ldrh	r2, [r7, #22]
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	1c59      	adds	r1, r3, #1
 8001208:	6139      	str	r1, [r7, #16]
 800120a:	4919      	ldr	r1, [pc, #100]	@ (8001270 <modbus_respone_data+0xd8>)
 800120c:	5c89      	ldrb	r1, [r1, r2]
 800120e:	4a17      	ldr	r2, [pc, #92]	@ (800126c <modbus_respone_data+0xd4>)
 8001210:	54d1      	strb	r1, [r2, r3]
			start_addr++;  // increment the register address
 8001212:	8afb      	ldrh	r3, [r7, #22]
 8001214:	3301      	adds	r3, #1
 8001216:	82fb      	strh	r3, [r7, #22]
		for (int i=0; i<num_registers; i++)   // Load the actual data into TxData buffer
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	3301      	adds	r3, #1
 800121c:	60fb      	str	r3, [r7, #12]
 800121e:	893b      	ldrh	r3, [r7, #8]
 8001220:	68fa      	ldr	r2, [r7, #12]
 8001222:	429a      	cmp	r2, r3
 8001224:	dbe7      	blt.n	80011f6 <modbus_respone_data+0x5e>
		}
	uint16_t crc = crc16(modbus_send, num_registers);
 8001226:	893b      	ldrh	r3, [r7, #8]
 8001228:	4619      	mov	r1, r3
 800122a:	4810      	ldr	r0, [pc, #64]	@ (800126c <modbus_respone_data+0xd4>)
 800122c:	f000 f866 	bl	80012fc <crc16>
 8001230:	4603      	mov	r3, r0
 8001232:	80fb      	strh	r3, [r7, #6]
	modbus_send[num_registers] = crc&0xFF;   // CRC LOW
 8001234:	893b      	ldrh	r3, [r7, #8]
 8001236:	88fa      	ldrh	r2, [r7, #6]
 8001238:	b2d1      	uxtb	r1, r2
 800123a:	4a0c      	ldr	r2, [pc, #48]	@ (800126c <modbus_respone_data+0xd4>)
 800123c:	54d1      	strb	r1, [r2, r3]
	modbus_send[num_registers+1] = (crc>>8)&0xFF;  // CRC HIGH
 800123e:	88fb      	ldrh	r3, [r7, #6]
 8001240:	0a1b      	lsrs	r3, r3, #8
 8001242:	b29a      	uxth	r2, r3
 8001244:	893b      	ldrh	r3, [r7, #8]
 8001246:	3301      	adds	r3, #1
 8001248:	b2d1      	uxtb	r1, r2
 800124a:	4a08      	ldr	r2, [pc, #32]	@ (800126c <modbus_respone_data+0xd4>)
 800124c:	54d1      	strb	r1, [r2, r3]
	num_registers = num_registers+2;
 800124e:	893b      	ldrh	r3, [r7, #8]
 8001250:	3302      	adds	r3, #2
 8001252:	813b      	strh	r3, [r7, #8]
	modbus_send_data(modbus_send,num_registers);  // send data... CRC will be calculated in the function itself
 8001254:	893b      	ldrh	r3, [r7, #8]
 8001256:	b2db      	uxtb	r3, r3
 8001258:	4619      	mov	r1, r3
 800125a:	4804      	ldr	r0, [pc, #16]	@ (800126c <modbus_respone_data+0xd4>)
 800125c:	f7ff ff7c 	bl	8001158 <modbus_send_data>
	}
}
 8001260:	bf00      	nop
 8001262:	3718      	adds	r7, #24
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	240006cc 	.word	0x240006cc
 800126c:	240006b8 	.word	0x240006b8
 8001270:	240006f8 	.word	0x240006f8

08001274 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	460b      	mov	r3, r1
 800127e:	807b      	strh	r3, [r7, #2]
		if (huart->Instance == USART1)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a19      	ldr	r2, [pc, #100]	@ (80012ec <HAL_UARTEx_RxEventCallback+0x78>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d12b      	bne.n	80012e2 <HAL_UARTEx_RxEventCallback+0x6e>
    {
			  if (is_requesting)
 800128a:	4b19      	ldr	r3, [pc, #100]	@ (80012f0 <HAL_UARTEx_RxEventCallback+0x7c>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d025      	beq.n	80012de <HAL_UARTEx_RxEventCallback+0x6a>
        {
           uint8_t numRegisters = modbus_receive[2] / 2;
 8001292:	4b18      	ldr	r3, [pc, #96]	@ (80012f4 <HAL_UARTEx_RxEventCallback+0x80>)
 8001294:	789b      	ldrb	r3, [r3, #2]
 8001296:	085b      	lsrs	r3, r3, #1
 8001298:	73bb      	strb	r3, [r7, #14]
           for (uint8_t i = 0; i < numRegisters; i++)
 800129a:	2300      	movs	r3, #0
 800129c:	73fb      	strb	r3, [r7, #15]
 800129e:	e016      	b.n	80012ce <HAL_UARTEx_RxEventCallback+0x5a>
           {
               final_data[i] = (modbus_receive[3 + (i * 2)] << 8) | modbus_receive[4 + (i * 2)];
 80012a0:	7bfb      	ldrb	r3, [r7, #15]
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	3303      	adds	r3, #3
 80012a6:	4a13      	ldr	r2, [pc, #76]	@ (80012f4 <HAL_UARTEx_RxEventCallback+0x80>)
 80012a8:	5cd3      	ldrb	r3, [r2, r3]
 80012aa:	021b      	lsls	r3, r3, #8
 80012ac:	b21a      	sxth	r2, r3
 80012ae:	7bfb      	ldrb	r3, [r7, #15]
 80012b0:	3302      	adds	r3, #2
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	490f      	ldr	r1, [pc, #60]	@ (80012f4 <HAL_UARTEx_RxEventCallback+0x80>)
 80012b6:	5ccb      	ldrb	r3, [r1, r3]
 80012b8:	b21b      	sxth	r3, r3
 80012ba:	4313      	orrs	r3, r2
 80012bc:	b21a      	sxth	r2, r3
 80012be:	7bfb      	ldrb	r3, [r7, #15]
 80012c0:	b291      	uxth	r1, r2
 80012c2:	4a0d      	ldr	r2, [pc, #52]	@ (80012f8 <HAL_UARTEx_RxEventCallback+0x84>)
 80012c4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
           for (uint8_t i = 0; i < numRegisters; i++)
 80012c8:	7bfb      	ldrb	r3, [r7, #15]
 80012ca:	3301      	adds	r3, #1
 80012cc:	73fb      	strb	r3, [r7, #15]
 80012ce:	7bfa      	ldrb	r2, [r7, #15]
 80012d0:	7bbb      	ldrb	r3, [r7, #14]
 80012d2:	429a      	cmp	r2, r3
 80012d4:	d3e4      	bcc.n	80012a0 <HAL_UARTEx_RxEventCallback+0x2c>
           }
           is_requesting = 0;
 80012d6:	4b06      	ldr	r3, [pc, #24]	@ (80012f0 <HAL_UARTEx_RxEventCallback+0x7c>)
 80012d8:	2200      	movs	r2, #0
 80012da:	701a      	strb	r2, [r3, #0]
        else
        {
           modbus_respone_data();
        }
    }
}
 80012dc:	e001      	b.n	80012e2 <HAL_UARTEx_RxEventCallback+0x6e>
           modbus_respone_data();
 80012de:	f7ff ff5b 	bl	8001198 <modbus_respone_data>
}
 80012e2:	bf00      	nop
 80012e4:	3710      	adds	r7, #16
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	40011000 	.word	0x40011000
 80012f0:	240006f4 	.word	0x240006f4
 80012f4:	240006cc 	.word	0x240006cc
 80012f8:	240006e0 	.word	0x240006e0

080012fc <crc16>:
    0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42,
    0x43, 0x83, 0x41, 0x81, 0x80, 0x40
};

uint16_t crc16(uint8_t *buffer, uint16_t buffer_length)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b085      	sub	sp, #20
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	460b      	mov	r3, r1
 8001306:	807b      	strh	r3, [r7, #2]
    uint8_t crc_hi = 0xFF; /* high CRC byte initialized */
 8001308:	23ff      	movs	r3, #255	@ 0xff
 800130a:	73fb      	strb	r3, [r7, #15]
    uint8_t crc_lo = 0xFF; /* low CRC byte initialized */
 800130c:	23ff      	movs	r3, #255	@ 0xff
 800130e:	73bb      	strb	r3, [r7, #14]
    unsigned int i; /* will index into CRC lookup */

    /* pass through message buffer */
    while (buffer_length--) {
 8001310:	e013      	b.n	800133a <crc16+0x3e>
        i = crc_lo ^ *buffer++; /* calculate the CRC  */
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	1c5a      	adds	r2, r3, #1
 8001316:	607a      	str	r2, [r7, #4]
 8001318:	781a      	ldrb	r2, [r3, #0]
 800131a:	7bbb      	ldrb	r3, [r7, #14]
 800131c:	4053      	eors	r3, r2
 800131e:	b2db      	uxtb	r3, r3
 8001320:	60bb      	str	r3, [r7, #8]
        crc_lo = crc_hi ^ table_crc_hi[i];
 8001322:	4a0f      	ldr	r2, [pc, #60]	@ (8001360 <crc16+0x64>)
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	4413      	add	r3, r2
 8001328:	781a      	ldrb	r2, [r3, #0]
 800132a:	7bfb      	ldrb	r3, [r7, #15]
 800132c:	4053      	eors	r3, r2
 800132e:	73bb      	strb	r3, [r7, #14]
        crc_hi = table_crc_lo[i];
 8001330:	4a0c      	ldr	r2, [pc, #48]	@ (8001364 <crc16+0x68>)
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	4413      	add	r3, r2
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	73fb      	strb	r3, [r7, #15]
    while (buffer_length--) {
 800133a:	887b      	ldrh	r3, [r7, #2]
 800133c:	1e5a      	subs	r2, r3, #1
 800133e:	807a      	strh	r2, [r7, #2]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d1e6      	bne.n	8001312 <crc16+0x16>
    }

    return (crc_hi << 8 | crc_lo);
 8001344:	7bfb      	ldrb	r3, [r7, #15]
 8001346:	021b      	lsls	r3, r3, #8
 8001348:	b21a      	sxth	r2, r3
 800134a:	7bbb      	ldrb	r3, [r7, #14]
 800134c:	b21b      	sxth	r3, r3
 800134e:	4313      	orrs	r3, r2
 8001350:	b21b      	sxth	r3, r3
 8001352:	b29b      	uxth	r3, r3
}
 8001354:	4618      	mov	r0, r3
 8001356:	3714      	adds	r7, #20
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr
 8001360:	080123a8 	.word	0x080123a8
 8001364:	080124a8 	.word	0x080124a8

08001368 <Control_Init>:
 PI_V PIVarV;
 PI_Ib PIVarIb;
 PI_Ic PIVarIc;
 Ratel RL;
 SystemState sysState;
void Control_Init(void) {
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
    // Initialize hardware peripherals (PWM, ADC, etc.) here

    // Initialize parameters
    iParas.count = 0;
 800136c:	4bb8      	ldr	r3, [pc, #736]	@ (8001650 <Control_Init+0x2e8>)
 800136e:	2200      	movs	r2, #0
 8001370:	671a      	str	r2, [r3, #112]	@ 0x70
    iParas.RL = 0.1;
 8001372:	49b7      	ldr	r1, [pc, #732]	@ (8001650 <Control_Init+0x2e8>)
 8001374:	a39e      	add	r3, pc, #632	@ (adr r3, 80015f0 <Control_Init+0x288>)
 8001376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800137a:	e9c1 2300 	strd	r2, r3, [r1]
    iParas.C = 1e-3;       // Replaced pow(10,-3) with 1e-3
 800137e:	49b4      	ldr	r1, [pc, #720]	@ (8001650 <Control_Init+0x2e8>)
 8001380:	a39d      	add	r3, pc, #628	@ (adr r3, 80015f8 <Control_Init+0x290>)
 8001382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001386:	e9c1 2304 	strd	r2, r3, [r1, #16]
    iParas.L = 100e-6;     // Replaced 100*pow(10,-6)
 800138a:	49b1      	ldr	r1, [pc, #708]	@ (8001650 <Control_Init+0x2e8>)
 800138c:	a39c      	add	r3, pc, #624	@ (adr r3, 8001600 <Control_Init+0x298>)
 800138e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001392:	e9c1 2302 	strd	r2, r3, [r1, #8]
    iParas.r_ds = 7.5e-3;
 8001396:	49ae      	ldr	r1, [pc, #696]	@ (8001650 <Control_Init+0x2e8>)
 8001398:	a39b      	add	r3, pc, #620	@ (adr r3, 8001608 <Control_Init+0x2a0>)
 800139a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800139e:	e9c1 2308 	strd	r2, r3, [r1, #32]
    iParas.r_f = 6.3e-3;
 80013a2:	49ab      	ldr	r1, [pc, #684]	@ (8001650 <Control_Init+0x2e8>)
 80013a4:	a39a      	add	r3, pc, #616	@ (adr r3, 8001610 <Control_Init+0x2a8>)
 80013a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013aa:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    iParas.V_f = 0.7;
 80013ae:	49a8      	ldr	r1, [pc, #672]	@ (8001650 <Control_Init+0x2e8>)
 80013b0:	a399      	add	r3, pc, #612	@ (adr r3, 8001618 <Control_Init+0x2b0>)
 80013b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b6:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    iParas.Imax = 2;
 80013ba:	49a5      	ldr	r1, [pc, #660]	@ (8001650 <Control_Init+0x2e8>)
 80013bc:	f04f 0200 	mov.w	r2, #0
 80013c0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80013c4:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    iParas.Vmax = 30;
 80013c8:	49a1      	ldr	r1, [pc, #644]	@ (8001650 <Control_Init+0x2e8>)
 80013ca:	f04f 0200 	mov.w	r2, #0
 80013ce:	4ba1      	ldr	r3, [pc, #644]	@ (8001654 <Control_Init+0x2ec>)
 80013d0:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    // Switching frequency
    convParas.Fsw = 200000;
 80013d4:	49a0      	ldr	r1, [pc, #640]	@ (8001658 <Control_Init+0x2f0>)
 80013d6:	a392      	add	r3, pc, #584	@ (adr r3, 8001620 <Control_Init+0x2b8>)
 80013d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013dc:	e9c1 2300 	strd	r2, r3, [r1]
    convParas.Td = 1.0/convParas.Fsw;
 80013e0:	4b9d      	ldr	r3, [pc, #628]	@ (8001658 <Control_Init+0x2f0>)
 80013e2:	ed93 6b00 	vldr	d6, [r3]
 80013e6:	eeb7 5b00 	vmov.f64	d5, #112	@ 0x3f800000  1.0
 80013ea:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80013ee:	4b9a      	ldr	r3, [pc, #616]	@ (8001658 <Control_Init+0x2f0>)
 80013f0:	ed83 7b02 	vstr	d7, [r3, #8]
    convParas.Tfi = 1.0/(5*convParas.Fsw);
 80013f4:	4b98      	ldr	r3, [pc, #608]	@ (8001658 <Control_Init+0x2f0>)
 80013f6:	ed93 7b00 	vldr	d7, [r3]
 80013fa:	eeb1 6b04 	vmov.f64	d6, #20	@ 0x40a00000  5.0
 80013fe:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001402:	eeb7 5b00 	vmov.f64	d5, #112	@ 0x3f800000  1.0
 8001406:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800140a:	4b93      	ldr	r3, [pc, #588]	@ (8001658 <Control_Init+0x2f0>)
 800140c:	ed83 7b04 	vstr	d7, [r3, #16]

    // PI voltage controller
    PIVarV.Tsv = 0.1/convParas.Fsw;
 8001410:	4b91      	ldr	r3, [pc, #580]	@ (8001658 <Control_Init+0x2f0>)
 8001412:	ed93 6b00 	vldr	d6, [r3]
 8001416:	ed9f 5b76 	vldr	d5, [pc, #472]	@ 80015f0 <Control_Init+0x288>
 800141a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800141e:	4b8f      	ldr	r3, [pc, #572]	@ (800165c <Control_Init+0x2f4>)
 8001420:	ed83 7b1c 	vstr	d7, [r3, #112]	@ 0x70
    PIVarV.Kpv = 0.05;
 8001424:	498d      	ldr	r1, [pc, #564]	@ (800165c <Control_Init+0x2f4>)
 8001426:	a380      	add	r3, pc, #512	@ (adr r3, 8001628 <Control_Init+0x2c0>)
 8001428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800142c:	e9c1 2300 	strd	r2, r3, [r1]
    PIVarV.Kiv = 0.14;
 8001430:	498a      	ldr	r1, [pc, #552]	@ (800165c <Control_Init+0x2f4>)
 8001432:	a37f      	add	r3, pc, #508	@ (adr r3, 8001630 <Control_Init+0x2c8>)
 8001434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001438:	e9c1 2304 	strd	r2, r3, [r1, #16]
    PIVarV.Tiv = 1.0/PIVarV.Kiv;
 800143c:	4b87      	ldr	r3, [pc, #540]	@ (800165c <Control_Init+0x2f4>)
 800143e:	ed93 6b04 	vldr	d6, [r3, #16]
 8001442:	eeb7 5b00 	vmov.f64	d5, #112	@ 0x3f800000  1.0
 8001446:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800144a:	4b84      	ldr	r3, [pc, #528]	@ (800165c <Control_Init+0x2f4>)
 800144c:	ed83 7b06 	vstr	d7, [r3, #24]
    PIVarV.Dv = 1-PIVarV.Tsv/PIVarV.Tiv;
 8001450:	4b82      	ldr	r3, [pc, #520]	@ (800165c <Control_Init+0x2f4>)
 8001452:	ed93 5b1c 	vldr	d5, [r3, #112]	@ 0x70
 8001456:	4b81      	ldr	r3, [pc, #516]	@ (800165c <Control_Init+0x2f4>)
 8001458:	ed93 6b06 	vldr	d6, [r3, #24]
 800145c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001460:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8001464:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001468:	4b7c      	ldr	r3, [pc, #496]	@ (800165c <Control_Init+0x2f4>)
 800146a:	ed83 7b08 	vstr	d7, [r3, #32]
    PIVarV.uk_1_v = 0; PIVarV.uk_v = 0; PIVarV.usk_1_v = 0;
 800146e:	497b      	ldr	r1, [pc, #492]	@ (800165c <Control_Init+0x2f4>)
 8001470:	f04f 0200 	mov.w	r2, #0
 8001474:	f04f 0300 	mov.w	r3, #0
 8001478:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
 800147c:	4977      	ldr	r1, [pc, #476]	@ (800165c <Control_Init+0x2f4>)
 800147e:	f04f 0200 	mov.w	r2, #0
 8001482:	f04f 0300 	mov.w	r3, #0
 8001486:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
 800148a:	4974      	ldr	r1, [pc, #464]	@ (800165c <Control_Init+0x2f4>)
 800148c:	f04f 0200 	mov.w	r2, #0
 8001490:	f04f 0300 	mov.w	r3, #0
 8001494:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    PIVarV.ek_v = 0; PIVarV.ek_1_v = 0; PIVarV.esk_v = 0; PIVarV.esk_1_v = 0;
 8001498:	4970      	ldr	r1, [pc, #448]	@ (800165c <Control_Init+0x2f4>)
 800149a:	f04f 0200 	mov.w	r2, #0
 800149e:	f04f 0300 	mov.w	r3, #0
 80014a2:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
 80014a6:	496d      	ldr	r1, [pc, #436]	@ (800165c <Control_Init+0x2f4>)
 80014a8:	f04f 0200 	mov.w	r2, #0
 80014ac:	f04f 0300 	mov.w	r3, #0
 80014b0:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
 80014b4:	4969      	ldr	r1, [pc, #420]	@ (800165c <Control_Init+0x2f4>)
 80014b6:	f04f 0200 	mov.w	r2, #0
 80014ba:	f04f 0300 	mov.w	r3, #0
 80014be:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 80014c2:	4966      	ldr	r1, [pc, #408]	@ (800165c <Control_Init+0x2f4>)
 80014c4:	f04f 0200 	mov.w	r2, #0
 80014c8:	f04f 0300 	mov.w	r3, #0
 80014cc:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
    PIVarV.uMax_v = iParas.Vmax; PIVarV.uMin_v = -PIVarV.uMax_v;
 80014d0:	4b5f      	ldr	r3, [pc, #380]	@ (8001650 <Control_Init+0x2e8>)
 80014d2:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80014d6:	4961      	ldr	r1, [pc, #388]	@ (800165c <Control_Init+0x2f4>)
 80014d8:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
 80014dc:	4b5f      	ldr	r3, [pc, #380]	@ (800165c <Control_Init+0x2f4>)
 80014de:	ed93 7b18 	vldr	d7, [r3, #96]	@ 0x60
 80014e2:	eeb1 7b47 	vneg.f64	d7, d7
 80014e6:	4b5d      	ldr	r3, [pc, #372]	@ (800165c <Control_Init+0x2f4>)
 80014e8:	ed83 7b1a 	vstr	d7, [r3, #104]	@ 0x68

    // PI battery current controller
    PIVarIb.Tsb = 10.0/convParas.Fsw;
 80014ec:	4b5a      	ldr	r3, [pc, #360]	@ (8001658 <Control_Init+0x2f0>)
 80014ee:	ed93 6b00 	vldr	d6, [r3]
 80014f2:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 80014f6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80014fa:	4b59      	ldr	r3, [pc, #356]	@ (8001660 <Control_Init+0x2f8>)
 80014fc:	ed83 7b1c 	vstr	d7, [r3, #112]	@ 0x70
    PIVarIb.Kpb = -0.04;
 8001500:	4957      	ldr	r1, [pc, #348]	@ (8001660 <Control_Init+0x2f8>)
 8001502:	a34d      	add	r3, pc, #308	@ (adr r3, 8001638 <Control_Init+0x2d0>)
 8001504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001508:	e9c1 2300 	strd	r2, r3, [r1]
    PIVarIb.Kib = -0.05;
 800150c:	4954      	ldr	r1, [pc, #336]	@ (8001660 <Control_Init+0x2f8>)
 800150e:	a34c      	add	r3, pc, #304	@ (adr r3, 8001640 <Control_Init+0x2d8>)
 8001510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001514:	e9c1 2304 	strd	r2, r3, [r1, #16]
    PIVarIb.Tib = 1.0/PIVarIb.Kib;
 8001518:	4b51      	ldr	r3, [pc, #324]	@ (8001660 <Control_Init+0x2f8>)
 800151a:	ed93 6b04 	vldr	d6, [r3, #16]
 800151e:	eeb7 5b00 	vmov.f64	d5, #112	@ 0x3f800000  1.0
 8001522:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001526:	4b4e      	ldr	r3, [pc, #312]	@ (8001660 <Control_Init+0x2f8>)
 8001528:	ed83 7b06 	vstr	d7, [r3, #24]
    PIVarIb.Db = 1-PIVarIb.Tsb/PIVarIb.Tib;
 800152c:	4b4c      	ldr	r3, [pc, #304]	@ (8001660 <Control_Init+0x2f8>)
 800152e:	ed93 5b1c 	vldr	d5, [r3, #112]	@ 0x70
 8001532:	4b4b      	ldr	r3, [pc, #300]	@ (8001660 <Control_Init+0x2f8>)
 8001534:	ed93 6b06 	vldr	d6, [r3, #24]
 8001538:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800153c:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8001540:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001544:	4b46      	ldr	r3, [pc, #280]	@ (8001660 <Control_Init+0x2f8>)
 8001546:	ed83 7b08 	vstr	d7, [r3, #32]
    PIVarIb.uk_1_b = 0; PIVarIb.uk_b = 0; PIVarIb.usk_1_b = 0;
 800154a:	4945      	ldr	r1, [pc, #276]	@ (8001660 <Control_Init+0x2f8>)
 800154c:	f04f 0200 	mov.w	r2, #0
 8001550:	f04f 0300 	mov.w	r3, #0
 8001554:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
 8001558:	4941      	ldr	r1, [pc, #260]	@ (8001660 <Control_Init+0x2f8>)
 800155a:	f04f 0200 	mov.w	r2, #0
 800155e:	f04f 0300 	mov.w	r3, #0
 8001562:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
 8001566:	493e      	ldr	r1, [pc, #248]	@ (8001660 <Control_Init+0x2f8>)
 8001568:	f04f 0200 	mov.w	r2, #0
 800156c:	f04f 0300 	mov.w	r3, #0
 8001570:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    PIVarIb.ek_b = 0; PIVarIb.ek_1_b = 0; PIVarIb.esk_b = 0; PIVarIb.esk_1_b = 0;
 8001574:	493a      	ldr	r1, [pc, #232]	@ (8001660 <Control_Init+0x2f8>)
 8001576:	f04f 0200 	mov.w	r2, #0
 800157a:	f04f 0300 	mov.w	r3, #0
 800157e:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
 8001582:	4937      	ldr	r1, [pc, #220]	@ (8001660 <Control_Init+0x2f8>)
 8001584:	f04f 0200 	mov.w	r2, #0
 8001588:	f04f 0300 	mov.w	r3, #0
 800158c:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
 8001590:	4933      	ldr	r1, [pc, #204]	@ (8001660 <Control_Init+0x2f8>)
 8001592:	f04f 0200 	mov.w	r2, #0
 8001596:	f04f 0300 	mov.w	r3, #0
 800159a:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 800159e:	4930      	ldr	r1, [pc, #192]	@ (8001660 <Control_Init+0x2f8>)
 80015a0:	f04f 0200 	mov.w	r2, #0
 80015a4:	f04f 0300 	mov.w	r3, #0
 80015a8:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
    PIVarIb.iMax_b = iParas.Imax; PIVarIb.iMin_b = -PIVarIb.iMax_b;
 80015ac:	4b28      	ldr	r3, [pc, #160]	@ (8001650 <Control_Init+0x2e8>)
 80015ae:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80015b2:	492b      	ldr	r1, [pc, #172]	@ (8001660 <Control_Init+0x2f8>)
 80015b4:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
 80015b8:	4b29      	ldr	r3, [pc, #164]	@ (8001660 <Control_Init+0x2f8>)
 80015ba:	ed93 7b18 	vldr	d7, [r3, #96]	@ 0x60
 80015be:	eeb1 7b47 	vneg.f64	d7, d7
 80015c2:	4b27      	ldr	r3, [pc, #156]	@ (8001660 <Control_Init+0x2f8>)
 80015c4:	ed83 7b1a 	vstr	d7, [r3, #104]	@ 0x68

    // PI capacitor current controller
    PIVarIc.Tsc = 10.0/convParas.Fsw;
 80015c8:	4b23      	ldr	r3, [pc, #140]	@ (8001658 <Control_Init+0x2f0>)
 80015ca:	ed93 6b00 	vldr	d6, [r3]
 80015ce:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 80015d2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80015d6:	4b23      	ldr	r3, [pc, #140]	@ (8001664 <Control_Init+0x2fc>)
 80015d8:	ed83 7b1c 	vstr	d7, [r3, #112]	@ 0x70
    PIVarIc.Kpc = 1.33;
 80015dc:	4921      	ldr	r1, [pc, #132]	@ (8001664 <Control_Init+0x2fc>)
 80015de:	a31a      	add	r3, pc, #104	@ (adr r3, 8001648 <Control_Init+0x2e0>)
 80015e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e4:	e9c1 2300 	strd	r2, r3, [r1]
    PIVarIc.Kic = 10474;
 80015e8:	491e      	ldr	r1, [pc, #120]	@ (8001664 <Control_Init+0x2fc>)
 80015ea:	e03d      	b.n	8001668 <Control_Init+0x300>
 80015ec:	f3af 8000 	nop.w
 80015f0:	9999999a 	.word	0x9999999a
 80015f4:	3fb99999 	.word	0x3fb99999
 80015f8:	d2f1a9fc 	.word	0xd2f1a9fc
 80015fc:	3f50624d 	.word	0x3f50624d
 8001600:	eb1c432d 	.word	0xeb1c432d
 8001604:	3f1a36e2 	.word	0x3f1a36e2
 8001608:	eb851eb8 	.word	0xeb851eb8
 800160c:	3f7eb851 	.word	0x3f7eb851
 8001610:	5f6fd220 	.word	0x5f6fd220
 8001614:	3f79ce07 	.word	0x3f79ce07
 8001618:	66666666 	.word	0x66666666
 800161c:	3fe66666 	.word	0x3fe66666
 8001620:	00000000 	.word	0x00000000
 8001624:	41086a00 	.word	0x41086a00
 8001628:	9999999a 	.word	0x9999999a
 800162c:	3fa99999 	.word	0x3fa99999
 8001630:	1eb851ec 	.word	0x1eb851ec
 8001634:	3fc1eb85 	.word	0x3fc1eb85
 8001638:	47ae147b 	.word	0x47ae147b
 800163c:	bfa47ae1 	.word	0xbfa47ae1
 8001640:	9999999a 	.word	0x9999999a
 8001644:	bfa99999 	.word	0xbfa99999
 8001648:	147ae148 	.word	0x147ae148
 800164c:	3ff547ae 	.word	0x3ff547ae
 8001650:	24000730 	.word	0x24000730
 8001654:	403e0000 	.word	0x403e0000
 8001658:	240007a8 	.word	0x240007a8
 800165c:	240007f0 	.word	0x240007f0
 8001660:	24000868 	.word	0x24000868
 8001664:	240008e0 	.word	0x240008e0
 8001668:	a363      	add	r3, pc, #396	@ (adr r3, 80017f8 <Control_Init+0x490>)
 800166a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800166e:	e9c1 2304 	strd	r2, r3, [r1, #16]
    PIVarIc.Tic = 1.0/PIVarIc.Kic;
 8001672:	4b5b      	ldr	r3, [pc, #364]	@ (80017e0 <Control_Init+0x478>)
 8001674:	ed93 6b04 	vldr	d6, [r3, #16]
 8001678:	eeb7 5b00 	vmov.f64	d5, #112	@ 0x3f800000  1.0
 800167c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001680:	4b57      	ldr	r3, [pc, #348]	@ (80017e0 <Control_Init+0x478>)
 8001682:	ed83 7b06 	vstr	d7, [r3, #24]
    PIVarIc.Dc = 1-PIVarIc.Tsc/PIVarIc.Tic;
 8001686:	4b56      	ldr	r3, [pc, #344]	@ (80017e0 <Control_Init+0x478>)
 8001688:	ed93 5b1c 	vldr	d5, [r3, #112]	@ 0x70
 800168c:	4b54      	ldr	r3, [pc, #336]	@ (80017e0 <Control_Init+0x478>)
 800168e:	ed93 6b06 	vldr	d6, [r3, #24]
 8001692:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001696:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800169a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800169e:	4b50      	ldr	r3, [pc, #320]	@ (80017e0 <Control_Init+0x478>)
 80016a0:	ed83 7b08 	vstr	d7, [r3, #32]
    PIVarIc.uk_1_c = 0; PIVarIc.uk_c = 0; PIVarIc.usk_1_c = 0;
 80016a4:	494e      	ldr	r1, [pc, #312]	@ (80017e0 <Control_Init+0x478>)
 80016a6:	f04f 0200 	mov.w	r2, #0
 80016aa:	f04f 0300 	mov.w	r3, #0
 80016ae:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
 80016b2:	494b      	ldr	r1, [pc, #300]	@ (80017e0 <Control_Init+0x478>)
 80016b4:	f04f 0200 	mov.w	r2, #0
 80016b8:	f04f 0300 	mov.w	r3, #0
 80016bc:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
 80016c0:	4947      	ldr	r1, [pc, #284]	@ (80017e0 <Control_Init+0x478>)
 80016c2:	f04f 0200 	mov.w	r2, #0
 80016c6:	f04f 0300 	mov.w	r3, #0
 80016ca:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    PIVarIc.ek_c = 0; PIVarIc.ek_1_c = 0; PIVarIc.esk_c = 0; PIVarIc.esk_1_c = 0;
 80016ce:	4944      	ldr	r1, [pc, #272]	@ (80017e0 <Control_Init+0x478>)
 80016d0:	f04f 0200 	mov.w	r2, #0
 80016d4:	f04f 0300 	mov.w	r3, #0
 80016d8:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
 80016dc:	4940      	ldr	r1, [pc, #256]	@ (80017e0 <Control_Init+0x478>)
 80016de:	f04f 0200 	mov.w	r2, #0
 80016e2:	f04f 0300 	mov.w	r3, #0
 80016e6:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
 80016ea:	493d      	ldr	r1, [pc, #244]	@ (80017e0 <Control_Init+0x478>)
 80016ec:	f04f 0200 	mov.w	r2, #0
 80016f0:	f04f 0300 	mov.w	r3, #0
 80016f4:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 80016f8:	4939      	ldr	r1, [pc, #228]	@ (80017e0 <Control_Init+0x478>)
 80016fa:	f04f 0200 	mov.w	r2, #0
 80016fe:	f04f 0300 	mov.w	r3, #0
 8001702:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
    PIVarIc.iMax_c = iParas.Imax; PIVarIc.iMin_c = -PIVarIc.iMax_c;
 8001706:	4b37      	ldr	r3, [pc, #220]	@ (80017e4 <Control_Init+0x47c>)
 8001708:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800170c:	4934      	ldr	r1, [pc, #208]	@ (80017e0 <Control_Init+0x478>)
 800170e:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
 8001712:	4b33      	ldr	r3, [pc, #204]	@ (80017e0 <Control_Init+0x478>)
 8001714:	ed93 7b18 	vldr	d7, [r3, #96]	@ 0x60
 8001718:	eeb1 7b47 	vneg.f64	d7, d7
 800171c:	4b30      	ldr	r3, [pc, #192]	@ (80017e0 <Control_Init+0x478>)
 800171e:	ed83 7b1a 	vstr	d7, [r3, #104]	@ 0x68

    // Low pass filter
    LP.tau = 10000;
 8001722:	4931      	ldr	r1, [pc, #196]	@ (80017e8 <Control_Init+0x480>)
 8001724:	a328      	add	r3, pc, #160	@ (adr r3, 80017c8 <Control_Init+0x460>)
 8001726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800172a:	e9c1 2300 	strd	r2, r3, [r1]
    LP.T = 10e-3;       // Replaced 10*pow(10,-3)
 800172e:	492e      	ldr	r1, [pc, #184]	@ (80017e8 <Control_Init+0x480>)
 8001730:	a327      	add	r3, pc, #156	@ (adr r3, 80017d0 <Control_Init+0x468>)
 8001732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001736:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    LP.ek_lp = 0; LP.ek_1_lp = 0;
 800173a:	492b      	ldr	r1, [pc, #172]	@ (80017e8 <Control_Init+0x480>)
 800173c:	f04f 0200 	mov.w	r2, #0
 8001740:	f04f 0300 	mov.w	r3, #0
 8001744:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8001748:	4927      	ldr	r1, [pc, #156]	@ (80017e8 <Control_Init+0x480>)
 800174a:	f04f 0200 	mov.w	r2, #0
 800174e:	f04f 0300 	mov.w	r3, #0
 8001752:	e9c1 2304 	strd	r2, r3, [r1, #16]
    LP.uk_lp = 0; LP.uk_1_lp = 0;
 8001756:	4924      	ldr	r1, [pc, #144]	@ (80017e8 <Control_Init+0x480>)
 8001758:	f04f 0200 	mov.w	r2, #0
 800175c:	f04f 0300 	mov.w	r3, #0
 8001760:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8001764:	4920      	ldr	r1, [pc, #128]	@ (80017e8 <Control_Init+0x480>)
 8001766:	f04f 0200 	mov.w	r2, #0
 800176a:	f04f 0300 	mov.w	r3, #0
 800176e:	e9c1 2308 	strd	r2, r3, [r1, #32]

    // Rate limit
    RL.count = 200000-1;
 8001772:	4b1e      	ldr	r3, [pc, #120]	@ (80017ec <Control_Init+0x484>)
 8001774:	4a1e      	ldr	r2, [pc, #120]	@ (80017f0 <Control_Init+0x488>)
 8001776:	619a      	str	r2, [r3, #24]
    RL.v = 20000;
 8001778:	4b1c      	ldr	r3, [pc, #112]	@ (80017ec <Control_Init+0x484>)
 800177a:	f644 6220 	movw	r2, #20000	@ 0x4e20
 800177e:	61da      	str	r2, [r3, #28]
    RL.bf1 = 0;
 8001780:	491a      	ldr	r1, [pc, #104]	@ (80017ec <Control_Init+0x484>)
 8001782:	f04f 0200 	mov.w	r2, #0
 8001786:	f04f 0300 	mov.w	r3, #0
 800178a:	e9c1 2300 	strd	r2, r3, [r1]
    RL.bf2 = 0;
 800178e:	4917      	ldr	r1, [pc, #92]	@ (80017ec <Control_Init+0x484>)
 8001790:	f04f 0200 	mov.w	r2, #0
 8001794:	f04f 0300 	mov.w	r3, #0
 8001798:	e9c1 2302 	strd	r2, r3, [r1, #8]
    RL.bf3 = 0;
 800179c:	4913      	ldr	r1, [pc, #76]	@ (80017ec <Control_Init+0x484>)
 800179e:	f04f 0200 	mov.w	r2, #0
 80017a2:	f04f 0300 	mov.w	r3, #0
 80017a6:	e9c1 2304 	strd	r2, r3, [r1, #16]


    //lowpass
    LP.T = 5e-7;
 80017aa:	490f      	ldr	r1, [pc, #60]	@ (80017e8 <Control_Init+0x480>)
 80017ac:	a30a      	add	r3, pc, #40	@ (adr r3, 80017d8 <Control_Init+0x470>)
 80017ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b2:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    //system state
    sysState = TU_0_DEN_12V;
 80017b6:	4b0f      	ldr	r3, [pc, #60]	@ (80017f4 <Control_Init+0x48c>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	701a      	strb	r2, [r3, #0]
}
 80017bc:	bf00      	nop
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	00000000 	.word	0x00000000
 80017cc:	40c38800 	.word	0x40c38800
 80017d0:	47ae147b 	.word	0x47ae147b
 80017d4:	3f847ae1 	.word	0x3f847ae1
 80017d8:	a0b5ed8d 	.word	0xa0b5ed8d
 80017dc:	3ea0c6f7 	.word	0x3ea0c6f7
 80017e0:	240008e0 	.word	0x240008e0
 80017e4:	24000730 	.word	0x24000730
 80017e8:	240007c0 	.word	0x240007c0
 80017ec:	24000958 	.word	0x24000958
 80017f0:	00030d3f 	.word	0x00030d3f
 80017f4:	24000978 	.word	0x24000978
 80017f8:	00000000 	.word	0x00000000
 80017fc:	40c47500 	.word	0x40c47500

08001800 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001806:	4b0a      	ldr	r3, [pc, #40]	@ (8001830 <HAL_MspInit+0x30>)
 8001808:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800180c:	4a08      	ldr	r2, [pc, #32]	@ (8001830 <HAL_MspInit+0x30>)
 800180e:	f043 0302 	orr.w	r3, r3, #2
 8001812:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001816:	4b06      	ldr	r3, [pc, #24]	@ (8001830 <HAL_MspInit+0x30>)
 8001818:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800181c:	f003 0302 	and.w	r3, r3, #2
 8001820:	607b      	str	r3, [r7, #4]
 8001822:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001824:	bf00      	nop
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	58024400 	.word	0x58024400

08001834 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b0bc      	sub	sp, #240	@ 0xf0
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800183c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	605a      	str	r2, [r3, #4]
 8001846:	609a      	str	r2, [r3, #8]
 8001848:	60da      	str	r2, [r3, #12]
 800184a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800184c:	f107 0318 	add.w	r3, r7, #24
 8001850:	22c0      	movs	r2, #192	@ 0xc0
 8001852:	2100      	movs	r1, #0
 8001854:	4618      	mov	r0, r3
 8001856:	f00e fd18 	bl	801028a <memset>
  if(hadc->Instance==ADC1)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a52      	ldr	r2, [pc, #328]	@ (80019a8 <HAL_ADC_MspInit+0x174>)
 8001860:	4293      	cmp	r3, r2
 8001862:	f040 809d 	bne.w	80019a0 <HAL_ADC_MspInit+0x16c>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001866:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800186a:	f04f 0300 	mov.w	r3, #0
 800186e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001872:	2304      	movs	r3, #4
 8001874:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 10;
 8001876:	230a      	movs	r3, #10
 8001878:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 800187a:	2302      	movs	r3, #2
 800187c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800187e:	2302      	movs	r3, #2
 8001880:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001882:	2302      	movs	r3, #2
 8001884:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001886:	23c0      	movs	r3, #192	@ 0xc0
 8001888:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800188a:	2320      	movs	r3, #32
 800188c:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800188e:	2300      	movs	r3, #0
 8001890:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001892:	2300      	movs	r3, #0
 8001894:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001898:	f107 0318 	add.w	r3, r7, #24
 800189c:	4618      	mov	r0, r3
 800189e:	f008 fc87 	bl	800a1b0 <HAL_RCCEx_PeriphCLKConfig>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 80018a8:	f7ff fc50 	bl	800114c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80018ac:	4b3f      	ldr	r3, [pc, #252]	@ (80019ac <HAL_ADC_MspInit+0x178>)
 80018ae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80018b2:	4a3e      	ldr	r2, [pc, #248]	@ (80019ac <HAL_ADC_MspInit+0x178>)
 80018b4:	f043 0320 	orr.w	r3, r3, #32
 80018b8:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80018bc:	4b3b      	ldr	r3, [pc, #236]	@ (80019ac <HAL_ADC_MspInit+0x178>)
 80018be:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80018c2:	f003 0320 	and.w	r3, r3, #32
 80018c6:	617b      	str	r3, [r7, #20]
 80018c8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ca:	4b38      	ldr	r3, [pc, #224]	@ (80019ac <HAL_ADC_MspInit+0x178>)
 80018cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018d0:	4a36      	ldr	r2, [pc, #216]	@ (80019ac <HAL_ADC_MspInit+0x178>)
 80018d2:	f043 0301 	orr.w	r3, r3, #1
 80018d6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018da:	4b34      	ldr	r3, [pc, #208]	@ (80019ac <HAL_ADC_MspInit+0x178>)
 80018dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018e0:	f003 0301 	and.w	r3, r3, #1
 80018e4:	613b      	str	r3, [r7, #16]
 80018e6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018e8:	4b30      	ldr	r3, [pc, #192]	@ (80019ac <HAL_ADC_MspInit+0x178>)
 80018ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018ee:	4a2f      	ldr	r2, [pc, #188]	@ (80019ac <HAL_ADC_MspInit+0x178>)
 80018f0:	f043 0304 	orr.w	r3, r3, #4
 80018f4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018f8:	4b2c      	ldr	r3, [pc, #176]	@ (80019ac <HAL_ADC_MspInit+0x178>)
 80018fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018fe:	f003 0304 	and.w	r3, r3, #4
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_INP18
    PA7     ------> ADC1_INP7
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|adc1_channel_7_isense_Pin;
 8001906:	2390      	movs	r3, #144	@ 0x90
 8001908:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800190c:	2303      	movs	r3, #3
 800190e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001912:	2300      	movs	r3, #0
 8001914:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001918:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800191c:	4619      	mov	r1, r3
 800191e:	4824      	ldr	r0, [pc, #144]	@ (80019b0 <HAL_ADC_MspInit+0x17c>)
 8001920:	f004 fece 	bl	80066c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = adc1_channel_4_voutsense_Pin|adc1_channel_8_vinsense_Pin;
 8001924:	2330      	movs	r3, #48	@ 0x30
 8001926:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800192a:	2303      	movs	r3, #3
 800192c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001930:	2300      	movs	r3, #0
 8001932:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001936:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800193a:	4619      	mov	r1, r3
 800193c:	481d      	ldr	r0, [pc, #116]	@ (80019b4 <HAL_ADC_MspInit+0x180>)
 800193e:	f004 febf 	bl	80066c0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8001942:	4b1d      	ldr	r3, [pc, #116]	@ (80019b8 <HAL_ADC_MspInit+0x184>)
 8001944:	4a1d      	ldr	r2, [pc, #116]	@ (80019bc <HAL_ADC_MspInit+0x188>)
 8001946:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001948:	4b1b      	ldr	r3, [pc, #108]	@ (80019b8 <HAL_ADC_MspInit+0x184>)
 800194a:	2209      	movs	r2, #9
 800194c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800194e:	4b1a      	ldr	r3, [pc, #104]	@ (80019b8 <HAL_ADC_MspInit+0x184>)
 8001950:	2200      	movs	r2, #0
 8001952:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001954:	4b18      	ldr	r3, [pc, #96]	@ (80019b8 <HAL_ADC_MspInit+0x184>)
 8001956:	2200      	movs	r2, #0
 8001958:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800195a:	4b17      	ldr	r3, [pc, #92]	@ (80019b8 <HAL_ADC_MspInit+0x184>)
 800195c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001960:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001962:	4b15      	ldr	r3, [pc, #84]	@ (80019b8 <HAL_ADC_MspInit+0x184>)
 8001964:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001968:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800196a:	4b13      	ldr	r3, [pc, #76]	@ (80019b8 <HAL_ADC_MspInit+0x184>)
 800196c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001970:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001972:	4b11      	ldr	r3, [pc, #68]	@ (80019b8 <HAL_ADC_MspInit+0x184>)
 8001974:	2200      	movs	r2, #0
 8001976:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001978:	4b0f      	ldr	r3, [pc, #60]	@ (80019b8 <HAL_ADC_MspInit+0x184>)
 800197a:	2200      	movs	r2, #0
 800197c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800197e:	4b0e      	ldr	r3, [pc, #56]	@ (80019b8 <HAL_ADC_MspInit+0x184>)
 8001980:	2200      	movs	r2, #0
 8001982:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001984:	480c      	ldr	r0, [pc, #48]	@ (80019b8 <HAL_ADC_MspInit+0x184>)
 8001986:	f002 f845 	bl	8003a14 <HAL_DMA_Init>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <HAL_ADC_MspInit+0x160>
    {
      Error_Handler();
 8001990:	f7ff fbdc 	bl	800114c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	4a08      	ldr	r2, [pc, #32]	@ (80019b8 <HAL_ADC_MspInit+0x184>)
 8001998:	64da      	str	r2, [r3, #76]	@ 0x4c
 800199a:	4a07      	ldr	r2, [pc, #28]	@ (80019b8 <HAL_ADC_MspInit+0x184>)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80019a0:	bf00      	nop
 80019a2:	37f0      	adds	r7, #240	@ 0xf0
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	40022000 	.word	0x40022000
 80019ac:	58024400 	.word	0x58024400
 80019b0:	58020000 	.word	0x58020000
 80019b4:	58020800 	.word	0x58020800
 80019b8:	24000268 	.word	0x24000268
 80019bc:	40020010 	.word	0x40020010

080019c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b0ba      	sub	sp, #232	@ 0xe8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	605a      	str	r2, [r3, #4]
 80019d2:	609a      	str	r2, [r3, #8]
 80019d4:	60da      	str	r2, [r3, #12]
 80019d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019d8:	f107 0310 	add.w	r3, r7, #16
 80019dc:	22c0      	movs	r2, #192	@ 0xc0
 80019de:	2100      	movs	r1, #0
 80019e0:	4618      	mov	r0, r3
 80019e2:	f00e fc52 	bl	801028a <memset>
  if(hi2c->Instance==I2C1)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a5c      	ldr	r2, [pc, #368]	@ (8001b5c <HAL_I2C_MspInit+0x19c>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	f040 80b0 	bne.w	8001b52 <HAL_I2C_MspInit+0x192>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80019f2:	f04f 0208 	mov.w	r2, #8
 80019f6:	f04f 0300 	mov.w	r3, #0
 80019fa:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80019fe:	2300      	movs	r3, #0
 8001a00:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a04:	f107 0310 	add.w	r3, r7, #16
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f008 fbd1 	bl	800a1b0 <HAL_RCCEx_PeriphCLKConfig>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <HAL_I2C_MspInit+0x58>
    {
      Error_Handler();
 8001a14:	f7ff fb9a 	bl	800114c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a18:	4b51      	ldr	r3, [pc, #324]	@ (8001b60 <HAL_I2C_MspInit+0x1a0>)
 8001a1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a1e:	4a50      	ldr	r2, [pc, #320]	@ (8001b60 <HAL_I2C_MspInit+0x1a0>)
 8001a20:	f043 0302 	orr.w	r3, r3, #2
 8001a24:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a28:	4b4d      	ldr	r3, [pc, #308]	@ (8001b60 <HAL_I2C_MspInit+0x1a0>)
 8001a2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a2e:	f003 0302 	and.w	r3, r3, #2
 8001a32:	60fb      	str	r3, [r7, #12]
 8001a34:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a36:	23c0      	movs	r3, #192	@ 0xc0
 8001a38:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a3c:	2312      	movs	r3, #18
 8001a3e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a42:	2301      	movs	r3, #1
 8001a44:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a4e:	2304      	movs	r3, #4
 8001a50:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a54:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001a58:	4619      	mov	r1, r3
 8001a5a:	4842      	ldr	r0, [pc, #264]	@ (8001b64 <HAL_I2C_MspInit+0x1a4>)
 8001a5c:	f004 fe30 	bl	80066c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a60:	4b3f      	ldr	r3, [pc, #252]	@ (8001b60 <HAL_I2C_MspInit+0x1a0>)
 8001a62:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001a66:	4a3e      	ldr	r2, [pc, #248]	@ (8001b60 <HAL_I2C_MspInit+0x1a0>)
 8001a68:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001a6c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001a70:	4b3b      	ldr	r3, [pc, #236]	@ (8001b60 <HAL_I2C_MspInit+0x1a0>)
 8001a72:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001a76:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a7a:	60bb      	str	r3, [r7, #8]
 8001a7c:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 8001a7e:	4b3a      	ldr	r3, [pc, #232]	@ (8001b68 <HAL_I2C_MspInit+0x1a8>)
 8001a80:	4a3a      	ldr	r2, [pc, #232]	@ (8001b6c <HAL_I2C_MspInit+0x1ac>)
 8001a82:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8001a84:	4b38      	ldr	r3, [pc, #224]	@ (8001b68 <HAL_I2C_MspInit+0x1a8>)
 8001a86:	2222      	movs	r2, #34	@ 0x22
 8001a88:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a8a:	4b37      	ldr	r3, [pc, #220]	@ (8001b68 <HAL_I2C_MspInit+0x1a8>)
 8001a8c:	2240      	movs	r2, #64	@ 0x40
 8001a8e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a90:	4b35      	ldr	r3, [pc, #212]	@ (8001b68 <HAL_I2C_MspInit+0x1a8>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a96:	4b34      	ldr	r3, [pc, #208]	@ (8001b68 <HAL_I2C_MspInit+0x1a8>)
 8001a98:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a9c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a9e:	4b32      	ldr	r3, [pc, #200]	@ (8001b68 <HAL_I2C_MspInit+0x1a8>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001aa4:	4b30      	ldr	r3, [pc, #192]	@ (8001b68 <HAL_I2C_MspInit+0x1a8>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001aaa:	4b2f      	ldr	r3, [pc, #188]	@ (8001b68 <HAL_I2C_MspInit+0x1a8>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001ab0:	4b2d      	ldr	r3, [pc, #180]	@ (8001b68 <HAL_I2C_MspInit+0x1a8>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ab6:	4b2c      	ldr	r3, [pc, #176]	@ (8001b68 <HAL_I2C_MspInit+0x1a8>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001abc:	482a      	ldr	r0, [pc, #168]	@ (8001b68 <HAL_I2C_MspInit+0x1a8>)
 8001abe:	f001 ffa9 	bl	8003a14 <HAL_DMA_Init>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <HAL_I2C_MspInit+0x10c>
    {
      Error_Handler();
 8001ac8:	f7ff fb40 	bl	800114c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	4a26      	ldr	r2, [pc, #152]	@ (8001b68 <HAL_I2C_MspInit+0x1a8>)
 8001ad0:	639a      	str	r2, [r3, #56]	@ 0x38
 8001ad2:	4a25      	ldr	r2, [pc, #148]	@ (8001b68 <HAL_I2C_MspInit+0x1a8>)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream2;
 8001ad8:	4b25      	ldr	r3, [pc, #148]	@ (8001b70 <HAL_I2C_MspInit+0x1b0>)
 8001ada:	4a26      	ldr	r2, [pc, #152]	@ (8001b74 <HAL_I2C_MspInit+0x1b4>)
 8001adc:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8001ade:	4b24      	ldr	r3, [pc, #144]	@ (8001b70 <HAL_I2C_MspInit+0x1b0>)
 8001ae0:	2221      	movs	r2, #33	@ 0x21
 8001ae2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ae4:	4b22      	ldr	r3, [pc, #136]	@ (8001b70 <HAL_I2C_MspInit+0x1b0>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001aea:	4b21      	ldr	r3, [pc, #132]	@ (8001b70 <HAL_I2C_MspInit+0x1b0>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001af0:	4b1f      	ldr	r3, [pc, #124]	@ (8001b70 <HAL_I2C_MspInit+0x1b0>)
 8001af2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001af6:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001af8:	4b1d      	ldr	r3, [pc, #116]	@ (8001b70 <HAL_I2C_MspInit+0x1b0>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001afe:	4b1c      	ldr	r3, [pc, #112]	@ (8001b70 <HAL_I2C_MspInit+0x1b0>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001b04:	4b1a      	ldr	r3, [pc, #104]	@ (8001b70 <HAL_I2C_MspInit+0x1b0>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b0a:	4b19      	ldr	r3, [pc, #100]	@ (8001b70 <HAL_I2C_MspInit+0x1b0>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b10:	4b17      	ldr	r3, [pc, #92]	@ (8001b70 <HAL_I2C_MspInit+0x1b0>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001b16:	4816      	ldr	r0, [pc, #88]	@ (8001b70 <HAL_I2C_MspInit+0x1b0>)
 8001b18:	f001 ff7c 	bl	8003a14 <HAL_DMA_Init>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <HAL_I2C_MspInit+0x166>
    {
      Error_Handler();
 8001b22:	f7ff fb13 	bl	800114c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4a11      	ldr	r2, [pc, #68]	@ (8001b70 <HAL_I2C_MspInit+0x1b0>)
 8001b2a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001b2c:	4a10      	ldr	r2, [pc, #64]	@ (8001b70 <HAL_I2C_MspInit+0x1b0>)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001b32:	2200      	movs	r2, #0
 8001b34:	2100      	movs	r1, #0
 8001b36:	201f      	movs	r0, #31
 8001b38:	f001 febf 	bl	80038ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001b3c:	201f      	movs	r0, #31
 8001b3e:	f001 fed6 	bl	80038ee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001b42:	2200      	movs	r2, #0
 8001b44:	2100      	movs	r1, #0
 8001b46:	2020      	movs	r0, #32
 8001b48:	f001 feb7 	bl	80038ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001b4c:	2020      	movs	r0, #32
 8001b4e:	f001 fece 	bl	80038ee <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001b52:	bf00      	nop
 8001b54:	37e8      	adds	r7, #232	@ 0xe8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	40005400 	.word	0x40005400
 8001b60:	58024400 	.word	0x58024400
 8001b64:	58020400 	.word	0x58020400
 8001b68:	24000334 	.word	0x24000334
 8001b6c:	40020028 	.word	0x40020028
 8001b70:	240003ac 	.word	0x240003ac
 8001b74:	40020040 	.word	0x40020040

08001b78 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b0ba      	sub	sp, #232	@ 0xe8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b80:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	605a      	str	r2, [r3, #4]
 8001b8a:	609a      	str	r2, [r3, #8]
 8001b8c:	60da      	str	r2, [r3, #12]
 8001b8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b90:	f107 0310 	add.w	r3, r7, #16
 8001b94:	22c0      	movs	r2, #192	@ 0xc0
 8001b96:	2100      	movs	r1, #0
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f00e fb76 	bl	801028a <memset>
  if(hspi->Instance==SPI3)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a2a      	ldr	r2, [pc, #168]	@ (8001c4c <HAL_SPI_MspInit+0xd4>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d14d      	bne.n	8001c44 <HAL_SPI_MspInit+0xcc>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8001ba8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001bac:	f04f 0300 	mov.w	r3, #0
 8001bb0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bb8:	f107 0310 	add.w	r3, r7, #16
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f008 faf7 	bl	800a1b0 <HAL_RCCEx_PeriphCLKConfig>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8001bc8:	f7ff fac0 	bl	800114c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001bcc:	4b20      	ldr	r3, [pc, #128]	@ (8001c50 <HAL_SPI_MspInit+0xd8>)
 8001bce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001bd2:	4a1f      	ldr	r2, [pc, #124]	@ (8001c50 <HAL_SPI_MspInit+0xd8>)
 8001bd4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001bd8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001bdc:	4b1c      	ldr	r3, [pc, #112]	@ (8001c50 <HAL_SPI_MspInit+0xd8>)
 8001bde:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001be2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001be6:	60fb      	str	r3, [r7, #12]
 8001be8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bea:	4b19      	ldr	r3, [pc, #100]	@ (8001c50 <HAL_SPI_MspInit+0xd8>)
 8001bec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bf0:	4a17      	ldr	r2, [pc, #92]	@ (8001c50 <HAL_SPI_MspInit+0xd8>)
 8001bf2:	f043 0304 	orr.w	r3, r3, #4
 8001bf6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001bfa:	4b15      	ldr	r3, [pc, #84]	@ (8001c50 <HAL_SPI_MspInit+0xd8>)
 8001bfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c00:	f003 0304 	and.w	r3, r3, #4
 8001c04:	60bb      	str	r3, [r7, #8]
 8001c06:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001c08:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001c0c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c10:	2302      	movs	r3, #2
 8001c12:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c16:	2300      	movs	r3, #0
 8001c18:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001c22:	2306      	movs	r3, #6
 8001c24:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c28:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	4809      	ldr	r0, [pc, #36]	@ (8001c54 <HAL_SPI_MspInit+0xdc>)
 8001c30:	f004 fd46 	bl	80066c0 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8001c34:	2200      	movs	r2, #0
 8001c36:	2100      	movs	r1, #0
 8001c38:	2033      	movs	r0, #51	@ 0x33
 8001c3a:	f001 fe3e 	bl	80038ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8001c3e:	2033      	movs	r0, #51	@ 0x33
 8001c40:	f001 fe55 	bl	80038ee <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001c44:	bf00      	nop
 8001c46:	37e8      	adds	r7, #232	@ 0xe8
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	40003c00 	.word	0x40003c00
 8001c50:	58024400 	.word	0x58024400
 8001c54:	58020800 	.word	0x58020800

08001c58 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b086      	sub	sp, #24
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a27      	ldr	r2, [pc, #156]	@ (8001d04 <HAL_TIM_Base_MspInit+0xac>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d10f      	bne.n	8001c8a <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c6a:	4b27      	ldr	r3, [pc, #156]	@ (8001d08 <HAL_TIM_Base_MspInit+0xb0>)
 8001c6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001c70:	4a25      	ldr	r2, [pc, #148]	@ (8001d08 <HAL_TIM_Base_MspInit+0xb0>)
 8001c72:	f043 0301 	orr.w	r3, r3, #1
 8001c76:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001c7a:	4b23      	ldr	r3, [pc, #140]	@ (8001d08 <HAL_TIM_Base_MspInit+0xb0>)
 8001c7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001c80:	f003 0301 	and.w	r3, r3, #1
 8001c84:	617b      	str	r3, [r7, #20]
 8001c86:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001c88:	e038      	b.n	8001cfc <HAL_TIM_Base_MspInit+0xa4>
  else if(htim_base->Instance==TIM2)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c92:	d117      	bne.n	8001cc4 <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c94:	4b1c      	ldr	r3, [pc, #112]	@ (8001d08 <HAL_TIM_Base_MspInit+0xb0>)
 8001c96:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c9a:	4a1b      	ldr	r2, [pc, #108]	@ (8001d08 <HAL_TIM_Base_MspInit+0xb0>)
 8001c9c:	f043 0301 	orr.w	r3, r3, #1
 8001ca0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001ca4:	4b18      	ldr	r3, [pc, #96]	@ (8001d08 <HAL_TIM_Base_MspInit+0xb0>)
 8001ca6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001caa:	f003 0301 	and.w	r3, r3, #1
 8001cae:	613b      	str	r3, [r7, #16]
 8001cb0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	2100      	movs	r1, #0
 8001cb6:	201c      	movs	r0, #28
 8001cb8:	f001 fdff 	bl	80038ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001cbc:	201c      	movs	r0, #28
 8001cbe:	f001 fe16 	bl	80038ee <HAL_NVIC_EnableIRQ>
}
 8001cc2:	e01b      	b.n	8001cfc <HAL_TIM_Base_MspInit+0xa4>
  else if(htim_base->Instance==TIM4)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a10      	ldr	r2, [pc, #64]	@ (8001d0c <HAL_TIM_Base_MspInit+0xb4>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d116      	bne.n	8001cfc <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001cce:	4b0e      	ldr	r3, [pc, #56]	@ (8001d08 <HAL_TIM_Base_MspInit+0xb0>)
 8001cd0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001cd4:	4a0c      	ldr	r2, [pc, #48]	@ (8001d08 <HAL_TIM_Base_MspInit+0xb0>)
 8001cd6:	f043 0304 	orr.w	r3, r3, #4
 8001cda:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001cde:	4b0a      	ldr	r3, [pc, #40]	@ (8001d08 <HAL_TIM_Base_MspInit+0xb0>)
 8001ce0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ce4:	f003 0304 	and.w	r3, r3, #4
 8001ce8:	60fb      	str	r3, [r7, #12]
 8001cea:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001cec:	2200      	movs	r2, #0
 8001cee:	2100      	movs	r1, #0
 8001cf0:	201e      	movs	r0, #30
 8001cf2:	f001 fde2 	bl	80038ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001cf6:	201e      	movs	r0, #30
 8001cf8:	f001 fdf9 	bl	80038ee <HAL_NVIC_EnableIRQ>
}
 8001cfc:	bf00      	nop
 8001cfe:	3718      	adds	r7, #24
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	40010000 	.word	0x40010000
 8001d08:	58024400 	.word	0x58024400
 8001d0c:	40000800 	.word	0x40000800

08001d10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b0bc      	sub	sp, #240	@ 0xf0
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d18:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	601a      	str	r2, [r3, #0]
 8001d20:	605a      	str	r2, [r3, #4]
 8001d22:	609a      	str	r2, [r3, #8]
 8001d24:	60da      	str	r2, [r3, #12]
 8001d26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d28:	f107 0318 	add.w	r3, r7, #24
 8001d2c:	22c0      	movs	r2, #192	@ 0xc0
 8001d2e:	2100      	movs	r1, #0
 8001d30:	4618      	mov	r0, r3
 8001d32:	f00e faaa 	bl	801028a <memset>
  if(huart->Instance==UART7)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a50      	ldr	r2, [pc, #320]	@ (8001e7c <HAL_UART_MspInit+0x16c>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d146      	bne.n	8001dce <HAL_UART_MspInit+0xbe>

  /* USER CODE END UART7_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8001d40:	f04f 0202 	mov.w	r2, #2
 8001d44:	f04f 0300 	mov.w	r3, #0
 8001d48:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d52:	f107 0318 	add.w	r3, r7, #24
 8001d56:	4618      	mov	r0, r3
 8001d58:	f008 fa2a 	bl	800a1b0 <HAL_RCCEx_PeriphCLKConfig>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001d62:	f7ff f9f3 	bl	800114c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8001d66:	4b46      	ldr	r3, [pc, #280]	@ (8001e80 <HAL_UART_MspInit+0x170>)
 8001d68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001d6c:	4a44      	ldr	r2, [pc, #272]	@ (8001e80 <HAL_UART_MspInit+0x170>)
 8001d6e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001d72:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001d76:	4b42      	ldr	r3, [pc, #264]	@ (8001e80 <HAL_UART_MspInit+0x170>)
 8001d78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001d7c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001d80:	617b      	str	r3, [r7, #20]
 8001d82:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d84:	4b3e      	ldr	r3, [pc, #248]	@ (8001e80 <HAL_UART_MspInit+0x170>)
 8001d86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d8a:	4a3d      	ldr	r2, [pc, #244]	@ (8001e80 <HAL_UART_MspInit+0x170>)
 8001d8c:	f043 0302 	orr.w	r3, r3, #2
 8001d90:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d94:	4b3a      	ldr	r3, [pc, #232]	@ (8001e80 <HAL_UART_MspInit+0x170>)
 8001d96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	613b      	str	r3, [r7, #16]
 8001da0:	693b      	ldr	r3, [r7, #16]
    /**UART7 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> UART7_RX
    PB4 (NJTRST)     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001da2:	2318      	movs	r3, #24
 8001da4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da8:	2302      	movs	r3, #2
 8001daa:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dae:	2300      	movs	r3, #0
 8001db0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db4:	2300      	movs	r3, #0
 8001db6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF11_UART7;
 8001dba:	230b      	movs	r3, #11
 8001dbc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dc0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	482f      	ldr	r0, [pc, #188]	@ (8001e84 <HAL_UART_MspInit+0x174>)
 8001dc8:	f004 fc7a 	bl	80066c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001dcc:	e052      	b.n	8001e74 <HAL_UART_MspInit+0x164>
  else if(huart->Instance==USART2)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a2d      	ldr	r2, [pc, #180]	@ (8001e88 <HAL_UART_MspInit+0x178>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d14d      	bne.n	8001e74 <HAL_UART_MspInit+0x164>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001dd8:	f04f 0202 	mov.w	r2, #2
 8001ddc:	f04f 0300 	mov.w	r3, #0
 8001de0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001de4:	2300      	movs	r3, #0
 8001de6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001dea:	f107 0318 	add.w	r3, r7, #24
 8001dee:	4618      	mov	r0, r3
 8001df0:	f008 f9de 	bl	800a1b0 <HAL_RCCEx_PeriphCLKConfig>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <HAL_UART_MspInit+0xee>
      Error_Handler();
 8001dfa:	f7ff f9a7 	bl	800114c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001dfe:	4b20      	ldr	r3, [pc, #128]	@ (8001e80 <HAL_UART_MspInit+0x170>)
 8001e00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e04:	4a1e      	ldr	r2, [pc, #120]	@ (8001e80 <HAL_UART_MspInit+0x170>)
 8001e06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e0a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001e0e:	4b1c      	ldr	r3, [pc, #112]	@ (8001e80 <HAL_UART_MspInit+0x170>)
 8001e10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e18:	60fb      	str	r3, [r7, #12]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e1c:	4b18      	ldr	r3, [pc, #96]	@ (8001e80 <HAL_UART_MspInit+0x170>)
 8001e1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e22:	4a17      	ldr	r2, [pc, #92]	@ (8001e80 <HAL_UART_MspInit+0x170>)
 8001e24:	f043 0308 	orr.w	r3, r3, #8
 8001e28:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e2c:	4b14      	ldr	r3, [pc, #80]	@ (8001e80 <HAL_UART_MspInit+0x170>)
 8001e2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e32:	f003 0308 	and.w	r3, r3, #8
 8001e36:	60bb      	str	r3, [r7, #8]
 8001e38:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MODBUS_TX2_Pin|MODBUS_RX2_Pin;
 8001e3a:	2360      	movs	r3, #96	@ 0x60
 8001e3c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e40:	2302      	movs	r3, #2
 8001e42:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e46:	2300      	movs	r3, #0
 8001e48:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e52:	2307      	movs	r3, #7
 8001e54:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e58:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	480b      	ldr	r0, [pc, #44]	@ (8001e8c <HAL_UART_MspInit+0x17c>)
 8001e60:	f004 fc2e 	bl	80066c0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001e64:	2200      	movs	r2, #0
 8001e66:	2100      	movs	r1, #0
 8001e68:	2026      	movs	r0, #38	@ 0x26
 8001e6a:	f001 fd26 	bl	80038ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001e6e:	2026      	movs	r0, #38	@ 0x26
 8001e70:	f001 fd3d 	bl	80038ee <HAL_NVIC_EnableIRQ>
}
 8001e74:	bf00      	nop
 8001e76:	37f0      	adds	r7, #240	@ 0xf0
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	40007800 	.word	0x40007800
 8001e80:	58024400 	.word	0x58024400
 8001e84:	58020400 	.word	0x58020400
 8001e88:	40004400 	.word	0x40004400
 8001e8c:	58020c00 	.word	0x58020c00

08001e90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e94:	bf00      	nop
 8001e96:	e7fd      	b.n	8001e94 <NMI_Handler+0x4>

08001e98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e9c:	bf00      	nop
 8001e9e:	e7fd      	b.n	8001e9c <HardFault_Handler+0x4>

08001ea0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ea4:	bf00      	nop
 8001ea6:	e7fd      	b.n	8001ea4 <MemManage_Handler+0x4>

08001ea8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001eac:	bf00      	nop
 8001eae:	e7fd      	b.n	8001eac <BusFault_Handler+0x4>

08001eb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001eb4:	bf00      	nop
 8001eb6:	e7fd      	b.n	8001eb4 <UsageFault_Handler+0x4>

08001eb8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ebc:	bf00      	nop
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr

08001ec6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001eca:	bf00      	nop
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ed8:	bf00      	nop
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr

08001ee2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ee6:	f000 fb23 	bl	8002530 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001eea:	bf00      	nop
 8001eec:	bd80      	pop	{r7, pc}
	...

08001ef0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001ef4:	4802      	ldr	r0, [pc, #8]	@ (8001f00 <DMA1_Stream0_IRQHandler+0x10>)
 8001ef6:	f003 f8b7 	bl	8005068 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001efa:	bf00      	nop
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	24000268 	.word	0x24000268

08001f04 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001f08:	4802      	ldr	r0, [pc, #8]	@ (8001f14 <DMA1_Stream1_IRQHandler+0x10>)
 8001f0a:	f003 f8ad 	bl	8005068 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001f0e:	bf00      	nop
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	24000334 	.word	0x24000334

08001f18 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001f1c:	4802      	ldr	r0, [pc, #8]	@ (8001f28 <DMA1_Stream2_IRQHandler+0x10>)
 8001f1e:	f003 f8a3 	bl	8005068 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001f22:	bf00      	nop
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	240003ac 	.word	0x240003ac

08001f2c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001f30:	4802      	ldr	r0, [pc, #8]	@ (8001f3c <TIM2_IRQHandler+0x10>)
 8001f32:	f00b fa8b 	bl	800d44c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001f36:	bf00      	nop
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	240004f8 	.word	0x240004f8

08001f40 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001f44:	4802      	ldr	r0, [pc, #8]	@ (8001f50 <TIM4_IRQHandler+0x10>)
 8001f46:	f00b fa81 	bl	800d44c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001f4a:	bf00      	nop
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	24000544 	.word	0x24000544

08001f54 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001f58:	4802      	ldr	r0, [pc, #8]	@ (8001f64 <I2C1_EV_IRQHandler+0x10>)
 8001f5a:	f005 f817 	bl	8006f8c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001f5e:	bf00      	nop
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	240002e0 	.word	0x240002e0

08001f68 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001f6c:	4802      	ldr	r0, [pc, #8]	@ (8001f78 <I2C1_ER_IRQHandler+0x10>)
 8001f6e:	f005 f827 	bl	8006fc0 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001f72:	bf00      	nop
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	240002e0 	.word	0x240002e0

08001f7c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001f80:	4802      	ldr	r0, [pc, #8]	@ (8001f8c <USART2_IRQHandler+0x10>)
 8001f82:	f00b ff59 	bl	800de38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001f86:	bf00      	nop
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	24000624 	.word	0x24000624

08001f90 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8001f94:	4802      	ldr	r0, [pc, #8]	@ (8001fa0 <SPI3_IRQHandler+0x10>)
 8001f96:	f00a ff2d 	bl	800cdf4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8001f9a:	bf00      	nop
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	24000424 	.word	0x24000424

08001fa4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  return 1;
 8001fa8:	2301      	movs	r3, #1
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <_kill>:

int _kill(int pid, int sig)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001fbe:	f00e f9b7 	bl	8010330 <__errno>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2216      	movs	r2, #22
 8001fc6:	601a      	str	r2, [r3, #0]
  return -1;
 8001fc8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3708      	adds	r7, #8
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <_exit>:

void _exit (int status)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001fdc:	f04f 31ff 	mov.w	r1, #4294967295
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f7ff ffe7 	bl	8001fb4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001fe6:	bf00      	nop
 8001fe8:	e7fd      	b.n	8001fe6 <_exit+0x12>

08001fea <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fea:	b580      	push	{r7, lr}
 8001fec:	b086      	sub	sp, #24
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	60f8      	str	r0, [r7, #12]
 8001ff2:	60b9      	str	r1, [r7, #8]
 8001ff4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	617b      	str	r3, [r7, #20]
 8001ffa:	e00a      	b.n	8002012 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ffc:	f3af 8000 	nop.w
 8002000:	4601      	mov	r1, r0
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	1c5a      	adds	r2, r3, #1
 8002006:	60ba      	str	r2, [r7, #8]
 8002008:	b2ca      	uxtb	r2, r1
 800200a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	3301      	adds	r3, #1
 8002010:	617b      	str	r3, [r7, #20]
 8002012:	697a      	ldr	r2, [r7, #20]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	429a      	cmp	r2, r3
 8002018:	dbf0      	blt.n	8001ffc <_read+0x12>
  }

  return len;
 800201a:	687b      	ldr	r3, [r7, #4]
}
 800201c:	4618      	mov	r0, r3
 800201e:	3718      	adds	r7, #24
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}

08002024 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b086      	sub	sp, #24
 8002028:	af00      	add	r7, sp, #0
 800202a:	60f8      	str	r0, [r7, #12]
 800202c:	60b9      	str	r1, [r7, #8]
 800202e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002030:	2300      	movs	r3, #0
 8002032:	617b      	str	r3, [r7, #20]
 8002034:	e009      	b.n	800204a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	1c5a      	adds	r2, r3, #1
 800203a:	60ba      	str	r2, [r7, #8]
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	4618      	mov	r0, r3
 8002040:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	3301      	adds	r3, #1
 8002048:	617b      	str	r3, [r7, #20]
 800204a:	697a      	ldr	r2, [r7, #20]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	429a      	cmp	r2, r3
 8002050:	dbf1      	blt.n	8002036 <_write+0x12>
  }
  return len;
 8002052:	687b      	ldr	r3, [r7, #4]
}
 8002054:	4618      	mov	r0, r3
 8002056:	3718      	adds	r7, #24
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}

0800205c <_close>:

int _close(int file)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002064:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002068:	4618      	mov	r0, r3
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002084:	605a      	str	r2, [r3, #4]
  return 0;
 8002086:	2300      	movs	r3, #0
}
 8002088:	4618      	mov	r0, r3
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <_isatty>:

int _isatty(int file)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800209c:	2301      	movs	r3, #1
}
 800209e:	4618      	mov	r0, r3
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr

080020aa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020aa:	b480      	push	{r7}
 80020ac:	b085      	sub	sp, #20
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	60f8      	str	r0, [r7, #12]
 80020b2:	60b9      	str	r1, [r7, #8]
 80020b4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80020b6:	2300      	movs	r3, #0
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3714      	adds	r7, #20
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b086      	sub	sp, #24
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020cc:	4a14      	ldr	r2, [pc, #80]	@ (8002120 <_sbrk+0x5c>)
 80020ce:	4b15      	ldr	r3, [pc, #84]	@ (8002124 <_sbrk+0x60>)
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020d8:	4b13      	ldr	r3, [pc, #76]	@ (8002128 <_sbrk+0x64>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d102      	bne.n	80020e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020e0:	4b11      	ldr	r3, [pc, #68]	@ (8002128 <_sbrk+0x64>)
 80020e2:	4a12      	ldr	r2, [pc, #72]	@ (800212c <_sbrk+0x68>)
 80020e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020e6:	4b10      	ldr	r3, [pc, #64]	@ (8002128 <_sbrk+0x64>)
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4413      	add	r3, r2
 80020ee:	693a      	ldr	r2, [r7, #16]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d207      	bcs.n	8002104 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020f4:	f00e f91c 	bl	8010330 <__errno>
 80020f8:	4603      	mov	r3, r0
 80020fa:	220c      	movs	r2, #12
 80020fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002102:	e009      	b.n	8002118 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002104:	4b08      	ldr	r3, [pc, #32]	@ (8002128 <_sbrk+0x64>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800210a:	4b07      	ldr	r3, [pc, #28]	@ (8002128 <_sbrk+0x64>)
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4413      	add	r3, r2
 8002112:	4a05      	ldr	r2, [pc, #20]	@ (8002128 <_sbrk+0x64>)
 8002114:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002116:	68fb      	ldr	r3, [r7, #12]
}
 8002118:	4618      	mov	r0, r3
 800211a:	3718      	adds	r7, #24
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	24080000 	.word	0x24080000
 8002124:	00000400 	.word	0x00000400
 8002128:	2400097c 	.word	0x2400097c
 800212c:	24000ae0 	.word	0x24000ae0

08002130 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002134:	4b37      	ldr	r3, [pc, #220]	@ (8002214 <SystemInit+0xe4>)
 8002136:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800213a:	4a36      	ldr	r2, [pc, #216]	@ (8002214 <SystemInit+0xe4>)
 800213c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002140:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002144:	4b34      	ldr	r3, [pc, #208]	@ (8002218 <SystemInit+0xe8>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 030f 	and.w	r3, r3, #15
 800214c:	2b06      	cmp	r3, #6
 800214e:	d807      	bhi.n	8002160 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002150:	4b31      	ldr	r3, [pc, #196]	@ (8002218 <SystemInit+0xe8>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f023 030f 	bic.w	r3, r3, #15
 8002158:	4a2f      	ldr	r2, [pc, #188]	@ (8002218 <SystemInit+0xe8>)
 800215a:	f043 0307 	orr.w	r3, r3, #7
 800215e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
	  RCC->CR |= RCC_CR_HSION;
 8002160:	4b2e      	ldr	r3, [pc, #184]	@ (800221c <SystemInit+0xec>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a2d      	ldr	r2, [pc, #180]	@ (800221c <SystemInit+0xec>)
 8002166:	f043 0301 	orr.w	r3, r3, #1
 800216a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800216c:	4b2b      	ldr	r3, [pc, #172]	@ (800221c <SystemInit+0xec>)
 800216e:	2200      	movs	r2, #0
 8002170:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002172:	4b2a      	ldr	r3, [pc, #168]	@ (800221c <SystemInit+0xec>)
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	4929      	ldr	r1, [pc, #164]	@ (800221c <SystemInit+0xec>)
 8002178:	4b29      	ldr	r3, [pc, #164]	@ (8002220 <SystemInit+0xf0>)
 800217a:	4013      	ands	r3, r2
 800217c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800217e:	4b26      	ldr	r3, [pc, #152]	@ (8002218 <SystemInit+0xe8>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0308 	and.w	r3, r3, #8
 8002186:	2b00      	cmp	r3, #0
 8002188:	d007      	beq.n	800219a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800218a:	4b23      	ldr	r3, [pc, #140]	@ (8002218 <SystemInit+0xe8>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f023 030f 	bic.w	r3, r3, #15
 8002192:	4a21      	ldr	r2, [pc, #132]	@ (8002218 <SystemInit+0xe8>)
 8002194:	f043 0307 	orr.w	r3, r3, #7
 8002198:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800219a:	4b20      	ldr	r3, [pc, #128]	@ (800221c <SystemInit+0xec>)
 800219c:	2200      	movs	r2, #0
 800219e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80021a0:	4b1e      	ldr	r3, [pc, #120]	@ (800221c <SystemInit+0xec>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80021a6:	4b1d      	ldr	r3, [pc, #116]	@ (800221c <SystemInit+0xec>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80021ac:	4b1b      	ldr	r3, [pc, #108]	@ (800221c <SystemInit+0xec>)
 80021ae:	4a1d      	ldr	r2, [pc, #116]	@ (8002224 <SystemInit+0xf4>)
 80021b0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80021b2:	4b1a      	ldr	r3, [pc, #104]	@ (800221c <SystemInit+0xec>)
 80021b4:	4a1c      	ldr	r2, [pc, #112]	@ (8002228 <SystemInit+0xf8>)
 80021b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80021b8:	4b18      	ldr	r3, [pc, #96]	@ (800221c <SystemInit+0xec>)
 80021ba:	4a1c      	ldr	r2, [pc, #112]	@ (800222c <SystemInit+0xfc>)
 80021bc:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80021be:	4b17      	ldr	r3, [pc, #92]	@ (800221c <SystemInit+0xec>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80021c4:	4b15      	ldr	r3, [pc, #84]	@ (800221c <SystemInit+0xec>)
 80021c6:	4a19      	ldr	r2, [pc, #100]	@ (800222c <SystemInit+0xfc>)
 80021c8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80021ca:	4b14      	ldr	r3, [pc, #80]	@ (800221c <SystemInit+0xec>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80021d0:	4b12      	ldr	r3, [pc, #72]	@ (800221c <SystemInit+0xec>)
 80021d2:	4a16      	ldr	r2, [pc, #88]	@ (800222c <SystemInit+0xfc>)
 80021d4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80021d6:	4b11      	ldr	r3, [pc, #68]	@ (800221c <SystemInit+0xec>)
 80021d8:	2200      	movs	r2, #0
 80021da:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80021dc:	4b0f      	ldr	r3, [pc, #60]	@ (800221c <SystemInit+0xec>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a0e      	ldr	r2, [pc, #56]	@ (800221c <SystemInit+0xec>)
 80021e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021e6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80021e8:	4b0c      	ldr	r3, [pc, #48]	@ (800221c <SystemInit+0xec>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80021ee:	4b10      	ldr	r3, [pc, #64]	@ (8002230 <SystemInit+0x100>)
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	4b10      	ldr	r3, [pc, #64]	@ (8002234 <SystemInit+0x104>)
 80021f4:	4013      	ands	r3, r2
 80021f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80021fa:	d202      	bcs.n	8002202 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80021fc:	4b0e      	ldr	r3, [pc, #56]	@ (8002238 <SystemInit+0x108>)
 80021fe:	2201      	movs	r2, #1
 8002200:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002202:	4b0e      	ldr	r3, [pc, #56]	@ (800223c <SystemInit+0x10c>)
 8002204:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002208:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800220a:	bf00      	nop
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr
 8002214:	e000ed00 	.word	0xe000ed00
 8002218:	52002000 	.word	0x52002000
 800221c:	58024400 	.word	0x58024400
 8002220:	eaf6ed7f 	.word	0xeaf6ed7f
 8002224:	02020200 	.word	0x02020200
 8002228:	01ff0000 	.word	0x01ff0000
 800222c:	01010280 	.word	0x01010280
 8002230:	5c001000 	.word	0x5c001000
 8002234:	ffff0000 	.word	0xffff0000
 8002238:	51008108 	.word	0x51008108
 800223c:	52004000 	.word	0x52004000

08002240 <HAL_TIM_PeriodElapsedCallback>:
// Use volatile for variables shared between ISR and main
volatile int check = 0;
volatile int a = 0;
static uint8_t eep_buf[2];
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b086      	sub	sp, #24
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM4)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a42      	ldr	r2, [pc, #264]	@ (8002358 <HAL_TIM_PeriodElapsedCallback+0x118>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d144      	bne.n	80022dc <HAL_TIM_PeriodElapsedCallback+0x9c>
    {
        if(check < a)
 8002252:	4b42      	ldr	r3, [pc, #264]	@ (800235c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	4b42      	ldr	r3, [pc, #264]	@ (8002360 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	429a      	cmp	r2, r3
 800225c:	da18      	bge.n	8002290 <HAL_TIM_PeriodElapsedCallback+0x50>
        {
//
        	            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 800225e:	2201      	movs	r2, #1
 8002260:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002264:	483f      	ldr	r0, [pc, #252]	@ (8002364 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8002266:	f004 fbdb 	bl	8006a20 <HAL_GPIO_WritePin>
        	            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 800226a:	2201      	movs	r2, #1
 800226c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002270:	483c      	ldr	r0, [pc, #240]	@ (8002364 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8002272:	f004 fbd5 	bl	8006a20 <HAL_GPIO_WritePin>
        	            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8002276:	2201      	movs	r2, #1
 8002278:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800227c:	4839      	ldr	r0, [pc, #228]	@ (8002364 <HAL_TIM_PeriodElapsedCallback+0x124>)
 800227e:	f004 fbcf 	bl	8006a20 <HAL_GPIO_WritePin>
        	            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8002282:	2201      	movs	r2, #1
 8002284:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002288:	4836      	ldr	r0, [pc, #216]	@ (8002364 <HAL_TIM_PeriodElapsedCallback+0x124>)
 800228a:	f004 fbc9 	bl	8006a20 <HAL_GPIO_WritePin>
 800228e:	e01f      	b.n	80022d0 <HAL_TIM_PeriodElapsedCallback+0x90>
//            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
//            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
//            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
//            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
        }
        else if (check < 20)  // Changed condition
 8002290:	4b32      	ldr	r3, [pc, #200]	@ (800235c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2b13      	cmp	r3, #19
 8002296:	dc18      	bgt.n	80022ca <HAL_TIM_PeriodElapsedCallback+0x8a>
        {

        	            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8002298:	2200      	movs	r2, #0
 800229a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800229e:	4831      	ldr	r0, [pc, #196]	@ (8002364 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80022a0:	f004 fbbe 	bl	8006a20 <HAL_GPIO_WritePin>
        	            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 80022a4:	2200      	movs	r2, #0
 80022a6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80022aa:	482e      	ldr	r0, [pc, #184]	@ (8002364 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80022ac:	f004 fbb8 	bl	8006a20 <HAL_GPIO_WritePin>
        	            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80022b0:	2200      	movs	r2, #0
 80022b2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80022b6:	482b      	ldr	r0, [pc, #172]	@ (8002364 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80022b8:	f004 fbb2 	bl	8006a20 <HAL_GPIO_WritePin>
        	            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80022bc:	2200      	movs	r2, #0
 80022be:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80022c2:	4828      	ldr	r0, [pc, #160]	@ (8002364 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80022c4:	f004 fbac 	bl	8006a20 <HAL_GPIO_WritePin>
 80022c8:	e002      	b.n	80022d0 <HAL_TIM_PeriodElapsedCallback+0x90>
//            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
//            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
        }
        else
        {
            check = 0;
 80022ca:	4b24      	ldr	r3, [pc, #144]	@ (800235c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]
        }

        check++;
 80022d0:	4b22      	ldr	r3, [pc, #136]	@ (800235c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	3301      	adds	r3, #1
 80022d6:	4a21      	ldr	r2, [pc, #132]	@ (800235c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80022d8:	6013      	str	r3, [r2, #0]
//    	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
//    	EEPROM_WriteByte(page_write_test_eeprom, 0, &data_write_test_eeprom, 1);
//    	page_write_test_eeprom++;
//    	data_write_test_eeprom++;
    }
}
 80022da:	e034      	b.n	8002346 <HAL_TIM_PeriodElapsedCallback+0x106>
    else if(htim->Instance == TIM2)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022e4:	d12f      	bne.n	8002346 <HAL_TIM_PeriodElapsedCallback+0x106>
        double is = isense;
 80022e6:	4b20      	ldr	r3, [pc, #128]	@ (8002368 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80022e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ec:	e9c7 2304 	strd	r2, r3, [r7, #16]
        int16_t q = (int16_t)(is * 100.0);      // 12.34 A -> 1234
 80022f0:	ed97 7b04 	vldr	d7, [r7, #16]
 80022f4:	ed9f 6b16 	vldr	d6, [pc, #88]	@ 8002350 <HAL_TIM_PeriodElapsedCallback+0x110>
 80022f8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80022fc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002300:	ee17 3a90 	vmov	r3, s15
 8002304:	81fb      	strh	r3, [r7, #14]
        eep_buf[0] = (uint8_t)(q & 0xFF);
 8002306:	89fb      	ldrh	r3, [r7, #14]
 8002308:	b2da      	uxtb	r2, r3
 800230a:	4b18      	ldr	r3, [pc, #96]	@ (800236c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 800230c:	701a      	strb	r2, [r3, #0]
        eep_buf[1] = (uint8_t)((q >> 8) & 0xFF);
 800230e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002312:	121b      	asrs	r3, r3, #8
 8002314:	b21b      	sxth	r3, r3
 8002316:	b2da      	uxtb	r2, r3
 8002318:	4b14      	ldr	r3, [pc, #80]	@ (800236c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 800231a:	705a      	strb	r2, [r3, #1]
    	EEPROM_WriteByte(page_of_eeprom_to_write_isense, 0, eep_buf, 2);
 800231c:	4b14      	ldr	r3, [pc, #80]	@ (8002370 <HAL_TIM_PeriodElapsedCallback+0x130>)
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	4618      	mov	r0, r3
 8002322:	2302      	movs	r3, #2
 8002324:	4a11      	ldr	r2, [pc, #68]	@ (800236c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8002326:	2100      	movs	r1, #0
 8002328:	f7fe f9c0 	bl	80006ac <EEPROM_WriteByte>
    	if(page_of_eeprom_to_write_isense == 64)
 800232c:	4b10      	ldr	r3, [pc, #64]	@ (8002370 <HAL_TIM_PeriodElapsedCallback+0x130>)
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	2b40      	cmp	r3, #64	@ 0x40
 8002332:	d102      	bne.n	800233a <HAL_TIM_PeriodElapsedCallback+0xfa>
    		page_of_eeprom_to_write_isense = 0;
 8002334:	4b0e      	ldr	r3, [pc, #56]	@ (8002370 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8002336:	2200      	movs	r2, #0
 8002338:	701a      	strb	r2, [r3, #0]
    	page_of_eeprom_to_write_isense++;
 800233a:	4b0d      	ldr	r3, [pc, #52]	@ (8002370 <HAL_TIM_PeriodElapsedCallback+0x130>)
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	3301      	adds	r3, #1
 8002340:	b2da      	uxtb	r2, r3
 8002342:	4b0b      	ldr	r3, [pc, #44]	@ (8002370 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8002344:	701a      	strb	r2, [r3, #0]
}
 8002346:	bf00      	nop
 8002348:	3718      	adds	r7, #24
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	00000000 	.word	0x00000000
 8002354:	40590000 	.word	0x40590000
 8002358:	40000800 	.word	0x40000800
 800235c:	24000980 	.word	0x24000980
 8002360:	24000984 	.word	0x24000984
 8002364:	58020c00 	.word	0x58020c00
 8002368:	240001f8 	.word	0x240001f8
 800236c:	24000988 	.word	0x24000988
 8002370:	24000200 	.word	0x24000200

08002374 <send_data_to_winform>:
 */
#include"winform.h"
#include"adc.h"
extern UART_HandleTypeDef huart7;
void send_data_to_winform(double isense, double voutsense, double vinsense, double vcbsense)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b0b2      	sub	sp, #200	@ 0xc8
 8002378:	af08      	add	r7, sp, #32
 800237a:	ed87 0b06 	vstr	d0, [r7, #24]
 800237e:	ed87 1b04 	vstr	d1, [r7, #16]
 8002382:	ed87 2b02 	vstr	d2, [r7, #8]
 8002386:	ed87 3b00 	vstr	d3, [r7]
    char msg[128]; // rộng hơn 50 để đủ chỗ cho nhãn + đơn vị + separator
    int len = snprintf(msg, sizeof(msg),
 800238a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800238e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002392:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002396:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800239a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800239e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80023a2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80023a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023aa:	e9cd 2300 	strd	r2, r3, [sp]
 80023ae:	4a10      	ldr	r2, [pc, #64]	@ (80023f0 <send_data_to_winform+0x7c>)
 80023b0:	2180      	movs	r1, #128	@ 0x80
 80023b2:	f00d fef3 	bl	801019c <sniprintf>
 80023b6:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
                       "Vin=%.2f V\r\n"
                       "Vcb=%.2f V\r\n"
                       "----------------------\r\n",
                       isense, voutsense, vinsense, vcbsense);

    if (len < 0) return;                    // lỗi format
 80023ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80023be:	2b00      	cmp	r3, #0
 80023c0:	db11      	blt.n	80023e6 <send_data_to_winform+0x72>
    if (len > (int)sizeof(msg)) len = sizeof(msg); // phòng tràn
 80023c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80023c6:	2b80      	cmp	r3, #128	@ 0x80
 80023c8:	dd02      	ble.n	80023d0 <send_data_to_winform+0x5c>
 80023ca:	2380      	movs	r3, #128	@ 0x80
 80023cc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

    HAL_UART_Transmit(&huart7, (uint8_t*)msg, (uint16_t)len, HAL_MAX_DELAY);
 80023d0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80023d4:	b29a      	uxth	r2, r3
 80023d6:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 80023da:	f04f 33ff 	mov.w	r3, #4294967295
 80023de:	4805      	ldr	r0, [pc, #20]	@ (80023f4 <send_data_to_winform+0x80>)
 80023e0:	f00b fc9c 	bl	800dd1c <HAL_UART_Transmit>
 80023e4:	e000      	b.n	80023e8 <send_data_to_winform+0x74>
    if (len < 0) return;                    // lỗi format
 80023e6:	bf00      	nop
}
 80023e8:	37a8      	adds	r7, #168	@ 0xa8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	08012360 	.word	0x08012360
 80023f4:	24000590 	.word	0x24000590

080023f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80023f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002430 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80023fc:	f7ff fe98 	bl	8002130 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002400:	480c      	ldr	r0, [pc, #48]	@ (8002434 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002402:	490d      	ldr	r1, [pc, #52]	@ (8002438 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002404:	4a0d      	ldr	r2, [pc, #52]	@ (800243c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002406:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002408:	e002      	b.n	8002410 <LoopCopyDataInit>

0800240a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800240a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800240c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800240e:	3304      	adds	r3, #4

08002410 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002410:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002412:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002414:	d3f9      	bcc.n	800240a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002416:	4a0a      	ldr	r2, [pc, #40]	@ (8002440 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002418:	4c0a      	ldr	r4, [pc, #40]	@ (8002444 <LoopFillZerobss+0x22>)
  movs r3, #0
 800241a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800241c:	e001      	b.n	8002422 <LoopFillZerobss>

0800241e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800241e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002420:	3204      	adds	r2, #4

08002422 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002422:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002424:	d3fb      	bcc.n	800241e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002426:	f00d ff89 	bl	801033c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800242a:	f7fe f9b9 	bl	80007a0 <main>
  bx  lr
 800242e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002430:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002434:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002438:	240001d8 	.word	0x240001d8
  ldr r2, =_sidata
 800243c:	08012968 	.word	0x08012968
  ldr r2, =_sbss
 8002440:	240001d8 	.word	0x240001d8
  ldr r4, =_ebss
 8002444:	24000adc 	.word	0x24000adc

08002448 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002448:	e7fe      	b.n	8002448 <ADC3_IRQHandler>
	...

0800244c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002452:	2003      	movs	r0, #3
 8002454:	f001 fa26 	bl	80038a4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002458:	f007 fcd4 	bl	8009e04 <HAL_RCC_GetSysClockFreq>
 800245c:	4602      	mov	r2, r0
 800245e:	4b15      	ldr	r3, [pc, #84]	@ (80024b4 <HAL_Init+0x68>)
 8002460:	699b      	ldr	r3, [r3, #24]
 8002462:	0a1b      	lsrs	r3, r3, #8
 8002464:	f003 030f 	and.w	r3, r3, #15
 8002468:	4913      	ldr	r1, [pc, #76]	@ (80024b8 <HAL_Init+0x6c>)
 800246a:	5ccb      	ldrb	r3, [r1, r3]
 800246c:	f003 031f 	and.w	r3, r3, #31
 8002470:	fa22 f303 	lsr.w	r3, r2, r3
 8002474:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002476:	4b0f      	ldr	r3, [pc, #60]	@ (80024b4 <HAL_Init+0x68>)
 8002478:	699b      	ldr	r3, [r3, #24]
 800247a:	f003 030f 	and.w	r3, r3, #15
 800247e:	4a0e      	ldr	r2, [pc, #56]	@ (80024b8 <HAL_Init+0x6c>)
 8002480:	5cd3      	ldrb	r3, [r2, r3]
 8002482:	f003 031f 	and.w	r3, r3, #31
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	fa22 f303 	lsr.w	r3, r2, r3
 800248c:	4a0b      	ldr	r2, [pc, #44]	@ (80024bc <HAL_Init+0x70>)
 800248e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002490:	4a0b      	ldr	r2, [pc, #44]	@ (80024c0 <HAL_Init+0x74>)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002496:	200f      	movs	r0, #15
 8002498:	f000 f814 	bl	80024c4 <HAL_InitTick>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d001      	beq.n	80024a6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e002      	b.n	80024ac <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80024a6:	f7ff f9ab 	bl	8001800 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024aa:	2300      	movs	r3, #0
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3708      	adds	r7, #8
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	58024400 	.word	0x58024400
 80024b8:	080125a8 	.word	0x080125a8
 80024bc:	24000004 	.word	0x24000004
 80024c0:	24000000 	.word	0x24000000

080024c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80024cc:	4b15      	ldr	r3, [pc, #84]	@ (8002524 <HAL_InitTick+0x60>)
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d101      	bne.n	80024d8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e021      	b.n	800251c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80024d8:	4b13      	ldr	r3, [pc, #76]	@ (8002528 <HAL_InitTick+0x64>)
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	4b11      	ldr	r3, [pc, #68]	@ (8002524 <HAL_InitTick+0x60>)
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	4619      	mov	r1, r3
 80024e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80024e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80024ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ee:	4618      	mov	r0, r3
 80024f0:	f001 fa0b 	bl	800390a <HAL_SYSTICK_Config>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d001      	beq.n	80024fe <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e00e      	b.n	800251c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2b0f      	cmp	r3, #15
 8002502:	d80a      	bhi.n	800251a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002504:	2200      	movs	r2, #0
 8002506:	6879      	ldr	r1, [r7, #4]
 8002508:	f04f 30ff 	mov.w	r0, #4294967295
 800250c:	f001 f9d5 	bl	80038ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002510:	4a06      	ldr	r2, [pc, #24]	@ (800252c <HAL_InitTick+0x68>)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002516:	2300      	movs	r3, #0
 8002518:	e000      	b.n	800251c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
}
 800251c:	4618      	mov	r0, r3
 800251e:	3708      	adds	r7, #8
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	2400000c 	.word	0x2400000c
 8002528:	24000000 	.word	0x24000000
 800252c:	24000008 	.word	0x24000008

08002530 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002534:	4b06      	ldr	r3, [pc, #24]	@ (8002550 <HAL_IncTick+0x20>)
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	461a      	mov	r2, r3
 800253a:	4b06      	ldr	r3, [pc, #24]	@ (8002554 <HAL_IncTick+0x24>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4413      	add	r3, r2
 8002540:	4a04      	ldr	r2, [pc, #16]	@ (8002554 <HAL_IncTick+0x24>)
 8002542:	6013      	str	r3, [r2, #0]
}
 8002544:	bf00      	nop
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop
 8002550:	2400000c 	.word	0x2400000c
 8002554:	2400098c 	.word	0x2400098c

08002558 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002558:	b480      	push	{r7}
 800255a:	af00      	add	r7, sp, #0
  return uwTick;
 800255c:	4b03      	ldr	r3, [pc, #12]	@ (800256c <HAL_GetTick+0x14>)
 800255e:	681b      	ldr	r3, [r3, #0]
}
 8002560:	4618      	mov	r0, r3
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	2400098c 	.word	0x2400098c

08002570 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002578:	f7ff ffee 	bl	8002558 <HAL_GetTick>
 800257c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002588:	d005      	beq.n	8002596 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800258a:	4b0a      	ldr	r3, [pc, #40]	@ (80025b4 <HAL_Delay+0x44>)
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	461a      	mov	r2, r3
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	4413      	add	r3, r2
 8002594:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002596:	bf00      	nop
 8002598:	f7ff ffde 	bl	8002558 <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	68fa      	ldr	r2, [r7, #12]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d8f7      	bhi.n	8002598 <HAL_Delay+0x28>
  {
  }
}
 80025a8:	bf00      	nop
 80025aa:	bf00      	nop
 80025ac:	3710      	adds	r7, #16
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	2400000c 	.word	0x2400000c

080025b8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80025bc:	4b03      	ldr	r3, [pc, #12]	@ (80025cc <HAL_GetREVID+0x14>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	0c1b      	lsrs	r3, r3, #16
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr
 80025cc:	5c001000 	.word	0x5c001000

080025d0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	431a      	orrs	r2, r3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	609a      	str	r2, [r3, #8]
}
 80025ea:	bf00      	nop
 80025ec:	370c      	adds	r7, #12
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr

080025f6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80025f6:	b480      	push	{r7}
 80025f8:	b083      	sub	sp, #12
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	6078      	str	r0, [r7, #4]
 80025fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	431a      	orrs	r2, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	609a      	str	r2, [r3, #8]
}
 8002610:	bf00      	nop
 8002612:	370c      	adds	r7, #12
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr

0800261c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800262c:	4618      	mov	r0, r3
 800262e:	370c      	adds	r7, #12
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr

08002638 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002638:	b480      	push	{r7}
 800263a:	b087      	sub	sp, #28
 800263c:	af00      	add	r7, sp, #0
 800263e:	60f8      	str	r0, [r7, #12]
 8002640:	60b9      	str	r1, [r7, #8]
 8002642:	607a      	str	r2, [r7, #4]
 8002644:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	3360      	adds	r3, #96	@ 0x60
 800264a:	461a      	mov	r2, r3
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	4413      	add	r3, r2
 8002652:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	430b      	orrs	r3, r1
 8002666:	431a      	orrs	r2, r3
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800266c:	bf00      	nop
 800266e:	371c      	adds	r7, #28
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002678:	b480      	push	{r7}
 800267a:	b085      	sub	sp, #20
 800267c:	af00      	add	r7, sp, #0
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	60b9      	str	r1, [r7, #8]
 8002682:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	691b      	ldr	r3, [r3, #16]
 8002688:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	f003 031f 	and.w	r3, r3, #31
 8002692:	6879      	ldr	r1, [r7, #4]
 8002694:	fa01 f303 	lsl.w	r3, r1, r3
 8002698:	431a      	orrs	r2, r3
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	611a      	str	r2, [r3, #16]
}
 800269e:	bf00      	nop
 80026a0:	3714      	adds	r7, #20
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr

080026aa <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80026aa:	b480      	push	{r7}
 80026ac:	b087      	sub	sp, #28
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	60f8      	str	r0, [r7, #12]
 80026b2:	60b9      	str	r1, [r7, #8]
 80026b4:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	3360      	adds	r3, #96	@ 0x60
 80026ba:	461a      	mov	r2, r3
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	4413      	add	r3, r2
 80026c2:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	431a      	orrs	r2, r3
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	601a      	str	r2, [r3, #0]
  }
}
 80026d4:	bf00      	nop
 80026d6:	371c      	adds	r7, #28
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b087      	sub	sp, #28
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	3330      	adds	r3, #48	@ 0x30
 80026f0:	461a      	mov	r2, r3
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	0a1b      	lsrs	r3, r3, #8
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	f003 030c 	and.w	r3, r3, #12
 80026fc:	4413      	add	r3, r2
 80026fe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	f003 031f 	and.w	r3, r3, #31
 800270a:	211f      	movs	r1, #31
 800270c:	fa01 f303 	lsl.w	r3, r1, r3
 8002710:	43db      	mvns	r3, r3
 8002712:	401a      	ands	r2, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	0e9b      	lsrs	r3, r3, #26
 8002718:	f003 011f 	and.w	r1, r3, #31
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	f003 031f 	and.w	r3, r3, #31
 8002722:	fa01 f303 	lsl.w	r3, r1, r3
 8002726:	431a      	orrs	r2, r3
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800272c:	bf00      	nop
 800272e:	371c      	adds	r7, #28
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr

08002738 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002738:	b480      	push	{r7}
 800273a:	b087      	sub	sp, #28
 800273c:	af00      	add	r7, sp, #0
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	60b9      	str	r1, [r7, #8]
 8002742:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	3314      	adds	r3, #20
 8002748:	461a      	mov	r2, r3
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	0e5b      	lsrs	r3, r3, #25
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	f003 0304 	and.w	r3, r3, #4
 8002754:	4413      	add	r3, r2
 8002756:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	0d1b      	lsrs	r3, r3, #20
 8002760:	f003 031f 	and.w	r3, r3, #31
 8002764:	2107      	movs	r1, #7
 8002766:	fa01 f303 	lsl.w	r3, r1, r3
 800276a:	43db      	mvns	r3, r3
 800276c:	401a      	ands	r2, r3
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	0d1b      	lsrs	r3, r3, #20
 8002772:	f003 031f 	and.w	r3, r3, #31
 8002776:	6879      	ldr	r1, [r7, #4]
 8002778:	fa01 f303 	lsl.w	r3, r1, r3
 800277c:	431a      	orrs	r2, r3
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002782:	bf00      	nop
 8002784:	371c      	adds	r7, #28
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
	...

08002790 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002790:	b480      	push	{r7}
 8002792:	b085      	sub	sp, #20
 8002794:	af00      	add	r7, sp, #0
 8002796:	60f8      	str	r0, [r7, #12]
 8002798:	60b9      	str	r1, [r7, #8]
 800279a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80027a8:	43db      	mvns	r3, r3
 80027aa:	401a      	ands	r2, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	f003 0318 	and.w	r3, r3, #24
 80027b2:	4908      	ldr	r1, [pc, #32]	@ (80027d4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80027b4:	40d9      	lsrs	r1, r3
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	400b      	ands	r3, r1
 80027ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80027be:	431a      	orrs	r2, r3
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80027c6:	bf00      	nop
 80027c8:	3714      	adds	r7, #20
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	000fffff 	.word	0x000fffff

080027d8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	689a      	ldr	r2, [r3, #8]
 80027e4:	4b04      	ldr	r3, [pc, #16]	@ (80027f8 <LL_ADC_DisableDeepPowerDown+0x20>)
 80027e6:	4013      	ands	r3, r2
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	6093      	str	r3, [r2, #8]
}
 80027ec:	bf00      	nop
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr
 80027f8:	5fffffc0 	.word	0x5fffffc0

080027fc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800280c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002810:	d101      	bne.n	8002816 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002812:	2301      	movs	r3, #1
 8002814:	e000      	b.n	8002818 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002816:	2300      	movs	r3, #0
}
 8002818:	4618      	mov	r0, r3
 800281a:	370c      	adds	r7, #12
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr

08002824 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	689a      	ldr	r2, [r3, #8]
 8002830:	4b05      	ldr	r3, [pc, #20]	@ (8002848 <LL_ADC_EnableInternalRegulator+0x24>)
 8002832:	4013      	ands	r3, r2
 8002834:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800283c:	bf00      	nop
 800283e:	370c      	adds	r7, #12
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr
 8002848:	6fffffc0 	.word	0x6fffffc0

0800284c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800285c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002860:	d101      	bne.n	8002866 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002862:	2301      	movs	r3, #1
 8002864:	e000      	b.n	8002868 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002866:	2300      	movs	r3, #0
}
 8002868:	4618      	mov	r0, r3
 800286a:	370c      	adds	r7, #12
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr

08002874 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	f003 0301 	and.w	r3, r3, #1
 8002884:	2b01      	cmp	r3, #1
 8002886:	d101      	bne.n	800288c <LL_ADC_IsEnabled+0x18>
 8002888:	2301      	movs	r3, #1
 800288a:	e000      	b.n	800288e <LL_ADC_IsEnabled+0x1a>
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	370c      	adds	r7, #12
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr

0800289a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800289a:	b480      	push	{r7}
 800289c:	b083      	sub	sp, #12
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	f003 0304 	and.w	r3, r3, #4
 80028aa:	2b04      	cmp	r3, #4
 80028ac:	d101      	bne.n	80028b2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80028ae:	2301      	movs	r3, #1
 80028b0:	e000      	b.n	80028b4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80028b2:	2300      	movs	r3, #0
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	370c      	adds	r7, #12
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr

080028c0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f003 0308 	and.w	r3, r3, #8
 80028d0:	2b08      	cmp	r3, #8
 80028d2:	d101      	bne.n	80028d8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80028d4:	2301      	movs	r3, #1
 80028d6:	e000      	b.n	80028da <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80028d8:	2300      	movs	r3, #0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	370c      	adds	r7, #12
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
	...

080028e8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80028e8:	b590      	push	{r4, r7, lr}
 80028ea:	b089      	sub	sp, #36	@ 0x24
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028f0:	2300      	movs	r3, #0
 80028f2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80028f4:	2300      	movs	r3, #0
 80028f6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d101      	bne.n	8002902 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e18f      	b.n	8002c22 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	68db      	ldr	r3, [r3, #12]
 8002906:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800290c:	2b00      	cmp	r3, #0
 800290e:	d109      	bne.n	8002924 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f7fe ff8f 	bl	8001834 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2200      	movs	r2, #0
 8002920:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4618      	mov	r0, r3
 800292a:	f7ff ff67 	bl	80027fc <LL_ADC_IsDeepPowerDownEnabled>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d004      	beq.n	800293e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4618      	mov	r0, r3
 800293a:	f7ff ff4d 	bl	80027d8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4618      	mov	r0, r3
 8002944:	f7ff ff82 	bl	800284c <LL_ADC_IsInternalRegulatorEnabled>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d114      	bne.n	8002978 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4618      	mov	r0, r3
 8002954:	f7ff ff66 	bl	8002824 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002958:	4b87      	ldr	r3, [pc, #540]	@ (8002b78 <HAL_ADC_Init+0x290>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	099b      	lsrs	r3, r3, #6
 800295e:	4a87      	ldr	r2, [pc, #540]	@ (8002b7c <HAL_ADC_Init+0x294>)
 8002960:	fba2 2303 	umull	r2, r3, r2, r3
 8002964:	099b      	lsrs	r3, r3, #6
 8002966:	3301      	adds	r3, #1
 8002968:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800296a:	e002      	b.n	8002972 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	3b01      	subs	r3, #1
 8002970:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d1f9      	bne.n	800296c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4618      	mov	r0, r3
 800297e:	f7ff ff65 	bl	800284c <LL_ADC_IsInternalRegulatorEnabled>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d10d      	bne.n	80029a4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800298c:	f043 0210 	orr.w	r2, r3, #16
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002998:	f043 0201 	orr.w	r2, r3, #1
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4618      	mov	r0, r3
 80029aa:	f7ff ff76 	bl	800289a <LL_ADC_REG_IsConversionOngoing>
 80029ae:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029b4:	f003 0310 	and.w	r3, r3, #16
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	f040 8129 	bne.w	8002c10 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	f040 8125 	bne.w	8002c10 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029ca:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80029ce:	f043 0202 	orr.w	r2, r3, #2
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4618      	mov	r0, r3
 80029dc:	f7ff ff4a 	bl	8002874 <LL_ADC_IsEnabled>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d136      	bne.n	8002a54 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a65      	ldr	r2, [pc, #404]	@ (8002b80 <HAL_ADC_Init+0x298>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d004      	beq.n	80029fa <HAL_ADC_Init+0x112>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a63      	ldr	r2, [pc, #396]	@ (8002b84 <HAL_ADC_Init+0x29c>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d10e      	bne.n	8002a18 <HAL_ADC_Init+0x130>
 80029fa:	4861      	ldr	r0, [pc, #388]	@ (8002b80 <HAL_ADC_Init+0x298>)
 80029fc:	f7ff ff3a 	bl	8002874 <LL_ADC_IsEnabled>
 8002a00:	4604      	mov	r4, r0
 8002a02:	4860      	ldr	r0, [pc, #384]	@ (8002b84 <HAL_ADC_Init+0x29c>)
 8002a04:	f7ff ff36 	bl	8002874 <LL_ADC_IsEnabled>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	4323      	orrs	r3, r4
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	bf0c      	ite	eq
 8002a10:	2301      	moveq	r3, #1
 8002a12:	2300      	movne	r3, #0
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	e008      	b.n	8002a2a <HAL_ADC_Init+0x142>
 8002a18:	485b      	ldr	r0, [pc, #364]	@ (8002b88 <HAL_ADC_Init+0x2a0>)
 8002a1a:	f7ff ff2b 	bl	8002874 <LL_ADC_IsEnabled>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	bf0c      	ite	eq
 8002a24:	2301      	moveq	r3, #1
 8002a26:	2300      	movne	r3, #0
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d012      	beq.n	8002a54 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a53      	ldr	r2, [pc, #332]	@ (8002b80 <HAL_ADC_Init+0x298>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d004      	beq.n	8002a42 <HAL_ADC_Init+0x15a>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a51      	ldr	r2, [pc, #324]	@ (8002b84 <HAL_ADC_Init+0x29c>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d101      	bne.n	8002a46 <HAL_ADC_Init+0x15e>
 8002a42:	4a52      	ldr	r2, [pc, #328]	@ (8002b8c <HAL_ADC_Init+0x2a4>)
 8002a44:	e000      	b.n	8002a48 <HAL_ADC_Init+0x160>
 8002a46:	4a52      	ldr	r2, [pc, #328]	@ (8002b90 <HAL_ADC_Init+0x2a8>)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	4610      	mov	r0, r2
 8002a50:	f7ff fdbe 	bl	80025d0 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002a54:	f7ff fdb0 	bl	80025b8 <HAL_GetREVID>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d914      	bls.n	8002a8c <HAL_ADC_Init+0x1a4>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	2b10      	cmp	r3, #16
 8002a68:	d110      	bne.n	8002a8c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	7d5b      	ldrb	r3, [r3, #21]
 8002a6e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002a74:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002a7a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	7f1b      	ldrb	r3, [r3, #28]
 8002a80:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002a82:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002a84:	f043 030c 	orr.w	r3, r3, #12
 8002a88:	61bb      	str	r3, [r7, #24]
 8002a8a:	e00d      	b.n	8002aa8 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	7d5b      	ldrb	r3, [r3, #21]
 8002a90:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002a96:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002a9c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	7f1b      	ldrb	r3, [r3, #28]
 8002aa2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	7f1b      	ldrb	r3, [r3, #28]
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d106      	bne.n	8002abe <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6a1b      	ldr	r3, [r3, #32]
 8002ab4:	3b01      	subs	r3, #1
 8002ab6:	045b      	lsls	r3, r3, #17
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d009      	beq.n	8002ada <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aca:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ad2:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002ad4:	69ba      	ldr	r2, [r7, #24]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	68da      	ldr	r2, [r3, #12]
 8002ae0:	4b2c      	ldr	r3, [pc, #176]	@ (8002b94 <HAL_ADC_Init+0x2ac>)
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	6812      	ldr	r2, [r2, #0]
 8002ae8:	69b9      	ldr	r1, [r7, #24]
 8002aea:	430b      	orrs	r3, r1
 8002aec:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7ff fed1 	bl	800289a <LL_ADC_REG_IsConversionOngoing>
 8002af8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7ff fede 	bl	80028c0 <LL_ADC_INJ_IsConversionOngoing>
 8002b04:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d15f      	bne.n	8002bcc <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d15c      	bne.n	8002bcc <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	7d1b      	ldrb	r3, [r3, #20]
 8002b16:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	68da      	ldr	r2, [r3, #12]
 8002b26:	4b1c      	ldr	r3, [pc, #112]	@ (8002b98 <HAL_ADC_Init+0x2b0>)
 8002b28:	4013      	ands	r3, r2
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	6812      	ldr	r2, [r2, #0]
 8002b2e:	69b9      	ldr	r1, [r7, #24]
 8002b30:	430b      	orrs	r3, r1
 8002b32:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d130      	bne.n	8002ba0 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b42:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	691a      	ldr	r2, [r3, #16]
 8002b4a:	4b14      	ldr	r3, [pc, #80]	@ (8002b9c <HAL_ADC_Init+0x2b4>)
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002b52:	3a01      	subs	r2, #1
 8002b54:	0411      	lsls	r1, r2, #16
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002b5a:	4311      	orrs	r1, r2
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002b60:	4311      	orrs	r1, r2
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002b66:	430a      	orrs	r2, r1
 8002b68:	431a      	orrs	r2, r3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f042 0201 	orr.w	r2, r2, #1
 8002b72:	611a      	str	r2, [r3, #16]
 8002b74:	e01c      	b.n	8002bb0 <HAL_ADC_Init+0x2c8>
 8002b76:	bf00      	nop
 8002b78:	24000000 	.word	0x24000000
 8002b7c:	053e2d63 	.word	0x053e2d63
 8002b80:	40022000 	.word	0x40022000
 8002b84:	40022100 	.word	0x40022100
 8002b88:	58026000 	.word	0x58026000
 8002b8c:	40022300 	.word	0x40022300
 8002b90:	58026300 	.word	0x58026300
 8002b94:	fff0c003 	.word	0xfff0c003
 8002b98:	ffffbffc 	.word	0xffffbffc
 8002b9c:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	691a      	ldr	r2, [r3, #16]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f022 0201 	bic.w	r2, r2, #1
 8002bae:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	691b      	ldr	r3, [r3, #16]
 8002bb6:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	430a      	orrs	r2, r1
 8002bc4:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f000 fb8c 	bl	80032e4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d10c      	bne.n	8002bee <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bda:	f023 010f 	bic.w	r1, r3, #15
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	699b      	ldr	r3, [r3, #24]
 8002be2:	1e5a      	subs	r2, r3, #1
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	430a      	orrs	r2, r1
 8002bea:	631a      	str	r2, [r3, #48]	@ 0x30
 8002bec:	e007      	b.n	8002bfe <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f022 020f 	bic.w	r2, r2, #15
 8002bfc:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c02:	f023 0303 	bic.w	r3, r3, #3
 8002c06:	f043 0201 	orr.w	r2, r3, #1
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	655a      	str	r2, [r3, #84]	@ 0x54
 8002c0e:	e007      	b.n	8002c20 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c14:	f043 0210 	orr.w	r2, r3, #16
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002c20:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3724      	adds	r7, #36	@ 0x24
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd90      	pop	{r4, r7, pc}
 8002c2a:	bf00      	nop

08002c2c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002c2c:	b590      	push	{r4, r7, lr}
 8002c2e:	b0a1      	sub	sp, #132	@ 0x84
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c36:	2300      	movs	r3, #0
 8002c38:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	4a65      	ldr	r2, [pc, #404]	@ (8002ddc <HAL_ADC_ConfigChannel+0x1b0>)
 8002c46:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d101      	bne.n	8002c56 <HAL_ADC_ConfigChannel+0x2a>
 8002c52:	2302      	movs	r3, #2
 8002c54:	e32e      	b.n	80032b4 <HAL_ADC_ConfigChannel+0x688>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2201      	movs	r2, #1
 8002c5a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4618      	mov	r0, r3
 8002c64:	f7ff fe19 	bl	800289a <LL_ADC_REG_IsConversionOngoing>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	f040 8313 	bne.w	8003296 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	db2c      	blt.n	8002cd2 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d108      	bne.n	8002c96 <HAL_ADC_ConfigChannel+0x6a>
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	0e9b      	lsrs	r3, r3, #26
 8002c8a:	f003 031f 	and.w	r3, r3, #31
 8002c8e:	2201      	movs	r2, #1
 8002c90:	fa02 f303 	lsl.w	r3, r2, r3
 8002c94:	e016      	b.n	8002cc4 <HAL_ADC_ConfigChannel+0x98>
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c9c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002c9e:	fa93 f3a3 	rbit	r3, r3
 8002ca2:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002ca4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002ca6:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002ca8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d101      	bne.n	8002cb2 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8002cae:	2320      	movs	r3, #32
 8002cb0:	e003      	b.n	8002cba <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8002cb2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002cb4:	fab3 f383 	clz	r3, r3
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	f003 031f 	and.w	r3, r3, #31
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	6812      	ldr	r2, [r2, #0]
 8002cc8:	69d1      	ldr	r1, [r2, #28]
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	6812      	ldr	r2, [r2, #0]
 8002cce:	430b      	orrs	r3, r1
 8002cd0:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6818      	ldr	r0, [r3, #0]
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	6859      	ldr	r1, [r3, #4]
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	461a      	mov	r2, r3
 8002ce0:	f7ff fcfe 	bl	80026e0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7ff fdd6 	bl	800289a <LL_ADC_REG_IsConversionOngoing>
 8002cee:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f7ff fde3 	bl	80028c0 <LL_ADC_INJ_IsConversionOngoing>
 8002cfa:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002cfc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	f040 80b8 	bne.w	8002e74 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d04:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	f040 80b4 	bne.w	8002e74 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6818      	ldr	r0, [r3, #0]
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	6819      	ldr	r1, [r3, #0]
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	461a      	mov	r2, r3
 8002d1a:	f7ff fd0d 	bl	8002738 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002d1e:	4b30      	ldr	r3, [pc, #192]	@ (8002de0 <HAL_ADC_ConfigChannel+0x1b4>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8002d26:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002d2a:	d10b      	bne.n	8002d44 <HAL_ADC_ConfigChannel+0x118>
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	695a      	ldr	r2, [r3, #20]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	089b      	lsrs	r3, r3, #2
 8002d38:	f003 0307 	and.w	r3, r3, #7
 8002d3c:	005b      	lsls	r3, r3, #1
 8002d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d42:	e01d      	b.n	8002d80 <HAL_ADC_ConfigChannel+0x154>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	f003 0310 	and.w	r3, r3, #16
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d10b      	bne.n	8002d6a <HAL_ADC_ConfigChannel+0x13e>
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	695a      	ldr	r2, [r3, #20]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	089b      	lsrs	r3, r3, #2
 8002d5e:	f003 0307 	and.w	r3, r3, #7
 8002d62:	005b      	lsls	r3, r3, #1
 8002d64:	fa02 f303 	lsl.w	r3, r2, r3
 8002d68:	e00a      	b.n	8002d80 <HAL_ADC_ConfigChannel+0x154>
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	695a      	ldr	r2, [r3, #20]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	089b      	lsrs	r3, r3, #2
 8002d76:	f003 0304 	and.w	r3, r3, #4
 8002d7a:	005b      	lsls	r3, r3, #1
 8002d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d80:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	2b04      	cmp	r3, #4
 8002d88:	d02c      	beq.n	8002de4 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6818      	ldr	r0, [r3, #0]
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	6919      	ldr	r1, [r3, #16]
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002d98:	f7ff fc4e 	bl	8002638 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6818      	ldr	r0, [r3, #0]
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	6919      	ldr	r1, [r3, #16]
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	7e5b      	ldrb	r3, [r3, #25]
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d102      	bne.n	8002db2 <HAL_ADC_ConfigChannel+0x186>
 8002dac:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002db0:	e000      	b.n	8002db4 <HAL_ADC_ConfigChannel+0x188>
 8002db2:	2300      	movs	r3, #0
 8002db4:	461a      	mov	r2, r3
 8002db6:	f7ff fc78 	bl	80026aa <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6818      	ldr	r0, [r3, #0]
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	6919      	ldr	r1, [r3, #16]
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	7e1b      	ldrb	r3, [r3, #24]
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d102      	bne.n	8002dd0 <HAL_ADC_ConfigChannel+0x1a4>
 8002dca:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002dce:	e000      	b.n	8002dd2 <HAL_ADC_ConfigChannel+0x1a6>
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	f7ff fc50 	bl	8002678 <LL_ADC_SetDataRightShift>
 8002dd8:	e04c      	b.n	8002e74 <HAL_ADC_ConfigChannel+0x248>
 8002dda:	bf00      	nop
 8002ddc:	47ff0000 	.word	0x47ff0000
 8002de0:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dea:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	069b      	lsls	r3, r3, #26
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d107      	bne.n	8002e08 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002e06:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002e0e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	069b      	lsls	r3, r3, #26
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d107      	bne.n	8002e2c <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002e2a:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002e32:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	069b      	lsls	r3, r3, #26
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d107      	bne.n	8002e50 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002e4e:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e56:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	069b      	lsls	r3, r3, #26
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d107      	bne.n	8002e74 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002e72:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f7ff fcfb 	bl	8002874 <LL_ADC_IsEnabled>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	f040 8211 	bne.w	80032a8 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6818      	ldr	r0, [r3, #0]
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	6819      	ldr	r1, [r3, #0]
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	68db      	ldr	r3, [r3, #12]
 8002e92:	461a      	mov	r2, r3
 8002e94:	f7ff fc7c 	bl	8002790 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	4aa1      	ldr	r2, [pc, #644]	@ (8003124 <HAL_ADC_ConfigChannel+0x4f8>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	f040 812e 	bne.w	8003100 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d10b      	bne.n	8002ecc <HAL_ADC_ConfigChannel+0x2a0>
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	0e9b      	lsrs	r3, r3, #26
 8002eba:	3301      	adds	r3, #1
 8002ebc:	f003 031f 	and.w	r3, r3, #31
 8002ec0:	2b09      	cmp	r3, #9
 8002ec2:	bf94      	ite	ls
 8002ec4:	2301      	movls	r3, #1
 8002ec6:	2300      	movhi	r3, #0
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	e019      	b.n	8002f00 <HAL_ADC_ConfigChannel+0x2d4>
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ed4:	fa93 f3a3 	rbit	r3, r3
 8002ed8:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002eda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002edc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002ede:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d101      	bne.n	8002ee8 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8002ee4:	2320      	movs	r3, #32
 8002ee6:	e003      	b.n	8002ef0 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8002ee8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002eea:	fab3 f383 	clz	r3, r3
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	f003 031f 	and.w	r3, r3, #31
 8002ef6:	2b09      	cmp	r3, #9
 8002ef8:	bf94      	ite	ls
 8002efa:	2301      	movls	r3, #1
 8002efc:	2300      	movhi	r3, #0
 8002efe:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d079      	beq.n	8002ff8 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d107      	bne.n	8002f20 <HAL_ADC_ConfigChannel+0x2f4>
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	0e9b      	lsrs	r3, r3, #26
 8002f16:	3301      	adds	r3, #1
 8002f18:	069b      	lsls	r3, r3, #26
 8002f1a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002f1e:	e015      	b.n	8002f4c <HAL_ADC_ConfigChannel+0x320>
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f28:	fa93 f3a3 	rbit	r3, r3
 8002f2c:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002f2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002f30:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002f32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d101      	bne.n	8002f3c <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8002f38:	2320      	movs	r3, #32
 8002f3a:	e003      	b.n	8002f44 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8002f3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f3e:	fab3 f383 	clz	r3, r3
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	3301      	adds	r3, #1
 8002f46:	069b      	lsls	r3, r3, #26
 8002f48:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d109      	bne.n	8002f6c <HAL_ADC_ConfigChannel+0x340>
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	0e9b      	lsrs	r3, r3, #26
 8002f5e:	3301      	adds	r3, #1
 8002f60:	f003 031f 	and.w	r3, r3, #31
 8002f64:	2101      	movs	r1, #1
 8002f66:	fa01 f303 	lsl.w	r3, r1, r3
 8002f6a:	e017      	b.n	8002f9c <HAL_ADC_ConfigChannel+0x370>
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f74:	fa93 f3a3 	rbit	r3, r3
 8002f78:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002f7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f7c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002f7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d101      	bne.n	8002f88 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8002f84:	2320      	movs	r3, #32
 8002f86:	e003      	b.n	8002f90 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8002f88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f8a:	fab3 f383 	clz	r3, r3
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	3301      	adds	r3, #1
 8002f92:	f003 031f 	and.w	r3, r3, #31
 8002f96:	2101      	movs	r1, #1
 8002f98:	fa01 f303 	lsl.w	r3, r1, r3
 8002f9c:	ea42 0103 	orr.w	r1, r2, r3
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d10a      	bne.n	8002fc2 <HAL_ADC_ConfigChannel+0x396>
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	0e9b      	lsrs	r3, r3, #26
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	f003 021f 	and.w	r2, r3, #31
 8002fb8:	4613      	mov	r3, r2
 8002fba:	005b      	lsls	r3, r3, #1
 8002fbc:	4413      	add	r3, r2
 8002fbe:	051b      	lsls	r3, r3, #20
 8002fc0:	e018      	b.n	8002ff4 <HAL_ADC_ConfigChannel+0x3c8>
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fca:	fa93 f3a3 	rbit	r3, r3
 8002fce:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002fd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fd2:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002fd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d101      	bne.n	8002fde <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8002fda:	2320      	movs	r3, #32
 8002fdc:	e003      	b.n	8002fe6 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8002fde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fe0:	fab3 f383 	clz	r3, r3
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	f003 021f 	and.w	r2, r3, #31
 8002fec:	4613      	mov	r3, r2
 8002fee:	005b      	lsls	r3, r3, #1
 8002ff0:	4413      	add	r3, r2
 8002ff2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ff4:	430b      	orrs	r3, r1
 8002ff6:	e07e      	b.n	80030f6 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003000:	2b00      	cmp	r3, #0
 8003002:	d107      	bne.n	8003014 <HAL_ADC_ConfigChannel+0x3e8>
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	0e9b      	lsrs	r3, r3, #26
 800300a:	3301      	adds	r3, #1
 800300c:	069b      	lsls	r3, r3, #26
 800300e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003012:	e015      	b.n	8003040 <HAL_ADC_ConfigChannel+0x414>
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800301a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800301c:	fa93 f3a3 	rbit	r3, r3
 8003020:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8003022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003024:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8003026:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003028:	2b00      	cmp	r3, #0
 800302a:	d101      	bne.n	8003030 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 800302c:	2320      	movs	r3, #32
 800302e:	e003      	b.n	8003038 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8003030:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003032:	fab3 f383 	clz	r3, r3
 8003036:	b2db      	uxtb	r3, r3
 8003038:	3301      	adds	r3, #1
 800303a:	069b      	lsls	r3, r3, #26
 800303c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003048:	2b00      	cmp	r3, #0
 800304a:	d109      	bne.n	8003060 <HAL_ADC_ConfigChannel+0x434>
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	0e9b      	lsrs	r3, r3, #26
 8003052:	3301      	adds	r3, #1
 8003054:	f003 031f 	and.w	r3, r3, #31
 8003058:	2101      	movs	r1, #1
 800305a:	fa01 f303 	lsl.w	r3, r1, r3
 800305e:	e017      	b.n	8003090 <HAL_ADC_ConfigChannel+0x464>
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	fa93 f3a3 	rbit	r3, r3
 800306c:	61bb      	str	r3, [r7, #24]
  return result;
 800306e:	69bb      	ldr	r3, [r7, #24]
 8003070:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003072:	6a3b      	ldr	r3, [r7, #32]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d101      	bne.n	800307c <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8003078:	2320      	movs	r3, #32
 800307a:	e003      	b.n	8003084 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 800307c:	6a3b      	ldr	r3, [r7, #32]
 800307e:	fab3 f383 	clz	r3, r3
 8003082:	b2db      	uxtb	r3, r3
 8003084:	3301      	adds	r3, #1
 8003086:	f003 031f 	and.w	r3, r3, #31
 800308a:	2101      	movs	r1, #1
 800308c:	fa01 f303 	lsl.w	r3, r1, r3
 8003090:	ea42 0103 	orr.w	r1, r2, r3
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800309c:	2b00      	cmp	r3, #0
 800309e:	d10d      	bne.n	80030bc <HAL_ADC_ConfigChannel+0x490>
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	0e9b      	lsrs	r3, r3, #26
 80030a6:	3301      	adds	r3, #1
 80030a8:	f003 021f 	and.w	r2, r3, #31
 80030ac:	4613      	mov	r3, r2
 80030ae:	005b      	lsls	r3, r3, #1
 80030b0:	4413      	add	r3, r2
 80030b2:	3b1e      	subs	r3, #30
 80030b4:	051b      	lsls	r3, r3, #20
 80030b6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80030ba:	e01b      	b.n	80030f4 <HAL_ADC_ConfigChannel+0x4c8>
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	fa93 f3a3 	rbit	r3, r3
 80030c8:	60fb      	str	r3, [r7, #12]
  return result;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d101      	bne.n	80030d8 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 80030d4:	2320      	movs	r3, #32
 80030d6:	e003      	b.n	80030e0 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	fab3 f383 	clz	r3, r3
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	3301      	adds	r3, #1
 80030e2:	f003 021f 	and.w	r2, r3, #31
 80030e6:	4613      	mov	r3, r2
 80030e8:	005b      	lsls	r3, r3, #1
 80030ea:	4413      	add	r3, r2
 80030ec:	3b1e      	subs	r3, #30
 80030ee:	051b      	lsls	r3, r3, #20
 80030f0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030f4:	430b      	orrs	r3, r1
 80030f6:	683a      	ldr	r2, [r7, #0]
 80030f8:	6892      	ldr	r2, [r2, #8]
 80030fa:	4619      	mov	r1, r3
 80030fc:	f7ff fb1c 	bl	8002738 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2b00      	cmp	r3, #0
 8003106:	f280 80cf 	bge.w	80032a8 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a06      	ldr	r2, [pc, #24]	@ (8003128 <HAL_ADC_ConfigChannel+0x4fc>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d004      	beq.n	800311e <HAL_ADC_ConfigChannel+0x4f2>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a04      	ldr	r2, [pc, #16]	@ (800312c <HAL_ADC_ConfigChannel+0x500>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d10a      	bne.n	8003134 <HAL_ADC_ConfigChannel+0x508>
 800311e:	4b04      	ldr	r3, [pc, #16]	@ (8003130 <HAL_ADC_ConfigChannel+0x504>)
 8003120:	e009      	b.n	8003136 <HAL_ADC_ConfigChannel+0x50a>
 8003122:	bf00      	nop
 8003124:	47ff0000 	.word	0x47ff0000
 8003128:	40022000 	.word	0x40022000
 800312c:	40022100 	.word	0x40022100
 8003130:	40022300 	.word	0x40022300
 8003134:	4b61      	ldr	r3, [pc, #388]	@ (80032bc <HAL_ADC_ConfigChannel+0x690>)
 8003136:	4618      	mov	r0, r3
 8003138:	f7ff fa70 	bl	800261c <LL_ADC_GetCommonPathInternalCh>
 800313c:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a5f      	ldr	r2, [pc, #380]	@ (80032c0 <HAL_ADC_ConfigChannel+0x694>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d004      	beq.n	8003152 <HAL_ADC_ConfigChannel+0x526>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a5d      	ldr	r2, [pc, #372]	@ (80032c4 <HAL_ADC_ConfigChannel+0x698>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d10e      	bne.n	8003170 <HAL_ADC_ConfigChannel+0x544>
 8003152:	485b      	ldr	r0, [pc, #364]	@ (80032c0 <HAL_ADC_ConfigChannel+0x694>)
 8003154:	f7ff fb8e 	bl	8002874 <LL_ADC_IsEnabled>
 8003158:	4604      	mov	r4, r0
 800315a:	485a      	ldr	r0, [pc, #360]	@ (80032c4 <HAL_ADC_ConfigChannel+0x698>)
 800315c:	f7ff fb8a 	bl	8002874 <LL_ADC_IsEnabled>
 8003160:	4603      	mov	r3, r0
 8003162:	4323      	orrs	r3, r4
 8003164:	2b00      	cmp	r3, #0
 8003166:	bf0c      	ite	eq
 8003168:	2301      	moveq	r3, #1
 800316a:	2300      	movne	r3, #0
 800316c:	b2db      	uxtb	r3, r3
 800316e:	e008      	b.n	8003182 <HAL_ADC_ConfigChannel+0x556>
 8003170:	4855      	ldr	r0, [pc, #340]	@ (80032c8 <HAL_ADC_ConfigChannel+0x69c>)
 8003172:	f7ff fb7f 	bl	8002874 <LL_ADC_IsEnabled>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	bf0c      	ite	eq
 800317c:	2301      	moveq	r3, #1
 800317e:	2300      	movne	r3, #0
 8003180:	b2db      	uxtb	r3, r3
 8003182:	2b00      	cmp	r3, #0
 8003184:	d07d      	beq.n	8003282 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a50      	ldr	r2, [pc, #320]	@ (80032cc <HAL_ADC_ConfigChannel+0x6a0>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d130      	bne.n	80031f2 <HAL_ADC_ConfigChannel+0x5c6>
 8003190:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003192:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d12b      	bne.n	80031f2 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a4a      	ldr	r2, [pc, #296]	@ (80032c8 <HAL_ADC_ConfigChannel+0x69c>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	f040 8081 	bne.w	80032a8 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a45      	ldr	r2, [pc, #276]	@ (80032c0 <HAL_ADC_ConfigChannel+0x694>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d004      	beq.n	80031ba <HAL_ADC_ConfigChannel+0x58e>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a43      	ldr	r2, [pc, #268]	@ (80032c4 <HAL_ADC_ConfigChannel+0x698>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d101      	bne.n	80031be <HAL_ADC_ConfigChannel+0x592>
 80031ba:	4a45      	ldr	r2, [pc, #276]	@ (80032d0 <HAL_ADC_ConfigChannel+0x6a4>)
 80031bc:	e000      	b.n	80031c0 <HAL_ADC_ConfigChannel+0x594>
 80031be:	4a3f      	ldr	r2, [pc, #252]	@ (80032bc <HAL_ADC_ConfigChannel+0x690>)
 80031c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80031c2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80031c6:	4619      	mov	r1, r3
 80031c8:	4610      	mov	r0, r2
 80031ca:	f7ff fa14 	bl	80025f6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80031ce:	4b41      	ldr	r3, [pc, #260]	@ (80032d4 <HAL_ADC_ConfigChannel+0x6a8>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	099b      	lsrs	r3, r3, #6
 80031d4:	4a40      	ldr	r2, [pc, #256]	@ (80032d8 <HAL_ADC_ConfigChannel+0x6ac>)
 80031d6:	fba2 2303 	umull	r2, r3, r2, r3
 80031da:	099b      	lsrs	r3, r3, #6
 80031dc:	3301      	adds	r3, #1
 80031de:	005b      	lsls	r3, r3, #1
 80031e0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80031e2:	e002      	b.n	80031ea <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	3b01      	subs	r3, #1
 80031e8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d1f9      	bne.n	80031e4 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80031f0:	e05a      	b.n	80032a8 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a39      	ldr	r2, [pc, #228]	@ (80032dc <HAL_ADC_ConfigChannel+0x6b0>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d11e      	bne.n	800323a <HAL_ADC_ConfigChannel+0x60e>
 80031fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80031fe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d119      	bne.n	800323a <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a2f      	ldr	r2, [pc, #188]	@ (80032c8 <HAL_ADC_ConfigChannel+0x69c>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d14b      	bne.n	80032a8 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a2a      	ldr	r2, [pc, #168]	@ (80032c0 <HAL_ADC_ConfigChannel+0x694>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d004      	beq.n	8003224 <HAL_ADC_ConfigChannel+0x5f8>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a29      	ldr	r2, [pc, #164]	@ (80032c4 <HAL_ADC_ConfigChannel+0x698>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d101      	bne.n	8003228 <HAL_ADC_ConfigChannel+0x5fc>
 8003224:	4a2a      	ldr	r2, [pc, #168]	@ (80032d0 <HAL_ADC_ConfigChannel+0x6a4>)
 8003226:	e000      	b.n	800322a <HAL_ADC_ConfigChannel+0x5fe>
 8003228:	4a24      	ldr	r2, [pc, #144]	@ (80032bc <HAL_ADC_ConfigChannel+0x690>)
 800322a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800322c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003230:	4619      	mov	r1, r3
 8003232:	4610      	mov	r0, r2
 8003234:	f7ff f9df 	bl	80025f6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003238:	e036      	b.n	80032a8 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a28      	ldr	r2, [pc, #160]	@ (80032e0 <HAL_ADC_ConfigChannel+0x6b4>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d131      	bne.n	80032a8 <HAL_ADC_ConfigChannel+0x67c>
 8003244:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003246:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d12c      	bne.n	80032a8 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a1d      	ldr	r2, [pc, #116]	@ (80032c8 <HAL_ADC_ConfigChannel+0x69c>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d127      	bne.n	80032a8 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a18      	ldr	r2, [pc, #96]	@ (80032c0 <HAL_ADC_ConfigChannel+0x694>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d004      	beq.n	800326c <HAL_ADC_ConfigChannel+0x640>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a17      	ldr	r2, [pc, #92]	@ (80032c4 <HAL_ADC_ConfigChannel+0x698>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d101      	bne.n	8003270 <HAL_ADC_ConfigChannel+0x644>
 800326c:	4a18      	ldr	r2, [pc, #96]	@ (80032d0 <HAL_ADC_ConfigChannel+0x6a4>)
 800326e:	e000      	b.n	8003272 <HAL_ADC_ConfigChannel+0x646>
 8003270:	4a12      	ldr	r2, [pc, #72]	@ (80032bc <HAL_ADC_ConfigChannel+0x690>)
 8003272:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003274:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003278:	4619      	mov	r1, r3
 800327a:	4610      	mov	r0, r2
 800327c:	f7ff f9bb 	bl	80025f6 <LL_ADC_SetCommonPathInternalCh>
 8003280:	e012      	b.n	80032a8 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003286:	f043 0220 	orr.w	r2, r3, #32
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003294:	e008      	b.n	80032a8 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800329a:	f043 0220 	orr.w	r2, r3, #32
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80032b0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3784      	adds	r7, #132	@ 0x84
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd90      	pop	{r4, r7, pc}
 80032bc:	58026300 	.word	0x58026300
 80032c0:	40022000 	.word	0x40022000
 80032c4:	40022100 	.word	0x40022100
 80032c8:	58026000 	.word	0x58026000
 80032cc:	cb840000 	.word	0xcb840000
 80032d0:	40022300 	.word	0x40022300
 80032d4:	24000000 	.word	0x24000000
 80032d8:	053e2d63 	.word	0x053e2d63
 80032dc:	c7520000 	.word	0xc7520000
 80032e0:	cfb80000 	.word	0xcfb80000

080032e4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a7a      	ldr	r2, [pc, #488]	@ (80034dc <ADC_ConfigureBoostMode+0x1f8>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d004      	beq.n	8003300 <ADC_ConfigureBoostMode+0x1c>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a79      	ldr	r2, [pc, #484]	@ (80034e0 <ADC_ConfigureBoostMode+0x1fc>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d109      	bne.n	8003314 <ADC_ConfigureBoostMode+0x30>
 8003300:	4b78      	ldr	r3, [pc, #480]	@ (80034e4 <ADC_ConfigureBoostMode+0x200>)
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003308:	2b00      	cmp	r3, #0
 800330a:	bf14      	ite	ne
 800330c:	2301      	movne	r3, #1
 800330e:	2300      	moveq	r3, #0
 8003310:	b2db      	uxtb	r3, r3
 8003312:	e008      	b.n	8003326 <ADC_ConfigureBoostMode+0x42>
 8003314:	4b74      	ldr	r3, [pc, #464]	@ (80034e8 <ADC_ConfigureBoostMode+0x204>)
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800331c:	2b00      	cmp	r3, #0
 800331e:	bf14      	ite	ne
 8003320:	2301      	movne	r3, #1
 8003322:	2300      	moveq	r3, #0
 8003324:	b2db      	uxtb	r3, r3
 8003326:	2b00      	cmp	r3, #0
 8003328:	d01c      	beq.n	8003364 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800332a:	f006 fee5 	bl	800a0f8 <HAL_RCC_GetHCLKFreq>
 800332e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003338:	d010      	beq.n	800335c <ADC_ConfigureBoostMode+0x78>
 800333a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800333e:	d873      	bhi.n	8003428 <ADC_ConfigureBoostMode+0x144>
 8003340:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003344:	d002      	beq.n	800334c <ADC_ConfigureBoostMode+0x68>
 8003346:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800334a:	d16d      	bne.n	8003428 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	0c1b      	lsrs	r3, r3, #16
 8003352:	68fa      	ldr	r2, [r7, #12]
 8003354:	fbb2 f3f3 	udiv	r3, r2, r3
 8003358:	60fb      	str	r3, [r7, #12]
        break;
 800335a:	e068      	b.n	800342e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	089b      	lsrs	r3, r3, #2
 8003360:	60fb      	str	r3, [r7, #12]
        break;
 8003362:	e064      	b.n	800342e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003364:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8003368:	f04f 0100 	mov.w	r1, #0
 800336c:	f008 f92a 	bl	800b5c4 <HAL_RCCEx_GetPeriphCLKFreq>
 8003370:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800337a:	d051      	beq.n	8003420 <ADC_ConfigureBoostMode+0x13c>
 800337c:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003380:	d854      	bhi.n	800342c <ADC_ConfigureBoostMode+0x148>
 8003382:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003386:	d047      	beq.n	8003418 <ADC_ConfigureBoostMode+0x134>
 8003388:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800338c:	d84e      	bhi.n	800342c <ADC_ConfigureBoostMode+0x148>
 800338e:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003392:	d03d      	beq.n	8003410 <ADC_ConfigureBoostMode+0x12c>
 8003394:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003398:	d848      	bhi.n	800342c <ADC_ConfigureBoostMode+0x148>
 800339a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800339e:	d033      	beq.n	8003408 <ADC_ConfigureBoostMode+0x124>
 80033a0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80033a4:	d842      	bhi.n	800342c <ADC_ConfigureBoostMode+0x148>
 80033a6:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80033aa:	d029      	beq.n	8003400 <ADC_ConfigureBoostMode+0x11c>
 80033ac:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80033b0:	d83c      	bhi.n	800342c <ADC_ConfigureBoostMode+0x148>
 80033b2:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80033b6:	d01a      	beq.n	80033ee <ADC_ConfigureBoostMode+0x10a>
 80033b8:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80033bc:	d836      	bhi.n	800342c <ADC_ConfigureBoostMode+0x148>
 80033be:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80033c2:	d014      	beq.n	80033ee <ADC_ConfigureBoostMode+0x10a>
 80033c4:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80033c8:	d830      	bhi.n	800342c <ADC_ConfigureBoostMode+0x148>
 80033ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80033ce:	d00e      	beq.n	80033ee <ADC_ConfigureBoostMode+0x10a>
 80033d0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80033d4:	d82a      	bhi.n	800342c <ADC_ConfigureBoostMode+0x148>
 80033d6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80033da:	d008      	beq.n	80033ee <ADC_ConfigureBoostMode+0x10a>
 80033dc:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80033e0:	d824      	bhi.n	800342c <ADC_ConfigureBoostMode+0x148>
 80033e2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80033e6:	d002      	beq.n	80033ee <ADC_ConfigureBoostMode+0x10a>
 80033e8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80033ec:	d11e      	bne.n	800342c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	0c9b      	lsrs	r3, r3, #18
 80033f4:	005b      	lsls	r3, r3, #1
 80033f6:	68fa      	ldr	r2, [r7, #12]
 80033f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80033fc:	60fb      	str	r3, [r7, #12]
        break;
 80033fe:	e016      	b.n	800342e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	091b      	lsrs	r3, r3, #4
 8003404:	60fb      	str	r3, [r7, #12]
        break;
 8003406:	e012      	b.n	800342e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	095b      	lsrs	r3, r3, #5
 800340c:	60fb      	str	r3, [r7, #12]
        break;
 800340e:	e00e      	b.n	800342e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	099b      	lsrs	r3, r3, #6
 8003414:	60fb      	str	r3, [r7, #12]
        break;
 8003416:	e00a      	b.n	800342e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	09db      	lsrs	r3, r3, #7
 800341c:	60fb      	str	r3, [r7, #12]
        break;
 800341e:	e006      	b.n	800342e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	0a1b      	lsrs	r3, r3, #8
 8003424:	60fb      	str	r3, [r7, #12]
        break;
 8003426:	e002      	b.n	800342e <ADC_ConfigureBoostMode+0x14a>
        break;
 8003428:	bf00      	nop
 800342a:	e000      	b.n	800342e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 800342c:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800342e:	f7ff f8c3 	bl	80025b8 <HAL_GetREVID>
 8003432:	4603      	mov	r3, r0
 8003434:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003438:	4293      	cmp	r3, r2
 800343a:	d815      	bhi.n	8003468 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	4a2b      	ldr	r2, [pc, #172]	@ (80034ec <ADC_ConfigureBoostMode+0x208>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d908      	bls.n	8003456 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	689a      	ldr	r2, [r3, #8]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003452:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003454:	e03e      	b.n	80034d4 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	689a      	ldr	r2, [r3, #8]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003464:	609a      	str	r2, [r3, #8]
}
 8003466:	e035      	b.n	80034d4 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	085b      	lsrs	r3, r3, #1
 800346c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	4a1f      	ldr	r2, [pc, #124]	@ (80034f0 <ADC_ConfigureBoostMode+0x20c>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d808      	bhi.n	8003488 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	689a      	ldr	r2, [r3, #8]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003484:	609a      	str	r2, [r3, #8]
}
 8003486:	e025      	b.n	80034d4 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	4a1a      	ldr	r2, [pc, #104]	@ (80034f4 <ADC_ConfigureBoostMode+0x210>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d80a      	bhi.n	80034a6 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80034a2:	609a      	str	r2, [r3, #8]
}
 80034a4:	e016      	b.n	80034d4 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	4a13      	ldr	r2, [pc, #76]	@ (80034f8 <ADC_ConfigureBoostMode+0x214>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d80a      	bhi.n	80034c4 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034c0:	609a      	str	r2, [r3, #8]
}
 80034c2:	e007      	b.n	80034d4 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	689a      	ldr	r2, [r3, #8]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80034d2:	609a      	str	r2, [r3, #8]
}
 80034d4:	bf00      	nop
 80034d6:	3710      	adds	r7, #16
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	40022000 	.word	0x40022000
 80034e0:	40022100 	.word	0x40022100
 80034e4:	40022300 	.word	0x40022300
 80034e8:	58026300 	.word	0x58026300
 80034ec:	01312d00 	.word	0x01312d00
 80034f0:	005f5e10 	.word	0x005f5e10
 80034f4:	00bebc20 	.word	0x00bebc20
 80034f8:	017d7840 	.word	0x017d7840

080034fc <LL_ADC_IsEnabled>:
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	f003 0301 	and.w	r3, r3, #1
 800350c:	2b01      	cmp	r3, #1
 800350e:	d101      	bne.n	8003514 <LL_ADC_IsEnabled+0x18>
 8003510:	2301      	movs	r3, #1
 8003512:	e000      	b.n	8003516 <LL_ADC_IsEnabled+0x1a>
 8003514:	2300      	movs	r3, #0
}
 8003516:	4618      	mov	r0, r3
 8003518:	370c      	adds	r7, #12
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr

08003522 <LL_ADC_REG_IsConversionOngoing>:
{
 8003522:	b480      	push	{r7}
 8003524:	b083      	sub	sp, #12
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	f003 0304 	and.w	r3, r3, #4
 8003532:	2b04      	cmp	r3, #4
 8003534:	d101      	bne.n	800353a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003536:	2301      	movs	r3, #1
 8003538:	e000      	b.n	800353c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800353a:	2300      	movs	r3, #0
}
 800353c:	4618      	mov	r0, r3
 800353e:	370c      	adds	r7, #12
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003548:	b590      	push	{r4, r7, lr}
 800354a:	b09f      	sub	sp, #124	@ 0x7c
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003552:	2300      	movs	r3, #0
 8003554:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800355e:	2b01      	cmp	r3, #1
 8003560:	d101      	bne.n	8003566 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003562:	2302      	movs	r3, #2
 8003564:	e0be      	b.n	80036e4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2201      	movs	r2, #1
 800356a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800356e:	2300      	movs	r3, #0
 8003570:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003572:	2300      	movs	r3, #0
 8003574:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a5c      	ldr	r2, [pc, #368]	@ (80036ec <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d102      	bne.n	8003586 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003580:	4b5b      	ldr	r3, [pc, #364]	@ (80036f0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003582:	60bb      	str	r3, [r7, #8]
 8003584:	e001      	b.n	800358a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003586:	2300      	movs	r3, #0
 8003588:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d10b      	bne.n	80035a8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003594:	f043 0220 	orr.w	r2, r3, #32
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2200      	movs	r2, #0
 80035a0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e09d      	b.n	80036e4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	4618      	mov	r0, r3
 80035ac:	f7ff ffb9 	bl	8003522 <LL_ADC_REG_IsConversionOngoing>
 80035b0:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7ff ffb3 	bl	8003522 <LL_ADC_REG_IsConversionOngoing>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d17f      	bne.n	80036c2 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80035c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d17c      	bne.n	80036c2 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a47      	ldr	r2, [pc, #284]	@ (80036ec <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d004      	beq.n	80035dc <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a46      	ldr	r2, [pc, #280]	@ (80036f0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d101      	bne.n	80035e0 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80035dc:	4b45      	ldr	r3, [pc, #276]	@ (80036f4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80035de:	e000      	b.n	80035e2 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80035e0:	4b45      	ldr	r3, [pc, #276]	@ (80036f8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80035e2:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d039      	beq.n	8003660 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80035ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	431a      	orrs	r2, r3
 80035fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80035fc:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a3a      	ldr	r2, [pc, #232]	@ (80036ec <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d004      	beq.n	8003612 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a38      	ldr	r2, [pc, #224]	@ (80036f0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d10e      	bne.n	8003630 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003612:	4836      	ldr	r0, [pc, #216]	@ (80036ec <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003614:	f7ff ff72 	bl	80034fc <LL_ADC_IsEnabled>
 8003618:	4604      	mov	r4, r0
 800361a:	4835      	ldr	r0, [pc, #212]	@ (80036f0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800361c:	f7ff ff6e 	bl	80034fc <LL_ADC_IsEnabled>
 8003620:	4603      	mov	r3, r0
 8003622:	4323      	orrs	r3, r4
 8003624:	2b00      	cmp	r3, #0
 8003626:	bf0c      	ite	eq
 8003628:	2301      	moveq	r3, #1
 800362a:	2300      	movne	r3, #0
 800362c:	b2db      	uxtb	r3, r3
 800362e:	e008      	b.n	8003642 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8003630:	4832      	ldr	r0, [pc, #200]	@ (80036fc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003632:	f7ff ff63 	bl	80034fc <LL_ADC_IsEnabled>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	bf0c      	ite	eq
 800363c:	2301      	moveq	r3, #1
 800363e:	2300      	movne	r3, #0
 8003640:	b2db      	uxtb	r3, r3
 8003642:	2b00      	cmp	r3, #0
 8003644:	d047      	beq.n	80036d6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003646:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003648:	689a      	ldr	r2, [r3, #8]
 800364a:	4b2d      	ldr	r3, [pc, #180]	@ (8003700 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800364c:	4013      	ands	r3, r2
 800364e:	683a      	ldr	r2, [r7, #0]
 8003650:	6811      	ldr	r1, [r2, #0]
 8003652:	683a      	ldr	r2, [r7, #0]
 8003654:	6892      	ldr	r2, [r2, #8]
 8003656:	430a      	orrs	r2, r1
 8003658:	431a      	orrs	r2, r3
 800365a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800365c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800365e:	e03a      	b.n	80036d6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003660:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003668:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800366a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a1e      	ldr	r2, [pc, #120]	@ (80036ec <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d004      	beq.n	8003680 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a1d      	ldr	r2, [pc, #116]	@ (80036f0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d10e      	bne.n	800369e <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8003680:	481a      	ldr	r0, [pc, #104]	@ (80036ec <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003682:	f7ff ff3b 	bl	80034fc <LL_ADC_IsEnabled>
 8003686:	4604      	mov	r4, r0
 8003688:	4819      	ldr	r0, [pc, #100]	@ (80036f0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800368a:	f7ff ff37 	bl	80034fc <LL_ADC_IsEnabled>
 800368e:	4603      	mov	r3, r0
 8003690:	4323      	orrs	r3, r4
 8003692:	2b00      	cmp	r3, #0
 8003694:	bf0c      	ite	eq
 8003696:	2301      	moveq	r3, #1
 8003698:	2300      	movne	r3, #0
 800369a:	b2db      	uxtb	r3, r3
 800369c:	e008      	b.n	80036b0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800369e:	4817      	ldr	r0, [pc, #92]	@ (80036fc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80036a0:	f7ff ff2c 	bl	80034fc <LL_ADC_IsEnabled>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	bf0c      	ite	eq
 80036aa:	2301      	moveq	r3, #1
 80036ac:	2300      	movne	r3, #0
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d010      	beq.n	80036d6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80036b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80036b6:	689a      	ldr	r2, [r3, #8]
 80036b8:	4b11      	ldr	r3, [pc, #68]	@ (8003700 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80036ba:	4013      	ands	r3, r2
 80036bc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80036be:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80036c0:	e009      	b.n	80036d6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036c6:	f043 0220 	orr.w	r2, r3, #32
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80036d4:	e000      	b.n	80036d8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80036d6:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80036e0:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	377c      	adds	r7, #124	@ 0x7c
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd90      	pop	{r4, r7, pc}
 80036ec:	40022000 	.word	0x40022000
 80036f0:	40022100 	.word	0x40022100
 80036f4:	40022300 	.word	0x40022300
 80036f8:	58026300 	.word	0x58026300
 80036fc:	58026000 	.word	0x58026000
 8003700:	fffff0e0 	.word	0xfffff0e0

08003704 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003704:	b480      	push	{r7}
 8003706:	b085      	sub	sp, #20
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f003 0307 	and.w	r3, r3, #7
 8003712:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003714:	4b0b      	ldr	r3, [pc, #44]	@ (8003744 <__NVIC_SetPriorityGrouping+0x40>)
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800371a:	68ba      	ldr	r2, [r7, #8]
 800371c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003720:	4013      	ands	r3, r2
 8003722:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800372c:	4b06      	ldr	r3, [pc, #24]	@ (8003748 <__NVIC_SetPriorityGrouping+0x44>)
 800372e:	4313      	orrs	r3, r2
 8003730:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003732:	4a04      	ldr	r2, [pc, #16]	@ (8003744 <__NVIC_SetPriorityGrouping+0x40>)
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	60d3      	str	r3, [r2, #12]
}
 8003738:	bf00      	nop
 800373a:	3714      	adds	r7, #20
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr
 8003744:	e000ed00 	.word	0xe000ed00
 8003748:	05fa0000 	.word	0x05fa0000

0800374c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800374c:	b480      	push	{r7}
 800374e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003750:	4b04      	ldr	r3, [pc, #16]	@ (8003764 <__NVIC_GetPriorityGrouping+0x18>)
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	0a1b      	lsrs	r3, r3, #8
 8003756:	f003 0307 	and.w	r3, r3, #7
}
 800375a:	4618      	mov	r0, r3
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr
 8003764:	e000ed00 	.word	0xe000ed00

08003768 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	4603      	mov	r3, r0
 8003770:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003772:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003776:	2b00      	cmp	r3, #0
 8003778:	db0b      	blt.n	8003792 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800377a:	88fb      	ldrh	r3, [r7, #6]
 800377c:	f003 021f 	and.w	r2, r3, #31
 8003780:	4907      	ldr	r1, [pc, #28]	@ (80037a0 <__NVIC_EnableIRQ+0x38>)
 8003782:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003786:	095b      	lsrs	r3, r3, #5
 8003788:	2001      	movs	r0, #1
 800378a:	fa00 f202 	lsl.w	r2, r0, r2
 800378e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003792:	bf00      	nop
 8003794:	370c      	adds	r7, #12
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop
 80037a0:	e000e100 	.word	0xe000e100

080037a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	4603      	mov	r3, r0
 80037ac:	6039      	str	r1, [r7, #0]
 80037ae:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80037b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	db0a      	blt.n	80037ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	b2da      	uxtb	r2, r3
 80037bc:	490c      	ldr	r1, [pc, #48]	@ (80037f0 <__NVIC_SetPriority+0x4c>)
 80037be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80037c2:	0112      	lsls	r2, r2, #4
 80037c4:	b2d2      	uxtb	r2, r2
 80037c6:	440b      	add	r3, r1
 80037c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037cc:	e00a      	b.n	80037e4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	b2da      	uxtb	r2, r3
 80037d2:	4908      	ldr	r1, [pc, #32]	@ (80037f4 <__NVIC_SetPriority+0x50>)
 80037d4:	88fb      	ldrh	r3, [r7, #6]
 80037d6:	f003 030f 	and.w	r3, r3, #15
 80037da:	3b04      	subs	r3, #4
 80037dc:	0112      	lsls	r2, r2, #4
 80037de:	b2d2      	uxtb	r2, r2
 80037e0:	440b      	add	r3, r1
 80037e2:	761a      	strb	r2, [r3, #24]
}
 80037e4:	bf00      	nop
 80037e6:	370c      	adds	r7, #12
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr
 80037f0:	e000e100 	.word	0xe000e100
 80037f4:	e000ed00 	.word	0xe000ed00

080037f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b089      	sub	sp, #36	@ 0x24
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	60f8      	str	r0, [r7, #12]
 8003800:	60b9      	str	r1, [r7, #8]
 8003802:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f003 0307 	and.w	r3, r3, #7
 800380a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	f1c3 0307 	rsb	r3, r3, #7
 8003812:	2b04      	cmp	r3, #4
 8003814:	bf28      	it	cs
 8003816:	2304      	movcs	r3, #4
 8003818:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	3304      	adds	r3, #4
 800381e:	2b06      	cmp	r3, #6
 8003820:	d902      	bls.n	8003828 <NVIC_EncodePriority+0x30>
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	3b03      	subs	r3, #3
 8003826:	e000      	b.n	800382a <NVIC_EncodePriority+0x32>
 8003828:	2300      	movs	r3, #0
 800382a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800382c:	f04f 32ff 	mov.w	r2, #4294967295
 8003830:	69bb      	ldr	r3, [r7, #24]
 8003832:	fa02 f303 	lsl.w	r3, r2, r3
 8003836:	43da      	mvns	r2, r3
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	401a      	ands	r2, r3
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003840:	f04f 31ff 	mov.w	r1, #4294967295
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	fa01 f303 	lsl.w	r3, r1, r3
 800384a:	43d9      	mvns	r1, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003850:	4313      	orrs	r3, r2
         );
}
 8003852:	4618      	mov	r0, r3
 8003854:	3724      	adds	r7, #36	@ 0x24
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr
	...

08003860 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	3b01      	subs	r3, #1
 800386c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003870:	d301      	bcc.n	8003876 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003872:	2301      	movs	r3, #1
 8003874:	e00f      	b.n	8003896 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003876:	4a0a      	ldr	r2, [pc, #40]	@ (80038a0 <SysTick_Config+0x40>)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	3b01      	subs	r3, #1
 800387c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800387e:	210f      	movs	r1, #15
 8003880:	f04f 30ff 	mov.w	r0, #4294967295
 8003884:	f7ff ff8e 	bl	80037a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003888:	4b05      	ldr	r3, [pc, #20]	@ (80038a0 <SysTick_Config+0x40>)
 800388a:	2200      	movs	r2, #0
 800388c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800388e:	4b04      	ldr	r3, [pc, #16]	@ (80038a0 <SysTick_Config+0x40>)
 8003890:	2207      	movs	r2, #7
 8003892:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003894:	2300      	movs	r3, #0
}
 8003896:	4618      	mov	r0, r3
 8003898:	3708      	adds	r7, #8
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	e000e010 	.word	0xe000e010

080038a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b082      	sub	sp, #8
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f7ff ff29 	bl	8003704 <__NVIC_SetPriorityGrouping>
}
 80038b2:	bf00      	nop
 80038b4:	3708      	adds	r7, #8
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}

080038ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038ba:	b580      	push	{r7, lr}
 80038bc:	b086      	sub	sp, #24
 80038be:	af00      	add	r7, sp, #0
 80038c0:	4603      	mov	r3, r0
 80038c2:	60b9      	str	r1, [r7, #8]
 80038c4:	607a      	str	r2, [r7, #4]
 80038c6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80038c8:	f7ff ff40 	bl	800374c <__NVIC_GetPriorityGrouping>
 80038cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	68b9      	ldr	r1, [r7, #8]
 80038d2:	6978      	ldr	r0, [r7, #20]
 80038d4:	f7ff ff90 	bl	80037f8 <NVIC_EncodePriority>
 80038d8:	4602      	mov	r2, r0
 80038da:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80038de:	4611      	mov	r1, r2
 80038e0:	4618      	mov	r0, r3
 80038e2:	f7ff ff5f 	bl	80037a4 <__NVIC_SetPriority>
}
 80038e6:	bf00      	nop
 80038e8:	3718      	adds	r7, #24
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}

080038ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038ee:	b580      	push	{r7, lr}
 80038f0:	b082      	sub	sp, #8
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	4603      	mov	r3, r0
 80038f6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80038fc:	4618      	mov	r0, r3
 80038fe:	f7ff ff33 	bl	8003768 <__NVIC_EnableIRQ>
}
 8003902:	bf00      	nop
 8003904:	3708      	adds	r7, #8
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}

0800390a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800390a:	b580      	push	{r7, lr}
 800390c:	b082      	sub	sp, #8
 800390e:	af00      	add	r7, sp, #0
 8003910:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f7ff ffa4 	bl	8003860 <SysTick_Config>
 8003918:	4603      	mov	r3, r0
}
 800391a:	4618      	mov	r0, r3
 800391c:	3708      	adds	r7, #8
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
	...

08003924 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8003924:	b480      	push	{r7}
 8003926:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8003928:	f3bf 8f5f 	dmb	sy
}
 800392c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800392e:	4b07      	ldr	r3, [pc, #28]	@ (800394c <HAL_MPU_Disable+0x28>)
 8003930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003932:	4a06      	ldr	r2, [pc, #24]	@ (800394c <HAL_MPU_Disable+0x28>)
 8003934:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003938:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800393a:	4b05      	ldr	r3, [pc, #20]	@ (8003950 <HAL_MPU_Disable+0x2c>)
 800393c:	2200      	movs	r2, #0
 800393e:	605a      	str	r2, [r3, #4]
}
 8003940:	bf00      	nop
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr
 800394a:	bf00      	nop
 800394c:	e000ed00 	.word	0xe000ed00
 8003950:	e000ed90 	.word	0xe000ed90

08003954 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800395c:	4a0b      	ldr	r2, [pc, #44]	@ (800398c <HAL_MPU_Enable+0x38>)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f043 0301 	orr.w	r3, r3, #1
 8003964:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8003966:	4b0a      	ldr	r3, [pc, #40]	@ (8003990 <HAL_MPU_Enable+0x3c>)
 8003968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800396a:	4a09      	ldr	r2, [pc, #36]	@ (8003990 <HAL_MPU_Enable+0x3c>)
 800396c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003970:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003972:	f3bf 8f4f 	dsb	sy
}
 8003976:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003978:	f3bf 8f6f 	isb	sy
}
 800397c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800397e:	bf00      	nop
 8003980:	370c      	adds	r7, #12
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr
 800398a:	bf00      	nop
 800398c:	e000ed90 	.word	0xe000ed90
 8003990:	e000ed00 	.word	0xe000ed00

08003994 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	785a      	ldrb	r2, [r3, #1]
 80039a0:	4b1b      	ldr	r3, [pc, #108]	@ (8003a10 <HAL_MPU_ConfigRegion+0x7c>)
 80039a2:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80039a4:	4b1a      	ldr	r3, [pc, #104]	@ (8003a10 <HAL_MPU_ConfigRegion+0x7c>)
 80039a6:	691b      	ldr	r3, [r3, #16]
 80039a8:	4a19      	ldr	r2, [pc, #100]	@ (8003a10 <HAL_MPU_ConfigRegion+0x7c>)
 80039aa:	f023 0301 	bic.w	r3, r3, #1
 80039ae:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80039b0:	4a17      	ldr	r2, [pc, #92]	@ (8003a10 <HAL_MPU_ConfigRegion+0x7c>)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	7b1b      	ldrb	r3, [r3, #12]
 80039bc:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	7adb      	ldrb	r3, [r3, #11]
 80039c2:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80039c4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	7a9b      	ldrb	r3, [r3, #10]
 80039ca:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80039cc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	7b5b      	ldrb	r3, [r3, #13]
 80039d2:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80039d4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	7b9b      	ldrb	r3, [r3, #14]
 80039da:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80039dc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	7bdb      	ldrb	r3, [r3, #15]
 80039e2:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80039e4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	7a5b      	ldrb	r3, [r3, #9]
 80039ea:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80039ec:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	7a1b      	ldrb	r3, [r3, #8]
 80039f2:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80039f4:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	7812      	ldrb	r2, [r2, #0]
 80039fa:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80039fc:	4a04      	ldr	r2, [pc, #16]	@ (8003a10 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80039fe:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003a00:	6113      	str	r3, [r2, #16]
}
 8003a02:	bf00      	nop
 8003a04:	370c      	adds	r7, #12
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr
 8003a0e:	bf00      	nop
 8003a10:	e000ed90 	.word	0xe000ed90

08003a14 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b086      	sub	sp, #24
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003a1c:	f7fe fd9c 	bl	8002558 <HAL_GetTick>
 8003a20:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d101      	bne.n	8003a2c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e316      	b.n	800405a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a66      	ldr	r2, [pc, #408]	@ (8003bcc <HAL_DMA_Init+0x1b8>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d04a      	beq.n	8003acc <HAL_DMA_Init+0xb8>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a65      	ldr	r2, [pc, #404]	@ (8003bd0 <HAL_DMA_Init+0x1bc>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d045      	beq.n	8003acc <HAL_DMA_Init+0xb8>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a63      	ldr	r2, [pc, #396]	@ (8003bd4 <HAL_DMA_Init+0x1c0>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d040      	beq.n	8003acc <HAL_DMA_Init+0xb8>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a62      	ldr	r2, [pc, #392]	@ (8003bd8 <HAL_DMA_Init+0x1c4>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d03b      	beq.n	8003acc <HAL_DMA_Init+0xb8>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a60      	ldr	r2, [pc, #384]	@ (8003bdc <HAL_DMA_Init+0x1c8>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d036      	beq.n	8003acc <HAL_DMA_Init+0xb8>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a5f      	ldr	r2, [pc, #380]	@ (8003be0 <HAL_DMA_Init+0x1cc>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d031      	beq.n	8003acc <HAL_DMA_Init+0xb8>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a5d      	ldr	r2, [pc, #372]	@ (8003be4 <HAL_DMA_Init+0x1d0>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d02c      	beq.n	8003acc <HAL_DMA_Init+0xb8>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a5c      	ldr	r2, [pc, #368]	@ (8003be8 <HAL_DMA_Init+0x1d4>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d027      	beq.n	8003acc <HAL_DMA_Init+0xb8>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a5a      	ldr	r2, [pc, #360]	@ (8003bec <HAL_DMA_Init+0x1d8>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d022      	beq.n	8003acc <HAL_DMA_Init+0xb8>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a59      	ldr	r2, [pc, #356]	@ (8003bf0 <HAL_DMA_Init+0x1dc>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d01d      	beq.n	8003acc <HAL_DMA_Init+0xb8>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a57      	ldr	r2, [pc, #348]	@ (8003bf4 <HAL_DMA_Init+0x1e0>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d018      	beq.n	8003acc <HAL_DMA_Init+0xb8>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a56      	ldr	r2, [pc, #344]	@ (8003bf8 <HAL_DMA_Init+0x1e4>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d013      	beq.n	8003acc <HAL_DMA_Init+0xb8>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a54      	ldr	r2, [pc, #336]	@ (8003bfc <HAL_DMA_Init+0x1e8>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d00e      	beq.n	8003acc <HAL_DMA_Init+0xb8>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a53      	ldr	r2, [pc, #332]	@ (8003c00 <HAL_DMA_Init+0x1ec>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d009      	beq.n	8003acc <HAL_DMA_Init+0xb8>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a51      	ldr	r2, [pc, #324]	@ (8003c04 <HAL_DMA_Init+0x1f0>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d004      	beq.n	8003acc <HAL_DMA_Init+0xb8>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a50      	ldr	r2, [pc, #320]	@ (8003c08 <HAL_DMA_Init+0x1f4>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d101      	bne.n	8003ad0 <HAL_DMA_Init+0xbc>
 8003acc:	2301      	movs	r3, #1
 8003ace:	e000      	b.n	8003ad2 <HAL_DMA_Init+0xbe>
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	f000 813b 	beq.w	8003d4e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2202      	movs	r2, #2
 8003adc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a37      	ldr	r2, [pc, #220]	@ (8003bcc <HAL_DMA_Init+0x1b8>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d04a      	beq.n	8003b88 <HAL_DMA_Init+0x174>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a36      	ldr	r2, [pc, #216]	@ (8003bd0 <HAL_DMA_Init+0x1bc>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d045      	beq.n	8003b88 <HAL_DMA_Init+0x174>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a34      	ldr	r2, [pc, #208]	@ (8003bd4 <HAL_DMA_Init+0x1c0>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d040      	beq.n	8003b88 <HAL_DMA_Init+0x174>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a33      	ldr	r2, [pc, #204]	@ (8003bd8 <HAL_DMA_Init+0x1c4>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d03b      	beq.n	8003b88 <HAL_DMA_Init+0x174>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a31      	ldr	r2, [pc, #196]	@ (8003bdc <HAL_DMA_Init+0x1c8>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d036      	beq.n	8003b88 <HAL_DMA_Init+0x174>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a30      	ldr	r2, [pc, #192]	@ (8003be0 <HAL_DMA_Init+0x1cc>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d031      	beq.n	8003b88 <HAL_DMA_Init+0x174>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a2e      	ldr	r2, [pc, #184]	@ (8003be4 <HAL_DMA_Init+0x1d0>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d02c      	beq.n	8003b88 <HAL_DMA_Init+0x174>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a2d      	ldr	r2, [pc, #180]	@ (8003be8 <HAL_DMA_Init+0x1d4>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d027      	beq.n	8003b88 <HAL_DMA_Init+0x174>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a2b      	ldr	r2, [pc, #172]	@ (8003bec <HAL_DMA_Init+0x1d8>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d022      	beq.n	8003b88 <HAL_DMA_Init+0x174>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a2a      	ldr	r2, [pc, #168]	@ (8003bf0 <HAL_DMA_Init+0x1dc>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d01d      	beq.n	8003b88 <HAL_DMA_Init+0x174>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a28      	ldr	r2, [pc, #160]	@ (8003bf4 <HAL_DMA_Init+0x1e0>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d018      	beq.n	8003b88 <HAL_DMA_Init+0x174>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a27      	ldr	r2, [pc, #156]	@ (8003bf8 <HAL_DMA_Init+0x1e4>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d013      	beq.n	8003b88 <HAL_DMA_Init+0x174>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a25      	ldr	r2, [pc, #148]	@ (8003bfc <HAL_DMA_Init+0x1e8>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d00e      	beq.n	8003b88 <HAL_DMA_Init+0x174>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a24      	ldr	r2, [pc, #144]	@ (8003c00 <HAL_DMA_Init+0x1ec>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d009      	beq.n	8003b88 <HAL_DMA_Init+0x174>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a22      	ldr	r2, [pc, #136]	@ (8003c04 <HAL_DMA_Init+0x1f0>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d004      	beq.n	8003b88 <HAL_DMA_Init+0x174>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a21      	ldr	r2, [pc, #132]	@ (8003c08 <HAL_DMA_Init+0x1f4>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d108      	bne.n	8003b9a <HAL_DMA_Init+0x186>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f022 0201 	bic.w	r2, r2, #1
 8003b96:	601a      	str	r2, [r3, #0]
 8003b98:	e007      	b.n	8003baa <HAL_DMA_Init+0x196>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f022 0201 	bic.w	r2, r2, #1
 8003ba8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003baa:	e02f      	b.n	8003c0c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003bac:	f7fe fcd4 	bl	8002558 <HAL_GetTick>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	2b05      	cmp	r3, #5
 8003bb8:	d928      	bls.n	8003c0c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2220      	movs	r2, #32
 8003bbe:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2203      	movs	r2, #3
 8003bc4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e246      	b.n	800405a <HAL_DMA_Init+0x646>
 8003bcc:	40020010 	.word	0x40020010
 8003bd0:	40020028 	.word	0x40020028
 8003bd4:	40020040 	.word	0x40020040
 8003bd8:	40020058 	.word	0x40020058
 8003bdc:	40020070 	.word	0x40020070
 8003be0:	40020088 	.word	0x40020088
 8003be4:	400200a0 	.word	0x400200a0
 8003be8:	400200b8 	.word	0x400200b8
 8003bec:	40020410 	.word	0x40020410
 8003bf0:	40020428 	.word	0x40020428
 8003bf4:	40020440 	.word	0x40020440
 8003bf8:	40020458 	.word	0x40020458
 8003bfc:	40020470 	.word	0x40020470
 8003c00:	40020488 	.word	0x40020488
 8003c04:	400204a0 	.word	0x400204a0
 8003c08:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0301 	and.w	r3, r3, #1
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d1c8      	bne.n	8003bac <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003c22:	697a      	ldr	r2, [r7, #20]
 8003c24:	4b83      	ldr	r3, [pc, #524]	@ (8003e34 <HAL_DMA_Init+0x420>)
 8003c26:	4013      	ands	r3, r2
 8003c28:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003c32:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	691b      	ldr	r3, [r3, #16]
 8003c38:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c3e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	699b      	ldr	r3, [r3, #24]
 8003c44:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c4a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6a1b      	ldr	r3, [r3, #32]
 8003c50:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003c52:	697a      	ldr	r2, [r7, #20]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c5c:	2b04      	cmp	r3, #4
 8003c5e:	d107      	bne.n	8003c70 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	697a      	ldr	r2, [r7, #20]
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003c70:	4b71      	ldr	r3, [pc, #452]	@ (8003e38 <HAL_DMA_Init+0x424>)
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	4b71      	ldr	r3, [pc, #452]	@ (8003e3c <HAL_DMA_Init+0x428>)
 8003c76:	4013      	ands	r3, r2
 8003c78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c7c:	d328      	bcc.n	8003cd0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	2b28      	cmp	r3, #40	@ 0x28
 8003c84:	d903      	bls.n	8003c8e <HAL_DMA_Init+0x27a>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	2b2e      	cmp	r3, #46	@ 0x2e
 8003c8c:	d917      	bls.n	8003cbe <HAL_DMA_Init+0x2aa>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	2b3e      	cmp	r3, #62	@ 0x3e
 8003c94:	d903      	bls.n	8003c9e <HAL_DMA_Init+0x28a>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	2b42      	cmp	r3, #66	@ 0x42
 8003c9c:	d90f      	bls.n	8003cbe <HAL_DMA_Init+0x2aa>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	2b46      	cmp	r3, #70	@ 0x46
 8003ca4:	d903      	bls.n	8003cae <HAL_DMA_Init+0x29a>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	2b48      	cmp	r3, #72	@ 0x48
 8003cac:	d907      	bls.n	8003cbe <HAL_DMA_Init+0x2aa>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	2b4e      	cmp	r3, #78	@ 0x4e
 8003cb4:	d905      	bls.n	8003cc2 <HAL_DMA_Init+0x2ae>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	2b52      	cmp	r3, #82	@ 0x52
 8003cbc:	d801      	bhi.n	8003cc2 <HAL_DMA_Init+0x2ae>
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e000      	b.n	8003cc4 <HAL_DMA_Init+0x2b0>
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d003      	beq.n	8003cd0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003cce:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	697a      	ldr	r2, [r7, #20]
 8003cd6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	695b      	ldr	r3, [r3, #20]
 8003cde:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	f023 0307 	bic.w	r3, r3, #7
 8003ce6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cec:	697a      	ldr	r2, [r7, #20]
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cf6:	2b04      	cmp	r3, #4
 8003cf8:	d117      	bne.n	8003d2a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cfe:	697a      	ldr	r2, [r7, #20]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d00e      	beq.n	8003d2a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f002 fb4d 	bl	80063ac <DMA_CheckFifoParam>
 8003d12:	4603      	mov	r3, r0
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d008      	beq.n	8003d2a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2240      	movs	r2, #64	@ 0x40
 8003d1c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2201      	movs	r2, #1
 8003d22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e197      	b.n	800405a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	697a      	ldr	r2, [r7, #20]
 8003d30:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f002 fa88 	bl	8006248 <DMA_CalcBaseAndBitshift>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d40:	f003 031f 	and.w	r3, r3, #31
 8003d44:	223f      	movs	r2, #63	@ 0x3f
 8003d46:	409a      	lsls	r2, r3
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	609a      	str	r2, [r3, #8]
 8003d4c:	e0cd      	b.n	8003eea <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a3b      	ldr	r2, [pc, #236]	@ (8003e40 <HAL_DMA_Init+0x42c>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d022      	beq.n	8003d9e <HAL_DMA_Init+0x38a>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a39      	ldr	r2, [pc, #228]	@ (8003e44 <HAL_DMA_Init+0x430>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d01d      	beq.n	8003d9e <HAL_DMA_Init+0x38a>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a38      	ldr	r2, [pc, #224]	@ (8003e48 <HAL_DMA_Init+0x434>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d018      	beq.n	8003d9e <HAL_DMA_Init+0x38a>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a36      	ldr	r2, [pc, #216]	@ (8003e4c <HAL_DMA_Init+0x438>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d013      	beq.n	8003d9e <HAL_DMA_Init+0x38a>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a35      	ldr	r2, [pc, #212]	@ (8003e50 <HAL_DMA_Init+0x43c>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d00e      	beq.n	8003d9e <HAL_DMA_Init+0x38a>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a33      	ldr	r2, [pc, #204]	@ (8003e54 <HAL_DMA_Init+0x440>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d009      	beq.n	8003d9e <HAL_DMA_Init+0x38a>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a32      	ldr	r2, [pc, #200]	@ (8003e58 <HAL_DMA_Init+0x444>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d004      	beq.n	8003d9e <HAL_DMA_Init+0x38a>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a30      	ldr	r2, [pc, #192]	@ (8003e5c <HAL_DMA_Init+0x448>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d101      	bne.n	8003da2 <HAL_DMA_Init+0x38e>
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e000      	b.n	8003da4 <HAL_DMA_Init+0x390>
 8003da2:	2300      	movs	r3, #0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	f000 8097 	beq.w	8003ed8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a24      	ldr	r2, [pc, #144]	@ (8003e40 <HAL_DMA_Init+0x42c>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d021      	beq.n	8003df8 <HAL_DMA_Init+0x3e4>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a22      	ldr	r2, [pc, #136]	@ (8003e44 <HAL_DMA_Init+0x430>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d01c      	beq.n	8003df8 <HAL_DMA_Init+0x3e4>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a21      	ldr	r2, [pc, #132]	@ (8003e48 <HAL_DMA_Init+0x434>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d017      	beq.n	8003df8 <HAL_DMA_Init+0x3e4>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a1f      	ldr	r2, [pc, #124]	@ (8003e4c <HAL_DMA_Init+0x438>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d012      	beq.n	8003df8 <HAL_DMA_Init+0x3e4>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a1e      	ldr	r2, [pc, #120]	@ (8003e50 <HAL_DMA_Init+0x43c>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d00d      	beq.n	8003df8 <HAL_DMA_Init+0x3e4>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a1c      	ldr	r2, [pc, #112]	@ (8003e54 <HAL_DMA_Init+0x440>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d008      	beq.n	8003df8 <HAL_DMA_Init+0x3e4>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a1b      	ldr	r2, [pc, #108]	@ (8003e58 <HAL_DMA_Init+0x444>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d003      	beq.n	8003df8 <HAL_DMA_Init+0x3e4>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a19      	ldr	r2, [pc, #100]	@ (8003e5c <HAL_DMA_Init+0x448>)
 8003df6:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2202      	movs	r2, #2
 8003dfc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2200      	movs	r2, #0
 8003e04:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003e10:	697a      	ldr	r2, [r7, #20]
 8003e12:	4b13      	ldr	r3, [pc, #76]	@ (8003e60 <HAL_DMA_Init+0x44c>)
 8003e14:	4013      	ands	r3, r2
 8003e16:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	2b40      	cmp	r3, #64	@ 0x40
 8003e1e:	d021      	beq.n	8003e64 <HAL_DMA_Init+0x450>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	2b80      	cmp	r3, #128	@ 0x80
 8003e26:	d102      	bne.n	8003e2e <HAL_DMA_Init+0x41a>
 8003e28:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003e2c:	e01b      	b.n	8003e66 <HAL_DMA_Init+0x452>
 8003e2e:	2300      	movs	r3, #0
 8003e30:	e019      	b.n	8003e66 <HAL_DMA_Init+0x452>
 8003e32:	bf00      	nop
 8003e34:	fe10803f 	.word	0xfe10803f
 8003e38:	5c001000 	.word	0x5c001000
 8003e3c:	ffff0000 	.word	0xffff0000
 8003e40:	58025408 	.word	0x58025408
 8003e44:	5802541c 	.word	0x5802541c
 8003e48:	58025430 	.word	0x58025430
 8003e4c:	58025444 	.word	0x58025444
 8003e50:	58025458 	.word	0x58025458
 8003e54:	5802546c 	.word	0x5802546c
 8003e58:	58025480 	.word	0x58025480
 8003e5c:	58025494 	.word	0x58025494
 8003e60:	fffe000f 	.word	0xfffe000f
 8003e64:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	68d2      	ldr	r2, [r2, #12]
 8003e6a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003e6c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	691b      	ldr	r3, [r3, #16]
 8003e72:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003e74:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	695b      	ldr	r3, [r3, #20]
 8003e7a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003e7c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	699b      	ldr	r3, [r3, #24]
 8003e82:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003e84:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	69db      	ldr	r3, [r3, #28]
 8003e8a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003e8c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a1b      	ldr	r3, [r3, #32]
 8003e92:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003e94:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003e96:	697a      	ldr	r2, [r7, #20]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	697a      	ldr	r2, [r7, #20]
 8003ea2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	4b6e      	ldr	r3, [pc, #440]	@ (8004064 <HAL_DMA_Init+0x650>)
 8003eac:	4413      	add	r3, r2
 8003eae:	4a6e      	ldr	r2, [pc, #440]	@ (8004068 <HAL_DMA_Init+0x654>)
 8003eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8003eb4:	091b      	lsrs	r3, r3, #4
 8003eb6:	009a      	lsls	r2, r3, #2
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f002 f9c3 	bl	8006248 <DMA_CalcBaseAndBitshift>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003eca:	f003 031f 	and.w	r3, r3, #31
 8003ece:	2201      	movs	r2, #1
 8003ed0:	409a      	lsls	r2, r3
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	605a      	str	r2, [r3, #4]
 8003ed6:	e008      	b.n	8003eea <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2240      	movs	r2, #64	@ 0x40
 8003edc:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2203      	movs	r2, #3
 8003ee2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e0b7      	b.n	800405a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a5f      	ldr	r2, [pc, #380]	@ (800406c <HAL_DMA_Init+0x658>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d072      	beq.n	8003fda <HAL_DMA_Init+0x5c6>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a5d      	ldr	r2, [pc, #372]	@ (8004070 <HAL_DMA_Init+0x65c>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d06d      	beq.n	8003fda <HAL_DMA_Init+0x5c6>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a5c      	ldr	r2, [pc, #368]	@ (8004074 <HAL_DMA_Init+0x660>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d068      	beq.n	8003fda <HAL_DMA_Init+0x5c6>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a5a      	ldr	r2, [pc, #360]	@ (8004078 <HAL_DMA_Init+0x664>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d063      	beq.n	8003fda <HAL_DMA_Init+0x5c6>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a59      	ldr	r2, [pc, #356]	@ (800407c <HAL_DMA_Init+0x668>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d05e      	beq.n	8003fda <HAL_DMA_Init+0x5c6>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a57      	ldr	r2, [pc, #348]	@ (8004080 <HAL_DMA_Init+0x66c>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d059      	beq.n	8003fda <HAL_DMA_Init+0x5c6>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a56      	ldr	r2, [pc, #344]	@ (8004084 <HAL_DMA_Init+0x670>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d054      	beq.n	8003fda <HAL_DMA_Init+0x5c6>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a54      	ldr	r2, [pc, #336]	@ (8004088 <HAL_DMA_Init+0x674>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d04f      	beq.n	8003fda <HAL_DMA_Init+0x5c6>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a53      	ldr	r2, [pc, #332]	@ (800408c <HAL_DMA_Init+0x678>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d04a      	beq.n	8003fda <HAL_DMA_Init+0x5c6>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a51      	ldr	r2, [pc, #324]	@ (8004090 <HAL_DMA_Init+0x67c>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d045      	beq.n	8003fda <HAL_DMA_Init+0x5c6>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a50      	ldr	r2, [pc, #320]	@ (8004094 <HAL_DMA_Init+0x680>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d040      	beq.n	8003fda <HAL_DMA_Init+0x5c6>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a4e      	ldr	r2, [pc, #312]	@ (8004098 <HAL_DMA_Init+0x684>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d03b      	beq.n	8003fda <HAL_DMA_Init+0x5c6>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a4d      	ldr	r2, [pc, #308]	@ (800409c <HAL_DMA_Init+0x688>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d036      	beq.n	8003fda <HAL_DMA_Init+0x5c6>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a4b      	ldr	r2, [pc, #300]	@ (80040a0 <HAL_DMA_Init+0x68c>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d031      	beq.n	8003fda <HAL_DMA_Init+0x5c6>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a4a      	ldr	r2, [pc, #296]	@ (80040a4 <HAL_DMA_Init+0x690>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d02c      	beq.n	8003fda <HAL_DMA_Init+0x5c6>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a48      	ldr	r2, [pc, #288]	@ (80040a8 <HAL_DMA_Init+0x694>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d027      	beq.n	8003fda <HAL_DMA_Init+0x5c6>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a47      	ldr	r2, [pc, #284]	@ (80040ac <HAL_DMA_Init+0x698>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d022      	beq.n	8003fda <HAL_DMA_Init+0x5c6>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a45      	ldr	r2, [pc, #276]	@ (80040b0 <HAL_DMA_Init+0x69c>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d01d      	beq.n	8003fda <HAL_DMA_Init+0x5c6>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a44      	ldr	r2, [pc, #272]	@ (80040b4 <HAL_DMA_Init+0x6a0>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d018      	beq.n	8003fda <HAL_DMA_Init+0x5c6>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a42      	ldr	r2, [pc, #264]	@ (80040b8 <HAL_DMA_Init+0x6a4>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d013      	beq.n	8003fda <HAL_DMA_Init+0x5c6>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a41      	ldr	r2, [pc, #260]	@ (80040bc <HAL_DMA_Init+0x6a8>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d00e      	beq.n	8003fda <HAL_DMA_Init+0x5c6>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a3f      	ldr	r2, [pc, #252]	@ (80040c0 <HAL_DMA_Init+0x6ac>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d009      	beq.n	8003fda <HAL_DMA_Init+0x5c6>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a3e      	ldr	r2, [pc, #248]	@ (80040c4 <HAL_DMA_Init+0x6b0>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d004      	beq.n	8003fda <HAL_DMA_Init+0x5c6>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a3c      	ldr	r2, [pc, #240]	@ (80040c8 <HAL_DMA_Init+0x6b4>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d101      	bne.n	8003fde <HAL_DMA_Init+0x5ca>
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e000      	b.n	8003fe0 <HAL_DMA_Init+0x5cc>
 8003fde:	2300      	movs	r3, #0
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d032      	beq.n	800404a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	f002 fa5d 	bl	80064a4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	2b80      	cmp	r3, #128	@ 0x80
 8003ff0:	d102      	bne.n	8003ff8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	685a      	ldr	r2, [r3, #4]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004000:	b2d2      	uxtb	r2, r2
 8004002:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800400c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d010      	beq.n	8004038 <HAL_DMA_Init+0x624>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	2b08      	cmp	r3, #8
 800401c:	d80c      	bhi.n	8004038 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f002 fada 	bl	80065d8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004028:	2200      	movs	r2, #0
 800402a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004030:	687a      	ldr	r2, [r7, #4]
 8004032:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004034:	605a      	str	r2, [r3, #4]
 8004036:	e008      	b.n	800404a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2200      	movs	r2, #0
 800404e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004058:	2300      	movs	r3, #0
}
 800405a:	4618      	mov	r0, r3
 800405c:	3718      	adds	r7, #24
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
 8004062:	bf00      	nop
 8004064:	a7fdabf8 	.word	0xa7fdabf8
 8004068:	cccccccd 	.word	0xcccccccd
 800406c:	40020010 	.word	0x40020010
 8004070:	40020028 	.word	0x40020028
 8004074:	40020040 	.word	0x40020040
 8004078:	40020058 	.word	0x40020058
 800407c:	40020070 	.word	0x40020070
 8004080:	40020088 	.word	0x40020088
 8004084:	400200a0 	.word	0x400200a0
 8004088:	400200b8 	.word	0x400200b8
 800408c:	40020410 	.word	0x40020410
 8004090:	40020428 	.word	0x40020428
 8004094:	40020440 	.word	0x40020440
 8004098:	40020458 	.word	0x40020458
 800409c:	40020470 	.word	0x40020470
 80040a0:	40020488 	.word	0x40020488
 80040a4:	400204a0 	.word	0x400204a0
 80040a8:	400204b8 	.word	0x400204b8
 80040ac:	58025408 	.word	0x58025408
 80040b0:	5802541c 	.word	0x5802541c
 80040b4:	58025430 	.word	0x58025430
 80040b8:	58025444 	.word	0x58025444
 80040bc:	58025458 	.word	0x58025458
 80040c0:	5802546c 	.word	0x5802546c
 80040c4:	58025480 	.word	0x58025480
 80040c8:	58025494 	.word	0x58025494

080040cc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b086      	sub	sp, #24
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	60f8      	str	r0, [r7, #12]
 80040d4:	60b9      	str	r1, [r7, #8]
 80040d6:	607a      	str	r2, [r7, #4]
 80040d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040da:	2300      	movs	r3, #0
 80040dc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d101      	bne.n	80040e8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e226      	b.n	8004536 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d101      	bne.n	80040f6 <HAL_DMA_Start_IT+0x2a>
 80040f2:	2302      	movs	r3, #2
 80040f4:	e21f      	b.n	8004536 <HAL_DMA_Start_IT+0x46a>
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2201      	movs	r2, #1
 80040fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004104:	b2db      	uxtb	r3, r3
 8004106:	2b01      	cmp	r3, #1
 8004108:	f040 820a 	bne.w	8004520 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2202      	movs	r2, #2
 8004110:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2200      	movs	r2, #0
 8004118:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a68      	ldr	r2, [pc, #416]	@ (80042c0 <HAL_DMA_Start_IT+0x1f4>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d04a      	beq.n	80041ba <HAL_DMA_Start_IT+0xee>
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a66      	ldr	r2, [pc, #408]	@ (80042c4 <HAL_DMA_Start_IT+0x1f8>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d045      	beq.n	80041ba <HAL_DMA_Start_IT+0xee>
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a65      	ldr	r2, [pc, #404]	@ (80042c8 <HAL_DMA_Start_IT+0x1fc>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d040      	beq.n	80041ba <HAL_DMA_Start_IT+0xee>
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a63      	ldr	r2, [pc, #396]	@ (80042cc <HAL_DMA_Start_IT+0x200>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d03b      	beq.n	80041ba <HAL_DMA_Start_IT+0xee>
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a62      	ldr	r2, [pc, #392]	@ (80042d0 <HAL_DMA_Start_IT+0x204>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d036      	beq.n	80041ba <HAL_DMA_Start_IT+0xee>
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a60      	ldr	r2, [pc, #384]	@ (80042d4 <HAL_DMA_Start_IT+0x208>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d031      	beq.n	80041ba <HAL_DMA_Start_IT+0xee>
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a5f      	ldr	r2, [pc, #380]	@ (80042d8 <HAL_DMA_Start_IT+0x20c>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d02c      	beq.n	80041ba <HAL_DMA_Start_IT+0xee>
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a5d      	ldr	r2, [pc, #372]	@ (80042dc <HAL_DMA_Start_IT+0x210>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d027      	beq.n	80041ba <HAL_DMA_Start_IT+0xee>
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a5c      	ldr	r2, [pc, #368]	@ (80042e0 <HAL_DMA_Start_IT+0x214>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d022      	beq.n	80041ba <HAL_DMA_Start_IT+0xee>
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a5a      	ldr	r2, [pc, #360]	@ (80042e4 <HAL_DMA_Start_IT+0x218>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d01d      	beq.n	80041ba <HAL_DMA_Start_IT+0xee>
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a59      	ldr	r2, [pc, #356]	@ (80042e8 <HAL_DMA_Start_IT+0x21c>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d018      	beq.n	80041ba <HAL_DMA_Start_IT+0xee>
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a57      	ldr	r2, [pc, #348]	@ (80042ec <HAL_DMA_Start_IT+0x220>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d013      	beq.n	80041ba <HAL_DMA_Start_IT+0xee>
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a56      	ldr	r2, [pc, #344]	@ (80042f0 <HAL_DMA_Start_IT+0x224>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d00e      	beq.n	80041ba <HAL_DMA_Start_IT+0xee>
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a54      	ldr	r2, [pc, #336]	@ (80042f4 <HAL_DMA_Start_IT+0x228>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d009      	beq.n	80041ba <HAL_DMA_Start_IT+0xee>
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a53      	ldr	r2, [pc, #332]	@ (80042f8 <HAL_DMA_Start_IT+0x22c>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d004      	beq.n	80041ba <HAL_DMA_Start_IT+0xee>
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a51      	ldr	r2, [pc, #324]	@ (80042fc <HAL_DMA_Start_IT+0x230>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d108      	bne.n	80041cc <HAL_DMA_Start_IT+0x100>
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f022 0201 	bic.w	r2, r2, #1
 80041c8:	601a      	str	r2, [r3, #0]
 80041ca:	e007      	b.n	80041dc <HAL_DMA_Start_IT+0x110>
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f022 0201 	bic.w	r2, r2, #1
 80041da:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	68b9      	ldr	r1, [r7, #8]
 80041e2:	68f8      	ldr	r0, [r7, #12]
 80041e4:	f001 fe84 	bl	8005ef0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a34      	ldr	r2, [pc, #208]	@ (80042c0 <HAL_DMA_Start_IT+0x1f4>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d04a      	beq.n	8004288 <HAL_DMA_Start_IT+0x1bc>
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a33      	ldr	r2, [pc, #204]	@ (80042c4 <HAL_DMA_Start_IT+0x1f8>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d045      	beq.n	8004288 <HAL_DMA_Start_IT+0x1bc>
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a31      	ldr	r2, [pc, #196]	@ (80042c8 <HAL_DMA_Start_IT+0x1fc>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d040      	beq.n	8004288 <HAL_DMA_Start_IT+0x1bc>
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a30      	ldr	r2, [pc, #192]	@ (80042cc <HAL_DMA_Start_IT+0x200>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d03b      	beq.n	8004288 <HAL_DMA_Start_IT+0x1bc>
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a2e      	ldr	r2, [pc, #184]	@ (80042d0 <HAL_DMA_Start_IT+0x204>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d036      	beq.n	8004288 <HAL_DMA_Start_IT+0x1bc>
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a2d      	ldr	r2, [pc, #180]	@ (80042d4 <HAL_DMA_Start_IT+0x208>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d031      	beq.n	8004288 <HAL_DMA_Start_IT+0x1bc>
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a2b      	ldr	r2, [pc, #172]	@ (80042d8 <HAL_DMA_Start_IT+0x20c>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d02c      	beq.n	8004288 <HAL_DMA_Start_IT+0x1bc>
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a2a      	ldr	r2, [pc, #168]	@ (80042dc <HAL_DMA_Start_IT+0x210>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d027      	beq.n	8004288 <HAL_DMA_Start_IT+0x1bc>
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a28      	ldr	r2, [pc, #160]	@ (80042e0 <HAL_DMA_Start_IT+0x214>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d022      	beq.n	8004288 <HAL_DMA_Start_IT+0x1bc>
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a27      	ldr	r2, [pc, #156]	@ (80042e4 <HAL_DMA_Start_IT+0x218>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d01d      	beq.n	8004288 <HAL_DMA_Start_IT+0x1bc>
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a25      	ldr	r2, [pc, #148]	@ (80042e8 <HAL_DMA_Start_IT+0x21c>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d018      	beq.n	8004288 <HAL_DMA_Start_IT+0x1bc>
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a24      	ldr	r2, [pc, #144]	@ (80042ec <HAL_DMA_Start_IT+0x220>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d013      	beq.n	8004288 <HAL_DMA_Start_IT+0x1bc>
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a22      	ldr	r2, [pc, #136]	@ (80042f0 <HAL_DMA_Start_IT+0x224>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d00e      	beq.n	8004288 <HAL_DMA_Start_IT+0x1bc>
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a21      	ldr	r2, [pc, #132]	@ (80042f4 <HAL_DMA_Start_IT+0x228>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d009      	beq.n	8004288 <HAL_DMA_Start_IT+0x1bc>
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a1f      	ldr	r2, [pc, #124]	@ (80042f8 <HAL_DMA_Start_IT+0x22c>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d004      	beq.n	8004288 <HAL_DMA_Start_IT+0x1bc>
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a1e      	ldr	r2, [pc, #120]	@ (80042fc <HAL_DMA_Start_IT+0x230>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d101      	bne.n	800428c <HAL_DMA_Start_IT+0x1c0>
 8004288:	2301      	movs	r3, #1
 800428a:	e000      	b.n	800428e <HAL_DMA_Start_IT+0x1c2>
 800428c:	2300      	movs	r3, #0
 800428e:	2b00      	cmp	r3, #0
 8004290:	d036      	beq.n	8004300 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f023 021e 	bic.w	r2, r3, #30
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f042 0216 	orr.w	r2, r2, #22
 80042a4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d03e      	beq.n	800432c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f042 0208 	orr.w	r2, r2, #8
 80042bc:	601a      	str	r2, [r3, #0]
 80042be:	e035      	b.n	800432c <HAL_DMA_Start_IT+0x260>
 80042c0:	40020010 	.word	0x40020010
 80042c4:	40020028 	.word	0x40020028
 80042c8:	40020040 	.word	0x40020040
 80042cc:	40020058 	.word	0x40020058
 80042d0:	40020070 	.word	0x40020070
 80042d4:	40020088 	.word	0x40020088
 80042d8:	400200a0 	.word	0x400200a0
 80042dc:	400200b8 	.word	0x400200b8
 80042e0:	40020410 	.word	0x40020410
 80042e4:	40020428 	.word	0x40020428
 80042e8:	40020440 	.word	0x40020440
 80042ec:	40020458 	.word	0x40020458
 80042f0:	40020470 	.word	0x40020470
 80042f4:	40020488 	.word	0x40020488
 80042f8:	400204a0 	.word	0x400204a0
 80042fc:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f023 020e 	bic.w	r2, r3, #14
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f042 020a 	orr.w	r2, r2, #10
 8004312:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004318:	2b00      	cmp	r3, #0
 800431a:	d007      	beq.n	800432c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f042 0204 	orr.w	r2, r2, #4
 800432a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a83      	ldr	r2, [pc, #524]	@ (8004540 <HAL_DMA_Start_IT+0x474>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d072      	beq.n	800441c <HAL_DMA_Start_IT+0x350>
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a82      	ldr	r2, [pc, #520]	@ (8004544 <HAL_DMA_Start_IT+0x478>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d06d      	beq.n	800441c <HAL_DMA_Start_IT+0x350>
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a80      	ldr	r2, [pc, #512]	@ (8004548 <HAL_DMA_Start_IT+0x47c>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d068      	beq.n	800441c <HAL_DMA_Start_IT+0x350>
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a7f      	ldr	r2, [pc, #508]	@ (800454c <HAL_DMA_Start_IT+0x480>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d063      	beq.n	800441c <HAL_DMA_Start_IT+0x350>
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a7d      	ldr	r2, [pc, #500]	@ (8004550 <HAL_DMA_Start_IT+0x484>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d05e      	beq.n	800441c <HAL_DMA_Start_IT+0x350>
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a7c      	ldr	r2, [pc, #496]	@ (8004554 <HAL_DMA_Start_IT+0x488>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d059      	beq.n	800441c <HAL_DMA_Start_IT+0x350>
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a7a      	ldr	r2, [pc, #488]	@ (8004558 <HAL_DMA_Start_IT+0x48c>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d054      	beq.n	800441c <HAL_DMA_Start_IT+0x350>
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a79      	ldr	r2, [pc, #484]	@ (800455c <HAL_DMA_Start_IT+0x490>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d04f      	beq.n	800441c <HAL_DMA_Start_IT+0x350>
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a77      	ldr	r2, [pc, #476]	@ (8004560 <HAL_DMA_Start_IT+0x494>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d04a      	beq.n	800441c <HAL_DMA_Start_IT+0x350>
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a76      	ldr	r2, [pc, #472]	@ (8004564 <HAL_DMA_Start_IT+0x498>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d045      	beq.n	800441c <HAL_DMA_Start_IT+0x350>
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a74      	ldr	r2, [pc, #464]	@ (8004568 <HAL_DMA_Start_IT+0x49c>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d040      	beq.n	800441c <HAL_DMA_Start_IT+0x350>
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a73      	ldr	r2, [pc, #460]	@ (800456c <HAL_DMA_Start_IT+0x4a0>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d03b      	beq.n	800441c <HAL_DMA_Start_IT+0x350>
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a71      	ldr	r2, [pc, #452]	@ (8004570 <HAL_DMA_Start_IT+0x4a4>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d036      	beq.n	800441c <HAL_DMA_Start_IT+0x350>
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a70      	ldr	r2, [pc, #448]	@ (8004574 <HAL_DMA_Start_IT+0x4a8>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d031      	beq.n	800441c <HAL_DMA_Start_IT+0x350>
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a6e      	ldr	r2, [pc, #440]	@ (8004578 <HAL_DMA_Start_IT+0x4ac>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d02c      	beq.n	800441c <HAL_DMA_Start_IT+0x350>
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a6d      	ldr	r2, [pc, #436]	@ (800457c <HAL_DMA_Start_IT+0x4b0>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d027      	beq.n	800441c <HAL_DMA_Start_IT+0x350>
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a6b      	ldr	r2, [pc, #428]	@ (8004580 <HAL_DMA_Start_IT+0x4b4>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d022      	beq.n	800441c <HAL_DMA_Start_IT+0x350>
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a6a      	ldr	r2, [pc, #424]	@ (8004584 <HAL_DMA_Start_IT+0x4b8>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d01d      	beq.n	800441c <HAL_DMA_Start_IT+0x350>
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a68      	ldr	r2, [pc, #416]	@ (8004588 <HAL_DMA_Start_IT+0x4bc>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d018      	beq.n	800441c <HAL_DMA_Start_IT+0x350>
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a67      	ldr	r2, [pc, #412]	@ (800458c <HAL_DMA_Start_IT+0x4c0>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d013      	beq.n	800441c <HAL_DMA_Start_IT+0x350>
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a65      	ldr	r2, [pc, #404]	@ (8004590 <HAL_DMA_Start_IT+0x4c4>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d00e      	beq.n	800441c <HAL_DMA_Start_IT+0x350>
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a64      	ldr	r2, [pc, #400]	@ (8004594 <HAL_DMA_Start_IT+0x4c8>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d009      	beq.n	800441c <HAL_DMA_Start_IT+0x350>
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a62      	ldr	r2, [pc, #392]	@ (8004598 <HAL_DMA_Start_IT+0x4cc>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d004      	beq.n	800441c <HAL_DMA_Start_IT+0x350>
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a61      	ldr	r2, [pc, #388]	@ (800459c <HAL_DMA_Start_IT+0x4d0>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d101      	bne.n	8004420 <HAL_DMA_Start_IT+0x354>
 800441c:	2301      	movs	r3, #1
 800441e:	e000      	b.n	8004422 <HAL_DMA_Start_IT+0x356>
 8004420:	2300      	movs	r3, #0
 8004422:	2b00      	cmp	r3, #0
 8004424:	d01a      	beq.n	800445c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004430:	2b00      	cmp	r3, #0
 8004432:	d007      	beq.n	8004444 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800443e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004442:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004448:	2b00      	cmp	r3, #0
 800444a:	d007      	beq.n	800445c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004456:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800445a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a37      	ldr	r2, [pc, #220]	@ (8004540 <HAL_DMA_Start_IT+0x474>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d04a      	beq.n	80044fc <HAL_DMA_Start_IT+0x430>
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a36      	ldr	r2, [pc, #216]	@ (8004544 <HAL_DMA_Start_IT+0x478>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d045      	beq.n	80044fc <HAL_DMA_Start_IT+0x430>
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a34      	ldr	r2, [pc, #208]	@ (8004548 <HAL_DMA_Start_IT+0x47c>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d040      	beq.n	80044fc <HAL_DMA_Start_IT+0x430>
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a33      	ldr	r2, [pc, #204]	@ (800454c <HAL_DMA_Start_IT+0x480>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d03b      	beq.n	80044fc <HAL_DMA_Start_IT+0x430>
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a31      	ldr	r2, [pc, #196]	@ (8004550 <HAL_DMA_Start_IT+0x484>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d036      	beq.n	80044fc <HAL_DMA_Start_IT+0x430>
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a30      	ldr	r2, [pc, #192]	@ (8004554 <HAL_DMA_Start_IT+0x488>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d031      	beq.n	80044fc <HAL_DMA_Start_IT+0x430>
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a2e      	ldr	r2, [pc, #184]	@ (8004558 <HAL_DMA_Start_IT+0x48c>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d02c      	beq.n	80044fc <HAL_DMA_Start_IT+0x430>
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a2d      	ldr	r2, [pc, #180]	@ (800455c <HAL_DMA_Start_IT+0x490>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d027      	beq.n	80044fc <HAL_DMA_Start_IT+0x430>
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a2b      	ldr	r2, [pc, #172]	@ (8004560 <HAL_DMA_Start_IT+0x494>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d022      	beq.n	80044fc <HAL_DMA_Start_IT+0x430>
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a2a      	ldr	r2, [pc, #168]	@ (8004564 <HAL_DMA_Start_IT+0x498>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d01d      	beq.n	80044fc <HAL_DMA_Start_IT+0x430>
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a28      	ldr	r2, [pc, #160]	@ (8004568 <HAL_DMA_Start_IT+0x49c>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d018      	beq.n	80044fc <HAL_DMA_Start_IT+0x430>
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a27      	ldr	r2, [pc, #156]	@ (800456c <HAL_DMA_Start_IT+0x4a0>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d013      	beq.n	80044fc <HAL_DMA_Start_IT+0x430>
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a25      	ldr	r2, [pc, #148]	@ (8004570 <HAL_DMA_Start_IT+0x4a4>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d00e      	beq.n	80044fc <HAL_DMA_Start_IT+0x430>
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a24      	ldr	r2, [pc, #144]	@ (8004574 <HAL_DMA_Start_IT+0x4a8>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d009      	beq.n	80044fc <HAL_DMA_Start_IT+0x430>
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a22      	ldr	r2, [pc, #136]	@ (8004578 <HAL_DMA_Start_IT+0x4ac>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d004      	beq.n	80044fc <HAL_DMA_Start_IT+0x430>
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a21      	ldr	r2, [pc, #132]	@ (800457c <HAL_DMA_Start_IT+0x4b0>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d108      	bne.n	800450e <HAL_DMA_Start_IT+0x442>
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f042 0201 	orr.w	r2, r2, #1
 800450a:	601a      	str	r2, [r3, #0]
 800450c:	e012      	b.n	8004534 <HAL_DMA_Start_IT+0x468>
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f042 0201 	orr.w	r2, r2, #1
 800451c:	601a      	str	r2, [r3, #0]
 800451e:	e009      	b.n	8004534 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004526:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2200      	movs	r2, #0
 800452c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004534:	7dfb      	ldrb	r3, [r7, #23]
}
 8004536:	4618      	mov	r0, r3
 8004538:	3718      	adds	r7, #24
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
 800453e:	bf00      	nop
 8004540:	40020010 	.word	0x40020010
 8004544:	40020028 	.word	0x40020028
 8004548:	40020040 	.word	0x40020040
 800454c:	40020058 	.word	0x40020058
 8004550:	40020070 	.word	0x40020070
 8004554:	40020088 	.word	0x40020088
 8004558:	400200a0 	.word	0x400200a0
 800455c:	400200b8 	.word	0x400200b8
 8004560:	40020410 	.word	0x40020410
 8004564:	40020428 	.word	0x40020428
 8004568:	40020440 	.word	0x40020440
 800456c:	40020458 	.word	0x40020458
 8004570:	40020470 	.word	0x40020470
 8004574:	40020488 	.word	0x40020488
 8004578:	400204a0 	.word	0x400204a0
 800457c:	400204b8 	.word	0x400204b8
 8004580:	58025408 	.word	0x58025408
 8004584:	5802541c 	.word	0x5802541c
 8004588:	58025430 	.word	0x58025430
 800458c:	58025444 	.word	0x58025444
 8004590:	58025458 	.word	0x58025458
 8004594:	5802546c 	.word	0x5802546c
 8004598:	58025480 	.word	0x58025480
 800459c:	58025494 	.word	0x58025494

080045a0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b086      	sub	sp, #24
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80045a8:	f7fd ffd6 	bl	8002558 <HAL_GetTick>
 80045ac:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d101      	bne.n	80045b8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e2dc      	b.n	8004b72 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	2b02      	cmp	r3, #2
 80045c2:	d008      	beq.n	80045d6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2280      	movs	r2, #128	@ 0x80
 80045c8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e2cd      	b.n	8004b72 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a76      	ldr	r2, [pc, #472]	@ (80047b4 <HAL_DMA_Abort+0x214>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d04a      	beq.n	8004676 <HAL_DMA_Abort+0xd6>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a74      	ldr	r2, [pc, #464]	@ (80047b8 <HAL_DMA_Abort+0x218>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d045      	beq.n	8004676 <HAL_DMA_Abort+0xd6>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a73      	ldr	r2, [pc, #460]	@ (80047bc <HAL_DMA_Abort+0x21c>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d040      	beq.n	8004676 <HAL_DMA_Abort+0xd6>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a71      	ldr	r2, [pc, #452]	@ (80047c0 <HAL_DMA_Abort+0x220>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d03b      	beq.n	8004676 <HAL_DMA_Abort+0xd6>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a70      	ldr	r2, [pc, #448]	@ (80047c4 <HAL_DMA_Abort+0x224>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d036      	beq.n	8004676 <HAL_DMA_Abort+0xd6>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a6e      	ldr	r2, [pc, #440]	@ (80047c8 <HAL_DMA_Abort+0x228>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d031      	beq.n	8004676 <HAL_DMA_Abort+0xd6>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a6d      	ldr	r2, [pc, #436]	@ (80047cc <HAL_DMA_Abort+0x22c>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d02c      	beq.n	8004676 <HAL_DMA_Abort+0xd6>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a6b      	ldr	r2, [pc, #428]	@ (80047d0 <HAL_DMA_Abort+0x230>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d027      	beq.n	8004676 <HAL_DMA_Abort+0xd6>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a6a      	ldr	r2, [pc, #424]	@ (80047d4 <HAL_DMA_Abort+0x234>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d022      	beq.n	8004676 <HAL_DMA_Abort+0xd6>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a68      	ldr	r2, [pc, #416]	@ (80047d8 <HAL_DMA_Abort+0x238>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d01d      	beq.n	8004676 <HAL_DMA_Abort+0xd6>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a67      	ldr	r2, [pc, #412]	@ (80047dc <HAL_DMA_Abort+0x23c>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d018      	beq.n	8004676 <HAL_DMA_Abort+0xd6>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a65      	ldr	r2, [pc, #404]	@ (80047e0 <HAL_DMA_Abort+0x240>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d013      	beq.n	8004676 <HAL_DMA_Abort+0xd6>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a64      	ldr	r2, [pc, #400]	@ (80047e4 <HAL_DMA_Abort+0x244>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d00e      	beq.n	8004676 <HAL_DMA_Abort+0xd6>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a62      	ldr	r2, [pc, #392]	@ (80047e8 <HAL_DMA_Abort+0x248>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d009      	beq.n	8004676 <HAL_DMA_Abort+0xd6>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a61      	ldr	r2, [pc, #388]	@ (80047ec <HAL_DMA_Abort+0x24c>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d004      	beq.n	8004676 <HAL_DMA_Abort+0xd6>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a5f      	ldr	r2, [pc, #380]	@ (80047f0 <HAL_DMA_Abort+0x250>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d101      	bne.n	800467a <HAL_DMA_Abort+0xda>
 8004676:	2301      	movs	r3, #1
 8004678:	e000      	b.n	800467c <HAL_DMA_Abort+0xdc>
 800467a:	2300      	movs	r3, #0
 800467c:	2b00      	cmp	r3, #0
 800467e:	d013      	beq.n	80046a8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f022 021e 	bic.w	r2, r2, #30
 800468e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	695a      	ldr	r2, [r3, #20]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800469e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	617b      	str	r3, [r7, #20]
 80046a6:	e00a      	b.n	80046be <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f022 020e 	bic.w	r2, r2, #14
 80046b6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a3c      	ldr	r2, [pc, #240]	@ (80047b4 <HAL_DMA_Abort+0x214>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d072      	beq.n	80047ae <HAL_DMA_Abort+0x20e>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a3a      	ldr	r2, [pc, #232]	@ (80047b8 <HAL_DMA_Abort+0x218>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d06d      	beq.n	80047ae <HAL_DMA_Abort+0x20e>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a39      	ldr	r2, [pc, #228]	@ (80047bc <HAL_DMA_Abort+0x21c>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d068      	beq.n	80047ae <HAL_DMA_Abort+0x20e>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a37      	ldr	r2, [pc, #220]	@ (80047c0 <HAL_DMA_Abort+0x220>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d063      	beq.n	80047ae <HAL_DMA_Abort+0x20e>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a36      	ldr	r2, [pc, #216]	@ (80047c4 <HAL_DMA_Abort+0x224>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d05e      	beq.n	80047ae <HAL_DMA_Abort+0x20e>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a34      	ldr	r2, [pc, #208]	@ (80047c8 <HAL_DMA_Abort+0x228>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d059      	beq.n	80047ae <HAL_DMA_Abort+0x20e>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a33      	ldr	r2, [pc, #204]	@ (80047cc <HAL_DMA_Abort+0x22c>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d054      	beq.n	80047ae <HAL_DMA_Abort+0x20e>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a31      	ldr	r2, [pc, #196]	@ (80047d0 <HAL_DMA_Abort+0x230>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d04f      	beq.n	80047ae <HAL_DMA_Abort+0x20e>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a30      	ldr	r2, [pc, #192]	@ (80047d4 <HAL_DMA_Abort+0x234>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d04a      	beq.n	80047ae <HAL_DMA_Abort+0x20e>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a2e      	ldr	r2, [pc, #184]	@ (80047d8 <HAL_DMA_Abort+0x238>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d045      	beq.n	80047ae <HAL_DMA_Abort+0x20e>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a2d      	ldr	r2, [pc, #180]	@ (80047dc <HAL_DMA_Abort+0x23c>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d040      	beq.n	80047ae <HAL_DMA_Abort+0x20e>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a2b      	ldr	r2, [pc, #172]	@ (80047e0 <HAL_DMA_Abort+0x240>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d03b      	beq.n	80047ae <HAL_DMA_Abort+0x20e>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a2a      	ldr	r2, [pc, #168]	@ (80047e4 <HAL_DMA_Abort+0x244>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d036      	beq.n	80047ae <HAL_DMA_Abort+0x20e>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a28      	ldr	r2, [pc, #160]	@ (80047e8 <HAL_DMA_Abort+0x248>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d031      	beq.n	80047ae <HAL_DMA_Abort+0x20e>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a27      	ldr	r2, [pc, #156]	@ (80047ec <HAL_DMA_Abort+0x24c>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d02c      	beq.n	80047ae <HAL_DMA_Abort+0x20e>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a25      	ldr	r2, [pc, #148]	@ (80047f0 <HAL_DMA_Abort+0x250>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d027      	beq.n	80047ae <HAL_DMA_Abort+0x20e>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a24      	ldr	r2, [pc, #144]	@ (80047f4 <HAL_DMA_Abort+0x254>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d022      	beq.n	80047ae <HAL_DMA_Abort+0x20e>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a22      	ldr	r2, [pc, #136]	@ (80047f8 <HAL_DMA_Abort+0x258>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d01d      	beq.n	80047ae <HAL_DMA_Abort+0x20e>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a21      	ldr	r2, [pc, #132]	@ (80047fc <HAL_DMA_Abort+0x25c>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d018      	beq.n	80047ae <HAL_DMA_Abort+0x20e>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a1f      	ldr	r2, [pc, #124]	@ (8004800 <HAL_DMA_Abort+0x260>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d013      	beq.n	80047ae <HAL_DMA_Abort+0x20e>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a1e      	ldr	r2, [pc, #120]	@ (8004804 <HAL_DMA_Abort+0x264>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d00e      	beq.n	80047ae <HAL_DMA_Abort+0x20e>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a1c      	ldr	r2, [pc, #112]	@ (8004808 <HAL_DMA_Abort+0x268>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d009      	beq.n	80047ae <HAL_DMA_Abort+0x20e>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a1b      	ldr	r2, [pc, #108]	@ (800480c <HAL_DMA_Abort+0x26c>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d004      	beq.n	80047ae <HAL_DMA_Abort+0x20e>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a19      	ldr	r2, [pc, #100]	@ (8004810 <HAL_DMA_Abort+0x270>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d132      	bne.n	8004814 <HAL_DMA_Abort+0x274>
 80047ae:	2301      	movs	r3, #1
 80047b0:	e031      	b.n	8004816 <HAL_DMA_Abort+0x276>
 80047b2:	bf00      	nop
 80047b4:	40020010 	.word	0x40020010
 80047b8:	40020028 	.word	0x40020028
 80047bc:	40020040 	.word	0x40020040
 80047c0:	40020058 	.word	0x40020058
 80047c4:	40020070 	.word	0x40020070
 80047c8:	40020088 	.word	0x40020088
 80047cc:	400200a0 	.word	0x400200a0
 80047d0:	400200b8 	.word	0x400200b8
 80047d4:	40020410 	.word	0x40020410
 80047d8:	40020428 	.word	0x40020428
 80047dc:	40020440 	.word	0x40020440
 80047e0:	40020458 	.word	0x40020458
 80047e4:	40020470 	.word	0x40020470
 80047e8:	40020488 	.word	0x40020488
 80047ec:	400204a0 	.word	0x400204a0
 80047f0:	400204b8 	.word	0x400204b8
 80047f4:	58025408 	.word	0x58025408
 80047f8:	5802541c 	.word	0x5802541c
 80047fc:	58025430 	.word	0x58025430
 8004800:	58025444 	.word	0x58025444
 8004804:	58025458 	.word	0x58025458
 8004808:	5802546c 	.word	0x5802546c
 800480c:	58025480 	.word	0x58025480
 8004810:	58025494 	.word	0x58025494
 8004814:	2300      	movs	r3, #0
 8004816:	2b00      	cmp	r3, #0
 8004818:	d007      	beq.n	800482a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004824:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004828:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a6d      	ldr	r2, [pc, #436]	@ (80049e4 <HAL_DMA_Abort+0x444>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d04a      	beq.n	80048ca <HAL_DMA_Abort+0x32a>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a6b      	ldr	r2, [pc, #428]	@ (80049e8 <HAL_DMA_Abort+0x448>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d045      	beq.n	80048ca <HAL_DMA_Abort+0x32a>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a6a      	ldr	r2, [pc, #424]	@ (80049ec <HAL_DMA_Abort+0x44c>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d040      	beq.n	80048ca <HAL_DMA_Abort+0x32a>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a68      	ldr	r2, [pc, #416]	@ (80049f0 <HAL_DMA_Abort+0x450>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d03b      	beq.n	80048ca <HAL_DMA_Abort+0x32a>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a67      	ldr	r2, [pc, #412]	@ (80049f4 <HAL_DMA_Abort+0x454>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d036      	beq.n	80048ca <HAL_DMA_Abort+0x32a>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a65      	ldr	r2, [pc, #404]	@ (80049f8 <HAL_DMA_Abort+0x458>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d031      	beq.n	80048ca <HAL_DMA_Abort+0x32a>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a64      	ldr	r2, [pc, #400]	@ (80049fc <HAL_DMA_Abort+0x45c>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d02c      	beq.n	80048ca <HAL_DMA_Abort+0x32a>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a62      	ldr	r2, [pc, #392]	@ (8004a00 <HAL_DMA_Abort+0x460>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d027      	beq.n	80048ca <HAL_DMA_Abort+0x32a>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a61      	ldr	r2, [pc, #388]	@ (8004a04 <HAL_DMA_Abort+0x464>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d022      	beq.n	80048ca <HAL_DMA_Abort+0x32a>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a5f      	ldr	r2, [pc, #380]	@ (8004a08 <HAL_DMA_Abort+0x468>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d01d      	beq.n	80048ca <HAL_DMA_Abort+0x32a>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a5e      	ldr	r2, [pc, #376]	@ (8004a0c <HAL_DMA_Abort+0x46c>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d018      	beq.n	80048ca <HAL_DMA_Abort+0x32a>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a5c      	ldr	r2, [pc, #368]	@ (8004a10 <HAL_DMA_Abort+0x470>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d013      	beq.n	80048ca <HAL_DMA_Abort+0x32a>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a5b      	ldr	r2, [pc, #364]	@ (8004a14 <HAL_DMA_Abort+0x474>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d00e      	beq.n	80048ca <HAL_DMA_Abort+0x32a>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a59      	ldr	r2, [pc, #356]	@ (8004a18 <HAL_DMA_Abort+0x478>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d009      	beq.n	80048ca <HAL_DMA_Abort+0x32a>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a58      	ldr	r2, [pc, #352]	@ (8004a1c <HAL_DMA_Abort+0x47c>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d004      	beq.n	80048ca <HAL_DMA_Abort+0x32a>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a56      	ldr	r2, [pc, #344]	@ (8004a20 <HAL_DMA_Abort+0x480>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d108      	bne.n	80048dc <HAL_DMA_Abort+0x33c>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f022 0201 	bic.w	r2, r2, #1
 80048d8:	601a      	str	r2, [r3, #0]
 80048da:	e007      	b.n	80048ec <HAL_DMA_Abort+0x34c>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f022 0201 	bic.w	r2, r2, #1
 80048ea:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80048ec:	e013      	b.n	8004916 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80048ee:	f7fd fe33 	bl	8002558 <HAL_GetTick>
 80048f2:	4602      	mov	r2, r0
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	1ad3      	subs	r3, r2, r3
 80048f8:	2b05      	cmp	r3, #5
 80048fa:	d90c      	bls.n	8004916 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2220      	movs	r2, #32
 8004900:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2203      	movs	r2, #3
 8004906:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e12d      	b.n	8004b72 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 0301 	and.w	r3, r3, #1
 800491e:	2b00      	cmp	r3, #0
 8004920:	d1e5      	bne.n	80048ee <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a2f      	ldr	r2, [pc, #188]	@ (80049e4 <HAL_DMA_Abort+0x444>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d04a      	beq.n	80049c2 <HAL_DMA_Abort+0x422>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a2d      	ldr	r2, [pc, #180]	@ (80049e8 <HAL_DMA_Abort+0x448>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d045      	beq.n	80049c2 <HAL_DMA_Abort+0x422>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a2c      	ldr	r2, [pc, #176]	@ (80049ec <HAL_DMA_Abort+0x44c>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d040      	beq.n	80049c2 <HAL_DMA_Abort+0x422>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a2a      	ldr	r2, [pc, #168]	@ (80049f0 <HAL_DMA_Abort+0x450>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d03b      	beq.n	80049c2 <HAL_DMA_Abort+0x422>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a29      	ldr	r2, [pc, #164]	@ (80049f4 <HAL_DMA_Abort+0x454>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d036      	beq.n	80049c2 <HAL_DMA_Abort+0x422>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a27      	ldr	r2, [pc, #156]	@ (80049f8 <HAL_DMA_Abort+0x458>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d031      	beq.n	80049c2 <HAL_DMA_Abort+0x422>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a26      	ldr	r2, [pc, #152]	@ (80049fc <HAL_DMA_Abort+0x45c>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d02c      	beq.n	80049c2 <HAL_DMA_Abort+0x422>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a24      	ldr	r2, [pc, #144]	@ (8004a00 <HAL_DMA_Abort+0x460>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d027      	beq.n	80049c2 <HAL_DMA_Abort+0x422>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a23      	ldr	r2, [pc, #140]	@ (8004a04 <HAL_DMA_Abort+0x464>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d022      	beq.n	80049c2 <HAL_DMA_Abort+0x422>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a21      	ldr	r2, [pc, #132]	@ (8004a08 <HAL_DMA_Abort+0x468>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d01d      	beq.n	80049c2 <HAL_DMA_Abort+0x422>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a20      	ldr	r2, [pc, #128]	@ (8004a0c <HAL_DMA_Abort+0x46c>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d018      	beq.n	80049c2 <HAL_DMA_Abort+0x422>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a1e      	ldr	r2, [pc, #120]	@ (8004a10 <HAL_DMA_Abort+0x470>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d013      	beq.n	80049c2 <HAL_DMA_Abort+0x422>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a1d      	ldr	r2, [pc, #116]	@ (8004a14 <HAL_DMA_Abort+0x474>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d00e      	beq.n	80049c2 <HAL_DMA_Abort+0x422>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a1b      	ldr	r2, [pc, #108]	@ (8004a18 <HAL_DMA_Abort+0x478>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d009      	beq.n	80049c2 <HAL_DMA_Abort+0x422>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a1a      	ldr	r2, [pc, #104]	@ (8004a1c <HAL_DMA_Abort+0x47c>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d004      	beq.n	80049c2 <HAL_DMA_Abort+0x422>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a18      	ldr	r2, [pc, #96]	@ (8004a20 <HAL_DMA_Abort+0x480>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d101      	bne.n	80049c6 <HAL_DMA_Abort+0x426>
 80049c2:	2301      	movs	r3, #1
 80049c4:	e000      	b.n	80049c8 <HAL_DMA_Abort+0x428>
 80049c6:	2300      	movs	r3, #0
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d02b      	beq.n	8004a24 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049d0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049d6:	f003 031f 	and.w	r3, r3, #31
 80049da:	223f      	movs	r2, #63	@ 0x3f
 80049dc:	409a      	lsls	r2, r3
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	609a      	str	r2, [r3, #8]
 80049e2:	e02a      	b.n	8004a3a <HAL_DMA_Abort+0x49a>
 80049e4:	40020010 	.word	0x40020010
 80049e8:	40020028 	.word	0x40020028
 80049ec:	40020040 	.word	0x40020040
 80049f0:	40020058 	.word	0x40020058
 80049f4:	40020070 	.word	0x40020070
 80049f8:	40020088 	.word	0x40020088
 80049fc:	400200a0 	.word	0x400200a0
 8004a00:	400200b8 	.word	0x400200b8
 8004a04:	40020410 	.word	0x40020410
 8004a08:	40020428 	.word	0x40020428
 8004a0c:	40020440 	.word	0x40020440
 8004a10:	40020458 	.word	0x40020458
 8004a14:	40020470 	.word	0x40020470
 8004a18:	40020488 	.word	0x40020488
 8004a1c:	400204a0 	.word	0x400204a0
 8004a20:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a28:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a2e:	f003 031f 	and.w	r3, r3, #31
 8004a32:	2201      	movs	r2, #1
 8004a34:	409a      	lsls	r2, r3
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a4f      	ldr	r2, [pc, #316]	@ (8004b7c <HAL_DMA_Abort+0x5dc>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d072      	beq.n	8004b2a <HAL_DMA_Abort+0x58a>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a4d      	ldr	r2, [pc, #308]	@ (8004b80 <HAL_DMA_Abort+0x5e0>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d06d      	beq.n	8004b2a <HAL_DMA_Abort+0x58a>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a4c      	ldr	r2, [pc, #304]	@ (8004b84 <HAL_DMA_Abort+0x5e4>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d068      	beq.n	8004b2a <HAL_DMA_Abort+0x58a>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a4a      	ldr	r2, [pc, #296]	@ (8004b88 <HAL_DMA_Abort+0x5e8>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d063      	beq.n	8004b2a <HAL_DMA_Abort+0x58a>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a49      	ldr	r2, [pc, #292]	@ (8004b8c <HAL_DMA_Abort+0x5ec>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d05e      	beq.n	8004b2a <HAL_DMA_Abort+0x58a>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a47      	ldr	r2, [pc, #284]	@ (8004b90 <HAL_DMA_Abort+0x5f0>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d059      	beq.n	8004b2a <HAL_DMA_Abort+0x58a>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a46      	ldr	r2, [pc, #280]	@ (8004b94 <HAL_DMA_Abort+0x5f4>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d054      	beq.n	8004b2a <HAL_DMA_Abort+0x58a>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a44      	ldr	r2, [pc, #272]	@ (8004b98 <HAL_DMA_Abort+0x5f8>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d04f      	beq.n	8004b2a <HAL_DMA_Abort+0x58a>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a43      	ldr	r2, [pc, #268]	@ (8004b9c <HAL_DMA_Abort+0x5fc>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d04a      	beq.n	8004b2a <HAL_DMA_Abort+0x58a>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a41      	ldr	r2, [pc, #260]	@ (8004ba0 <HAL_DMA_Abort+0x600>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d045      	beq.n	8004b2a <HAL_DMA_Abort+0x58a>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a40      	ldr	r2, [pc, #256]	@ (8004ba4 <HAL_DMA_Abort+0x604>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d040      	beq.n	8004b2a <HAL_DMA_Abort+0x58a>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a3e      	ldr	r2, [pc, #248]	@ (8004ba8 <HAL_DMA_Abort+0x608>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d03b      	beq.n	8004b2a <HAL_DMA_Abort+0x58a>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a3d      	ldr	r2, [pc, #244]	@ (8004bac <HAL_DMA_Abort+0x60c>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d036      	beq.n	8004b2a <HAL_DMA_Abort+0x58a>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a3b      	ldr	r2, [pc, #236]	@ (8004bb0 <HAL_DMA_Abort+0x610>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d031      	beq.n	8004b2a <HAL_DMA_Abort+0x58a>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a3a      	ldr	r2, [pc, #232]	@ (8004bb4 <HAL_DMA_Abort+0x614>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d02c      	beq.n	8004b2a <HAL_DMA_Abort+0x58a>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a38      	ldr	r2, [pc, #224]	@ (8004bb8 <HAL_DMA_Abort+0x618>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d027      	beq.n	8004b2a <HAL_DMA_Abort+0x58a>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a37      	ldr	r2, [pc, #220]	@ (8004bbc <HAL_DMA_Abort+0x61c>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d022      	beq.n	8004b2a <HAL_DMA_Abort+0x58a>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a35      	ldr	r2, [pc, #212]	@ (8004bc0 <HAL_DMA_Abort+0x620>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d01d      	beq.n	8004b2a <HAL_DMA_Abort+0x58a>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a34      	ldr	r2, [pc, #208]	@ (8004bc4 <HAL_DMA_Abort+0x624>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d018      	beq.n	8004b2a <HAL_DMA_Abort+0x58a>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a32      	ldr	r2, [pc, #200]	@ (8004bc8 <HAL_DMA_Abort+0x628>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d013      	beq.n	8004b2a <HAL_DMA_Abort+0x58a>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a31      	ldr	r2, [pc, #196]	@ (8004bcc <HAL_DMA_Abort+0x62c>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d00e      	beq.n	8004b2a <HAL_DMA_Abort+0x58a>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a2f      	ldr	r2, [pc, #188]	@ (8004bd0 <HAL_DMA_Abort+0x630>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d009      	beq.n	8004b2a <HAL_DMA_Abort+0x58a>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a2e      	ldr	r2, [pc, #184]	@ (8004bd4 <HAL_DMA_Abort+0x634>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d004      	beq.n	8004b2a <HAL_DMA_Abort+0x58a>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a2c      	ldr	r2, [pc, #176]	@ (8004bd8 <HAL_DMA_Abort+0x638>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d101      	bne.n	8004b2e <HAL_DMA_Abort+0x58e>
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e000      	b.n	8004b30 <HAL_DMA_Abort+0x590>
 8004b2e:	2300      	movs	r3, #0
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d015      	beq.n	8004b60 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004b3c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d00c      	beq.n	8004b60 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b50:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004b54:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004b5e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2201      	movs	r2, #1
 8004b64:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8004b70:	2300      	movs	r3, #0
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3718      	adds	r7, #24
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
 8004b7a:	bf00      	nop
 8004b7c:	40020010 	.word	0x40020010
 8004b80:	40020028 	.word	0x40020028
 8004b84:	40020040 	.word	0x40020040
 8004b88:	40020058 	.word	0x40020058
 8004b8c:	40020070 	.word	0x40020070
 8004b90:	40020088 	.word	0x40020088
 8004b94:	400200a0 	.word	0x400200a0
 8004b98:	400200b8 	.word	0x400200b8
 8004b9c:	40020410 	.word	0x40020410
 8004ba0:	40020428 	.word	0x40020428
 8004ba4:	40020440 	.word	0x40020440
 8004ba8:	40020458 	.word	0x40020458
 8004bac:	40020470 	.word	0x40020470
 8004bb0:	40020488 	.word	0x40020488
 8004bb4:	400204a0 	.word	0x400204a0
 8004bb8:	400204b8 	.word	0x400204b8
 8004bbc:	58025408 	.word	0x58025408
 8004bc0:	5802541c 	.word	0x5802541c
 8004bc4:	58025430 	.word	0x58025430
 8004bc8:	58025444 	.word	0x58025444
 8004bcc:	58025458 	.word	0x58025458
 8004bd0:	5802546c 	.word	0x5802546c
 8004bd4:	58025480 	.word	0x58025480
 8004bd8:	58025494 	.word	0x58025494

08004bdc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b084      	sub	sp, #16
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d101      	bne.n	8004bee <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e237      	b.n	800505e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	2b02      	cmp	r3, #2
 8004bf8:	d004      	beq.n	8004c04 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2280      	movs	r2, #128	@ 0x80
 8004bfe:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	e22c      	b.n	800505e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a5c      	ldr	r2, [pc, #368]	@ (8004d7c <HAL_DMA_Abort_IT+0x1a0>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d04a      	beq.n	8004ca4 <HAL_DMA_Abort_IT+0xc8>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a5b      	ldr	r2, [pc, #364]	@ (8004d80 <HAL_DMA_Abort_IT+0x1a4>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d045      	beq.n	8004ca4 <HAL_DMA_Abort_IT+0xc8>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a59      	ldr	r2, [pc, #356]	@ (8004d84 <HAL_DMA_Abort_IT+0x1a8>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d040      	beq.n	8004ca4 <HAL_DMA_Abort_IT+0xc8>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a58      	ldr	r2, [pc, #352]	@ (8004d88 <HAL_DMA_Abort_IT+0x1ac>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d03b      	beq.n	8004ca4 <HAL_DMA_Abort_IT+0xc8>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a56      	ldr	r2, [pc, #344]	@ (8004d8c <HAL_DMA_Abort_IT+0x1b0>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d036      	beq.n	8004ca4 <HAL_DMA_Abort_IT+0xc8>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a55      	ldr	r2, [pc, #340]	@ (8004d90 <HAL_DMA_Abort_IT+0x1b4>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d031      	beq.n	8004ca4 <HAL_DMA_Abort_IT+0xc8>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a53      	ldr	r2, [pc, #332]	@ (8004d94 <HAL_DMA_Abort_IT+0x1b8>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d02c      	beq.n	8004ca4 <HAL_DMA_Abort_IT+0xc8>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a52      	ldr	r2, [pc, #328]	@ (8004d98 <HAL_DMA_Abort_IT+0x1bc>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d027      	beq.n	8004ca4 <HAL_DMA_Abort_IT+0xc8>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a50      	ldr	r2, [pc, #320]	@ (8004d9c <HAL_DMA_Abort_IT+0x1c0>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d022      	beq.n	8004ca4 <HAL_DMA_Abort_IT+0xc8>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a4f      	ldr	r2, [pc, #316]	@ (8004da0 <HAL_DMA_Abort_IT+0x1c4>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d01d      	beq.n	8004ca4 <HAL_DMA_Abort_IT+0xc8>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a4d      	ldr	r2, [pc, #308]	@ (8004da4 <HAL_DMA_Abort_IT+0x1c8>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d018      	beq.n	8004ca4 <HAL_DMA_Abort_IT+0xc8>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a4c      	ldr	r2, [pc, #304]	@ (8004da8 <HAL_DMA_Abort_IT+0x1cc>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d013      	beq.n	8004ca4 <HAL_DMA_Abort_IT+0xc8>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a4a      	ldr	r2, [pc, #296]	@ (8004dac <HAL_DMA_Abort_IT+0x1d0>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d00e      	beq.n	8004ca4 <HAL_DMA_Abort_IT+0xc8>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a49      	ldr	r2, [pc, #292]	@ (8004db0 <HAL_DMA_Abort_IT+0x1d4>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d009      	beq.n	8004ca4 <HAL_DMA_Abort_IT+0xc8>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a47      	ldr	r2, [pc, #284]	@ (8004db4 <HAL_DMA_Abort_IT+0x1d8>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d004      	beq.n	8004ca4 <HAL_DMA_Abort_IT+0xc8>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a46      	ldr	r2, [pc, #280]	@ (8004db8 <HAL_DMA_Abort_IT+0x1dc>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d101      	bne.n	8004ca8 <HAL_DMA_Abort_IT+0xcc>
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	e000      	b.n	8004caa <HAL_DMA_Abort_IT+0xce>
 8004ca8:	2300      	movs	r3, #0
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	f000 8086 	beq.w	8004dbc <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2204      	movs	r2, #4
 8004cb4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a2f      	ldr	r2, [pc, #188]	@ (8004d7c <HAL_DMA_Abort_IT+0x1a0>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d04a      	beq.n	8004d58 <HAL_DMA_Abort_IT+0x17c>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a2e      	ldr	r2, [pc, #184]	@ (8004d80 <HAL_DMA_Abort_IT+0x1a4>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d045      	beq.n	8004d58 <HAL_DMA_Abort_IT+0x17c>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a2c      	ldr	r2, [pc, #176]	@ (8004d84 <HAL_DMA_Abort_IT+0x1a8>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d040      	beq.n	8004d58 <HAL_DMA_Abort_IT+0x17c>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a2b      	ldr	r2, [pc, #172]	@ (8004d88 <HAL_DMA_Abort_IT+0x1ac>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d03b      	beq.n	8004d58 <HAL_DMA_Abort_IT+0x17c>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a29      	ldr	r2, [pc, #164]	@ (8004d8c <HAL_DMA_Abort_IT+0x1b0>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d036      	beq.n	8004d58 <HAL_DMA_Abort_IT+0x17c>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a28      	ldr	r2, [pc, #160]	@ (8004d90 <HAL_DMA_Abort_IT+0x1b4>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d031      	beq.n	8004d58 <HAL_DMA_Abort_IT+0x17c>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a26      	ldr	r2, [pc, #152]	@ (8004d94 <HAL_DMA_Abort_IT+0x1b8>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d02c      	beq.n	8004d58 <HAL_DMA_Abort_IT+0x17c>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a25      	ldr	r2, [pc, #148]	@ (8004d98 <HAL_DMA_Abort_IT+0x1bc>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d027      	beq.n	8004d58 <HAL_DMA_Abort_IT+0x17c>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a23      	ldr	r2, [pc, #140]	@ (8004d9c <HAL_DMA_Abort_IT+0x1c0>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d022      	beq.n	8004d58 <HAL_DMA_Abort_IT+0x17c>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a22      	ldr	r2, [pc, #136]	@ (8004da0 <HAL_DMA_Abort_IT+0x1c4>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d01d      	beq.n	8004d58 <HAL_DMA_Abort_IT+0x17c>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a20      	ldr	r2, [pc, #128]	@ (8004da4 <HAL_DMA_Abort_IT+0x1c8>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d018      	beq.n	8004d58 <HAL_DMA_Abort_IT+0x17c>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a1f      	ldr	r2, [pc, #124]	@ (8004da8 <HAL_DMA_Abort_IT+0x1cc>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d013      	beq.n	8004d58 <HAL_DMA_Abort_IT+0x17c>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a1d      	ldr	r2, [pc, #116]	@ (8004dac <HAL_DMA_Abort_IT+0x1d0>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d00e      	beq.n	8004d58 <HAL_DMA_Abort_IT+0x17c>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a1c      	ldr	r2, [pc, #112]	@ (8004db0 <HAL_DMA_Abort_IT+0x1d4>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d009      	beq.n	8004d58 <HAL_DMA_Abort_IT+0x17c>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a1a      	ldr	r2, [pc, #104]	@ (8004db4 <HAL_DMA_Abort_IT+0x1d8>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d004      	beq.n	8004d58 <HAL_DMA_Abort_IT+0x17c>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a19      	ldr	r2, [pc, #100]	@ (8004db8 <HAL_DMA_Abort_IT+0x1dc>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d108      	bne.n	8004d6a <HAL_DMA_Abort_IT+0x18e>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f022 0201 	bic.w	r2, r2, #1
 8004d66:	601a      	str	r2, [r3, #0]
 8004d68:	e178      	b.n	800505c <HAL_DMA_Abort_IT+0x480>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f022 0201 	bic.w	r2, r2, #1
 8004d78:	601a      	str	r2, [r3, #0]
 8004d7a:	e16f      	b.n	800505c <HAL_DMA_Abort_IT+0x480>
 8004d7c:	40020010 	.word	0x40020010
 8004d80:	40020028 	.word	0x40020028
 8004d84:	40020040 	.word	0x40020040
 8004d88:	40020058 	.word	0x40020058
 8004d8c:	40020070 	.word	0x40020070
 8004d90:	40020088 	.word	0x40020088
 8004d94:	400200a0 	.word	0x400200a0
 8004d98:	400200b8 	.word	0x400200b8
 8004d9c:	40020410 	.word	0x40020410
 8004da0:	40020428 	.word	0x40020428
 8004da4:	40020440 	.word	0x40020440
 8004da8:	40020458 	.word	0x40020458
 8004dac:	40020470 	.word	0x40020470
 8004db0:	40020488 	.word	0x40020488
 8004db4:	400204a0 	.word	0x400204a0
 8004db8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f022 020e 	bic.w	r2, r2, #14
 8004dca:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a6c      	ldr	r2, [pc, #432]	@ (8004f84 <HAL_DMA_Abort_IT+0x3a8>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d04a      	beq.n	8004e6c <HAL_DMA_Abort_IT+0x290>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a6b      	ldr	r2, [pc, #428]	@ (8004f88 <HAL_DMA_Abort_IT+0x3ac>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d045      	beq.n	8004e6c <HAL_DMA_Abort_IT+0x290>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a69      	ldr	r2, [pc, #420]	@ (8004f8c <HAL_DMA_Abort_IT+0x3b0>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d040      	beq.n	8004e6c <HAL_DMA_Abort_IT+0x290>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a68      	ldr	r2, [pc, #416]	@ (8004f90 <HAL_DMA_Abort_IT+0x3b4>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d03b      	beq.n	8004e6c <HAL_DMA_Abort_IT+0x290>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a66      	ldr	r2, [pc, #408]	@ (8004f94 <HAL_DMA_Abort_IT+0x3b8>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d036      	beq.n	8004e6c <HAL_DMA_Abort_IT+0x290>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a65      	ldr	r2, [pc, #404]	@ (8004f98 <HAL_DMA_Abort_IT+0x3bc>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d031      	beq.n	8004e6c <HAL_DMA_Abort_IT+0x290>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a63      	ldr	r2, [pc, #396]	@ (8004f9c <HAL_DMA_Abort_IT+0x3c0>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d02c      	beq.n	8004e6c <HAL_DMA_Abort_IT+0x290>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a62      	ldr	r2, [pc, #392]	@ (8004fa0 <HAL_DMA_Abort_IT+0x3c4>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d027      	beq.n	8004e6c <HAL_DMA_Abort_IT+0x290>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a60      	ldr	r2, [pc, #384]	@ (8004fa4 <HAL_DMA_Abort_IT+0x3c8>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d022      	beq.n	8004e6c <HAL_DMA_Abort_IT+0x290>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a5f      	ldr	r2, [pc, #380]	@ (8004fa8 <HAL_DMA_Abort_IT+0x3cc>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d01d      	beq.n	8004e6c <HAL_DMA_Abort_IT+0x290>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a5d      	ldr	r2, [pc, #372]	@ (8004fac <HAL_DMA_Abort_IT+0x3d0>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d018      	beq.n	8004e6c <HAL_DMA_Abort_IT+0x290>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a5c      	ldr	r2, [pc, #368]	@ (8004fb0 <HAL_DMA_Abort_IT+0x3d4>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d013      	beq.n	8004e6c <HAL_DMA_Abort_IT+0x290>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a5a      	ldr	r2, [pc, #360]	@ (8004fb4 <HAL_DMA_Abort_IT+0x3d8>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d00e      	beq.n	8004e6c <HAL_DMA_Abort_IT+0x290>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a59      	ldr	r2, [pc, #356]	@ (8004fb8 <HAL_DMA_Abort_IT+0x3dc>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d009      	beq.n	8004e6c <HAL_DMA_Abort_IT+0x290>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a57      	ldr	r2, [pc, #348]	@ (8004fbc <HAL_DMA_Abort_IT+0x3e0>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d004      	beq.n	8004e6c <HAL_DMA_Abort_IT+0x290>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a56      	ldr	r2, [pc, #344]	@ (8004fc0 <HAL_DMA_Abort_IT+0x3e4>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d108      	bne.n	8004e7e <HAL_DMA_Abort_IT+0x2a2>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f022 0201 	bic.w	r2, r2, #1
 8004e7a:	601a      	str	r2, [r3, #0]
 8004e7c:	e007      	b.n	8004e8e <HAL_DMA_Abort_IT+0x2b2>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f022 0201 	bic.w	r2, r2, #1
 8004e8c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a3c      	ldr	r2, [pc, #240]	@ (8004f84 <HAL_DMA_Abort_IT+0x3a8>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d072      	beq.n	8004f7e <HAL_DMA_Abort_IT+0x3a2>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a3a      	ldr	r2, [pc, #232]	@ (8004f88 <HAL_DMA_Abort_IT+0x3ac>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d06d      	beq.n	8004f7e <HAL_DMA_Abort_IT+0x3a2>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a39      	ldr	r2, [pc, #228]	@ (8004f8c <HAL_DMA_Abort_IT+0x3b0>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d068      	beq.n	8004f7e <HAL_DMA_Abort_IT+0x3a2>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a37      	ldr	r2, [pc, #220]	@ (8004f90 <HAL_DMA_Abort_IT+0x3b4>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d063      	beq.n	8004f7e <HAL_DMA_Abort_IT+0x3a2>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a36      	ldr	r2, [pc, #216]	@ (8004f94 <HAL_DMA_Abort_IT+0x3b8>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d05e      	beq.n	8004f7e <HAL_DMA_Abort_IT+0x3a2>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a34      	ldr	r2, [pc, #208]	@ (8004f98 <HAL_DMA_Abort_IT+0x3bc>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d059      	beq.n	8004f7e <HAL_DMA_Abort_IT+0x3a2>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a33      	ldr	r2, [pc, #204]	@ (8004f9c <HAL_DMA_Abort_IT+0x3c0>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d054      	beq.n	8004f7e <HAL_DMA_Abort_IT+0x3a2>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a31      	ldr	r2, [pc, #196]	@ (8004fa0 <HAL_DMA_Abort_IT+0x3c4>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d04f      	beq.n	8004f7e <HAL_DMA_Abort_IT+0x3a2>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a30      	ldr	r2, [pc, #192]	@ (8004fa4 <HAL_DMA_Abort_IT+0x3c8>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d04a      	beq.n	8004f7e <HAL_DMA_Abort_IT+0x3a2>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a2e      	ldr	r2, [pc, #184]	@ (8004fa8 <HAL_DMA_Abort_IT+0x3cc>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d045      	beq.n	8004f7e <HAL_DMA_Abort_IT+0x3a2>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a2d      	ldr	r2, [pc, #180]	@ (8004fac <HAL_DMA_Abort_IT+0x3d0>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d040      	beq.n	8004f7e <HAL_DMA_Abort_IT+0x3a2>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a2b      	ldr	r2, [pc, #172]	@ (8004fb0 <HAL_DMA_Abort_IT+0x3d4>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d03b      	beq.n	8004f7e <HAL_DMA_Abort_IT+0x3a2>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a2a      	ldr	r2, [pc, #168]	@ (8004fb4 <HAL_DMA_Abort_IT+0x3d8>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d036      	beq.n	8004f7e <HAL_DMA_Abort_IT+0x3a2>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a28      	ldr	r2, [pc, #160]	@ (8004fb8 <HAL_DMA_Abort_IT+0x3dc>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d031      	beq.n	8004f7e <HAL_DMA_Abort_IT+0x3a2>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a27      	ldr	r2, [pc, #156]	@ (8004fbc <HAL_DMA_Abort_IT+0x3e0>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d02c      	beq.n	8004f7e <HAL_DMA_Abort_IT+0x3a2>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a25      	ldr	r2, [pc, #148]	@ (8004fc0 <HAL_DMA_Abort_IT+0x3e4>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d027      	beq.n	8004f7e <HAL_DMA_Abort_IT+0x3a2>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a24      	ldr	r2, [pc, #144]	@ (8004fc4 <HAL_DMA_Abort_IT+0x3e8>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d022      	beq.n	8004f7e <HAL_DMA_Abort_IT+0x3a2>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a22      	ldr	r2, [pc, #136]	@ (8004fc8 <HAL_DMA_Abort_IT+0x3ec>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d01d      	beq.n	8004f7e <HAL_DMA_Abort_IT+0x3a2>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a21      	ldr	r2, [pc, #132]	@ (8004fcc <HAL_DMA_Abort_IT+0x3f0>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d018      	beq.n	8004f7e <HAL_DMA_Abort_IT+0x3a2>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a1f      	ldr	r2, [pc, #124]	@ (8004fd0 <HAL_DMA_Abort_IT+0x3f4>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d013      	beq.n	8004f7e <HAL_DMA_Abort_IT+0x3a2>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a1e      	ldr	r2, [pc, #120]	@ (8004fd4 <HAL_DMA_Abort_IT+0x3f8>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d00e      	beq.n	8004f7e <HAL_DMA_Abort_IT+0x3a2>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a1c      	ldr	r2, [pc, #112]	@ (8004fd8 <HAL_DMA_Abort_IT+0x3fc>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d009      	beq.n	8004f7e <HAL_DMA_Abort_IT+0x3a2>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a1b      	ldr	r2, [pc, #108]	@ (8004fdc <HAL_DMA_Abort_IT+0x400>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d004      	beq.n	8004f7e <HAL_DMA_Abort_IT+0x3a2>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a19      	ldr	r2, [pc, #100]	@ (8004fe0 <HAL_DMA_Abort_IT+0x404>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d132      	bne.n	8004fe4 <HAL_DMA_Abort_IT+0x408>
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e031      	b.n	8004fe6 <HAL_DMA_Abort_IT+0x40a>
 8004f82:	bf00      	nop
 8004f84:	40020010 	.word	0x40020010
 8004f88:	40020028 	.word	0x40020028
 8004f8c:	40020040 	.word	0x40020040
 8004f90:	40020058 	.word	0x40020058
 8004f94:	40020070 	.word	0x40020070
 8004f98:	40020088 	.word	0x40020088
 8004f9c:	400200a0 	.word	0x400200a0
 8004fa0:	400200b8 	.word	0x400200b8
 8004fa4:	40020410 	.word	0x40020410
 8004fa8:	40020428 	.word	0x40020428
 8004fac:	40020440 	.word	0x40020440
 8004fb0:	40020458 	.word	0x40020458
 8004fb4:	40020470 	.word	0x40020470
 8004fb8:	40020488 	.word	0x40020488
 8004fbc:	400204a0 	.word	0x400204a0
 8004fc0:	400204b8 	.word	0x400204b8
 8004fc4:	58025408 	.word	0x58025408
 8004fc8:	5802541c 	.word	0x5802541c
 8004fcc:	58025430 	.word	0x58025430
 8004fd0:	58025444 	.word	0x58025444
 8004fd4:	58025458 	.word	0x58025458
 8004fd8:	5802546c 	.word	0x5802546c
 8004fdc:	58025480 	.word	0x58025480
 8004fe0:	58025494 	.word	0x58025494
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d028      	beq.n	800503c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ff4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004ff8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ffe:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005004:	f003 031f 	and.w	r3, r3, #31
 8005008:	2201      	movs	r2, #1
 800500a:	409a      	lsls	r2, r3
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005014:	687a      	ldr	r2, [r7, #4]
 8005016:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005018:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800501e:	2b00      	cmp	r3, #0
 8005020:	d00c      	beq.n	800503c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800502c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005030:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800503a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005050:	2b00      	cmp	r3, #0
 8005052:	d003      	beq.n	800505c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800505c:	2300      	movs	r3, #0
}
 800505e:	4618      	mov	r0, r3
 8005060:	3710      	adds	r7, #16
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}
 8005066:	bf00      	nop

08005068 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b08a      	sub	sp, #40	@ 0x28
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005070:	2300      	movs	r3, #0
 8005072:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005074:	4b67      	ldr	r3, [pc, #412]	@ (8005214 <HAL_DMA_IRQHandler+0x1ac>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a67      	ldr	r2, [pc, #412]	@ (8005218 <HAL_DMA_IRQHandler+0x1b0>)
 800507a:	fba2 2303 	umull	r2, r3, r2, r3
 800507e:	0a9b      	lsrs	r3, r3, #10
 8005080:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005086:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800508c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800508e:	6a3b      	ldr	r3, [r7, #32]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005094:	69fb      	ldr	r3, [r7, #28]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a5f      	ldr	r2, [pc, #380]	@ (800521c <HAL_DMA_IRQHandler+0x1b4>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d04a      	beq.n	800513a <HAL_DMA_IRQHandler+0xd2>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a5d      	ldr	r2, [pc, #372]	@ (8005220 <HAL_DMA_IRQHandler+0x1b8>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d045      	beq.n	800513a <HAL_DMA_IRQHandler+0xd2>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a5c      	ldr	r2, [pc, #368]	@ (8005224 <HAL_DMA_IRQHandler+0x1bc>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d040      	beq.n	800513a <HAL_DMA_IRQHandler+0xd2>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a5a      	ldr	r2, [pc, #360]	@ (8005228 <HAL_DMA_IRQHandler+0x1c0>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d03b      	beq.n	800513a <HAL_DMA_IRQHandler+0xd2>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a59      	ldr	r2, [pc, #356]	@ (800522c <HAL_DMA_IRQHandler+0x1c4>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d036      	beq.n	800513a <HAL_DMA_IRQHandler+0xd2>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a57      	ldr	r2, [pc, #348]	@ (8005230 <HAL_DMA_IRQHandler+0x1c8>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d031      	beq.n	800513a <HAL_DMA_IRQHandler+0xd2>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a56      	ldr	r2, [pc, #344]	@ (8005234 <HAL_DMA_IRQHandler+0x1cc>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d02c      	beq.n	800513a <HAL_DMA_IRQHandler+0xd2>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a54      	ldr	r2, [pc, #336]	@ (8005238 <HAL_DMA_IRQHandler+0x1d0>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d027      	beq.n	800513a <HAL_DMA_IRQHandler+0xd2>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a53      	ldr	r2, [pc, #332]	@ (800523c <HAL_DMA_IRQHandler+0x1d4>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d022      	beq.n	800513a <HAL_DMA_IRQHandler+0xd2>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a51      	ldr	r2, [pc, #324]	@ (8005240 <HAL_DMA_IRQHandler+0x1d8>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d01d      	beq.n	800513a <HAL_DMA_IRQHandler+0xd2>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a50      	ldr	r2, [pc, #320]	@ (8005244 <HAL_DMA_IRQHandler+0x1dc>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d018      	beq.n	800513a <HAL_DMA_IRQHandler+0xd2>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a4e      	ldr	r2, [pc, #312]	@ (8005248 <HAL_DMA_IRQHandler+0x1e0>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d013      	beq.n	800513a <HAL_DMA_IRQHandler+0xd2>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a4d      	ldr	r2, [pc, #308]	@ (800524c <HAL_DMA_IRQHandler+0x1e4>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d00e      	beq.n	800513a <HAL_DMA_IRQHandler+0xd2>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a4b      	ldr	r2, [pc, #300]	@ (8005250 <HAL_DMA_IRQHandler+0x1e8>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d009      	beq.n	800513a <HAL_DMA_IRQHandler+0xd2>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a4a      	ldr	r2, [pc, #296]	@ (8005254 <HAL_DMA_IRQHandler+0x1ec>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d004      	beq.n	800513a <HAL_DMA_IRQHandler+0xd2>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a48      	ldr	r2, [pc, #288]	@ (8005258 <HAL_DMA_IRQHandler+0x1f0>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d101      	bne.n	800513e <HAL_DMA_IRQHandler+0xd6>
 800513a:	2301      	movs	r3, #1
 800513c:	e000      	b.n	8005140 <HAL_DMA_IRQHandler+0xd8>
 800513e:	2300      	movs	r3, #0
 8005140:	2b00      	cmp	r3, #0
 8005142:	f000 842b 	beq.w	800599c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800514a:	f003 031f 	and.w	r3, r3, #31
 800514e:	2208      	movs	r2, #8
 8005150:	409a      	lsls	r2, r3
 8005152:	69bb      	ldr	r3, [r7, #24]
 8005154:	4013      	ands	r3, r2
 8005156:	2b00      	cmp	r3, #0
 8005158:	f000 80a2 	beq.w	80052a0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a2e      	ldr	r2, [pc, #184]	@ (800521c <HAL_DMA_IRQHandler+0x1b4>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d04a      	beq.n	80051fc <HAL_DMA_IRQHandler+0x194>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a2d      	ldr	r2, [pc, #180]	@ (8005220 <HAL_DMA_IRQHandler+0x1b8>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d045      	beq.n	80051fc <HAL_DMA_IRQHandler+0x194>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a2b      	ldr	r2, [pc, #172]	@ (8005224 <HAL_DMA_IRQHandler+0x1bc>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d040      	beq.n	80051fc <HAL_DMA_IRQHandler+0x194>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a2a      	ldr	r2, [pc, #168]	@ (8005228 <HAL_DMA_IRQHandler+0x1c0>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d03b      	beq.n	80051fc <HAL_DMA_IRQHandler+0x194>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a28      	ldr	r2, [pc, #160]	@ (800522c <HAL_DMA_IRQHandler+0x1c4>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d036      	beq.n	80051fc <HAL_DMA_IRQHandler+0x194>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a27      	ldr	r2, [pc, #156]	@ (8005230 <HAL_DMA_IRQHandler+0x1c8>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d031      	beq.n	80051fc <HAL_DMA_IRQHandler+0x194>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a25      	ldr	r2, [pc, #148]	@ (8005234 <HAL_DMA_IRQHandler+0x1cc>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d02c      	beq.n	80051fc <HAL_DMA_IRQHandler+0x194>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a24      	ldr	r2, [pc, #144]	@ (8005238 <HAL_DMA_IRQHandler+0x1d0>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d027      	beq.n	80051fc <HAL_DMA_IRQHandler+0x194>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a22      	ldr	r2, [pc, #136]	@ (800523c <HAL_DMA_IRQHandler+0x1d4>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d022      	beq.n	80051fc <HAL_DMA_IRQHandler+0x194>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a21      	ldr	r2, [pc, #132]	@ (8005240 <HAL_DMA_IRQHandler+0x1d8>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d01d      	beq.n	80051fc <HAL_DMA_IRQHandler+0x194>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a1f      	ldr	r2, [pc, #124]	@ (8005244 <HAL_DMA_IRQHandler+0x1dc>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d018      	beq.n	80051fc <HAL_DMA_IRQHandler+0x194>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a1e      	ldr	r2, [pc, #120]	@ (8005248 <HAL_DMA_IRQHandler+0x1e0>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d013      	beq.n	80051fc <HAL_DMA_IRQHandler+0x194>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a1c      	ldr	r2, [pc, #112]	@ (800524c <HAL_DMA_IRQHandler+0x1e4>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d00e      	beq.n	80051fc <HAL_DMA_IRQHandler+0x194>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a1b      	ldr	r2, [pc, #108]	@ (8005250 <HAL_DMA_IRQHandler+0x1e8>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d009      	beq.n	80051fc <HAL_DMA_IRQHandler+0x194>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a19      	ldr	r2, [pc, #100]	@ (8005254 <HAL_DMA_IRQHandler+0x1ec>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d004      	beq.n	80051fc <HAL_DMA_IRQHandler+0x194>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a18      	ldr	r2, [pc, #96]	@ (8005258 <HAL_DMA_IRQHandler+0x1f0>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d12f      	bne.n	800525c <HAL_DMA_IRQHandler+0x1f4>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f003 0304 	and.w	r3, r3, #4
 8005206:	2b00      	cmp	r3, #0
 8005208:	bf14      	ite	ne
 800520a:	2301      	movne	r3, #1
 800520c:	2300      	moveq	r3, #0
 800520e:	b2db      	uxtb	r3, r3
 8005210:	e02e      	b.n	8005270 <HAL_DMA_IRQHandler+0x208>
 8005212:	bf00      	nop
 8005214:	24000000 	.word	0x24000000
 8005218:	1b4e81b5 	.word	0x1b4e81b5
 800521c:	40020010 	.word	0x40020010
 8005220:	40020028 	.word	0x40020028
 8005224:	40020040 	.word	0x40020040
 8005228:	40020058 	.word	0x40020058
 800522c:	40020070 	.word	0x40020070
 8005230:	40020088 	.word	0x40020088
 8005234:	400200a0 	.word	0x400200a0
 8005238:	400200b8 	.word	0x400200b8
 800523c:	40020410 	.word	0x40020410
 8005240:	40020428 	.word	0x40020428
 8005244:	40020440 	.word	0x40020440
 8005248:	40020458 	.word	0x40020458
 800524c:	40020470 	.word	0x40020470
 8005250:	40020488 	.word	0x40020488
 8005254:	400204a0 	.word	0x400204a0
 8005258:	400204b8 	.word	0x400204b8
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f003 0308 	and.w	r3, r3, #8
 8005266:	2b00      	cmp	r3, #0
 8005268:	bf14      	ite	ne
 800526a:	2301      	movne	r3, #1
 800526c:	2300      	moveq	r3, #0
 800526e:	b2db      	uxtb	r3, r3
 8005270:	2b00      	cmp	r3, #0
 8005272:	d015      	beq.n	80052a0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f022 0204 	bic.w	r2, r2, #4
 8005282:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005288:	f003 031f 	and.w	r3, r3, #31
 800528c:	2208      	movs	r2, #8
 800528e:	409a      	lsls	r2, r3
 8005290:	6a3b      	ldr	r3, [r7, #32]
 8005292:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005298:	f043 0201 	orr.w	r2, r3, #1
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052a4:	f003 031f 	and.w	r3, r3, #31
 80052a8:	69ba      	ldr	r2, [r7, #24]
 80052aa:	fa22 f303 	lsr.w	r3, r2, r3
 80052ae:	f003 0301 	and.w	r3, r3, #1
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d06e      	beq.n	8005394 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a69      	ldr	r2, [pc, #420]	@ (8005460 <HAL_DMA_IRQHandler+0x3f8>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d04a      	beq.n	8005356 <HAL_DMA_IRQHandler+0x2ee>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a67      	ldr	r2, [pc, #412]	@ (8005464 <HAL_DMA_IRQHandler+0x3fc>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d045      	beq.n	8005356 <HAL_DMA_IRQHandler+0x2ee>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a66      	ldr	r2, [pc, #408]	@ (8005468 <HAL_DMA_IRQHandler+0x400>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d040      	beq.n	8005356 <HAL_DMA_IRQHandler+0x2ee>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a64      	ldr	r2, [pc, #400]	@ (800546c <HAL_DMA_IRQHandler+0x404>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d03b      	beq.n	8005356 <HAL_DMA_IRQHandler+0x2ee>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a63      	ldr	r2, [pc, #396]	@ (8005470 <HAL_DMA_IRQHandler+0x408>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d036      	beq.n	8005356 <HAL_DMA_IRQHandler+0x2ee>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a61      	ldr	r2, [pc, #388]	@ (8005474 <HAL_DMA_IRQHandler+0x40c>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d031      	beq.n	8005356 <HAL_DMA_IRQHandler+0x2ee>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a60      	ldr	r2, [pc, #384]	@ (8005478 <HAL_DMA_IRQHandler+0x410>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d02c      	beq.n	8005356 <HAL_DMA_IRQHandler+0x2ee>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a5e      	ldr	r2, [pc, #376]	@ (800547c <HAL_DMA_IRQHandler+0x414>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d027      	beq.n	8005356 <HAL_DMA_IRQHandler+0x2ee>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a5d      	ldr	r2, [pc, #372]	@ (8005480 <HAL_DMA_IRQHandler+0x418>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d022      	beq.n	8005356 <HAL_DMA_IRQHandler+0x2ee>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a5b      	ldr	r2, [pc, #364]	@ (8005484 <HAL_DMA_IRQHandler+0x41c>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d01d      	beq.n	8005356 <HAL_DMA_IRQHandler+0x2ee>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a5a      	ldr	r2, [pc, #360]	@ (8005488 <HAL_DMA_IRQHandler+0x420>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d018      	beq.n	8005356 <HAL_DMA_IRQHandler+0x2ee>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a58      	ldr	r2, [pc, #352]	@ (800548c <HAL_DMA_IRQHandler+0x424>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d013      	beq.n	8005356 <HAL_DMA_IRQHandler+0x2ee>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a57      	ldr	r2, [pc, #348]	@ (8005490 <HAL_DMA_IRQHandler+0x428>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d00e      	beq.n	8005356 <HAL_DMA_IRQHandler+0x2ee>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a55      	ldr	r2, [pc, #340]	@ (8005494 <HAL_DMA_IRQHandler+0x42c>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d009      	beq.n	8005356 <HAL_DMA_IRQHandler+0x2ee>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a54      	ldr	r2, [pc, #336]	@ (8005498 <HAL_DMA_IRQHandler+0x430>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d004      	beq.n	8005356 <HAL_DMA_IRQHandler+0x2ee>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a52      	ldr	r2, [pc, #328]	@ (800549c <HAL_DMA_IRQHandler+0x434>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d10a      	bne.n	800536c <HAL_DMA_IRQHandler+0x304>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	695b      	ldr	r3, [r3, #20]
 800535c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005360:	2b00      	cmp	r3, #0
 8005362:	bf14      	ite	ne
 8005364:	2301      	movne	r3, #1
 8005366:	2300      	moveq	r3, #0
 8005368:	b2db      	uxtb	r3, r3
 800536a:	e003      	b.n	8005374 <HAL_DMA_IRQHandler+0x30c>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	2300      	movs	r3, #0
 8005374:	2b00      	cmp	r3, #0
 8005376:	d00d      	beq.n	8005394 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800537c:	f003 031f 	and.w	r3, r3, #31
 8005380:	2201      	movs	r2, #1
 8005382:	409a      	lsls	r2, r3
 8005384:	6a3b      	ldr	r3, [r7, #32]
 8005386:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800538c:	f043 0202 	orr.w	r2, r3, #2
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005398:	f003 031f 	and.w	r3, r3, #31
 800539c:	2204      	movs	r2, #4
 800539e:	409a      	lsls	r2, r3
 80053a0:	69bb      	ldr	r3, [r7, #24]
 80053a2:	4013      	ands	r3, r2
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	f000 808f 	beq.w	80054c8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a2c      	ldr	r2, [pc, #176]	@ (8005460 <HAL_DMA_IRQHandler+0x3f8>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d04a      	beq.n	800544a <HAL_DMA_IRQHandler+0x3e2>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a2a      	ldr	r2, [pc, #168]	@ (8005464 <HAL_DMA_IRQHandler+0x3fc>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d045      	beq.n	800544a <HAL_DMA_IRQHandler+0x3e2>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a29      	ldr	r2, [pc, #164]	@ (8005468 <HAL_DMA_IRQHandler+0x400>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d040      	beq.n	800544a <HAL_DMA_IRQHandler+0x3e2>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a27      	ldr	r2, [pc, #156]	@ (800546c <HAL_DMA_IRQHandler+0x404>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d03b      	beq.n	800544a <HAL_DMA_IRQHandler+0x3e2>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a26      	ldr	r2, [pc, #152]	@ (8005470 <HAL_DMA_IRQHandler+0x408>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d036      	beq.n	800544a <HAL_DMA_IRQHandler+0x3e2>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a24      	ldr	r2, [pc, #144]	@ (8005474 <HAL_DMA_IRQHandler+0x40c>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d031      	beq.n	800544a <HAL_DMA_IRQHandler+0x3e2>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a23      	ldr	r2, [pc, #140]	@ (8005478 <HAL_DMA_IRQHandler+0x410>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d02c      	beq.n	800544a <HAL_DMA_IRQHandler+0x3e2>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a21      	ldr	r2, [pc, #132]	@ (800547c <HAL_DMA_IRQHandler+0x414>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d027      	beq.n	800544a <HAL_DMA_IRQHandler+0x3e2>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a20      	ldr	r2, [pc, #128]	@ (8005480 <HAL_DMA_IRQHandler+0x418>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d022      	beq.n	800544a <HAL_DMA_IRQHandler+0x3e2>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a1e      	ldr	r2, [pc, #120]	@ (8005484 <HAL_DMA_IRQHandler+0x41c>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d01d      	beq.n	800544a <HAL_DMA_IRQHandler+0x3e2>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a1d      	ldr	r2, [pc, #116]	@ (8005488 <HAL_DMA_IRQHandler+0x420>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d018      	beq.n	800544a <HAL_DMA_IRQHandler+0x3e2>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a1b      	ldr	r2, [pc, #108]	@ (800548c <HAL_DMA_IRQHandler+0x424>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d013      	beq.n	800544a <HAL_DMA_IRQHandler+0x3e2>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a1a      	ldr	r2, [pc, #104]	@ (8005490 <HAL_DMA_IRQHandler+0x428>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d00e      	beq.n	800544a <HAL_DMA_IRQHandler+0x3e2>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a18      	ldr	r2, [pc, #96]	@ (8005494 <HAL_DMA_IRQHandler+0x42c>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d009      	beq.n	800544a <HAL_DMA_IRQHandler+0x3e2>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a17      	ldr	r2, [pc, #92]	@ (8005498 <HAL_DMA_IRQHandler+0x430>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d004      	beq.n	800544a <HAL_DMA_IRQHandler+0x3e2>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a15      	ldr	r2, [pc, #84]	@ (800549c <HAL_DMA_IRQHandler+0x434>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d12a      	bne.n	80054a0 <HAL_DMA_IRQHandler+0x438>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f003 0302 	and.w	r3, r3, #2
 8005454:	2b00      	cmp	r3, #0
 8005456:	bf14      	ite	ne
 8005458:	2301      	movne	r3, #1
 800545a:	2300      	moveq	r3, #0
 800545c:	b2db      	uxtb	r3, r3
 800545e:	e023      	b.n	80054a8 <HAL_DMA_IRQHandler+0x440>
 8005460:	40020010 	.word	0x40020010
 8005464:	40020028 	.word	0x40020028
 8005468:	40020040 	.word	0x40020040
 800546c:	40020058 	.word	0x40020058
 8005470:	40020070 	.word	0x40020070
 8005474:	40020088 	.word	0x40020088
 8005478:	400200a0 	.word	0x400200a0
 800547c:	400200b8 	.word	0x400200b8
 8005480:	40020410 	.word	0x40020410
 8005484:	40020428 	.word	0x40020428
 8005488:	40020440 	.word	0x40020440
 800548c:	40020458 	.word	0x40020458
 8005490:	40020470 	.word	0x40020470
 8005494:	40020488 	.word	0x40020488
 8005498:	400204a0 	.word	0x400204a0
 800549c:	400204b8 	.word	0x400204b8
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	2300      	movs	r3, #0
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d00d      	beq.n	80054c8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054b0:	f003 031f 	and.w	r3, r3, #31
 80054b4:	2204      	movs	r2, #4
 80054b6:	409a      	lsls	r2, r3
 80054b8:	6a3b      	ldr	r3, [r7, #32]
 80054ba:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054c0:	f043 0204 	orr.w	r2, r3, #4
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054cc:	f003 031f 	and.w	r3, r3, #31
 80054d0:	2210      	movs	r2, #16
 80054d2:	409a      	lsls	r2, r3
 80054d4:	69bb      	ldr	r3, [r7, #24]
 80054d6:	4013      	ands	r3, r2
 80054d8:	2b00      	cmp	r3, #0
 80054da:	f000 80a6 	beq.w	800562a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a85      	ldr	r2, [pc, #532]	@ (80056f8 <HAL_DMA_IRQHandler+0x690>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d04a      	beq.n	800557e <HAL_DMA_IRQHandler+0x516>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a83      	ldr	r2, [pc, #524]	@ (80056fc <HAL_DMA_IRQHandler+0x694>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d045      	beq.n	800557e <HAL_DMA_IRQHandler+0x516>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a82      	ldr	r2, [pc, #520]	@ (8005700 <HAL_DMA_IRQHandler+0x698>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d040      	beq.n	800557e <HAL_DMA_IRQHandler+0x516>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a80      	ldr	r2, [pc, #512]	@ (8005704 <HAL_DMA_IRQHandler+0x69c>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d03b      	beq.n	800557e <HAL_DMA_IRQHandler+0x516>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a7f      	ldr	r2, [pc, #508]	@ (8005708 <HAL_DMA_IRQHandler+0x6a0>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d036      	beq.n	800557e <HAL_DMA_IRQHandler+0x516>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a7d      	ldr	r2, [pc, #500]	@ (800570c <HAL_DMA_IRQHandler+0x6a4>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d031      	beq.n	800557e <HAL_DMA_IRQHandler+0x516>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a7c      	ldr	r2, [pc, #496]	@ (8005710 <HAL_DMA_IRQHandler+0x6a8>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d02c      	beq.n	800557e <HAL_DMA_IRQHandler+0x516>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a7a      	ldr	r2, [pc, #488]	@ (8005714 <HAL_DMA_IRQHandler+0x6ac>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d027      	beq.n	800557e <HAL_DMA_IRQHandler+0x516>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a79      	ldr	r2, [pc, #484]	@ (8005718 <HAL_DMA_IRQHandler+0x6b0>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d022      	beq.n	800557e <HAL_DMA_IRQHandler+0x516>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a77      	ldr	r2, [pc, #476]	@ (800571c <HAL_DMA_IRQHandler+0x6b4>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d01d      	beq.n	800557e <HAL_DMA_IRQHandler+0x516>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a76      	ldr	r2, [pc, #472]	@ (8005720 <HAL_DMA_IRQHandler+0x6b8>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d018      	beq.n	800557e <HAL_DMA_IRQHandler+0x516>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a74      	ldr	r2, [pc, #464]	@ (8005724 <HAL_DMA_IRQHandler+0x6bc>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d013      	beq.n	800557e <HAL_DMA_IRQHandler+0x516>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a73      	ldr	r2, [pc, #460]	@ (8005728 <HAL_DMA_IRQHandler+0x6c0>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d00e      	beq.n	800557e <HAL_DMA_IRQHandler+0x516>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a71      	ldr	r2, [pc, #452]	@ (800572c <HAL_DMA_IRQHandler+0x6c4>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d009      	beq.n	800557e <HAL_DMA_IRQHandler+0x516>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a70      	ldr	r2, [pc, #448]	@ (8005730 <HAL_DMA_IRQHandler+0x6c8>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d004      	beq.n	800557e <HAL_DMA_IRQHandler+0x516>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a6e      	ldr	r2, [pc, #440]	@ (8005734 <HAL_DMA_IRQHandler+0x6cc>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d10a      	bne.n	8005594 <HAL_DMA_IRQHandler+0x52c>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f003 0308 	and.w	r3, r3, #8
 8005588:	2b00      	cmp	r3, #0
 800558a:	bf14      	ite	ne
 800558c:	2301      	movne	r3, #1
 800558e:	2300      	moveq	r3, #0
 8005590:	b2db      	uxtb	r3, r3
 8005592:	e009      	b.n	80055a8 <HAL_DMA_IRQHandler+0x540>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f003 0304 	and.w	r3, r3, #4
 800559e:	2b00      	cmp	r3, #0
 80055a0:	bf14      	ite	ne
 80055a2:	2301      	movne	r3, #1
 80055a4:	2300      	moveq	r3, #0
 80055a6:	b2db      	uxtb	r3, r3
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d03e      	beq.n	800562a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055b0:	f003 031f 	and.w	r3, r3, #31
 80055b4:	2210      	movs	r2, #16
 80055b6:	409a      	lsls	r2, r3
 80055b8:	6a3b      	ldr	r3, [r7, #32]
 80055ba:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d018      	beq.n	80055fc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d108      	bne.n	80055ea <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d024      	beq.n	800562a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	4798      	blx	r3
 80055e8:	e01f      	b.n	800562a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d01b      	beq.n	800562a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	4798      	blx	r3
 80055fa:	e016      	b.n	800562a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005606:	2b00      	cmp	r3, #0
 8005608:	d107      	bne.n	800561a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f022 0208 	bic.w	r2, r2, #8
 8005618:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800561e:	2b00      	cmp	r3, #0
 8005620:	d003      	beq.n	800562a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800562e:	f003 031f 	and.w	r3, r3, #31
 8005632:	2220      	movs	r2, #32
 8005634:	409a      	lsls	r2, r3
 8005636:	69bb      	ldr	r3, [r7, #24]
 8005638:	4013      	ands	r3, r2
 800563a:	2b00      	cmp	r3, #0
 800563c:	f000 8110 	beq.w	8005860 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a2c      	ldr	r2, [pc, #176]	@ (80056f8 <HAL_DMA_IRQHandler+0x690>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d04a      	beq.n	80056e0 <HAL_DMA_IRQHandler+0x678>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a2b      	ldr	r2, [pc, #172]	@ (80056fc <HAL_DMA_IRQHandler+0x694>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d045      	beq.n	80056e0 <HAL_DMA_IRQHandler+0x678>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a29      	ldr	r2, [pc, #164]	@ (8005700 <HAL_DMA_IRQHandler+0x698>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d040      	beq.n	80056e0 <HAL_DMA_IRQHandler+0x678>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a28      	ldr	r2, [pc, #160]	@ (8005704 <HAL_DMA_IRQHandler+0x69c>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d03b      	beq.n	80056e0 <HAL_DMA_IRQHandler+0x678>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a26      	ldr	r2, [pc, #152]	@ (8005708 <HAL_DMA_IRQHandler+0x6a0>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d036      	beq.n	80056e0 <HAL_DMA_IRQHandler+0x678>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a25      	ldr	r2, [pc, #148]	@ (800570c <HAL_DMA_IRQHandler+0x6a4>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d031      	beq.n	80056e0 <HAL_DMA_IRQHandler+0x678>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a23      	ldr	r2, [pc, #140]	@ (8005710 <HAL_DMA_IRQHandler+0x6a8>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d02c      	beq.n	80056e0 <HAL_DMA_IRQHandler+0x678>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a22      	ldr	r2, [pc, #136]	@ (8005714 <HAL_DMA_IRQHandler+0x6ac>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d027      	beq.n	80056e0 <HAL_DMA_IRQHandler+0x678>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a20      	ldr	r2, [pc, #128]	@ (8005718 <HAL_DMA_IRQHandler+0x6b0>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d022      	beq.n	80056e0 <HAL_DMA_IRQHandler+0x678>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a1f      	ldr	r2, [pc, #124]	@ (800571c <HAL_DMA_IRQHandler+0x6b4>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d01d      	beq.n	80056e0 <HAL_DMA_IRQHandler+0x678>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a1d      	ldr	r2, [pc, #116]	@ (8005720 <HAL_DMA_IRQHandler+0x6b8>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d018      	beq.n	80056e0 <HAL_DMA_IRQHandler+0x678>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a1c      	ldr	r2, [pc, #112]	@ (8005724 <HAL_DMA_IRQHandler+0x6bc>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d013      	beq.n	80056e0 <HAL_DMA_IRQHandler+0x678>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a1a      	ldr	r2, [pc, #104]	@ (8005728 <HAL_DMA_IRQHandler+0x6c0>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d00e      	beq.n	80056e0 <HAL_DMA_IRQHandler+0x678>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a19      	ldr	r2, [pc, #100]	@ (800572c <HAL_DMA_IRQHandler+0x6c4>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d009      	beq.n	80056e0 <HAL_DMA_IRQHandler+0x678>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a17      	ldr	r2, [pc, #92]	@ (8005730 <HAL_DMA_IRQHandler+0x6c8>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d004      	beq.n	80056e0 <HAL_DMA_IRQHandler+0x678>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a16      	ldr	r2, [pc, #88]	@ (8005734 <HAL_DMA_IRQHandler+0x6cc>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d12b      	bne.n	8005738 <HAL_DMA_IRQHandler+0x6d0>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f003 0310 	and.w	r3, r3, #16
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	bf14      	ite	ne
 80056ee:	2301      	movne	r3, #1
 80056f0:	2300      	moveq	r3, #0
 80056f2:	b2db      	uxtb	r3, r3
 80056f4:	e02a      	b.n	800574c <HAL_DMA_IRQHandler+0x6e4>
 80056f6:	bf00      	nop
 80056f8:	40020010 	.word	0x40020010
 80056fc:	40020028 	.word	0x40020028
 8005700:	40020040 	.word	0x40020040
 8005704:	40020058 	.word	0x40020058
 8005708:	40020070 	.word	0x40020070
 800570c:	40020088 	.word	0x40020088
 8005710:	400200a0 	.word	0x400200a0
 8005714:	400200b8 	.word	0x400200b8
 8005718:	40020410 	.word	0x40020410
 800571c:	40020428 	.word	0x40020428
 8005720:	40020440 	.word	0x40020440
 8005724:	40020458 	.word	0x40020458
 8005728:	40020470 	.word	0x40020470
 800572c:	40020488 	.word	0x40020488
 8005730:	400204a0 	.word	0x400204a0
 8005734:	400204b8 	.word	0x400204b8
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f003 0302 	and.w	r3, r3, #2
 8005742:	2b00      	cmp	r3, #0
 8005744:	bf14      	ite	ne
 8005746:	2301      	movne	r3, #1
 8005748:	2300      	moveq	r3, #0
 800574a:	b2db      	uxtb	r3, r3
 800574c:	2b00      	cmp	r3, #0
 800574e:	f000 8087 	beq.w	8005860 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005756:	f003 031f 	and.w	r3, r3, #31
 800575a:	2220      	movs	r2, #32
 800575c:	409a      	lsls	r2, r3
 800575e:	6a3b      	ldr	r3, [r7, #32]
 8005760:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005768:	b2db      	uxtb	r3, r3
 800576a:	2b04      	cmp	r3, #4
 800576c:	d139      	bne.n	80057e2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f022 0216 	bic.w	r2, r2, #22
 800577c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	695a      	ldr	r2, [r3, #20]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800578c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005792:	2b00      	cmp	r3, #0
 8005794:	d103      	bne.n	800579e <HAL_DMA_IRQHandler+0x736>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800579a:	2b00      	cmp	r3, #0
 800579c:	d007      	beq.n	80057ae <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f022 0208 	bic.w	r2, r2, #8
 80057ac:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057b2:	f003 031f 	and.w	r3, r3, #31
 80057b6:	223f      	movs	r2, #63	@ 0x3f
 80057b8:	409a      	lsls	r2, r3
 80057ba:	6a3b      	ldr	r3, [r7, #32]
 80057bc:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2201      	movs	r2, #1
 80057c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2200      	movs	r2, #0
 80057ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	f000 834a 	beq.w	8005e6c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	4798      	blx	r3
          }
          return;
 80057e0:	e344      	b.n	8005e6c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d018      	beq.n	8005822 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d108      	bne.n	8005810 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005802:	2b00      	cmp	r3, #0
 8005804:	d02c      	beq.n	8005860 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	4798      	blx	r3
 800580e:	e027      	b.n	8005860 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005814:	2b00      	cmp	r3, #0
 8005816:	d023      	beq.n	8005860 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	4798      	blx	r3
 8005820:	e01e      	b.n	8005860 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800582c:	2b00      	cmp	r3, #0
 800582e:	d10f      	bne.n	8005850 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f022 0210 	bic.w	r2, r2, #16
 800583e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2201      	movs	r2, #1
 8005844:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2200      	movs	r2, #0
 800584c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005854:	2b00      	cmp	r3, #0
 8005856:	d003      	beq.n	8005860 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005864:	2b00      	cmp	r3, #0
 8005866:	f000 8306 	beq.w	8005e76 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800586e:	f003 0301 	and.w	r3, r3, #1
 8005872:	2b00      	cmp	r3, #0
 8005874:	f000 8088 	beq.w	8005988 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2204      	movs	r2, #4
 800587c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a7a      	ldr	r2, [pc, #488]	@ (8005a70 <HAL_DMA_IRQHandler+0xa08>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d04a      	beq.n	8005920 <HAL_DMA_IRQHandler+0x8b8>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a79      	ldr	r2, [pc, #484]	@ (8005a74 <HAL_DMA_IRQHandler+0xa0c>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d045      	beq.n	8005920 <HAL_DMA_IRQHandler+0x8b8>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a77      	ldr	r2, [pc, #476]	@ (8005a78 <HAL_DMA_IRQHandler+0xa10>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d040      	beq.n	8005920 <HAL_DMA_IRQHandler+0x8b8>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a76      	ldr	r2, [pc, #472]	@ (8005a7c <HAL_DMA_IRQHandler+0xa14>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d03b      	beq.n	8005920 <HAL_DMA_IRQHandler+0x8b8>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a74      	ldr	r2, [pc, #464]	@ (8005a80 <HAL_DMA_IRQHandler+0xa18>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d036      	beq.n	8005920 <HAL_DMA_IRQHandler+0x8b8>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a73      	ldr	r2, [pc, #460]	@ (8005a84 <HAL_DMA_IRQHandler+0xa1c>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d031      	beq.n	8005920 <HAL_DMA_IRQHandler+0x8b8>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a71      	ldr	r2, [pc, #452]	@ (8005a88 <HAL_DMA_IRQHandler+0xa20>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d02c      	beq.n	8005920 <HAL_DMA_IRQHandler+0x8b8>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a70      	ldr	r2, [pc, #448]	@ (8005a8c <HAL_DMA_IRQHandler+0xa24>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d027      	beq.n	8005920 <HAL_DMA_IRQHandler+0x8b8>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a6e      	ldr	r2, [pc, #440]	@ (8005a90 <HAL_DMA_IRQHandler+0xa28>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d022      	beq.n	8005920 <HAL_DMA_IRQHandler+0x8b8>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a6d      	ldr	r2, [pc, #436]	@ (8005a94 <HAL_DMA_IRQHandler+0xa2c>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d01d      	beq.n	8005920 <HAL_DMA_IRQHandler+0x8b8>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a6b      	ldr	r2, [pc, #428]	@ (8005a98 <HAL_DMA_IRQHandler+0xa30>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d018      	beq.n	8005920 <HAL_DMA_IRQHandler+0x8b8>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a6a      	ldr	r2, [pc, #424]	@ (8005a9c <HAL_DMA_IRQHandler+0xa34>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d013      	beq.n	8005920 <HAL_DMA_IRQHandler+0x8b8>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a68      	ldr	r2, [pc, #416]	@ (8005aa0 <HAL_DMA_IRQHandler+0xa38>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d00e      	beq.n	8005920 <HAL_DMA_IRQHandler+0x8b8>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a67      	ldr	r2, [pc, #412]	@ (8005aa4 <HAL_DMA_IRQHandler+0xa3c>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d009      	beq.n	8005920 <HAL_DMA_IRQHandler+0x8b8>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a65      	ldr	r2, [pc, #404]	@ (8005aa8 <HAL_DMA_IRQHandler+0xa40>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d004      	beq.n	8005920 <HAL_DMA_IRQHandler+0x8b8>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a64      	ldr	r2, [pc, #400]	@ (8005aac <HAL_DMA_IRQHandler+0xa44>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d108      	bne.n	8005932 <HAL_DMA_IRQHandler+0x8ca>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f022 0201 	bic.w	r2, r2, #1
 800592e:	601a      	str	r2, [r3, #0]
 8005930:	e007      	b.n	8005942 <HAL_DMA_IRQHandler+0x8da>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f022 0201 	bic.w	r2, r2, #1
 8005940:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	3301      	adds	r3, #1
 8005946:	60fb      	str	r3, [r7, #12]
 8005948:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800594a:	429a      	cmp	r2, r3
 800594c:	d307      	bcc.n	800595e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f003 0301 	and.w	r3, r3, #1
 8005958:	2b00      	cmp	r3, #0
 800595a:	d1f2      	bne.n	8005942 <HAL_DMA_IRQHandler+0x8da>
 800595c:	e000      	b.n	8005960 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800595e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f003 0301 	and.w	r3, r3, #1
 800596a:	2b00      	cmp	r3, #0
 800596c:	d004      	beq.n	8005978 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2203      	movs	r2, #3
 8005972:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8005976:	e003      	b.n	8005980 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2201      	movs	r2, #1
 800597c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2200      	movs	r2, #0
 8005984:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800598c:	2b00      	cmp	r3, #0
 800598e:	f000 8272 	beq.w	8005e76 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	4798      	blx	r3
 800599a:	e26c      	b.n	8005e76 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a43      	ldr	r2, [pc, #268]	@ (8005ab0 <HAL_DMA_IRQHandler+0xa48>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d022      	beq.n	80059ec <HAL_DMA_IRQHandler+0x984>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a42      	ldr	r2, [pc, #264]	@ (8005ab4 <HAL_DMA_IRQHandler+0xa4c>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d01d      	beq.n	80059ec <HAL_DMA_IRQHandler+0x984>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a40      	ldr	r2, [pc, #256]	@ (8005ab8 <HAL_DMA_IRQHandler+0xa50>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d018      	beq.n	80059ec <HAL_DMA_IRQHandler+0x984>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a3f      	ldr	r2, [pc, #252]	@ (8005abc <HAL_DMA_IRQHandler+0xa54>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d013      	beq.n	80059ec <HAL_DMA_IRQHandler+0x984>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a3d      	ldr	r2, [pc, #244]	@ (8005ac0 <HAL_DMA_IRQHandler+0xa58>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d00e      	beq.n	80059ec <HAL_DMA_IRQHandler+0x984>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a3c      	ldr	r2, [pc, #240]	@ (8005ac4 <HAL_DMA_IRQHandler+0xa5c>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d009      	beq.n	80059ec <HAL_DMA_IRQHandler+0x984>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a3a      	ldr	r2, [pc, #232]	@ (8005ac8 <HAL_DMA_IRQHandler+0xa60>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d004      	beq.n	80059ec <HAL_DMA_IRQHandler+0x984>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a39      	ldr	r2, [pc, #228]	@ (8005acc <HAL_DMA_IRQHandler+0xa64>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d101      	bne.n	80059f0 <HAL_DMA_IRQHandler+0x988>
 80059ec:	2301      	movs	r3, #1
 80059ee:	e000      	b.n	80059f2 <HAL_DMA_IRQHandler+0x98a>
 80059f0:	2300      	movs	r3, #0
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	f000 823f 	beq.w	8005e76 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a04:	f003 031f 	and.w	r3, r3, #31
 8005a08:	2204      	movs	r2, #4
 8005a0a:	409a      	lsls	r2, r3
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	4013      	ands	r3, r2
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	f000 80cd 	beq.w	8005bb0 <HAL_DMA_IRQHandler+0xb48>
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	f003 0304 	and.w	r3, r3, #4
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	f000 80c7 	beq.w	8005bb0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a26:	f003 031f 	and.w	r3, r3, #31
 8005a2a:	2204      	movs	r2, #4
 8005a2c:	409a      	lsls	r2, r3
 8005a2e:	69fb      	ldr	r3, [r7, #28]
 8005a30:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d049      	beq.n	8005ad0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d109      	bne.n	8005a5a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	f000 8210 	beq.w	8005e70 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a58:	e20a      	b.n	8005e70 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	f000 8206 	beq.w	8005e70 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a6c:	e200      	b.n	8005e70 <HAL_DMA_IRQHandler+0xe08>
 8005a6e:	bf00      	nop
 8005a70:	40020010 	.word	0x40020010
 8005a74:	40020028 	.word	0x40020028
 8005a78:	40020040 	.word	0x40020040
 8005a7c:	40020058 	.word	0x40020058
 8005a80:	40020070 	.word	0x40020070
 8005a84:	40020088 	.word	0x40020088
 8005a88:	400200a0 	.word	0x400200a0
 8005a8c:	400200b8 	.word	0x400200b8
 8005a90:	40020410 	.word	0x40020410
 8005a94:	40020428 	.word	0x40020428
 8005a98:	40020440 	.word	0x40020440
 8005a9c:	40020458 	.word	0x40020458
 8005aa0:	40020470 	.word	0x40020470
 8005aa4:	40020488 	.word	0x40020488
 8005aa8:	400204a0 	.word	0x400204a0
 8005aac:	400204b8 	.word	0x400204b8
 8005ab0:	58025408 	.word	0x58025408
 8005ab4:	5802541c 	.word	0x5802541c
 8005ab8:	58025430 	.word	0x58025430
 8005abc:	58025444 	.word	0x58025444
 8005ac0:	58025458 	.word	0x58025458
 8005ac4:	5802546c 	.word	0x5802546c
 8005ac8:	58025480 	.word	0x58025480
 8005acc:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	f003 0320 	and.w	r3, r3, #32
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d160      	bne.n	8005b9c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a7f      	ldr	r2, [pc, #508]	@ (8005cdc <HAL_DMA_IRQHandler+0xc74>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d04a      	beq.n	8005b7a <HAL_DMA_IRQHandler+0xb12>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a7d      	ldr	r2, [pc, #500]	@ (8005ce0 <HAL_DMA_IRQHandler+0xc78>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d045      	beq.n	8005b7a <HAL_DMA_IRQHandler+0xb12>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a7c      	ldr	r2, [pc, #496]	@ (8005ce4 <HAL_DMA_IRQHandler+0xc7c>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d040      	beq.n	8005b7a <HAL_DMA_IRQHandler+0xb12>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a7a      	ldr	r2, [pc, #488]	@ (8005ce8 <HAL_DMA_IRQHandler+0xc80>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d03b      	beq.n	8005b7a <HAL_DMA_IRQHandler+0xb12>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a79      	ldr	r2, [pc, #484]	@ (8005cec <HAL_DMA_IRQHandler+0xc84>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d036      	beq.n	8005b7a <HAL_DMA_IRQHandler+0xb12>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a77      	ldr	r2, [pc, #476]	@ (8005cf0 <HAL_DMA_IRQHandler+0xc88>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d031      	beq.n	8005b7a <HAL_DMA_IRQHandler+0xb12>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a76      	ldr	r2, [pc, #472]	@ (8005cf4 <HAL_DMA_IRQHandler+0xc8c>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d02c      	beq.n	8005b7a <HAL_DMA_IRQHandler+0xb12>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a74      	ldr	r2, [pc, #464]	@ (8005cf8 <HAL_DMA_IRQHandler+0xc90>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d027      	beq.n	8005b7a <HAL_DMA_IRQHandler+0xb12>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a73      	ldr	r2, [pc, #460]	@ (8005cfc <HAL_DMA_IRQHandler+0xc94>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d022      	beq.n	8005b7a <HAL_DMA_IRQHandler+0xb12>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a71      	ldr	r2, [pc, #452]	@ (8005d00 <HAL_DMA_IRQHandler+0xc98>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d01d      	beq.n	8005b7a <HAL_DMA_IRQHandler+0xb12>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a70      	ldr	r2, [pc, #448]	@ (8005d04 <HAL_DMA_IRQHandler+0xc9c>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d018      	beq.n	8005b7a <HAL_DMA_IRQHandler+0xb12>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a6e      	ldr	r2, [pc, #440]	@ (8005d08 <HAL_DMA_IRQHandler+0xca0>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d013      	beq.n	8005b7a <HAL_DMA_IRQHandler+0xb12>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a6d      	ldr	r2, [pc, #436]	@ (8005d0c <HAL_DMA_IRQHandler+0xca4>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d00e      	beq.n	8005b7a <HAL_DMA_IRQHandler+0xb12>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a6b      	ldr	r2, [pc, #428]	@ (8005d10 <HAL_DMA_IRQHandler+0xca8>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d009      	beq.n	8005b7a <HAL_DMA_IRQHandler+0xb12>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a6a      	ldr	r2, [pc, #424]	@ (8005d14 <HAL_DMA_IRQHandler+0xcac>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d004      	beq.n	8005b7a <HAL_DMA_IRQHandler+0xb12>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a68      	ldr	r2, [pc, #416]	@ (8005d18 <HAL_DMA_IRQHandler+0xcb0>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d108      	bne.n	8005b8c <HAL_DMA_IRQHandler+0xb24>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	681a      	ldr	r2, [r3, #0]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f022 0208 	bic.w	r2, r2, #8
 8005b88:	601a      	str	r2, [r3, #0]
 8005b8a:	e007      	b.n	8005b9c <HAL_DMA_IRQHandler+0xb34>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	681a      	ldr	r2, [r3, #0]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f022 0204 	bic.w	r2, r2, #4
 8005b9a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	f000 8165 	beq.w	8005e70 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005bae:	e15f      	b.n	8005e70 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bb4:	f003 031f 	and.w	r3, r3, #31
 8005bb8:	2202      	movs	r2, #2
 8005bba:	409a      	lsls	r2, r3
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	4013      	ands	r3, r2
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	f000 80c5 	beq.w	8005d50 <HAL_DMA_IRQHandler+0xce8>
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	f003 0302 	and.w	r3, r3, #2
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	f000 80bf 	beq.w	8005d50 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bd6:	f003 031f 	and.w	r3, r3, #31
 8005bda:	2202      	movs	r2, #2
 8005bdc:	409a      	lsls	r2, r3
 8005bde:	69fb      	ldr	r3, [r7, #28]
 8005be0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d018      	beq.n	8005c1e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d109      	bne.n	8005c0a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	f000 813a 	beq.w	8005e74 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005c08:	e134      	b.n	8005e74 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	f000 8130 	beq.w	8005e74 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005c1c:	e12a      	b.n	8005e74 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	f003 0320 	and.w	r3, r3, #32
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	f040 8089 	bne.w	8005d3c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a2b      	ldr	r2, [pc, #172]	@ (8005cdc <HAL_DMA_IRQHandler+0xc74>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d04a      	beq.n	8005cca <HAL_DMA_IRQHandler+0xc62>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a29      	ldr	r2, [pc, #164]	@ (8005ce0 <HAL_DMA_IRQHandler+0xc78>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d045      	beq.n	8005cca <HAL_DMA_IRQHandler+0xc62>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a28      	ldr	r2, [pc, #160]	@ (8005ce4 <HAL_DMA_IRQHandler+0xc7c>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d040      	beq.n	8005cca <HAL_DMA_IRQHandler+0xc62>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a26      	ldr	r2, [pc, #152]	@ (8005ce8 <HAL_DMA_IRQHandler+0xc80>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d03b      	beq.n	8005cca <HAL_DMA_IRQHandler+0xc62>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a25      	ldr	r2, [pc, #148]	@ (8005cec <HAL_DMA_IRQHandler+0xc84>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d036      	beq.n	8005cca <HAL_DMA_IRQHandler+0xc62>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a23      	ldr	r2, [pc, #140]	@ (8005cf0 <HAL_DMA_IRQHandler+0xc88>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d031      	beq.n	8005cca <HAL_DMA_IRQHandler+0xc62>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a22      	ldr	r2, [pc, #136]	@ (8005cf4 <HAL_DMA_IRQHandler+0xc8c>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d02c      	beq.n	8005cca <HAL_DMA_IRQHandler+0xc62>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a20      	ldr	r2, [pc, #128]	@ (8005cf8 <HAL_DMA_IRQHandler+0xc90>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d027      	beq.n	8005cca <HAL_DMA_IRQHandler+0xc62>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a1f      	ldr	r2, [pc, #124]	@ (8005cfc <HAL_DMA_IRQHandler+0xc94>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d022      	beq.n	8005cca <HAL_DMA_IRQHandler+0xc62>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a1d      	ldr	r2, [pc, #116]	@ (8005d00 <HAL_DMA_IRQHandler+0xc98>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d01d      	beq.n	8005cca <HAL_DMA_IRQHandler+0xc62>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a1c      	ldr	r2, [pc, #112]	@ (8005d04 <HAL_DMA_IRQHandler+0xc9c>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d018      	beq.n	8005cca <HAL_DMA_IRQHandler+0xc62>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a1a      	ldr	r2, [pc, #104]	@ (8005d08 <HAL_DMA_IRQHandler+0xca0>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d013      	beq.n	8005cca <HAL_DMA_IRQHandler+0xc62>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a19      	ldr	r2, [pc, #100]	@ (8005d0c <HAL_DMA_IRQHandler+0xca4>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d00e      	beq.n	8005cca <HAL_DMA_IRQHandler+0xc62>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a17      	ldr	r2, [pc, #92]	@ (8005d10 <HAL_DMA_IRQHandler+0xca8>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d009      	beq.n	8005cca <HAL_DMA_IRQHandler+0xc62>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a16      	ldr	r2, [pc, #88]	@ (8005d14 <HAL_DMA_IRQHandler+0xcac>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d004      	beq.n	8005cca <HAL_DMA_IRQHandler+0xc62>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a14      	ldr	r2, [pc, #80]	@ (8005d18 <HAL_DMA_IRQHandler+0xcb0>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d128      	bne.n	8005d1c <HAL_DMA_IRQHandler+0xcb4>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	681a      	ldr	r2, [r3, #0]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f022 0214 	bic.w	r2, r2, #20
 8005cd8:	601a      	str	r2, [r3, #0]
 8005cda:	e027      	b.n	8005d2c <HAL_DMA_IRQHandler+0xcc4>
 8005cdc:	40020010 	.word	0x40020010
 8005ce0:	40020028 	.word	0x40020028
 8005ce4:	40020040 	.word	0x40020040
 8005ce8:	40020058 	.word	0x40020058
 8005cec:	40020070 	.word	0x40020070
 8005cf0:	40020088 	.word	0x40020088
 8005cf4:	400200a0 	.word	0x400200a0
 8005cf8:	400200b8 	.word	0x400200b8
 8005cfc:	40020410 	.word	0x40020410
 8005d00:	40020428 	.word	0x40020428
 8005d04:	40020440 	.word	0x40020440
 8005d08:	40020458 	.word	0x40020458
 8005d0c:	40020470 	.word	0x40020470
 8005d10:	40020488 	.word	0x40020488
 8005d14:	400204a0 	.word	0x400204a0
 8005d18:	400204b8 	.word	0x400204b8
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	681a      	ldr	r2, [r3, #0]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f022 020a 	bic.w	r2, r2, #10
 8005d2a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2200      	movs	r2, #0
 8005d38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	f000 8097 	beq.w	8005e74 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005d4e:	e091      	b.n	8005e74 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d54:	f003 031f 	and.w	r3, r3, #31
 8005d58:	2208      	movs	r2, #8
 8005d5a:	409a      	lsls	r2, r3
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	4013      	ands	r3, r2
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	f000 8088 	beq.w	8005e76 <HAL_DMA_IRQHandler+0xe0e>
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	f003 0308 	and.w	r3, r3, #8
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	f000 8082 	beq.w	8005e76 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a41      	ldr	r2, [pc, #260]	@ (8005e7c <HAL_DMA_IRQHandler+0xe14>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d04a      	beq.n	8005e12 <HAL_DMA_IRQHandler+0xdaa>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a3f      	ldr	r2, [pc, #252]	@ (8005e80 <HAL_DMA_IRQHandler+0xe18>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d045      	beq.n	8005e12 <HAL_DMA_IRQHandler+0xdaa>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a3e      	ldr	r2, [pc, #248]	@ (8005e84 <HAL_DMA_IRQHandler+0xe1c>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d040      	beq.n	8005e12 <HAL_DMA_IRQHandler+0xdaa>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a3c      	ldr	r2, [pc, #240]	@ (8005e88 <HAL_DMA_IRQHandler+0xe20>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d03b      	beq.n	8005e12 <HAL_DMA_IRQHandler+0xdaa>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a3b      	ldr	r2, [pc, #236]	@ (8005e8c <HAL_DMA_IRQHandler+0xe24>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d036      	beq.n	8005e12 <HAL_DMA_IRQHandler+0xdaa>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a39      	ldr	r2, [pc, #228]	@ (8005e90 <HAL_DMA_IRQHandler+0xe28>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d031      	beq.n	8005e12 <HAL_DMA_IRQHandler+0xdaa>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a38      	ldr	r2, [pc, #224]	@ (8005e94 <HAL_DMA_IRQHandler+0xe2c>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d02c      	beq.n	8005e12 <HAL_DMA_IRQHandler+0xdaa>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a36      	ldr	r2, [pc, #216]	@ (8005e98 <HAL_DMA_IRQHandler+0xe30>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d027      	beq.n	8005e12 <HAL_DMA_IRQHandler+0xdaa>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a35      	ldr	r2, [pc, #212]	@ (8005e9c <HAL_DMA_IRQHandler+0xe34>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d022      	beq.n	8005e12 <HAL_DMA_IRQHandler+0xdaa>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a33      	ldr	r2, [pc, #204]	@ (8005ea0 <HAL_DMA_IRQHandler+0xe38>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d01d      	beq.n	8005e12 <HAL_DMA_IRQHandler+0xdaa>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a32      	ldr	r2, [pc, #200]	@ (8005ea4 <HAL_DMA_IRQHandler+0xe3c>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d018      	beq.n	8005e12 <HAL_DMA_IRQHandler+0xdaa>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a30      	ldr	r2, [pc, #192]	@ (8005ea8 <HAL_DMA_IRQHandler+0xe40>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d013      	beq.n	8005e12 <HAL_DMA_IRQHandler+0xdaa>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a2f      	ldr	r2, [pc, #188]	@ (8005eac <HAL_DMA_IRQHandler+0xe44>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d00e      	beq.n	8005e12 <HAL_DMA_IRQHandler+0xdaa>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a2d      	ldr	r2, [pc, #180]	@ (8005eb0 <HAL_DMA_IRQHandler+0xe48>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d009      	beq.n	8005e12 <HAL_DMA_IRQHandler+0xdaa>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a2c      	ldr	r2, [pc, #176]	@ (8005eb4 <HAL_DMA_IRQHandler+0xe4c>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d004      	beq.n	8005e12 <HAL_DMA_IRQHandler+0xdaa>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a2a      	ldr	r2, [pc, #168]	@ (8005eb8 <HAL_DMA_IRQHandler+0xe50>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d108      	bne.n	8005e24 <HAL_DMA_IRQHandler+0xdbc>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f022 021c 	bic.w	r2, r2, #28
 8005e20:	601a      	str	r2, [r3, #0]
 8005e22:	e007      	b.n	8005e34 <HAL_DMA_IRQHandler+0xdcc>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	681a      	ldr	r2, [r3, #0]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f022 020e 	bic.w	r2, r2, #14
 8005e32:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e38:	f003 031f 	and.w	r3, r3, #31
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	409a      	lsls	r2, r3
 8005e40:	69fb      	ldr	r3, [r7, #28]
 8005e42:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2201      	movs	r2, #1
 8005e48:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2200      	movs	r2, #0
 8005e56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d009      	beq.n	8005e76 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	4798      	blx	r3
 8005e6a:	e004      	b.n	8005e76 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005e6c:	bf00      	nop
 8005e6e:	e002      	b.n	8005e76 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005e70:	bf00      	nop
 8005e72:	e000      	b.n	8005e76 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005e74:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005e76:	3728      	adds	r7, #40	@ 0x28
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}
 8005e7c:	40020010 	.word	0x40020010
 8005e80:	40020028 	.word	0x40020028
 8005e84:	40020040 	.word	0x40020040
 8005e88:	40020058 	.word	0x40020058
 8005e8c:	40020070 	.word	0x40020070
 8005e90:	40020088 	.word	0x40020088
 8005e94:	400200a0 	.word	0x400200a0
 8005e98:	400200b8 	.word	0x400200b8
 8005e9c:	40020410 	.word	0x40020410
 8005ea0:	40020428 	.word	0x40020428
 8005ea4:	40020440 	.word	0x40020440
 8005ea8:	40020458 	.word	0x40020458
 8005eac:	40020470 	.word	0x40020470
 8005eb0:	40020488 	.word	0x40020488
 8005eb4:	400204a0 	.word	0x400204a0
 8005eb8:	400204b8 	.word	0x400204b8

08005ebc <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b083      	sub	sp, #12
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005eca:	b2db      	uxtb	r3, r3
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	370c      	adds	r7, #12
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr

08005ed8 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b083      	sub	sp, #12
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	370c      	adds	r7, #12
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr

08005ef0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b087      	sub	sp, #28
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	60f8      	str	r0, [r7, #12]
 8005ef8:	60b9      	str	r1, [r7, #8]
 8005efa:	607a      	str	r2, [r7, #4]
 8005efc:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f02:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f08:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a7f      	ldr	r2, [pc, #508]	@ (800610c <DMA_SetConfig+0x21c>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d072      	beq.n	8005ffa <DMA_SetConfig+0x10a>
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a7d      	ldr	r2, [pc, #500]	@ (8006110 <DMA_SetConfig+0x220>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d06d      	beq.n	8005ffa <DMA_SetConfig+0x10a>
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a7c      	ldr	r2, [pc, #496]	@ (8006114 <DMA_SetConfig+0x224>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d068      	beq.n	8005ffa <DMA_SetConfig+0x10a>
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a7a      	ldr	r2, [pc, #488]	@ (8006118 <DMA_SetConfig+0x228>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d063      	beq.n	8005ffa <DMA_SetConfig+0x10a>
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a79      	ldr	r2, [pc, #484]	@ (800611c <DMA_SetConfig+0x22c>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d05e      	beq.n	8005ffa <DMA_SetConfig+0x10a>
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a77      	ldr	r2, [pc, #476]	@ (8006120 <DMA_SetConfig+0x230>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d059      	beq.n	8005ffa <DMA_SetConfig+0x10a>
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a76      	ldr	r2, [pc, #472]	@ (8006124 <DMA_SetConfig+0x234>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d054      	beq.n	8005ffa <DMA_SetConfig+0x10a>
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a74      	ldr	r2, [pc, #464]	@ (8006128 <DMA_SetConfig+0x238>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d04f      	beq.n	8005ffa <DMA_SetConfig+0x10a>
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a73      	ldr	r2, [pc, #460]	@ (800612c <DMA_SetConfig+0x23c>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d04a      	beq.n	8005ffa <DMA_SetConfig+0x10a>
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a71      	ldr	r2, [pc, #452]	@ (8006130 <DMA_SetConfig+0x240>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d045      	beq.n	8005ffa <DMA_SetConfig+0x10a>
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a70      	ldr	r2, [pc, #448]	@ (8006134 <DMA_SetConfig+0x244>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d040      	beq.n	8005ffa <DMA_SetConfig+0x10a>
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a6e      	ldr	r2, [pc, #440]	@ (8006138 <DMA_SetConfig+0x248>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d03b      	beq.n	8005ffa <DMA_SetConfig+0x10a>
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a6d      	ldr	r2, [pc, #436]	@ (800613c <DMA_SetConfig+0x24c>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d036      	beq.n	8005ffa <DMA_SetConfig+0x10a>
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a6b      	ldr	r2, [pc, #428]	@ (8006140 <DMA_SetConfig+0x250>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d031      	beq.n	8005ffa <DMA_SetConfig+0x10a>
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a6a      	ldr	r2, [pc, #424]	@ (8006144 <DMA_SetConfig+0x254>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d02c      	beq.n	8005ffa <DMA_SetConfig+0x10a>
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a68      	ldr	r2, [pc, #416]	@ (8006148 <DMA_SetConfig+0x258>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d027      	beq.n	8005ffa <DMA_SetConfig+0x10a>
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a67      	ldr	r2, [pc, #412]	@ (800614c <DMA_SetConfig+0x25c>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d022      	beq.n	8005ffa <DMA_SetConfig+0x10a>
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a65      	ldr	r2, [pc, #404]	@ (8006150 <DMA_SetConfig+0x260>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d01d      	beq.n	8005ffa <DMA_SetConfig+0x10a>
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a64      	ldr	r2, [pc, #400]	@ (8006154 <DMA_SetConfig+0x264>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d018      	beq.n	8005ffa <DMA_SetConfig+0x10a>
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a62      	ldr	r2, [pc, #392]	@ (8006158 <DMA_SetConfig+0x268>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d013      	beq.n	8005ffa <DMA_SetConfig+0x10a>
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a61      	ldr	r2, [pc, #388]	@ (800615c <DMA_SetConfig+0x26c>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d00e      	beq.n	8005ffa <DMA_SetConfig+0x10a>
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a5f      	ldr	r2, [pc, #380]	@ (8006160 <DMA_SetConfig+0x270>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d009      	beq.n	8005ffa <DMA_SetConfig+0x10a>
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a5e      	ldr	r2, [pc, #376]	@ (8006164 <DMA_SetConfig+0x274>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d004      	beq.n	8005ffa <DMA_SetConfig+0x10a>
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a5c      	ldr	r2, [pc, #368]	@ (8006168 <DMA_SetConfig+0x278>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d101      	bne.n	8005ffe <DMA_SetConfig+0x10e>
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	e000      	b.n	8006000 <DMA_SetConfig+0x110>
 8005ffe:	2300      	movs	r3, #0
 8006000:	2b00      	cmp	r3, #0
 8006002:	d00d      	beq.n	8006020 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006008:	68fa      	ldr	r2, [r7, #12]
 800600a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800600c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006012:	2b00      	cmp	r3, #0
 8006014:	d004      	beq.n	8006020 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800601a:	68fa      	ldr	r2, [r7, #12]
 800601c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800601e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a39      	ldr	r2, [pc, #228]	@ (800610c <DMA_SetConfig+0x21c>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d04a      	beq.n	80060c0 <DMA_SetConfig+0x1d0>
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a38      	ldr	r2, [pc, #224]	@ (8006110 <DMA_SetConfig+0x220>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d045      	beq.n	80060c0 <DMA_SetConfig+0x1d0>
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a36      	ldr	r2, [pc, #216]	@ (8006114 <DMA_SetConfig+0x224>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d040      	beq.n	80060c0 <DMA_SetConfig+0x1d0>
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a35      	ldr	r2, [pc, #212]	@ (8006118 <DMA_SetConfig+0x228>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d03b      	beq.n	80060c0 <DMA_SetConfig+0x1d0>
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a33      	ldr	r2, [pc, #204]	@ (800611c <DMA_SetConfig+0x22c>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d036      	beq.n	80060c0 <DMA_SetConfig+0x1d0>
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a32      	ldr	r2, [pc, #200]	@ (8006120 <DMA_SetConfig+0x230>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d031      	beq.n	80060c0 <DMA_SetConfig+0x1d0>
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a30      	ldr	r2, [pc, #192]	@ (8006124 <DMA_SetConfig+0x234>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d02c      	beq.n	80060c0 <DMA_SetConfig+0x1d0>
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a2f      	ldr	r2, [pc, #188]	@ (8006128 <DMA_SetConfig+0x238>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d027      	beq.n	80060c0 <DMA_SetConfig+0x1d0>
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a2d      	ldr	r2, [pc, #180]	@ (800612c <DMA_SetConfig+0x23c>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d022      	beq.n	80060c0 <DMA_SetConfig+0x1d0>
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a2c      	ldr	r2, [pc, #176]	@ (8006130 <DMA_SetConfig+0x240>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d01d      	beq.n	80060c0 <DMA_SetConfig+0x1d0>
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a2a      	ldr	r2, [pc, #168]	@ (8006134 <DMA_SetConfig+0x244>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d018      	beq.n	80060c0 <DMA_SetConfig+0x1d0>
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a29      	ldr	r2, [pc, #164]	@ (8006138 <DMA_SetConfig+0x248>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d013      	beq.n	80060c0 <DMA_SetConfig+0x1d0>
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a27      	ldr	r2, [pc, #156]	@ (800613c <DMA_SetConfig+0x24c>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d00e      	beq.n	80060c0 <DMA_SetConfig+0x1d0>
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a26      	ldr	r2, [pc, #152]	@ (8006140 <DMA_SetConfig+0x250>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d009      	beq.n	80060c0 <DMA_SetConfig+0x1d0>
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a24      	ldr	r2, [pc, #144]	@ (8006144 <DMA_SetConfig+0x254>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d004      	beq.n	80060c0 <DMA_SetConfig+0x1d0>
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a23      	ldr	r2, [pc, #140]	@ (8006148 <DMA_SetConfig+0x258>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d101      	bne.n	80060c4 <DMA_SetConfig+0x1d4>
 80060c0:	2301      	movs	r3, #1
 80060c2:	e000      	b.n	80060c6 <DMA_SetConfig+0x1d6>
 80060c4:	2300      	movs	r3, #0
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d059      	beq.n	800617e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060ce:	f003 031f 	and.w	r3, r3, #31
 80060d2:	223f      	movs	r2, #63	@ 0x3f
 80060d4:	409a      	lsls	r2, r3
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	681a      	ldr	r2, [r3, #0]
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80060e8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	683a      	ldr	r2, [r7, #0]
 80060f0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	689b      	ldr	r3, [r3, #8]
 80060f6:	2b40      	cmp	r3, #64	@ 0x40
 80060f8:	d138      	bne.n	800616c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	687a      	ldr	r2, [r7, #4]
 8006100:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	68ba      	ldr	r2, [r7, #8]
 8006108:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800610a:	e086      	b.n	800621a <DMA_SetConfig+0x32a>
 800610c:	40020010 	.word	0x40020010
 8006110:	40020028 	.word	0x40020028
 8006114:	40020040 	.word	0x40020040
 8006118:	40020058 	.word	0x40020058
 800611c:	40020070 	.word	0x40020070
 8006120:	40020088 	.word	0x40020088
 8006124:	400200a0 	.word	0x400200a0
 8006128:	400200b8 	.word	0x400200b8
 800612c:	40020410 	.word	0x40020410
 8006130:	40020428 	.word	0x40020428
 8006134:	40020440 	.word	0x40020440
 8006138:	40020458 	.word	0x40020458
 800613c:	40020470 	.word	0x40020470
 8006140:	40020488 	.word	0x40020488
 8006144:	400204a0 	.word	0x400204a0
 8006148:	400204b8 	.word	0x400204b8
 800614c:	58025408 	.word	0x58025408
 8006150:	5802541c 	.word	0x5802541c
 8006154:	58025430 	.word	0x58025430
 8006158:	58025444 	.word	0x58025444
 800615c:	58025458 	.word	0x58025458
 8006160:	5802546c 	.word	0x5802546c
 8006164:	58025480 	.word	0x58025480
 8006168:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	68ba      	ldr	r2, [r7, #8]
 8006172:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	687a      	ldr	r2, [r7, #4]
 800617a:	60da      	str	r2, [r3, #12]
}
 800617c:	e04d      	b.n	800621a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a29      	ldr	r2, [pc, #164]	@ (8006228 <DMA_SetConfig+0x338>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d022      	beq.n	80061ce <DMA_SetConfig+0x2de>
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a27      	ldr	r2, [pc, #156]	@ (800622c <DMA_SetConfig+0x33c>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d01d      	beq.n	80061ce <DMA_SetConfig+0x2de>
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a26      	ldr	r2, [pc, #152]	@ (8006230 <DMA_SetConfig+0x340>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d018      	beq.n	80061ce <DMA_SetConfig+0x2de>
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a24      	ldr	r2, [pc, #144]	@ (8006234 <DMA_SetConfig+0x344>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d013      	beq.n	80061ce <DMA_SetConfig+0x2de>
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a23      	ldr	r2, [pc, #140]	@ (8006238 <DMA_SetConfig+0x348>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d00e      	beq.n	80061ce <DMA_SetConfig+0x2de>
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a21      	ldr	r2, [pc, #132]	@ (800623c <DMA_SetConfig+0x34c>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d009      	beq.n	80061ce <DMA_SetConfig+0x2de>
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a20      	ldr	r2, [pc, #128]	@ (8006240 <DMA_SetConfig+0x350>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d004      	beq.n	80061ce <DMA_SetConfig+0x2de>
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a1e      	ldr	r2, [pc, #120]	@ (8006244 <DMA_SetConfig+0x354>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d101      	bne.n	80061d2 <DMA_SetConfig+0x2e2>
 80061ce:	2301      	movs	r3, #1
 80061d0:	e000      	b.n	80061d4 <DMA_SetConfig+0x2e4>
 80061d2:	2300      	movs	r3, #0
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d020      	beq.n	800621a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061dc:	f003 031f 	and.w	r3, r3, #31
 80061e0:	2201      	movs	r2, #1
 80061e2:	409a      	lsls	r2, r3
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	683a      	ldr	r2, [r7, #0]
 80061ee:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	2b40      	cmp	r3, #64	@ 0x40
 80061f6:	d108      	bne.n	800620a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	687a      	ldr	r2, [r7, #4]
 80061fe:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	68ba      	ldr	r2, [r7, #8]
 8006206:	60da      	str	r2, [r3, #12]
}
 8006208:	e007      	b.n	800621a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	68ba      	ldr	r2, [r7, #8]
 8006210:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	687a      	ldr	r2, [r7, #4]
 8006218:	60da      	str	r2, [r3, #12]
}
 800621a:	bf00      	nop
 800621c:	371c      	adds	r7, #28
 800621e:	46bd      	mov	sp, r7
 8006220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006224:	4770      	bx	lr
 8006226:	bf00      	nop
 8006228:	58025408 	.word	0x58025408
 800622c:	5802541c 	.word	0x5802541c
 8006230:	58025430 	.word	0x58025430
 8006234:	58025444 	.word	0x58025444
 8006238:	58025458 	.word	0x58025458
 800623c:	5802546c 	.word	0x5802546c
 8006240:	58025480 	.word	0x58025480
 8006244:	58025494 	.word	0x58025494

08006248 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006248:	b480      	push	{r7}
 800624a:	b085      	sub	sp, #20
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a42      	ldr	r2, [pc, #264]	@ (8006360 <DMA_CalcBaseAndBitshift+0x118>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d04a      	beq.n	80062f0 <DMA_CalcBaseAndBitshift+0xa8>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a41      	ldr	r2, [pc, #260]	@ (8006364 <DMA_CalcBaseAndBitshift+0x11c>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d045      	beq.n	80062f0 <DMA_CalcBaseAndBitshift+0xa8>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a3f      	ldr	r2, [pc, #252]	@ (8006368 <DMA_CalcBaseAndBitshift+0x120>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d040      	beq.n	80062f0 <DMA_CalcBaseAndBitshift+0xa8>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a3e      	ldr	r2, [pc, #248]	@ (800636c <DMA_CalcBaseAndBitshift+0x124>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d03b      	beq.n	80062f0 <DMA_CalcBaseAndBitshift+0xa8>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a3c      	ldr	r2, [pc, #240]	@ (8006370 <DMA_CalcBaseAndBitshift+0x128>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d036      	beq.n	80062f0 <DMA_CalcBaseAndBitshift+0xa8>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a3b      	ldr	r2, [pc, #236]	@ (8006374 <DMA_CalcBaseAndBitshift+0x12c>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d031      	beq.n	80062f0 <DMA_CalcBaseAndBitshift+0xa8>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a39      	ldr	r2, [pc, #228]	@ (8006378 <DMA_CalcBaseAndBitshift+0x130>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d02c      	beq.n	80062f0 <DMA_CalcBaseAndBitshift+0xa8>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a38      	ldr	r2, [pc, #224]	@ (800637c <DMA_CalcBaseAndBitshift+0x134>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d027      	beq.n	80062f0 <DMA_CalcBaseAndBitshift+0xa8>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a36      	ldr	r2, [pc, #216]	@ (8006380 <DMA_CalcBaseAndBitshift+0x138>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d022      	beq.n	80062f0 <DMA_CalcBaseAndBitshift+0xa8>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a35      	ldr	r2, [pc, #212]	@ (8006384 <DMA_CalcBaseAndBitshift+0x13c>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d01d      	beq.n	80062f0 <DMA_CalcBaseAndBitshift+0xa8>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a33      	ldr	r2, [pc, #204]	@ (8006388 <DMA_CalcBaseAndBitshift+0x140>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d018      	beq.n	80062f0 <DMA_CalcBaseAndBitshift+0xa8>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a32      	ldr	r2, [pc, #200]	@ (800638c <DMA_CalcBaseAndBitshift+0x144>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d013      	beq.n	80062f0 <DMA_CalcBaseAndBitshift+0xa8>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a30      	ldr	r2, [pc, #192]	@ (8006390 <DMA_CalcBaseAndBitshift+0x148>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d00e      	beq.n	80062f0 <DMA_CalcBaseAndBitshift+0xa8>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a2f      	ldr	r2, [pc, #188]	@ (8006394 <DMA_CalcBaseAndBitshift+0x14c>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d009      	beq.n	80062f0 <DMA_CalcBaseAndBitshift+0xa8>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a2d      	ldr	r2, [pc, #180]	@ (8006398 <DMA_CalcBaseAndBitshift+0x150>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d004      	beq.n	80062f0 <DMA_CalcBaseAndBitshift+0xa8>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a2c      	ldr	r2, [pc, #176]	@ (800639c <DMA_CalcBaseAndBitshift+0x154>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d101      	bne.n	80062f4 <DMA_CalcBaseAndBitshift+0xac>
 80062f0:	2301      	movs	r3, #1
 80062f2:	e000      	b.n	80062f6 <DMA_CalcBaseAndBitshift+0xae>
 80062f4:	2300      	movs	r3, #0
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d024      	beq.n	8006344 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	b2db      	uxtb	r3, r3
 8006300:	3b10      	subs	r3, #16
 8006302:	4a27      	ldr	r2, [pc, #156]	@ (80063a0 <DMA_CalcBaseAndBitshift+0x158>)
 8006304:	fba2 2303 	umull	r2, r3, r2, r3
 8006308:	091b      	lsrs	r3, r3, #4
 800630a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f003 0307 	and.w	r3, r3, #7
 8006312:	4a24      	ldr	r2, [pc, #144]	@ (80063a4 <DMA_CalcBaseAndBitshift+0x15c>)
 8006314:	5cd3      	ldrb	r3, [r2, r3]
 8006316:	461a      	mov	r2, r3
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2b03      	cmp	r3, #3
 8006320:	d908      	bls.n	8006334 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	461a      	mov	r2, r3
 8006328:	4b1f      	ldr	r3, [pc, #124]	@ (80063a8 <DMA_CalcBaseAndBitshift+0x160>)
 800632a:	4013      	ands	r3, r2
 800632c:	1d1a      	adds	r2, r3, #4
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	659a      	str	r2, [r3, #88]	@ 0x58
 8006332:	e00d      	b.n	8006350 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	461a      	mov	r2, r3
 800633a:	4b1b      	ldr	r3, [pc, #108]	@ (80063a8 <DMA_CalcBaseAndBitshift+0x160>)
 800633c:	4013      	ands	r3, r2
 800633e:	687a      	ldr	r2, [r7, #4]
 8006340:	6593      	str	r3, [r2, #88]	@ 0x58
 8006342:	e005      	b.n	8006350 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8006354:	4618      	mov	r0, r3
 8006356:	3714      	adds	r7, #20
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr
 8006360:	40020010 	.word	0x40020010
 8006364:	40020028 	.word	0x40020028
 8006368:	40020040 	.word	0x40020040
 800636c:	40020058 	.word	0x40020058
 8006370:	40020070 	.word	0x40020070
 8006374:	40020088 	.word	0x40020088
 8006378:	400200a0 	.word	0x400200a0
 800637c:	400200b8 	.word	0x400200b8
 8006380:	40020410 	.word	0x40020410
 8006384:	40020428 	.word	0x40020428
 8006388:	40020440 	.word	0x40020440
 800638c:	40020458 	.word	0x40020458
 8006390:	40020470 	.word	0x40020470
 8006394:	40020488 	.word	0x40020488
 8006398:	400204a0 	.word	0x400204a0
 800639c:	400204b8 	.word	0x400204b8
 80063a0:	aaaaaaab 	.word	0xaaaaaaab
 80063a4:	080125b8 	.word	0x080125b8
 80063a8:	fffffc00 	.word	0xfffffc00

080063ac <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b085      	sub	sp, #20
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80063b4:	2300      	movs	r3, #0
 80063b6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	699b      	ldr	r3, [r3, #24]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d120      	bne.n	8006402 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063c4:	2b03      	cmp	r3, #3
 80063c6:	d858      	bhi.n	800647a <DMA_CheckFifoParam+0xce>
 80063c8:	a201      	add	r2, pc, #4	@ (adr r2, 80063d0 <DMA_CheckFifoParam+0x24>)
 80063ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063ce:	bf00      	nop
 80063d0:	080063e1 	.word	0x080063e1
 80063d4:	080063f3 	.word	0x080063f3
 80063d8:	080063e1 	.word	0x080063e1
 80063dc:	0800647b 	.word	0x0800647b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063e4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d048      	beq.n	800647e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80063ec:	2301      	movs	r3, #1
 80063ee:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80063f0:	e045      	b.n	800647e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063f6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80063fa:	d142      	bne.n	8006482 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80063fc:	2301      	movs	r3, #1
 80063fe:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006400:	e03f      	b.n	8006482 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	699b      	ldr	r3, [r3, #24]
 8006406:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800640a:	d123      	bne.n	8006454 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006410:	2b03      	cmp	r3, #3
 8006412:	d838      	bhi.n	8006486 <DMA_CheckFifoParam+0xda>
 8006414:	a201      	add	r2, pc, #4	@ (adr r2, 800641c <DMA_CheckFifoParam+0x70>)
 8006416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800641a:	bf00      	nop
 800641c:	0800642d 	.word	0x0800642d
 8006420:	08006433 	.word	0x08006433
 8006424:	0800642d 	.word	0x0800642d
 8006428:	08006445 	.word	0x08006445
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800642c:	2301      	movs	r3, #1
 800642e:	73fb      	strb	r3, [r7, #15]
        break;
 8006430:	e030      	b.n	8006494 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006436:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800643a:	2b00      	cmp	r3, #0
 800643c:	d025      	beq.n	800648a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800643e:	2301      	movs	r3, #1
 8006440:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006442:	e022      	b.n	800648a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006448:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800644c:	d11f      	bne.n	800648e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800644e:	2301      	movs	r3, #1
 8006450:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006452:	e01c      	b.n	800648e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006458:	2b02      	cmp	r3, #2
 800645a:	d902      	bls.n	8006462 <DMA_CheckFifoParam+0xb6>
 800645c:	2b03      	cmp	r3, #3
 800645e:	d003      	beq.n	8006468 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006460:	e018      	b.n	8006494 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8006462:	2301      	movs	r3, #1
 8006464:	73fb      	strb	r3, [r7, #15]
        break;
 8006466:	e015      	b.n	8006494 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800646c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006470:	2b00      	cmp	r3, #0
 8006472:	d00e      	beq.n	8006492 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006474:	2301      	movs	r3, #1
 8006476:	73fb      	strb	r3, [r7, #15]
    break;
 8006478:	e00b      	b.n	8006492 <DMA_CheckFifoParam+0xe6>
        break;
 800647a:	bf00      	nop
 800647c:	e00a      	b.n	8006494 <DMA_CheckFifoParam+0xe8>
        break;
 800647e:	bf00      	nop
 8006480:	e008      	b.n	8006494 <DMA_CheckFifoParam+0xe8>
        break;
 8006482:	bf00      	nop
 8006484:	e006      	b.n	8006494 <DMA_CheckFifoParam+0xe8>
        break;
 8006486:	bf00      	nop
 8006488:	e004      	b.n	8006494 <DMA_CheckFifoParam+0xe8>
        break;
 800648a:	bf00      	nop
 800648c:	e002      	b.n	8006494 <DMA_CheckFifoParam+0xe8>
        break;
 800648e:	bf00      	nop
 8006490:	e000      	b.n	8006494 <DMA_CheckFifoParam+0xe8>
    break;
 8006492:	bf00      	nop
    }
  }

  return status;
 8006494:	7bfb      	ldrb	r3, [r7, #15]
}
 8006496:	4618      	mov	r0, r3
 8006498:	3714      	adds	r7, #20
 800649a:	46bd      	mov	sp, r7
 800649c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a0:	4770      	bx	lr
 80064a2:	bf00      	nop

080064a4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b085      	sub	sp, #20
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a38      	ldr	r2, [pc, #224]	@ (8006598 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d022      	beq.n	8006502 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a36      	ldr	r2, [pc, #216]	@ (800659c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d01d      	beq.n	8006502 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a35      	ldr	r2, [pc, #212]	@ (80065a0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d018      	beq.n	8006502 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a33      	ldr	r2, [pc, #204]	@ (80065a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d013      	beq.n	8006502 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a32      	ldr	r2, [pc, #200]	@ (80065a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d00e      	beq.n	8006502 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a30      	ldr	r2, [pc, #192]	@ (80065ac <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d009      	beq.n	8006502 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a2f      	ldr	r2, [pc, #188]	@ (80065b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d004      	beq.n	8006502 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a2d      	ldr	r2, [pc, #180]	@ (80065b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d101      	bne.n	8006506 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8006502:	2301      	movs	r3, #1
 8006504:	e000      	b.n	8006508 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8006506:	2300      	movs	r3, #0
 8006508:	2b00      	cmp	r3, #0
 800650a:	d01a      	beq.n	8006542 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	b2db      	uxtb	r3, r3
 8006512:	3b08      	subs	r3, #8
 8006514:	4a28      	ldr	r2, [pc, #160]	@ (80065b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8006516:	fba2 2303 	umull	r2, r3, r2, r3
 800651a:	091b      	lsrs	r3, r3, #4
 800651c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800651e:	68fa      	ldr	r2, [r7, #12]
 8006520:	4b26      	ldr	r3, [pc, #152]	@ (80065bc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8006522:	4413      	add	r3, r2
 8006524:	009b      	lsls	r3, r3, #2
 8006526:	461a      	mov	r2, r3
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	4a24      	ldr	r2, [pc, #144]	@ (80065c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006530:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	f003 031f 	and.w	r3, r3, #31
 8006538:	2201      	movs	r2, #1
 800653a:	409a      	lsls	r2, r3
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006540:	e024      	b.n	800658c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	b2db      	uxtb	r3, r3
 8006548:	3b10      	subs	r3, #16
 800654a:	4a1e      	ldr	r2, [pc, #120]	@ (80065c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800654c:	fba2 2303 	umull	r2, r3, r2, r3
 8006550:	091b      	lsrs	r3, r3, #4
 8006552:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	4a1c      	ldr	r2, [pc, #112]	@ (80065c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d806      	bhi.n	800656a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	4a1b      	ldr	r2, [pc, #108]	@ (80065cc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d902      	bls.n	800656a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	3308      	adds	r3, #8
 8006568:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800656a:	68fa      	ldr	r2, [r7, #12]
 800656c:	4b18      	ldr	r3, [pc, #96]	@ (80065d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800656e:	4413      	add	r3, r2
 8006570:	009b      	lsls	r3, r3, #2
 8006572:	461a      	mov	r2, r3
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	4a16      	ldr	r2, [pc, #88]	@ (80065d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800657c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	f003 031f 	and.w	r3, r3, #31
 8006584:	2201      	movs	r2, #1
 8006586:	409a      	lsls	r2, r3
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800658c:	bf00      	nop
 800658e:	3714      	adds	r7, #20
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr
 8006598:	58025408 	.word	0x58025408
 800659c:	5802541c 	.word	0x5802541c
 80065a0:	58025430 	.word	0x58025430
 80065a4:	58025444 	.word	0x58025444
 80065a8:	58025458 	.word	0x58025458
 80065ac:	5802546c 	.word	0x5802546c
 80065b0:	58025480 	.word	0x58025480
 80065b4:	58025494 	.word	0x58025494
 80065b8:	cccccccd 	.word	0xcccccccd
 80065bc:	16009600 	.word	0x16009600
 80065c0:	58025880 	.word	0x58025880
 80065c4:	aaaaaaab 	.word	0xaaaaaaab
 80065c8:	400204b8 	.word	0x400204b8
 80065cc:	4002040f 	.word	0x4002040f
 80065d0:	10008200 	.word	0x10008200
 80065d4:	40020880 	.word	0x40020880

080065d8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80065d8:	b480      	push	{r7}
 80065da:	b085      	sub	sp, #20
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	b2db      	uxtb	r3, r3
 80065e6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d04a      	beq.n	8006684 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2b08      	cmp	r3, #8
 80065f2:	d847      	bhi.n	8006684 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a25      	ldr	r2, [pc, #148]	@ (8006690 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d022      	beq.n	8006644 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a24      	ldr	r2, [pc, #144]	@ (8006694 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d01d      	beq.n	8006644 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a22      	ldr	r2, [pc, #136]	@ (8006698 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d018      	beq.n	8006644 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a21      	ldr	r2, [pc, #132]	@ (800669c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d013      	beq.n	8006644 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a1f      	ldr	r2, [pc, #124]	@ (80066a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d00e      	beq.n	8006644 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a1e      	ldr	r2, [pc, #120]	@ (80066a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d009      	beq.n	8006644 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a1c      	ldr	r2, [pc, #112]	@ (80066a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d004      	beq.n	8006644 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a1b      	ldr	r2, [pc, #108]	@ (80066ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d101      	bne.n	8006648 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006644:	2301      	movs	r3, #1
 8006646:	e000      	b.n	800664a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006648:	2300      	movs	r3, #0
 800664a:	2b00      	cmp	r3, #0
 800664c:	d00a      	beq.n	8006664 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800664e:	68fa      	ldr	r2, [r7, #12]
 8006650:	4b17      	ldr	r3, [pc, #92]	@ (80066b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006652:	4413      	add	r3, r2
 8006654:	009b      	lsls	r3, r3, #2
 8006656:	461a      	mov	r2, r3
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	4a15      	ldr	r2, [pc, #84]	@ (80066b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006660:	671a      	str	r2, [r3, #112]	@ 0x70
 8006662:	e009      	b.n	8006678 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006664:	68fa      	ldr	r2, [r7, #12]
 8006666:	4b14      	ldr	r3, [pc, #80]	@ (80066b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006668:	4413      	add	r3, r2
 800666a:	009b      	lsls	r3, r3, #2
 800666c:	461a      	mov	r2, r3
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	4a11      	ldr	r2, [pc, #68]	@ (80066bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006676:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	3b01      	subs	r3, #1
 800667c:	2201      	movs	r2, #1
 800667e:	409a      	lsls	r2, r3
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8006684:	bf00      	nop
 8006686:	3714      	adds	r7, #20
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr
 8006690:	58025408 	.word	0x58025408
 8006694:	5802541c 	.word	0x5802541c
 8006698:	58025430 	.word	0x58025430
 800669c:	58025444 	.word	0x58025444
 80066a0:	58025458 	.word	0x58025458
 80066a4:	5802546c 	.word	0x5802546c
 80066a8:	58025480 	.word	0x58025480
 80066ac:	58025494 	.word	0x58025494
 80066b0:	1600963f 	.word	0x1600963f
 80066b4:	58025940 	.word	0x58025940
 80066b8:	1000823f 	.word	0x1000823f
 80066bc:	40020940 	.word	0x40020940

080066c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b089      	sub	sp, #36	@ 0x24
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
 80066c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80066ca:	2300      	movs	r3, #0
 80066cc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80066ce:	4b89      	ldr	r3, [pc, #548]	@ (80068f4 <HAL_GPIO_Init+0x234>)
 80066d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80066d2:	e194      	b.n	80069fe <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	681a      	ldr	r2, [r3, #0]
 80066d8:	2101      	movs	r1, #1
 80066da:	69fb      	ldr	r3, [r7, #28]
 80066dc:	fa01 f303 	lsl.w	r3, r1, r3
 80066e0:	4013      	ands	r3, r2
 80066e2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	f000 8186 	beq.w	80069f8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	f003 0303 	and.w	r3, r3, #3
 80066f4:	2b01      	cmp	r3, #1
 80066f6:	d005      	beq.n	8006704 <HAL_GPIO_Init+0x44>
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	f003 0303 	and.w	r3, r3, #3
 8006700:	2b02      	cmp	r3, #2
 8006702:	d130      	bne.n	8006766 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	689b      	ldr	r3, [r3, #8]
 8006708:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800670a:	69fb      	ldr	r3, [r7, #28]
 800670c:	005b      	lsls	r3, r3, #1
 800670e:	2203      	movs	r2, #3
 8006710:	fa02 f303 	lsl.w	r3, r2, r3
 8006714:	43db      	mvns	r3, r3
 8006716:	69ba      	ldr	r2, [r7, #24]
 8006718:	4013      	ands	r3, r2
 800671a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	68da      	ldr	r2, [r3, #12]
 8006720:	69fb      	ldr	r3, [r7, #28]
 8006722:	005b      	lsls	r3, r3, #1
 8006724:	fa02 f303 	lsl.w	r3, r2, r3
 8006728:	69ba      	ldr	r2, [r7, #24]
 800672a:	4313      	orrs	r3, r2
 800672c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	69ba      	ldr	r2, [r7, #24]
 8006732:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800673a:	2201      	movs	r2, #1
 800673c:	69fb      	ldr	r3, [r7, #28]
 800673e:	fa02 f303 	lsl.w	r3, r2, r3
 8006742:	43db      	mvns	r3, r3
 8006744:	69ba      	ldr	r2, [r7, #24]
 8006746:	4013      	ands	r3, r2
 8006748:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	091b      	lsrs	r3, r3, #4
 8006750:	f003 0201 	and.w	r2, r3, #1
 8006754:	69fb      	ldr	r3, [r7, #28]
 8006756:	fa02 f303 	lsl.w	r3, r2, r3
 800675a:	69ba      	ldr	r2, [r7, #24]
 800675c:	4313      	orrs	r3, r2
 800675e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	69ba      	ldr	r2, [r7, #24]
 8006764:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	f003 0303 	and.w	r3, r3, #3
 800676e:	2b03      	cmp	r3, #3
 8006770:	d017      	beq.n	80067a2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	68db      	ldr	r3, [r3, #12]
 8006776:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006778:	69fb      	ldr	r3, [r7, #28]
 800677a:	005b      	lsls	r3, r3, #1
 800677c:	2203      	movs	r2, #3
 800677e:	fa02 f303 	lsl.w	r3, r2, r3
 8006782:	43db      	mvns	r3, r3
 8006784:	69ba      	ldr	r2, [r7, #24]
 8006786:	4013      	ands	r3, r2
 8006788:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	689a      	ldr	r2, [r3, #8]
 800678e:	69fb      	ldr	r3, [r7, #28]
 8006790:	005b      	lsls	r3, r3, #1
 8006792:	fa02 f303 	lsl.w	r3, r2, r3
 8006796:	69ba      	ldr	r2, [r7, #24]
 8006798:	4313      	orrs	r3, r2
 800679a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	69ba      	ldr	r2, [r7, #24]
 80067a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	f003 0303 	and.w	r3, r3, #3
 80067aa:	2b02      	cmp	r3, #2
 80067ac:	d123      	bne.n	80067f6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80067ae:	69fb      	ldr	r3, [r7, #28]
 80067b0:	08da      	lsrs	r2, r3, #3
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	3208      	adds	r2, #8
 80067b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80067bc:	69fb      	ldr	r3, [r7, #28]
 80067be:	f003 0307 	and.w	r3, r3, #7
 80067c2:	009b      	lsls	r3, r3, #2
 80067c4:	220f      	movs	r2, #15
 80067c6:	fa02 f303 	lsl.w	r3, r2, r3
 80067ca:	43db      	mvns	r3, r3
 80067cc:	69ba      	ldr	r2, [r7, #24]
 80067ce:	4013      	ands	r3, r2
 80067d0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	691a      	ldr	r2, [r3, #16]
 80067d6:	69fb      	ldr	r3, [r7, #28]
 80067d8:	f003 0307 	and.w	r3, r3, #7
 80067dc:	009b      	lsls	r3, r3, #2
 80067de:	fa02 f303 	lsl.w	r3, r2, r3
 80067e2:	69ba      	ldr	r2, [r7, #24]
 80067e4:	4313      	orrs	r3, r2
 80067e6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80067e8:	69fb      	ldr	r3, [r7, #28]
 80067ea:	08da      	lsrs	r2, r3, #3
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	3208      	adds	r2, #8
 80067f0:	69b9      	ldr	r1, [r7, #24]
 80067f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80067fc:	69fb      	ldr	r3, [r7, #28]
 80067fe:	005b      	lsls	r3, r3, #1
 8006800:	2203      	movs	r2, #3
 8006802:	fa02 f303 	lsl.w	r3, r2, r3
 8006806:	43db      	mvns	r3, r3
 8006808:	69ba      	ldr	r2, [r7, #24]
 800680a:	4013      	ands	r3, r2
 800680c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	f003 0203 	and.w	r2, r3, #3
 8006816:	69fb      	ldr	r3, [r7, #28]
 8006818:	005b      	lsls	r3, r3, #1
 800681a:	fa02 f303 	lsl.w	r3, r2, r3
 800681e:	69ba      	ldr	r2, [r7, #24]
 8006820:	4313      	orrs	r3, r2
 8006822:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	69ba      	ldr	r2, [r7, #24]
 8006828:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006832:	2b00      	cmp	r3, #0
 8006834:	f000 80e0 	beq.w	80069f8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006838:	4b2f      	ldr	r3, [pc, #188]	@ (80068f8 <HAL_GPIO_Init+0x238>)
 800683a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800683e:	4a2e      	ldr	r2, [pc, #184]	@ (80068f8 <HAL_GPIO_Init+0x238>)
 8006840:	f043 0302 	orr.w	r3, r3, #2
 8006844:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8006848:	4b2b      	ldr	r3, [pc, #172]	@ (80068f8 <HAL_GPIO_Init+0x238>)
 800684a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800684e:	f003 0302 	and.w	r3, r3, #2
 8006852:	60fb      	str	r3, [r7, #12]
 8006854:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006856:	4a29      	ldr	r2, [pc, #164]	@ (80068fc <HAL_GPIO_Init+0x23c>)
 8006858:	69fb      	ldr	r3, [r7, #28]
 800685a:	089b      	lsrs	r3, r3, #2
 800685c:	3302      	adds	r3, #2
 800685e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006862:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006864:	69fb      	ldr	r3, [r7, #28]
 8006866:	f003 0303 	and.w	r3, r3, #3
 800686a:	009b      	lsls	r3, r3, #2
 800686c:	220f      	movs	r2, #15
 800686e:	fa02 f303 	lsl.w	r3, r2, r3
 8006872:	43db      	mvns	r3, r3
 8006874:	69ba      	ldr	r2, [r7, #24]
 8006876:	4013      	ands	r3, r2
 8006878:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	4a20      	ldr	r2, [pc, #128]	@ (8006900 <HAL_GPIO_Init+0x240>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d052      	beq.n	8006928 <HAL_GPIO_Init+0x268>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	4a1f      	ldr	r2, [pc, #124]	@ (8006904 <HAL_GPIO_Init+0x244>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d031      	beq.n	80068ee <HAL_GPIO_Init+0x22e>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	4a1e      	ldr	r2, [pc, #120]	@ (8006908 <HAL_GPIO_Init+0x248>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d02b      	beq.n	80068ea <HAL_GPIO_Init+0x22a>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	4a1d      	ldr	r2, [pc, #116]	@ (800690c <HAL_GPIO_Init+0x24c>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d025      	beq.n	80068e6 <HAL_GPIO_Init+0x226>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	4a1c      	ldr	r2, [pc, #112]	@ (8006910 <HAL_GPIO_Init+0x250>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d01f      	beq.n	80068e2 <HAL_GPIO_Init+0x222>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	4a1b      	ldr	r2, [pc, #108]	@ (8006914 <HAL_GPIO_Init+0x254>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d019      	beq.n	80068de <HAL_GPIO_Init+0x21e>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	4a1a      	ldr	r2, [pc, #104]	@ (8006918 <HAL_GPIO_Init+0x258>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d013      	beq.n	80068da <HAL_GPIO_Init+0x21a>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	4a19      	ldr	r2, [pc, #100]	@ (800691c <HAL_GPIO_Init+0x25c>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d00d      	beq.n	80068d6 <HAL_GPIO_Init+0x216>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	4a18      	ldr	r2, [pc, #96]	@ (8006920 <HAL_GPIO_Init+0x260>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d007      	beq.n	80068d2 <HAL_GPIO_Init+0x212>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	4a17      	ldr	r2, [pc, #92]	@ (8006924 <HAL_GPIO_Init+0x264>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d101      	bne.n	80068ce <HAL_GPIO_Init+0x20e>
 80068ca:	2309      	movs	r3, #9
 80068cc:	e02d      	b.n	800692a <HAL_GPIO_Init+0x26a>
 80068ce:	230a      	movs	r3, #10
 80068d0:	e02b      	b.n	800692a <HAL_GPIO_Init+0x26a>
 80068d2:	2308      	movs	r3, #8
 80068d4:	e029      	b.n	800692a <HAL_GPIO_Init+0x26a>
 80068d6:	2307      	movs	r3, #7
 80068d8:	e027      	b.n	800692a <HAL_GPIO_Init+0x26a>
 80068da:	2306      	movs	r3, #6
 80068dc:	e025      	b.n	800692a <HAL_GPIO_Init+0x26a>
 80068de:	2305      	movs	r3, #5
 80068e0:	e023      	b.n	800692a <HAL_GPIO_Init+0x26a>
 80068e2:	2304      	movs	r3, #4
 80068e4:	e021      	b.n	800692a <HAL_GPIO_Init+0x26a>
 80068e6:	2303      	movs	r3, #3
 80068e8:	e01f      	b.n	800692a <HAL_GPIO_Init+0x26a>
 80068ea:	2302      	movs	r3, #2
 80068ec:	e01d      	b.n	800692a <HAL_GPIO_Init+0x26a>
 80068ee:	2301      	movs	r3, #1
 80068f0:	e01b      	b.n	800692a <HAL_GPIO_Init+0x26a>
 80068f2:	bf00      	nop
 80068f4:	58000080 	.word	0x58000080
 80068f8:	58024400 	.word	0x58024400
 80068fc:	58000400 	.word	0x58000400
 8006900:	58020000 	.word	0x58020000
 8006904:	58020400 	.word	0x58020400
 8006908:	58020800 	.word	0x58020800
 800690c:	58020c00 	.word	0x58020c00
 8006910:	58021000 	.word	0x58021000
 8006914:	58021400 	.word	0x58021400
 8006918:	58021800 	.word	0x58021800
 800691c:	58021c00 	.word	0x58021c00
 8006920:	58022000 	.word	0x58022000
 8006924:	58022400 	.word	0x58022400
 8006928:	2300      	movs	r3, #0
 800692a:	69fa      	ldr	r2, [r7, #28]
 800692c:	f002 0203 	and.w	r2, r2, #3
 8006930:	0092      	lsls	r2, r2, #2
 8006932:	4093      	lsls	r3, r2
 8006934:	69ba      	ldr	r2, [r7, #24]
 8006936:	4313      	orrs	r3, r2
 8006938:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800693a:	4938      	ldr	r1, [pc, #224]	@ (8006a1c <HAL_GPIO_Init+0x35c>)
 800693c:	69fb      	ldr	r3, [r7, #28]
 800693e:	089b      	lsrs	r3, r3, #2
 8006940:	3302      	adds	r3, #2
 8006942:	69ba      	ldr	r2, [r7, #24]
 8006944:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006948:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	43db      	mvns	r3, r3
 8006954:	69ba      	ldr	r2, [r7, #24]
 8006956:	4013      	ands	r3, r2
 8006958:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006962:	2b00      	cmp	r3, #0
 8006964:	d003      	beq.n	800696e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006966:	69ba      	ldr	r2, [r7, #24]
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	4313      	orrs	r3, r2
 800696c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800696e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006972:	69bb      	ldr	r3, [r7, #24]
 8006974:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006976:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	43db      	mvns	r3, r3
 8006982:	69ba      	ldr	r2, [r7, #24]
 8006984:	4013      	ands	r3, r2
 8006986:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006990:	2b00      	cmp	r3, #0
 8006992:	d003      	beq.n	800699c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006994:	69ba      	ldr	r2, [r7, #24]
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	4313      	orrs	r3, r2
 800699a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800699c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80069a0:	69bb      	ldr	r3, [r7, #24]
 80069a2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	43db      	mvns	r3, r3
 80069ae:	69ba      	ldr	r2, [r7, #24]
 80069b0:	4013      	ands	r3, r2
 80069b2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d003      	beq.n	80069c8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80069c0:	69ba      	ldr	r2, [r7, #24]
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	4313      	orrs	r3, r2
 80069c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	69ba      	ldr	r2, [r7, #24]
 80069cc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	43db      	mvns	r3, r3
 80069d8:	69ba      	ldr	r2, [r7, #24]
 80069da:	4013      	ands	r3, r2
 80069dc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d003      	beq.n	80069f2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80069ea:	69ba      	ldr	r2, [r7, #24]
 80069ec:	693b      	ldr	r3, [r7, #16]
 80069ee:	4313      	orrs	r3, r2
 80069f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	69ba      	ldr	r2, [r7, #24]
 80069f6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80069f8:	69fb      	ldr	r3, [r7, #28]
 80069fa:	3301      	adds	r3, #1
 80069fc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	681a      	ldr	r2, [r3, #0]
 8006a02:	69fb      	ldr	r3, [r7, #28]
 8006a04:	fa22 f303 	lsr.w	r3, r2, r3
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	f47f ae63 	bne.w	80066d4 <HAL_GPIO_Init+0x14>
  }
}
 8006a0e:	bf00      	nop
 8006a10:	bf00      	nop
 8006a12:	3724      	adds	r7, #36	@ 0x24
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr
 8006a1c:	58000400 	.word	0x58000400

08006a20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b083      	sub	sp, #12
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
 8006a28:	460b      	mov	r3, r1
 8006a2a:	807b      	strh	r3, [r7, #2]
 8006a2c:	4613      	mov	r3, r2
 8006a2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006a30:	787b      	ldrb	r3, [r7, #1]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d003      	beq.n	8006a3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006a36:	887a      	ldrh	r2, [r7, #2]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006a3c:	e003      	b.n	8006a46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006a3e:	887b      	ldrh	r3, [r7, #2]
 8006a40:	041a      	lsls	r2, r3, #16
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	619a      	str	r2, [r3, #24]
}
 8006a46:	bf00      	nop
 8006a48:	370c      	adds	r7, #12
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a50:	4770      	bx	lr
	...

08006a54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b082      	sub	sp, #8
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d101      	bne.n	8006a66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006a62:	2301      	movs	r3, #1
 8006a64:	e08b      	b.n	8006b7e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a6c:	b2db      	uxtb	r3, r3
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d106      	bne.n	8006a80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2200      	movs	r2, #0
 8006a76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f7fa ffa0 	bl	80019c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2224      	movs	r2, #36	@ 0x24
 8006a84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	681a      	ldr	r2, [r3, #0]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f022 0201 	bic.w	r2, r2, #1
 8006a96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	685a      	ldr	r2, [r3, #4]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006aa4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	689a      	ldr	r2, [r3, #8]
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006ab4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	68db      	ldr	r3, [r3, #12]
 8006aba:	2b01      	cmp	r3, #1
 8006abc:	d107      	bne.n	8006ace <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	689a      	ldr	r2, [r3, #8]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006aca:	609a      	str	r2, [r3, #8]
 8006acc:	e006      	b.n	8006adc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	689a      	ldr	r2, [r3, #8]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8006ada:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	68db      	ldr	r3, [r3, #12]
 8006ae0:	2b02      	cmp	r3, #2
 8006ae2:	d108      	bne.n	8006af6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	685a      	ldr	r2, [r3, #4]
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006af2:	605a      	str	r2, [r3, #4]
 8006af4:	e007      	b.n	8006b06 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	685a      	ldr	r2, [r3, #4]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006b04:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	6859      	ldr	r1, [r3, #4]
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681a      	ldr	r2, [r3, #0]
 8006b10:	4b1d      	ldr	r3, [pc, #116]	@ (8006b88 <HAL_I2C_Init+0x134>)
 8006b12:	430b      	orrs	r3, r1
 8006b14:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	68da      	ldr	r2, [r3, #12]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006b24:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	691a      	ldr	r2, [r3, #16]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	695b      	ldr	r3, [r3, #20]
 8006b2e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	699b      	ldr	r3, [r3, #24]
 8006b36:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	430a      	orrs	r2, r1
 8006b3e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	69d9      	ldr	r1, [r3, #28]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6a1a      	ldr	r2, [r3, #32]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	430a      	orrs	r2, r1
 8006b4e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	681a      	ldr	r2, [r3, #0]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f042 0201 	orr.w	r2, r2, #1
 8006b5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2200      	movs	r2, #0
 8006b64:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2220      	movs	r2, #32
 8006b6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2200      	movs	r2, #0
 8006b72:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2200      	movs	r2, #0
 8006b78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006b7c:	2300      	movs	r3, #0
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3708      	adds	r7, #8
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}
 8006b86:	bf00      	nop
 8006b88:	02008000 	.word	0x02008000

08006b8c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b088      	sub	sp, #32
 8006b90:	af02      	add	r7, sp, #8
 8006b92:	60f8      	str	r0, [r7, #12]
 8006b94:	4608      	mov	r0, r1
 8006b96:	4611      	mov	r1, r2
 8006b98:	461a      	mov	r2, r3
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	817b      	strh	r3, [r7, #10]
 8006b9e:	460b      	mov	r3, r1
 8006ba0:	813b      	strh	r3, [r7, #8]
 8006ba2:	4613      	mov	r3, r2
 8006ba4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006bac:	b2db      	uxtb	r3, r3
 8006bae:	2b20      	cmp	r3, #32
 8006bb0:	f040 80fd 	bne.w	8006dae <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006bb4:	6a3b      	ldr	r3, [r7, #32]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d002      	beq.n	8006bc0 <HAL_I2C_Mem_Read+0x34>
 8006bba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d105      	bne.n	8006bcc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006bc6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8006bc8:	2301      	movs	r3, #1
 8006bca:	e0f1      	b.n	8006db0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006bd2:	2b01      	cmp	r3, #1
 8006bd4:	d101      	bne.n	8006bda <HAL_I2C_Mem_Read+0x4e>
 8006bd6:	2302      	movs	r3, #2
 8006bd8:	e0ea      	b.n	8006db0 <HAL_I2C_Mem_Read+0x224>
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	2201      	movs	r2, #1
 8006bde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006be2:	f7fb fcb9 	bl	8002558 <HAL_GetTick>
 8006be6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	9300      	str	r3, [sp, #0]
 8006bec:	2319      	movs	r3, #25
 8006bee:	2201      	movs	r2, #1
 8006bf0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006bf4:	68f8      	ldr	r0, [r7, #12]
 8006bf6:	f001 ff4b 	bl	8008a90 <I2C_WaitOnFlagUntilTimeout>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d001      	beq.n	8006c04 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006c00:	2301      	movs	r3, #1
 8006c02:	e0d5      	b.n	8006db0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	2222      	movs	r2, #34	@ 0x22
 8006c08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	2240      	movs	r2, #64	@ 0x40
 8006c10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2200      	movs	r2, #0
 8006c18:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	6a3a      	ldr	r2, [r7, #32]
 8006c1e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006c24:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006c2c:	88f8      	ldrh	r0, [r7, #6]
 8006c2e:	893a      	ldrh	r2, [r7, #8]
 8006c30:	8979      	ldrh	r1, [r7, #10]
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	9301      	str	r3, [sp, #4]
 8006c36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c38:	9300      	str	r3, [sp, #0]
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	68f8      	ldr	r0, [r7, #12]
 8006c3e:	f000 ff67 	bl	8007b10 <I2C_RequestMemoryRead>
 8006c42:	4603      	mov	r3, r0
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d005      	beq.n	8006c54 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8006c50:	2301      	movs	r3, #1
 8006c52:	e0ad      	b.n	8006db0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c58:	b29b      	uxth	r3, r3
 8006c5a:	2bff      	cmp	r3, #255	@ 0xff
 8006c5c:	d90e      	bls.n	8006c7c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	22ff      	movs	r2, #255	@ 0xff
 8006c62:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c68:	b2da      	uxtb	r2, r3
 8006c6a:	8979      	ldrh	r1, [r7, #10]
 8006c6c:	4b52      	ldr	r3, [pc, #328]	@ (8006db8 <HAL_I2C_Mem_Read+0x22c>)
 8006c6e:	9300      	str	r3, [sp, #0]
 8006c70:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006c74:	68f8      	ldr	r0, [r7, #12]
 8006c76:	f002 f8cf 	bl	8008e18 <I2C_TransferConfig>
 8006c7a:	e00f      	b.n	8006c9c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c80:	b29a      	uxth	r2, r3
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c8a:	b2da      	uxtb	r2, r3
 8006c8c:	8979      	ldrh	r1, [r7, #10]
 8006c8e:	4b4a      	ldr	r3, [pc, #296]	@ (8006db8 <HAL_I2C_Mem_Read+0x22c>)
 8006c90:	9300      	str	r3, [sp, #0]
 8006c92:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006c96:	68f8      	ldr	r0, [r7, #12]
 8006c98:	f002 f8be 	bl	8008e18 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	9300      	str	r3, [sp, #0]
 8006ca0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	2104      	movs	r1, #4
 8006ca6:	68f8      	ldr	r0, [r7, #12]
 8006ca8:	f001 fef2 	bl	8008a90 <I2C_WaitOnFlagUntilTimeout>
 8006cac:	4603      	mov	r3, r0
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d001      	beq.n	8006cb6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	e07c      	b.n	8006db0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cc0:	b2d2      	uxtb	r2, r2
 8006cc2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cc8:	1c5a      	adds	r2, r3, #1
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006cd2:	3b01      	subs	r3, #1
 8006cd4:	b29a      	uxth	r2, r3
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006cde:	b29b      	uxth	r3, r3
 8006ce0:	3b01      	subs	r3, #1
 8006ce2:	b29a      	uxth	r2, r3
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006cec:	b29b      	uxth	r3, r3
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d034      	beq.n	8006d5c <HAL_I2C_Mem_Read+0x1d0>
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d130      	bne.n	8006d5c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	9300      	str	r3, [sp, #0]
 8006cfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d00:	2200      	movs	r2, #0
 8006d02:	2180      	movs	r1, #128	@ 0x80
 8006d04:	68f8      	ldr	r0, [r7, #12]
 8006d06:	f001 fec3 	bl	8008a90 <I2C_WaitOnFlagUntilTimeout>
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d001      	beq.n	8006d14 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006d10:	2301      	movs	r3, #1
 8006d12:	e04d      	b.n	8006db0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d18:	b29b      	uxth	r3, r3
 8006d1a:	2bff      	cmp	r3, #255	@ 0xff
 8006d1c:	d90e      	bls.n	8006d3c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	22ff      	movs	r2, #255	@ 0xff
 8006d22:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d28:	b2da      	uxtb	r2, r3
 8006d2a:	8979      	ldrh	r1, [r7, #10]
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	9300      	str	r3, [sp, #0]
 8006d30:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006d34:	68f8      	ldr	r0, [r7, #12]
 8006d36:	f002 f86f 	bl	8008e18 <I2C_TransferConfig>
 8006d3a:	e00f      	b.n	8006d5c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d40:	b29a      	uxth	r2, r3
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d4a:	b2da      	uxtb	r2, r3
 8006d4c:	8979      	ldrh	r1, [r7, #10]
 8006d4e:	2300      	movs	r3, #0
 8006d50:	9300      	str	r3, [sp, #0]
 8006d52:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006d56:	68f8      	ldr	r0, [r7, #12]
 8006d58:	f002 f85e 	bl	8008e18 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d60:	b29b      	uxth	r3, r3
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d19a      	bne.n	8006c9c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d66:	697a      	ldr	r2, [r7, #20]
 8006d68:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006d6a:	68f8      	ldr	r0, [r7, #12]
 8006d6c:	f001 ff30 	bl	8008bd0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006d70:	4603      	mov	r3, r0
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d001      	beq.n	8006d7a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006d76:	2301      	movs	r3, #1
 8006d78:	e01a      	b.n	8006db0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	2220      	movs	r2, #32
 8006d80:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	6859      	ldr	r1, [r3, #4]
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681a      	ldr	r2, [r3, #0]
 8006d8c:	4b0b      	ldr	r3, [pc, #44]	@ (8006dbc <HAL_I2C_Mem_Read+0x230>)
 8006d8e:	400b      	ands	r3, r1
 8006d90:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	2220      	movs	r2, #32
 8006d96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	2200      	movs	r2, #0
 8006da6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006daa:	2300      	movs	r3, #0
 8006dac:	e000      	b.n	8006db0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006dae:	2302      	movs	r3, #2
  }
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	3718      	adds	r7, #24
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}
 8006db8:	80002400 	.word	0x80002400
 8006dbc:	fe00e800 	.word	0xfe00e800

08006dc0 <HAL_I2C_Mem_Write_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                        uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b088      	sub	sp, #32
 8006dc4:	af02      	add	r7, sp, #8
 8006dc6:	60f8      	str	r0, [r7, #12]
 8006dc8:	4608      	mov	r0, r1
 8006dca:	4611      	mov	r1, r2
 8006dcc:	461a      	mov	r2, r3
 8006dce:	4603      	mov	r3, r0
 8006dd0:	817b      	strh	r3, [r7, #10]
 8006dd2:	460b      	mov	r3, r1
 8006dd4:	813b      	strh	r3, [r7, #8]
 8006dd6:	4613      	mov	r3, r2
 8006dd8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006de0:	b2db      	uxtb	r3, r3
 8006de2:	2b20      	cmp	r3, #32
 8006de4:	f040 80c3 	bne.w	8006f6e <HAL_I2C_Mem_Write_DMA+0x1ae>
  {
    if ((pData == NULL) || (Size == 0U))
 8006de8:	6a3b      	ldr	r3, [r7, #32]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d002      	beq.n	8006df4 <HAL_I2C_Mem_Write_DMA+0x34>
 8006dee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d105      	bne.n	8006e00 <HAL_I2C_Mem_Write_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006dfa:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	e0b7      	b.n	8006f70 <HAL_I2C_Mem_Write_DMA+0x1b0>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	699b      	ldr	r3, [r3, #24]
 8006e06:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006e0a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e0e:	d101      	bne.n	8006e14 <HAL_I2C_Mem_Write_DMA+0x54>
    {
      return HAL_BUSY;
 8006e10:	2302      	movs	r3, #2
 8006e12:	e0ad      	b.n	8006f70 <HAL_I2C_Mem_Write_DMA+0x1b0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006e1a:	2b01      	cmp	r3, #1
 8006e1c:	d101      	bne.n	8006e22 <HAL_I2C_Mem_Write_DMA+0x62>
 8006e1e:	2302      	movs	r3, #2
 8006e20:	e0a6      	b.n	8006f70 <HAL_I2C_Mem_Write_DMA+0x1b0>
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	2201      	movs	r2, #1
 8006e26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2221      	movs	r2, #33	@ 0x21
 8006e2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2240      	movs	r2, #64	@ 0x40
 8006e36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	6a3a      	ldr	r2, [r7, #32]
 8006e44:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006e4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	4a4a      	ldr	r2, [pc, #296]	@ (8006f78 <HAL_I2C_Mem_Write_DMA+0x1b8>)
 8006e50:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_DMA;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	4a49      	ldr	r2, [pc, #292]	@ (8006f7c <HAL_I2C_Mem_Write_DMA+0x1bc>)
 8006e56:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 8006e58:	897a      	ldrh	r2, [r7, #10]
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	64da      	str	r2, [r3, #76]	@ 0x4c

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e62:	b29b      	uxth	r3, r3
 8006e64:	2bff      	cmp	r3, #255	@ 0xff
 8006e66:	d903      	bls.n	8006e70 <HAL_I2C_Mem_Write_DMA+0xb0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	22ff      	movs	r2, #255	@ 0xff
 8006e6c:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006e6e:	e004      	b.n	8006e7a <HAL_I2C_Mem_Write_DMA+0xba>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e74:	b29a      	uxth	r2, r3
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006e7a:	88fb      	ldrh	r3, [r7, #6]
 8006e7c:	2b01      	cmp	r3, #1
 8006e7e:	d109      	bne.n	8006e94 <HAL_I2C_Mem_Write_DMA+0xd4>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006e80:	893b      	ldrh	r3, [r7, #8]
 8006e82:	b2da      	uxtb	r2, r3
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	f04f 32ff 	mov.w	r2, #4294967295
 8006e90:	651a      	str	r2, [r3, #80]	@ 0x50
 8006e92:	e00b      	b.n	8006eac <HAL_I2C_Mem_Write_DMA+0xec>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006e94:	893b      	ldrh	r3, [r7, #8]
 8006e96:	0a1b      	lsrs	r3, r3, #8
 8006e98:	b29b      	uxth	r3, r3
 8006e9a:	b2da      	uxtb	r2, r3
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 8006ea2:	893b      	ldrh	r3, [r7, #8]
 8006ea4:	b2db      	uxtb	r3, r3
 8006ea6:	461a      	mov	r2, r3
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if (hi2c->hdmatx != NULL)
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d020      	beq.n	8006ef6 <HAL_I2C_Mem_Write_DMA+0x136>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eb8:	4a31      	ldr	r2, [pc, #196]	@ (8006f80 <HAL_I2C_Mem_Write_DMA+0x1c0>)
 8006eba:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ec0:	4a30      	ldr	r2, [pc, #192]	@ (8006f84 <HAL_I2C_Mem_Write_DMA+0x1c4>)
 8006ec2:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ec8:	2200      	movs	r2, #0
 8006eca:	641a      	str	r2, [r3, #64]	@ 0x40
      hi2c->hdmatx->XferAbortCallback = NULL;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the DMA stream or channel depends on Instance */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8006ed8:	6a39      	ldr	r1, [r7, #32]
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	3328      	adds	r3, #40	@ 0x28
 8006ee0:	461a      	mov	r2, r3
                                       hi2c->XferSize);
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8006ee6:	f7fd f8f1 	bl	80040cc <HAL_DMA_Start_IT>
 8006eea:	4603      	mov	r3, r0
 8006eec:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8006eee:	7dfb      	ldrb	r3, [r7, #23]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d128      	bne.n	8006f46 <HAL_I2C_Mem_Write_DMA+0x186>
 8006ef4:	e013      	b.n	8006f1e <HAL_I2C_Mem_Write_DMA+0x15e>
      hi2c->State     = HAL_I2C_STATE_READY;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	2220      	movs	r2, #32
 8006efa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2200      	movs	r2, #0
 8006f02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f0a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2200      	movs	r2, #0
 8006f16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	e028      	b.n	8006f70 <HAL_I2C_Mem_Write_DMA+0x1b0>
    {
      /* Send Slave Address and Memory Address */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006f1e:	88fb      	ldrh	r3, [r7, #6]
 8006f20:	b2da      	uxtb	r2, r3
 8006f22:	8979      	ldrh	r1, [r7, #10]
 8006f24:	4b18      	ldr	r3, [pc, #96]	@ (8006f88 <HAL_I2C_Mem_Write_DMA+0x1c8>)
 8006f26:	9300      	str	r3, [sp, #0]
 8006f28:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006f2c:	68f8      	ldr	r0, [r7, #12]
 8006f2e:	f001 ff73 	bl	8008e18 <I2C_TransferConfig>

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2200      	movs	r2, #0
 8006f36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006f3a:	2101      	movs	r1, #1
 8006f3c:	68f8      	ldr	r0, [r7, #12]
 8006f3e:	f001 ff9d 	bl	8008e7c <I2C_Enable_IRQ>
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8006f42:	2300      	movs	r3, #0
 8006f44:	e014      	b.n	8006f70 <HAL_I2C_Mem_Write_DMA+0x1b0>
      hi2c->State     = HAL_I2C_STATE_READY;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	2220      	movs	r2, #32
 8006f4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	2200      	movs	r2, #0
 8006f52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f5a:	f043 0210 	orr.w	r2, r3, #16
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	2200      	movs	r2, #0
 8006f66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	e000      	b.n	8006f70 <HAL_I2C_Mem_Write_DMA+0x1b0>
  }
  else
  {
    return HAL_BUSY;
 8006f6e:	2302      	movs	r3, #2
  }
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	3718      	adds	r7, #24
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}
 8006f78:	ffff0000 	.word	0xffff0000
 8006f7c:	08007511 	.word	0x08007511
 8006f80:	0800874b 	.word	0x0800874b
 8006f84:	080087e1 	.word	0x080087e1
 8006f88:	80002000 	.word	0x80002000

08006f8c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b084      	sub	sp, #16
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	699b      	ldr	r3, [r3, #24]
 8006f9a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d005      	beq.n	8006fb8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006fb0:	68ba      	ldr	r2, [r7, #8]
 8006fb2:	68f9      	ldr	r1, [r7, #12]
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	4798      	blx	r3
  }
}
 8006fb8:	bf00      	nop
 8006fba:	3710      	adds	r7, #16
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}

08006fc0 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b086      	sub	sp, #24
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	699b      	ldr	r3, [r3, #24]
 8006fce:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d00f      	beq.n	8007002 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006fe2:	693b      	ldr	r3, [r7, #16]
 8006fe4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d00a      	beq.n	8007002 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ff0:	f043 0201 	orr.w	r2, r3, #1
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007000:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007008:	2b00      	cmp	r3, #0
 800700a:	d00f      	beq.n	800702c <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8007012:	2b00      	cmp	r3, #0
 8007014:	d00a      	beq.n	800702c <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800701a:	f043 0208 	orr.w	r2, r3, #8
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800702a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007032:	2b00      	cmp	r3, #0
 8007034:	d00f      	beq.n	8007056 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800703c:	2b00      	cmp	r3, #0
 800703e:	d00a      	beq.n	8007056 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007044:	f043 0202 	orr.w	r2, r3, #2
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007054:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800705a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	f003 030b 	and.w	r3, r3, #11
 8007062:	2b00      	cmp	r3, #0
 8007064:	d003      	beq.n	800706e <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8007066:	68f9      	ldr	r1, [r7, #12]
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f001 fa33 	bl	80084d4 <I2C_ITError>
  }
}
 800706e:	bf00      	nop
 8007070:	3718      	adds	r7, #24
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}

08007076 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007076:	b480      	push	{r7}
 8007078:	b083      	sub	sp, #12
 800707a:	af00      	add	r7, sp, #0
 800707c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800707e:	bf00      	nop
 8007080:	370c      	adds	r7, #12
 8007082:	46bd      	mov	sp, r7
 8007084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007088:	4770      	bx	lr

0800708a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800708a:	b480      	push	{r7}
 800708c:	b083      	sub	sp, #12
 800708e:	af00      	add	r7, sp, #0
 8007090:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8007092:	bf00      	nop
 8007094:	370c      	adds	r7, #12
 8007096:	46bd      	mov	sp, r7
 8007098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709c:	4770      	bx	lr

0800709e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800709e:	b480      	push	{r7}
 80070a0:	b083      	sub	sp, #12
 80070a2:	af00      	add	r7, sp, #0
 80070a4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80070a6:	bf00      	nop
 80070a8:	370c      	adds	r7, #12
 80070aa:	46bd      	mov	sp, r7
 80070ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b0:	4770      	bx	lr

080070b2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80070b2:	b480      	push	{r7}
 80070b4:	b083      	sub	sp, #12
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80070ba:	bf00      	nop
 80070bc:	370c      	adds	r7, #12
 80070be:	46bd      	mov	sp, r7
 80070c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c4:	4770      	bx	lr

080070c6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80070c6:	b480      	push	{r7}
 80070c8:	b083      	sub	sp, #12
 80070ca:	af00      	add	r7, sp, #0
 80070cc:	6078      	str	r0, [r7, #4]
 80070ce:	460b      	mov	r3, r1
 80070d0:	70fb      	strb	r3, [r7, #3]
 80070d2:	4613      	mov	r3, r2
 80070d4:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80070d6:	bf00      	nop
 80070d8:	370c      	adds	r7, #12
 80070da:	46bd      	mov	sp, r7
 80070dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e0:	4770      	bx	lr

080070e2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80070e2:	b480      	push	{r7}
 80070e4:	b083      	sub	sp, #12
 80070e6:	af00      	add	r7, sp, #0
 80070e8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80070ea:	bf00      	nop
 80070ec:	370c      	adds	r7, #12
 80070ee:	46bd      	mov	sp, r7
 80070f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f4:	4770      	bx	lr

080070f6 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80070f6:	b480      	push	{r7}
 80070f8:	b083      	sub	sp, #12
 80070fa:	af00      	add	r7, sp, #0
 80070fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80070fe:	bf00      	nop
 8007100:	370c      	adds	r7, #12
 8007102:	46bd      	mov	sp, r7
 8007104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007108:	4770      	bx	lr

0800710a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800710a:	b480      	push	{r7}
 800710c:	b083      	sub	sp, #12
 800710e:	af00      	add	r7, sp, #0
 8007110:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8007112:	bf00      	nop
 8007114:	370c      	adds	r7, #12
 8007116:	46bd      	mov	sp, r7
 8007118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711c:	4770      	bx	lr

0800711e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800711e:	b480      	push	{r7}
 8007120:	b083      	sub	sp, #12
 8007122:	af00      	add	r7, sp, #0
 8007124:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8007126:	bf00      	nop
 8007128:	370c      	adds	r7, #12
 800712a:	46bd      	mov	sp, r7
 800712c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007130:	4770      	bx	lr

08007132 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007132:	b480      	push	{r7}
 8007134:	b083      	sub	sp, #12
 8007136:	af00      	add	r7, sp, #0
 8007138:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800713a:	bf00      	nop
 800713c:	370c      	adds	r7, #12
 800713e:	46bd      	mov	sp, r7
 8007140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007144:	4770      	bx	lr

08007146 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8007146:	b580      	push	{r7, lr}
 8007148:	b086      	sub	sp, #24
 800714a:	af00      	add	r7, sp, #0
 800714c:	60f8      	str	r0, [r7, #12]
 800714e:	60b9      	str	r1, [r7, #8]
 8007150:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007156:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007162:	2b01      	cmp	r3, #1
 8007164:	d101      	bne.n	800716a <I2C_Slave_ISR_IT+0x24>
 8007166:	2302      	movs	r3, #2
 8007168:	e0e2      	b.n	8007330 <I2C_Slave_ISR_IT+0x1ea>
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	2201      	movs	r2, #1
 800716e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	f003 0320 	and.w	r3, r3, #32
 8007178:	2b00      	cmp	r3, #0
 800717a:	d009      	beq.n	8007190 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007182:	2b00      	cmp	r3, #0
 8007184:	d004      	beq.n	8007190 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8007186:	6939      	ldr	r1, [r7, #16]
 8007188:	68f8      	ldr	r0, [r7, #12]
 800718a:	f000 fefb 	bl	8007f84 <I2C_ITSlaveCplt>
 800718e:	e0ca      	b.n	8007326 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007190:	693b      	ldr	r3, [r7, #16]
 8007192:	f003 0310 	and.w	r3, r3, #16
 8007196:	2b00      	cmp	r3, #0
 8007198:	d04b      	beq.n	8007232 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d046      	beq.n	8007232 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071a8:	b29b      	uxth	r3, r3
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d128      	bne.n	8007200 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80071b4:	b2db      	uxtb	r3, r3
 80071b6:	2b28      	cmp	r3, #40	@ 0x28
 80071b8:	d108      	bne.n	80071cc <I2C_Slave_ISR_IT+0x86>
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80071c0:	d104      	bne.n	80071cc <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80071c2:	6939      	ldr	r1, [r7, #16]
 80071c4:	68f8      	ldr	r0, [r7, #12]
 80071c6:	f001 f931 	bl	800842c <I2C_ITListenCplt>
 80071ca:	e031      	b.n	8007230 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80071d2:	b2db      	uxtb	r3, r3
 80071d4:	2b29      	cmp	r3, #41	@ 0x29
 80071d6:	d10e      	bne.n	80071f6 <I2C_Slave_ISR_IT+0xb0>
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80071de:	d00a      	beq.n	80071f6 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	2210      	movs	r2, #16
 80071e6:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80071e8:	68f8      	ldr	r0, [r7, #12]
 80071ea:	f001 fa8a 	bl	8008702 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80071ee:	68f8      	ldr	r0, [r7, #12]
 80071f0:	f000 fda3 	bl	8007d3a <I2C_ITSlaveSeqCplt>
 80071f4:	e01c      	b.n	8007230 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	2210      	movs	r2, #16
 80071fc:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80071fe:	e08f      	b.n	8007320 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	2210      	movs	r2, #16
 8007206:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800720c:	f043 0204 	orr.w	r2, r3, #4
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d003      	beq.n	8007222 <I2C_Slave_ISR_IT+0xdc>
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007220:	d17e      	bne.n	8007320 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007226:	4619      	mov	r1, r3
 8007228:	68f8      	ldr	r0, [r7, #12]
 800722a:	f001 f953 	bl	80084d4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800722e:	e077      	b.n	8007320 <I2C_Slave_ISR_IT+0x1da>
 8007230:	e076      	b.n	8007320 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	f003 0304 	and.w	r3, r3, #4
 8007238:	2b00      	cmp	r3, #0
 800723a:	d02f      	beq.n	800729c <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007242:	2b00      	cmp	r3, #0
 8007244:	d02a      	beq.n	800729c <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800724a:	b29b      	uxth	r3, r3
 800724c:	2b00      	cmp	r3, #0
 800724e:	d018      	beq.n	8007282 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800725a:	b2d2      	uxtb	r2, r2
 800725c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007262:	1c5a      	adds	r2, r3, #1
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800726c:	3b01      	subs	r3, #1
 800726e:	b29a      	uxth	r2, r3
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007278:	b29b      	uxth	r3, r3
 800727a:	3b01      	subs	r3, #1
 800727c:	b29a      	uxth	r2, r3
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007286:	b29b      	uxth	r3, r3
 8007288:	2b00      	cmp	r3, #0
 800728a:	d14b      	bne.n	8007324 <I2C_Slave_ISR_IT+0x1de>
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007292:	d047      	beq.n	8007324 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8007294:	68f8      	ldr	r0, [r7, #12]
 8007296:	f000 fd50 	bl	8007d3a <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800729a:	e043      	b.n	8007324 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	f003 0308 	and.w	r3, r3, #8
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d009      	beq.n	80072ba <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d004      	beq.n	80072ba <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80072b0:	6939      	ldr	r1, [r7, #16]
 80072b2:	68f8      	ldr	r0, [r7, #12]
 80072b4:	f000 fc80 	bl	8007bb8 <I2C_ITAddrCplt>
 80072b8:	e035      	b.n	8007326 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	f003 0302 	and.w	r3, r3, #2
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d030      	beq.n	8007326 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d02b      	beq.n	8007326 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072d2:	b29b      	uxth	r3, r3
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d018      	beq.n	800730a <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072dc:	781a      	ldrb	r2, [r3, #0]
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072e8:	1c5a      	adds	r2, r3, #1
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072f2:	b29b      	uxth	r3, r3
 80072f4:	3b01      	subs	r3, #1
 80072f6:	b29a      	uxth	r2, r3
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007300:	3b01      	subs	r3, #1
 8007302:	b29a      	uxth	r2, r3
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	851a      	strh	r2, [r3, #40]	@ 0x28
 8007308:	e00d      	b.n	8007326 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007310:	d002      	beq.n	8007318 <I2C_Slave_ISR_IT+0x1d2>
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d106      	bne.n	8007326 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007318:	68f8      	ldr	r0, [r7, #12]
 800731a:	f000 fd0e 	bl	8007d3a <I2C_ITSlaveSeqCplt>
 800731e:	e002      	b.n	8007326 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8007320:	bf00      	nop
 8007322:	e000      	b.n	8007326 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8007324:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	2200      	movs	r2, #0
 800732a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800732e:	2300      	movs	r3, #0
}
 8007330:	4618      	mov	r0, r3
 8007332:	3718      	adds	r7, #24
 8007334:	46bd      	mov	sp, r7
 8007336:	bd80      	pop	{r7, pc}

08007338 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b088      	sub	sp, #32
 800733c:	af02      	add	r7, sp, #8
 800733e:	60f8      	str	r0, [r7, #12]
 8007340:	60b9      	str	r1, [r7, #8]
 8007342:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800734a:	2b01      	cmp	r3, #1
 800734c:	d101      	bne.n	8007352 <I2C_Master_ISR_DMA+0x1a>
 800734e:	2302      	movs	r3, #2
 8007350:	e0d9      	b.n	8007506 <I2C_Master_ISR_DMA+0x1ce>
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2201      	movs	r2, #1
 8007356:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	f003 0310 	and.w	r3, r3, #16
 8007360:	2b00      	cmp	r3, #0
 8007362:	d016      	beq.n	8007392 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800736a:	2b00      	cmp	r3, #0
 800736c:	d011      	beq.n	8007392 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	2210      	movs	r2, #16
 8007374:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800737a:	f043 0204 	orr.w	r2, r3, #4
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8007382:	2120      	movs	r1, #32
 8007384:	68f8      	ldr	r0, [r7, #12]
 8007386:	f001 fd79 	bl	8008e7c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800738a:	68f8      	ldr	r0, [r7, #12]
 800738c:	f001 f9b9 	bl	8008702 <I2C_Flush_TXDR>
 8007390:	e0b4      	b.n	80074fc <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007398:	2b00      	cmp	r3, #0
 800739a:	d071      	beq.n	8007480 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d06c      	beq.n	8007480 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	681a      	ldr	r2, [r3, #0]
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80073b4:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073ba:	b29b      	uxth	r3, r3
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d04e      	beq.n	800745e <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	685b      	ldr	r3, [r3, #4]
 80073c6:	b29b      	uxth	r3, r3
 80073c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80073cc:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073d2:	b29b      	uxth	r3, r3
 80073d4:	2bff      	cmp	r3, #255	@ 0xff
 80073d6:	d906      	bls.n	80073e6 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	22ff      	movs	r2, #255	@ 0xff
 80073dc:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 80073de:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80073e2:	617b      	str	r3, [r7, #20]
 80073e4:	e010      	b.n	8007408 <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073ea:	b29a      	uxth	r2, r3
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073f4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80073f8:	d003      	beq.n	8007402 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073fe:	617b      	str	r3, [r7, #20]
 8007400:	e002      	b.n	8007408 <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8007402:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007406:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800740c:	b2da      	uxtb	r2, r3
 800740e:	8a79      	ldrh	r1, [r7, #18]
 8007410:	2300      	movs	r3, #0
 8007412:	9300      	str	r3, [sp, #0]
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	68f8      	ldr	r0, [r7, #12]
 8007418:	f001 fcfe 	bl	8008e18 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007420:	b29a      	uxth	r2, r3
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007426:	1ad3      	subs	r3, r2, r3
 8007428:	b29a      	uxth	r2, r3
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007434:	b2db      	uxtb	r3, r3
 8007436:	2b22      	cmp	r3, #34	@ 0x22
 8007438:	d108      	bne.n	800744c <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	681a      	ldr	r2, [r3, #0]
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007448:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800744a:	e057      	b.n	80074fc <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	681a      	ldr	r2, [r3, #0]
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800745a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800745c:	e04e      	b.n	80074fc <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	685b      	ldr	r3, [r3, #4]
 8007464:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007468:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800746c:	d003      	beq.n	8007476 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800746e:	68f8      	ldr	r0, [r7, #12]
 8007470:	f000 fc26 	bl	8007cc0 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8007474:	e042      	b.n	80074fc <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8007476:	2140      	movs	r1, #64	@ 0x40
 8007478:	68f8      	ldr	r0, [r7, #12]
 800747a:	f001 f82b 	bl	80084d4 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800747e:	e03d      	b.n	80074fc <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007486:	2b00      	cmp	r3, #0
 8007488:	d028      	beq.n	80074dc <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8007490:	2b00      	cmp	r3, #0
 8007492:	d023      	beq.n	80074dc <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007498:	b29b      	uxth	r3, r3
 800749a:	2b00      	cmp	r3, #0
 800749c:	d119      	bne.n	80074d2 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	685b      	ldr	r3, [r3, #4]
 80074a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074a8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80074ac:	d025      	beq.n	80074fa <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074b2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80074b6:	d108      	bne.n	80074ca <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	685a      	ldr	r2, [r3, #4]
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80074c6:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80074c8:	e017      	b.n	80074fa <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80074ca:	68f8      	ldr	r0, [r7, #12]
 80074cc:	f000 fbf8 	bl	8007cc0 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80074d0:	e013      	b.n	80074fa <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80074d2:	2140      	movs	r1, #64	@ 0x40
 80074d4:	68f8      	ldr	r0, [r7, #12]
 80074d6:	f000 fffd 	bl	80084d4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80074da:	e00e      	b.n	80074fa <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	f003 0320 	and.w	r3, r3, #32
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d00a      	beq.n	80074fc <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d005      	beq.n	80074fc <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80074f0:	68b9      	ldr	r1, [r7, #8]
 80074f2:	68f8      	ldr	r0, [r7, #12]
 80074f4:	f000 fc7e 	bl	8007df4 <I2C_ITMasterCplt>
 80074f8:	e000      	b.n	80074fc <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 80074fa:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	2200      	movs	r2, #0
 8007500:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007504:	2300      	movs	r3, #0
}
 8007506:	4618      	mov	r0, r3
 8007508:	3718      	adds	r7, #24
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}
	...

08007510 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b088      	sub	sp, #32
 8007514:	af02      	add	r7, sp, #8
 8007516:	60f8      	str	r0, [r7, #12]
 8007518:	60b9      	str	r1, [r7, #8]
 800751a:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800751c:	4b8d      	ldr	r3, [pc, #564]	@ (8007754 <I2C_Mem_ISR_DMA+0x244>)
 800751e:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007526:	2b01      	cmp	r3, #1
 8007528:	d101      	bne.n	800752e <I2C_Mem_ISR_DMA+0x1e>
 800752a:	2302      	movs	r3, #2
 800752c:	e10e      	b.n	800774c <I2C_Mem_ISR_DMA+0x23c>
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2201      	movs	r2, #1
 8007532:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007536:	68bb      	ldr	r3, [r7, #8]
 8007538:	f003 0310 	and.w	r3, r3, #16
 800753c:	2b00      	cmp	r3, #0
 800753e:	d016      	beq.n	800756e <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007546:	2b00      	cmp	r3, #0
 8007548:	d011      	beq.n	800756e <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	2210      	movs	r2, #16
 8007550:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007556:	f043 0204 	orr.w	r2, r3, #4
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800755e:	2120      	movs	r1, #32
 8007560:	68f8      	ldr	r0, [r7, #12]
 8007562:	f001 fc8b 	bl	8008e7c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007566:	68f8      	ldr	r0, [r7, #12]
 8007568:	f001 f8cb 	bl	8008702 <I2C_Flush_TXDR>
 800756c:	e0e9      	b.n	8007742 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	f003 0302 	and.w	r3, r3, #2
 8007574:	2b00      	cmp	r3, #0
 8007576:	d00e      	beq.n	8007596 <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800757e:	2b00      	cmp	r3, #0
 8007580:	d009      	beq.n	8007596 <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	68fa      	ldr	r2, [r7, #12]
 8007588:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800758a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	f04f 32ff 	mov.w	r2, #4294967295
 8007592:	651a      	str	r2, [r3, #80]	@ 0x50
 8007594:	e0d5      	b.n	8007742 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800759c:	2b00      	cmp	r3, #0
 800759e:	d05f      	beq.n	8007660 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d05a      	beq.n	8007660 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80075aa:	2101      	movs	r1, #1
 80075ac:	68f8      	ldr	r0, [r7, #12]
 80075ae:	f001 fce9 	bl	8008f84 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80075b2:	2110      	movs	r1, #16
 80075b4:	68f8      	ldr	r0, [r7, #12]
 80075b6:	f001 fc61 	bl	8008e7c <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80075be:	b29b      	uxth	r3, r3
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d048      	beq.n	8007656 <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80075c8:	b29b      	uxth	r3, r3
 80075ca:	2bff      	cmp	r3, #255	@ 0xff
 80075cc:	d910      	bls.n	80075f0 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	22ff      	movs	r2, #255	@ 0xff
 80075d2:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80075d8:	b299      	uxth	r1, r3
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80075de:	b2da      	uxtb	r2, r3
 80075e0:	2300      	movs	r3, #0
 80075e2:	9300      	str	r3, [sp, #0]
 80075e4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80075e8:	68f8      	ldr	r0, [r7, #12]
 80075ea:	f001 fc15 	bl	8008e18 <I2C_TransferConfig>
 80075ee:	e011      	b.n	8007614 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80075f4:	b29a      	uxth	r2, r3
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80075fe:	b299      	uxth	r1, r3
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007604:	b2da      	uxtb	r2, r3
 8007606:	2300      	movs	r3, #0
 8007608:	9300      	str	r3, [sp, #0]
 800760a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800760e:	68f8      	ldr	r0, [r7, #12]
 8007610:	f001 fc02 	bl	8008e18 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007618:	b29a      	uxth	r2, r3
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800761e:	1ad3      	subs	r3, r2, r3
 8007620:	b29a      	uxth	r2, r3
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800762c:	b2db      	uxtb	r3, r3
 800762e:	2b22      	cmp	r3, #34	@ 0x22
 8007630:	d108      	bne.n	8007644 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	681a      	ldr	r2, [r3, #0]
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007640:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8007642:	e07e      	b.n	8007742 <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	681a      	ldr	r2, [r3, #0]
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007652:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8007654:	e075      	b.n	8007742 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8007656:	2140      	movs	r1, #64	@ 0x40
 8007658:	68f8      	ldr	r0, [r7, #12]
 800765a:	f000 ff3b 	bl	80084d4 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800765e:	e070      	b.n	8007742 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007666:	2b00      	cmp	r3, #0
 8007668:	d05d      	beq.n	8007726 <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8007670:	2b00      	cmp	r3, #0
 8007672:	d058      	beq.n	8007726 <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007674:	2101      	movs	r1, #1
 8007676:	68f8      	ldr	r0, [r7, #12]
 8007678:	f001 fc84 	bl	8008f84 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800767c:	2110      	movs	r1, #16
 800767e:	68f8      	ldr	r0, [r7, #12]
 8007680:	f001 fbfc 	bl	8008e7c <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800768a:	b2db      	uxtb	r3, r3
 800768c:	2b22      	cmp	r3, #34	@ 0x22
 800768e:	d101      	bne.n	8007694 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 8007690:	4b31      	ldr	r3, [pc, #196]	@ (8007758 <I2C_Mem_ISR_DMA+0x248>)
 8007692:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007698:	b29b      	uxth	r3, r3
 800769a:	2bff      	cmp	r3, #255	@ 0xff
 800769c:	d910      	bls.n	80076c0 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	22ff      	movs	r2, #255	@ 0xff
 80076a2:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80076a8:	b299      	uxth	r1, r3
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80076ae:	b2da      	uxtb	r2, r3
 80076b0:	697b      	ldr	r3, [r7, #20]
 80076b2:	9300      	str	r3, [sp, #0]
 80076b4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80076b8:	68f8      	ldr	r0, [r7, #12]
 80076ba:	f001 fbad 	bl	8008e18 <I2C_TransferConfig>
 80076be:	e011      	b.n	80076e4 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076c4:	b29a      	uxth	r2, r3
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80076ce:	b299      	uxth	r1, r3
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80076d4:	b2da      	uxtb	r2, r3
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	9300      	str	r3, [sp, #0]
 80076da:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80076de:	68f8      	ldr	r0, [r7, #12]
 80076e0:	f001 fb9a 	bl	8008e18 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076e8:	b29a      	uxth	r2, r3
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80076ee:	1ad3      	subs	r3, r2, r3
 80076f0:	b29a      	uxth	r2, r3
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80076fc:	b2db      	uxtb	r3, r3
 80076fe:	2b22      	cmp	r3, #34	@ 0x22
 8007700:	d108      	bne.n	8007714 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	681a      	ldr	r2, [r3, #0]
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007710:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007712:	e016      	b.n	8007742 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	681a      	ldr	r2, [r3, #0]
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007722:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007724:	e00d      	b.n	8007742 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	f003 0320 	and.w	r3, r3, #32
 800772c:	2b00      	cmp	r3, #0
 800772e:	d008      	beq.n	8007742 <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007736:	2b00      	cmp	r3, #0
 8007738:	d003      	beq.n	8007742 <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800773a:	68b9      	ldr	r1, [r7, #8]
 800773c:	68f8      	ldr	r0, [r7, #12]
 800773e:	f000 fb59 	bl	8007df4 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	2200      	movs	r2, #0
 8007746:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800774a:	2300      	movs	r3, #0
}
 800774c:	4618      	mov	r0, r3
 800774e:	3718      	adds	r7, #24
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}
 8007754:	80002000 	.word	0x80002000
 8007758:	80002400 	.word	0x80002400

0800775c <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b088      	sub	sp, #32
 8007760:	af00      	add	r7, sp, #0
 8007762:	60f8      	str	r0, [r7, #12]
 8007764:	60b9      	str	r1, [r7, #8]
 8007766:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800776c:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800776e:	2300      	movs	r3, #0
 8007770:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007778:	2b01      	cmp	r3, #1
 800777a:	d101      	bne.n	8007780 <I2C_Slave_ISR_DMA+0x24>
 800777c:	2302      	movs	r3, #2
 800777e:	e1c2      	b.n	8007b06 <I2C_Slave_ISR_DMA+0x3aa>
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2201      	movs	r2, #1
 8007784:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	f003 0320 	and.w	r3, r3, #32
 800778e:	2b00      	cmp	r3, #0
 8007790:	d009      	beq.n	80077a6 <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007798:	2b00      	cmp	r3, #0
 800779a:	d004      	beq.n	80077a6 <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800779c:	68b9      	ldr	r1, [r7, #8]
 800779e:	68f8      	ldr	r0, [r7, #12]
 80077a0:	f000 fbf0 	bl	8007f84 <I2C_ITSlaveCplt>
 80077a4:	e1aa      	b.n	8007afc <I2C_Slave_ISR_DMA+0x3a0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	f003 0310 	and.w	r3, r3, #16
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	f000 8197 	beq.w	8007ae0 <I2C_Slave_ISR_DMA+0x384>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	f000 8191 	beq.w	8007ae0 <I2C_Slave_ISR_DMA+0x384>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d105      	bne.n	80077d4 <I2C_Slave_ISR_DMA+0x78>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	f000 817f 	beq.w	8007ad2 <I2C_Slave_ISR_DMA+0x376>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d07b      	beq.n	80078d4 <I2C_Slave_ISR_DMA+0x178>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d076      	beq.n	80078d4 <I2C_Slave_ISR_DMA+0x178>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	4a74      	ldr	r2, [pc, #464]	@ (80079c0 <I2C_Slave_ISR_DMA+0x264>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d059      	beq.n	80078a6 <I2C_Slave_ISR_DMA+0x14a>
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4a72      	ldr	r2, [pc, #456]	@ (80079c4 <I2C_Slave_ISR_DMA+0x268>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d053      	beq.n	80078a6 <I2C_Slave_ISR_DMA+0x14a>
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4a70      	ldr	r2, [pc, #448]	@ (80079c8 <I2C_Slave_ISR_DMA+0x26c>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d04d      	beq.n	80078a6 <I2C_Slave_ISR_DMA+0x14a>
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4a6e      	ldr	r2, [pc, #440]	@ (80079cc <I2C_Slave_ISR_DMA+0x270>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d047      	beq.n	80078a6 <I2C_Slave_ISR_DMA+0x14a>
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4a6c      	ldr	r2, [pc, #432]	@ (80079d0 <I2C_Slave_ISR_DMA+0x274>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d041      	beq.n	80078a6 <I2C_Slave_ISR_DMA+0x14a>
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	4a6a      	ldr	r2, [pc, #424]	@ (80079d4 <I2C_Slave_ISR_DMA+0x278>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d03b      	beq.n	80078a6 <I2C_Slave_ISR_DMA+0x14a>
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	4a68      	ldr	r2, [pc, #416]	@ (80079d8 <I2C_Slave_ISR_DMA+0x27c>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d035      	beq.n	80078a6 <I2C_Slave_ISR_DMA+0x14a>
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4a66      	ldr	r2, [pc, #408]	@ (80079dc <I2C_Slave_ISR_DMA+0x280>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d02f      	beq.n	80078a6 <I2C_Slave_ISR_DMA+0x14a>
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	4a64      	ldr	r2, [pc, #400]	@ (80079e0 <I2C_Slave_ISR_DMA+0x284>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d029      	beq.n	80078a6 <I2C_Slave_ISR_DMA+0x14a>
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	4a62      	ldr	r2, [pc, #392]	@ (80079e4 <I2C_Slave_ISR_DMA+0x288>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d023      	beq.n	80078a6 <I2C_Slave_ISR_DMA+0x14a>
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4a60      	ldr	r2, [pc, #384]	@ (80079e8 <I2C_Slave_ISR_DMA+0x28c>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d01d      	beq.n	80078a6 <I2C_Slave_ISR_DMA+0x14a>
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4a5e      	ldr	r2, [pc, #376]	@ (80079ec <I2C_Slave_ISR_DMA+0x290>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d017      	beq.n	80078a6 <I2C_Slave_ISR_DMA+0x14a>
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a5c      	ldr	r2, [pc, #368]	@ (80079f0 <I2C_Slave_ISR_DMA+0x294>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d011      	beq.n	80078a6 <I2C_Slave_ISR_DMA+0x14a>
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	4a5a      	ldr	r2, [pc, #360]	@ (80079f4 <I2C_Slave_ISR_DMA+0x298>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d00b      	beq.n	80078a6 <I2C_Slave_ISR_DMA+0x14a>
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4a58      	ldr	r2, [pc, #352]	@ (80079f8 <I2C_Slave_ISR_DMA+0x29c>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d005      	beq.n	80078a6 <I2C_Slave_ISR_DMA+0x14a>
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4a56      	ldr	r2, [pc, #344]	@ (80079fc <I2C_Slave_ISR_DMA+0x2a0>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d109      	bne.n	80078ba <I2C_Slave_ISR_DMA+0x15e>
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	685b      	ldr	r3, [r3, #4]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	bf0c      	ite	eq
 80078b2:	2301      	moveq	r3, #1
 80078b4:	2300      	movne	r3, #0
 80078b6:	b2db      	uxtb	r3, r3
 80078b8:	e008      	b.n	80078cc <I2C_Slave_ISR_DMA+0x170>
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	685b      	ldr	r3, [r3, #4]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	bf0c      	ite	eq
 80078c6:	2301      	moveq	r3, #1
 80078c8:	2300      	movne	r3, #0
 80078ca:	b2db      	uxtb	r3, r3
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d001      	beq.n	80078d4 <I2C_Slave_ISR_DMA+0x178>
          {
            treatdmanack = 1U;
 80078d0:	2301      	movs	r3, #1
 80078d2:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078d8:	2b00      	cmp	r3, #0
 80078da:	f000 809e 	beq.w	8007a1a <I2C_Slave_ISR_DMA+0x2be>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	f000 8098 	beq.w	8007a1a <I2C_Slave_ISR_DMA+0x2be>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4a33      	ldr	r2, [pc, #204]	@ (80079c0 <I2C_Slave_ISR_DMA+0x264>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d059      	beq.n	80079aa <I2C_Slave_ISR_DMA+0x24e>
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	4a31      	ldr	r2, [pc, #196]	@ (80079c4 <I2C_Slave_ISR_DMA+0x268>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d053      	beq.n	80079aa <I2C_Slave_ISR_DMA+0x24e>
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4a2f      	ldr	r2, [pc, #188]	@ (80079c8 <I2C_Slave_ISR_DMA+0x26c>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d04d      	beq.n	80079aa <I2C_Slave_ISR_DMA+0x24e>
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4a2d      	ldr	r2, [pc, #180]	@ (80079cc <I2C_Slave_ISR_DMA+0x270>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d047      	beq.n	80079aa <I2C_Slave_ISR_DMA+0x24e>
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	4a2b      	ldr	r2, [pc, #172]	@ (80079d0 <I2C_Slave_ISR_DMA+0x274>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d041      	beq.n	80079aa <I2C_Slave_ISR_DMA+0x24e>
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4a29      	ldr	r2, [pc, #164]	@ (80079d4 <I2C_Slave_ISR_DMA+0x278>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d03b      	beq.n	80079aa <I2C_Slave_ISR_DMA+0x24e>
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	4a27      	ldr	r2, [pc, #156]	@ (80079d8 <I2C_Slave_ISR_DMA+0x27c>)
 800793a:	4293      	cmp	r3, r2
 800793c:	d035      	beq.n	80079aa <I2C_Slave_ISR_DMA+0x24e>
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	4a25      	ldr	r2, [pc, #148]	@ (80079dc <I2C_Slave_ISR_DMA+0x280>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d02f      	beq.n	80079aa <I2C_Slave_ISR_DMA+0x24e>
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	4a23      	ldr	r2, [pc, #140]	@ (80079e0 <I2C_Slave_ISR_DMA+0x284>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d029      	beq.n	80079aa <I2C_Slave_ISR_DMA+0x24e>
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a21      	ldr	r2, [pc, #132]	@ (80079e4 <I2C_Slave_ISR_DMA+0x288>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d023      	beq.n	80079aa <I2C_Slave_ISR_DMA+0x24e>
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	4a1f      	ldr	r2, [pc, #124]	@ (80079e8 <I2C_Slave_ISR_DMA+0x28c>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d01d      	beq.n	80079aa <I2C_Slave_ISR_DMA+0x24e>
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	4a1d      	ldr	r2, [pc, #116]	@ (80079ec <I2C_Slave_ISR_DMA+0x290>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d017      	beq.n	80079aa <I2C_Slave_ISR_DMA+0x24e>
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4a1b      	ldr	r2, [pc, #108]	@ (80079f0 <I2C_Slave_ISR_DMA+0x294>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d011      	beq.n	80079aa <I2C_Slave_ISR_DMA+0x24e>
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	4a19      	ldr	r2, [pc, #100]	@ (80079f4 <I2C_Slave_ISR_DMA+0x298>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d00b      	beq.n	80079aa <I2C_Slave_ISR_DMA+0x24e>
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	4a17      	ldr	r2, [pc, #92]	@ (80079f8 <I2C_Slave_ISR_DMA+0x29c>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d005      	beq.n	80079aa <I2C_Slave_ISR_DMA+0x24e>
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4a15      	ldr	r2, [pc, #84]	@ (80079fc <I2C_Slave_ISR_DMA+0x2a0>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d12a      	bne.n	8007a00 <I2C_Slave_ISR_DMA+0x2a4>
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	685b      	ldr	r3, [r3, #4]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	bf0c      	ite	eq
 80079b6:	2301      	moveq	r3, #1
 80079b8:	2300      	movne	r3, #0
 80079ba:	b2db      	uxtb	r3, r3
 80079bc:	e029      	b.n	8007a12 <I2C_Slave_ISR_DMA+0x2b6>
 80079be:	bf00      	nop
 80079c0:	40020010 	.word	0x40020010
 80079c4:	40020028 	.word	0x40020028
 80079c8:	40020040 	.word	0x40020040
 80079cc:	40020058 	.word	0x40020058
 80079d0:	40020070 	.word	0x40020070
 80079d4:	40020088 	.word	0x40020088
 80079d8:	400200a0 	.word	0x400200a0
 80079dc:	400200b8 	.word	0x400200b8
 80079e0:	40020410 	.word	0x40020410
 80079e4:	40020428 	.word	0x40020428
 80079e8:	40020440 	.word	0x40020440
 80079ec:	40020458 	.word	0x40020458
 80079f0:	40020470 	.word	0x40020470
 80079f4:	40020488 	.word	0x40020488
 80079f8:	400204a0 	.word	0x400204a0
 80079fc:	400204b8 	.word	0x400204b8
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	685b      	ldr	r3, [r3, #4]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	bf0c      	ite	eq
 8007a0c:	2301      	moveq	r3, #1
 8007a0e:	2300      	movne	r3, #0
 8007a10:	b2db      	uxtb	r3, r3
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d001      	beq.n	8007a1a <I2C_Slave_ISR_DMA+0x2be>
          {
            treatdmanack = 1U;
 8007a16:	2301      	movs	r3, #1
 8007a18:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8007a1a:	69fb      	ldr	r3, [r7, #28]
 8007a1c:	2b01      	cmp	r3, #1
 8007a1e:	d128      	bne.n	8007a72 <I2C_Slave_ISR_DMA+0x316>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a26:	b2db      	uxtb	r3, r3
 8007a28:	2b28      	cmp	r3, #40	@ 0x28
 8007a2a:	d108      	bne.n	8007a3e <I2C_Slave_ISR_DMA+0x2e2>
 8007a2c:	69bb      	ldr	r3, [r7, #24]
 8007a2e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007a32:	d104      	bne.n	8007a3e <I2C_Slave_ISR_DMA+0x2e2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8007a34:	68b9      	ldr	r1, [r7, #8]
 8007a36:	68f8      	ldr	r0, [r7, #12]
 8007a38:	f000 fcf8 	bl	800842c <I2C_ITListenCplt>
 8007a3c:	e048      	b.n	8007ad0 <I2C_Slave_ISR_DMA+0x374>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a44:	b2db      	uxtb	r3, r3
 8007a46:	2b29      	cmp	r3, #41	@ 0x29
 8007a48:	d10e      	bne.n	8007a68 <I2C_Slave_ISR_DMA+0x30c>
 8007a4a:	69bb      	ldr	r3, [r7, #24]
 8007a4c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007a50:	d00a      	beq.n	8007a68 <I2C_Slave_ISR_DMA+0x30c>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	2210      	movs	r2, #16
 8007a58:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8007a5a:	68f8      	ldr	r0, [r7, #12]
 8007a5c:	f000 fe51 	bl	8008702 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8007a60:	68f8      	ldr	r0, [r7, #12]
 8007a62:	f000 f96a 	bl	8007d3a <I2C_ITSlaveSeqCplt>
 8007a66:	e033      	b.n	8007ad0 <I2C_Slave_ISR_DMA+0x374>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	2210      	movs	r2, #16
 8007a6e:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8007a70:	e034      	b.n	8007adc <I2C_Slave_ISR_DMA+0x380>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	2210      	movs	r2, #16
 8007a78:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a7e:	f043 0204 	orr.w	r2, r3, #4
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a8c:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007a8e:	69bb      	ldr	r3, [r7, #24]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d003      	beq.n	8007a9c <I2C_Slave_ISR_DMA+0x340>
 8007a94:	69bb      	ldr	r3, [r7, #24]
 8007a96:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007a9a:	d11f      	bne.n	8007adc <I2C_Slave_ISR_DMA+0x380>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007a9c:	7dfb      	ldrb	r3, [r7, #23]
 8007a9e:	2b21      	cmp	r3, #33	@ 0x21
 8007aa0:	d002      	beq.n	8007aa8 <I2C_Slave_ISR_DMA+0x34c>
 8007aa2:	7dfb      	ldrb	r3, [r7, #23]
 8007aa4:	2b29      	cmp	r3, #41	@ 0x29
 8007aa6:	d103      	bne.n	8007ab0 <I2C_Slave_ISR_DMA+0x354>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	2221      	movs	r2, #33	@ 0x21
 8007aac:	631a      	str	r2, [r3, #48]	@ 0x30
 8007aae:	e008      	b.n	8007ac2 <I2C_Slave_ISR_DMA+0x366>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007ab0:	7dfb      	ldrb	r3, [r7, #23]
 8007ab2:	2b22      	cmp	r3, #34	@ 0x22
 8007ab4:	d002      	beq.n	8007abc <I2C_Slave_ISR_DMA+0x360>
 8007ab6:	7dfb      	ldrb	r3, [r7, #23]
 8007ab8:	2b2a      	cmp	r3, #42	@ 0x2a
 8007aba:	d102      	bne.n	8007ac2 <I2C_Slave_ISR_DMA+0x366>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	2222      	movs	r2, #34	@ 0x22
 8007ac0:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ac6:	4619      	mov	r1, r3
 8007ac8:	68f8      	ldr	r0, [r7, #12]
 8007aca:	f000 fd03 	bl	80084d4 <I2C_ITError>
      if (treatdmanack == 1U)
 8007ace:	e005      	b.n	8007adc <I2C_Slave_ISR_DMA+0x380>
 8007ad0:	e004      	b.n	8007adc <I2C_Slave_ISR_DMA+0x380>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	2210      	movs	r2, #16
 8007ad8:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8007ada:	e00f      	b.n	8007afc <I2C_Slave_ISR_DMA+0x3a0>
      if (treatdmanack == 1U)
 8007adc:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8007ade:	e00d      	b.n	8007afc <I2C_Slave_ISR_DMA+0x3a0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	f003 0308 	and.w	r3, r3, #8
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d008      	beq.n	8007afc <I2C_Slave_ISR_DMA+0x3a0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d003      	beq.n	8007afc <I2C_Slave_ISR_DMA+0x3a0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8007af4:	68b9      	ldr	r1, [r7, #8]
 8007af6:	68f8      	ldr	r0, [r7, #12]
 8007af8:	f000 f85e 	bl	8007bb8 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	2200      	movs	r2, #0
 8007b00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007b04:	2300      	movs	r3, #0
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3720      	adds	r7, #32
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}
 8007b0e:	bf00      	nop

08007b10 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b086      	sub	sp, #24
 8007b14:	af02      	add	r7, sp, #8
 8007b16:	60f8      	str	r0, [r7, #12]
 8007b18:	4608      	mov	r0, r1
 8007b1a:	4611      	mov	r1, r2
 8007b1c:	461a      	mov	r2, r3
 8007b1e:	4603      	mov	r3, r0
 8007b20:	817b      	strh	r3, [r7, #10]
 8007b22:	460b      	mov	r3, r1
 8007b24:	813b      	strh	r3, [r7, #8]
 8007b26:	4613      	mov	r3, r2
 8007b28:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007b2a:	88fb      	ldrh	r3, [r7, #6]
 8007b2c:	b2da      	uxtb	r2, r3
 8007b2e:	8979      	ldrh	r1, [r7, #10]
 8007b30:	4b20      	ldr	r3, [pc, #128]	@ (8007bb4 <I2C_RequestMemoryRead+0xa4>)
 8007b32:	9300      	str	r3, [sp, #0]
 8007b34:	2300      	movs	r3, #0
 8007b36:	68f8      	ldr	r0, [r7, #12]
 8007b38:	f001 f96e 	bl	8008e18 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007b3c:	69fa      	ldr	r2, [r7, #28]
 8007b3e:	69b9      	ldr	r1, [r7, #24]
 8007b40:	68f8      	ldr	r0, [r7, #12]
 8007b42:	f000 fffe 	bl	8008b42 <I2C_WaitOnTXISFlagUntilTimeout>
 8007b46:	4603      	mov	r3, r0
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d001      	beq.n	8007b50 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	e02c      	b.n	8007baa <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007b50:	88fb      	ldrh	r3, [r7, #6]
 8007b52:	2b01      	cmp	r3, #1
 8007b54:	d105      	bne.n	8007b62 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007b56:	893b      	ldrh	r3, [r7, #8]
 8007b58:	b2da      	uxtb	r2, r3
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	629a      	str	r2, [r3, #40]	@ 0x28
 8007b60:	e015      	b.n	8007b8e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007b62:	893b      	ldrh	r3, [r7, #8]
 8007b64:	0a1b      	lsrs	r3, r3, #8
 8007b66:	b29b      	uxth	r3, r3
 8007b68:	b2da      	uxtb	r2, r3
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007b70:	69fa      	ldr	r2, [r7, #28]
 8007b72:	69b9      	ldr	r1, [r7, #24]
 8007b74:	68f8      	ldr	r0, [r7, #12]
 8007b76:	f000 ffe4 	bl	8008b42 <I2C_WaitOnTXISFlagUntilTimeout>
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d001      	beq.n	8007b84 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8007b80:	2301      	movs	r3, #1
 8007b82:	e012      	b.n	8007baa <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007b84:	893b      	ldrh	r3, [r7, #8]
 8007b86:	b2da      	uxtb	r2, r3
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007b8e:	69fb      	ldr	r3, [r7, #28]
 8007b90:	9300      	str	r3, [sp, #0]
 8007b92:	69bb      	ldr	r3, [r7, #24]
 8007b94:	2200      	movs	r2, #0
 8007b96:	2140      	movs	r1, #64	@ 0x40
 8007b98:	68f8      	ldr	r0, [r7, #12]
 8007b9a:	f000 ff79 	bl	8008a90 <I2C_WaitOnFlagUntilTimeout>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d001      	beq.n	8007ba8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	e000      	b.n	8007baa <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8007ba8:	2300      	movs	r3, #0
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3710      	adds	r7, #16
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}
 8007bb2:	bf00      	nop
 8007bb4:	80002000 	.word	0x80002000

08007bb8 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b084      	sub	sp, #16
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
 8007bc0:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007bc8:	b2db      	uxtb	r3, r3
 8007bca:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007bce:	2b28      	cmp	r3, #40	@ 0x28
 8007bd0:	d16a      	bne.n	8007ca8 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	699b      	ldr	r3, [r3, #24]
 8007bd8:	0c1b      	lsrs	r3, r3, #16
 8007bda:	b2db      	uxtb	r3, r3
 8007bdc:	f003 0301 	and.w	r3, r3, #1
 8007be0:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	699b      	ldr	r3, [r3, #24]
 8007be8:	0c1b      	lsrs	r3, r3, #16
 8007bea:	b29b      	uxth	r3, r3
 8007bec:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8007bf0:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	689b      	ldr	r3, [r3, #8]
 8007bf8:	b29b      	uxth	r3, r3
 8007bfa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007bfe:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	68db      	ldr	r3, [r3, #12]
 8007c06:	b29b      	uxth	r3, r3
 8007c08:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8007c0c:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	68db      	ldr	r3, [r3, #12]
 8007c12:	2b02      	cmp	r3, #2
 8007c14:	d138      	bne.n	8007c88 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8007c16:	897b      	ldrh	r3, [r7, #10]
 8007c18:	09db      	lsrs	r3, r3, #7
 8007c1a:	b29a      	uxth	r2, r3
 8007c1c:	89bb      	ldrh	r3, [r7, #12]
 8007c1e:	4053      	eors	r3, r2
 8007c20:	b29b      	uxth	r3, r3
 8007c22:	f003 0306 	and.w	r3, r3, #6
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d11c      	bne.n	8007c64 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8007c2a:	897b      	ldrh	r3, [r7, #10]
 8007c2c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c32:	1c5a      	adds	r2, r3, #1
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c3c:	2b02      	cmp	r3, #2
 8007c3e:	d13b      	bne.n	8007cb8 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2200      	movs	r2, #0
 8007c44:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	2208      	movs	r2, #8
 8007c4c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2200      	movs	r2, #0
 8007c52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007c56:	89ba      	ldrh	r2, [r7, #12]
 8007c58:	7bfb      	ldrb	r3, [r7, #15]
 8007c5a:	4619      	mov	r1, r3
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f7ff fa32 	bl	80070c6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007c62:	e029      	b.n	8007cb8 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8007c64:	893b      	ldrh	r3, [r7, #8]
 8007c66:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8007c68:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f001 f989 	bl	8008f84 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2200      	movs	r2, #0
 8007c76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007c7a:	89ba      	ldrh	r2, [r7, #12]
 8007c7c:	7bfb      	ldrb	r3, [r7, #15]
 8007c7e:	4619      	mov	r1, r3
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f7ff fa20 	bl	80070c6 <HAL_I2C_AddrCallback>
}
 8007c86:	e017      	b.n	8007cb8 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8007c88:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	f001 f979 	bl	8008f84 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2200      	movs	r2, #0
 8007c96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007c9a:	89ba      	ldrh	r2, [r7, #12]
 8007c9c:	7bfb      	ldrb	r3, [r7, #15]
 8007c9e:	4619      	mov	r1, r3
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f7ff fa10 	bl	80070c6 <HAL_I2C_AddrCallback>
}
 8007ca6:	e007      	b.n	8007cb8 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	2208      	movs	r2, #8
 8007cae:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8007cb8:	bf00      	nop
 8007cba:	3710      	adds	r7, #16
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}

08007cc0 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b082      	sub	sp, #8
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2200      	movs	r2, #0
 8007ccc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007cd6:	b2db      	uxtb	r3, r3
 8007cd8:	2b21      	cmp	r3, #33	@ 0x21
 8007cda:	d115      	bne.n	8007d08 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2220      	movs	r2, #32
 8007ce0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2211      	movs	r2, #17
 8007ce8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2200      	movs	r2, #0
 8007cee:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007cf0:	2101      	movs	r1, #1
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f001 f946 	bl	8008f84 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f7ff f9b8 	bl	8007076 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007d06:	e014      	b.n	8007d32 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2220      	movs	r2, #32
 8007d0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2212      	movs	r2, #18
 8007d14:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2200      	movs	r2, #0
 8007d1a:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8007d1c:	2102      	movs	r1, #2
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f001 f930 	bl	8008f84 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2200      	movs	r2, #0
 8007d28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f7ff f9ac 	bl	800708a <HAL_I2C_MasterRxCpltCallback>
}
 8007d32:	bf00      	nop
 8007d34:	3708      	adds	r7, #8
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bd80      	pop	{r7, pc}

08007d3a <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8007d3a:	b580      	push	{r7, lr}
 8007d3c:	b084      	sub	sp, #16
 8007d3e:	af00      	add	r7, sp, #0
 8007d40:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d008      	beq.n	8007d6e <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	681a      	ldr	r2, [r3, #0]
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007d6a:	601a      	str	r2, [r3, #0]
 8007d6c:	e00c      	b.n	8007d88 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d007      	beq.n	8007d88 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	681a      	ldr	r2, [r3, #0]
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007d86:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007d8e:	b2db      	uxtb	r3, r3
 8007d90:	2b29      	cmp	r3, #41	@ 0x29
 8007d92:	d112      	bne.n	8007dba <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2228      	movs	r2, #40	@ 0x28
 8007d98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2221      	movs	r2, #33	@ 0x21
 8007da0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007da2:	2101      	movs	r1, #1
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f001 f8ed 	bl	8008f84 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2200      	movs	r2, #0
 8007dae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f7ff f973 	bl	800709e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8007db8:	e017      	b.n	8007dea <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007dc0:	b2db      	uxtb	r3, r3
 8007dc2:	2b2a      	cmp	r3, #42	@ 0x2a
 8007dc4:	d111      	bne.n	8007dea <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2228      	movs	r2, #40	@ 0x28
 8007dca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2222      	movs	r2, #34	@ 0x22
 8007dd2:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8007dd4:	2102      	movs	r1, #2
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f001 f8d4 	bl	8008f84 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2200      	movs	r2, #0
 8007de0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	f7ff f964 	bl	80070b2 <HAL_I2C_SlaveRxCpltCallback>
}
 8007dea:	bf00      	nop
 8007dec:	3710      	adds	r7, #16
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}
	...

08007df4 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b086      	sub	sp, #24
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
 8007dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	2220      	movs	r2, #32
 8007e08:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007e10:	b2db      	uxtb	r3, r3
 8007e12:	2b21      	cmp	r3, #33	@ 0x21
 8007e14:	d107      	bne.n	8007e26 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007e16:	2101      	movs	r1, #1
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f001 f8b3 	bl	8008f84 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2211      	movs	r2, #17
 8007e22:	631a      	str	r2, [r3, #48]	@ 0x30
 8007e24:	e00c      	b.n	8007e40 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007e2c:	b2db      	uxtb	r3, r3
 8007e2e:	2b22      	cmp	r3, #34	@ 0x22
 8007e30:	d106      	bne.n	8007e40 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8007e32:	2102      	movs	r1, #2
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f001 f8a5 	bl	8008f84 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2212      	movs	r2, #18
 8007e3e:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	6859      	ldr	r1, [r3, #4]
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681a      	ldr	r2, [r3, #0]
 8007e4a:	4b4c      	ldr	r3, [pc, #304]	@ (8007f7c <I2C_ITMasterCplt+0x188>)
 8007e4c:	400b      	ands	r3, r1
 8007e4e:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2200      	movs	r2, #0
 8007e54:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	4a49      	ldr	r2, [pc, #292]	@ (8007f80 <I2C_ITMasterCplt+0x18c>)
 8007e5a:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8007e5c:	697b      	ldr	r3, [r7, #20]
 8007e5e:	f003 0310 	and.w	r3, r3, #16
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d009      	beq.n	8007e7a <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	2210      	movs	r2, #16
 8007e6c:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e72:	f043 0204 	orr.w	r2, r3, #4
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007e80:	b2db      	uxtb	r3, r3
 8007e82:	2b60      	cmp	r3, #96	@ 0x60
 8007e84:	d10a      	bne.n	8007e9c <I2C_ITMasterCplt+0xa8>
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	f003 0304 	and.w	r3, r3, #4
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d005      	beq.n	8007e9c <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e96:	b2db      	uxtb	r3, r3
 8007e98:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8007e9a:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f000 fc30 	bl	8008702 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ea6:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007eae:	b2db      	uxtb	r3, r3
 8007eb0:	2b60      	cmp	r3, #96	@ 0x60
 8007eb2:	d002      	beq.n	8007eba <I2C_ITMasterCplt+0xc6>
 8007eb4:	693b      	ldr	r3, [r7, #16]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d006      	beq.n	8007ec8 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ebe:	4619      	mov	r1, r3
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	f000 fb07 	bl	80084d4 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8007ec6:	e054      	b.n	8007f72 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ece:	b2db      	uxtb	r3, r3
 8007ed0:	2b21      	cmp	r3, #33	@ 0x21
 8007ed2:	d124      	bne.n	8007f1e <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2220      	movs	r2, #32
 8007ed8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2200      	movs	r2, #0
 8007ee0:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007ee8:	b2db      	uxtb	r3, r3
 8007eea:	2b40      	cmp	r3, #64	@ 0x40
 8007eec:	d10b      	bne.n	8007f06 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f7ff f8f9 	bl	80070f6 <HAL_I2C_MemTxCpltCallback>
}
 8007f04:	e035      	b.n	8007f72 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2200      	movs	r2, #0
 8007f0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2200      	movs	r2, #0
 8007f12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f7ff f8ad 	bl	8007076 <HAL_I2C_MasterTxCpltCallback>
}
 8007f1c:	e029      	b.n	8007f72 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007f24:	b2db      	uxtb	r3, r3
 8007f26:	2b22      	cmp	r3, #34	@ 0x22
 8007f28:	d123      	bne.n	8007f72 <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2220      	movs	r2, #32
 8007f2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2200      	movs	r2, #0
 8007f36:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007f3e:	b2db      	uxtb	r3, r3
 8007f40:	2b40      	cmp	r3, #64	@ 0x40
 8007f42:	d10b      	bne.n	8007f5c <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2200      	movs	r2, #0
 8007f48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2200      	movs	r2, #0
 8007f50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	f7ff f8d8 	bl	800710a <HAL_I2C_MemRxCpltCallback>
}
 8007f5a:	e00a      	b.n	8007f72 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2200      	movs	r2, #0
 8007f60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2200      	movs	r2, #0
 8007f68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f7ff f88c 	bl	800708a <HAL_I2C_MasterRxCpltCallback>
}
 8007f72:	bf00      	nop
 8007f74:	3718      	adds	r7, #24
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}
 8007f7a:	bf00      	nop
 8007f7c:	fe00e800 	.word	0xfe00e800
 8007f80:	ffff0000 	.word	0xffff0000

08007f84 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b086      	sub	sp, #24
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
 8007f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f9e:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007fa6:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	2220      	movs	r2, #32
 8007fae:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007fb0:	7afb      	ldrb	r3, [r7, #11]
 8007fb2:	2b21      	cmp	r3, #33	@ 0x21
 8007fb4:	d002      	beq.n	8007fbc <I2C_ITSlaveCplt+0x38>
 8007fb6:	7afb      	ldrb	r3, [r7, #11]
 8007fb8:	2b29      	cmp	r3, #41	@ 0x29
 8007fba:	d108      	bne.n	8007fce <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8007fbc:	f248 0101 	movw	r1, #32769	@ 0x8001
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f000 ffdf 	bl	8008f84 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2221      	movs	r2, #33	@ 0x21
 8007fca:	631a      	str	r2, [r3, #48]	@ 0x30
 8007fcc:	e019      	b.n	8008002 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007fce:	7afb      	ldrb	r3, [r7, #11]
 8007fd0:	2b22      	cmp	r3, #34	@ 0x22
 8007fd2:	d002      	beq.n	8007fda <I2C_ITSlaveCplt+0x56>
 8007fd4:	7afb      	ldrb	r3, [r7, #11]
 8007fd6:	2b2a      	cmp	r3, #42	@ 0x2a
 8007fd8:	d108      	bne.n	8007fec <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8007fda:	f248 0102 	movw	r1, #32770	@ 0x8002
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f000 ffd0 	bl	8008f84 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2222      	movs	r2, #34	@ 0x22
 8007fe8:	631a      	str	r2, [r3, #48]	@ 0x30
 8007fea:	e00a      	b.n	8008002 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8007fec:	7afb      	ldrb	r3, [r7, #11]
 8007fee:	2b28      	cmp	r3, #40	@ 0x28
 8007ff0:	d107      	bne.n	8008002 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8007ff2:	f248 0103 	movw	r1, #32771	@ 0x8003
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f000 ffc4 	bl	8008f84 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2200      	movs	r2, #0
 8008000:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	685a      	ldr	r2, [r3, #4]
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008010:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	6859      	ldr	r1, [r3, #4]
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681a      	ldr	r2, [r3, #0]
 800801c:	4b7f      	ldr	r3, [pc, #508]	@ (800821c <I2C_ITSlaveCplt+0x298>)
 800801e:	400b      	ands	r3, r1
 8008020:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f000 fb6d 	bl	8008702 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8008028:	693b      	ldr	r3, [r7, #16]
 800802a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800802e:	2b00      	cmp	r3, #0
 8008030:	d07a      	beq.n	8008128 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	681a      	ldr	r2, [r3, #0]
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008040:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008046:	2b00      	cmp	r3, #0
 8008048:	f000 8111 	beq.w	800826e <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	4a73      	ldr	r2, [pc, #460]	@ (8008220 <I2C_ITSlaveCplt+0x29c>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d059      	beq.n	800810c <I2C_ITSlaveCplt+0x188>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	4a71      	ldr	r2, [pc, #452]	@ (8008224 <I2C_ITSlaveCplt+0x2a0>)
 8008060:	4293      	cmp	r3, r2
 8008062:	d053      	beq.n	800810c <I2C_ITSlaveCplt+0x188>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	4a6f      	ldr	r2, [pc, #444]	@ (8008228 <I2C_ITSlaveCplt+0x2a4>)
 800806c:	4293      	cmp	r3, r2
 800806e:	d04d      	beq.n	800810c <I2C_ITSlaveCplt+0x188>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	4a6d      	ldr	r2, [pc, #436]	@ (800822c <I2C_ITSlaveCplt+0x2a8>)
 8008078:	4293      	cmp	r3, r2
 800807a:	d047      	beq.n	800810c <I2C_ITSlaveCplt+0x188>
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4a6b      	ldr	r2, [pc, #428]	@ (8008230 <I2C_ITSlaveCplt+0x2ac>)
 8008084:	4293      	cmp	r3, r2
 8008086:	d041      	beq.n	800810c <I2C_ITSlaveCplt+0x188>
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	4a69      	ldr	r2, [pc, #420]	@ (8008234 <I2C_ITSlaveCplt+0x2b0>)
 8008090:	4293      	cmp	r3, r2
 8008092:	d03b      	beq.n	800810c <I2C_ITSlaveCplt+0x188>
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	4a67      	ldr	r2, [pc, #412]	@ (8008238 <I2C_ITSlaveCplt+0x2b4>)
 800809c:	4293      	cmp	r3, r2
 800809e:	d035      	beq.n	800810c <I2C_ITSlaveCplt+0x188>
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	4a65      	ldr	r2, [pc, #404]	@ (800823c <I2C_ITSlaveCplt+0x2b8>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d02f      	beq.n	800810c <I2C_ITSlaveCplt+0x188>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	4a63      	ldr	r2, [pc, #396]	@ (8008240 <I2C_ITSlaveCplt+0x2bc>)
 80080b4:	4293      	cmp	r3, r2
 80080b6:	d029      	beq.n	800810c <I2C_ITSlaveCplt+0x188>
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	4a61      	ldr	r2, [pc, #388]	@ (8008244 <I2C_ITSlaveCplt+0x2c0>)
 80080c0:	4293      	cmp	r3, r2
 80080c2:	d023      	beq.n	800810c <I2C_ITSlaveCplt+0x188>
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	4a5f      	ldr	r2, [pc, #380]	@ (8008248 <I2C_ITSlaveCplt+0x2c4>)
 80080cc:	4293      	cmp	r3, r2
 80080ce:	d01d      	beq.n	800810c <I2C_ITSlaveCplt+0x188>
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	4a5d      	ldr	r2, [pc, #372]	@ (800824c <I2C_ITSlaveCplt+0x2c8>)
 80080d8:	4293      	cmp	r3, r2
 80080da:	d017      	beq.n	800810c <I2C_ITSlaveCplt+0x188>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	4a5b      	ldr	r2, [pc, #364]	@ (8008250 <I2C_ITSlaveCplt+0x2cc>)
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d011      	beq.n	800810c <I2C_ITSlaveCplt+0x188>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	4a59      	ldr	r2, [pc, #356]	@ (8008254 <I2C_ITSlaveCplt+0x2d0>)
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d00b      	beq.n	800810c <I2C_ITSlaveCplt+0x188>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	4a57      	ldr	r2, [pc, #348]	@ (8008258 <I2C_ITSlaveCplt+0x2d4>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d005      	beq.n	800810c <I2C_ITSlaveCplt+0x188>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	4a55      	ldr	r2, [pc, #340]	@ (800825c <I2C_ITSlaveCplt+0x2d8>)
 8008108:	4293      	cmp	r3, r2
 800810a:	d105      	bne.n	8008118 <I2C_ITSlaveCplt+0x194>
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	685b      	ldr	r3, [r3, #4]
 8008114:	b29b      	uxth	r3, r3
 8008116:	e004      	b.n	8008122 <I2C_ITSlaveCplt+0x19e>
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	685b      	ldr	r3, [r3, #4]
 8008120:	b29b      	uxth	r3, r3
 8008122:	687a      	ldr	r2, [r7, #4]
 8008124:	8553      	strh	r3, [r2, #42]	@ 0x2a
 8008126:	e0a2      	b.n	800826e <I2C_ITSlaveCplt+0x2ea>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8008128:	693b      	ldr	r3, [r7, #16]
 800812a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800812e:	2b00      	cmp	r3, #0
 8008130:	f000 809d 	beq.w	800826e <I2C_ITSlaveCplt+0x2ea>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	681a      	ldr	r2, [r3, #0]
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008142:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008148:	2b00      	cmp	r3, #0
 800814a:	f000 8090 	beq.w	800826e <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	4a32      	ldr	r2, [pc, #200]	@ (8008220 <I2C_ITSlaveCplt+0x29c>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d059      	beq.n	800820e <I2C_ITSlaveCplt+0x28a>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	4a30      	ldr	r2, [pc, #192]	@ (8008224 <I2C_ITSlaveCplt+0x2a0>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d053      	beq.n	800820e <I2C_ITSlaveCplt+0x28a>
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	4a2e      	ldr	r2, [pc, #184]	@ (8008228 <I2C_ITSlaveCplt+0x2a4>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d04d      	beq.n	800820e <I2C_ITSlaveCplt+0x28a>
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	4a2c      	ldr	r2, [pc, #176]	@ (800822c <I2C_ITSlaveCplt+0x2a8>)
 800817a:	4293      	cmp	r3, r2
 800817c:	d047      	beq.n	800820e <I2C_ITSlaveCplt+0x28a>
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	4a2a      	ldr	r2, [pc, #168]	@ (8008230 <I2C_ITSlaveCplt+0x2ac>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d041      	beq.n	800820e <I2C_ITSlaveCplt+0x28a>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	4a28      	ldr	r2, [pc, #160]	@ (8008234 <I2C_ITSlaveCplt+0x2b0>)
 8008192:	4293      	cmp	r3, r2
 8008194:	d03b      	beq.n	800820e <I2C_ITSlaveCplt+0x28a>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4a26      	ldr	r2, [pc, #152]	@ (8008238 <I2C_ITSlaveCplt+0x2b4>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d035      	beq.n	800820e <I2C_ITSlaveCplt+0x28a>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	4a24      	ldr	r2, [pc, #144]	@ (800823c <I2C_ITSlaveCplt+0x2b8>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d02f      	beq.n	800820e <I2C_ITSlaveCplt+0x28a>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	4a22      	ldr	r2, [pc, #136]	@ (8008240 <I2C_ITSlaveCplt+0x2bc>)
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d029      	beq.n	800820e <I2C_ITSlaveCplt+0x28a>
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	4a20      	ldr	r2, [pc, #128]	@ (8008244 <I2C_ITSlaveCplt+0x2c0>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d023      	beq.n	800820e <I2C_ITSlaveCplt+0x28a>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	4a1e      	ldr	r2, [pc, #120]	@ (8008248 <I2C_ITSlaveCplt+0x2c4>)
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d01d      	beq.n	800820e <I2C_ITSlaveCplt+0x28a>
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	4a1c      	ldr	r2, [pc, #112]	@ (800824c <I2C_ITSlaveCplt+0x2c8>)
 80081da:	4293      	cmp	r3, r2
 80081dc:	d017      	beq.n	800820e <I2C_ITSlaveCplt+0x28a>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	4a1a      	ldr	r2, [pc, #104]	@ (8008250 <I2C_ITSlaveCplt+0x2cc>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d011      	beq.n	800820e <I2C_ITSlaveCplt+0x28a>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	4a18      	ldr	r2, [pc, #96]	@ (8008254 <I2C_ITSlaveCplt+0x2d0>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d00b      	beq.n	800820e <I2C_ITSlaveCplt+0x28a>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	4a16      	ldr	r2, [pc, #88]	@ (8008258 <I2C_ITSlaveCplt+0x2d4>)
 80081fe:	4293      	cmp	r3, r2
 8008200:	d005      	beq.n	800820e <I2C_ITSlaveCplt+0x28a>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	4a14      	ldr	r2, [pc, #80]	@ (800825c <I2C_ITSlaveCplt+0x2d8>)
 800820a:	4293      	cmp	r3, r2
 800820c:	d128      	bne.n	8008260 <I2C_ITSlaveCplt+0x2dc>
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	685b      	ldr	r3, [r3, #4]
 8008216:	b29b      	uxth	r3, r3
 8008218:	e027      	b.n	800826a <I2C_ITSlaveCplt+0x2e6>
 800821a:	bf00      	nop
 800821c:	fe00e800 	.word	0xfe00e800
 8008220:	40020010 	.word	0x40020010
 8008224:	40020028 	.word	0x40020028
 8008228:	40020040 	.word	0x40020040
 800822c:	40020058 	.word	0x40020058
 8008230:	40020070 	.word	0x40020070
 8008234:	40020088 	.word	0x40020088
 8008238:	400200a0 	.word	0x400200a0
 800823c:	400200b8 	.word	0x400200b8
 8008240:	40020410 	.word	0x40020410
 8008244:	40020428 	.word	0x40020428
 8008248:	40020440 	.word	0x40020440
 800824c:	40020458 	.word	0x40020458
 8008250:	40020470 	.word	0x40020470
 8008254:	40020488 	.word	0x40020488
 8008258:	400204a0 	.word	0x400204a0
 800825c:	400204b8 	.word	0x400204b8
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	685b      	ldr	r3, [r3, #4]
 8008268:	b29b      	uxth	r3, r3
 800826a:	687a      	ldr	r2, [r7, #4]
 800826c:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	f003 0304 	and.w	r3, r3, #4
 8008274:	2b00      	cmp	r3, #0
 8008276:	d020      	beq.n	80082ba <I2C_ITSlaveCplt+0x336>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8008278:	697b      	ldr	r3, [r7, #20]
 800827a:	f023 0304 	bic.w	r3, r3, #4
 800827e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800828a:	b2d2      	uxtb	r2, r2
 800828c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008292:	1c5a      	adds	r2, r3, #1
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800829c:	2b00      	cmp	r3, #0
 800829e:	d00c      	beq.n	80082ba <I2C_ITSlaveCplt+0x336>
    {
      hi2c->XferSize--;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80082a4:	3b01      	subs	r3, #1
 80082a6:	b29a      	uxth	r2, r3
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80082b0:	b29b      	uxth	r3, r3
 80082b2:	3b01      	subs	r3, #1
 80082b4:	b29a      	uxth	r2, r3
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80082be:	b29b      	uxth	r3, r3
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d005      	beq.n	80082d0 <I2C_ITSlaveCplt+0x34c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082c8:	f043 0204 	orr.w	r2, r3, #4
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80082d0:	697b      	ldr	r3, [r7, #20]
 80082d2:	f003 0310 	and.w	r3, r3, #16
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d049      	beq.n	800836e <I2C_ITSlaveCplt+0x3ea>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80082da:	693b      	ldr	r3, [r7, #16]
 80082dc:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d044      	beq.n	800836e <I2C_ITSlaveCplt+0x3ea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80082e8:	b29b      	uxth	r3, r3
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d128      	bne.n	8008340 <I2C_ITSlaveCplt+0x3bc>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80082f4:	b2db      	uxtb	r3, r3
 80082f6:	2b28      	cmp	r3, #40	@ 0x28
 80082f8:	d108      	bne.n	800830c <I2C_ITSlaveCplt+0x388>
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008300:	d104      	bne.n	800830c <I2C_ITSlaveCplt+0x388>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8008302:	6979      	ldr	r1, [r7, #20]
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f000 f891 	bl	800842c <I2C_ITListenCplt>
 800830a:	e030      	b.n	800836e <I2C_ITSlaveCplt+0x3ea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008312:	b2db      	uxtb	r3, r3
 8008314:	2b29      	cmp	r3, #41	@ 0x29
 8008316:	d10e      	bne.n	8008336 <I2C_ITSlaveCplt+0x3b2>
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800831e:	d00a      	beq.n	8008336 <I2C_ITSlaveCplt+0x3b2>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	2210      	movs	r2, #16
 8008326:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	f000 f9ea 	bl	8008702 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f7ff fd03 	bl	8007d3a <I2C_ITSlaveSeqCplt>
 8008334:	e01b      	b.n	800836e <I2C_ITSlaveCplt+0x3ea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	2210      	movs	r2, #16
 800833c:	61da      	str	r2, [r3, #28]
 800833e:	e016      	b.n	800836e <I2C_ITSlaveCplt+0x3ea>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	2210      	movs	r2, #16
 8008346:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800834c:	f043 0204 	orr.w	r2, r3, #4
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d003      	beq.n	8008362 <I2C_ITSlaveCplt+0x3de>
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008360:	d105      	bne.n	800836e <I2C_ITSlaveCplt+0x3ea>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008366:	4619      	mov	r1, r3
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f000 f8b3 	bl	80084d4 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2200      	movs	r2, #0
 8008372:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2200      	movs	r2, #0
 800837a:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008380:	2b00      	cmp	r3, #0
 8008382:	d010      	beq.n	80083a6 <I2C_ITSlaveCplt+0x422>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008388:	4619      	mov	r1, r3
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f000 f8a2 	bl	80084d4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008396:	b2db      	uxtb	r3, r3
 8008398:	2b28      	cmp	r3, #40	@ 0x28
 800839a:	d141      	bne.n	8008420 <I2C_ITSlaveCplt+0x49c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800839c:	6979      	ldr	r1, [r7, #20]
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f000 f844 	bl	800842c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80083a4:	e03c      	b.n	8008420 <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083aa:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80083ae:	d014      	beq.n	80083da <I2C_ITSlaveCplt+0x456>
    I2C_ITSlaveSeqCplt(hi2c);
 80083b0:	6878      	ldr	r0, [r7, #4]
 80083b2:	f7ff fcc2 	bl	8007d3a <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	4a1b      	ldr	r2, [pc, #108]	@ (8008428 <I2C_ITSlaveCplt+0x4a4>)
 80083ba:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2220      	movs	r2, #32
 80083c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2200      	movs	r2, #0
 80083c8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2200      	movs	r2, #0
 80083ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f7fe fe85 	bl	80070e2 <HAL_I2C_ListenCpltCallback>
}
 80083d8:	e022      	b.n	8008420 <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80083e0:	b2db      	uxtb	r3, r3
 80083e2:	2b22      	cmp	r3, #34	@ 0x22
 80083e4:	d10e      	bne.n	8008404 <I2C_ITSlaveCplt+0x480>
    hi2c->State = HAL_I2C_STATE_READY;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2220      	movs	r2, #32
 80083ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2200      	movs	r2, #0
 80083f2:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2200      	movs	r2, #0
 80083f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f7fe fe58 	bl	80070b2 <HAL_I2C_SlaveRxCpltCallback>
}
 8008402:	e00d      	b.n	8008420 <I2C_ITSlaveCplt+0x49c>
    hi2c->State = HAL_I2C_STATE_READY;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2220      	movs	r2, #32
 8008408:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2200      	movs	r2, #0
 8008410:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2200      	movs	r2, #0
 8008416:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f7fe fe3f 	bl	800709e <HAL_I2C_SlaveTxCpltCallback>
}
 8008420:	bf00      	nop
 8008422:	3718      	adds	r7, #24
 8008424:	46bd      	mov	sp, r7
 8008426:	bd80      	pop	{r7, pc}
 8008428:	ffff0000 	.word	0xffff0000

0800842c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b082      	sub	sp, #8
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
 8008434:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	4a25      	ldr	r2, [pc, #148]	@ (80084d0 <I2C_ITListenCplt+0xa4>)
 800843a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2200      	movs	r2, #0
 8008440:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2220      	movs	r2, #32
 8008446:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2200      	movs	r2, #0
 800844e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2200      	movs	r2, #0
 8008456:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	f003 0304 	and.w	r3, r3, #4
 800845e:	2b00      	cmp	r3, #0
 8008460:	d022      	beq.n	80084a8 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800846c:	b2d2      	uxtb	r2, r2
 800846e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008474:	1c5a      	adds	r2, r3, #1
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800847e:	2b00      	cmp	r3, #0
 8008480:	d012      	beq.n	80084a8 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008486:	3b01      	subs	r3, #1
 8008488:	b29a      	uxth	r2, r3
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008492:	b29b      	uxth	r3, r3
 8008494:	3b01      	subs	r3, #1
 8008496:	b29a      	uxth	r2, r3
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80084a0:	f043 0204 	orr.w	r2, r3, #4
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80084a8:	f248 0103 	movw	r1, #32771	@ 0x8003
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f000 fd69 	bl	8008f84 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	2210      	movs	r2, #16
 80084b8:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2200      	movs	r2, #0
 80084be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f7fe fe0d 	bl	80070e2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80084c8:	bf00      	nop
 80084ca:	3708      	adds	r7, #8
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bd80      	pop	{r7, pc}
 80084d0:	ffff0000 	.word	0xffff0000

080084d4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b084      	sub	sp, #16
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
 80084dc:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80084e4:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2200      	movs	r2, #0
 80084ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	4a6d      	ldr	r2, [pc, #436]	@ (80086a8 <I2C_ITError+0x1d4>)
 80084f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2200      	movs	r2, #0
 80084f8:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	431a      	orrs	r2, r3
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8008506:	7bfb      	ldrb	r3, [r7, #15]
 8008508:	2b28      	cmp	r3, #40	@ 0x28
 800850a:	d005      	beq.n	8008518 <I2C_ITError+0x44>
 800850c:	7bfb      	ldrb	r3, [r7, #15]
 800850e:	2b29      	cmp	r3, #41	@ 0x29
 8008510:	d002      	beq.n	8008518 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8008512:	7bfb      	ldrb	r3, [r7, #15]
 8008514:	2b2a      	cmp	r3, #42	@ 0x2a
 8008516:	d10b      	bne.n	8008530 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008518:	2103      	movs	r1, #3
 800851a:	6878      	ldr	r0, [r7, #4]
 800851c:	f000 fd32 	bl	8008f84 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2228      	movs	r2, #40	@ 0x28
 8008524:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	4a60      	ldr	r2, [pc, #384]	@ (80086ac <I2C_ITError+0x1d8>)
 800852c:	635a      	str	r2, [r3, #52]	@ 0x34
 800852e:	e030      	b.n	8008592 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008530:	f248 0103 	movw	r1, #32771	@ 0x8003
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f000 fd25 	bl	8008f84 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f000 f8e1 	bl	8008702 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008546:	b2db      	uxtb	r3, r3
 8008548:	2b60      	cmp	r3, #96	@ 0x60
 800854a:	d01f      	beq.n	800858c <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2220      	movs	r2, #32
 8008550:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	699b      	ldr	r3, [r3, #24]
 800855a:	f003 0320 	and.w	r3, r3, #32
 800855e:	2b20      	cmp	r3, #32
 8008560:	d114      	bne.n	800858c <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	699b      	ldr	r3, [r3, #24]
 8008568:	f003 0310 	and.w	r3, r3, #16
 800856c:	2b10      	cmp	r3, #16
 800856e:	d109      	bne.n	8008584 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	2210      	movs	r2, #16
 8008576:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800857c:	f043 0204 	orr.w	r2, r3, #4
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	2220      	movs	r2, #32
 800858a:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2200      	movs	r2, #0
 8008590:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008596:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800859c:	2b00      	cmp	r3, #0
 800859e:	d039      	beq.n	8008614 <I2C_ITError+0x140>
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	2b11      	cmp	r3, #17
 80085a4:	d002      	beq.n	80085ac <I2C_ITError+0xd8>
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	2b21      	cmp	r3, #33	@ 0x21
 80085aa:	d133      	bne.n	8008614 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80085b6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80085ba:	d107      	bne.n	80085cc <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	681a      	ldr	r2, [r3, #0]
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80085ca:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085d0:	4618      	mov	r0, r3
 80085d2:	f7fd fc73 	bl	8005ebc <HAL_DMA_GetState>
 80085d6:	4603      	mov	r3, r0
 80085d8:	2b01      	cmp	r3, #1
 80085da:	d017      	beq.n	800860c <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085e0:	4a33      	ldr	r2, [pc, #204]	@ (80086b0 <I2C_ITError+0x1dc>)
 80085e2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2200      	movs	r2, #0
 80085e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085f0:	4618      	mov	r0, r3
 80085f2:	f7fc faf3 	bl	8004bdc <HAL_DMA_Abort_IT>
 80085f6:	4603      	mov	r3, r0
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d04d      	beq.n	8008698 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008600:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008602:	687a      	ldr	r2, [r7, #4]
 8008604:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8008606:	4610      	mov	r0, r2
 8008608:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800860a:	e045      	b.n	8008698 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f000 f851 	bl	80086b4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008612:	e041      	b.n	8008698 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008618:	2b00      	cmp	r3, #0
 800861a:	d039      	beq.n	8008690 <I2C_ITError+0x1bc>
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	2b12      	cmp	r3, #18
 8008620:	d002      	beq.n	8008628 <I2C_ITError+0x154>
 8008622:	68bb      	ldr	r3, [r7, #8]
 8008624:	2b22      	cmp	r3, #34	@ 0x22
 8008626:	d133      	bne.n	8008690 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008632:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008636:	d107      	bne.n	8008648 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	681a      	ldr	r2, [r3, #0]
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008646:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800864c:	4618      	mov	r0, r3
 800864e:	f7fd fc35 	bl	8005ebc <HAL_DMA_GetState>
 8008652:	4603      	mov	r3, r0
 8008654:	2b01      	cmp	r3, #1
 8008656:	d017      	beq.n	8008688 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800865c:	4a14      	ldr	r2, [pc, #80]	@ (80086b0 <I2C_ITError+0x1dc>)
 800865e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2200      	movs	r2, #0
 8008664:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800866c:	4618      	mov	r0, r3
 800866e:	f7fc fab5 	bl	8004bdc <HAL_DMA_Abort_IT>
 8008672:	4603      	mov	r3, r0
 8008674:	2b00      	cmp	r3, #0
 8008676:	d011      	beq.n	800869c <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800867c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800867e:	687a      	ldr	r2, [r7, #4]
 8008680:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008682:	4610      	mov	r0, r2
 8008684:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008686:	e009      	b.n	800869c <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8008688:	6878      	ldr	r0, [r7, #4]
 800868a:	f000 f813 	bl	80086b4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800868e:	e005      	b.n	800869c <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	f000 f80f 	bl	80086b4 <I2C_TreatErrorCallback>
  }
}
 8008696:	e002      	b.n	800869e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008698:	bf00      	nop
 800869a:	e000      	b.n	800869e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800869c:	bf00      	nop
}
 800869e:	bf00      	nop
 80086a0:	3710      	adds	r7, #16
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bd80      	pop	{r7, pc}
 80086a6:	bf00      	nop
 80086a8:	ffff0000 	.word	0xffff0000
 80086ac:	08007147 	.word	0x08007147
 80086b0:	08008a55 	.word	0x08008a55

080086b4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b082      	sub	sp, #8
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80086c2:	b2db      	uxtb	r3, r3
 80086c4:	2b60      	cmp	r3, #96	@ 0x60
 80086c6:	d10e      	bne.n	80086e6 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2220      	movs	r2, #32
 80086cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2200      	movs	r2, #0
 80086d4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2200      	movs	r2, #0
 80086da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f7fe fd27 	bl	8007132 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80086e4:	e009      	b.n	80086fa <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	2200      	movs	r2, #0
 80086ea:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2200      	movs	r2, #0
 80086f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f7fe fd12 	bl	800711e <HAL_I2C_ErrorCallback>
}
 80086fa:	bf00      	nop
 80086fc:	3708      	adds	r7, #8
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}

08008702 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008702:	b480      	push	{r7}
 8008704:	b083      	sub	sp, #12
 8008706:	af00      	add	r7, sp, #0
 8008708:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	699b      	ldr	r3, [r3, #24]
 8008710:	f003 0302 	and.w	r3, r3, #2
 8008714:	2b02      	cmp	r3, #2
 8008716:	d103      	bne.n	8008720 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	2200      	movs	r2, #0
 800871e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	699b      	ldr	r3, [r3, #24]
 8008726:	f003 0301 	and.w	r3, r3, #1
 800872a:	2b01      	cmp	r3, #1
 800872c:	d007      	beq.n	800873e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	699a      	ldr	r2, [r3, #24]
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f042 0201 	orr.w	r2, r2, #1
 800873c:	619a      	str	r2, [r3, #24]
  }
}
 800873e:	bf00      	nop
 8008740:	370c      	adds	r7, #12
 8008742:	46bd      	mov	sp, r7
 8008744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008748:	4770      	bx	lr

0800874a <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800874a:	b580      	push	{r7, lr}
 800874c:	b084      	sub	sp, #16
 800874e:	af00      	add	r7, sp, #0
 8008750:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008756:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	681a      	ldr	r2, [r3, #0]
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008766:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800876c:	b29b      	uxth	r3, r3
 800876e:	2b00      	cmp	r3, #0
 8008770:	d104      	bne.n	800877c <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8008772:	2120      	movs	r1, #32
 8008774:	68f8      	ldr	r0, [r7, #12]
 8008776:	f000 fb81 	bl	8008e7c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800877a:	e02d      	b.n	80087d8 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008780:	68fa      	ldr	r2, [r7, #12]
 8008782:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8008784:	441a      	add	r2, r3
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800878e:	b29b      	uxth	r3, r3
 8008790:	2bff      	cmp	r3, #255	@ 0xff
 8008792:	d903      	bls.n	800879c <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	22ff      	movs	r2, #255	@ 0xff
 8008798:	851a      	strh	r2, [r3, #40]	@ 0x28
 800879a:	e004      	b.n	80087a6 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80087a0:	b29a      	uxth	r2, r3
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087ae:	4619      	mov	r1, r3
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	3328      	adds	r3, #40	@ 0x28
 80087b6:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80087bc:	f7fb fc86 	bl	80040cc <HAL_DMA_Start_IT>
 80087c0:	4603      	mov	r3, r0
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d004      	beq.n	80087d0 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80087c6:	2110      	movs	r1, #16
 80087c8:	68f8      	ldr	r0, [r7, #12]
 80087ca:	f7ff fe83 	bl	80084d4 <I2C_ITError>
}
 80087ce:	e003      	b.n	80087d8 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 80087d0:	2140      	movs	r1, #64	@ 0x40
 80087d2:	68f8      	ldr	r0, [r7, #12]
 80087d4:	f000 fb52 	bl	8008e7c <I2C_Enable_IRQ>
}
 80087d8:	bf00      	nop
 80087da:	3710      	adds	r7, #16
 80087dc:	46bd      	mov	sp, r7
 80087de:	bd80      	pop	{r7, pc}

080087e0 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b084      	sub	sp, #16
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 80087e8:	2300      	movs	r3, #0
 80087ea:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087f0:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 80087f2:	68bb      	ldr	r3, [r7, #8]
 80087f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d076      	beq.n	80088e8 <I2C_DMAError+0x108>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80087fa:	68bb      	ldr	r3, [r7, #8]
 80087fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	4a71      	ldr	r2, [pc, #452]	@ (80089c8 <I2C_DMAError+0x1e8>)
 8008802:	4293      	cmp	r3, r2
 8008804:	d059      	beq.n	80088ba <I2C_DMAError+0xda>
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4a6f      	ldr	r2, [pc, #444]	@ (80089cc <I2C_DMAError+0x1ec>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d053      	beq.n	80088ba <I2C_DMAError+0xda>
 8008812:	68bb      	ldr	r3, [r7, #8]
 8008814:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	4a6d      	ldr	r2, [pc, #436]	@ (80089d0 <I2C_DMAError+0x1f0>)
 800881a:	4293      	cmp	r3, r2
 800881c:	d04d      	beq.n	80088ba <I2C_DMAError+0xda>
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	4a6b      	ldr	r2, [pc, #428]	@ (80089d4 <I2C_DMAError+0x1f4>)
 8008826:	4293      	cmp	r3, r2
 8008828:	d047      	beq.n	80088ba <I2C_DMAError+0xda>
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	4a69      	ldr	r2, [pc, #420]	@ (80089d8 <I2C_DMAError+0x1f8>)
 8008832:	4293      	cmp	r3, r2
 8008834:	d041      	beq.n	80088ba <I2C_DMAError+0xda>
 8008836:	68bb      	ldr	r3, [r7, #8]
 8008838:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	4a67      	ldr	r2, [pc, #412]	@ (80089dc <I2C_DMAError+0x1fc>)
 800883e:	4293      	cmp	r3, r2
 8008840:	d03b      	beq.n	80088ba <I2C_DMAError+0xda>
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	4a65      	ldr	r2, [pc, #404]	@ (80089e0 <I2C_DMAError+0x200>)
 800884a:	4293      	cmp	r3, r2
 800884c:	d035      	beq.n	80088ba <I2C_DMAError+0xda>
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	4a63      	ldr	r2, [pc, #396]	@ (80089e4 <I2C_DMAError+0x204>)
 8008856:	4293      	cmp	r3, r2
 8008858:	d02f      	beq.n	80088ba <I2C_DMAError+0xda>
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	4a61      	ldr	r2, [pc, #388]	@ (80089e8 <I2C_DMAError+0x208>)
 8008862:	4293      	cmp	r3, r2
 8008864:	d029      	beq.n	80088ba <I2C_DMAError+0xda>
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	4a5f      	ldr	r2, [pc, #380]	@ (80089ec <I2C_DMAError+0x20c>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d023      	beq.n	80088ba <I2C_DMAError+0xda>
 8008872:	68bb      	ldr	r3, [r7, #8]
 8008874:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	4a5d      	ldr	r2, [pc, #372]	@ (80089f0 <I2C_DMAError+0x210>)
 800887a:	4293      	cmp	r3, r2
 800887c:	d01d      	beq.n	80088ba <I2C_DMAError+0xda>
 800887e:	68bb      	ldr	r3, [r7, #8]
 8008880:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	4a5b      	ldr	r2, [pc, #364]	@ (80089f4 <I2C_DMAError+0x214>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d017      	beq.n	80088ba <I2C_DMAError+0xda>
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	4a59      	ldr	r2, [pc, #356]	@ (80089f8 <I2C_DMAError+0x218>)
 8008892:	4293      	cmp	r3, r2
 8008894:	d011      	beq.n	80088ba <I2C_DMAError+0xda>
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	4a57      	ldr	r2, [pc, #348]	@ (80089fc <I2C_DMAError+0x21c>)
 800889e:	4293      	cmp	r3, r2
 80088a0:	d00b      	beq.n	80088ba <I2C_DMAError+0xda>
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	4a55      	ldr	r2, [pc, #340]	@ (8008a00 <I2C_DMAError+0x220>)
 80088aa:	4293      	cmp	r3, r2
 80088ac:	d005      	beq.n	80088ba <I2C_DMAError+0xda>
 80088ae:	68bb      	ldr	r3, [r7, #8]
 80088b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	4a53      	ldr	r2, [pc, #332]	@ (8008a04 <I2C_DMAError+0x224>)
 80088b6:	4293      	cmp	r3, r2
 80088b8:	d109      	bne.n	80088ce <I2C_DMAError+0xee>
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	685b      	ldr	r3, [r3, #4]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	bf0c      	ite	eq
 80088c6:	2301      	moveq	r3, #1
 80088c8:	2300      	movne	r3, #0
 80088ca:	b2db      	uxtb	r3, r3
 80088cc:	e008      	b.n	80088e0 <I2C_DMAError+0x100>
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	685b      	ldr	r3, [r3, #4]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	bf0c      	ite	eq
 80088da:	2301      	moveq	r3, #1
 80088dc:	2300      	movne	r3, #0
 80088de:	b2db      	uxtb	r3, r3
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d001      	beq.n	80088e8 <I2C_DMAError+0x108>
    {
      treatdmaerror = 1U;
 80088e4:	2301      	movs	r3, #1
 80088e6:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 80088e8:	68bb      	ldr	r3, [r7, #8]
 80088ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	f000 8098 	beq.w	8008a22 <I2C_DMAError+0x242>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80088f2:	68bb      	ldr	r3, [r7, #8]
 80088f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	4a33      	ldr	r2, [pc, #204]	@ (80089c8 <I2C_DMAError+0x1e8>)
 80088fa:	4293      	cmp	r3, r2
 80088fc:	d059      	beq.n	80089b2 <I2C_DMAError+0x1d2>
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	4a31      	ldr	r2, [pc, #196]	@ (80089cc <I2C_DMAError+0x1ec>)
 8008906:	4293      	cmp	r3, r2
 8008908:	d053      	beq.n	80089b2 <I2C_DMAError+0x1d2>
 800890a:	68bb      	ldr	r3, [r7, #8]
 800890c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	4a2f      	ldr	r2, [pc, #188]	@ (80089d0 <I2C_DMAError+0x1f0>)
 8008912:	4293      	cmp	r3, r2
 8008914:	d04d      	beq.n	80089b2 <I2C_DMAError+0x1d2>
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	4a2d      	ldr	r2, [pc, #180]	@ (80089d4 <I2C_DMAError+0x1f4>)
 800891e:	4293      	cmp	r3, r2
 8008920:	d047      	beq.n	80089b2 <I2C_DMAError+0x1d2>
 8008922:	68bb      	ldr	r3, [r7, #8]
 8008924:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	4a2b      	ldr	r2, [pc, #172]	@ (80089d8 <I2C_DMAError+0x1f8>)
 800892a:	4293      	cmp	r3, r2
 800892c:	d041      	beq.n	80089b2 <I2C_DMAError+0x1d2>
 800892e:	68bb      	ldr	r3, [r7, #8]
 8008930:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	4a29      	ldr	r2, [pc, #164]	@ (80089dc <I2C_DMAError+0x1fc>)
 8008936:	4293      	cmp	r3, r2
 8008938:	d03b      	beq.n	80089b2 <I2C_DMAError+0x1d2>
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	4a27      	ldr	r2, [pc, #156]	@ (80089e0 <I2C_DMAError+0x200>)
 8008942:	4293      	cmp	r3, r2
 8008944:	d035      	beq.n	80089b2 <I2C_DMAError+0x1d2>
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	4a25      	ldr	r2, [pc, #148]	@ (80089e4 <I2C_DMAError+0x204>)
 800894e:	4293      	cmp	r3, r2
 8008950:	d02f      	beq.n	80089b2 <I2C_DMAError+0x1d2>
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	4a23      	ldr	r2, [pc, #140]	@ (80089e8 <I2C_DMAError+0x208>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d029      	beq.n	80089b2 <I2C_DMAError+0x1d2>
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	4a21      	ldr	r2, [pc, #132]	@ (80089ec <I2C_DMAError+0x20c>)
 8008966:	4293      	cmp	r3, r2
 8008968:	d023      	beq.n	80089b2 <I2C_DMAError+0x1d2>
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	4a1f      	ldr	r2, [pc, #124]	@ (80089f0 <I2C_DMAError+0x210>)
 8008972:	4293      	cmp	r3, r2
 8008974:	d01d      	beq.n	80089b2 <I2C_DMAError+0x1d2>
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	4a1d      	ldr	r2, [pc, #116]	@ (80089f4 <I2C_DMAError+0x214>)
 800897e:	4293      	cmp	r3, r2
 8008980:	d017      	beq.n	80089b2 <I2C_DMAError+0x1d2>
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	4a1b      	ldr	r2, [pc, #108]	@ (80089f8 <I2C_DMAError+0x218>)
 800898a:	4293      	cmp	r3, r2
 800898c:	d011      	beq.n	80089b2 <I2C_DMAError+0x1d2>
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	4a19      	ldr	r2, [pc, #100]	@ (80089fc <I2C_DMAError+0x21c>)
 8008996:	4293      	cmp	r3, r2
 8008998:	d00b      	beq.n	80089b2 <I2C_DMAError+0x1d2>
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	4a17      	ldr	r2, [pc, #92]	@ (8008a00 <I2C_DMAError+0x220>)
 80089a2:	4293      	cmp	r3, r2
 80089a4:	d005      	beq.n	80089b2 <I2C_DMAError+0x1d2>
 80089a6:	68bb      	ldr	r3, [r7, #8]
 80089a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	4a15      	ldr	r2, [pc, #84]	@ (8008a04 <I2C_DMAError+0x224>)
 80089ae:	4293      	cmp	r3, r2
 80089b0:	d12a      	bne.n	8008a08 <I2C_DMAError+0x228>
 80089b2:	68bb      	ldr	r3, [r7, #8]
 80089b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	685b      	ldr	r3, [r3, #4]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	bf0c      	ite	eq
 80089be:	2301      	moveq	r3, #1
 80089c0:	2300      	movne	r3, #0
 80089c2:	b2db      	uxtb	r3, r3
 80089c4:	e029      	b.n	8008a1a <I2C_DMAError+0x23a>
 80089c6:	bf00      	nop
 80089c8:	40020010 	.word	0x40020010
 80089cc:	40020028 	.word	0x40020028
 80089d0:	40020040 	.word	0x40020040
 80089d4:	40020058 	.word	0x40020058
 80089d8:	40020070 	.word	0x40020070
 80089dc:	40020088 	.word	0x40020088
 80089e0:	400200a0 	.word	0x400200a0
 80089e4:	400200b8 	.word	0x400200b8
 80089e8:	40020410 	.word	0x40020410
 80089ec:	40020428 	.word	0x40020428
 80089f0:	40020440 	.word	0x40020440
 80089f4:	40020458 	.word	0x40020458
 80089f8:	40020470 	.word	0x40020470
 80089fc:	40020488 	.word	0x40020488
 8008a00:	400204a0 	.word	0x400204a0
 8008a04:	400204b8 	.word	0x400204b8
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	685b      	ldr	r3, [r3, #4]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	bf0c      	ite	eq
 8008a14:	2301      	moveq	r3, #1
 8008a16:	2300      	movne	r3, #0
 8008a18:	b2db      	uxtb	r3, r3
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d001      	beq.n	8008a22 <I2C_DMAError+0x242>
    {
      treatdmaerror = 1U;
 8008a1e:	2301      	movs	r3, #1
 8008a20:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f7fd fa58 	bl	8005ed8 <HAL_DMA_GetError>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	2b02      	cmp	r3, #2
 8008a2c:	d00e      	beq.n	8008a4c <I2C_DMAError+0x26c>
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d00b      	beq.n	8008a4c <I2C_DMAError+0x26c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	685a      	ldr	r2, [r3, #4]
 8008a3a:	68bb      	ldr	r3, [r7, #8]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008a42:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8008a44:	2110      	movs	r1, #16
 8008a46:	68b8      	ldr	r0, [r7, #8]
 8008a48:	f7ff fd44 	bl	80084d4 <I2C_ITError>
  }
}
 8008a4c:	bf00      	nop
 8008a4e:	3710      	adds	r7, #16
 8008a50:	46bd      	mov	sp, r7
 8008a52:	bd80      	pop	{r7, pc}

08008a54 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b084      	sub	sp, #16
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a60:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d003      	beq.n	8008a72 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a6e:	2200      	movs	r2, #0
 8008a70:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d003      	beq.n	8008a82 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a7e:	2200      	movs	r2, #0
 8008a80:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8008a82:	68f8      	ldr	r0, [r7, #12]
 8008a84:	f7ff fe16 	bl	80086b4 <I2C_TreatErrorCallback>
}
 8008a88:	bf00      	nop
 8008a8a:	3710      	adds	r7, #16
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bd80      	pop	{r7, pc}

08008a90 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b084      	sub	sp, #16
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	60f8      	str	r0, [r7, #12]
 8008a98:	60b9      	str	r1, [r7, #8]
 8008a9a:	603b      	str	r3, [r7, #0]
 8008a9c:	4613      	mov	r3, r2
 8008a9e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008aa0:	e03b      	b.n	8008b1a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008aa2:	69ba      	ldr	r2, [r7, #24]
 8008aa4:	6839      	ldr	r1, [r7, #0]
 8008aa6:	68f8      	ldr	r0, [r7, #12]
 8008aa8:	f000 f8d6 	bl	8008c58 <I2C_IsErrorOccurred>
 8008aac:	4603      	mov	r3, r0
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d001      	beq.n	8008ab6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	e041      	b.n	8008b3a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008abc:	d02d      	beq.n	8008b1a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008abe:	f7f9 fd4b 	bl	8002558 <HAL_GetTick>
 8008ac2:	4602      	mov	r2, r0
 8008ac4:	69bb      	ldr	r3, [r7, #24]
 8008ac6:	1ad3      	subs	r3, r2, r3
 8008ac8:	683a      	ldr	r2, [r7, #0]
 8008aca:	429a      	cmp	r2, r3
 8008acc:	d302      	bcc.n	8008ad4 <I2C_WaitOnFlagUntilTimeout+0x44>
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d122      	bne.n	8008b1a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	699a      	ldr	r2, [r3, #24]
 8008ada:	68bb      	ldr	r3, [r7, #8]
 8008adc:	4013      	ands	r3, r2
 8008ade:	68ba      	ldr	r2, [r7, #8]
 8008ae0:	429a      	cmp	r2, r3
 8008ae2:	bf0c      	ite	eq
 8008ae4:	2301      	moveq	r3, #1
 8008ae6:	2300      	movne	r3, #0
 8008ae8:	b2db      	uxtb	r3, r3
 8008aea:	461a      	mov	r2, r3
 8008aec:	79fb      	ldrb	r3, [r7, #7]
 8008aee:	429a      	cmp	r2, r3
 8008af0:	d113      	bne.n	8008b1a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008af6:	f043 0220 	orr.w	r2, r3, #32
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	2220      	movs	r2, #32
 8008b02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	2200      	movs	r2, #0
 8008b12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8008b16:	2301      	movs	r3, #1
 8008b18:	e00f      	b.n	8008b3a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	699a      	ldr	r2, [r3, #24]
 8008b20:	68bb      	ldr	r3, [r7, #8]
 8008b22:	4013      	ands	r3, r2
 8008b24:	68ba      	ldr	r2, [r7, #8]
 8008b26:	429a      	cmp	r2, r3
 8008b28:	bf0c      	ite	eq
 8008b2a:	2301      	moveq	r3, #1
 8008b2c:	2300      	movne	r3, #0
 8008b2e:	b2db      	uxtb	r3, r3
 8008b30:	461a      	mov	r2, r3
 8008b32:	79fb      	ldrb	r3, [r7, #7]
 8008b34:	429a      	cmp	r2, r3
 8008b36:	d0b4      	beq.n	8008aa2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008b38:	2300      	movs	r3, #0
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	3710      	adds	r7, #16
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}

08008b42 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008b42:	b580      	push	{r7, lr}
 8008b44:	b084      	sub	sp, #16
 8008b46:	af00      	add	r7, sp, #0
 8008b48:	60f8      	str	r0, [r7, #12]
 8008b4a:	60b9      	str	r1, [r7, #8]
 8008b4c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008b4e:	e033      	b.n	8008bb8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008b50:	687a      	ldr	r2, [r7, #4]
 8008b52:	68b9      	ldr	r1, [r7, #8]
 8008b54:	68f8      	ldr	r0, [r7, #12]
 8008b56:	f000 f87f 	bl	8008c58 <I2C_IsErrorOccurred>
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d001      	beq.n	8008b64 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008b60:	2301      	movs	r3, #1
 8008b62:	e031      	b.n	8008bc8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b6a:	d025      	beq.n	8008bb8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b6c:	f7f9 fcf4 	bl	8002558 <HAL_GetTick>
 8008b70:	4602      	mov	r2, r0
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	1ad3      	subs	r3, r2, r3
 8008b76:	68ba      	ldr	r2, [r7, #8]
 8008b78:	429a      	cmp	r2, r3
 8008b7a:	d302      	bcc.n	8008b82 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d11a      	bne.n	8008bb8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	699b      	ldr	r3, [r3, #24]
 8008b88:	f003 0302 	and.w	r3, r3, #2
 8008b8c:	2b02      	cmp	r3, #2
 8008b8e:	d013      	beq.n	8008bb8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b94:	f043 0220 	orr.w	r2, r3, #32
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	2220      	movs	r2, #32
 8008ba0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	2200      	movs	r2, #0
 8008bb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008bb4:	2301      	movs	r3, #1
 8008bb6:	e007      	b.n	8008bc8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	699b      	ldr	r3, [r3, #24]
 8008bbe:	f003 0302 	and.w	r3, r3, #2
 8008bc2:	2b02      	cmp	r3, #2
 8008bc4:	d1c4      	bne.n	8008b50 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008bc6:	2300      	movs	r3, #0
}
 8008bc8:	4618      	mov	r0, r3
 8008bca:	3710      	adds	r7, #16
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd80      	pop	{r7, pc}

08008bd0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b084      	sub	sp, #16
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	60f8      	str	r0, [r7, #12]
 8008bd8:	60b9      	str	r1, [r7, #8]
 8008bda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008bdc:	e02f      	b.n	8008c3e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008bde:	687a      	ldr	r2, [r7, #4]
 8008be0:	68b9      	ldr	r1, [r7, #8]
 8008be2:	68f8      	ldr	r0, [r7, #12]
 8008be4:	f000 f838 	bl	8008c58 <I2C_IsErrorOccurred>
 8008be8:	4603      	mov	r3, r0
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d001      	beq.n	8008bf2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008bee:	2301      	movs	r3, #1
 8008bf0:	e02d      	b.n	8008c4e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008bf2:	f7f9 fcb1 	bl	8002558 <HAL_GetTick>
 8008bf6:	4602      	mov	r2, r0
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	1ad3      	subs	r3, r2, r3
 8008bfc:	68ba      	ldr	r2, [r7, #8]
 8008bfe:	429a      	cmp	r2, r3
 8008c00:	d302      	bcc.n	8008c08 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d11a      	bne.n	8008c3e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	699b      	ldr	r3, [r3, #24]
 8008c0e:	f003 0320 	and.w	r3, r3, #32
 8008c12:	2b20      	cmp	r3, #32
 8008c14:	d013      	beq.n	8008c3e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c1a:	f043 0220 	orr.w	r2, r3, #32
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	2220      	movs	r2, #32
 8008c26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	2200      	movs	r2, #0
 8008c36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	e007      	b.n	8008c4e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	699b      	ldr	r3, [r3, #24]
 8008c44:	f003 0320 	and.w	r3, r3, #32
 8008c48:	2b20      	cmp	r3, #32
 8008c4a:	d1c8      	bne.n	8008bde <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008c4c:	2300      	movs	r3, #0
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	3710      	adds	r7, #16
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}
	...

08008c58 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b08a      	sub	sp, #40	@ 0x28
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	60f8      	str	r0, [r7, #12]
 8008c60:	60b9      	str	r1, [r7, #8]
 8008c62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008c64:	2300      	movs	r3, #0
 8008c66:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	699b      	ldr	r3, [r3, #24]
 8008c70:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8008c72:	2300      	movs	r3, #0
 8008c74:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008c7a:	69bb      	ldr	r3, [r7, #24]
 8008c7c:	f003 0310 	and.w	r3, r3, #16
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d068      	beq.n	8008d56 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	2210      	movs	r2, #16
 8008c8a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008c8c:	e049      	b.n	8008d22 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008c8e:	68bb      	ldr	r3, [r7, #8]
 8008c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c94:	d045      	beq.n	8008d22 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008c96:	f7f9 fc5f 	bl	8002558 <HAL_GetTick>
 8008c9a:	4602      	mov	r2, r0
 8008c9c:	69fb      	ldr	r3, [r7, #28]
 8008c9e:	1ad3      	subs	r3, r2, r3
 8008ca0:	68ba      	ldr	r2, [r7, #8]
 8008ca2:	429a      	cmp	r2, r3
 8008ca4:	d302      	bcc.n	8008cac <I2C_IsErrorOccurred+0x54>
 8008ca6:	68bb      	ldr	r3, [r7, #8]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d13a      	bne.n	8008d22 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	685b      	ldr	r3, [r3, #4]
 8008cb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008cb6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008cbe:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	699b      	ldr	r3, [r3, #24]
 8008cc6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008cca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008cce:	d121      	bne.n	8008d14 <I2C_IsErrorOccurred+0xbc>
 8008cd0:	697b      	ldr	r3, [r7, #20]
 8008cd2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008cd6:	d01d      	beq.n	8008d14 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8008cd8:	7cfb      	ldrb	r3, [r7, #19]
 8008cda:	2b20      	cmp	r3, #32
 8008cdc:	d01a      	beq.n	8008d14 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	685a      	ldr	r2, [r3, #4]
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008cec:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008cee:	f7f9 fc33 	bl	8002558 <HAL_GetTick>
 8008cf2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008cf4:	e00e      	b.n	8008d14 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008cf6:	f7f9 fc2f 	bl	8002558 <HAL_GetTick>
 8008cfa:	4602      	mov	r2, r0
 8008cfc:	69fb      	ldr	r3, [r7, #28]
 8008cfe:	1ad3      	subs	r3, r2, r3
 8008d00:	2b19      	cmp	r3, #25
 8008d02:	d907      	bls.n	8008d14 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8008d04:	6a3b      	ldr	r3, [r7, #32]
 8008d06:	f043 0320 	orr.w	r3, r3, #32
 8008d0a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8008d0c:	2301      	movs	r3, #1
 8008d0e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8008d12:	e006      	b.n	8008d22 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	699b      	ldr	r3, [r3, #24]
 8008d1a:	f003 0320 	and.w	r3, r3, #32
 8008d1e:	2b20      	cmp	r3, #32
 8008d20:	d1e9      	bne.n	8008cf6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	699b      	ldr	r3, [r3, #24]
 8008d28:	f003 0320 	and.w	r3, r3, #32
 8008d2c:	2b20      	cmp	r3, #32
 8008d2e:	d003      	beq.n	8008d38 <I2C_IsErrorOccurred+0xe0>
 8008d30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d0aa      	beq.n	8008c8e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008d38:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d103      	bne.n	8008d48 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	2220      	movs	r2, #32
 8008d46:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008d48:	6a3b      	ldr	r3, [r7, #32]
 8008d4a:	f043 0304 	orr.w	r3, r3, #4
 8008d4e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008d50:	2301      	movs	r3, #1
 8008d52:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	699b      	ldr	r3, [r3, #24]
 8008d5c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008d5e:	69bb      	ldr	r3, [r7, #24]
 8008d60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d00b      	beq.n	8008d80 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008d68:	6a3b      	ldr	r3, [r7, #32]
 8008d6a:	f043 0301 	orr.w	r3, r3, #1
 8008d6e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008d78:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008d7a:	2301      	movs	r3, #1
 8008d7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008d80:	69bb      	ldr	r3, [r7, #24]
 8008d82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d00b      	beq.n	8008da2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008d8a:	6a3b      	ldr	r3, [r7, #32]
 8008d8c:	f043 0308 	orr.w	r3, r3, #8
 8008d90:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008d9a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008d9c:	2301      	movs	r3, #1
 8008d9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008da2:	69bb      	ldr	r3, [r7, #24]
 8008da4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d00b      	beq.n	8008dc4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008dac:	6a3b      	ldr	r3, [r7, #32]
 8008dae:	f043 0302 	orr.w	r3, r3, #2
 8008db2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008dbc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008dbe:	2301      	movs	r3, #1
 8008dc0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8008dc4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d01c      	beq.n	8008e06 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008dcc:	68f8      	ldr	r0, [r7, #12]
 8008dce:	f7ff fc98 	bl	8008702 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	6859      	ldr	r1, [r3, #4]
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	681a      	ldr	r2, [r3, #0]
 8008ddc:	4b0d      	ldr	r3, [pc, #52]	@ (8008e14 <I2C_IsErrorOccurred+0x1bc>)
 8008dde:	400b      	ands	r3, r1
 8008de0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008de6:	6a3b      	ldr	r3, [r7, #32]
 8008de8:	431a      	orrs	r2, r3
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	2220      	movs	r2, #32
 8008df2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	2200      	movs	r2, #0
 8008dfa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	2200      	movs	r2, #0
 8008e02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8008e06:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	3728      	adds	r7, #40	@ 0x28
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd80      	pop	{r7, pc}
 8008e12:	bf00      	nop
 8008e14:	fe00e800 	.word	0xfe00e800

08008e18 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008e18:	b480      	push	{r7}
 8008e1a:	b087      	sub	sp, #28
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	60f8      	str	r0, [r7, #12]
 8008e20:	607b      	str	r3, [r7, #4]
 8008e22:	460b      	mov	r3, r1
 8008e24:	817b      	strh	r3, [r7, #10]
 8008e26:	4613      	mov	r3, r2
 8008e28:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008e2a:	897b      	ldrh	r3, [r7, #10]
 8008e2c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008e30:	7a7b      	ldrb	r3, [r7, #9]
 8008e32:	041b      	lsls	r3, r3, #16
 8008e34:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008e38:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008e3e:	6a3b      	ldr	r3, [r7, #32]
 8008e40:	4313      	orrs	r3, r2
 8008e42:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008e46:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	685a      	ldr	r2, [r3, #4]
 8008e4e:	6a3b      	ldr	r3, [r7, #32]
 8008e50:	0d5b      	lsrs	r3, r3, #21
 8008e52:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8008e56:	4b08      	ldr	r3, [pc, #32]	@ (8008e78 <I2C_TransferConfig+0x60>)
 8008e58:	430b      	orrs	r3, r1
 8008e5a:	43db      	mvns	r3, r3
 8008e5c:	ea02 0103 	and.w	r1, r2, r3
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	697a      	ldr	r2, [r7, #20]
 8008e66:	430a      	orrs	r2, r1
 8008e68:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008e6a:	bf00      	nop
 8008e6c:	371c      	adds	r7, #28
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e74:	4770      	bx	lr
 8008e76:	bf00      	nop
 8008e78:	03ff63ff 	.word	0x03ff63ff

08008e7c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8008e7c:	b480      	push	{r7}
 8008e7e:	b085      	sub	sp, #20
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
 8008e84:	460b      	mov	r3, r1
 8008e86:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8008e88:	2300      	movs	r3, #0
 8008e8a:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e90:	4a39      	ldr	r2, [pc, #228]	@ (8008f78 <I2C_Enable_IRQ+0xfc>)
 8008e92:	4293      	cmp	r3, r2
 8008e94:	d032      	beq.n	8008efc <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8008e9a:	4a38      	ldr	r2, [pc, #224]	@ (8008f7c <I2C_Enable_IRQ+0x100>)
 8008e9c:	4293      	cmp	r3, r2
 8008e9e:	d02d      	beq.n	8008efc <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8008ea4:	4a36      	ldr	r2, [pc, #216]	@ (8008f80 <I2C_Enable_IRQ+0x104>)
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	d028      	beq.n	8008efc <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8008eaa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	da03      	bge.n	8008eba <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8008eb8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8008eba:	887b      	ldrh	r3, [r7, #2]
 8008ebc:	f003 0301 	and.w	r3, r3, #1
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d003      	beq.n	8008ecc <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8008eca:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8008ecc:	887b      	ldrh	r3, [r7, #2]
 8008ece:	f003 0302 	and.w	r3, r3, #2
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d003      	beq.n	8008ede <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8008edc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8008ede:	887b      	ldrh	r3, [r7, #2]
 8008ee0:	2b10      	cmp	r3, #16
 8008ee2:	d103      	bne.n	8008eec <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8008eea:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008eec:	887b      	ldrh	r3, [r7, #2]
 8008eee:	2b20      	cmp	r3, #32
 8008ef0:	d133      	bne.n	8008f5a <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	f043 0320 	orr.w	r3, r3, #32
 8008ef8:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008efa:	e02e      	b.n	8008f5a <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8008efc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	da03      	bge.n	8008f0c <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8008f0a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8008f0c:	887b      	ldrh	r3, [r7, #2]
 8008f0e:	f003 0301 	and.w	r3, r3, #1
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d003      	beq.n	8008f1e <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8008f1c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8008f1e:	887b      	ldrh	r3, [r7, #2]
 8008f20:	f003 0302 	and.w	r3, r3, #2
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d003      	beq.n	8008f30 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8008f2e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8008f30:	887b      	ldrh	r3, [r7, #2]
 8008f32:	2b10      	cmp	r3, #16
 8008f34:	d103      	bne.n	8008f3e <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8008f3c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008f3e:	887b      	ldrh	r3, [r7, #2]
 8008f40:	2b20      	cmp	r3, #32
 8008f42:	d103      	bne.n	8008f4c <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8008f4a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8008f4c:	887b      	ldrh	r3, [r7, #2]
 8008f4e:	2b40      	cmp	r3, #64	@ 0x40
 8008f50:	d103      	bne.n	8008f5a <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f58:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	6819      	ldr	r1, [r3, #0]
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	68fa      	ldr	r2, [r7, #12]
 8008f66:	430a      	orrs	r2, r1
 8008f68:	601a      	str	r2, [r3, #0]
}
 8008f6a:	bf00      	nop
 8008f6c:	3714      	adds	r7, #20
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f74:	4770      	bx	lr
 8008f76:	bf00      	nop
 8008f78:	08007339 	.word	0x08007339
 8008f7c:	0800775d 	.word	0x0800775d
 8008f80:	08007511 	.word	0x08007511

08008f84 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8008f84:	b480      	push	{r7}
 8008f86:	b085      	sub	sp, #20
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
 8008f8c:	460b      	mov	r3, r1
 8008f8e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8008f90:	2300      	movs	r3, #0
 8008f92:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8008f94:	887b      	ldrh	r3, [r7, #2]
 8008f96:	f003 0301 	and.w	r3, r3, #1
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d00f      	beq.n	8008fbe <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8008fa4:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008fac:	b2db      	uxtb	r3, r3
 8008fae:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008fb2:	2b28      	cmp	r3, #40	@ 0x28
 8008fb4:	d003      	beq.n	8008fbe <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8008fbc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8008fbe:	887b      	ldrh	r3, [r7, #2]
 8008fc0:	f003 0302 	and.w	r3, r3, #2
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d00f      	beq.n	8008fe8 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8008fce:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008fd6:	b2db      	uxtb	r3, r3
 8008fd8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008fdc:	2b28      	cmp	r3, #40	@ 0x28
 8008fde:	d003      	beq.n	8008fe8 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8008fe6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8008fe8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	da03      	bge.n	8008ff8 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8008ff6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8008ff8:	887b      	ldrh	r3, [r7, #2]
 8008ffa:	2b10      	cmp	r3, #16
 8008ffc:	d103      	bne.n	8009006 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8009004:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8009006:	887b      	ldrh	r3, [r7, #2]
 8009008:	2b20      	cmp	r3, #32
 800900a:	d103      	bne.n	8009014 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	f043 0320 	orr.w	r3, r3, #32
 8009012:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8009014:	887b      	ldrh	r3, [r7, #2]
 8009016:	2b40      	cmp	r3, #64	@ 0x40
 8009018:	d103      	bne.n	8009022 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009020:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	6819      	ldr	r1, [r3, #0]
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	43da      	mvns	r2, r3
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	400a      	ands	r2, r1
 8009032:	601a      	str	r2, [r3, #0]
}
 8009034:	bf00      	nop
 8009036:	3714      	adds	r7, #20
 8009038:	46bd      	mov	sp, r7
 800903a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903e:	4770      	bx	lr

08009040 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009040:	b480      	push	{r7}
 8009042:	b083      	sub	sp, #12
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
 8009048:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009050:	b2db      	uxtb	r3, r3
 8009052:	2b20      	cmp	r3, #32
 8009054:	d138      	bne.n	80090c8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800905c:	2b01      	cmp	r3, #1
 800905e:	d101      	bne.n	8009064 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009060:	2302      	movs	r3, #2
 8009062:	e032      	b.n	80090ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2201      	movs	r2, #1
 8009068:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2224      	movs	r2, #36	@ 0x24
 8009070:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	681a      	ldr	r2, [r3, #0]
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	f022 0201 	bic.w	r2, r2, #1
 8009082:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	681a      	ldr	r2, [r3, #0]
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009092:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	6819      	ldr	r1, [r3, #0]
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	683a      	ldr	r2, [r7, #0]
 80090a0:	430a      	orrs	r2, r1
 80090a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	681a      	ldr	r2, [r3, #0]
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f042 0201 	orr.w	r2, r2, #1
 80090b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2220      	movs	r2, #32
 80090b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2200      	movs	r2, #0
 80090c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80090c4:	2300      	movs	r3, #0
 80090c6:	e000      	b.n	80090ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80090c8:	2302      	movs	r3, #2
  }
}
 80090ca:	4618      	mov	r0, r3
 80090cc:	370c      	adds	r7, #12
 80090ce:	46bd      	mov	sp, r7
 80090d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d4:	4770      	bx	lr

080090d6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80090d6:	b480      	push	{r7}
 80090d8:	b085      	sub	sp, #20
 80090da:	af00      	add	r7, sp, #0
 80090dc:	6078      	str	r0, [r7, #4]
 80090de:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80090e6:	b2db      	uxtb	r3, r3
 80090e8:	2b20      	cmp	r3, #32
 80090ea:	d139      	bne.n	8009160 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80090f2:	2b01      	cmp	r3, #1
 80090f4:	d101      	bne.n	80090fa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80090f6:	2302      	movs	r3, #2
 80090f8:	e033      	b.n	8009162 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	2201      	movs	r2, #1
 80090fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	2224      	movs	r2, #36	@ 0x24
 8009106:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	681a      	ldr	r2, [r3, #0]
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	f022 0201 	bic.w	r2, r2, #1
 8009118:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8009128:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	021b      	lsls	r3, r3, #8
 800912e:	68fa      	ldr	r2, [r7, #12]
 8009130:	4313      	orrs	r3, r2
 8009132:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	68fa      	ldr	r2, [r7, #12]
 800913a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	681a      	ldr	r2, [r3, #0]
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f042 0201 	orr.w	r2, r2, #1
 800914a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2220      	movs	r2, #32
 8009150:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2200      	movs	r2, #0
 8009158:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800915c:	2300      	movs	r3, #0
 800915e:	e000      	b.n	8009162 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009160:	2302      	movs	r3, #2
  }
}
 8009162:	4618      	mov	r0, r3
 8009164:	3714      	adds	r7, #20
 8009166:	46bd      	mov	sp, r7
 8009168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916c:	4770      	bx	lr
	...

08009170 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b084      	sub	sp, #16
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009178:	4b19      	ldr	r3, [pc, #100]	@ (80091e0 <HAL_PWREx_ConfigSupply+0x70>)
 800917a:	68db      	ldr	r3, [r3, #12]
 800917c:	f003 0304 	and.w	r3, r3, #4
 8009180:	2b04      	cmp	r3, #4
 8009182:	d00a      	beq.n	800919a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009184:	4b16      	ldr	r3, [pc, #88]	@ (80091e0 <HAL_PWREx_ConfigSupply+0x70>)
 8009186:	68db      	ldr	r3, [r3, #12]
 8009188:	f003 0307 	and.w	r3, r3, #7
 800918c:	687a      	ldr	r2, [r7, #4]
 800918e:	429a      	cmp	r2, r3
 8009190:	d001      	beq.n	8009196 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009192:	2301      	movs	r3, #1
 8009194:	e01f      	b.n	80091d6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009196:	2300      	movs	r3, #0
 8009198:	e01d      	b.n	80091d6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800919a:	4b11      	ldr	r3, [pc, #68]	@ (80091e0 <HAL_PWREx_ConfigSupply+0x70>)
 800919c:	68db      	ldr	r3, [r3, #12]
 800919e:	f023 0207 	bic.w	r2, r3, #7
 80091a2:	490f      	ldr	r1, [pc, #60]	@ (80091e0 <HAL_PWREx_ConfigSupply+0x70>)
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	4313      	orrs	r3, r2
 80091a8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80091aa:	f7f9 f9d5 	bl	8002558 <HAL_GetTick>
 80091ae:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80091b0:	e009      	b.n	80091c6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80091b2:	f7f9 f9d1 	bl	8002558 <HAL_GetTick>
 80091b6:	4602      	mov	r2, r0
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	1ad3      	subs	r3, r2, r3
 80091bc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80091c0:	d901      	bls.n	80091c6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80091c2:	2301      	movs	r3, #1
 80091c4:	e007      	b.n	80091d6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80091c6:	4b06      	ldr	r3, [pc, #24]	@ (80091e0 <HAL_PWREx_ConfigSupply+0x70>)
 80091c8:	685b      	ldr	r3, [r3, #4]
 80091ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80091ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80091d2:	d1ee      	bne.n	80091b2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80091d4:	2300      	movs	r3, #0
}
 80091d6:	4618      	mov	r0, r3
 80091d8:	3710      	adds	r7, #16
 80091da:	46bd      	mov	sp, r7
 80091dc:	bd80      	pop	{r7, pc}
 80091de:	bf00      	nop
 80091e0:	58024800 	.word	0x58024800

080091e4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b08c      	sub	sp, #48	@ 0x30
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d102      	bne.n	80091f8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80091f2:	2301      	movs	r3, #1
 80091f4:	f000 bc48 	b.w	8009a88 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f003 0301 	and.w	r3, r3, #1
 8009200:	2b00      	cmp	r3, #0
 8009202:	f000 8088 	beq.w	8009316 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009206:	4b99      	ldr	r3, [pc, #612]	@ (800946c <HAL_RCC_OscConfig+0x288>)
 8009208:	691b      	ldr	r3, [r3, #16]
 800920a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800920e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009210:	4b96      	ldr	r3, [pc, #600]	@ (800946c <HAL_RCC_OscConfig+0x288>)
 8009212:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009214:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009216:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009218:	2b10      	cmp	r3, #16
 800921a:	d007      	beq.n	800922c <HAL_RCC_OscConfig+0x48>
 800921c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800921e:	2b18      	cmp	r3, #24
 8009220:	d111      	bne.n	8009246 <HAL_RCC_OscConfig+0x62>
 8009222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009224:	f003 0303 	and.w	r3, r3, #3
 8009228:	2b02      	cmp	r3, #2
 800922a:	d10c      	bne.n	8009246 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800922c:	4b8f      	ldr	r3, [pc, #572]	@ (800946c <HAL_RCC_OscConfig+0x288>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009234:	2b00      	cmp	r3, #0
 8009236:	d06d      	beq.n	8009314 <HAL_RCC_OscConfig+0x130>
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	685b      	ldr	r3, [r3, #4]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d169      	bne.n	8009314 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8009240:	2301      	movs	r3, #1
 8009242:	f000 bc21 	b.w	8009a88 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	685b      	ldr	r3, [r3, #4]
 800924a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800924e:	d106      	bne.n	800925e <HAL_RCC_OscConfig+0x7a>
 8009250:	4b86      	ldr	r3, [pc, #536]	@ (800946c <HAL_RCC_OscConfig+0x288>)
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	4a85      	ldr	r2, [pc, #532]	@ (800946c <HAL_RCC_OscConfig+0x288>)
 8009256:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800925a:	6013      	str	r3, [r2, #0]
 800925c:	e02e      	b.n	80092bc <HAL_RCC_OscConfig+0xd8>
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	685b      	ldr	r3, [r3, #4]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d10c      	bne.n	8009280 <HAL_RCC_OscConfig+0x9c>
 8009266:	4b81      	ldr	r3, [pc, #516]	@ (800946c <HAL_RCC_OscConfig+0x288>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	4a80      	ldr	r2, [pc, #512]	@ (800946c <HAL_RCC_OscConfig+0x288>)
 800926c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009270:	6013      	str	r3, [r2, #0]
 8009272:	4b7e      	ldr	r3, [pc, #504]	@ (800946c <HAL_RCC_OscConfig+0x288>)
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	4a7d      	ldr	r2, [pc, #500]	@ (800946c <HAL_RCC_OscConfig+0x288>)
 8009278:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800927c:	6013      	str	r3, [r2, #0]
 800927e:	e01d      	b.n	80092bc <HAL_RCC_OscConfig+0xd8>
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	685b      	ldr	r3, [r3, #4]
 8009284:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009288:	d10c      	bne.n	80092a4 <HAL_RCC_OscConfig+0xc0>
 800928a:	4b78      	ldr	r3, [pc, #480]	@ (800946c <HAL_RCC_OscConfig+0x288>)
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	4a77      	ldr	r2, [pc, #476]	@ (800946c <HAL_RCC_OscConfig+0x288>)
 8009290:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009294:	6013      	str	r3, [r2, #0]
 8009296:	4b75      	ldr	r3, [pc, #468]	@ (800946c <HAL_RCC_OscConfig+0x288>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	4a74      	ldr	r2, [pc, #464]	@ (800946c <HAL_RCC_OscConfig+0x288>)
 800929c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80092a0:	6013      	str	r3, [r2, #0]
 80092a2:	e00b      	b.n	80092bc <HAL_RCC_OscConfig+0xd8>
 80092a4:	4b71      	ldr	r3, [pc, #452]	@ (800946c <HAL_RCC_OscConfig+0x288>)
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	4a70      	ldr	r2, [pc, #448]	@ (800946c <HAL_RCC_OscConfig+0x288>)
 80092aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80092ae:	6013      	str	r3, [r2, #0]
 80092b0:	4b6e      	ldr	r3, [pc, #440]	@ (800946c <HAL_RCC_OscConfig+0x288>)
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	4a6d      	ldr	r2, [pc, #436]	@ (800946c <HAL_RCC_OscConfig+0x288>)
 80092b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80092ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	685b      	ldr	r3, [r3, #4]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d013      	beq.n	80092ec <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092c4:	f7f9 f948 	bl	8002558 <HAL_GetTick>
 80092c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80092ca:	e008      	b.n	80092de <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80092cc:	f7f9 f944 	bl	8002558 <HAL_GetTick>
 80092d0:	4602      	mov	r2, r0
 80092d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092d4:	1ad3      	subs	r3, r2, r3
 80092d6:	2b64      	cmp	r3, #100	@ 0x64
 80092d8:	d901      	bls.n	80092de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80092da:	2303      	movs	r3, #3
 80092dc:	e3d4      	b.n	8009a88 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80092de:	4b63      	ldr	r3, [pc, #396]	@ (800946c <HAL_RCC_OscConfig+0x288>)
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d0f0      	beq.n	80092cc <HAL_RCC_OscConfig+0xe8>
 80092ea:	e014      	b.n	8009316 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092ec:	f7f9 f934 	bl	8002558 <HAL_GetTick>
 80092f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80092f2:	e008      	b.n	8009306 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80092f4:	f7f9 f930 	bl	8002558 <HAL_GetTick>
 80092f8:	4602      	mov	r2, r0
 80092fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092fc:	1ad3      	subs	r3, r2, r3
 80092fe:	2b64      	cmp	r3, #100	@ 0x64
 8009300:	d901      	bls.n	8009306 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8009302:	2303      	movs	r3, #3
 8009304:	e3c0      	b.n	8009a88 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009306:	4b59      	ldr	r3, [pc, #356]	@ (800946c <HAL_RCC_OscConfig+0x288>)
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800930e:	2b00      	cmp	r3, #0
 8009310:	d1f0      	bne.n	80092f4 <HAL_RCC_OscConfig+0x110>
 8009312:	e000      	b.n	8009316 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009314:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f003 0302 	and.w	r3, r3, #2
 800931e:	2b00      	cmp	r3, #0
 8009320:	f000 80ca 	beq.w	80094b8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009324:	4b51      	ldr	r3, [pc, #324]	@ (800946c <HAL_RCC_OscConfig+0x288>)
 8009326:	691b      	ldr	r3, [r3, #16]
 8009328:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800932c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800932e:	4b4f      	ldr	r3, [pc, #316]	@ (800946c <HAL_RCC_OscConfig+0x288>)
 8009330:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009332:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009334:	6a3b      	ldr	r3, [r7, #32]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d007      	beq.n	800934a <HAL_RCC_OscConfig+0x166>
 800933a:	6a3b      	ldr	r3, [r7, #32]
 800933c:	2b18      	cmp	r3, #24
 800933e:	d156      	bne.n	80093ee <HAL_RCC_OscConfig+0x20a>
 8009340:	69fb      	ldr	r3, [r7, #28]
 8009342:	f003 0303 	and.w	r3, r3, #3
 8009346:	2b00      	cmp	r3, #0
 8009348:	d151      	bne.n	80093ee <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800934a:	4b48      	ldr	r3, [pc, #288]	@ (800946c <HAL_RCC_OscConfig+0x288>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f003 0304 	and.w	r3, r3, #4
 8009352:	2b00      	cmp	r3, #0
 8009354:	d005      	beq.n	8009362 <HAL_RCC_OscConfig+0x17e>
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	68db      	ldr	r3, [r3, #12]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d101      	bne.n	8009362 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800935e:	2301      	movs	r3, #1
 8009360:	e392      	b.n	8009a88 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009362:	4b42      	ldr	r3, [pc, #264]	@ (800946c <HAL_RCC_OscConfig+0x288>)
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f023 0219 	bic.w	r2, r3, #25
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	68db      	ldr	r3, [r3, #12]
 800936e:	493f      	ldr	r1, [pc, #252]	@ (800946c <HAL_RCC_OscConfig+0x288>)
 8009370:	4313      	orrs	r3, r2
 8009372:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009374:	f7f9 f8f0 	bl	8002558 <HAL_GetTick>
 8009378:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800937a:	e008      	b.n	800938e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800937c:	f7f9 f8ec 	bl	8002558 <HAL_GetTick>
 8009380:	4602      	mov	r2, r0
 8009382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009384:	1ad3      	subs	r3, r2, r3
 8009386:	2b02      	cmp	r3, #2
 8009388:	d901      	bls.n	800938e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800938a:	2303      	movs	r3, #3
 800938c:	e37c      	b.n	8009a88 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800938e:	4b37      	ldr	r3, [pc, #220]	@ (800946c <HAL_RCC_OscConfig+0x288>)
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f003 0304 	and.w	r3, r3, #4
 8009396:	2b00      	cmp	r3, #0
 8009398:	d0f0      	beq.n	800937c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800939a:	f7f9 f90d 	bl	80025b8 <HAL_GetREVID>
 800939e:	4603      	mov	r3, r0
 80093a0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80093a4:	4293      	cmp	r3, r2
 80093a6:	d817      	bhi.n	80093d8 <HAL_RCC_OscConfig+0x1f4>
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	691b      	ldr	r3, [r3, #16]
 80093ac:	2b40      	cmp	r3, #64	@ 0x40
 80093ae:	d108      	bne.n	80093c2 <HAL_RCC_OscConfig+0x1de>
 80093b0:	4b2e      	ldr	r3, [pc, #184]	@ (800946c <HAL_RCC_OscConfig+0x288>)
 80093b2:	685b      	ldr	r3, [r3, #4]
 80093b4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80093b8:	4a2c      	ldr	r2, [pc, #176]	@ (800946c <HAL_RCC_OscConfig+0x288>)
 80093ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80093be:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80093c0:	e07a      	b.n	80094b8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80093c2:	4b2a      	ldr	r3, [pc, #168]	@ (800946c <HAL_RCC_OscConfig+0x288>)
 80093c4:	685b      	ldr	r3, [r3, #4]
 80093c6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	691b      	ldr	r3, [r3, #16]
 80093ce:	031b      	lsls	r3, r3, #12
 80093d0:	4926      	ldr	r1, [pc, #152]	@ (800946c <HAL_RCC_OscConfig+0x288>)
 80093d2:	4313      	orrs	r3, r2
 80093d4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80093d6:	e06f      	b.n	80094b8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80093d8:	4b24      	ldr	r3, [pc, #144]	@ (800946c <HAL_RCC_OscConfig+0x288>)
 80093da:	685b      	ldr	r3, [r3, #4]
 80093dc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	691b      	ldr	r3, [r3, #16]
 80093e4:	061b      	lsls	r3, r3, #24
 80093e6:	4921      	ldr	r1, [pc, #132]	@ (800946c <HAL_RCC_OscConfig+0x288>)
 80093e8:	4313      	orrs	r3, r2
 80093ea:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80093ec:	e064      	b.n	80094b8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	68db      	ldr	r3, [r3, #12]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d047      	beq.n	8009486 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80093f6:	4b1d      	ldr	r3, [pc, #116]	@ (800946c <HAL_RCC_OscConfig+0x288>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	f023 0219 	bic.w	r2, r3, #25
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	68db      	ldr	r3, [r3, #12]
 8009402:	491a      	ldr	r1, [pc, #104]	@ (800946c <HAL_RCC_OscConfig+0x288>)
 8009404:	4313      	orrs	r3, r2
 8009406:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009408:	f7f9 f8a6 	bl	8002558 <HAL_GetTick>
 800940c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800940e:	e008      	b.n	8009422 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009410:	f7f9 f8a2 	bl	8002558 <HAL_GetTick>
 8009414:	4602      	mov	r2, r0
 8009416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009418:	1ad3      	subs	r3, r2, r3
 800941a:	2b02      	cmp	r3, #2
 800941c:	d901      	bls.n	8009422 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800941e:	2303      	movs	r3, #3
 8009420:	e332      	b.n	8009a88 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009422:	4b12      	ldr	r3, [pc, #72]	@ (800946c <HAL_RCC_OscConfig+0x288>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f003 0304 	and.w	r3, r3, #4
 800942a:	2b00      	cmp	r3, #0
 800942c:	d0f0      	beq.n	8009410 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800942e:	f7f9 f8c3 	bl	80025b8 <HAL_GetREVID>
 8009432:	4603      	mov	r3, r0
 8009434:	f241 0203 	movw	r2, #4099	@ 0x1003
 8009438:	4293      	cmp	r3, r2
 800943a:	d819      	bhi.n	8009470 <HAL_RCC_OscConfig+0x28c>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	691b      	ldr	r3, [r3, #16]
 8009440:	2b40      	cmp	r3, #64	@ 0x40
 8009442:	d108      	bne.n	8009456 <HAL_RCC_OscConfig+0x272>
 8009444:	4b09      	ldr	r3, [pc, #36]	@ (800946c <HAL_RCC_OscConfig+0x288>)
 8009446:	685b      	ldr	r3, [r3, #4]
 8009448:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800944c:	4a07      	ldr	r2, [pc, #28]	@ (800946c <HAL_RCC_OscConfig+0x288>)
 800944e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009452:	6053      	str	r3, [r2, #4]
 8009454:	e030      	b.n	80094b8 <HAL_RCC_OscConfig+0x2d4>
 8009456:	4b05      	ldr	r3, [pc, #20]	@ (800946c <HAL_RCC_OscConfig+0x288>)
 8009458:	685b      	ldr	r3, [r3, #4]
 800945a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	691b      	ldr	r3, [r3, #16]
 8009462:	031b      	lsls	r3, r3, #12
 8009464:	4901      	ldr	r1, [pc, #4]	@ (800946c <HAL_RCC_OscConfig+0x288>)
 8009466:	4313      	orrs	r3, r2
 8009468:	604b      	str	r3, [r1, #4]
 800946a:	e025      	b.n	80094b8 <HAL_RCC_OscConfig+0x2d4>
 800946c:	58024400 	.word	0x58024400
 8009470:	4b9a      	ldr	r3, [pc, #616]	@ (80096dc <HAL_RCC_OscConfig+0x4f8>)
 8009472:	685b      	ldr	r3, [r3, #4]
 8009474:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	691b      	ldr	r3, [r3, #16]
 800947c:	061b      	lsls	r3, r3, #24
 800947e:	4997      	ldr	r1, [pc, #604]	@ (80096dc <HAL_RCC_OscConfig+0x4f8>)
 8009480:	4313      	orrs	r3, r2
 8009482:	604b      	str	r3, [r1, #4]
 8009484:	e018      	b.n	80094b8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009486:	4b95      	ldr	r3, [pc, #596]	@ (80096dc <HAL_RCC_OscConfig+0x4f8>)
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	4a94      	ldr	r2, [pc, #592]	@ (80096dc <HAL_RCC_OscConfig+0x4f8>)
 800948c:	f023 0301 	bic.w	r3, r3, #1
 8009490:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009492:	f7f9 f861 	bl	8002558 <HAL_GetTick>
 8009496:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009498:	e008      	b.n	80094ac <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800949a:	f7f9 f85d 	bl	8002558 <HAL_GetTick>
 800949e:	4602      	mov	r2, r0
 80094a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094a2:	1ad3      	subs	r3, r2, r3
 80094a4:	2b02      	cmp	r3, #2
 80094a6:	d901      	bls.n	80094ac <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80094a8:	2303      	movs	r3, #3
 80094aa:	e2ed      	b.n	8009a88 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80094ac:	4b8b      	ldr	r3, [pc, #556]	@ (80096dc <HAL_RCC_OscConfig+0x4f8>)
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	f003 0304 	and.w	r3, r3, #4
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d1f0      	bne.n	800949a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	f003 0310 	and.w	r3, r3, #16
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	f000 80a9 	beq.w	8009618 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80094c6:	4b85      	ldr	r3, [pc, #532]	@ (80096dc <HAL_RCC_OscConfig+0x4f8>)
 80094c8:	691b      	ldr	r3, [r3, #16]
 80094ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80094ce:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80094d0:	4b82      	ldr	r3, [pc, #520]	@ (80096dc <HAL_RCC_OscConfig+0x4f8>)
 80094d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094d4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80094d6:	69bb      	ldr	r3, [r7, #24]
 80094d8:	2b08      	cmp	r3, #8
 80094da:	d007      	beq.n	80094ec <HAL_RCC_OscConfig+0x308>
 80094dc:	69bb      	ldr	r3, [r7, #24]
 80094de:	2b18      	cmp	r3, #24
 80094e0:	d13a      	bne.n	8009558 <HAL_RCC_OscConfig+0x374>
 80094e2:	697b      	ldr	r3, [r7, #20]
 80094e4:	f003 0303 	and.w	r3, r3, #3
 80094e8:	2b01      	cmp	r3, #1
 80094ea:	d135      	bne.n	8009558 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80094ec:	4b7b      	ldr	r3, [pc, #492]	@ (80096dc <HAL_RCC_OscConfig+0x4f8>)
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d005      	beq.n	8009504 <HAL_RCC_OscConfig+0x320>
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	69db      	ldr	r3, [r3, #28]
 80094fc:	2b80      	cmp	r3, #128	@ 0x80
 80094fe:	d001      	beq.n	8009504 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8009500:	2301      	movs	r3, #1
 8009502:	e2c1      	b.n	8009a88 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009504:	f7f9 f858 	bl	80025b8 <HAL_GetREVID>
 8009508:	4603      	mov	r3, r0
 800950a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800950e:	4293      	cmp	r3, r2
 8009510:	d817      	bhi.n	8009542 <HAL_RCC_OscConfig+0x35e>
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6a1b      	ldr	r3, [r3, #32]
 8009516:	2b20      	cmp	r3, #32
 8009518:	d108      	bne.n	800952c <HAL_RCC_OscConfig+0x348>
 800951a:	4b70      	ldr	r3, [pc, #448]	@ (80096dc <HAL_RCC_OscConfig+0x4f8>)
 800951c:	685b      	ldr	r3, [r3, #4]
 800951e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8009522:	4a6e      	ldr	r2, [pc, #440]	@ (80096dc <HAL_RCC_OscConfig+0x4f8>)
 8009524:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009528:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800952a:	e075      	b.n	8009618 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800952c:	4b6b      	ldr	r3, [pc, #428]	@ (80096dc <HAL_RCC_OscConfig+0x4f8>)
 800952e:	685b      	ldr	r3, [r3, #4]
 8009530:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	6a1b      	ldr	r3, [r3, #32]
 8009538:	069b      	lsls	r3, r3, #26
 800953a:	4968      	ldr	r1, [pc, #416]	@ (80096dc <HAL_RCC_OscConfig+0x4f8>)
 800953c:	4313      	orrs	r3, r2
 800953e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009540:	e06a      	b.n	8009618 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009542:	4b66      	ldr	r3, [pc, #408]	@ (80096dc <HAL_RCC_OscConfig+0x4f8>)
 8009544:	68db      	ldr	r3, [r3, #12]
 8009546:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	6a1b      	ldr	r3, [r3, #32]
 800954e:	061b      	lsls	r3, r3, #24
 8009550:	4962      	ldr	r1, [pc, #392]	@ (80096dc <HAL_RCC_OscConfig+0x4f8>)
 8009552:	4313      	orrs	r3, r2
 8009554:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009556:	e05f      	b.n	8009618 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	69db      	ldr	r3, [r3, #28]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d042      	beq.n	80095e6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009560:	4b5e      	ldr	r3, [pc, #376]	@ (80096dc <HAL_RCC_OscConfig+0x4f8>)
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	4a5d      	ldr	r2, [pc, #372]	@ (80096dc <HAL_RCC_OscConfig+0x4f8>)
 8009566:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800956a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800956c:	f7f8 fff4 	bl	8002558 <HAL_GetTick>
 8009570:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009572:	e008      	b.n	8009586 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009574:	f7f8 fff0 	bl	8002558 <HAL_GetTick>
 8009578:	4602      	mov	r2, r0
 800957a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800957c:	1ad3      	subs	r3, r2, r3
 800957e:	2b02      	cmp	r3, #2
 8009580:	d901      	bls.n	8009586 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8009582:	2303      	movs	r3, #3
 8009584:	e280      	b.n	8009a88 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009586:	4b55      	ldr	r3, [pc, #340]	@ (80096dc <HAL_RCC_OscConfig+0x4f8>)
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800958e:	2b00      	cmp	r3, #0
 8009590:	d0f0      	beq.n	8009574 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009592:	f7f9 f811 	bl	80025b8 <HAL_GetREVID>
 8009596:	4603      	mov	r3, r0
 8009598:	f241 0203 	movw	r2, #4099	@ 0x1003
 800959c:	4293      	cmp	r3, r2
 800959e:	d817      	bhi.n	80095d0 <HAL_RCC_OscConfig+0x3ec>
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	6a1b      	ldr	r3, [r3, #32]
 80095a4:	2b20      	cmp	r3, #32
 80095a6:	d108      	bne.n	80095ba <HAL_RCC_OscConfig+0x3d6>
 80095a8:	4b4c      	ldr	r3, [pc, #304]	@ (80096dc <HAL_RCC_OscConfig+0x4f8>)
 80095aa:	685b      	ldr	r3, [r3, #4]
 80095ac:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80095b0:	4a4a      	ldr	r2, [pc, #296]	@ (80096dc <HAL_RCC_OscConfig+0x4f8>)
 80095b2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80095b6:	6053      	str	r3, [r2, #4]
 80095b8:	e02e      	b.n	8009618 <HAL_RCC_OscConfig+0x434>
 80095ba:	4b48      	ldr	r3, [pc, #288]	@ (80096dc <HAL_RCC_OscConfig+0x4f8>)
 80095bc:	685b      	ldr	r3, [r3, #4]
 80095be:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6a1b      	ldr	r3, [r3, #32]
 80095c6:	069b      	lsls	r3, r3, #26
 80095c8:	4944      	ldr	r1, [pc, #272]	@ (80096dc <HAL_RCC_OscConfig+0x4f8>)
 80095ca:	4313      	orrs	r3, r2
 80095cc:	604b      	str	r3, [r1, #4]
 80095ce:	e023      	b.n	8009618 <HAL_RCC_OscConfig+0x434>
 80095d0:	4b42      	ldr	r3, [pc, #264]	@ (80096dc <HAL_RCC_OscConfig+0x4f8>)
 80095d2:	68db      	ldr	r3, [r3, #12]
 80095d4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	6a1b      	ldr	r3, [r3, #32]
 80095dc:	061b      	lsls	r3, r3, #24
 80095de:	493f      	ldr	r1, [pc, #252]	@ (80096dc <HAL_RCC_OscConfig+0x4f8>)
 80095e0:	4313      	orrs	r3, r2
 80095e2:	60cb      	str	r3, [r1, #12]
 80095e4:	e018      	b.n	8009618 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80095e6:	4b3d      	ldr	r3, [pc, #244]	@ (80096dc <HAL_RCC_OscConfig+0x4f8>)
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	4a3c      	ldr	r2, [pc, #240]	@ (80096dc <HAL_RCC_OscConfig+0x4f8>)
 80095ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80095f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095f2:	f7f8 ffb1 	bl	8002558 <HAL_GetTick>
 80095f6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80095f8:	e008      	b.n	800960c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80095fa:	f7f8 ffad 	bl	8002558 <HAL_GetTick>
 80095fe:	4602      	mov	r2, r0
 8009600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009602:	1ad3      	subs	r3, r2, r3
 8009604:	2b02      	cmp	r3, #2
 8009606:	d901      	bls.n	800960c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009608:	2303      	movs	r3, #3
 800960a:	e23d      	b.n	8009a88 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800960c:	4b33      	ldr	r3, [pc, #204]	@ (80096dc <HAL_RCC_OscConfig+0x4f8>)
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009614:	2b00      	cmp	r3, #0
 8009616:	d1f0      	bne.n	80095fa <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	f003 0308 	and.w	r3, r3, #8
 8009620:	2b00      	cmp	r3, #0
 8009622:	d036      	beq.n	8009692 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	695b      	ldr	r3, [r3, #20]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d019      	beq.n	8009660 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800962c:	4b2b      	ldr	r3, [pc, #172]	@ (80096dc <HAL_RCC_OscConfig+0x4f8>)
 800962e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009630:	4a2a      	ldr	r2, [pc, #168]	@ (80096dc <HAL_RCC_OscConfig+0x4f8>)
 8009632:	f043 0301 	orr.w	r3, r3, #1
 8009636:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009638:	f7f8 ff8e 	bl	8002558 <HAL_GetTick>
 800963c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800963e:	e008      	b.n	8009652 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009640:	f7f8 ff8a 	bl	8002558 <HAL_GetTick>
 8009644:	4602      	mov	r2, r0
 8009646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009648:	1ad3      	subs	r3, r2, r3
 800964a:	2b02      	cmp	r3, #2
 800964c:	d901      	bls.n	8009652 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800964e:	2303      	movs	r3, #3
 8009650:	e21a      	b.n	8009a88 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009652:	4b22      	ldr	r3, [pc, #136]	@ (80096dc <HAL_RCC_OscConfig+0x4f8>)
 8009654:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009656:	f003 0302 	and.w	r3, r3, #2
 800965a:	2b00      	cmp	r3, #0
 800965c:	d0f0      	beq.n	8009640 <HAL_RCC_OscConfig+0x45c>
 800965e:	e018      	b.n	8009692 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009660:	4b1e      	ldr	r3, [pc, #120]	@ (80096dc <HAL_RCC_OscConfig+0x4f8>)
 8009662:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009664:	4a1d      	ldr	r2, [pc, #116]	@ (80096dc <HAL_RCC_OscConfig+0x4f8>)
 8009666:	f023 0301 	bic.w	r3, r3, #1
 800966a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800966c:	f7f8 ff74 	bl	8002558 <HAL_GetTick>
 8009670:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009672:	e008      	b.n	8009686 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009674:	f7f8 ff70 	bl	8002558 <HAL_GetTick>
 8009678:	4602      	mov	r2, r0
 800967a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800967c:	1ad3      	subs	r3, r2, r3
 800967e:	2b02      	cmp	r3, #2
 8009680:	d901      	bls.n	8009686 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8009682:	2303      	movs	r3, #3
 8009684:	e200      	b.n	8009a88 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009686:	4b15      	ldr	r3, [pc, #84]	@ (80096dc <HAL_RCC_OscConfig+0x4f8>)
 8009688:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800968a:	f003 0302 	and.w	r3, r3, #2
 800968e:	2b00      	cmp	r3, #0
 8009690:	d1f0      	bne.n	8009674 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	f003 0320 	and.w	r3, r3, #32
 800969a:	2b00      	cmp	r3, #0
 800969c:	d039      	beq.n	8009712 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	699b      	ldr	r3, [r3, #24]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d01c      	beq.n	80096e0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80096a6:	4b0d      	ldr	r3, [pc, #52]	@ (80096dc <HAL_RCC_OscConfig+0x4f8>)
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	4a0c      	ldr	r2, [pc, #48]	@ (80096dc <HAL_RCC_OscConfig+0x4f8>)
 80096ac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80096b0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80096b2:	f7f8 ff51 	bl	8002558 <HAL_GetTick>
 80096b6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80096b8:	e008      	b.n	80096cc <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80096ba:	f7f8 ff4d 	bl	8002558 <HAL_GetTick>
 80096be:	4602      	mov	r2, r0
 80096c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096c2:	1ad3      	subs	r3, r2, r3
 80096c4:	2b02      	cmp	r3, #2
 80096c6:	d901      	bls.n	80096cc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80096c8:	2303      	movs	r3, #3
 80096ca:	e1dd      	b.n	8009a88 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80096cc:	4b03      	ldr	r3, [pc, #12]	@ (80096dc <HAL_RCC_OscConfig+0x4f8>)
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d0f0      	beq.n	80096ba <HAL_RCC_OscConfig+0x4d6>
 80096d8:	e01b      	b.n	8009712 <HAL_RCC_OscConfig+0x52e>
 80096da:	bf00      	nop
 80096dc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80096e0:	4b9b      	ldr	r3, [pc, #620]	@ (8009950 <HAL_RCC_OscConfig+0x76c>)
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	4a9a      	ldr	r2, [pc, #616]	@ (8009950 <HAL_RCC_OscConfig+0x76c>)
 80096e6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80096ea:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80096ec:	f7f8 ff34 	bl	8002558 <HAL_GetTick>
 80096f0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80096f2:	e008      	b.n	8009706 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80096f4:	f7f8 ff30 	bl	8002558 <HAL_GetTick>
 80096f8:	4602      	mov	r2, r0
 80096fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096fc:	1ad3      	subs	r3, r2, r3
 80096fe:	2b02      	cmp	r3, #2
 8009700:	d901      	bls.n	8009706 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8009702:	2303      	movs	r3, #3
 8009704:	e1c0      	b.n	8009a88 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009706:	4b92      	ldr	r3, [pc, #584]	@ (8009950 <HAL_RCC_OscConfig+0x76c>)
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800970e:	2b00      	cmp	r3, #0
 8009710:	d1f0      	bne.n	80096f4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	f003 0304 	and.w	r3, r3, #4
 800971a:	2b00      	cmp	r3, #0
 800971c:	f000 8081 	beq.w	8009822 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009720:	4b8c      	ldr	r3, [pc, #560]	@ (8009954 <HAL_RCC_OscConfig+0x770>)
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	4a8b      	ldr	r2, [pc, #556]	@ (8009954 <HAL_RCC_OscConfig+0x770>)
 8009726:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800972a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800972c:	f7f8 ff14 	bl	8002558 <HAL_GetTick>
 8009730:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009732:	e008      	b.n	8009746 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009734:	f7f8 ff10 	bl	8002558 <HAL_GetTick>
 8009738:	4602      	mov	r2, r0
 800973a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800973c:	1ad3      	subs	r3, r2, r3
 800973e:	2b64      	cmp	r3, #100	@ 0x64
 8009740:	d901      	bls.n	8009746 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8009742:	2303      	movs	r3, #3
 8009744:	e1a0      	b.n	8009a88 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009746:	4b83      	ldr	r3, [pc, #524]	@ (8009954 <HAL_RCC_OscConfig+0x770>)
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800974e:	2b00      	cmp	r3, #0
 8009750:	d0f0      	beq.n	8009734 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	689b      	ldr	r3, [r3, #8]
 8009756:	2b01      	cmp	r3, #1
 8009758:	d106      	bne.n	8009768 <HAL_RCC_OscConfig+0x584>
 800975a:	4b7d      	ldr	r3, [pc, #500]	@ (8009950 <HAL_RCC_OscConfig+0x76c>)
 800975c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800975e:	4a7c      	ldr	r2, [pc, #496]	@ (8009950 <HAL_RCC_OscConfig+0x76c>)
 8009760:	f043 0301 	orr.w	r3, r3, #1
 8009764:	6713      	str	r3, [r2, #112]	@ 0x70
 8009766:	e02d      	b.n	80097c4 <HAL_RCC_OscConfig+0x5e0>
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	689b      	ldr	r3, [r3, #8]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d10c      	bne.n	800978a <HAL_RCC_OscConfig+0x5a6>
 8009770:	4b77      	ldr	r3, [pc, #476]	@ (8009950 <HAL_RCC_OscConfig+0x76c>)
 8009772:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009774:	4a76      	ldr	r2, [pc, #472]	@ (8009950 <HAL_RCC_OscConfig+0x76c>)
 8009776:	f023 0301 	bic.w	r3, r3, #1
 800977a:	6713      	str	r3, [r2, #112]	@ 0x70
 800977c:	4b74      	ldr	r3, [pc, #464]	@ (8009950 <HAL_RCC_OscConfig+0x76c>)
 800977e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009780:	4a73      	ldr	r2, [pc, #460]	@ (8009950 <HAL_RCC_OscConfig+0x76c>)
 8009782:	f023 0304 	bic.w	r3, r3, #4
 8009786:	6713      	str	r3, [r2, #112]	@ 0x70
 8009788:	e01c      	b.n	80097c4 <HAL_RCC_OscConfig+0x5e0>
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	689b      	ldr	r3, [r3, #8]
 800978e:	2b05      	cmp	r3, #5
 8009790:	d10c      	bne.n	80097ac <HAL_RCC_OscConfig+0x5c8>
 8009792:	4b6f      	ldr	r3, [pc, #444]	@ (8009950 <HAL_RCC_OscConfig+0x76c>)
 8009794:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009796:	4a6e      	ldr	r2, [pc, #440]	@ (8009950 <HAL_RCC_OscConfig+0x76c>)
 8009798:	f043 0304 	orr.w	r3, r3, #4
 800979c:	6713      	str	r3, [r2, #112]	@ 0x70
 800979e:	4b6c      	ldr	r3, [pc, #432]	@ (8009950 <HAL_RCC_OscConfig+0x76c>)
 80097a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80097a2:	4a6b      	ldr	r2, [pc, #428]	@ (8009950 <HAL_RCC_OscConfig+0x76c>)
 80097a4:	f043 0301 	orr.w	r3, r3, #1
 80097a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80097aa:	e00b      	b.n	80097c4 <HAL_RCC_OscConfig+0x5e0>
 80097ac:	4b68      	ldr	r3, [pc, #416]	@ (8009950 <HAL_RCC_OscConfig+0x76c>)
 80097ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80097b0:	4a67      	ldr	r2, [pc, #412]	@ (8009950 <HAL_RCC_OscConfig+0x76c>)
 80097b2:	f023 0301 	bic.w	r3, r3, #1
 80097b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80097b8:	4b65      	ldr	r3, [pc, #404]	@ (8009950 <HAL_RCC_OscConfig+0x76c>)
 80097ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80097bc:	4a64      	ldr	r2, [pc, #400]	@ (8009950 <HAL_RCC_OscConfig+0x76c>)
 80097be:	f023 0304 	bic.w	r3, r3, #4
 80097c2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	689b      	ldr	r3, [r3, #8]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d015      	beq.n	80097f8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80097cc:	f7f8 fec4 	bl	8002558 <HAL_GetTick>
 80097d0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80097d2:	e00a      	b.n	80097ea <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80097d4:	f7f8 fec0 	bl	8002558 <HAL_GetTick>
 80097d8:	4602      	mov	r2, r0
 80097da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097dc:	1ad3      	subs	r3, r2, r3
 80097de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80097e2:	4293      	cmp	r3, r2
 80097e4:	d901      	bls.n	80097ea <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80097e6:	2303      	movs	r3, #3
 80097e8:	e14e      	b.n	8009a88 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80097ea:	4b59      	ldr	r3, [pc, #356]	@ (8009950 <HAL_RCC_OscConfig+0x76c>)
 80097ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80097ee:	f003 0302 	and.w	r3, r3, #2
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d0ee      	beq.n	80097d4 <HAL_RCC_OscConfig+0x5f0>
 80097f6:	e014      	b.n	8009822 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80097f8:	f7f8 feae 	bl	8002558 <HAL_GetTick>
 80097fc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80097fe:	e00a      	b.n	8009816 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009800:	f7f8 feaa 	bl	8002558 <HAL_GetTick>
 8009804:	4602      	mov	r2, r0
 8009806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009808:	1ad3      	subs	r3, r2, r3
 800980a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800980e:	4293      	cmp	r3, r2
 8009810:	d901      	bls.n	8009816 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8009812:	2303      	movs	r3, #3
 8009814:	e138      	b.n	8009a88 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009816:	4b4e      	ldr	r3, [pc, #312]	@ (8009950 <HAL_RCC_OscConfig+0x76c>)
 8009818:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800981a:	f003 0302 	and.w	r3, r3, #2
 800981e:	2b00      	cmp	r3, #0
 8009820:	d1ee      	bne.n	8009800 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009826:	2b00      	cmp	r3, #0
 8009828:	f000 812d 	beq.w	8009a86 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800982c:	4b48      	ldr	r3, [pc, #288]	@ (8009950 <HAL_RCC_OscConfig+0x76c>)
 800982e:	691b      	ldr	r3, [r3, #16]
 8009830:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009834:	2b18      	cmp	r3, #24
 8009836:	f000 80bd 	beq.w	80099b4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800983e:	2b02      	cmp	r3, #2
 8009840:	f040 809e 	bne.w	8009980 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009844:	4b42      	ldr	r3, [pc, #264]	@ (8009950 <HAL_RCC_OscConfig+0x76c>)
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	4a41      	ldr	r2, [pc, #260]	@ (8009950 <HAL_RCC_OscConfig+0x76c>)
 800984a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800984e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009850:	f7f8 fe82 	bl	8002558 <HAL_GetTick>
 8009854:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009856:	e008      	b.n	800986a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009858:	f7f8 fe7e 	bl	8002558 <HAL_GetTick>
 800985c:	4602      	mov	r2, r0
 800985e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009860:	1ad3      	subs	r3, r2, r3
 8009862:	2b02      	cmp	r3, #2
 8009864:	d901      	bls.n	800986a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8009866:	2303      	movs	r3, #3
 8009868:	e10e      	b.n	8009a88 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800986a:	4b39      	ldr	r3, [pc, #228]	@ (8009950 <HAL_RCC_OscConfig+0x76c>)
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009872:	2b00      	cmp	r3, #0
 8009874:	d1f0      	bne.n	8009858 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009876:	4b36      	ldr	r3, [pc, #216]	@ (8009950 <HAL_RCC_OscConfig+0x76c>)
 8009878:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800987a:	4b37      	ldr	r3, [pc, #220]	@ (8009958 <HAL_RCC_OscConfig+0x774>)
 800987c:	4013      	ands	r3, r2
 800987e:	687a      	ldr	r2, [r7, #4]
 8009880:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8009882:	687a      	ldr	r2, [r7, #4]
 8009884:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8009886:	0112      	lsls	r2, r2, #4
 8009888:	430a      	orrs	r2, r1
 800988a:	4931      	ldr	r1, [pc, #196]	@ (8009950 <HAL_RCC_OscConfig+0x76c>)
 800988c:	4313      	orrs	r3, r2
 800988e:	628b      	str	r3, [r1, #40]	@ 0x28
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009894:	3b01      	subs	r3, #1
 8009896:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800989e:	3b01      	subs	r3, #1
 80098a0:	025b      	lsls	r3, r3, #9
 80098a2:	b29b      	uxth	r3, r3
 80098a4:	431a      	orrs	r2, r3
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098aa:	3b01      	subs	r3, #1
 80098ac:	041b      	lsls	r3, r3, #16
 80098ae:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80098b2:	431a      	orrs	r2, r3
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098b8:	3b01      	subs	r3, #1
 80098ba:	061b      	lsls	r3, r3, #24
 80098bc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80098c0:	4923      	ldr	r1, [pc, #140]	@ (8009950 <HAL_RCC_OscConfig+0x76c>)
 80098c2:	4313      	orrs	r3, r2
 80098c4:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80098c6:	4b22      	ldr	r3, [pc, #136]	@ (8009950 <HAL_RCC_OscConfig+0x76c>)
 80098c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098ca:	4a21      	ldr	r2, [pc, #132]	@ (8009950 <HAL_RCC_OscConfig+0x76c>)
 80098cc:	f023 0301 	bic.w	r3, r3, #1
 80098d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80098d2:	4b1f      	ldr	r3, [pc, #124]	@ (8009950 <HAL_RCC_OscConfig+0x76c>)
 80098d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80098d6:	4b21      	ldr	r3, [pc, #132]	@ (800995c <HAL_RCC_OscConfig+0x778>)
 80098d8:	4013      	ands	r3, r2
 80098da:	687a      	ldr	r2, [r7, #4]
 80098dc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80098de:	00d2      	lsls	r2, r2, #3
 80098e0:	491b      	ldr	r1, [pc, #108]	@ (8009950 <HAL_RCC_OscConfig+0x76c>)
 80098e2:	4313      	orrs	r3, r2
 80098e4:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80098e6:	4b1a      	ldr	r3, [pc, #104]	@ (8009950 <HAL_RCC_OscConfig+0x76c>)
 80098e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098ea:	f023 020c 	bic.w	r2, r3, #12
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098f2:	4917      	ldr	r1, [pc, #92]	@ (8009950 <HAL_RCC_OscConfig+0x76c>)
 80098f4:	4313      	orrs	r3, r2
 80098f6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80098f8:	4b15      	ldr	r3, [pc, #84]	@ (8009950 <HAL_RCC_OscConfig+0x76c>)
 80098fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098fc:	f023 0202 	bic.w	r2, r3, #2
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009904:	4912      	ldr	r1, [pc, #72]	@ (8009950 <HAL_RCC_OscConfig+0x76c>)
 8009906:	4313      	orrs	r3, r2
 8009908:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800990a:	4b11      	ldr	r3, [pc, #68]	@ (8009950 <HAL_RCC_OscConfig+0x76c>)
 800990c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800990e:	4a10      	ldr	r2, [pc, #64]	@ (8009950 <HAL_RCC_OscConfig+0x76c>)
 8009910:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009914:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009916:	4b0e      	ldr	r3, [pc, #56]	@ (8009950 <HAL_RCC_OscConfig+0x76c>)
 8009918:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800991a:	4a0d      	ldr	r2, [pc, #52]	@ (8009950 <HAL_RCC_OscConfig+0x76c>)
 800991c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009920:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009922:	4b0b      	ldr	r3, [pc, #44]	@ (8009950 <HAL_RCC_OscConfig+0x76c>)
 8009924:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009926:	4a0a      	ldr	r2, [pc, #40]	@ (8009950 <HAL_RCC_OscConfig+0x76c>)
 8009928:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800992c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800992e:	4b08      	ldr	r3, [pc, #32]	@ (8009950 <HAL_RCC_OscConfig+0x76c>)
 8009930:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009932:	4a07      	ldr	r2, [pc, #28]	@ (8009950 <HAL_RCC_OscConfig+0x76c>)
 8009934:	f043 0301 	orr.w	r3, r3, #1
 8009938:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800993a:	4b05      	ldr	r3, [pc, #20]	@ (8009950 <HAL_RCC_OscConfig+0x76c>)
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	4a04      	ldr	r2, [pc, #16]	@ (8009950 <HAL_RCC_OscConfig+0x76c>)
 8009940:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009944:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009946:	f7f8 fe07 	bl	8002558 <HAL_GetTick>
 800994a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800994c:	e011      	b.n	8009972 <HAL_RCC_OscConfig+0x78e>
 800994e:	bf00      	nop
 8009950:	58024400 	.word	0x58024400
 8009954:	58024800 	.word	0x58024800
 8009958:	fffffc0c 	.word	0xfffffc0c
 800995c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009960:	f7f8 fdfa 	bl	8002558 <HAL_GetTick>
 8009964:	4602      	mov	r2, r0
 8009966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009968:	1ad3      	subs	r3, r2, r3
 800996a:	2b02      	cmp	r3, #2
 800996c:	d901      	bls.n	8009972 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800996e:	2303      	movs	r3, #3
 8009970:	e08a      	b.n	8009a88 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009972:	4b47      	ldr	r3, [pc, #284]	@ (8009a90 <HAL_RCC_OscConfig+0x8ac>)
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800997a:	2b00      	cmp	r3, #0
 800997c:	d0f0      	beq.n	8009960 <HAL_RCC_OscConfig+0x77c>
 800997e:	e082      	b.n	8009a86 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009980:	4b43      	ldr	r3, [pc, #268]	@ (8009a90 <HAL_RCC_OscConfig+0x8ac>)
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	4a42      	ldr	r2, [pc, #264]	@ (8009a90 <HAL_RCC_OscConfig+0x8ac>)
 8009986:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800998a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800998c:	f7f8 fde4 	bl	8002558 <HAL_GetTick>
 8009990:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009992:	e008      	b.n	80099a6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009994:	f7f8 fde0 	bl	8002558 <HAL_GetTick>
 8009998:	4602      	mov	r2, r0
 800999a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800999c:	1ad3      	subs	r3, r2, r3
 800999e:	2b02      	cmp	r3, #2
 80099a0:	d901      	bls.n	80099a6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80099a2:	2303      	movs	r3, #3
 80099a4:	e070      	b.n	8009a88 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80099a6:	4b3a      	ldr	r3, [pc, #232]	@ (8009a90 <HAL_RCC_OscConfig+0x8ac>)
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d1f0      	bne.n	8009994 <HAL_RCC_OscConfig+0x7b0>
 80099b2:	e068      	b.n	8009a86 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80099b4:	4b36      	ldr	r3, [pc, #216]	@ (8009a90 <HAL_RCC_OscConfig+0x8ac>)
 80099b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099b8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80099ba:	4b35      	ldr	r3, [pc, #212]	@ (8009a90 <HAL_RCC_OscConfig+0x8ac>)
 80099bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099be:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099c4:	2b01      	cmp	r3, #1
 80099c6:	d031      	beq.n	8009a2c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80099c8:	693b      	ldr	r3, [r7, #16]
 80099ca:	f003 0203 	and.w	r2, r3, #3
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80099d2:	429a      	cmp	r2, r3
 80099d4:	d12a      	bne.n	8009a2c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80099d6:	693b      	ldr	r3, [r7, #16]
 80099d8:	091b      	lsrs	r3, r3, #4
 80099da:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80099e2:	429a      	cmp	r2, r3
 80099e4:	d122      	bne.n	8009a2c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099f0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80099f2:	429a      	cmp	r2, r3
 80099f4:	d11a      	bne.n	8009a2c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	0a5b      	lsrs	r3, r3, #9
 80099fa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a02:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009a04:	429a      	cmp	r2, r3
 8009a06:	d111      	bne.n	8009a2c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	0c1b      	lsrs	r3, r3, #16
 8009a0c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a14:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009a16:	429a      	cmp	r2, r3
 8009a18:	d108      	bne.n	8009a2c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	0e1b      	lsrs	r3, r3, #24
 8009a1e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a26:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009a28:	429a      	cmp	r2, r3
 8009a2a:	d001      	beq.n	8009a30 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8009a2c:	2301      	movs	r3, #1
 8009a2e:	e02b      	b.n	8009a88 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8009a30:	4b17      	ldr	r3, [pc, #92]	@ (8009a90 <HAL_RCC_OscConfig+0x8ac>)
 8009a32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a34:	08db      	lsrs	r3, r3, #3
 8009a36:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009a3a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009a40:	693a      	ldr	r2, [r7, #16]
 8009a42:	429a      	cmp	r2, r3
 8009a44:	d01f      	beq.n	8009a86 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8009a46:	4b12      	ldr	r3, [pc, #72]	@ (8009a90 <HAL_RCC_OscConfig+0x8ac>)
 8009a48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a4a:	4a11      	ldr	r2, [pc, #68]	@ (8009a90 <HAL_RCC_OscConfig+0x8ac>)
 8009a4c:	f023 0301 	bic.w	r3, r3, #1
 8009a50:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009a52:	f7f8 fd81 	bl	8002558 <HAL_GetTick>
 8009a56:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8009a58:	bf00      	nop
 8009a5a:	f7f8 fd7d 	bl	8002558 <HAL_GetTick>
 8009a5e:	4602      	mov	r2, r0
 8009a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a62:	4293      	cmp	r3, r2
 8009a64:	d0f9      	beq.n	8009a5a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009a66:	4b0a      	ldr	r3, [pc, #40]	@ (8009a90 <HAL_RCC_OscConfig+0x8ac>)
 8009a68:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009a6a:	4b0a      	ldr	r3, [pc, #40]	@ (8009a94 <HAL_RCC_OscConfig+0x8b0>)
 8009a6c:	4013      	ands	r3, r2
 8009a6e:	687a      	ldr	r2, [r7, #4]
 8009a70:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009a72:	00d2      	lsls	r2, r2, #3
 8009a74:	4906      	ldr	r1, [pc, #24]	@ (8009a90 <HAL_RCC_OscConfig+0x8ac>)
 8009a76:	4313      	orrs	r3, r2
 8009a78:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8009a7a:	4b05      	ldr	r3, [pc, #20]	@ (8009a90 <HAL_RCC_OscConfig+0x8ac>)
 8009a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a7e:	4a04      	ldr	r2, [pc, #16]	@ (8009a90 <HAL_RCC_OscConfig+0x8ac>)
 8009a80:	f043 0301 	orr.w	r3, r3, #1
 8009a84:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8009a86:	2300      	movs	r3, #0
}
 8009a88:	4618      	mov	r0, r3
 8009a8a:	3730      	adds	r7, #48	@ 0x30
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	bd80      	pop	{r7, pc}
 8009a90:	58024400 	.word	0x58024400
 8009a94:	ffff0007 	.word	0xffff0007

08009a98 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b086      	sub	sp, #24
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
 8009aa0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d101      	bne.n	8009aac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009aa8:	2301      	movs	r3, #1
 8009aaa:	e19c      	b.n	8009de6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009aac:	4b8a      	ldr	r3, [pc, #552]	@ (8009cd8 <HAL_RCC_ClockConfig+0x240>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	f003 030f 	and.w	r3, r3, #15
 8009ab4:	683a      	ldr	r2, [r7, #0]
 8009ab6:	429a      	cmp	r2, r3
 8009ab8:	d910      	bls.n	8009adc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009aba:	4b87      	ldr	r3, [pc, #540]	@ (8009cd8 <HAL_RCC_ClockConfig+0x240>)
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	f023 020f 	bic.w	r2, r3, #15
 8009ac2:	4985      	ldr	r1, [pc, #532]	@ (8009cd8 <HAL_RCC_ClockConfig+0x240>)
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	4313      	orrs	r3, r2
 8009ac8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009aca:	4b83      	ldr	r3, [pc, #524]	@ (8009cd8 <HAL_RCC_ClockConfig+0x240>)
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	f003 030f 	and.w	r3, r3, #15
 8009ad2:	683a      	ldr	r2, [r7, #0]
 8009ad4:	429a      	cmp	r2, r3
 8009ad6:	d001      	beq.n	8009adc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009ad8:	2301      	movs	r3, #1
 8009ada:	e184      	b.n	8009de6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	f003 0304 	and.w	r3, r3, #4
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d010      	beq.n	8009b0a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	691a      	ldr	r2, [r3, #16]
 8009aec:	4b7b      	ldr	r3, [pc, #492]	@ (8009cdc <HAL_RCC_ClockConfig+0x244>)
 8009aee:	699b      	ldr	r3, [r3, #24]
 8009af0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009af4:	429a      	cmp	r2, r3
 8009af6:	d908      	bls.n	8009b0a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009af8:	4b78      	ldr	r3, [pc, #480]	@ (8009cdc <HAL_RCC_ClockConfig+0x244>)
 8009afa:	699b      	ldr	r3, [r3, #24]
 8009afc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	691b      	ldr	r3, [r3, #16]
 8009b04:	4975      	ldr	r1, [pc, #468]	@ (8009cdc <HAL_RCC_ClockConfig+0x244>)
 8009b06:	4313      	orrs	r3, r2
 8009b08:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	f003 0308 	and.w	r3, r3, #8
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d010      	beq.n	8009b38 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	695a      	ldr	r2, [r3, #20]
 8009b1a:	4b70      	ldr	r3, [pc, #448]	@ (8009cdc <HAL_RCC_ClockConfig+0x244>)
 8009b1c:	69db      	ldr	r3, [r3, #28]
 8009b1e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009b22:	429a      	cmp	r2, r3
 8009b24:	d908      	bls.n	8009b38 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009b26:	4b6d      	ldr	r3, [pc, #436]	@ (8009cdc <HAL_RCC_ClockConfig+0x244>)
 8009b28:	69db      	ldr	r3, [r3, #28]
 8009b2a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	695b      	ldr	r3, [r3, #20]
 8009b32:	496a      	ldr	r1, [pc, #424]	@ (8009cdc <HAL_RCC_ClockConfig+0x244>)
 8009b34:	4313      	orrs	r3, r2
 8009b36:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	f003 0310 	and.w	r3, r3, #16
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d010      	beq.n	8009b66 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	699a      	ldr	r2, [r3, #24]
 8009b48:	4b64      	ldr	r3, [pc, #400]	@ (8009cdc <HAL_RCC_ClockConfig+0x244>)
 8009b4a:	69db      	ldr	r3, [r3, #28]
 8009b4c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009b50:	429a      	cmp	r2, r3
 8009b52:	d908      	bls.n	8009b66 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009b54:	4b61      	ldr	r3, [pc, #388]	@ (8009cdc <HAL_RCC_ClockConfig+0x244>)
 8009b56:	69db      	ldr	r3, [r3, #28]
 8009b58:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	699b      	ldr	r3, [r3, #24]
 8009b60:	495e      	ldr	r1, [pc, #376]	@ (8009cdc <HAL_RCC_ClockConfig+0x244>)
 8009b62:	4313      	orrs	r3, r2
 8009b64:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	f003 0320 	and.w	r3, r3, #32
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d010      	beq.n	8009b94 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	69da      	ldr	r2, [r3, #28]
 8009b76:	4b59      	ldr	r3, [pc, #356]	@ (8009cdc <HAL_RCC_ClockConfig+0x244>)
 8009b78:	6a1b      	ldr	r3, [r3, #32]
 8009b7a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009b7e:	429a      	cmp	r2, r3
 8009b80:	d908      	bls.n	8009b94 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009b82:	4b56      	ldr	r3, [pc, #344]	@ (8009cdc <HAL_RCC_ClockConfig+0x244>)
 8009b84:	6a1b      	ldr	r3, [r3, #32]
 8009b86:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	69db      	ldr	r3, [r3, #28]
 8009b8e:	4953      	ldr	r1, [pc, #332]	@ (8009cdc <HAL_RCC_ClockConfig+0x244>)
 8009b90:	4313      	orrs	r3, r2
 8009b92:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	f003 0302 	and.w	r3, r3, #2
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d010      	beq.n	8009bc2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	68da      	ldr	r2, [r3, #12]
 8009ba4:	4b4d      	ldr	r3, [pc, #308]	@ (8009cdc <HAL_RCC_ClockConfig+0x244>)
 8009ba6:	699b      	ldr	r3, [r3, #24]
 8009ba8:	f003 030f 	and.w	r3, r3, #15
 8009bac:	429a      	cmp	r2, r3
 8009bae:	d908      	bls.n	8009bc2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009bb0:	4b4a      	ldr	r3, [pc, #296]	@ (8009cdc <HAL_RCC_ClockConfig+0x244>)
 8009bb2:	699b      	ldr	r3, [r3, #24]
 8009bb4:	f023 020f 	bic.w	r2, r3, #15
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	68db      	ldr	r3, [r3, #12]
 8009bbc:	4947      	ldr	r1, [pc, #284]	@ (8009cdc <HAL_RCC_ClockConfig+0x244>)
 8009bbe:	4313      	orrs	r3, r2
 8009bc0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	f003 0301 	and.w	r3, r3, #1
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d055      	beq.n	8009c7a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009bce:	4b43      	ldr	r3, [pc, #268]	@ (8009cdc <HAL_RCC_ClockConfig+0x244>)
 8009bd0:	699b      	ldr	r3, [r3, #24]
 8009bd2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	689b      	ldr	r3, [r3, #8]
 8009bda:	4940      	ldr	r1, [pc, #256]	@ (8009cdc <HAL_RCC_ClockConfig+0x244>)
 8009bdc:	4313      	orrs	r3, r2
 8009bde:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	685b      	ldr	r3, [r3, #4]
 8009be4:	2b02      	cmp	r3, #2
 8009be6:	d107      	bne.n	8009bf8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009be8:	4b3c      	ldr	r3, [pc, #240]	@ (8009cdc <HAL_RCC_ClockConfig+0x244>)
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d121      	bne.n	8009c38 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009bf4:	2301      	movs	r3, #1
 8009bf6:	e0f6      	b.n	8009de6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	685b      	ldr	r3, [r3, #4]
 8009bfc:	2b03      	cmp	r3, #3
 8009bfe:	d107      	bne.n	8009c10 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009c00:	4b36      	ldr	r3, [pc, #216]	@ (8009cdc <HAL_RCC_ClockConfig+0x244>)
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d115      	bne.n	8009c38 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009c0c:	2301      	movs	r3, #1
 8009c0e:	e0ea      	b.n	8009de6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	685b      	ldr	r3, [r3, #4]
 8009c14:	2b01      	cmp	r3, #1
 8009c16:	d107      	bne.n	8009c28 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009c18:	4b30      	ldr	r3, [pc, #192]	@ (8009cdc <HAL_RCC_ClockConfig+0x244>)
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d109      	bne.n	8009c38 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009c24:	2301      	movs	r3, #1
 8009c26:	e0de      	b.n	8009de6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009c28:	4b2c      	ldr	r3, [pc, #176]	@ (8009cdc <HAL_RCC_ClockConfig+0x244>)
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	f003 0304 	and.w	r3, r3, #4
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d101      	bne.n	8009c38 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009c34:	2301      	movs	r3, #1
 8009c36:	e0d6      	b.n	8009de6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009c38:	4b28      	ldr	r3, [pc, #160]	@ (8009cdc <HAL_RCC_ClockConfig+0x244>)
 8009c3a:	691b      	ldr	r3, [r3, #16]
 8009c3c:	f023 0207 	bic.w	r2, r3, #7
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	685b      	ldr	r3, [r3, #4]
 8009c44:	4925      	ldr	r1, [pc, #148]	@ (8009cdc <HAL_RCC_ClockConfig+0x244>)
 8009c46:	4313      	orrs	r3, r2
 8009c48:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009c4a:	f7f8 fc85 	bl	8002558 <HAL_GetTick>
 8009c4e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009c50:	e00a      	b.n	8009c68 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009c52:	f7f8 fc81 	bl	8002558 <HAL_GetTick>
 8009c56:	4602      	mov	r2, r0
 8009c58:	697b      	ldr	r3, [r7, #20]
 8009c5a:	1ad3      	subs	r3, r2, r3
 8009c5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009c60:	4293      	cmp	r3, r2
 8009c62:	d901      	bls.n	8009c68 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8009c64:	2303      	movs	r3, #3
 8009c66:	e0be      	b.n	8009de6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009c68:	4b1c      	ldr	r3, [pc, #112]	@ (8009cdc <HAL_RCC_ClockConfig+0x244>)
 8009c6a:	691b      	ldr	r3, [r3, #16]
 8009c6c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	685b      	ldr	r3, [r3, #4]
 8009c74:	00db      	lsls	r3, r3, #3
 8009c76:	429a      	cmp	r2, r3
 8009c78:	d1eb      	bne.n	8009c52 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	f003 0302 	and.w	r3, r3, #2
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d010      	beq.n	8009ca8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	68da      	ldr	r2, [r3, #12]
 8009c8a:	4b14      	ldr	r3, [pc, #80]	@ (8009cdc <HAL_RCC_ClockConfig+0x244>)
 8009c8c:	699b      	ldr	r3, [r3, #24]
 8009c8e:	f003 030f 	and.w	r3, r3, #15
 8009c92:	429a      	cmp	r2, r3
 8009c94:	d208      	bcs.n	8009ca8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009c96:	4b11      	ldr	r3, [pc, #68]	@ (8009cdc <HAL_RCC_ClockConfig+0x244>)
 8009c98:	699b      	ldr	r3, [r3, #24]
 8009c9a:	f023 020f 	bic.w	r2, r3, #15
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	68db      	ldr	r3, [r3, #12]
 8009ca2:	490e      	ldr	r1, [pc, #56]	@ (8009cdc <HAL_RCC_ClockConfig+0x244>)
 8009ca4:	4313      	orrs	r3, r2
 8009ca6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009ca8:	4b0b      	ldr	r3, [pc, #44]	@ (8009cd8 <HAL_RCC_ClockConfig+0x240>)
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	f003 030f 	and.w	r3, r3, #15
 8009cb0:	683a      	ldr	r2, [r7, #0]
 8009cb2:	429a      	cmp	r2, r3
 8009cb4:	d214      	bcs.n	8009ce0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009cb6:	4b08      	ldr	r3, [pc, #32]	@ (8009cd8 <HAL_RCC_ClockConfig+0x240>)
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	f023 020f 	bic.w	r2, r3, #15
 8009cbe:	4906      	ldr	r1, [pc, #24]	@ (8009cd8 <HAL_RCC_ClockConfig+0x240>)
 8009cc0:	683b      	ldr	r3, [r7, #0]
 8009cc2:	4313      	orrs	r3, r2
 8009cc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009cc6:	4b04      	ldr	r3, [pc, #16]	@ (8009cd8 <HAL_RCC_ClockConfig+0x240>)
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	f003 030f 	and.w	r3, r3, #15
 8009cce:	683a      	ldr	r2, [r7, #0]
 8009cd0:	429a      	cmp	r2, r3
 8009cd2:	d005      	beq.n	8009ce0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009cd4:	2301      	movs	r3, #1
 8009cd6:	e086      	b.n	8009de6 <HAL_RCC_ClockConfig+0x34e>
 8009cd8:	52002000 	.word	0x52002000
 8009cdc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	f003 0304 	and.w	r3, r3, #4
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d010      	beq.n	8009d0e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	691a      	ldr	r2, [r3, #16]
 8009cf0:	4b3f      	ldr	r3, [pc, #252]	@ (8009df0 <HAL_RCC_ClockConfig+0x358>)
 8009cf2:	699b      	ldr	r3, [r3, #24]
 8009cf4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009cf8:	429a      	cmp	r2, r3
 8009cfa:	d208      	bcs.n	8009d0e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009cfc:	4b3c      	ldr	r3, [pc, #240]	@ (8009df0 <HAL_RCC_ClockConfig+0x358>)
 8009cfe:	699b      	ldr	r3, [r3, #24]
 8009d00:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	691b      	ldr	r3, [r3, #16]
 8009d08:	4939      	ldr	r1, [pc, #228]	@ (8009df0 <HAL_RCC_ClockConfig+0x358>)
 8009d0a:	4313      	orrs	r3, r2
 8009d0c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	f003 0308 	and.w	r3, r3, #8
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d010      	beq.n	8009d3c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	695a      	ldr	r2, [r3, #20]
 8009d1e:	4b34      	ldr	r3, [pc, #208]	@ (8009df0 <HAL_RCC_ClockConfig+0x358>)
 8009d20:	69db      	ldr	r3, [r3, #28]
 8009d22:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009d26:	429a      	cmp	r2, r3
 8009d28:	d208      	bcs.n	8009d3c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009d2a:	4b31      	ldr	r3, [pc, #196]	@ (8009df0 <HAL_RCC_ClockConfig+0x358>)
 8009d2c:	69db      	ldr	r3, [r3, #28]
 8009d2e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	695b      	ldr	r3, [r3, #20]
 8009d36:	492e      	ldr	r1, [pc, #184]	@ (8009df0 <HAL_RCC_ClockConfig+0x358>)
 8009d38:	4313      	orrs	r3, r2
 8009d3a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	f003 0310 	and.w	r3, r3, #16
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d010      	beq.n	8009d6a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	699a      	ldr	r2, [r3, #24]
 8009d4c:	4b28      	ldr	r3, [pc, #160]	@ (8009df0 <HAL_RCC_ClockConfig+0x358>)
 8009d4e:	69db      	ldr	r3, [r3, #28]
 8009d50:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009d54:	429a      	cmp	r2, r3
 8009d56:	d208      	bcs.n	8009d6a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009d58:	4b25      	ldr	r3, [pc, #148]	@ (8009df0 <HAL_RCC_ClockConfig+0x358>)
 8009d5a:	69db      	ldr	r3, [r3, #28]
 8009d5c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	699b      	ldr	r3, [r3, #24]
 8009d64:	4922      	ldr	r1, [pc, #136]	@ (8009df0 <HAL_RCC_ClockConfig+0x358>)
 8009d66:	4313      	orrs	r3, r2
 8009d68:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	f003 0320 	and.w	r3, r3, #32
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d010      	beq.n	8009d98 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	69da      	ldr	r2, [r3, #28]
 8009d7a:	4b1d      	ldr	r3, [pc, #116]	@ (8009df0 <HAL_RCC_ClockConfig+0x358>)
 8009d7c:	6a1b      	ldr	r3, [r3, #32]
 8009d7e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009d82:	429a      	cmp	r2, r3
 8009d84:	d208      	bcs.n	8009d98 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009d86:	4b1a      	ldr	r3, [pc, #104]	@ (8009df0 <HAL_RCC_ClockConfig+0x358>)
 8009d88:	6a1b      	ldr	r3, [r3, #32]
 8009d8a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	69db      	ldr	r3, [r3, #28]
 8009d92:	4917      	ldr	r1, [pc, #92]	@ (8009df0 <HAL_RCC_ClockConfig+0x358>)
 8009d94:	4313      	orrs	r3, r2
 8009d96:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009d98:	f000 f834 	bl	8009e04 <HAL_RCC_GetSysClockFreq>
 8009d9c:	4602      	mov	r2, r0
 8009d9e:	4b14      	ldr	r3, [pc, #80]	@ (8009df0 <HAL_RCC_ClockConfig+0x358>)
 8009da0:	699b      	ldr	r3, [r3, #24]
 8009da2:	0a1b      	lsrs	r3, r3, #8
 8009da4:	f003 030f 	and.w	r3, r3, #15
 8009da8:	4912      	ldr	r1, [pc, #72]	@ (8009df4 <HAL_RCC_ClockConfig+0x35c>)
 8009daa:	5ccb      	ldrb	r3, [r1, r3]
 8009dac:	f003 031f 	and.w	r3, r3, #31
 8009db0:	fa22 f303 	lsr.w	r3, r2, r3
 8009db4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009db6:	4b0e      	ldr	r3, [pc, #56]	@ (8009df0 <HAL_RCC_ClockConfig+0x358>)
 8009db8:	699b      	ldr	r3, [r3, #24]
 8009dba:	f003 030f 	and.w	r3, r3, #15
 8009dbe:	4a0d      	ldr	r2, [pc, #52]	@ (8009df4 <HAL_RCC_ClockConfig+0x35c>)
 8009dc0:	5cd3      	ldrb	r3, [r2, r3]
 8009dc2:	f003 031f 	and.w	r3, r3, #31
 8009dc6:	693a      	ldr	r2, [r7, #16]
 8009dc8:	fa22 f303 	lsr.w	r3, r2, r3
 8009dcc:	4a0a      	ldr	r2, [pc, #40]	@ (8009df8 <HAL_RCC_ClockConfig+0x360>)
 8009dce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009dd0:	4a0a      	ldr	r2, [pc, #40]	@ (8009dfc <HAL_RCC_ClockConfig+0x364>)
 8009dd2:	693b      	ldr	r3, [r7, #16]
 8009dd4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8009dd6:	4b0a      	ldr	r3, [pc, #40]	@ (8009e00 <HAL_RCC_ClockConfig+0x368>)
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	4618      	mov	r0, r3
 8009ddc:	f7f8 fb72 	bl	80024c4 <HAL_InitTick>
 8009de0:	4603      	mov	r3, r0
 8009de2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009de6:	4618      	mov	r0, r3
 8009de8:	3718      	adds	r7, #24
 8009dea:	46bd      	mov	sp, r7
 8009dec:	bd80      	pop	{r7, pc}
 8009dee:	bf00      	nop
 8009df0:	58024400 	.word	0x58024400
 8009df4:	080125a8 	.word	0x080125a8
 8009df8:	24000004 	.word	0x24000004
 8009dfc:	24000000 	.word	0x24000000
 8009e00:	24000008 	.word	0x24000008

08009e04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009e04:	b480      	push	{r7}
 8009e06:	b089      	sub	sp, #36	@ 0x24
 8009e08:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009e0a:	4bb3      	ldr	r3, [pc, #716]	@ (800a0d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009e0c:	691b      	ldr	r3, [r3, #16]
 8009e0e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009e12:	2b18      	cmp	r3, #24
 8009e14:	f200 8155 	bhi.w	800a0c2 <HAL_RCC_GetSysClockFreq+0x2be>
 8009e18:	a201      	add	r2, pc, #4	@ (adr r2, 8009e20 <HAL_RCC_GetSysClockFreq+0x1c>)
 8009e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e1e:	bf00      	nop
 8009e20:	08009e85 	.word	0x08009e85
 8009e24:	0800a0c3 	.word	0x0800a0c3
 8009e28:	0800a0c3 	.word	0x0800a0c3
 8009e2c:	0800a0c3 	.word	0x0800a0c3
 8009e30:	0800a0c3 	.word	0x0800a0c3
 8009e34:	0800a0c3 	.word	0x0800a0c3
 8009e38:	0800a0c3 	.word	0x0800a0c3
 8009e3c:	0800a0c3 	.word	0x0800a0c3
 8009e40:	08009eab 	.word	0x08009eab
 8009e44:	0800a0c3 	.word	0x0800a0c3
 8009e48:	0800a0c3 	.word	0x0800a0c3
 8009e4c:	0800a0c3 	.word	0x0800a0c3
 8009e50:	0800a0c3 	.word	0x0800a0c3
 8009e54:	0800a0c3 	.word	0x0800a0c3
 8009e58:	0800a0c3 	.word	0x0800a0c3
 8009e5c:	0800a0c3 	.word	0x0800a0c3
 8009e60:	08009eb1 	.word	0x08009eb1
 8009e64:	0800a0c3 	.word	0x0800a0c3
 8009e68:	0800a0c3 	.word	0x0800a0c3
 8009e6c:	0800a0c3 	.word	0x0800a0c3
 8009e70:	0800a0c3 	.word	0x0800a0c3
 8009e74:	0800a0c3 	.word	0x0800a0c3
 8009e78:	0800a0c3 	.word	0x0800a0c3
 8009e7c:	0800a0c3 	.word	0x0800a0c3
 8009e80:	08009eb7 	.word	0x08009eb7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009e84:	4b94      	ldr	r3, [pc, #592]	@ (800a0d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	f003 0320 	and.w	r3, r3, #32
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d009      	beq.n	8009ea4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009e90:	4b91      	ldr	r3, [pc, #580]	@ (800a0d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	08db      	lsrs	r3, r3, #3
 8009e96:	f003 0303 	and.w	r3, r3, #3
 8009e9a:	4a90      	ldr	r2, [pc, #576]	@ (800a0dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009e9c:	fa22 f303 	lsr.w	r3, r2, r3
 8009ea0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8009ea2:	e111      	b.n	800a0c8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009ea4:	4b8d      	ldr	r3, [pc, #564]	@ (800a0dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009ea6:	61bb      	str	r3, [r7, #24]
      break;
 8009ea8:	e10e      	b.n	800a0c8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8009eaa:	4b8d      	ldr	r3, [pc, #564]	@ (800a0e0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009eac:	61bb      	str	r3, [r7, #24]
      break;
 8009eae:	e10b      	b.n	800a0c8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8009eb0:	4b8c      	ldr	r3, [pc, #560]	@ (800a0e4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8009eb2:	61bb      	str	r3, [r7, #24]
      break;
 8009eb4:	e108      	b.n	800a0c8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009eb6:	4b88      	ldr	r3, [pc, #544]	@ (800a0d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009eb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009eba:	f003 0303 	and.w	r3, r3, #3
 8009ebe:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8009ec0:	4b85      	ldr	r3, [pc, #532]	@ (800a0d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009ec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ec4:	091b      	lsrs	r3, r3, #4
 8009ec6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009eca:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009ecc:	4b82      	ldr	r3, [pc, #520]	@ (800a0d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009ece:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ed0:	f003 0301 	and.w	r3, r3, #1
 8009ed4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009ed6:	4b80      	ldr	r3, [pc, #512]	@ (800a0d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009ed8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009eda:	08db      	lsrs	r3, r3, #3
 8009edc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009ee0:	68fa      	ldr	r2, [r7, #12]
 8009ee2:	fb02 f303 	mul.w	r3, r2, r3
 8009ee6:	ee07 3a90 	vmov	s15, r3
 8009eea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009eee:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8009ef2:	693b      	ldr	r3, [r7, #16]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	f000 80e1 	beq.w	800a0bc <HAL_RCC_GetSysClockFreq+0x2b8>
 8009efa:	697b      	ldr	r3, [r7, #20]
 8009efc:	2b02      	cmp	r3, #2
 8009efe:	f000 8083 	beq.w	800a008 <HAL_RCC_GetSysClockFreq+0x204>
 8009f02:	697b      	ldr	r3, [r7, #20]
 8009f04:	2b02      	cmp	r3, #2
 8009f06:	f200 80a1 	bhi.w	800a04c <HAL_RCC_GetSysClockFreq+0x248>
 8009f0a:	697b      	ldr	r3, [r7, #20]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d003      	beq.n	8009f18 <HAL_RCC_GetSysClockFreq+0x114>
 8009f10:	697b      	ldr	r3, [r7, #20]
 8009f12:	2b01      	cmp	r3, #1
 8009f14:	d056      	beq.n	8009fc4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8009f16:	e099      	b.n	800a04c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f18:	4b6f      	ldr	r3, [pc, #444]	@ (800a0d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	f003 0320 	and.w	r3, r3, #32
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d02d      	beq.n	8009f80 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009f24:	4b6c      	ldr	r3, [pc, #432]	@ (800a0d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	08db      	lsrs	r3, r3, #3
 8009f2a:	f003 0303 	and.w	r3, r3, #3
 8009f2e:	4a6b      	ldr	r2, [pc, #428]	@ (800a0dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009f30:	fa22 f303 	lsr.w	r3, r2, r3
 8009f34:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	ee07 3a90 	vmov	s15, r3
 8009f3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f40:	693b      	ldr	r3, [r7, #16]
 8009f42:	ee07 3a90 	vmov	s15, r3
 8009f46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f4e:	4b62      	ldr	r3, [pc, #392]	@ (800a0d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f56:	ee07 3a90 	vmov	s15, r3
 8009f5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009f62:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800a0e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009f66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009f72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f7a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8009f7e:	e087      	b.n	800a090 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009f80:	693b      	ldr	r3, [r7, #16]
 8009f82:	ee07 3a90 	vmov	s15, r3
 8009f86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f8a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800a0ec <HAL_RCC_GetSysClockFreq+0x2e8>
 8009f8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f92:	4b51      	ldr	r3, [pc, #324]	@ (800a0d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f9a:	ee07 3a90 	vmov	s15, r3
 8009f9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fa2:	ed97 6a02 	vldr	s12, [r7, #8]
 8009fa6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800a0e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009faa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009fae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009fb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009fb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009fba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fbe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009fc2:	e065      	b.n	800a090 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009fc4:	693b      	ldr	r3, [r7, #16]
 8009fc6:	ee07 3a90 	vmov	s15, r3
 8009fca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fce:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800a0f0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009fd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009fd6:	4b40      	ldr	r3, [pc, #256]	@ (800a0d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009fda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fde:	ee07 3a90 	vmov	s15, r3
 8009fe2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fe6:	ed97 6a02 	vldr	s12, [r7, #8]
 8009fea:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800a0e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009fee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ff2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ff6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009ffa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ffe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a002:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a006:	e043      	b.n	800a090 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a008:	693b      	ldr	r3, [r7, #16]
 800a00a:	ee07 3a90 	vmov	s15, r3
 800a00e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a012:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800a0f4 <HAL_RCC_GetSysClockFreq+0x2f0>
 800a016:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a01a:	4b2f      	ldr	r3, [pc, #188]	@ (800a0d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a01c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a01e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a022:	ee07 3a90 	vmov	s15, r3
 800a026:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a02a:	ed97 6a02 	vldr	s12, [r7, #8]
 800a02e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800a0e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a032:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a036:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a03a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a03e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a042:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a046:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a04a:	e021      	b.n	800a090 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a04c:	693b      	ldr	r3, [r7, #16]
 800a04e:	ee07 3a90 	vmov	s15, r3
 800a052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a056:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800a0f0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a05a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a05e:	4b1e      	ldr	r3, [pc, #120]	@ (800a0d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a062:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a066:	ee07 3a90 	vmov	s15, r3
 800a06a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a06e:	ed97 6a02 	vldr	s12, [r7, #8]
 800a072:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800a0e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a076:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a07a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a07e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a082:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a086:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a08a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a08e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800a090:	4b11      	ldr	r3, [pc, #68]	@ (800a0d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a094:	0a5b      	lsrs	r3, r3, #9
 800a096:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a09a:	3301      	adds	r3, #1
 800a09c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	ee07 3a90 	vmov	s15, r3
 800a0a4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a0a8:	edd7 6a07 	vldr	s13, [r7, #28]
 800a0ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a0b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a0b4:	ee17 3a90 	vmov	r3, s15
 800a0b8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800a0ba:	e005      	b.n	800a0c8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800a0bc:	2300      	movs	r3, #0
 800a0be:	61bb      	str	r3, [r7, #24]
      break;
 800a0c0:	e002      	b.n	800a0c8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800a0c2:	4b07      	ldr	r3, [pc, #28]	@ (800a0e0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a0c4:	61bb      	str	r3, [r7, #24]
      break;
 800a0c6:	bf00      	nop
  }

  return sysclockfreq;
 800a0c8:	69bb      	ldr	r3, [r7, #24]
}
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	3724      	adds	r7, #36	@ 0x24
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d4:	4770      	bx	lr
 800a0d6:	bf00      	nop
 800a0d8:	58024400 	.word	0x58024400
 800a0dc:	03d09000 	.word	0x03d09000
 800a0e0:	003d0900 	.word	0x003d0900
 800a0e4:	007a1200 	.word	0x007a1200
 800a0e8:	46000000 	.word	0x46000000
 800a0ec:	4c742400 	.word	0x4c742400
 800a0f0:	4a742400 	.word	0x4a742400
 800a0f4:	4af42400 	.word	0x4af42400

0800a0f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b082      	sub	sp, #8
 800a0fc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a0fe:	f7ff fe81 	bl	8009e04 <HAL_RCC_GetSysClockFreq>
 800a102:	4602      	mov	r2, r0
 800a104:	4b10      	ldr	r3, [pc, #64]	@ (800a148 <HAL_RCC_GetHCLKFreq+0x50>)
 800a106:	699b      	ldr	r3, [r3, #24]
 800a108:	0a1b      	lsrs	r3, r3, #8
 800a10a:	f003 030f 	and.w	r3, r3, #15
 800a10e:	490f      	ldr	r1, [pc, #60]	@ (800a14c <HAL_RCC_GetHCLKFreq+0x54>)
 800a110:	5ccb      	ldrb	r3, [r1, r3]
 800a112:	f003 031f 	and.w	r3, r3, #31
 800a116:	fa22 f303 	lsr.w	r3, r2, r3
 800a11a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a11c:	4b0a      	ldr	r3, [pc, #40]	@ (800a148 <HAL_RCC_GetHCLKFreq+0x50>)
 800a11e:	699b      	ldr	r3, [r3, #24]
 800a120:	f003 030f 	and.w	r3, r3, #15
 800a124:	4a09      	ldr	r2, [pc, #36]	@ (800a14c <HAL_RCC_GetHCLKFreq+0x54>)
 800a126:	5cd3      	ldrb	r3, [r2, r3]
 800a128:	f003 031f 	and.w	r3, r3, #31
 800a12c:	687a      	ldr	r2, [r7, #4]
 800a12e:	fa22 f303 	lsr.w	r3, r2, r3
 800a132:	4a07      	ldr	r2, [pc, #28]	@ (800a150 <HAL_RCC_GetHCLKFreq+0x58>)
 800a134:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a136:	4a07      	ldr	r2, [pc, #28]	@ (800a154 <HAL_RCC_GetHCLKFreq+0x5c>)
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a13c:	4b04      	ldr	r3, [pc, #16]	@ (800a150 <HAL_RCC_GetHCLKFreq+0x58>)
 800a13e:	681b      	ldr	r3, [r3, #0]
}
 800a140:	4618      	mov	r0, r3
 800a142:	3708      	adds	r7, #8
 800a144:	46bd      	mov	sp, r7
 800a146:	bd80      	pop	{r7, pc}
 800a148:	58024400 	.word	0x58024400
 800a14c:	080125a8 	.word	0x080125a8
 800a150:	24000004 	.word	0x24000004
 800a154:	24000000 	.word	0x24000000

0800a158 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a15c:	f7ff ffcc 	bl	800a0f8 <HAL_RCC_GetHCLKFreq>
 800a160:	4602      	mov	r2, r0
 800a162:	4b06      	ldr	r3, [pc, #24]	@ (800a17c <HAL_RCC_GetPCLK1Freq+0x24>)
 800a164:	69db      	ldr	r3, [r3, #28]
 800a166:	091b      	lsrs	r3, r3, #4
 800a168:	f003 0307 	and.w	r3, r3, #7
 800a16c:	4904      	ldr	r1, [pc, #16]	@ (800a180 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a16e:	5ccb      	ldrb	r3, [r1, r3]
 800a170:	f003 031f 	and.w	r3, r3, #31
 800a174:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a178:	4618      	mov	r0, r3
 800a17a:	bd80      	pop	{r7, pc}
 800a17c:	58024400 	.word	0x58024400
 800a180:	080125a8 	.word	0x080125a8

0800a184 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a184:	b580      	push	{r7, lr}
 800a186:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800a188:	f7ff ffb6 	bl	800a0f8 <HAL_RCC_GetHCLKFreq>
 800a18c:	4602      	mov	r2, r0
 800a18e:	4b06      	ldr	r3, [pc, #24]	@ (800a1a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a190:	69db      	ldr	r3, [r3, #28]
 800a192:	0a1b      	lsrs	r3, r3, #8
 800a194:	f003 0307 	and.w	r3, r3, #7
 800a198:	4904      	ldr	r1, [pc, #16]	@ (800a1ac <HAL_RCC_GetPCLK2Freq+0x28>)
 800a19a:	5ccb      	ldrb	r3, [r1, r3]
 800a19c:	f003 031f 	and.w	r3, r3, #31
 800a1a0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	bd80      	pop	{r7, pc}
 800a1a8:	58024400 	.word	0x58024400
 800a1ac:	080125a8 	.word	0x080125a8

0800a1b0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a1b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a1b4:	b0ca      	sub	sp, #296	@ 0x128
 800a1b6:	af00      	add	r7, sp, #0
 800a1b8:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a1bc:	2300      	movs	r3, #0
 800a1be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a1c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1d0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800a1d4:	2500      	movs	r5, #0
 800a1d6:	ea54 0305 	orrs.w	r3, r4, r5
 800a1da:	d049      	beq.n	800a270 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800a1dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1e0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a1e2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a1e6:	d02f      	beq.n	800a248 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800a1e8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a1ec:	d828      	bhi.n	800a240 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a1ee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a1f2:	d01a      	beq.n	800a22a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800a1f4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a1f8:	d822      	bhi.n	800a240 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d003      	beq.n	800a206 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800a1fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a202:	d007      	beq.n	800a214 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a204:	e01c      	b.n	800a240 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a206:	4bb8      	ldr	r3, [pc, #736]	@ (800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a208:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a20a:	4ab7      	ldr	r2, [pc, #732]	@ (800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a20c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a210:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a212:	e01a      	b.n	800a24a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a214:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a218:	3308      	adds	r3, #8
 800a21a:	2102      	movs	r1, #2
 800a21c:	4618      	mov	r0, r3
 800a21e:	f002 fb61 	bl	800c8e4 <RCCEx_PLL2_Config>
 800a222:	4603      	mov	r3, r0
 800a224:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a228:	e00f      	b.n	800a24a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a22a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a22e:	3328      	adds	r3, #40	@ 0x28
 800a230:	2102      	movs	r1, #2
 800a232:	4618      	mov	r0, r3
 800a234:	f002 fc08 	bl	800ca48 <RCCEx_PLL3_Config>
 800a238:	4603      	mov	r3, r0
 800a23a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a23e:	e004      	b.n	800a24a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a240:	2301      	movs	r3, #1
 800a242:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a246:	e000      	b.n	800a24a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800a248:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a24a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d10a      	bne.n	800a268 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a252:	4ba5      	ldr	r3, [pc, #660]	@ (800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a254:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a256:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800a25a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a25e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a260:	4aa1      	ldr	r2, [pc, #644]	@ (800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a262:	430b      	orrs	r3, r1
 800a264:	6513      	str	r3, [r2, #80]	@ 0x50
 800a266:	e003      	b.n	800a270 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a268:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a26c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a270:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a274:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a278:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800a27c:	f04f 0900 	mov.w	r9, #0
 800a280:	ea58 0309 	orrs.w	r3, r8, r9
 800a284:	d047      	beq.n	800a316 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800a286:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a28a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a28c:	2b04      	cmp	r3, #4
 800a28e:	d82a      	bhi.n	800a2e6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800a290:	a201      	add	r2, pc, #4	@ (adr r2, 800a298 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800a292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a296:	bf00      	nop
 800a298:	0800a2ad 	.word	0x0800a2ad
 800a29c:	0800a2bb 	.word	0x0800a2bb
 800a2a0:	0800a2d1 	.word	0x0800a2d1
 800a2a4:	0800a2ef 	.word	0x0800a2ef
 800a2a8:	0800a2ef 	.word	0x0800a2ef
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a2ac:	4b8e      	ldr	r3, [pc, #568]	@ (800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a2ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2b0:	4a8d      	ldr	r2, [pc, #564]	@ (800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a2b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a2b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a2b8:	e01a      	b.n	800a2f0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a2ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2be:	3308      	adds	r3, #8
 800a2c0:	2100      	movs	r1, #0
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	f002 fb0e 	bl	800c8e4 <RCCEx_PLL2_Config>
 800a2c8:	4603      	mov	r3, r0
 800a2ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a2ce:	e00f      	b.n	800a2f0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a2d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2d4:	3328      	adds	r3, #40	@ 0x28
 800a2d6:	2100      	movs	r1, #0
 800a2d8:	4618      	mov	r0, r3
 800a2da:	f002 fbb5 	bl	800ca48 <RCCEx_PLL3_Config>
 800a2de:	4603      	mov	r3, r0
 800a2e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a2e4:	e004      	b.n	800a2f0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a2e6:	2301      	movs	r3, #1
 800a2e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a2ec:	e000      	b.n	800a2f0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800a2ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a2f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d10a      	bne.n	800a30e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a2f8:	4b7b      	ldr	r3, [pc, #492]	@ (800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a2fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a2fc:	f023 0107 	bic.w	r1, r3, #7
 800a300:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a304:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a306:	4a78      	ldr	r2, [pc, #480]	@ (800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a308:	430b      	orrs	r3, r1
 800a30a:	6513      	str	r3, [r2, #80]	@ 0x50
 800a30c:	e003      	b.n	800a316 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a30e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a312:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800a316:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a31a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a31e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800a322:	f04f 0b00 	mov.w	fp, #0
 800a326:	ea5a 030b 	orrs.w	r3, sl, fp
 800a32a:	d04c      	beq.n	800a3c6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800a32c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a330:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a332:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a336:	d030      	beq.n	800a39a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800a338:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a33c:	d829      	bhi.n	800a392 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800a33e:	2bc0      	cmp	r3, #192	@ 0xc0
 800a340:	d02d      	beq.n	800a39e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800a342:	2bc0      	cmp	r3, #192	@ 0xc0
 800a344:	d825      	bhi.n	800a392 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800a346:	2b80      	cmp	r3, #128	@ 0x80
 800a348:	d018      	beq.n	800a37c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800a34a:	2b80      	cmp	r3, #128	@ 0x80
 800a34c:	d821      	bhi.n	800a392 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d002      	beq.n	800a358 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800a352:	2b40      	cmp	r3, #64	@ 0x40
 800a354:	d007      	beq.n	800a366 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800a356:	e01c      	b.n	800a392 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a358:	4b63      	ldr	r3, [pc, #396]	@ (800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a35a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a35c:	4a62      	ldr	r2, [pc, #392]	@ (800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a35e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a362:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800a364:	e01c      	b.n	800a3a0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a366:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a36a:	3308      	adds	r3, #8
 800a36c:	2100      	movs	r1, #0
 800a36e:	4618      	mov	r0, r3
 800a370:	f002 fab8 	bl	800c8e4 <RCCEx_PLL2_Config>
 800a374:	4603      	mov	r3, r0
 800a376:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800a37a:	e011      	b.n	800a3a0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a37c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a380:	3328      	adds	r3, #40	@ 0x28
 800a382:	2100      	movs	r1, #0
 800a384:	4618      	mov	r0, r3
 800a386:	f002 fb5f 	bl	800ca48 <RCCEx_PLL3_Config>
 800a38a:	4603      	mov	r3, r0
 800a38c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800a390:	e006      	b.n	800a3a0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a392:	2301      	movs	r3, #1
 800a394:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a398:	e002      	b.n	800a3a0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800a39a:	bf00      	nop
 800a39c:	e000      	b.n	800a3a0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800a39e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a3a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d10a      	bne.n	800a3be <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800a3a8:	4b4f      	ldr	r3, [pc, #316]	@ (800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a3aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a3ac:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800a3b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a3b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a3b6:	4a4c      	ldr	r2, [pc, #304]	@ (800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a3b8:	430b      	orrs	r3, r1
 800a3ba:	6513      	str	r3, [r2, #80]	@ 0x50
 800a3bc:	e003      	b.n	800a3c6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a3c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800a3c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a3ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ce:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800a3d2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800a3dc:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800a3e0:	460b      	mov	r3, r1
 800a3e2:	4313      	orrs	r3, r2
 800a3e4:	d053      	beq.n	800a48e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800a3e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a3ea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800a3ee:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a3f2:	d035      	beq.n	800a460 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800a3f4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a3f8:	d82e      	bhi.n	800a458 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800a3fa:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a3fe:	d031      	beq.n	800a464 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800a400:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a404:	d828      	bhi.n	800a458 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800a406:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a40a:	d01a      	beq.n	800a442 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800a40c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a410:	d822      	bhi.n	800a458 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800a412:	2b00      	cmp	r3, #0
 800a414:	d003      	beq.n	800a41e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800a416:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a41a:	d007      	beq.n	800a42c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800a41c:	e01c      	b.n	800a458 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a41e:	4b32      	ldr	r3, [pc, #200]	@ (800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a422:	4a31      	ldr	r2, [pc, #196]	@ (800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a424:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a428:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a42a:	e01c      	b.n	800a466 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a42c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a430:	3308      	adds	r3, #8
 800a432:	2100      	movs	r1, #0
 800a434:	4618      	mov	r0, r3
 800a436:	f002 fa55 	bl	800c8e4 <RCCEx_PLL2_Config>
 800a43a:	4603      	mov	r3, r0
 800a43c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800a440:	e011      	b.n	800a466 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a442:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a446:	3328      	adds	r3, #40	@ 0x28
 800a448:	2100      	movs	r1, #0
 800a44a:	4618      	mov	r0, r3
 800a44c:	f002 fafc 	bl	800ca48 <RCCEx_PLL3_Config>
 800a450:	4603      	mov	r3, r0
 800a452:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a456:	e006      	b.n	800a466 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800a458:	2301      	movs	r3, #1
 800a45a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a45e:	e002      	b.n	800a466 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800a460:	bf00      	nop
 800a462:	e000      	b.n	800a466 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800a464:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a466:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d10b      	bne.n	800a486 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800a46e:	4b1e      	ldr	r3, [pc, #120]	@ (800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a470:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a472:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800a476:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a47a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800a47e:	4a1a      	ldr	r2, [pc, #104]	@ (800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a480:	430b      	orrs	r3, r1
 800a482:	6593      	str	r3, [r2, #88]	@ 0x58
 800a484:	e003      	b.n	800a48e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a486:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a48a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800a48e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a492:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a496:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800a49a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800a49e:	2300      	movs	r3, #0
 800a4a0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800a4a4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800a4a8:	460b      	mov	r3, r1
 800a4aa:	4313      	orrs	r3, r2
 800a4ac:	d056      	beq.n	800a55c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800a4ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a4b2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a4b6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a4ba:	d038      	beq.n	800a52e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800a4bc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a4c0:	d831      	bhi.n	800a526 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800a4c2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a4c6:	d034      	beq.n	800a532 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800a4c8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a4cc:	d82b      	bhi.n	800a526 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800a4ce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a4d2:	d01d      	beq.n	800a510 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800a4d4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a4d8:	d825      	bhi.n	800a526 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d006      	beq.n	800a4ec <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800a4de:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a4e2:	d00a      	beq.n	800a4fa <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800a4e4:	e01f      	b.n	800a526 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800a4e6:	bf00      	nop
 800a4e8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a4ec:	4ba2      	ldr	r3, [pc, #648]	@ (800a778 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a4ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4f0:	4aa1      	ldr	r2, [pc, #644]	@ (800a778 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a4f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a4f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a4f8:	e01c      	b.n	800a534 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a4fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a4fe:	3308      	adds	r3, #8
 800a500:	2100      	movs	r1, #0
 800a502:	4618      	mov	r0, r3
 800a504:	f002 f9ee 	bl	800c8e4 <RCCEx_PLL2_Config>
 800a508:	4603      	mov	r3, r0
 800a50a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800a50e:	e011      	b.n	800a534 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a510:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a514:	3328      	adds	r3, #40	@ 0x28
 800a516:	2100      	movs	r1, #0
 800a518:	4618      	mov	r0, r3
 800a51a:	f002 fa95 	bl	800ca48 <RCCEx_PLL3_Config>
 800a51e:	4603      	mov	r3, r0
 800a520:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a524:	e006      	b.n	800a534 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800a526:	2301      	movs	r3, #1
 800a528:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a52c:	e002      	b.n	800a534 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800a52e:	bf00      	nop
 800a530:	e000      	b.n	800a534 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800a532:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a534:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d10b      	bne.n	800a554 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800a53c:	4b8e      	ldr	r3, [pc, #568]	@ (800a778 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a53e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a540:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800a544:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a548:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a54c:	4a8a      	ldr	r2, [pc, #552]	@ (800a778 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a54e:	430b      	orrs	r3, r1
 800a550:	6593      	str	r3, [r2, #88]	@ 0x58
 800a552:	e003      	b.n	800a55c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a554:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a558:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800a55c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a560:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a564:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800a568:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800a56c:	2300      	movs	r3, #0
 800a56e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800a572:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800a576:	460b      	mov	r3, r1
 800a578:	4313      	orrs	r3, r2
 800a57a:	d03a      	beq.n	800a5f2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800a57c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a580:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a582:	2b30      	cmp	r3, #48	@ 0x30
 800a584:	d01f      	beq.n	800a5c6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800a586:	2b30      	cmp	r3, #48	@ 0x30
 800a588:	d819      	bhi.n	800a5be <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800a58a:	2b20      	cmp	r3, #32
 800a58c:	d00c      	beq.n	800a5a8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800a58e:	2b20      	cmp	r3, #32
 800a590:	d815      	bhi.n	800a5be <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800a592:	2b00      	cmp	r3, #0
 800a594:	d019      	beq.n	800a5ca <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800a596:	2b10      	cmp	r3, #16
 800a598:	d111      	bne.n	800a5be <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a59a:	4b77      	ldr	r3, [pc, #476]	@ (800a778 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a59c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a59e:	4a76      	ldr	r2, [pc, #472]	@ (800a778 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a5a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a5a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800a5a6:	e011      	b.n	800a5cc <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a5a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a5ac:	3308      	adds	r3, #8
 800a5ae:	2102      	movs	r1, #2
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	f002 f997 	bl	800c8e4 <RCCEx_PLL2_Config>
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800a5bc:	e006      	b.n	800a5cc <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a5be:	2301      	movs	r3, #1
 800a5c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a5c4:	e002      	b.n	800a5cc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800a5c6:	bf00      	nop
 800a5c8:	e000      	b.n	800a5cc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800a5ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a5cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d10a      	bne.n	800a5ea <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800a5d4:	4b68      	ldr	r3, [pc, #416]	@ (800a778 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a5d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a5d8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800a5dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a5e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a5e2:	4a65      	ldr	r2, [pc, #404]	@ (800a778 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a5e4:	430b      	orrs	r3, r1
 800a5e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a5e8:	e003      	b.n	800a5f2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a5ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a5f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a5f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5fa:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800a5fe:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a602:	2300      	movs	r3, #0
 800a604:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800a608:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800a60c:	460b      	mov	r3, r1
 800a60e:	4313      	orrs	r3, r2
 800a610:	d051      	beq.n	800a6b6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800a612:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a616:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a618:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a61c:	d035      	beq.n	800a68a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800a61e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a622:	d82e      	bhi.n	800a682 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800a624:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a628:	d031      	beq.n	800a68e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800a62a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a62e:	d828      	bhi.n	800a682 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800a630:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a634:	d01a      	beq.n	800a66c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800a636:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a63a:	d822      	bhi.n	800a682 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d003      	beq.n	800a648 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800a640:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a644:	d007      	beq.n	800a656 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800a646:	e01c      	b.n	800a682 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a648:	4b4b      	ldr	r3, [pc, #300]	@ (800a778 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a64a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a64c:	4a4a      	ldr	r2, [pc, #296]	@ (800a778 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a64e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a652:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a654:	e01c      	b.n	800a690 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a656:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a65a:	3308      	adds	r3, #8
 800a65c:	2100      	movs	r1, #0
 800a65e:	4618      	mov	r0, r3
 800a660:	f002 f940 	bl	800c8e4 <RCCEx_PLL2_Config>
 800a664:	4603      	mov	r3, r0
 800a666:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a66a:	e011      	b.n	800a690 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a66c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a670:	3328      	adds	r3, #40	@ 0x28
 800a672:	2100      	movs	r1, #0
 800a674:	4618      	mov	r0, r3
 800a676:	f002 f9e7 	bl	800ca48 <RCCEx_PLL3_Config>
 800a67a:	4603      	mov	r3, r0
 800a67c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a680:	e006      	b.n	800a690 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a682:	2301      	movs	r3, #1
 800a684:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a688:	e002      	b.n	800a690 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800a68a:	bf00      	nop
 800a68c:	e000      	b.n	800a690 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800a68e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a690:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a694:	2b00      	cmp	r3, #0
 800a696:	d10a      	bne.n	800a6ae <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a698:	4b37      	ldr	r3, [pc, #220]	@ (800a778 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a69a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a69c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800a6a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a6a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a6a6:	4a34      	ldr	r2, [pc, #208]	@ (800a778 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a6a8:	430b      	orrs	r3, r1
 800a6aa:	6513      	str	r3, [r2, #80]	@ 0x50
 800a6ac:	e003      	b.n	800a6b6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a6b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a6b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a6ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6be:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800a6c2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a6cc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800a6d0:	460b      	mov	r3, r1
 800a6d2:	4313      	orrs	r3, r2
 800a6d4:	d056      	beq.n	800a784 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800a6d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a6da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a6dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a6e0:	d033      	beq.n	800a74a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800a6e2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a6e6:	d82c      	bhi.n	800a742 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a6e8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a6ec:	d02f      	beq.n	800a74e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800a6ee:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a6f2:	d826      	bhi.n	800a742 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a6f4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a6f8:	d02b      	beq.n	800a752 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800a6fa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a6fe:	d820      	bhi.n	800a742 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a700:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a704:	d012      	beq.n	800a72c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800a706:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a70a:	d81a      	bhi.n	800a742 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d022      	beq.n	800a756 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800a710:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a714:	d115      	bne.n	800a742 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a716:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a71a:	3308      	adds	r3, #8
 800a71c:	2101      	movs	r1, #1
 800a71e:	4618      	mov	r0, r3
 800a720:	f002 f8e0 	bl	800c8e4 <RCCEx_PLL2_Config>
 800a724:	4603      	mov	r3, r0
 800a726:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a72a:	e015      	b.n	800a758 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a72c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a730:	3328      	adds	r3, #40	@ 0x28
 800a732:	2101      	movs	r1, #1
 800a734:	4618      	mov	r0, r3
 800a736:	f002 f987 	bl	800ca48 <RCCEx_PLL3_Config>
 800a73a:	4603      	mov	r3, r0
 800a73c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a740:	e00a      	b.n	800a758 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a742:	2301      	movs	r3, #1
 800a744:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a748:	e006      	b.n	800a758 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a74a:	bf00      	nop
 800a74c:	e004      	b.n	800a758 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a74e:	bf00      	nop
 800a750:	e002      	b.n	800a758 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a752:	bf00      	nop
 800a754:	e000      	b.n	800a758 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a756:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a758:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d10d      	bne.n	800a77c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a760:	4b05      	ldr	r3, [pc, #20]	@ (800a778 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a762:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a764:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800a768:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a76c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a76e:	4a02      	ldr	r2, [pc, #8]	@ (800a778 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a770:	430b      	orrs	r3, r1
 800a772:	6513      	str	r3, [r2, #80]	@ 0x50
 800a774:	e006      	b.n	800a784 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800a776:	bf00      	nop
 800a778:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a77c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a780:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a784:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a78c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800a790:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a794:	2300      	movs	r3, #0
 800a796:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a79a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800a79e:	460b      	mov	r3, r1
 800a7a0:	4313      	orrs	r3, r2
 800a7a2:	d055      	beq.n	800a850 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800a7a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a7a8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a7ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a7b0:	d033      	beq.n	800a81a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800a7b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a7b6:	d82c      	bhi.n	800a812 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a7b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a7bc:	d02f      	beq.n	800a81e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800a7be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a7c2:	d826      	bhi.n	800a812 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a7c4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a7c8:	d02b      	beq.n	800a822 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800a7ca:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a7ce:	d820      	bhi.n	800a812 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a7d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a7d4:	d012      	beq.n	800a7fc <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800a7d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a7da:	d81a      	bhi.n	800a812 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d022      	beq.n	800a826 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800a7e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a7e4:	d115      	bne.n	800a812 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a7e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a7ea:	3308      	adds	r3, #8
 800a7ec:	2101      	movs	r1, #1
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	f002 f878 	bl	800c8e4 <RCCEx_PLL2_Config>
 800a7f4:	4603      	mov	r3, r0
 800a7f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a7fa:	e015      	b.n	800a828 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a7fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a800:	3328      	adds	r3, #40	@ 0x28
 800a802:	2101      	movs	r1, #1
 800a804:	4618      	mov	r0, r3
 800a806:	f002 f91f 	bl	800ca48 <RCCEx_PLL3_Config>
 800a80a:	4603      	mov	r3, r0
 800a80c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a810:	e00a      	b.n	800a828 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800a812:	2301      	movs	r3, #1
 800a814:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a818:	e006      	b.n	800a828 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a81a:	bf00      	nop
 800a81c:	e004      	b.n	800a828 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a81e:	bf00      	nop
 800a820:	e002      	b.n	800a828 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a822:	bf00      	nop
 800a824:	e000      	b.n	800a828 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a826:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a828:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d10b      	bne.n	800a848 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a830:	4ba3      	ldr	r3, [pc, #652]	@ (800aac0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a832:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a834:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800a838:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a83c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a840:	4a9f      	ldr	r2, [pc, #636]	@ (800aac0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a842:	430b      	orrs	r3, r1
 800a844:	6593      	str	r3, [r2, #88]	@ 0x58
 800a846:	e003      	b.n	800a850 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a848:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a84c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a850:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a854:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a858:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800a85c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a860:	2300      	movs	r3, #0
 800a862:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a866:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a86a:	460b      	mov	r3, r1
 800a86c:	4313      	orrs	r3, r2
 800a86e:	d037      	beq.n	800a8e0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800a870:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a874:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a876:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a87a:	d00e      	beq.n	800a89a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800a87c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a880:	d816      	bhi.n	800a8b0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800a882:	2b00      	cmp	r3, #0
 800a884:	d018      	beq.n	800a8b8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800a886:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a88a:	d111      	bne.n	800a8b0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a88c:	4b8c      	ldr	r3, [pc, #560]	@ (800aac0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a88e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a890:	4a8b      	ldr	r2, [pc, #556]	@ (800aac0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a892:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a896:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a898:	e00f      	b.n	800a8ba <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a89a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a89e:	3308      	adds	r3, #8
 800a8a0:	2101      	movs	r1, #1
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	f002 f81e 	bl	800c8e4 <RCCEx_PLL2_Config>
 800a8a8:	4603      	mov	r3, r0
 800a8aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a8ae:	e004      	b.n	800a8ba <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a8b0:	2301      	movs	r3, #1
 800a8b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a8b6:	e000      	b.n	800a8ba <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800a8b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a8ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d10a      	bne.n	800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a8c2:	4b7f      	ldr	r3, [pc, #508]	@ (800aac0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a8c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a8c6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800a8ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a8ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a8d0:	4a7b      	ldr	r2, [pc, #492]	@ (800aac0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a8d2:	430b      	orrs	r3, r1
 800a8d4:	6513      	str	r3, [r2, #80]	@ 0x50
 800a8d6:	e003      	b.n	800a8e0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a8dc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a8e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a8e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8e8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800a8ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800a8f6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800a8fa:	460b      	mov	r3, r1
 800a8fc:	4313      	orrs	r3, r2
 800a8fe:	d039      	beq.n	800a974 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800a900:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a904:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a906:	2b03      	cmp	r3, #3
 800a908:	d81c      	bhi.n	800a944 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800a90a:	a201      	add	r2, pc, #4	@ (adr r2, 800a910 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800a90c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a910:	0800a94d 	.word	0x0800a94d
 800a914:	0800a921 	.word	0x0800a921
 800a918:	0800a92f 	.word	0x0800a92f
 800a91c:	0800a94d 	.word	0x0800a94d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a920:	4b67      	ldr	r3, [pc, #412]	@ (800aac0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a924:	4a66      	ldr	r2, [pc, #408]	@ (800aac0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a926:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a92a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a92c:	e00f      	b.n	800a94e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a92e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a932:	3308      	adds	r3, #8
 800a934:	2102      	movs	r1, #2
 800a936:	4618      	mov	r0, r3
 800a938:	f001 ffd4 	bl	800c8e4 <RCCEx_PLL2_Config>
 800a93c:	4603      	mov	r3, r0
 800a93e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a942:	e004      	b.n	800a94e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a944:	2301      	movs	r3, #1
 800a946:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a94a:	e000      	b.n	800a94e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800a94c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a94e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a952:	2b00      	cmp	r3, #0
 800a954:	d10a      	bne.n	800a96c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a956:	4b5a      	ldr	r3, [pc, #360]	@ (800aac0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a958:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a95a:	f023 0103 	bic.w	r1, r3, #3
 800a95e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a962:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a964:	4a56      	ldr	r2, [pc, #344]	@ (800aac0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a966:	430b      	orrs	r3, r1
 800a968:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a96a:	e003      	b.n	800a974 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a96c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a970:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a974:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a97c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800a980:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a984:	2300      	movs	r3, #0
 800a986:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a98a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800a98e:	460b      	mov	r3, r1
 800a990:	4313      	orrs	r3, r2
 800a992:	f000 809f 	beq.w	800aad4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a996:	4b4b      	ldr	r3, [pc, #300]	@ (800aac4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	4a4a      	ldr	r2, [pc, #296]	@ (800aac4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a99c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a9a0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a9a2:	f7f7 fdd9 	bl	8002558 <HAL_GetTick>
 800a9a6:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a9aa:	e00b      	b.n	800a9c4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a9ac:	f7f7 fdd4 	bl	8002558 <HAL_GetTick>
 800a9b0:	4602      	mov	r2, r0
 800a9b2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800a9b6:	1ad3      	subs	r3, r2, r3
 800a9b8:	2b64      	cmp	r3, #100	@ 0x64
 800a9ba:	d903      	bls.n	800a9c4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800a9bc:	2303      	movs	r3, #3
 800a9be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a9c2:	e005      	b.n	800a9d0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a9c4:	4b3f      	ldr	r3, [pc, #252]	@ (800aac4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d0ed      	beq.n	800a9ac <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800a9d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d179      	bne.n	800aacc <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a9d8:	4b39      	ldr	r3, [pc, #228]	@ (800aac0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a9da:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800a9dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a9e0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a9e4:	4053      	eors	r3, r2
 800a9e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d015      	beq.n	800aa1a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a9ee:	4b34      	ldr	r3, [pc, #208]	@ (800aac0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a9f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a9f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a9f6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a9fa:	4b31      	ldr	r3, [pc, #196]	@ (800aac0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a9fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a9fe:	4a30      	ldr	r2, [pc, #192]	@ (800aac0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800aa00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800aa04:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800aa06:	4b2e      	ldr	r3, [pc, #184]	@ (800aac0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800aa08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aa0a:	4a2d      	ldr	r2, [pc, #180]	@ (800aac0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800aa0c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800aa10:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800aa12:	4a2b      	ldr	r2, [pc, #172]	@ (800aac0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800aa14:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800aa18:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800aa1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa1e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800aa22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aa26:	d118      	bne.n	800aa5a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa28:	f7f7 fd96 	bl	8002558 <HAL_GetTick>
 800aa2c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800aa30:	e00d      	b.n	800aa4e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aa32:	f7f7 fd91 	bl	8002558 <HAL_GetTick>
 800aa36:	4602      	mov	r2, r0
 800aa38:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800aa3c:	1ad2      	subs	r2, r2, r3
 800aa3e:	f241 3388 	movw	r3, #5000	@ 0x1388
 800aa42:	429a      	cmp	r2, r3
 800aa44:	d903      	bls.n	800aa4e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800aa46:	2303      	movs	r3, #3
 800aa48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800aa4c:	e005      	b.n	800aa5a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800aa4e:	4b1c      	ldr	r3, [pc, #112]	@ (800aac0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800aa50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aa52:	f003 0302 	and.w	r3, r3, #2
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d0eb      	beq.n	800aa32 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800aa5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d129      	bne.n	800aab6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800aa62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa66:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800aa6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800aa6e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800aa72:	d10e      	bne.n	800aa92 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800aa74:	4b12      	ldr	r3, [pc, #72]	@ (800aac0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800aa76:	691b      	ldr	r3, [r3, #16]
 800aa78:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800aa7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa80:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800aa84:	091a      	lsrs	r2, r3, #4
 800aa86:	4b10      	ldr	r3, [pc, #64]	@ (800aac8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800aa88:	4013      	ands	r3, r2
 800aa8a:	4a0d      	ldr	r2, [pc, #52]	@ (800aac0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800aa8c:	430b      	orrs	r3, r1
 800aa8e:	6113      	str	r3, [r2, #16]
 800aa90:	e005      	b.n	800aa9e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800aa92:	4b0b      	ldr	r3, [pc, #44]	@ (800aac0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800aa94:	691b      	ldr	r3, [r3, #16]
 800aa96:	4a0a      	ldr	r2, [pc, #40]	@ (800aac0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800aa98:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800aa9c:	6113      	str	r3, [r2, #16]
 800aa9e:	4b08      	ldr	r3, [pc, #32]	@ (800aac0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800aaa0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800aaa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aaa6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800aaaa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800aaae:	4a04      	ldr	r2, [pc, #16]	@ (800aac0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800aab0:	430b      	orrs	r3, r1
 800aab2:	6713      	str	r3, [r2, #112]	@ 0x70
 800aab4:	e00e      	b.n	800aad4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800aab6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aaba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800aabe:	e009      	b.n	800aad4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800aac0:	58024400 	.word	0x58024400
 800aac4:	58024800 	.word	0x58024800
 800aac8:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aacc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aad0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800aad4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aadc:	f002 0301 	and.w	r3, r2, #1
 800aae0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800aae4:	2300      	movs	r3, #0
 800aae6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800aaea:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800aaee:	460b      	mov	r3, r1
 800aaf0:	4313      	orrs	r3, r2
 800aaf2:	f000 8089 	beq.w	800ac08 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800aaf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aafa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800aafc:	2b28      	cmp	r3, #40	@ 0x28
 800aafe:	d86b      	bhi.n	800abd8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800ab00:	a201      	add	r2, pc, #4	@ (adr r2, 800ab08 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800ab02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab06:	bf00      	nop
 800ab08:	0800abe1 	.word	0x0800abe1
 800ab0c:	0800abd9 	.word	0x0800abd9
 800ab10:	0800abd9 	.word	0x0800abd9
 800ab14:	0800abd9 	.word	0x0800abd9
 800ab18:	0800abd9 	.word	0x0800abd9
 800ab1c:	0800abd9 	.word	0x0800abd9
 800ab20:	0800abd9 	.word	0x0800abd9
 800ab24:	0800abd9 	.word	0x0800abd9
 800ab28:	0800abad 	.word	0x0800abad
 800ab2c:	0800abd9 	.word	0x0800abd9
 800ab30:	0800abd9 	.word	0x0800abd9
 800ab34:	0800abd9 	.word	0x0800abd9
 800ab38:	0800abd9 	.word	0x0800abd9
 800ab3c:	0800abd9 	.word	0x0800abd9
 800ab40:	0800abd9 	.word	0x0800abd9
 800ab44:	0800abd9 	.word	0x0800abd9
 800ab48:	0800abc3 	.word	0x0800abc3
 800ab4c:	0800abd9 	.word	0x0800abd9
 800ab50:	0800abd9 	.word	0x0800abd9
 800ab54:	0800abd9 	.word	0x0800abd9
 800ab58:	0800abd9 	.word	0x0800abd9
 800ab5c:	0800abd9 	.word	0x0800abd9
 800ab60:	0800abd9 	.word	0x0800abd9
 800ab64:	0800abd9 	.word	0x0800abd9
 800ab68:	0800abe1 	.word	0x0800abe1
 800ab6c:	0800abd9 	.word	0x0800abd9
 800ab70:	0800abd9 	.word	0x0800abd9
 800ab74:	0800abd9 	.word	0x0800abd9
 800ab78:	0800abd9 	.word	0x0800abd9
 800ab7c:	0800abd9 	.word	0x0800abd9
 800ab80:	0800abd9 	.word	0x0800abd9
 800ab84:	0800abd9 	.word	0x0800abd9
 800ab88:	0800abe1 	.word	0x0800abe1
 800ab8c:	0800abd9 	.word	0x0800abd9
 800ab90:	0800abd9 	.word	0x0800abd9
 800ab94:	0800abd9 	.word	0x0800abd9
 800ab98:	0800abd9 	.word	0x0800abd9
 800ab9c:	0800abd9 	.word	0x0800abd9
 800aba0:	0800abd9 	.word	0x0800abd9
 800aba4:	0800abd9 	.word	0x0800abd9
 800aba8:	0800abe1 	.word	0x0800abe1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800abac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800abb0:	3308      	adds	r3, #8
 800abb2:	2101      	movs	r1, #1
 800abb4:	4618      	mov	r0, r3
 800abb6:	f001 fe95 	bl	800c8e4 <RCCEx_PLL2_Config>
 800abba:	4603      	mov	r3, r0
 800abbc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800abc0:	e00f      	b.n	800abe2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800abc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800abc6:	3328      	adds	r3, #40	@ 0x28
 800abc8:	2101      	movs	r1, #1
 800abca:	4618      	mov	r0, r3
 800abcc:	f001 ff3c 	bl	800ca48 <RCCEx_PLL3_Config>
 800abd0:	4603      	mov	r3, r0
 800abd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800abd6:	e004      	b.n	800abe2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800abd8:	2301      	movs	r3, #1
 800abda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800abde:	e000      	b.n	800abe2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800abe0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800abe2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d10a      	bne.n	800ac00 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800abea:	4bbf      	ldr	r3, [pc, #764]	@ (800aee8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800abec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800abee:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800abf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800abf6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800abf8:	4abb      	ldr	r2, [pc, #748]	@ (800aee8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800abfa:	430b      	orrs	r3, r1
 800abfc:	6553      	str	r3, [r2, #84]	@ 0x54
 800abfe:	e003      	b.n	800ac08 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ac04:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800ac08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac10:	f002 0302 	and.w	r3, r2, #2
 800ac14:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ac18:	2300      	movs	r3, #0
 800ac1a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800ac1e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800ac22:	460b      	mov	r3, r1
 800ac24:	4313      	orrs	r3, r2
 800ac26:	d041      	beq.n	800acac <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800ac28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac2c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ac2e:	2b05      	cmp	r3, #5
 800ac30:	d824      	bhi.n	800ac7c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800ac32:	a201      	add	r2, pc, #4	@ (adr r2, 800ac38 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800ac34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac38:	0800ac85 	.word	0x0800ac85
 800ac3c:	0800ac51 	.word	0x0800ac51
 800ac40:	0800ac67 	.word	0x0800ac67
 800ac44:	0800ac85 	.word	0x0800ac85
 800ac48:	0800ac85 	.word	0x0800ac85
 800ac4c:	0800ac85 	.word	0x0800ac85
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ac50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac54:	3308      	adds	r3, #8
 800ac56:	2101      	movs	r1, #1
 800ac58:	4618      	mov	r0, r3
 800ac5a:	f001 fe43 	bl	800c8e4 <RCCEx_PLL2_Config>
 800ac5e:	4603      	mov	r3, r0
 800ac60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800ac64:	e00f      	b.n	800ac86 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ac66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac6a:	3328      	adds	r3, #40	@ 0x28
 800ac6c:	2101      	movs	r1, #1
 800ac6e:	4618      	mov	r0, r3
 800ac70:	f001 feea 	bl	800ca48 <RCCEx_PLL3_Config>
 800ac74:	4603      	mov	r3, r0
 800ac76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800ac7a:	e004      	b.n	800ac86 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ac7c:	2301      	movs	r3, #1
 800ac7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ac82:	e000      	b.n	800ac86 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800ac84:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d10a      	bne.n	800aca4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800ac8e:	4b96      	ldr	r3, [pc, #600]	@ (800aee8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ac90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac92:	f023 0107 	bic.w	r1, r3, #7
 800ac96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac9a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ac9c:	4a92      	ldr	r2, [pc, #584]	@ (800aee8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ac9e:	430b      	orrs	r3, r1
 800aca0:	6553      	str	r3, [r2, #84]	@ 0x54
 800aca2:	e003      	b.n	800acac <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aca4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aca8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800acac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800acb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acb4:	f002 0304 	and.w	r3, r2, #4
 800acb8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800acbc:	2300      	movs	r3, #0
 800acbe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800acc2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800acc6:	460b      	mov	r3, r1
 800acc8:	4313      	orrs	r3, r2
 800acca:	d044      	beq.n	800ad56 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800accc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800acd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800acd4:	2b05      	cmp	r3, #5
 800acd6:	d825      	bhi.n	800ad24 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800acd8:	a201      	add	r2, pc, #4	@ (adr r2, 800ace0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800acda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acde:	bf00      	nop
 800ace0:	0800ad2d 	.word	0x0800ad2d
 800ace4:	0800acf9 	.word	0x0800acf9
 800ace8:	0800ad0f 	.word	0x0800ad0f
 800acec:	0800ad2d 	.word	0x0800ad2d
 800acf0:	0800ad2d 	.word	0x0800ad2d
 800acf4:	0800ad2d 	.word	0x0800ad2d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800acf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800acfc:	3308      	adds	r3, #8
 800acfe:	2101      	movs	r1, #1
 800ad00:	4618      	mov	r0, r3
 800ad02:	f001 fdef 	bl	800c8e4 <RCCEx_PLL2_Config>
 800ad06:	4603      	mov	r3, r0
 800ad08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800ad0c:	e00f      	b.n	800ad2e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ad0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad12:	3328      	adds	r3, #40	@ 0x28
 800ad14:	2101      	movs	r1, #1
 800ad16:	4618      	mov	r0, r3
 800ad18:	f001 fe96 	bl	800ca48 <RCCEx_PLL3_Config>
 800ad1c:	4603      	mov	r3, r0
 800ad1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800ad22:	e004      	b.n	800ad2e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ad24:	2301      	movs	r3, #1
 800ad26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ad2a:	e000      	b.n	800ad2e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800ad2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d10b      	bne.n	800ad4e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800ad36:	4b6c      	ldr	r3, [pc, #432]	@ (800aee8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ad38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ad3a:	f023 0107 	bic.w	r1, r3, #7
 800ad3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ad46:	4a68      	ldr	r2, [pc, #416]	@ (800aee8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ad48:	430b      	orrs	r3, r1
 800ad4a:	6593      	str	r3, [r2, #88]	@ 0x58
 800ad4c:	e003      	b.n	800ad56 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ad52:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800ad56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad5e:	f002 0320 	and.w	r3, r2, #32
 800ad62:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800ad66:	2300      	movs	r3, #0
 800ad68:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ad6c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800ad70:	460b      	mov	r3, r1
 800ad72:	4313      	orrs	r3, r2
 800ad74:	d055      	beq.n	800ae22 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800ad76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ad7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ad82:	d033      	beq.n	800adec <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800ad84:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ad88:	d82c      	bhi.n	800ade4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800ad8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ad8e:	d02f      	beq.n	800adf0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800ad90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ad94:	d826      	bhi.n	800ade4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800ad96:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ad9a:	d02b      	beq.n	800adf4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800ad9c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ada0:	d820      	bhi.n	800ade4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800ada2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ada6:	d012      	beq.n	800adce <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800ada8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800adac:	d81a      	bhi.n	800ade4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d022      	beq.n	800adf8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800adb2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800adb6:	d115      	bne.n	800ade4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800adb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800adbc:	3308      	adds	r3, #8
 800adbe:	2100      	movs	r1, #0
 800adc0:	4618      	mov	r0, r3
 800adc2:	f001 fd8f 	bl	800c8e4 <RCCEx_PLL2_Config>
 800adc6:	4603      	mov	r3, r0
 800adc8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800adcc:	e015      	b.n	800adfa <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800adce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800add2:	3328      	adds	r3, #40	@ 0x28
 800add4:	2102      	movs	r1, #2
 800add6:	4618      	mov	r0, r3
 800add8:	f001 fe36 	bl	800ca48 <RCCEx_PLL3_Config>
 800addc:	4603      	mov	r3, r0
 800adde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800ade2:	e00a      	b.n	800adfa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ade4:	2301      	movs	r3, #1
 800ade6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800adea:	e006      	b.n	800adfa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800adec:	bf00      	nop
 800adee:	e004      	b.n	800adfa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800adf0:	bf00      	nop
 800adf2:	e002      	b.n	800adfa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800adf4:	bf00      	nop
 800adf6:	e000      	b.n	800adfa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800adf8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800adfa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d10b      	bne.n	800ae1a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800ae02:	4b39      	ldr	r3, [pc, #228]	@ (800aee8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ae04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae06:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800ae0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ae0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ae12:	4a35      	ldr	r2, [pc, #212]	@ (800aee8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ae14:	430b      	orrs	r3, r1
 800ae16:	6553      	str	r3, [r2, #84]	@ 0x54
 800ae18:	e003      	b.n	800ae22 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ae1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800ae22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ae26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae2a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800ae2e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800ae32:	2300      	movs	r3, #0
 800ae34:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800ae38:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800ae3c:	460b      	mov	r3, r1
 800ae3e:	4313      	orrs	r3, r2
 800ae40:	d058      	beq.n	800aef4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800ae42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ae46:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ae4a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800ae4e:	d033      	beq.n	800aeb8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800ae50:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800ae54:	d82c      	bhi.n	800aeb0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800ae56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ae5a:	d02f      	beq.n	800aebc <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800ae5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ae60:	d826      	bhi.n	800aeb0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800ae62:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ae66:	d02b      	beq.n	800aec0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800ae68:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ae6c:	d820      	bhi.n	800aeb0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800ae6e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ae72:	d012      	beq.n	800ae9a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800ae74:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ae78:	d81a      	bhi.n	800aeb0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d022      	beq.n	800aec4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800ae7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ae82:	d115      	bne.n	800aeb0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ae84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ae88:	3308      	adds	r3, #8
 800ae8a:	2100      	movs	r1, #0
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	f001 fd29 	bl	800c8e4 <RCCEx_PLL2_Config>
 800ae92:	4603      	mov	r3, r0
 800ae94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800ae98:	e015      	b.n	800aec6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ae9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ae9e:	3328      	adds	r3, #40	@ 0x28
 800aea0:	2102      	movs	r1, #2
 800aea2:	4618      	mov	r0, r3
 800aea4:	f001 fdd0 	bl	800ca48 <RCCEx_PLL3_Config>
 800aea8:	4603      	mov	r3, r0
 800aeaa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800aeae:	e00a      	b.n	800aec6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aeb0:	2301      	movs	r3, #1
 800aeb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800aeb6:	e006      	b.n	800aec6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800aeb8:	bf00      	nop
 800aeba:	e004      	b.n	800aec6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800aebc:	bf00      	nop
 800aebe:	e002      	b.n	800aec6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800aec0:	bf00      	nop
 800aec2:	e000      	b.n	800aec6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800aec4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aec6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d10e      	bne.n	800aeec <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800aece:	4b06      	ldr	r3, [pc, #24]	@ (800aee8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800aed0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aed2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800aed6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aeda:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800aede:	4a02      	ldr	r2, [pc, #8]	@ (800aee8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800aee0:	430b      	orrs	r3, r1
 800aee2:	6593      	str	r3, [r2, #88]	@ 0x58
 800aee4:	e006      	b.n	800aef4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800aee6:	bf00      	nop
 800aee8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aeec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aef0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800aef4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aefc:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800af00:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800af04:	2300      	movs	r3, #0
 800af06:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800af0a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800af0e:	460b      	mov	r3, r1
 800af10:	4313      	orrs	r3, r2
 800af12:	d055      	beq.n	800afc0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800af14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800af18:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800af1c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800af20:	d033      	beq.n	800af8a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800af22:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800af26:	d82c      	bhi.n	800af82 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800af28:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800af2c:	d02f      	beq.n	800af8e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800af2e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800af32:	d826      	bhi.n	800af82 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800af34:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800af38:	d02b      	beq.n	800af92 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800af3a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800af3e:	d820      	bhi.n	800af82 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800af40:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800af44:	d012      	beq.n	800af6c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800af46:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800af4a:	d81a      	bhi.n	800af82 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d022      	beq.n	800af96 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800af50:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800af54:	d115      	bne.n	800af82 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800af56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800af5a:	3308      	adds	r3, #8
 800af5c:	2100      	movs	r1, #0
 800af5e:	4618      	mov	r0, r3
 800af60:	f001 fcc0 	bl	800c8e4 <RCCEx_PLL2_Config>
 800af64:	4603      	mov	r3, r0
 800af66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800af6a:	e015      	b.n	800af98 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800af6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800af70:	3328      	adds	r3, #40	@ 0x28
 800af72:	2102      	movs	r1, #2
 800af74:	4618      	mov	r0, r3
 800af76:	f001 fd67 	bl	800ca48 <RCCEx_PLL3_Config>
 800af7a:	4603      	mov	r3, r0
 800af7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800af80:	e00a      	b.n	800af98 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800af82:	2301      	movs	r3, #1
 800af84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800af88:	e006      	b.n	800af98 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800af8a:	bf00      	nop
 800af8c:	e004      	b.n	800af98 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800af8e:	bf00      	nop
 800af90:	e002      	b.n	800af98 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800af92:	bf00      	nop
 800af94:	e000      	b.n	800af98 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800af96:	bf00      	nop
    }

    if (ret == HAL_OK)
 800af98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d10b      	bne.n	800afb8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800afa0:	4ba1      	ldr	r3, [pc, #644]	@ (800b228 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800afa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800afa4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800afa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800afac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800afb0:	4a9d      	ldr	r2, [pc, #628]	@ (800b228 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800afb2:	430b      	orrs	r3, r1
 800afb4:	6593      	str	r3, [r2, #88]	@ 0x58
 800afb6:	e003      	b.n	800afc0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800afb8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800afbc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800afc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800afc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afc8:	f002 0308 	and.w	r3, r2, #8
 800afcc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800afd0:	2300      	movs	r3, #0
 800afd2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800afd6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800afda:	460b      	mov	r3, r1
 800afdc:	4313      	orrs	r3, r2
 800afde:	d01e      	beq.n	800b01e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800afe0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800afe4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800afe8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800afec:	d10c      	bne.n	800b008 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800afee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aff2:	3328      	adds	r3, #40	@ 0x28
 800aff4:	2102      	movs	r1, #2
 800aff6:	4618      	mov	r0, r3
 800aff8:	f001 fd26 	bl	800ca48 <RCCEx_PLL3_Config>
 800affc:	4603      	mov	r3, r0
 800affe:	2b00      	cmp	r3, #0
 800b000:	d002      	beq.n	800b008 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800b002:	2301      	movs	r3, #1
 800b004:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800b008:	4b87      	ldr	r3, [pc, #540]	@ (800b228 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b00a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b00c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b010:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b014:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b018:	4a83      	ldr	r2, [pc, #524]	@ (800b228 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b01a:	430b      	orrs	r3, r1
 800b01c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b01e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b022:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b026:	f002 0310 	and.w	r3, r2, #16
 800b02a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b02e:	2300      	movs	r3, #0
 800b030:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b034:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800b038:	460b      	mov	r3, r1
 800b03a:	4313      	orrs	r3, r2
 800b03c:	d01e      	beq.n	800b07c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800b03e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b042:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b046:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b04a:	d10c      	bne.n	800b066 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b04c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b050:	3328      	adds	r3, #40	@ 0x28
 800b052:	2102      	movs	r1, #2
 800b054:	4618      	mov	r0, r3
 800b056:	f001 fcf7 	bl	800ca48 <RCCEx_PLL3_Config>
 800b05a:	4603      	mov	r3, r0
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d002      	beq.n	800b066 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800b060:	2301      	movs	r3, #1
 800b062:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b066:	4b70      	ldr	r3, [pc, #448]	@ (800b228 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b068:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b06a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800b06e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b072:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b076:	4a6c      	ldr	r2, [pc, #432]	@ (800b228 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b078:	430b      	orrs	r3, r1
 800b07a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b07c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b080:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b084:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800b088:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b08c:	2300      	movs	r3, #0
 800b08e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b092:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800b096:	460b      	mov	r3, r1
 800b098:	4313      	orrs	r3, r2
 800b09a:	d03e      	beq.n	800b11a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800b09c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b0a0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b0a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b0a8:	d022      	beq.n	800b0f0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800b0aa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b0ae:	d81b      	bhi.n	800b0e8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d003      	beq.n	800b0bc <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800b0b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b0b8:	d00b      	beq.n	800b0d2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800b0ba:	e015      	b.n	800b0e8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b0bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b0c0:	3308      	adds	r3, #8
 800b0c2:	2100      	movs	r1, #0
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	f001 fc0d 	bl	800c8e4 <RCCEx_PLL2_Config>
 800b0ca:	4603      	mov	r3, r0
 800b0cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b0d0:	e00f      	b.n	800b0f2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b0d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b0d6:	3328      	adds	r3, #40	@ 0x28
 800b0d8:	2102      	movs	r1, #2
 800b0da:	4618      	mov	r0, r3
 800b0dc:	f001 fcb4 	bl	800ca48 <RCCEx_PLL3_Config>
 800b0e0:	4603      	mov	r3, r0
 800b0e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b0e6:	e004      	b.n	800b0f2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b0e8:	2301      	movs	r3, #1
 800b0ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800b0ee:	e000      	b.n	800b0f2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800b0f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b0f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d10b      	bne.n	800b112 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b0fa:	4b4b      	ldr	r3, [pc, #300]	@ (800b228 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b0fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b0fe:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800b102:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b106:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b10a:	4a47      	ldr	r2, [pc, #284]	@ (800b228 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b10c:	430b      	orrs	r3, r1
 800b10e:	6593      	str	r3, [r2, #88]	@ 0x58
 800b110:	e003      	b.n	800b11a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b112:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b116:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b11a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b11e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b122:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800b126:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b128:	2300      	movs	r3, #0
 800b12a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b12c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800b130:	460b      	mov	r3, r1
 800b132:	4313      	orrs	r3, r2
 800b134:	d03b      	beq.n	800b1ae <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800b136:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b13a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b13e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b142:	d01f      	beq.n	800b184 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800b144:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b148:	d818      	bhi.n	800b17c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800b14a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b14e:	d003      	beq.n	800b158 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800b150:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b154:	d007      	beq.n	800b166 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800b156:	e011      	b.n	800b17c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b158:	4b33      	ldr	r3, [pc, #204]	@ (800b228 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b15a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b15c:	4a32      	ldr	r2, [pc, #200]	@ (800b228 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b15e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b162:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800b164:	e00f      	b.n	800b186 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b166:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b16a:	3328      	adds	r3, #40	@ 0x28
 800b16c:	2101      	movs	r1, #1
 800b16e:	4618      	mov	r0, r3
 800b170:	f001 fc6a 	bl	800ca48 <RCCEx_PLL3_Config>
 800b174:	4603      	mov	r3, r0
 800b176:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800b17a:	e004      	b.n	800b186 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b17c:	2301      	movs	r3, #1
 800b17e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800b182:	e000      	b.n	800b186 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800b184:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b186:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d10b      	bne.n	800b1a6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b18e:	4b26      	ldr	r3, [pc, #152]	@ (800b228 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b190:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b192:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800b196:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b19a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b19e:	4a22      	ldr	r2, [pc, #136]	@ (800b228 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b1a0:	430b      	orrs	r3, r1
 800b1a2:	6553      	str	r3, [r2, #84]	@ 0x54
 800b1a4:	e003      	b.n	800b1ae <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b1aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b1ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b1b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1b6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800b1ba:	673b      	str	r3, [r7, #112]	@ 0x70
 800b1bc:	2300      	movs	r3, #0
 800b1be:	677b      	str	r3, [r7, #116]	@ 0x74
 800b1c0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800b1c4:	460b      	mov	r3, r1
 800b1c6:	4313      	orrs	r3, r2
 800b1c8:	d034      	beq.n	800b234 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800b1ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b1ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d003      	beq.n	800b1dc <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800b1d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b1d8:	d007      	beq.n	800b1ea <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800b1da:	e011      	b.n	800b200 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b1dc:	4b12      	ldr	r3, [pc, #72]	@ (800b228 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b1de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1e0:	4a11      	ldr	r2, [pc, #68]	@ (800b228 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b1e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b1e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b1e8:	e00e      	b.n	800b208 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b1ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b1ee:	3308      	adds	r3, #8
 800b1f0:	2102      	movs	r1, #2
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	f001 fb76 	bl	800c8e4 <RCCEx_PLL2_Config>
 800b1f8:	4603      	mov	r3, r0
 800b1fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b1fe:	e003      	b.n	800b208 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800b200:	2301      	movs	r3, #1
 800b202:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800b206:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b208:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d10d      	bne.n	800b22c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b210:	4b05      	ldr	r3, [pc, #20]	@ (800b228 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b212:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b214:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b218:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b21c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b21e:	4a02      	ldr	r2, [pc, #8]	@ (800b228 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b220:	430b      	orrs	r3, r1
 800b222:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800b224:	e006      	b.n	800b234 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800b226:	bf00      	nop
 800b228:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b22c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b230:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b234:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b23c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800b240:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b242:	2300      	movs	r3, #0
 800b244:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b246:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800b24a:	460b      	mov	r3, r1
 800b24c:	4313      	orrs	r3, r2
 800b24e:	d00c      	beq.n	800b26a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b250:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b254:	3328      	adds	r3, #40	@ 0x28
 800b256:	2102      	movs	r1, #2
 800b258:	4618      	mov	r0, r3
 800b25a:	f001 fbf5 	bl	800ca48 <RCCEx_PLL3_Config>
 800b25e:	4603      	mov	r3, r0
 800b260:	2b00      	cmp	r3, #0
 800b262:	d002      	beq.n	800b26a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800b264:	2301      	movs	r3, #1
 800b266:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b26a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b26e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b272:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800b276:	663b      	str	r3, [r7, #96]	@ 0x60
 800b278:	2300      	movs	r3, #0
 800b27a:	667b      	str	r3, [r7, #100]	@ 0x64
 800b27c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800b280:	460b      	mov	r3, r1
 800b282:	4313      	orrs	r3, r2
 800b284:	d038      	beq.n	800b2f8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800b286:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b28a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b28e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b292:	d018      	beq.n	800b2c6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800b294:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b298:	d811      	bhi.n	800b2be <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800b29a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b29e:	d014      	beq.n	800b2ca <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800b2a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b2a4:	d80b      	bhi.n	800b2be <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d011      	beq.n	800b2ce <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800b2aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b2ae:	d106      	bne.n	800b2be <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b2b0:	4bc3      	ldr	r3, [pc, #780]	@ (800b5c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b2b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2b4:	4ac2      	ldr	r2, [pc, #776]	@ (800b5c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b2b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b2ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800b2bc:	e008      	b.n	800b2d0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b2be:	2301      	movs	r3, #1
 800b2c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800b2c4:	e004      	b.n	800b2d0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800b2c6:	bf00      	nop
 800b2c8:	e002      	b.n	800b2d0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800b2ca:	bf00      	nop
 800b2cc:	e000      	b.n	800b2d0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800b2ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b2d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d10b      	bne.n	800b2f0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b2d8:	4bb9      	ldr	r3, [pc, #740]	@ (800b5c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b2da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b2dc:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800b2e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b2e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b2e8:	4ab5      	ldr	r2, [pc, #724]	@ (800b5c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b2ea:	430b      	orrs	r3, r1
 800b2ec:	6553      	str	r3, [r2, #84]	@ 0x54
 800b2ee:	e003      	b.n	800b2f8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b2f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b2f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b2fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b300:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800b304:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b306:	2300      	movs	r3, #0
 800b308:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b30a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800b30e:	460b      	mov	r3, r1
 800b310:	4313      	orrs	r3, r2
 800b312:	d009      	beq.n	800b328 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b314:	4baa      	ldr	r3, [pc, #680]	@ (800b5c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b316:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b318:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800b31c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b320:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b322:	4aa7      	ldr	r2, [pc, #668]	@ (800b5c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b324:	430b      	orrs	r3, r1
 800b326:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800b328:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b32c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b330:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800b334:	653b      	str	r3, [r7, #80]	@ 0x50
 800b336:	2300      	movs	r3, #0
 800b338:	657b      	str	r3, [r7, #84]	@ 0x54
 800b33a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800b33e:	460b      	mov	r3, r1
 800b340:	4313      	orrs	r3, r2
 800b342:	d00a      	beq.n	800b35a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800b344:	4b9e      	ldr	r3, [pc, #632]	@ (800b5c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b346:	691b      	ldr	r3, [r3, #16]
 800b348:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800b34c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b350:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800b354:	4a9a      	ldr	r2, [pc, #616]	@ (800b5c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b356:	430b      	orrs	r3, r1
 800b358:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b35a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b35e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b362:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800b366:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b368:	2300      	movs	r3, #0
 800b36a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b36c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800b370:	460b      	mov	r3, r1
 800b372:	4313      	orrs	r3, r2
 800b374:	d009      	beq.n	800b38a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b376:	4b92      	ldr	r3, [pc, #584]	@ (800b5c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b378:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b37a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800b37e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b382:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b384:	4a8e      	ldr	r2, [pc, #568]	@ (800b5c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b386:	430b      	orrs	r3, r1
 800b388:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b38a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b38e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b392:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800b396:	643b      	str	r3, [r7, #64]	@ 0x40
 800b398:	2300      	movs	r3, #0
 800b39a:	647b      	str	r3, [r7, #68]	@ 0x44
 800b39c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800b3a0:	460b      	mov	r3, r1
 800b3a2:	4313      	orrs	r3, r2
 800b3a4:	d00e      	beq.n	800b3c4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b3a6:	4b86      	ldr	r3, [pc, #536]	@ (800b5c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b3a8:	691b      	ldr	r3, [r3, #16]
 800b3aa:	4a85      	ldr	r2, [pc, #532]	@ (800b5c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b3ac:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b3b0:	6113      	str	r3, [r2, #16]
 800b3b2:	4b83      	ldr	r3, [pc, #524]	@ (800b5c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b3b4:	6919      	ldr	r1, [r3, #16]
 800b3b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b3ba:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800b3be:	4a80      	ldr	r2, [pc, #512]	@ (800b5c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b3c0:	430b      	orrs	r3, r1
 800b3c2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b3c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b3c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3cc:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800b3d0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b3d6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800b3da:	460b      	mov	r3, r1
 800b3dc:	4313      	orrs	r3, r2
 800b3de:	d009      	beq.n	800b3f4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b3e0:	4b77      	ldr	r3, [pc, #476]	@ (800b5c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b3e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b3e4:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800b3e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b3ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b3ee:	4a74      	ldr	r2, [pc, #464]	@ (800b5c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b3f0:	430b      	orrs	r3, r1
 800b3f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b3f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b3f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3fc:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800b400:	633b      	str	r3, [r7, #48]	@ 0x30
 800b402:	2300      	movs	r3, #0
 800b404:	637b      	str	r3, [r7, #52]	@ 0x34
 800b406:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800b40a:	460b      	mov	r3, r1
 800b40c:	4313      	orrs	r3, r2
 800b40e:	d00a      	beq.n	800b426 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b410:	4b6b      	ldr	r3, [pc, #428]	@ (800b5c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b412:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b414:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800b418:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b41c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b420:	4a67      	ldr	r2, [pc, #412]	@ (800b5c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b422:	430b      	orrs	r3, r1
 800b424:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800b426:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b42a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b42e:	2100      	movs	r1, #0
 800b430:	62b9      	str	r1, [r7, #40]	@ 0x28
 800b432:	f003 0301 	and.w	r3, r3, #1
 800b436:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b438:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800b43c:	460b      	mov	r3, r1
 800b43e:	4313      	orrs	r3, r2
 800b440:	d011      	beq.n	800b466 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b442:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b446:	3308      	adds	r3, #8
 800b448:	2100      	movs	r1, #0
 800b44a:	4618      	mov	r0, r3
 800b44c:	f001 fa4a 	bl	800c8e4 <RCCEx_PLL2_Config>
 800b450:	4603      	mov	r3, r0
 800b452:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800b456:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d003      	beq.n	800b466 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b45e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b462:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800b466:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b46a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b46e:	2100      	movs	r1, #0
 800b470:	6239      	str	r1, [r7, #32]
 800b472:	f003 0302 	and.w	r3, r3, #2
 800b476:	627b      	str	r3, [r7, #36]	@ 0x24
 800b478:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800b47c:	460b      	mov	r3, r1
 800b47e:	4313      	orrs	r3, r2
 800b480:	d011      	beq.n	800b4a6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b482:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b486:	3308      	adds	r3, #8
 800b488:	2101      	movs	r1, #1
 800b48a:	4618      	mov	r0, r3
 800b48c:	f001 fa2a 	bl	800c8e4 <RCCEx_PLL2_Config>
 800b490:	4603      	mov	r3, r0
 800b492:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800b496:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d003      	beq.n	800b4a6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b49e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b4a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800b4a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b4aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ae:	2100      	movs	r1, #0
 800b4b0:	61b9      	str	r1, [r7, #24]
 800b4b2:	f003 0304 	and.w	r3, r3, #4
 800b4b6:	61fb      	str	r3, [r7, #28]
 800b4b8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800b4bc:	460b      	mov	r3, r1
 800b4be:	4313      	orrs	r3, r2
 800b4c0:	d011      	beq.n	800b4e6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b4c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b4c6:	3308      	adds	r3, #8
 800b4c8:	2102      	movs	r1, #2
 800b4ca:	4618      	mov	r0, r3
 800b4cc:	f001 fa0a 	bl	800c8e4 <RCCEx_PLL2_Config>
 800b4d0:	4603      	mov	r3, r0
 800b4d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800b4d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d003      	beq.n	800b4e6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b4e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800b4e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b4ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ee:	2100      	movs	r1, #0
 800b4f0:	6139      	str	r1, [r7, #16]
 800b4f2:	f003 0308 	and.w	r3, r3, #8
 800b4f6:	617b      	str	r3, [r7, #20]
 800b4f8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800b4fc:	460b      	mov	r3, r1
 800b4fe:	4313      	orrs	r3, r2
 800b500:	d011      	beq.n	800b526 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b502:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b506:	3328      	adds	r3, #40	@ 0x28
 800b508:	2100      	movs	r1, #0
 800b50a:	4618      	mov	r0, r3
 800b50c:	f001 fa9c 	bl	800ca48 <RCCEx_PLL3_Config>
 800b510:	4603      	mov	r3, r0
 800b512:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800b516:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d003      	beq.n	800b526 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b51e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b522:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800b526:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b52a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b52e:	2100      	movs	r1, #0
 800b530:	60b9      	str	r1, [r7, #8]
 800b532:	f003 0310 	and.w	r3, r3, #16
 800b536:	60fb      	str	r3, [r7, #12]
 800b538:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800b53c:	460b      	mov	r3, r1
 800b53e:	4313      	orrs	r3, r2
 800b540:	d011      	beq.n	800b566 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b542:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b546:	3328      	adds	r3, #40	@ 0x28
 800b548:	2101      	movs	r1, #1
 800b54a:	4618      	mov	r0, r3
 800b54c:	f001 fa7c 	bl	800ca48 <RCCEx_PLL3_Config>
 800b550:	4603      	mov	r3, r0
 800b552:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800b556:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d003      	beq.n	800b566 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b55e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b562:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800b566:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b56a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b56e:	2100      	movs	r1, #0
 800b570:	6039      	str	r1, [r7, #0]
 800b572:	f003 0320 	and.w	r3, r3, #32
 800b576:	607b      	str	r3, [r7, #4]
 800b578:	e9d7 1200 	ldrd	r1, r2, [r7]
 800b57c:	460b      	mov	r3, r1
 800b57e:	4313      	orrs	r3, r2
 800b580:	d011      	beq.n	800b5a6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b582:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b586:	3328      	adds	r3, #40	@ 0x28
 800b588:	2102      	movs	r1, #2
 800b58a:	4618      	mov	r0, r3
 800b58c:	f001 fa5c 	bl	800ca48 <RCCEx_PLL3_Config>
 800b590:	4603      	mov	r3, r0
 800b592:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800b596:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d003      	beq.n	800b5a6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b59e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b5a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800b5a6:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d101      	bne.n	800b5b2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	e000      	b.n	800b5b4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800b5b2:	2301      	movs	r3, #1
}
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b5c0:	58024400 	.word	0x58024400

0800b5c4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800b5c4:	b580      	push	{r7, lr}
 800b5c6:	b090      	sub	sp, #64	@ 0x40
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800b5ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b5d2:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800b5d6:	430b      	orrs	r3, r1
 800b5d8:	f040 8094 	bne.w	800b704 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800b5dc:	4b9e      	ldr	r3, [pc, #632]	@ (800b858 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b5de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b5e0:	f003 0307 	and.w	r3, r3, #7
 800b5e4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800b5e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5e8:	2b04      	cmp	r3, #4
 800b5ea:	f200 8087 	bhi.w	800b6fc <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800b5ee:	a201      	add	r2, pc, #4	@ (adr r2, 800b5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800b5f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5f4:	0800b609 	.word	0x0800b609
 800b5f8:	0800b631 	.word	0x0800b631
 800b5fc:	0800b659 	.word	0x0800b659
 800b600:	0800b6f5 	.word	0x0800b6f5
 800b604:	0800b681 	.word	0x0800b681
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b608:	4b93      	ldr	r3, [pc, #588]	@ (800b858 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b610:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b614:	d108      	bne.n	800b628 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b616:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b61a:	4618      	mov	r0, r3
 800b61c:	f001 f810 	bl	800c640 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b622:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b624:	f000 bd45 	b.w	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b628:	2300      	movs	r3, #0
 800b62a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b62c:	f000 bd41 	b.w	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b630:	4b89      	ldr	r3, [pc, #548]	@ (800b858 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b638:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b63c:	d108      	bne.n	800b650 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b63e:	f107 0318 	add.w	r3, r7, #24
 800b642:	4618      	mov	r0, r3
 800b644:	f000 fd54 	bl	800c0f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b648:	69bb      	ldr	r3, [r7, #24]
 800b64a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b64c:	f000 bd31 	b.w	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b650:	2300      	movs	r3, #0
 800b652:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b654:	f000 bd2d 	b.w	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b658:	4b7f      	ldr	r3, [pc, #508]	@ (800b858 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b660:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b664:	d108      	bne.n	800b678 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b666:	f107 030c 	add.w	r3, r7, #12
 800b66a:	4618      	mov	r0, r3
 800b66c:	f000 fe94 	bl	800c398 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b674:	f000 bd1d 	b.w	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b678:	2300      	movs	r3, #0
 800b67a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b67c:	f000 bd19 	b.w	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b680:	4b75      	ldr	r3, [pc, #468]	@ (800b858 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b682:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b684:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b688:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b68a:	4b73      	ldr	r3, [pc, #460]	@ (800b858 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	f003 0304 	and.w	r3, r3, #4
 800b692:	2b04      	cmp	r3, #4
 800b694:	d10c      	bne.n	800b6b0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800b696:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d109      	bne.n	800b6b0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b69c:	4b6e      	ldr	r3, [pc, #440]	@ (800b858 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	08db      	lsrs	r3, r3, #3
 800b6a2:	f003 0303 	and.w	r3, r3, #3
 800b6a6:	4a6d      	ldr	r2, [pc, #436]	@ (800b85c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b6a8:	fa22 f303 	lsr.w	r3, r2, r3
 800b6ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b6ae:	e01f      	b.n	800b6f0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b6b0:	4b69      	ldr	r3, [pc, #420]	@ (800b858 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b6b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b6bc:	d106      	bne.n	800b6cc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800b6be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b6c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b6c4:	d102      	bne.n	800b6cc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b6c6:	4b66      	ldr	r3, [pc, #408]	@ (800b860 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800b6c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b6ca:	e011      	b.n	800b6f0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b6cc:	4b62      	ldr	r3, [pc, #392]	@ (800b858 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b6d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b6d8:	d106      	bne.n	800b6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800b6da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b6dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b6e0:	d102      	bne.n	800b6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b6e2:	4b60      	ldr	r3, [pc, #384]	@ (800b864 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800b6e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b6e6:	e003      	b.n	800b6f0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b6ec:	f000 bce1 	b.w	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b6f0:	f000 bcdf 	b.w	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b6f4:	4b5c      	ldr	r3, [pc, #368]	@ (800b868 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800b6f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b6f8:	f000 bcdb 	b.w	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b700:	f000 bcd7 	b.w	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800b704:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b708:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800b70c:	430b      	orrs	r3, r1
 800b70e:	f040 80ad 	bne.w	800b86c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800b712:	4b51      	ldr	r3, [pc, #324]	@ (800b858 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b714:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b716:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800b71a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800b71c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b71e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b722:	d056      	beq.n	800b7d2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800b724:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b726:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b72a:	f200 8090 	bhi.w	800b84e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800b72e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b730:	2bc0      	cmp	r3, #192	@ 0xc0
 800b732:	f000 8088 	beq.w	800b846 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800b736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b738:	2bc0      	cmp	r3, #192	@ 0xc0
 800b73a:	f200 8088 	bhi.w	800b84e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800b73e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b740:	2b80      	cmp	r3, #128	@ 0x80
 800b742:	d032      	beq.n	800b7aa <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800b744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b746:	2b80      	cmp	r3, #128	@ 0x80
 800b748:	f200 8081 	bhi.w	800b84e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800b74c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d003      	beq.n	800b75a <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800b752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b754:	2b40      	cmp	r3, #64	@ 0x40
 800b756:	d014      	beq.n	800b782 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800b758:	e079      	b.n	800b84e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b75a:	4b3f      	ldr	r3, [pc, #252]	@ (800b858 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b762:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b766:	d108      	bne.n	800b77a <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b768:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b76c:	4618      	mov	r0, r3
 800b76e:	f000 ff67 	bl	800c640 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b774:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b776:	f000 bc9c 	b.w	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b77a:	2300      	movs	r3, #0
 800b77c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b77e:	f000 bc98 	b.w	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b782:	4b35      	ldr	r3, [pc, #212]	@ (800b858 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b78a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b78e:	d108      	bne.n	800b7a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b790:	f107 0318 	add.w	r3, r7, #24
 800b794:	4618      	mov	r0, r3
 800b796:	f000 fcab 	bl	800c0f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b79a:	69bb      	ldr	r3, [r7, #24]
 800b79c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b79e:	f000 bc88 	b.w	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b7a6:	f000 bc84 	b.w	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b7aa:	4b2b      	ldr	r3, [pc, #172]	@ (800b858 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b7b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b7b6:	d108      	bne.n	800b7ca <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b7b8:	f107 030c 	add.w	r3, r7, #12
 800b7bc:	4618      	mov	r0, r3
 800b7be:	f000 fdeb 	bl	800c398 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b7c6:	f000 bc74 	b.w	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b7ce:	f000 bc70 	b.w	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b7d2:	4b21      	ldr	r3, [pc, #132]	@ (800b858 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b7d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b7d6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b7da:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b7dc:	4b1e      	ldr	r3, [pc, #120]	@ (800b858 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	f003 0304 	and.w	r3, r3, #4
 800b7e4:	2b04      	cmp	r3, #4
 800b7e6:	d10c      	bne.n	800b802 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800b7e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d109      	bne.n	800b802 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b7ee:	4b1a      	ldr	r3, [pc, #104]	@ (800b858 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	08db      	lsrs	r3, r3, #3
 800b7f4:	f003 0303 	and.w	r3, r3, #3
 800b7f8:	4a18      	ldr	r2, [pc, #96]	@ (800b85c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b7fa:	fa22 f303 	lsr.w	r3, r2, r3
 800b7fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b800:	e01f      	b.n	800b842 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b802:	4b15      	ldr	r3, [pc, #84]	@ (800b858 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b80a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b80e:	d106      	bne.n	800b81e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800b810:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b812:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b816:	d102      	bne.n	800b81e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b818:	4b11      	ldr	r3, [pc, #68]	@ (800b860 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800b81a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b81c:	e011      	b.n	800b842 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b81e:	4b0e      	ldr	r3, [pc, #56]	@ (800b858 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b826:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b82a:	d106      	bne.n	800b83a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800b82c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b82e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b832:	d102      	bne.n	800b83a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b834:	4b0b      	ldr	r3, [pc, #44]	@ (800b864 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800b836:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b838:	e003      	b.n	800b842 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b83a:	2300      	movs	r3, #0
 800b83c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b83e:	f000 bc38 	b.w	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b842:	f000 bc36 	b.w	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b846:	4b08      	ldr	r3, [pc, #32]	@ (800b868 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800b848:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b84a:	f000 bc32 	b.w	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b84e:	2300      	movs	r3, #0
 800b850:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b852:	f000 bc2e 	b.w	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b856:	bf00      	nop
 800b858:	58024400 	.word	0x58024400
 800b85c:	03d09000 	.word	0x03d09000
 800b860:	003d0900 	.word	0x003d0900
 800b864:	007a1200 	.word	0x007a1200
 800b868:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800b86c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b870:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800b874:	430b      	orrs	r3, r1
 800b876:	f040 809c 	bne.w	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800b87a:	4b9e      	ldr	r3, [pc, #632]	@ (800baf4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b87c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b87e:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800b882:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800b884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b886:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b88a:	d054      	beq.n	800b936 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800b88c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b88e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b892:	f200 808b 	bhi.w	800b9ac <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800b896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b898:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800b89c:	f000 8083 	beq.w	800b9a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800b8a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8a2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800b8a6:	f200 8081 	bhi.w	800b9ac <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800b8aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b8b0:	d02f      	beq.n	800b912 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800b8b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8b4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b8b8:	d878      	bhi.n	800b9ac <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800b8ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d004      	beq.n	800b8ca <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800b8c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8c2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b8c6:	d012      	beq.n	800b8ee <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800b8c8:	e070      	b.n	800b9ac <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b8ca:	4b8a      	ldr	r3, [pc, #552]	@ (800baf4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b8d2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b8d6:	d107      	bne.n	800b8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b8d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b8dc:	4618      	mov	r0, r3
 800b8de:	f000 feaf 	bl	800c640 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b8e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b8e6:	e3e4      	b.n	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b8e8:	2300      	movs	r3, #0
 800b8ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b8ec:	e3e1      	b.n	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b8ee:	4b81      	ldr	r3, [pc, #516]	@ (800baf4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b8f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b8fa:	d107      	bne.n	800b90c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b8fc:	f107 0318 	add.w	r3, r7, #24
 800b900:	4618      	mov	r0, r3
 800b902:	f000 fbf5 	bl	800c0f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b906:	69bb      	ldr	r3, [r7, #24]
 800b908:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b90a:	e3d2      	b.n	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b90c:	2300      	movs	r3, #0
 800b90e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b910:	e3cf      	b.n	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b912:	4b78      	ldr	r3, [pc, #480]	@ (800baf4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b91a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b91e:	d107      	bne.n	800b930 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b920:	f107 030c 	add.w	r3, r7, #12
 800b924:	4618      	mov	r0, r3
 800b926:	f000 fd37 	bl	800c398 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b92e:	e3c0      	b.n	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b930:	2300      	movs	r3, #0
 800b932:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b934:	e3bd      	b.n	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b936:	4b6f      	ldr	r3, [pc, #444]	@ (800baf4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b938:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b93a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b93e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b940:	4b6c      	ldr	r3, [pc, #432]	@ (800baf4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	f003 0304 	and.w	r3, r3, #4
 800b948:	2b04      	cmp	r3, #4
 800b94a:	d10c      	bne.n	800b966 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800b94c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d109      	bne.n	800b966 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b952:	4b68      	ldr	r3, [pc, #416]	@ (800baf4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	08db      	lsrs	r3, r3, #3
 800b958:	f003 0303 	and.w	r3, r3, #3
 800b95c:	4a66      	ldr	r2, [pc, #408]	@ (800baf8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b95e:	fa22 f303 	lsr.w	r3, r2, r3
 800b962:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b964:	e01e      	b.n	800b9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b966:	4b63      	ldr	r3, [pc, #396]	@ (800baf4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b96e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b972:	d106      	bne.n	800b982 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800b974:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b976:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b97a:	d102      	bne.n	800b982 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b97c:	4b5f      	ldr	r3, [pc, #380]	@ (800bafc <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800b97e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b980:	e010      	b.n	800b9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b982:	4b5c      	ldr	r3, [pc, #368]	@ (800baf4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b98a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b98e:	d106      	bne.n	800b99e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800b990:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b992:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b996:	d102      	bne.n	800b99e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b998:	4b59      	ldr	r3, [pc, #356]	@ (800bb00 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800b99a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b99c:	e002      	b.n	800b9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b99e:	2300      	movs	r3, #0
 800b9a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b9a2:	e386      	b.n	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b9a4:	e385      	b.n	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b9a6:	4b57      	ldr	r3, [pc, #348]	@ (800bb04 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800b9a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b9aa:	e382      	b.n	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b9b0:	e37f      	b.n	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800b9b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b9b6:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800b9ba:	430b      	orrs	r3, r1
 800b9bc:	f040 80a7 	bne.w	800bb0e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800b9c0:	4b4c      	ldr	r3, [pc, #304]	@ (800baf4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b9c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b9c4:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800b9c8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800b9ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9cc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b9d0:	d055      	beq.n	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800b9d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9d4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b9d8:	f200 8096 	bhi.w	800bb08 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800b9dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9de:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b9e2:	f000 8084 	beq.w	800baee <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800b9e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9e8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b9ec:	f200 808c 	bhi.w	800bb08 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800b9f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9f2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b9f6:	d030      	beq.n	800ba5a <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800b9f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9fa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b9fe:	f200 8083 	bhi.w	800bb08 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800ba02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d004      	beq.n	800ba12 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800ba08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba0a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ba0e:	d012      	beq.n	800ba36 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800ba10:	e07a      	b.n	800bb08 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ba12:	4b38      	ldr	r3, [pc, #224]	@ (800baf4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ba1a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ba1e:	d107      	bne.n	800ba30 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ba20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ba24:	4618      	mov	r0, r3
 800ba26:	f000 fe0b 	bl	800c640 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ba2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba2e:	e340      	b.n	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ba30:	2300      	movs	r3, #0
 800ba32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba34:	e33d      	b.n	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ba36:	4b2f      	ldr	r3, [pc, #188]	@ (800baf4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ba3e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ba42:	d107      	bne.n	800ba54 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ba44:	f107 0318 	add.w	r3, r7, #24
 800ba48:	4618      	mov	r0, r3
 800ba4a:	f000 fb51 	bl	800c0f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ba4e:	69bb      	ldr	r3, [r7, #24]
 800ba50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba52:	e32e      	b.n	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ba54:	2300      	movs	r3, #0
 800ba56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba58:	e32b      	b.n	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ba5a:	4b26      	ldr	r3, [pc, #152]	@ (800baf4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ba62:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ba66:	d107      	bne.n	800ba78 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ba68:	f107 030c 	add.w	r3, r7, #12
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	f000 fc93 	bl	800c398 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba76:	e31c      	b.n	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ba78:	2300      	movs	r3, #0
 800ba7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba7c:	e319      	b.n	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ba7e:	4b1d      	ldr	r3, [pc, #116]	@ (800baf4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ba80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ba82:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ba86:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ba88:	4b1a      	ldr	r3, [pc, #104]	@ (800baf4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	f003 0304 	and.w	r3, r3, #4
 800ba90:	2b04      	cmp	r3, #4
 800ba92:	d10c      	bne.n	800baae <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800ba94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d109      	bne.n	800baae <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ba9a:	4b16      	ldr	r3, [pc, #88]	@ (800baf4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	08db      	lsrs	r3, r3, #3
 800baa0:	f003 0303 	and.w	r3, r3, #3
 800baa4:	4a14      	ldr	r2, [pc, #80]	@ (800baf8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800baa6:	fa22 f303 	lsr.w	r3, r2, r3
 800baaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800baac:	e01e      	b.n	800baec <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800baae:	4b11      	ldr	r3, [pc, #68]	@ (800baf4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bab6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800baba:	d106      	bne.n	800baca <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800babc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800babe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bac2:	d102      	bne.n	800baca <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bac4:	4b0d      	ldr	r3, [pc, #52]	@ (800bafc <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800bac6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bac8:	e010      	b.n	800baec <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800baca:	4b0a      	ldr	r3, [pc, #40]	@ (800baf4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bad2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bad6:	d106      	bne.n	800bae6 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800bad8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bada:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bade:	d102      	bne.n	800bae6 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bae0:	4b07      	ldr	r3, [pc, #28]	@ (800bb00 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800bae2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bae4:	e002      	b.n	800baec <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bae6:	2300      	movs	r3, #0
 800bae8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800baea:	e2e2      	b.n	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800baec:	e2e1      	b.n	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800baee:	4b05      	ldr	r3, [pc, #20]	@ (800bb04 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800baf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800baf2:	e2de      	b.n	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800baf4:	58024400 	.word	0x58024400
 800baf8:	03d09000 	.word	0x03d09000
 800bafc:	003d0900 	.word	0x003d0900
 800bb00:	007a1200 	.word	0x007a1200
 800bb04:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800bb08:	2300      	movs	r3, #0
 800bb0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb0c:	e2d1      	b.n	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800bb0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bb12:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800bb16:	430b      	orrs	r3, r1
 800bb18:	f040 809c 	bne.w	800bc54 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800bb1c:	4b93      	ldr	r3, [pc, #588]	@ (800bd6c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800bb1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bb20:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800bb24:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800bb26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb28:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bb2c:	d054      	beq.n	800bbd8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800bb2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb30:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bb34:	f200 808b 	bhi.w	800bc4e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800bb38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb3a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800bb3e:	f000 8083 	beq.w	800bc48 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800bb42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb44:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800bb48:	f200 8081 	bhi.w	800bc4e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800bb4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bb52:	d02f      	beq.n	800bbb4 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800bb54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb56:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bb5a:	d878      	bhi.n	800bc4e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800bb5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d004      	beq.n	800bb6c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800bb62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bb68:	d012      	beq.n	800bb90 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800bb6a:	e070      	b.n	800bc4e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bb6c:	4b7f      	ldr	r3, [pc, #508]	@ (800bd6c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bb74:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bb78:	d107      	bne.n	800bb8a <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bb7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bb7e:	4618      	mov	r0, r3
 800bb80:	f000 fd5e 	bl	800c640 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bb84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bb88:	e293      	b.n	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb8e:	e290      	b.n	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bb90:	4b76      	ldr	r3, [pc, #472]	@ (800bd6c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bb98:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bb9c:	d107      	bne.n	800bbae <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bb9e:	f107 0318 	add.w	r3, r7, #24
 800bba2:	4618      	mov	r0, r3
 800bba4:	f000 faa4 	bl	800c0f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bba8:	69bb      	ldr	r3, [r7, #24]
 800bbaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bbac:	e281      	b.n	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bbae:	2300      	movs	r3, #0
 800bbb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bbb2:	e27e      	b.n	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bbb4:	4b6d      	ldr	r3, [pc, #436]	@ (800bd6c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bbbc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bbc0:	d107      	bne.n	800bbd2 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bbc2:	f107 030c 	add.w	r3, r7, #12
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	f000 fbe6 	bl	800c398 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bbd0:	e26f      	b.n	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bbd2:	2300      	movs	r3, #0
 800bbd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bbd6:	e26c      	b.n	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bbd8:	4b64      	ldr	r3, [pc, #400]	@ (800bd6c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800bbda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bbdc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800bbe0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bbe2:	4b62      	ldr	r3, [pc, #392]	@ (800bd6c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	f003 0304 	and.w	r3, r3, #4
 800bbea:	2b04      	cmp	r3, #4
 800bbec:	d10c      	bne.n	800bc08 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800bbee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d109      	bne.n	800bc08 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bbf4:	4b5d      	ldr	r3, [pc, #372]	@ (800bd6c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	08db      	lsrs	r3, r3, #3
 800bbfa:	f003 0303 	and.w	r3, r3, #3
 800bbfe:	4a5c      	ldr	r2, [pc, #368]	@ (800bd70 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800bc00:	fa22 f303 	lsr.w	r3, r2, r3
 800bc04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bc06:	e01e      	b.n	800bc46 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bc08:	4b58      	ldr	r3, [pc, #352]	@ (800bd6c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bc10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bc14:	d106      	bne.n	800bc24 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800bc16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc18:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bc1c:	d102      	bne.n	800bc24 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bc1e:	4b55      	ldr	r3, [pc, #340]	@ (800bd74 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800bc20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bc22:	e010      	b.n	800bc46 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bc24:	4b51      	ldr	r3, [pc, #324]	@ (800bd6c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bc2c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bc30:	d106      	bne.n	800bc40 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800bc32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bc38:	d102      	bne.n	800bc40 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bc3a:	4b4f      	ldr	r3, [pc, #316]	@ (800bd78 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800bc3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bc3e:	e002      	b.n	800bc46 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bc40:	2300      	movs	r3, #0
 800bc42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800bc44:	e235      	b.n	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800bc46:	e234      	b.n	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bc48:	4b4c      	ldr	r3, [pc, #304]	@ (800bd7c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800bc4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc4c:	e231      	b.n	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800bc4e:	2300      	movs	r3, #0
 800bc50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc52:	e22e      	b.n	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800bc54:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bc58:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800bc5c:	430b      	orrs	r3, r1
 800bc5e:	f040 808f 	bne.w	800bd80 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800bc62:	4b42      	ldr	r3, [pc, #264]	@ (800bd6c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800bc64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bc66:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800bc6a:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800bc6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc6e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800bc72:	d06b      	beq.n	800bd4c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800bc74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc76:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800bc7a:	d874      	bhi.n	800bd66 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800bc7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc7e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800bc82:	d056      	beq.n	800bd32 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800bc84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc86:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800bc8a:	d86c      	bhi.n	800bd66 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800bc8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc8e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800bc92:	d03b      	beq.n	800bd0c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800bc94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc96:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800bc9a:	d864      	bhi.n	800bd66 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800bc9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc9e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bca2:	d021      	beq.n	800bce8 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800bca4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bca6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bcaa:	d85c      	bhi.n	800bd66 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800bcac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d004      	beq.n	800bcbc <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800bcb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bcb8:	d004      	beq.n	800bcc4 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800bcba:	e054      	b.n	800bd66 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800bcbc:	f7fe fa4c 	bl	800a158 <HAL_RCC_GetPCLK1Freq>
 800bcc0:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bcc2:	e1f6      	b.n	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bcc4:	4b29      	ldr	r3, [pc, #164]	@ (800bd6c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bccc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bcd0:	d107      	bne.n	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bcd2:	f107 0318 	add.w	r3, r7, #24
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	f000 fa0a 	bl	800c0f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bcdc:	69fb      	ldr	r3, [r7, #28]
 800bcde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bce0:	e1e7      	b.n	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bce2:	2300      	movs	r3, #0
 800bce4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bce6:	e1e4      	b.n	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bce8:	4b20      	ldr	r3, [pc, #128]	@ (800bd6c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bcf0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bcf4:	d107      	bne.n	800bd06 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bcf6:	f107 030c 	add.w	r3, r7, #12
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	f000 fb4c 	bl	800c398 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800bd00:	693b      	ldr	r3, [r7, #16]
 800bd02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd04:	e1d5      	b.n	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bd06:	2300      	movs	r3, #0
 800bd08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bd0a:	e1d2      	b.n	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800bd0c:	4b17      	ldr	r3, [pc, #92]	@ (800bd6c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	f003 0304 	and.w	r3, r3, #4
 800bd14:	2b04      	cmp	r3, #4
 800bd16:	d109      	bne.n	800bd2c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bd18:	4b14      	ldr	r3, [pc, #80]	@ (800bd6c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	08db      	lsrs	r3, r3, #3
 800bd1e:	f003 0303 	and.w	r3, r3, #3
 800bd22:	4a13      	ldr	r2, [pc, #76]	@ (800bd70 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800bd24:	fa22 f303 	lsr.w	r3, r2, r3
 800bd28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd2a:	e1c2      	b.n	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bd30:	e1bf      	b.n	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800bd32:	4b0e      	ldr	r3, [pc, #56]	@ (800bd6c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bd3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bd3e:	d102      	bne.n	800bd46 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800bd40:	4b0c      	ldr	r3, [pc, #48]	@ (800bd74 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800bd42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd44:	e1b5      	b.n	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bd46:	2300      	movs	r3, #0
 800bd48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bd4a:	e1b2      	b.n	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800bd4c:	4b07      	ldr	r3, [pc, #28]	@ (800bd6c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bd54:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bd58:	d102      	bne.n	800bd60 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800bd5a:	4b07      	ldr	r3, [pc, #28]	@ (800bd78 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800bd5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd5e:	e1a8      	b.n	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bd60:	2300      	movs	r3, #0
 800bd62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bd64:	e1a5      	b.n	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800bd66:	2300      	movs	r3, #0
 800bd68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bd6a:	e1a2      	b.n	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800bd6c:	58024400 	.word	0x58024400
 800bd70:	03d09000 	.word	0x03d09000
 800bd74:	003d0900 	.word	0x003d0900
 800bd78:	007a1200 	.word	0x007a1200
 800bd7c:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800bd80:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bd84:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800bd88:	430b      	orrs	r3, r1
 800bd8a:	d173      	bne.n	800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800bd8c:	4b9c      	ldr	r3, [pc, #624]	@ (800c000 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bd8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bd90:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800bd94:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800bd96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd98:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bd9c:	d02f      	beq.n	800bdfe <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800bd9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bda0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bda4:	d863      	bhi.n	800be6e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800bda6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d004      	beq.n	800bdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800bdac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bdae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bdb2:	d012      	beq.n	800bdda <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800bdb4:	e05b      	b.n	800be6e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bdb6:	4b92      	ldr	r3, [pc, #584]	@ (800c000 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bdbe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bdc2:	d107      	bne.n	800bdd4 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bdc4:	f107 0318 	add.w	r3, r7, #24
 800bdc8:	4618      	mov	r0, r3
 800bdca:	f000 f991 	bl	800c0f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bdce:	69bb      	ldr	r3, [r7, #24]
 800bdd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bdd2:	e16e      	b.n	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bdd8:	e16b      	b.n	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bdda:	4b89      	ldr	r3, [pc, #548]	@ (800c000 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bde2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bde6:	d107      	bne.n	800bdf8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bde8:	f107 030c 	add.w	r3, r7, #12
 800bdec:	4618      	mov	r0, r3
 800bdee:	f000 fad3 	bl	800c398 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800bdf2:	697b      	ldr	r3, [r7, #20]
 800bdf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bdf6:	e15c      	b.n	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bdfc:	e159      	b.n	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bdfe:	4b80      	ldr	r3, [pc, #512]	@ (800c000 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800be00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800be02:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800be06:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800be08:	4b7d      	ldr	r3, [pc, #500]	@ (800c000 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	f003 0304 	and.w	r3, r3, #4
 800be10:	2b04      	cmp	r3, #4
 800be12:	d10c      	bne.n	800be2e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800be14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800be16:	2b00      	cmp	r3, #0
 800be18:	d109      	bne.n	800be2e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800be1a:	4b79      	ldr	r3, [pc, #484]	@ (800c000 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	08db      	lsrs	r3, r3, #3
 800be20:	f003 0303 	and.w	r3, r3, #3
 800be24:	4a77      	ldr	r2, [pc, #476]	@ (800c004 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800be26:	fa22 f303 	lsr.w	r3, r2, r3
 800be2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800be2c:	e01e      	b.n	800be6c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800be2e:	4b74      	ldr	r3, [pc, #464]	@ (800c000 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800be36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800be3a:	d106      	bne.n	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800be3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800be3e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800be42:	d102      	bne.n	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800be44:	4b70      	ldr	r3, [pc, #448]	@ (800c008 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800be46:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800be48:	e010      	b.n	800be6c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800be4a:	4b6d      	ldr	r3, [pc, #436]	@ (800c000 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800be52:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800be56:	d106      	bne.n	800be66 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800be58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800be5a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800be5e:	d102      	bne.n	800be66 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800be60:	4b6a      	ldr	r3, [pc, #424]	@ (800c00c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800be62:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800be64:	e002      	b.n	800be6c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800be66:	2300      	movs	r3, #0
 800be68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800be6a:	e122      	b.n	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800be6c:	e121      	b.n	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800be6e:	2300      	movs	r3, #0
 800be70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800be72:	e11e      	b.n	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800be74:	e9d7 2300 	ldrd	r2, r3, [r7]
 800be78:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800be7c:	430b      	orrs	r3, r1
 800be7e:	d133      	bne.n	800bee8 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800be80:	4b5f      	ldr	r3, [pc, #380]	@ (800c000 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800be82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800be84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800be88:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800be8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d004      	beq.n	800be9a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800be90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be92:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800be96:	d012      	beq.n	800bebe <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800be98:	e023      	b.n	800bee2 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800be9a:	4b59      	ldr	r3, [pc, #356]	@ (800c000 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bea2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bea6:	d107      	bne.n	800beb8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bea8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800beac:	4618      	mov	r0, r3
 800beae:	f000 fbc7 	bl	800c640 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800beb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800beb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800beb6:	e0fc      	b.n	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800beb8:	2300      	movs	r3, #0
 800beba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bebc:	e0f9      	b.n	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bebe:	4b50      	ldr	r3, [pc, #320]	@ (800c000 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bec6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800beca:	d107      	bne.n	800bedc <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800becc:	f107 0318 	add.w	r3, r7, #24
 800bed0:	4618      	mov	r0, r3
 800bed2:	f000 f90d 	bl	800c0f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800bed6:	6a3b      	ldr	r3, [r7, #32]
 800bed8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800beda:	e0ea      	b.n	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bedc:	2300      	movs	r3, #0
 800bede:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bee0:	e0e7      	b.n	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800bee2:	2300      	movs	r3, #0
 800bee4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bee6:	e0e4      	b.n	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800bee8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800beec:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800bef0:	430b      	orrs	r3, r1
 800bef2:	f040 808d 	bne.w	800c010 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800bef6:	4b42      	ldr	r3, [pc, #264]	@ (800c000 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bef8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800befa:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800befe:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800bf00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf02:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bf06:	d06b      	beq.n	800bfe0 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800bf08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bf0e:	d874      	bhi.n	800bffa <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800bf10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bf16:	d056      	beq.n	800bfc6 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800bf18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bf1e:	d86c      	bhi.n	800bffa <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800bf20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf22:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800bf26:	d03b      	beq.n	800bfa0 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800bf28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf2a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800bf2e:	d864      	bhi.n	800bffa <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800bf30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf32:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bf36:	d021      	beq.n	800bf7c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800bf38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf3a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bf3e:	d85c      	bhi.n	800bffa <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800bf40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d004      	beq.n	800bf50 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800bf46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf48:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bf4c:	d004      	beq.n	800bf58 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800bf4e:	e054      	b.n	800bffa <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800bf50:	f000 f8b8 	bl	800c0c4 <HAL_RCCEx_GetD3PCLK1Freq>
 800bf54:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bf56:	e0ac      	b.n	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bf58:	4b29      	ldr	r3, [pc, #164]	@ (800c000 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bf60:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bf64:	d107      	bne.n	800bf76 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bf66:	f107 0318 	add.w	r3, r7, #24
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	f000 f8c0 	bl	800c0f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bf70:	69fb      	ldr	r3, [r7, #28]
 800bf72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bf74:	e09d      	b.n	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bf76:	2300      	movs	r3, #0
 800bf78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bf7a:	e09a      	b.n	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bf7c:	4b20      	ldr	r3, [pc, #128]	@ (800c000 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bf84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bf88:	d107      	bne.n	800bf9a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bf8a:	f107 030c 	add.w	r3, r7, #12
 800bf8e:	4618      	mov	r0, r3
 800bf90:	f000 fa02 	bl	800c398 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800bf94:	693b      	ldr	r3, [r7, #16]
 800bf96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bf98:	e08b      	b.n	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bf9e:	e088      	b.n	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800bfa0:	4b17      	ldr	r3, [pc, #92]	@ (800c000 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	f003 0304 	and.w	r3, r3, #4
 800bfa8:	2b04      	cmp	r3, #4
 800bfaa:	d109      	bne.n	800bfc0 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bfac:	4b14      	ldr	r3, [pc, #80]	@ (800c000 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	08db      	lsrs	r3, r3, #3
 800bfb2:	f003 0303 	and.w	r3, r3, #3
 800bfb6:	4a13      	ldr	r2, [pc, #76]	@ (800c004 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800bfb8:	fa22 f303 	lsr.w	r3, r2, r3
 800bfbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bfbe:	e078      	b.n	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bfc0:	2300      	movs	r3, #0
 800bfc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bfc4:	e075      	b.n	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800bfc6:	4b0e      	ldr	r3, [pc, #56]	@ (800c000 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bfce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bfd2:	d102      	bne.n	800bfda <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800bfd4:	4b0c      	ldr	r3, [pc, #48]	@ (800c008 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800bfd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bfd8:	e06b      	b.n	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bfda:	2300      	movs	r3, #0
 800bfdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bfde:	e068      	b.n	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800bfe0:	4b07      	ldr	r3, [pc, #28]	@ (800c000 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bfe8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bfec:	d102      	bne.n	800bff4 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800bfee:	4b07      	ldr	r3, [pc, #28]	@ (800c00c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800bff0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bff2:	e05e      	b.n	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bff4:	2300      	movs	r3, #0
 800bff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bff8:	e05b      	b.n	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800bffa:	2300      	movs	r3, #0
 800bffc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bffe:	e058      	b.n	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c000:	58024400 	.word	0x58024400
 800c004:	03d09000 	.word	0x03d09000
 800c008:	003d0900 	.word	0x003d0900
 800c00c:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800c010:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c014:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800c018:	430b      	orrs	r3, r1
 800c01a:	d148      	bne.n	800c0ae <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800c01c:	4b27      	ldr	r3, [pc, #156]	@ (800c0bc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c01e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c020:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800c024:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800c026:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c028:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c02c:	d02a      	beq.n	800c084 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800c02e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c030:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c034:	d838      	bhi.n	800c0a8 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800c036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d004      	beq.n	800c046 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800c03c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c03e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c042:	d00d      	beq.n	800c060 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800c044:	e030      	b.n	800c0a8 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c046:	4b1d      	ldr	r3, [pc, #116]	@ (800c0bc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c04e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c052:	d102      	bne.n	800c05a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800c054:	4b1a      	ldr	r3, [pc, #104]	@ (800c0c0 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800c056:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c058:	e02b      	b.n	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c05a:	2300      	movs	r3, #0
 800c05c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c05e:	e028      	b.n	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c060:	4b16      	ldr	r3, [pc, #88]	@ (800c0bc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c068:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c06c:	d107      	bne.n	800c07e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c06e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c072:	4618      	mov	r0, r3
 800c074:	f000 fae4 	bl	800c640 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c07a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c07c:	e019      	b.n	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c07e:	2300      	movs	r3, #0
 800c080:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c082:	e016      	b.n	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c084:	4b0d      	ldr	r3, [pc, #52]	@ (800c0bc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c08c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c090:	d107      	bne.n	800c0a2 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c092:	f107 0318 	add.w	r3, r7, #24
 800c096:	4618      	mov	r0, r3
 800c098:	f000 f82a 	bl	800c0f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c09c:	69fb      	ldr	r3, [r7, #28]
 800c09e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c0a0:	e007      	b.n	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c0a2:	2300      	movs	r3, #0
 800c0a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c0a6:	e004      	b.n	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c0a8:	2300      	movs	r3, #0
 800c0aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c0ac:	e001      	b.n	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800c0ae:	2300      	movs	r3, #0
 800c0b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800c0b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	3740      	adds	r7, #64	@ 0x40
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	bd80      	pop	{r7, pc}
 800c0bc:	58024400 	.word	0x58024400
 800c0c0:	007a1200 	.word	0x007a1200

0800c0c4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c0c8:	f7fe f816 	bl	800a0f8 <HAL_RCC_GetHCLKFreq>
 800c0cc:	4602      	mov	r2, r0
 800c0ce:	4b06      	ldr	r3, [pc, #24]	@ (800c0e8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c0d0:	6a1b      	ldr	r3, [r3, #32]
 800c0d2:	091b      	lsrs	r3, r3, #4
 800c0d4:	f003 0307 	and.w	r3, r3, #7
 800c0d8:	4904      	ldr	r1, [pc, #16]	@ (800c0ec <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c0da:	5ccb      	ldrb	r3, [r1, r3]
 800c0dc:	f003 031f 	and.w	r3, r3, #31
 800c0e0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800c0e4:	4618      	mov	r0, r3
 800c0e6:	bd80      	pop	{r7, pc}
 800c0e8:	58024400 	.word	0x58024400
 800c0ec:	080125a8 	.word	0x080125a8

0800c0f0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800c0f0:	b480      	push	{r7}
 800c0f2:	b089      	sub	sp, #36	@ 0x24
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c0f8:	4ba1      	ldr	r3, [pc, #644]	@ (800c380 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c0fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c0fc:	f003 0303 	and.w	r3, r3, #3
 800c100:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800c102:	4b9f      	ldr	r3, [pc, #636]	@ (800c380 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c104:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c106:	0b1b      	lsrs	r3, r3, #12
 800c108:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c10c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c10e:	4b9c      	ldr	r3, [pc, #624]	@ (800c380 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c112:	091b      	lsrs	r3, r3, #4
 800c114:	f003 0301 	and.w	r3, r3, #1
 800c118:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c11a:	4b99      	ldr	r3, [pc, #612]	@ (800c380 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c11c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c11e:	08db      	lsrs	r3, r3, #3
 800c120:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c124:	693a      	ldr	r2, [r7, #16]
 800c126:	fb02 f303 	mul.w	r3, r2, r3
 800c12a:	ee07 3a90 	vmov	s15, r3
 800c12e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c132:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c136:	697b      	ldr	r3, [r7, #20]
 800c138:	2b00      	cmp	r3, #0
 800c13a:	f000 8111 	beq.w	800c360 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c13e:	69bb      	ldr	r3, [r7, #24]
 800c140:	2b02      	cmp	r3, #2
 800c142:	f000 8083 	beq.w	800c24c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c146:	69bb      	ldr	r3, [r7, #24]
 800c148:	2b02      	cmp	r3, #2
 800c14a:	f200 80a1 	bhi.w	800c290 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c14e:	69bb      	ldr	r3, [r7, #24]
 800c150:	2b00      	cmp	r3, #0
 800c152:	d003      	beq.n	800c15c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800c154:	69bb      	ldr	r3, [r7, #24]
 800c156:	2b01      	cmp	r3, #1
 800c158:	d056      	beq.n	800c208 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800c15a:	e099      	b.n	800c290 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c15c:	4b88      	ldr	r3, [pc, #544]	@ (800c380 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	f003 0320 	and.w	r3, r3, #32
 800c164:	2b00      	cmp	r3, #0
 800c166:	d02d      	beq.n	800c1c4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c168:	4b85      	ldr	r3, [pc, #532]	@ (800c380 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	08db      	lsrs	r3, r3, #3
 800c16e:	f003 0303 	and.w	r3, r3, #3
 800c172:	4a84      	ldr	r2, [pc, #528]	@ (800c384 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800c174:	fa22 f303 	lsr.w	r3, r2, r3
 800c178:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c17a:	68bb      	ldr	r3, [r7, #8]
 800c17c:	ee07 3a90 	vmov	s15, r3
 800c180:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c184:	697b      	ldr	r3, [r7, #20]
 800c186:	ee07 3a90 	vmov	s15, r3
 800c18a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c18e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c192:	4b7b      	ldr	r3, [pc, #492]	@ (800c380 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c194:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c196:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c19a:	ee07 3a90 	vmov	s15, r3
 800c19e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c1a2:	ed97 6a03 	vldr	s12, [r7, #12]
 800c1a6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800c388 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c1aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c1ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c1b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c1b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c1ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c1be:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c1c2:	e087      	b.n	800c2d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c1c4:	697b      	ldr	r3, [r7, #20]
 800c1c6:	ee07 3a90 	vmov	s15, r3
 800c1ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1ce:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800c38c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800c1d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c1d6:	4b6a      	ldr	r3, [pc, #424]	@ (800c380 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c1d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c1da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1de:	ee07 3a90 	vmov	s15, r3
 800c1e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c1e6:	ed97 6a03 	vldr	s12, [r7, #12]
 800c1ea:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800c388 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c1ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c1f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c1f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c1fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c1fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c202:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c206:	e065      	b.n	800c2d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c208:	697b      	ldr	r3, [r7, #20]
 800c20a:	ee07 3a90 	vmov	s15, r3
 800c20e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c212:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800c390 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c216:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c21a:	4b59      	ldr	r3, [pc, #356]	@ (800c380 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c21c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c21e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c222:	ee07 3a90 	vmov	s15, r3
 800c226:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c22a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c22e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800c388 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c232:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c236:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c23a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c23e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c242:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c246:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c24a:	e043      	b.n	800c2d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c24c:	697b      	ldr	r3, [r7, #20]
 800c24e:	ee07 3a90 	vmov	s15, r3
 800c252:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c256:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800c394 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800c25a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c25e:	4b48      	ldr	r3, [pc, #288]	@ (800c380 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c260:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c262:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c266:	ee07 3a90 	vmov	s15, r3
 800c26a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c26e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c272:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800c388 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c276:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c27a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c27e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c282:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c286:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c28a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c28e:	e021      	b.n	800c2d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c290:	697b      	ldr	r3, [r7, #20]
 800c292:	ee07 3a90 	vmov	s15, r3
 800c296:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c29a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800c390 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c29e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c2a2:	4b37      	ldr	r3, [pc, #220]	@ (800c380 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c2a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c2a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c2aa:	ee07 3a90 	vmov	s15, r3
 800c2ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c2b2:	ed97 6a03 	vldr	s12, [r7, #12]
 800c2b6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800c388 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c2ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c2be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c2c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c2c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c2ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c2ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c2d2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800c2d4:	4b2a      	ldr	r3, [pc, #168]	@ (800c380 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c2d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c2d8:	0a5b      	lsrs	r3, r3, #9
 800c2da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c2de:	ee07 3a90 	vmov	s15, r3
 800c2e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c2ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c2ee:	edd7 6a07 	vldr	s13, [r7, #28]
 800c2f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c2f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c2fa:	ee17 2a90 	vmov	r2, s15
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800c302:	4b1f      	ldr	r3, [pc, #124]	@ (800c380 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c304:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c306:	0c1b      	lsrs	r3, r3, #16
 800c308:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c30c:	ee07 3a90 	vmov	s15, r3
 800c310:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c314:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c318:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c31c:	edd7 6a07 	vldr	s13, [r7, #28]
 800c320:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c324:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c328:	ee17 2a90 	vmov	r2, s15
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800c330:	4b13      	ldr	r3, [pc, #76]	@ (800c380 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c332:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c334:	0e1b      	lsrs	r3, r3, #24
 800c336:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c33a:	ee07 3a90 	vmov	s15, r3
 800c33e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c342:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c346:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c34a:	edd7 6a07 	vldr	s13, [r7, #28]
 800c34e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c352:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c356:	ee17 2a90 	vmov	r2, s15
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c35e:	e008      	b.n	800c372 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	2200      	movs	r2, #0
 800c364:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	2200      	movs	r2, #0
 800c36a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	2200      	movs	r2, #0
 800c370:	609a      	str	r2, [r3, #8]
}
 800c372:	bf00      	nop
 800c374:	3724      	adds	r7, #36	@ 0x24
 800c376:	46bd      	mov	sp, r7
 800c378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c37c:	4770      	bx	lr
 800c37e:	bf00      	nop
 800c380:	58024400 	.word	0x58024400
 800c384:	03d09000 	.word	0x03d09000
 800c388:	46000000 	.word	0x46000000
 800c38c:	4c742400 	.word	0x4c742400
 800c390:	4a742400 	.word	0x4a742400
 800c394:	4af42400 	.word	0x4af42400

0800c398 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800c398:	b480      	push	{r7}
 800c39a:	b089      	sub	sp, #36	@ 0x24
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c3a0:	4ba1      	ldr	r3, [pc, #644]	@ (800c628 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c3a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c3a4:	f003 0303 	and.w	r3, r3, #3
 800c3a8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800c3aa:	4b9f      	ldr	r3, [pc, #636]	@ (800c628 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c3ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c3ae:	0d1b      	lsrs	r3, r3, #20
 800c3b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c3b4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c3b6:	4b9c      	ldr	r3, [pc, #624]	@ (800c628 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c3b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3ba:	0a1b      	lsrs	r3, r3, #8
 800c3bc:	f003 0301 	and.w	r3, r3, #1
 800c3c0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800c3c2:	4b99      	ldr	r3, [pc, #612]	@ (800c628 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c3c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c3c6:	08db      	lsrs	r3, r3, #3
 800c3c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c3cc:	693a      	ldr	r2, [r7, #16]
 800c3ce:	fb02 f303 	mul.w	r3, r2, r3
 800c3d2:	ee07 3a90 	vmov	s15, r3
 800c3d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c3da:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800c3de:	697b      	ldr	r3, [r7, #20]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	f000 8111 	beq.w	800c608 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800c3e6:	69bb      	ldr	r3, [r7, #24]
 800c3e8:	2b02      	cmp	r3, #2
 800c3ea:	f000 8083 	beq.w	800c4f4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800c3ee:	69bb      	ldr	r3, [r7, #24]
 800c3f0:	2b02      	cmp	r3, #2
 800c3f2:	f200 80a1 	bhi.w	800c538 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800c3f6:	69bb      	ldr	r3, [r7, #24]
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d003      	beq.n	800c404 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800c3fc:	69bb      	ldr	r3, [r7, #24]
 800c3fe:	2b01      	cmp	r3, #1
 800c400:	d056      	beq.n	800c4b0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800c402:	e099      	b.n	800c538 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c404:	4b88      	ldr	r3, [pc, #544]	@ (800c628 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	f003 0320 	and.w	r3, r3, #32
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d02d      	beq.n	800c46c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c410:	4b85      	ldr	r3, [pc, #532]	@ (800c628 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	08db      	lsrs	r3, r3, #3
 800c416:	f003 0303 	and.w	r3, r3, #3
 800c41a:	4a84      	ldr	r2, [pc, #528]	@ (800c62c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800c41c:	fa22 f303 	lsr.w	r3, r2, r3
 800c420:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c422:	68bb      	ldr	r3, [r7, #8]
 800c424:	ee07 3a90 	vmov	s15, r3
 800c428:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c42c:	697b      	ldr	r3, [r7, #20]
 800c42e:	ee07 3a90 	vmov	s15, r3
 800c432:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c436:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c43a:	4b7b      	ldr	r3, [pc, #492]	@ (800c628 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c43c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c43e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c442:	ee07 3a90 	vmov	s15, r3
 800c446:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c44a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c44e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800c630 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c452:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c456:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c45a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c45e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c462:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c466:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c46a:	e087      	b.n	800c57c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c46c:	697b      	ldr	r3, [r7, #20]
 800c46e:	ee07 3a90 	vmov	s15, r3
 800c472:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c476:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800c634 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800c47a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c47e:	4b6a      	ldr	r3, [pc, #424]	@ (800c628 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c482:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c486:	ee07 3a90 	vmov	s15, r3
 800c48a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c48e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c492:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800c630 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c496:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c49a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c49e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c4a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c4a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c4aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c4ae:	e065      	b.n	800c57c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c4b0:	697b      	ldr	r3, [r7, #20]
 800c4b2:	ee07 3a90 	vmov	s15, r3
 800c4b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c4ba:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800c638 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c4be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c4c2:	4b59      	ldr	r3, [pc, #356]	@ (800c628 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c4c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c4c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c4ca:	ee07 3a90 	vmov	s15, r3
 800c4ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c4d2:	ed97 6a03 	vldr	s12, [r7, #12]
 800c4d6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800c630 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c4da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c4de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c4e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c4e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c4ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c4ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c4f2:	e043      	b.n	800c57c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c4f4:	697b      	ldr	r3, [r7, #20]
 800c4f6:	ee07 3a90 	vmov	s15, r3
 800c4fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c4fe:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800c63c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800c502:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c506:	4b48      	ldr	r3, [pc, #288]	@ (800c628 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c50a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c50e:	ee07 3a90 	vmov	s15, r3
 800c512:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c516:	ed97 6a03 	vldr	s12, [r7, #12]
 800c51a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800c630 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c51e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c522:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c526:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c52a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c52e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c532:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c536:	e021      	b.n	800c57c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c538:	697b      	ldr	r3, [r7, #20]
 800c53a:	ee07 3a90 	vmov	s15, r3
 800c53e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c542:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800c638 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c546:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c54a:	4b37      	ldr	r3, [pc, #220]	@ (800c628 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c54c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c54e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c552:	ee07 3a90 	vmov	s15, r3
 800c556:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c55a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c55e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800c630 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c562:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c566:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c56a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c56e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c572:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c576:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c57a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800c57c:	4b2a      	ldr	r3, [pc, #168]	@ (800c628 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c57e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c580:	0a5b      	lsrs	r3, r3, #9
 800c582:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c586:	ee07 3a90 	vmov	s15, r3
 800c58a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c58e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c592:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c596:	edd7 6a07 	vldr	s13, [r7, #28]
 800c59a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c59e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c5a2:	ee17 2a90 	vmov	r2, s15
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800c5aa:	4b1f      	ldr	r3, [pc, #124]	@ (800c628 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c5ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c5ae:	0c1b      	lsrs	r3, r3, #16
 800c5b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c5b4:	ee07 3a90 	vmov	s15, r3
 800c5b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c5bc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c5c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c5c4:	edd7 6a07 	vldr	s13, [r7, #28]
 800c5c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c5cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c5d0:	ee17 2a90 	vmov	r2, s15
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800c5d8:	4b13      	ldr	r3, [pc, #76]	@ (800c628 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c5da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c5dc:	0e1b      	lsrs	r3, r3, #24
 800c5de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c5e2:	ee07 3a90 	vmov	s15, r3
 800c5e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c5ea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c5ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c5f2:	edd7 6a07 	vldr	s13, [r7, #28]
 800c5f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c5fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c5fe:	ee17 2a90 	vmov	r2, s15
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c606:	e008      	b.n	800c61a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	2200      	movs	r2, #0
 800c60c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	2200      	movs	r2, #0
 800c612:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	2200      	movs	r2, #0
 800c618:	609a      	str	r2, [r3, #8]
}
 800c61a:	bf00      	nop
 800c61c:	3724      	adds	r7, #36	@ 0x24
 800c61e:	46bd      	mov	sp, r7
 800c620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c624:	4770      	bx	lr
 800c626:	bf00      	nop
 800c628:	58024400 	.word	0x58024400
 800c62c:	03d09000 	.word	0x03d09000
 800c630:	46000000 	.word	0x46000000
 800c634:	4c742400 	.word	0x4c742400
 800c638:	4a742400 	.word	0x4a742400
 800c63c:	4af42400 	.word	0x4af42400

0800c640 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800c640:	b480      	push	{r7}
 800c642:	b089      	sub	sp, #36	@ 0x24
 800c644:	af00      	add	r7, sp, #0
 800c646:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c648:	4ba0      	ldr	r3, [pc, #640]	@ (800c8cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c64a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c64c:	f003 0303 	and.w	r3, r3, #3
 800c650:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800c652:	4b9e      	ldr	r3, [pc, #632]	@ (800c8cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c654:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c656:	091b      	lsrs	r3, r3, #4
 800c658:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c65c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800c65e:	4b9b      	ldr	r3, [pc, #620]	@ (800c8cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c660:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c662:	f003 0301 	and.w	r3, r3, #1
 800c666:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c668:	4b98      	ldr	r3, [pc, #608]	@ (800c8cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c66a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c66c:	08db      	lsrs	r3, r3, #3
 800c66e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c672:	693a      	ldr	r2, [r7, #16]
 800c674:	fb02 f303 	mul.w	r3, r2, r3
 800c678:	ee07 3a90 	vmov	s15, r3
 800c67c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c680:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800c684:	697b      	ldr	r3, [r7, #20]
 800c686:	2b00      	cmp	r3, #0
 800c688:	f000 8111 	beq.w	800c8ae <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800c68c:	69bb      	ldr	r3, [r7, #24]
 800c68e:	2b02      	cmp	r3, #2
 800c690:	f000 8083 	beq.w	800c79a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800c694:	69bb      	ldr	r3, [r7, #24]
 800c696:	2b02      	cmp	r3, #2
 800c698:	f200 80a1 	bhi.w	800c7de <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800c69c:	69bb      	ldr	r3, [r7, #24]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d003      	beq.n	800c6aa <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800c6a2:	69bb      	ldr	r3, [r7, #24]
 800c6a4:	2b01      	cmp	r3, #1
 800c6a6:	d056      	beq.n	800c756 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800c6a8:	e099      	b.n	800c7de <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c6aa:	4b88      	ldr	r3, [pc, #544]	@ (800c8cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	f003 0320 	and.w	r3, r3, #32
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d02d      	beq.n	800c712 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c6b6:	4b85      	ldr	r3, [pc, #532]	@ (800c8cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	08db      	lsrs	r3, r3, #3
 800c6bc:	f003 0303 	and.w	r3, r3, #3
 800c6c0:	4a83      	ldr	r2, [pc, #524]	@ (800c8d0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800c6c2:	fa22 f303 	lsr.w	r3, r2, r3
 800c6c6:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c6c8:	68bb      	ldr	r3, [r7, #8]
 800c6ca:	ee07 3a90 	vmov	s15, r3
 800c6ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c6d2:	697b      	ldr	r3, [r7, #20]
 800c6d4:	ee07 3a90 	vmov	s15, r3
 800c6d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c6dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c6e0:	4b7a      	ldr	r3, [pc, #488]	@ (800c8cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c6e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c6e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c6e8:	ee07 3a90 	vmov	s15, r3
 800c6ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c6f0:	ed97 6a03 	vldr	s12, [r7, #12]
 800c6f4:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800c8d4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c6f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c6fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c700:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c704:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c708:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c70c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c710:	e087      	b.n	800c822 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c712:	697b      	ldr	r3, [r7, #20]
 800c714:	ee07 3a90 	vmov	s15, r3
 800c718:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c71c:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800c8d8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c720:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c724:	4b69      	ldr	r3, [pc, #420]	@ (800c8cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c726:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c728:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c72c:	ee07 3a90 	vmov	s15, r3
 800c730:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c734:	ed97 6a03 	vldr	s12, [r7, #12]
 800c738:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800c8d4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c73c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c740:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c744:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c748:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c74c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c750:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c754:	e065      	b.n	800c822 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c756:	697b      	ldr	r3, [r7, #20]
 800c758:	ee07 3a90 	vmov	s15, r3
 800c75c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c760:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800c8dc <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800c764:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c768:	4b58      	ldr	r3, [pc, #352]	@ (800c8cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c76a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c76c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c770:	ee07 3a90 	vmov	s15, r3
 800c774:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c778:	ed97 6a03 	vldr	s12, [r7, #12]
 800c77c:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800c8d4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c780:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c784:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c788:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c78c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c790:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c794:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c798:	e043      	b.n	800c822 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c79a:	697b      	ldr	r3, [r7, #20]
 800c79c:	ee07 3a90 	vmov	s15, r3
 800c7a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7a4:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800c8e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800c7a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c7ac:	4b47      	ldr	r3, [pc, #284]	@ (800c8cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c7ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c7b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7b4:	ee07 3a90 	vmov	s15, r3
 800c7b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c7bc:	ed97 6a03 	vldr	s12, [r7, #12]
 800c7c0:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800c8d4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c7c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c7c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c7cc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c7d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c7d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c7d8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c7dc:	e021      	b.n	800c822 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c7de:	697b      	ldr	r3, [r7, #20]
 800c7e0:	ee07 3a90 	vmov	s15, r3
 800c7e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7e8:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800c8d8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c7ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c7f0:	4b36      	ldr	r3, [pc, #216]	@ (800c8cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c7f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c7f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7f8:	ee07 3a90 	vmov	s15, r3
 800c7fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c800:	ed97 6a03 	vldr	s12, [r7, #12]
 800c804:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800c8d4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c808:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c80c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c810:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c814:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c818:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c81c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c820:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800c822:	4b2a      	ldr	r3, [pc, #168]	@ (800c8cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c826:	0a5b      	lsrs	r3, r3, #9
 800c828:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c82c:	ee07 3a90 	vmov	s15, r3
 800c830:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c834:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c838:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c83c:	edd7 6a07 	vldr	s13, [r7, #28]
 800c840:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c844:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c848:	ee17 2a90 	vmov	r2, s15
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800c850:	4b1e      	ldr	r3, [pc, #120]	@ (800c8cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c852:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c854:	0c1b      	lsrs	r3, r3, #16
 800c856:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c85a:	ee07 3a90 	vmov	s15, r3
 800c85e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c862:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c866:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c86a:	edd7 6a07 	vldr	s13, [r7, #28]
 800c86e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c872:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c876:	ee17 2a90 	vmov	r2, s15
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800c87e:	4b13      	ldr	r3, [pc, #76]	@ (800c8cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c882:	0e1b      	lsrs	r3, r3, #24
 800c884:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c888:	ee07 3a90 	vmov	s15, r3
 800c88c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c890:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c894:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c898:	edd7 6a07 	vldr	s13, [r7, #28]
 800c89c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c8a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c8a4:	ee17 2a90 	vmov	r2, s15
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800c8ac:	e008      	b.n	800c8c0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	2200      	movs	r2, #0
 800c8b2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	2200      	movs	r2, #0
 800c8b8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	2200      	movs	r2, #0
 800c8be:	609a      	str	r2, [r3, #8]
}
 800c8c0:	bf00      	nop
 800c8c2:	3724      	adds	r7, #36	@ 0x24
 800c8c4:	46bd      	mov	sp, r7
 800c8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ca:	4770      	bx	lr
 800c8cc:	58024400 	.word	0x58024400
 800c8d0:	03d09000 	.word	0x03d09000
 800c8d4:	46000000 	.word	0x46000000
 800c8d8:	4c742400 	.word	0x4c742400
 800c8dc:	4a742400 	.word	0x4a742400
 800c8e0:	4af42400 	.word	0x4af42400

0800c8e4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	b084      	sub	sp, #16
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
 800c8ec:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c8f2:	4b53      	ldr	r3, [pc, #332]	@ (800ca40 <RCCEx_PLL2_Config+0x15c>)
 800c8f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c8f6:	f003 0303 	and.w	r3, r3, #3
 800c8fa:	2b03      	cmp	r3, #3
 800c8fc:	d101      	bne.n	800c902 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c8fe:	2301      	movs	r3, #1
 800c900:	e099      	b.n	800ca36 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c902:	4b4f      	ldr	r3, [pc, #316]	@ (800ca40 <RCCEx_PLL2_Config+0x15c>)
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	4a4e      	ldr	r2, [pc, #312]	@ (800ca40 <RCCEx_PLL2_Config+0x15c>)
 800c908:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c90c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c90e:	f7f5 fe23 	bl	8002558 <HAL_GetTick>
 800c912:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c914:	e008      	b.n	800c928 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c916:	f7f5 fe1f 	bl	8002558 <HAL_GetTick>
 800c91a:	4602      	mov	r2, r0
 800c91c:	68bb      	ldr	r3, [r7, #8]
 800c91e:	1ad3      	subs	r3, r2, r3
 800c920:	2b02      	cmp	r3, #2
 800c922:	d901      	bls.n	800c928 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c924:	2303      	movs	r3, #3
 800c926:	e086      	b.n	800ca36 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c928:	4b45      	ldr	r3, [pc, #276]	@ (800ca40 <RCCEx_PLL2_Config+0x15c>)
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c930:	2b00      	cmp	r3, #0
 800c932:	d1f0      	bne.n	800c916 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c934:	4b42      	ldr	r3, [pc, #264]	@ (800ca40 <RCCEx_PLL2_Config+0x15c>)
 800c936:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c938:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	031b      	lsls	r3, r3, #12
 800c942:	493f      	ldr	r1, [pc, #252]	@ (800ca40 <RCCEx_PLL2_Config+0x15c>)
 800c944:	4313      	orrs	r3, r2
 800c946:	628b      	str	r3, [r1, #40]	@ 0x28
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	685b      	ldr	r3, [r3, #4]
 800c94c:	3b01      	subs	r3, #1
 800c94e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	689b      	ldr	r3, [r3, #8]
 800c956:	3b01      	subs	r3, #1
 800c958:	025b      	lsls	r3, r3, #9
 800c95a:	b29b      	uxth	r3, r3
 800c95c:	431a      	orrs	r2, r3
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	68db      	ldr	r3, [r3, #12]
 800c962:	3b01      	subs	r3, #1
 800c964:	041b      	lsls	r3, r3, #16
 800c966:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800c96a:	431a      	orrs	r2, r3
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	691b      	ldr	r3, [r3, #16]
 800c970:	3b01      	subs	r3, #1
 800c972:	061b      	lsls	r3, r3, #24
 800c974:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800c978:	4931      	ldr	r1, [pc, #196]	@ (800ca40 <RCCEx_PLL2_Config+0x15c>)
 800c97a:	4313      	orrs	r3, r2
 800c97c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c97e:	4b30      	ldr	r3, [pc, #192]	@ (800ca40 <RCCEx_PLL2_Config+0x15c>)
 800c980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c982:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	695b      	ldr	r3, [r3, #20]
 800c98a:	492d      	ldr	r1, [pc, #180]	@ (800ca40 <RCCEx_PLL2_Config+0x15c>)
 800c98c:	4313      	orrs	r3, r2
 800c98e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c990:	4b2b      	ldr	r3, [pc, #172]	@ (800ca40 <RCCEx_PLL2_Config+0x15c>)
 800c992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c994:	f023 0220 	bic.w	r2, r3, #32
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	699b      	ldr	r3, [r3, #24]
 800c99c:	4928      	ldr	r1, [pc, #160]	@ (800ca40 <RCCEx_PLL2_Config+0x15c>)
 800c99e:	4313      	orrs	r3, r2
 800c9a0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c9a2:	4b27      	ldr	r3, [pc, #156]	@ (800ca40 <RCCEx_PLL2_Config+0x15c>)
 800c9a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9a6:	4a26      	ldr	r2, [pc, #152]	@ (800ca40 <RCCEx_PLL2_Config+0x15c>)
 800c9a8:	f023 0310 	bic.w	r3, r3, #16
 800c9ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c9ae:	4b24      	ldr	r3, [pc, #144]	@ (800ca40 <RCCEx_PLL2_Config+0x15c>)
 800c9b0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c9b2:	4b24      	ldr	r3, [pc, #144]	@ (800ca44 <RCCEx_PLL2_Config+0x160>)
 800c9b4:	4013      	ands	r3, r2
 800c9b6:	687a      	ldr	r2, [r7, #4]
 800c9b8:	69d2      	ldr	r2, [r2, #28]
 800c9ba:	00d2      	lsls	r2, r2, #3
 800c9bc:	4920      	ldr	r1, [pc, #128]	@ (800ca40 <RCCEx_PLL2_Config+0x15c>)
 800c9be:	4313      	orrs	r3, r2
 800c9c0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c9c2:	4b1f      	ldr	r3, [pc, #124]	@ (800ca40 <RCCEx_PLL2_Config+0x15c>)
 800c9c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9c6:	4a1e      	ldr	r2, [pc, #120]	@ (800ca40 <RCCEx_PLL2_Config+0x15c>)
 800c9c8:	f043 0310 	orr.w	r3, r3, #16
 800c9cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c9ce:	683b      	ldr	r3, [r7, #0]
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d106      	bne.n	800c9e2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c9d4:	4b1a      	ldr	r3, [pc, #104]	@ (800ca40 <RCCEx_PLL2_Config+0x15c>)
 800c9d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9d8:	4a19      	ldr	r2, [pc, #100]	@ (800ca40 <RCCEx_PLL2_Config+0x15c>)
 800c9da:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c9de:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c9e0:	e00f      	b.n	800ca02 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c9e2:	683b      	ldr	r3, [r7, #0]
 800c9e4:	2b01      	cmp	r3, #1
 800c9e6:	d106      	bne.n	800c9f6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c9e8:	4b15      	ldr	r3, [pc, #84]	@ (800ca40 <RCCEx_PLL2_Config+0x15c>)
 800c9ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9ec:	4a14      	ldr	r2, [pc, #80]	@ (800ca40 <RCCEx_PLL2_Config+0x15c>)
 800c9ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c9f2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c9f4:	e005      	b.n	800ca02 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c9f6:	4b12      	ldr	r3, [pc, #72]	@ (800ca40 <RCCEx_PLL2_Config+0x15c>)
 800c9f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9fa:	4a11      	ldr	r2, [pc, #68]	@ (800ca40 <RCCEx_PLL2_Config+0x15c>)
 800c9fc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ca00:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800ca02:	4b0f      	ldr	r3, [pc, #60]	@ (800ca40 <RCCEx_PLL2_Config+0x15c>)
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	4a0e      	ldr	r2, [pc, #56]	@ (800ca40 <RCCEx_PLL2_Config+0x15c>)
 800ca08:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ca0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ca0e:	f7f5 fda3 	bl	8002558 <HAL_GetTick>
 800ca12:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ca14:	e008      	b.n	800ca28 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ca16:	f7f5 fd9f 	bl	8002558 <HAL_GetTick>
 800ca1a:	4602      	mov	r2, r0
 800ca1c:	68bb      	ldr	r3, [r7, #8]
 800ca1e:	1ad3      	subs	r3, r2, r3
 800ca20:	2b02      	cmp	r3, #2
 800ca22:	d901      	bls.n	800ca28 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ca24:	2303      	movs	r3, #3
 800ca26:	e006      	b.n	800ca36 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ca28:	4b05      	ldr	r3, [pc, #20]	@ (800ca40 <RCCEx_PLL2_Config+0x15c>)
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d0f0      	beq.n	800ca16 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800ca34:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca36:	4618      	mov	r0, r3
 800ca38:	3710      	adds	r7, #16
 800ca3a:	46bd      	mov	sp, r7
 800ca3c:	bd80      	pop	{r7, pc}
 800ca3e:	bf00      	nop
 800ca40:	58024400 	.word	0x58024400
 800ca44:	ffff0007 	.word	0xffff0007

0800ca48 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800ca48:	b580      	push	{r7, lr}
 800ca4a:	b084      	sub	sp, #16
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	6078      	str	r0, [r7, #4]
 800ca50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ca52:	2300      	movs	r3, #0
 800ca54:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ca56:	4b53      	ldr	r3, [pc, #332]	@ (800cba4 <RCCEx_PLL3_Config+0x15c>)
 800ca58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca5a:	f003 0303 	and.w	r3, r3, #3
 800ca5e:	2b03      	cmp	r3, #3
 800ca60:	d101      	bne.n	800ca66 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800ca62:	2301      	movs	r3, #1
 800ca64:	e099      	b.n	800cb9a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800ca66:	4b4f      	ldr	r3, [pc, #316]	@ (800cba4 <RCCEx_PLL3_Config+0x15c>)
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	4a4e      	ldr	r2, [pc, #312]	@ (800cba4 <RCCEx_PLL3_Config+0x15c>)
 800ca6c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ca70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ca72:	f7f5 fd71 	bl	8002558 <HAL_GetTick>
 800ca76:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ca78:	e008      	b.n	800ca8c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ca7a:	f7f5 fd6d 	bl	8002558 <HAL_GetTick>
 800ca7e:	4602      	mov	r2, r0
 800ca80:	68bb      	ldr	r3, [r7, #8]
 800ca82:	1ad3      	subs	r3, r2, r3
 800ca84:	2b02      	cmp	r3, #2
 800ca86:	d901      	bls.n	800ca8c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ca88:	2303      	movs	r3, #3
 800ca8a:	e086      	b.n	800cb9a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ca8c:	4b45      	ldr	r3, [pc, #276]	@ (800cba4 <RCCEx_PLL3_Config+0x15c>)
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d1f0      	bne.n	800ca7a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800ca98:	4b42      	ldr	r3, [pc, #264]	@ (800cba4 <RCCEx_PLL3_Config+0x15c>)
 800ca9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca9c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	051b      	lsls	r3, r3, #20
 800caa6:	493f      	ldr	r1, [pc, #252]	@ (800cba4 <RCCEx_PLL3_Config+0x15c>)
 800caa8:	4313      	orrs	r3, r2
 800caaa:	628b      	str	r3, [r1, #40]	@ 0x28
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	685b      	ldr	r3, [r3, #4]
 800cab0:	3b01      	subs	r3, #1
 800cab2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	689b      	ldr	r3, [r3, #8]
 800caba:	3b01      	subs	r3, #1
 800cabc:	025b      	lsls	r3, r3, #9
 800cabe:	b29b      	uxth	r3, r3
 800cac0:	431a      	orrs	r2, r3
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	68db      	ldr	r3, [r3, #12]
 800cac6:	3b01      	subs	r3, #1
 800cac8:	041b      	lsls	r3, r3, #16
 800caca:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800cace:	431a      	orrs	r2, r3
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	691b      	ldr	r3, [r3, #16]
 800cad4:	3b01      	subs	r3, #1
 800cad6:	061b      	lsls	r3, r3, #24
 800cad8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800cadc:	4931      	ldr	r1, [pc, #196]	@ (800cba4 <RCCEx_PLL3_Config+0x15c>)
 800cade:	4313      	orrs	r3, r2
 800cae0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800cae2:	4b30      	ldr	r3, [pc, #192]	@ (800cba4 <RCCEx_PLL3_Config+0x15c>)
 800cae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cae6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	695b      	ldr	r3, [r3, #20]
 800caee:	492d      	ldr	r1, [pc, #180]	@ (800cba4 <RCCEx_PLL3_Config+0x15c>)
 800caf0:	4313      	orrs	r3, r2
 800caf2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800caf4:	4b2b      	ldr	r3, [pc, #172]	@ (800cba4 <RCCEx_PLL3_Config+0x15c>)
 800caf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800caf8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	699b      	ldr	r3, [r3, #24]
 800cb00:	4928      	ldr	r1, [pc, #160]	@ (800cba4 <RCCEx_PLL3_Config+0x15c>)
 800cb02:	4313      	orrs	r3, r2
 800cb04:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800cb06:	4b27      	ldr	r3, [pc, #156]	@ (800cba4 <RCCEx_PLL3_Config+0x15c>)
 800cb08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb0a:	4a26      	ldr	r2, [pc, #152]	@ (800cba4 <RCCEx_PLL3_Config+0x15c>)
 800cb0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cb10:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800cb12:	4b24      	ldr	r3, [pc, #144]	@ (800cba4 <RCCEx_PLL3_Config+0x15c>)
 800cb14:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cb16:	4b24      	ldr	r3, [pc, #144]	@ (800cba8 <RCCEx_PLL3_Config+0x160>)
 800cb18:	4013      	ands	r3, r2
 800cb1a:	687a      	ldr	r2, [r7, #4]
 800cb1c:	69d2      	ldr	r2, [r2, #28]
 800cb1e:	00d2      	lsls	r2, r2, #3
 800cb20:	4920      	ldr	r1, [pc, #128]	@ (800cba4 <RCCEx_PLL3_Config+0x15c>)
 800cb22:	4313      	orrs	r3, r2
 800cb24:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800cb26:	4b1f      	ldr	r3, [pc, #124]	@ (800cba4 <RCCEx_PLL3_Config+0x15c>)
 800cb28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb2a:	4a1e      	ldr	r2, [pc, #120]	@ (800cba4 <RCCEx_PLL3_Config+0x15c>)
 800cb2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800cb30:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800cb32:	683b      	ldr	r3, [r7, #0]
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d106      	bne.n	800cb46 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800cb38:	4b1a      	ldr	r3, [pc, #104]	@ (800cba4 <RCCEx_PLL3_Config+0x15c>)
 800cb3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb3c:	4a19      	ldr	r2, [pc, #100]	@ (800cba4 <RCCEx_PLL3_Config+0x15c>)
 800cb3e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800cb42:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800cb44:	e00f      	b.n	800cb66 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800cb46:	683b      	ldr	r3, [r7, #0]
 800cb48:	2b01      	cmp	r3, #1
 800cb4a:	d106      	bne.n	800cb5a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800cb4c:	4b15      	ldr	r3, [pc, #84]	@ (800cba4 <RCCEx_PLL3_Config+0x15c>)
 800cb4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb50:	4a14      	ldr	r2, [pc, #80]	@ (800cba4 <RCCEx_PLL3_Config+0x15c>)
 800cb52:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800cb56:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800cb58:	e005      	b.n	800cb66 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800cb5a:	4b12      	ldr	r3, [pc, #72]	@ (800cba4 <RCCEx_PLL3_Config+0x15c>)
 800cb5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb5e:	4a11      	ldr	r2, [pc, #68]	@ (800cba4 <RCCEx_PLL3_Config+0x15c>)
 800cb60:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800cb64:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800cb66:	4b0f      	ldr	r3, [pc, #60]	@ (800cba4 <RCCEx_PLL3_Config+0x15c>)
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	4a0e      	ldr	r2, [pc, #56]	@ (800cba4 <RCCEx_PLL3_Config+0x15c>)
 800cb6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800cb70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cb72:	f7f5 fcf1 	bl	8002558 <HAL_GetTick>
 800cb76:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cb78:	e008      	b.n	800cb8c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800cb7a:	f7f5 fced 	bl	8002558 <HAL_GetTick>
 800cb7e:	4602      	mov	r2, r0
 800cb80:	68bb      	ldr	r3, [r7, #8]
 800cb82:	1ad3      	subs	r3, r2, r3
 800cb84:	2b02      	cmp	r3, #2
 800cb86:	d901      	bls.n	800cb8c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800cb88:	2303      	movs	r3, #3
 800cb8a:	e006      	b.n	800cb9a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cb8c:	4b05      	ldr	r3, [pc, #20]	@ (800cba4 <RCCEx_PLL3_Config+0x15c>)
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d0f0      	beq.n	800cb7a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800cb98:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	3710      	adds	r7, #16
 800cb9e:	46bd      	mov	sp, r7
 800cba0:	bd80      	pop	{r7, pc}
 800cba2:	bf00      	nop
 800cba4:	58024400 	.word	0x58024400
 800cba8:	ffff0007 	.word	0xffff0007

0800cbac <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800cbac:	b580      	push	{r7, lr}
 800cbae:	b084      	sub	sp, #16
 800cbb0:	af00      	add	r7, sp, #0
 800cbb2:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d101      	bne.n	800cbbe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800cbba:	2301      	movs	r3, #1
 800cbbc:	e10f      	b.n	800cdde <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	2200      	movs	r2, #0
 800cbc2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	4a87      	ldr	r2, [pc, #540]	@ (800cde8 <HAL_SPI_Init+0x23c>)
 800cbca:	4293      	cmp	r3, r2
 800cbcc:	d00f      	beq.n	800cbee <HAL_SPI_Init+0x42>
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	4a86      	ldr	r2, [pc, #536]	@ (800cdec <HAL_SPI_Init+0x240>)
 800cbd4:	4293      	cmp	r3, r2
 800cbd6:	d00a      	beq.n	800cbee <HAL_SPI_Init+0x42>
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	4a84      	ldr	r2, [pc, #528]	@ (800cdf0 <HAL_SPI_Init+0x244>)
 800cbde:	4293      	cmp	r3, r2
 800cbe0:	d005      	beq.n	800cbee <HAL_SPI_Init+0x42>
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	68db      	ldr	r3, [r3, #12]
 800cbe6:	2b0f      	cmp	r3, #15
 800cbe8:	d901      	bls.n	800cbee <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800cbea:	2301      	movs	r3, #1
 800cbec:	e0f7      	b.n	800cdde <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800cbee:	6878      	ldr	r0, [r7, #4]
 800cbf0:	f000 fbba 	bl	800d368 <SPI_GetPacketSize>
 800cbf4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	4a7b      	ldr	r2, [pc, #492]	@ (800cde8 <HAL_SPI_Init+0x23c>)
 800cbfc:	4293      	cmp	r3, r2
 800cbfe:	d00c      	beq.n	800cc1a <HAL_SPI_Init+0x6e>
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	4a79      	ldr	r2, [pc, #484]	@ (800cdec <HAL_SPI_Init+0x240>)
 800cc06:	4293      	cmp	r3, r2
 800cc08:	d007      	beq.n	800cc1a <HAL_SPI_Init+0x6e>
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	4a78      	ldr	r2, [pc, #480]	@ (800cdf0 <HAL_SPI_Init+0x244>)
 800cc10:	4293      	cmp	r3, r2
 800cc12:	d002      	beq.n	800cc1a <HAL_SPI_Init+0x6e>
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	2b08      	cmp	r3, #8
 800cc18:	d811      	bhi.n	800cc3e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800cc1e:	4a72      	ldr	r2, [pc, #456]	@ (800cde8 <HAL_SPI_Init+0x23c>)
 800cc20:	4293      	cmp	r3, r2
 800cc22:	d009      	beq.n	800cc38 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	4a70      	ldr	r2, [pc, #448]	@ (800cdec <HAL_SPI_Init+0x240>)
 800cc2a:	4293      	cmp	r3, r2
 800cc2c:	d004      	beq.n	800cc38 <HAL_SPI_Init+0x8c>
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	4a6f      	ldr	r2, [pc, #444]	@ (800cdf0 <HAL_SPI_Init+0x244>)
 800cc34:	4293      	cmp	r3, r2
 800cc36:	d104      	bne.n	800cc42 <HAL_SPI_Init+0x96>
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	2b10      	cmp	r3, #16
 800cc3c:	d901      	bls.n	800cc42 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800cc3e:	2301      	movs	r3, #1
 800cc40:	e0cd      	b.n	800cdde <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800cc48:	b2db      	uxtb	r3, r3
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d106      	bne.n	800cc5c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	2200      	movs	r2, #0
 800cc52:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800cc56:	6878      	ldr	r0, [r7, #4]
 800cc58:	f7f4 ff8e 	bl	8001b78 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	2202      	movs	r2, #2
 800cc60:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	681a      	ldr	r2, [r3, #0]
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	f022 0201 	bic.w	r2, r2, #1
 800cc72:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	689b      	ldr	r3, [r3, #8]
 800cc7a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800cc7e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	699b      	ldr	r3, [r3, #24]
 800cc84:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800cc88:	d119      	bne.n	800ccbe <HAL_SPI_Init+0x112>
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	685b      	ldr	r3, [r3, #4]
 800cc8e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800cc92:	d103      	bne.n	800cc9c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d008      	beq.n	800ccae <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d10c      	bne.n	800ccbe <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800cca8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ccac:	d107      	bne.n	800ccbe <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	681a      	ldr	r2, [r3, #0]
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800ccbc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	685b      	ldr	r3, [r3, #4]
 800ccc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d00f      	beq.n	800ccea <HAL_SPI_Init+0x13e>
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	68db      	ldr	r3, [r3, #12]
 800ccce:	2b06      	cmp	r3, #6
 800ccd0:	d90b      	bls.n	800ccea <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	430a      	orrs	r2, r1
 800cce6:	601a      	str	r2, [r3, #0]
 800cce8:	e007      	b.n	800ccfa <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	681a      	ldr	r2, [r3, #0]
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800ccf8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	69da      	ldr	r2, [r3, #28]
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd02:	431a      	orrs	r2, r3
 800cd04:	68bb      	ldr	r3, [r7, #8]
 800cd06:	431a      	orrs	r2, r3
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cd0c:	ea42 0103 	orr.w	r1, r2, r3
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	68da      	ldr	r2, [r3, #12]
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	430a      	orrs	r2, r1
 800cd1a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd24:	431a      	orrs	r2, r3
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cd2a:	431a      	orrs	r2, r3
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	699b      	ldr	r3, [r3, #24]
 800cd30:	431a      	orrs	r2, r3
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	691b      	ldr	r3, [r3, #16]
 800cd36:	431a      	orrs	r2, r3
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	695b      	ldr	r3, [r3, #20]
 800cd3c:	431a      	orrs	r2, r3
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	6a1b      	ldr	r3, [r3, #32]
 800cd42:	431a      	orrs	r2, r3
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	685b      	ldr	r3, [r3, #4]
 800cd48:	431a      	orrs	r2, r3
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cd4e:	431a      	orrs	r2, r3
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	689b      	ldr	r3, [r3, #8]
 800cd54:	431a      	orrs	r2, r3
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cd5a:	ea42 0103 	orr.w	r1, r2, r3
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	430a      	orrs	r2, r1
 800cd68:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	685b      	ldr	r3, [r3, #4]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d113      	bne.n	800cd9a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	689b      	ldr	r3, [r3, #8]
 800cd78:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800cd84:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	689b      	ldr	r3, [r3, #8]
 800cd8c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800cd98:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	f022 0201 	bic.w	r2, r2, #1
 800cda8:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	685b      	ldr	r3, [r3, #4]
 800cdae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d00a      	beq.n	800cdcc <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	68db      	ldr	r3, [r3, #12]
 800cdbc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	430a      	orrs	r2, r1
 800cdca:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	2200      	movs	r2, #0
 800cdd0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	2201      	movs	r2, #1
 800cdd8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800cddc:	2300      	movs	r3, #0
}
 800cdde:	4618      	mov	r0, r3
 800cde0:	3710      	adds	r7, #16
 800cde2:	46bd      	mov	sp, r7
 800cde4:	bd80      	pop	{r7, pc}
 800cde6:	bf00      	nop
 800cde8:	40013000 	.word	0x40013000
 800cdec:	40003800 	.word	0x40003800
 800cdf0:	40003c00 	.word	0x40003c00

0800cdf4 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800cdf4:	b580      	push	{r7, lr}
 800cdf6:	b08a      	sub	sp, #40	@ 0x28
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	691b      	ldr	r3, [r3, #16]
 800ce02:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	695b      	ldr	r3, [r3, #20]
 800ce0a:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800ce0c:	6a3a      	ldr	r2, [r7, #32]
 800ce0e:	69fb      	ldr	r3, [r7, #28]
 800ce10:	4013      	ands	r3, r2
 800ce12:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	689b      	ldr	r3, [r3, #8]
 800ce1a:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800ce1c:	2300      	movs	r3, #0
 800ce1e:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800ce26:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	3330      	adds	r3, #48	@ 0x30
 800ce2e:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800ce30:	69fb      	ldr	r3, [r7, #28]
 800ce32:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d010      	beq.n	800ce5c <HAL_SPI_IRQHandler+0x68>
 800ce3a:	6a3b      	ldr	r3, [r7, #32]
 800ce3c:	f003 0308 	and.w	r3, r3, #8
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d00b      	beq.n	800ce5c <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	699a      	ldr	r2, [r3, #24]
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ce52:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 800ce54:	6878      	ldr	r0, [r7, #4]
 800ce56:	f000 f9c3 	bl	800d1e0 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 800ce5a:	e192      	b.n	800d182 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800ce5c:	69bb      	ldr	r3, [r7, #24]
 800ce5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d113      	bne.n	800ce8e <HAL_SPI_IRQHandler+0x9a>
 800ce66:	69bb      	ldr	r3, [r7, #24]
 800ce68:	f003 0320 	and.w	r3, r3, #32
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d10e      	bne.n	800ce8e <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800ce70:	69bb      	ldr	r3, [r7, #24]
 800ce72:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d009      	beq.n	800ce8e <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ce7e:	6878      	ldr	r0, [r7, #4]
 800ce80:	4798      	blx	r3
    hspi->RxISR(hspi);
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ce86:	6878      	ldr	r0, [r7, #4]
 800ce88:	4798      	blx	r3
    handled = 1UL;
 800ce8a:	2301      	movs	r3, #1
 800ce8c:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800ce8e:	69bb      	ldr	r3, [r7, #24]
 800ce90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d10f      	bne.n	800ceb8 <HAL_SPI_IRQHandler+0xc4>
 800ce98:	69bb      	ldr	r3, [r7, #24]
 800ce9a:	f003 0301 	and.w	r3, r3, #1
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d00a      	beq.n	800ceb8 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800cea2:	69bb      	ldr	r3, [r7, #24]
 800cea4:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d105      	bne.n	800ceb8 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ceb0:	6878      	ldr	r0, [r7, #4]
 800ceb2:	4798      	blx	r3
    handled = 1UL;
 800ceb4:	2301      	movs	r3, #1
 800ceb6:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800ceb8:	69bb      	ldr	r3, [r7, #24]
 800ceba:	f003 0320 	and.w	r3, r3, #32
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d10f      	bne.n	800cee2 <HAL_SPI_IRQHandler+0xee>
 800cec2:	69bb      	ldr	r3, [r7, #24]
 800cec4:	f003 0302 	and.w	r3, r3, #2
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d00a      	beq.n	800cee2 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800cecc:	69bb      	ldr	r3, [r7, #24]
 800cece:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d105      	bne.n	800cee2 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ceda:	6878      	ldr	r0, [r7, #4]
 800cedc:	4798      	blx	r3
    handled = 1UL;
 800cede:	2301      	movs	r3, #1
 800cee0:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800cee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	f040 8147 	bne.w	800d178 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800ceea:	69bb      	ldr	r3, [r7, #24]
 800ceec:	f003 0308 	and.w	r3, r3, #8
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	f000 808b 	beq.w	800d00c <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	699a      	ldr	r2, [r3, #24]
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	f042 0208 	orr.w	r2, r2, #8
 800cf04:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	699a      	ldr	r2, [r3, #24]
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	f042 0210 	orr.w	r2, r2, #16
 800cf14:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	699a      	ldr	r2, [r3, #24]
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800cf24:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	691a      	ldr	r2, [r3, #16]
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	f022 0208 	bic.w	r2, r2, #8
 800cf34:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	689b      	ldr	r3, [r3, #8]
 800cf3c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d13d      	bne.n	800cfc0 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 800cf44:	e036      	b.n	800cfb4 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	68db      	ldr	r3, [r3, #12]
 800cf4a:	2b0f      	cmp	r3, #15
 800cf4c:	d90b      	bls.n	800cf66 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	681a      	ldr	r2, [r3, #0]
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cf56:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800cf58:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cf5e:	1d1a      	adds	r2, r3, #4
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	665a      	str	r2, [r3, #100]	@ 0x64
 800cf64:	e01d      	b.n	800cfa2 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	68db      	ldr	r3, [r3, #12]
 800cf6a:	2b07      	cmp	r3, #7
 800cf6c:	d90b      	bls.n	800cf86 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cf72:	68fa      	ldr	r2, [r7, #12]
 800cf74:	8812      	ldrh	r2, [r2, #0]
 800cf76:	b292      	uxth	r2, r2
 800cf78:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cf7e:	1c9a      	adds	r2, r3, #2
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	665a      	str	r2, [r3, #100]	@ 0x64
 800cf84:	e00d      	b.n	800cfa2 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cf92:	7812      	ldrb	r2, [r2, #0]
 800cf94:	b2d2      	uxtb	r2, r2
 800cf96:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cf9c:	1c5a      	adds	r2, r3, #1
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cfa8:	b29b      	uxth	r3, r3
 800cfaa:	3b01      	subs	r3, #1
 800cfac:	b29a      	uxth	r2, r3
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cfba:	b29b      	uxth	r3, r3
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d1c2      	bne.n	800cf46 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 800cfc0:	6878      	ldr	r0, [r7, #4]
 800cfc2:	f000 f931 	bl	800d228 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	2201      	movs	r2, #1
 800cfca:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d003      	beq.n	800cfe0 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800cfd8:	6878      	ldr	r0, [r7, #4]
 800cfda:	f000 f8f7 	bl	800d1cc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800cfde:	e0d0      	b.n	800d182 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800cfe0:	7cfb      	ldrb	r3, [r7, #19]
 800cfe2:	2b05      	cmp	r3, #5
 800cfe4:	d103      	bne.n	800cfee <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800cfe6:	6878      	ldr	r0, [r7, #4]
 800cfe8:	f000 f8e6 	bl	800d1b8 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800cfec:	e0c6      	b.n	800d17c <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800cfee:	7cfb      	ldrb	r3, [r7, #19]
 800cff0:	2b04      	cmp	r3, #4
 800cff2:	d103      	bne.n	800cffc <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 800cff4:	6878      	ldr	r0, [r7, #4]
 800cff6:	f000 f8d5 	bl	800d1a4 <HAL_SPI_RxCpltCallback>
    return;
 800cffa:	e0bf      	b.n	800d17c <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800cffc:	7cfb      	ldrb	r3, [r7, #19]
 800cffe:	2b03      	cmp	r3, #3
 800d000:	f040 80bc 	bne.w	800d17c <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 800d004:	6878      	ldr	r0, [r7, #4]
 800d006:	f000 f8c3 	bl	800d190 <HAL_SPI_TxCpltCallback>
    return;
 800d00a:	e0b7      	b.n	800d17c <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800d00c:	69bb      	ldr	r3, [r7, #24]
 800d00e:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 800d012:	2b00      	cmp	r3, #0
 800d014:	f000 80b5 	beq.w	800d182 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800d018:	69bb      	ldr	r3, [r7, #24]
 800d01a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d00f      	beq.n	800d042 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d028:	f043 0204 	orr.w	r2, r3, #4
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	699a      	ldr	r2, [r3, #24]
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d040:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800d042:	69bb      	ldr	r3, [r7, #24]
 800d044:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d00f      	beq.n	800d06c <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d052:	f043 0201 	orr.w	r2, r3, #1
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	699a      	ldr	r2, [r3, #24]
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d06a:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800d06c:	69bb      	ldr	r3, [r7, #24]
 800d06e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d072:	2b00      	cmp	r3, #0
 800d074:	d00f      	beq.n	800d096 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d07c:	f043 0208 	orr.w	r2, r3, #8
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	699a      	ldr	r2, [r3, #24]
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800d094:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800d096:	69bb      	ldr	r3, [r7, #24]
 800d098:	f003 0320 	and.w	r3, r3, #32
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d00f      	beq.n	800d0c0 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d0a6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	699a      	ldr	r2, [r3, #24]
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	f042 0220 	orr.w	r2, r2, #32
 800d0be:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d05a      	beq.n	800d180 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	681a      	ldr	r2, [r3, #0]
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	f022 0201 	bic.w	r2, r2, #1
 800d0d8:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	6919      	ldr	r1, [r3, #16]
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	681a      	ldr	r2, [r3, #0]
 800d0e4:	4b28      	ldr	r3, [pc, #160]	@ (800d188 <HAL_SPI_IRQHandler+0x394>)
 800d0e6:	400b      	ands	r3, r1
 800d0e8:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800d0ea:	697b      	ldr	r3, [r7, #20]
 800d0ec:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800d0f0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800d0f4:	d138      	bne.n	800d168 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	689a      	ldr	r2, [r3, #8]
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800d104:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d013      	beq.n	800d136 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d112:	4a1e      	ldr	r2, [pc, #120]	@ (800d18c <HAL_SPI_IRQHandler+0x398>)
 800d114:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d11a:	4618      	mov	r0, r3
 800d11c:	f7f7 fd5e 	bl	8004bdc <HAL_DMA_Abort_IT>
 800d120:	4603      	mov	r3, r0
 800d122:	2b00      	cmp	r3, #0
 800d124:	d007      	beq.n	800d136 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d12c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d020      	beq.n	800d180 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d142:	4a12      	ldr	r2, [pc, #72]	@ (800d18c <HAL_SPI_IRQHandler+0x398>)
 800d144:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d14a:	4618      	mov	r0, r3
 800d14c:	f7f7 fd46 	bl	8004bdc <HAL_DMA_Abort_IT>
 800d150:	4603      	mov	r3, r0
 800d152:	2b00      	cmp	r3, #0
 800d154:	d014      	beq.n	800d180 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d15c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800d166:	e00b      	b.n	800d180 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	2201      	movs	r2, #1
 800d16c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 800d170:	6878      	ldr	r0, [r7, #4]
 800d172:	f000 f82b 	bl	800d1cc <HAL_SPI_ErrorCallback>
    return;
 800d176:	e003      	b.n	800d180 <HAL_SPI_IRQHandler+0x38c>
    return;
 800d178:	bf00      	nop
 800d17a:	e002      	b.n	800d182 <HAL_SPI_IRQHandler+0x38e>
    return;
 800d17c:	bf00      	nop
 800d17e:	e000      	b.n	800d182 <HAL_SPI_IRQHandler+0x38e>
    return;
 800d180:	bf00      	nop
  }
}
 800d182:	3728      	adds	r7, #40	@ 0x28
 800d184:	46bd      	mov	sp, r7
 800d186:	bd80      	pop	{r7, pc}
 800d188:	fffffc94 	.word	0xfffffc94
 800d18c:	0800d1f5 	.word	0x0800d1f5

0800d190 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800d190:	b480      	push	{r7}
 800d192:	b083      	sub	sp, #12
 800d194:	af00      	add	r7, sp, #0
 800d196:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800d198:	bf00      	nop
 800d19a:	370c      	adds	r7, #12
 800d19c:	46bd      	mov	sp, r7
 800d19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a2:	4770      	bx	lr

0800d1a4 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800d1a4:	b480      	push	{r7}
 800d1a6:	b083      	sub	sp, #12
 800d1a8:	af00      	add	r7, sp, #0
 800d1aa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800d1ac:	bf00      	nop
 800d1ae:	370c      	adds	r7, #12
 800d1b0:	46bd      	mov	sp, r7
 800d1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b6:	4770      	bx	lr

0800d1b8 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800d1b8:	b480      	push	{r7}
 800d1ba:	b083      	sub	sp, #12
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800d1c0:	bf00      	nop
 800d1c2:	370c      	adds	r7, #12
 800d1c4:	46bd      	mov	sp, r7
 800d1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ca:	4770      	bx	lr

0800d1cc <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800d1cc:	b480      	push	{r7}
 800d1ce:	b083      	sub	sp, #12
 800d1d0:	af00      	add	r7, sp, #0
 800d1d2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800d1d4:	bf00      	nop
 800d1d6:	370c      	adds	r7, #12
 800d1d8:	46bd      	mov	sp, r7
 800d1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1de:	4770      	bx	lr

0800d1e0 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800d1e0:	b480      	push	{r7}
 800d1e2:	b083      	sub	sp, #12
 800d1e4:	af00      	add	r7, sp, #0
 800d1e6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 800d1e8:	bf00      	nop
 800d1ea:	370c      	adds	r7, #12
 800d1ec:	46bd      	mov	sp, r7
 800d1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f2:	4770      	bx	lr

0800d1f4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d1f4:	b580      	push	{r7, lr}
 800d1f6:	b084      	sub	sp, #16
 800d1f8:	af00      	add	r7, sp, #0
 800d1fa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d200:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	2200      	movs	r2, #0
 800d206:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	2200      	movs	r2, #0
 800d20e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	2201      	movs	r2, #1
 800d216:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800d21a:	68f8      	ldr	r0, [r7, #12]
 800d21c:	f7ff ffd6 	bl	800d1cc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d220:	bf00      	nop
 800d222:	3710      	adds	r7, #16
 800d224:	46bd      	mov	sp, r7
 800d226:	bd80      	pop	{r7, pc}

0800d228 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800d228:	b480      	push	{r7}
 800d22a:	b085      	sub	sp, #20
 800d22c:	af00      	add	r7, sp, #0
 800d22e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	695b      	ldr	r3, [r3, #20]
 800d236:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	699a      	ldr	r2, [r3, #24]
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	f042 0208 	orr.w	r2, r2, #8
 800d246:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	699a      	ldr	r2, [r3, #24]
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	f042 0210 	orr.w	r2, r2, #16
 800d256:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	681a      	ldr	r2, [r3, #0]
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	f022 0201 	bic.w	r2, r2, #1
 800d266:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	6919      	ldr	r1, [r3, #16]
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	681a      	ldr	r2, [r3, #0]
 800d272:	4b3c      	ldr	r3, [pc, #240]	@ (800d364 <SPI_CloseTransfer+0x13c>)
 800d274:	400b      	ands	r3, r1
 800d276:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	689a      	ldr	r2, [r3, #8]
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800d286:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800d28e:	b2db      	uxtb	r3, r3
 800d290:	2b04      	cmp	r3, #4
 800d292:	d014      	beq.n	800d2be <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	f003 0320 	and.w	r3, r3, #32
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d00f      	beq.n	800d2be <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d2a4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	699a      	ldr	r2, [r3, #24]
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	f042 0220 	orr.w	r2, r2, #32
 800d2bc:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800d2c4:	b2db      	uxtb	r3, r3
 800d2c6:	2b03      	cmp	r3, #3
 800d2c8:	d014      	beq.n	800d2f4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d00f      	beq.n	800d2f4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d2da:	f043 0204 	orr.w	r2, r3, #4
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	699a      	ldr	r2, [r3, #24]
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d2f2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d00f      	beq.n	800d31e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d304:	f043 0201 	orr.w	r2, r3, #1
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	699a      	ldr	r2, [r3, #24]
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d31c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d324:	2b00      	cmp	r3, #0
 800d326:	d00f      	beq.n	800d348 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d32e:	f043 0208 	orr.w	r2, r3, #8
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	699a      	ldr	r2, [r3, #24]
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800d346:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	2200      	movs	r2, #0
 800d34c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	2200      	movs	r2, #0
 800d354:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800d358:	bf00      	nop
 800d35a:	3714      	adds	r7, #20
 800d35c:	46bd      	mov	sp, r7
 800d35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d362:	4770      	bx	lr
 800d364:	fffffc90 	.word	0xfffffc90

0800d368 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800d368:	b480      	push	{r7}
 800d36a:	b085      	sub	sp, #20
 800d36c:	af00      	add	r7, sp, #0
 800d36e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d374:	095b      	lsrs	r3, r3, #5
 800d376:	3301      	adds	r3, #1
 800d378:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	68db      	ldr	r3, [r3, #12]
 800d37e:	3301      	adds	r3, #1
 800d380:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800d382:	68bb      	ldr	r3, [r7, #8]
 800d384:	3307      	adds	r3, #7
 800d386:	08db      	lsrs	r3, r3, #3
 800d388:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800d38a:	68bb      	ldr	r3, [r7, #8]
 800d38c:	68fa      	ldr	r2, [r7, #12]
 800d38e:	fb02 f303 	mul.w	r3, r2, r3
}
 800d392:	4618      	mov	r0, r3
 800d394:	3714      	adds	r7, #20
 800d396:	46bd      	mov	sp, r7
 800d398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d39c:	4770      	bx	lr

0800d39e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d39e:	b580      	push	{r7, lr}
 800d3a0:	b082      	sub	sp, #8
 800d3a2:	af00      	add	r7, sp, #0
 800d3a4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d101      	bne.n	800d3b0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d3ac:	2301      	movs	r3, #1
 800d3ae:	e049      	b.n	800d444 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d3b6:	b2db      	uxtb	r3, r3
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d106      	bne.n	800d3ca <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	2200      	movs	r2, #0
 800d3c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d3c4:	6878      	ldr	r0, [r7, #4]
 800d3c6:	f7f4 fc47 	bl	8001c58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	2202      	movs	r2, #2
 800d3ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	681a      	ldr	r2, [r3, #0]
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	3304      	adds	r3, #4
 800d3da:	4619      	mov	r1, r3
 800d3dc:	4610      	mov	r0, r2
 800d3de:	f000 fa5d 	bl	800d89c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	2201      	movs	r2, #1
 800d3e6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	2201      	movs	r2, #1
 800d3ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	2201      	movs	r2, #1
 800d3f6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	2201      	movs	r2, #1
 800d3fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	2201      	movs	r2, #1
 800d406:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	2201      	movs	r2, #1
 800d40e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	2201      	movs	r2, #1
 800d416:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	2201      	movs	r2, #1
 800d41e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	2201      	movs	r2, #1
 800d426:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	2201      	movs	r2, #1
 800d42e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	2201      	movs	r2, #1
 800d436:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	2201      	movs	r2, #1
 800d43e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d442:	2300      	movs	r3, #0
}
 800d444:	4618      	mov	r0, r3
 800d446:	3708      	adds	r7, #8
 800d448:	46bd      	mov	sp, r7
 800d44a:	bd80      	pop	{r7, pc}

0800d44c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d44c:	b580      	push	{r7, lr}
 800d44e:	b084      	sub	sp, #16
 800d450:	af00      	add	r7, sp, #0
 800d452:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	68db      	ldr	r3, [r3, #12]
 800d45a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	691b      	ldr	r3, [r3, #16]
 800d462:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800d464:	68bb      	ldr	r3, [r7, #8]
 800d466:	f003 0302 	and.w	r3, r3, #2
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d020      	beq.n	800d4b0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	f003 0302 	and.w	r3, r3, #2
 800d474:	2b00      	cmp	r3, #0
 800d476:	d01b      	beq.n	800d4b0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	f06f 0202 	mvn.w	r2, #2
 800d480:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	2201      	movs	r2, #1
 800d486:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	699b      	ldr	r3, [r3, #24]
 800d48e:	f003 0303 	and.w	r3, r3, #3
 800d492:	2b00      	cmp	r3, #0
 800d494:	d003      	beq.n	800d49e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d496:	6878      	ldr	r0, [r7, #4]
 800d498:	f000 f9e2 	bl	800d860 <HAL_TIM_IC_CaptureCallback>
 800d49c:	e005      	b.n	800d4aa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d49e:	6878      	ldr	r0, [r7, #4]
 800d4a0:	f000 f9d4 	bl	800d84c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d4a4:	6878      	ldr	r0, [r7, #4]
 800d4a6:	f000 f9e5 	bl	800d874 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	2200      	movs	r2, #0
 800d4ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800d4b0:	68bb      	ldr	r3, [r7, #8]
 800d4b2:	f003 0304 	and.w	r3, r3, #4
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d020      	beq.n	800d4fc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	f003 0304 	and.w	r3, r3, #4
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d01b      	beq.n	800d4fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	f06f 0204 	mvn.w	r2, #4
 800d4cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	2202      	movs	r2, #2
 800d4d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	699b      	ldr	r3, [r3, #24]
 800d4da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d003      	beq.n	800d4ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d4e2:	6878      	ldr	r0, [r7, #4]
 800d4e4:	f000 f9bc 	bl	800d860 <HAL_TIM_IC_CaptureCallback>
 800d4e8:	e005      	b.n	800d4f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d4ea:	6878      	ldr	r0, [r7, #4]
 800d4ec:	f000 f9ae 	bl	800d84c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d4f0:	6878      	ldr	r0, [r7, #4]
 800d4f2:	f000 f9bf 	bl	800d874 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	2200      	movs	r2, #0
 800d4fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800d4fc:	68bb      	ldr	r3, [r7, #8]
 800d4fe:	f003 0308 	and.w	r3, r3, #8
 800d502:	2b00      	cmp	r3, #0
 800d504:	d020      	beq.n	800d548 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	f003 0308 	and.w	r3, r3, #8
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d01b      	beq.n	800d548 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	f06f 0208 	mvn.w	r2, #8
 800d518:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	2204      	movs	r2, #4
 800d51e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	69db      	ldr	r3, [r3, #28]
 800d526:	f003 0303 	and.w	r3, r3, #3
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d003      	beq.n	800d536 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d52e:	6878      	ldr	r0, [r7, #4]
 800d530:	f000 f996 	bl	800d860 <HAL_TIM_IC_CaptureCallback>
 800d534:	e005      	b.n	800d542 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d536:	6878      	ldr	r0, [r7, #4]
 800d538:	f000 f988 	bl	800d84c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d53c:	6878      	ldr	r0, [r7, #4]
 800d53e:	f000 f999 	bl	800d874 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	2200      	movs	r2, #0
 800d546:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800d548:	68bb      	ldr	r3, [r7, #8]
 800d54a:	f003 0310 	and.w	r3, r3, #16
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d020      	beq.n	800d594 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	f003 0310 	and.w	r3, r3, #16
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d01b      	beq.n	800d594 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	f06f 0210 	mvn.w	r2, #16
 800d564:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	2208      	movs	r2, #8
 800d56a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	69db      	ldr	r3, [r3, #28]
 800d572:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d576:	2b00      	cmp	r3, #0
 800d578:	d003      	beq.n	800d582 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d57a:	6878      	ldr	r0, [r7, #4]
 800d57c:	f000 f970 	bl	800d860 <HAL_TIM_IC_CaptureCallback>
 800d580:	e005      	b.n	800d58e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d582:	6878      	ldr	r0, [r7, #4]
 800d584:	f000 f962 	bl	800d84c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d588:	6878      	ldr	r0, [r7, #4]
 800d58a:	f000 f973 	bl	800d874 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	2200      	movs	r2, #0
 800d592:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800d594:	68bb      	ldr	r3, [r7, #8]
 800d596:	f003 0301 	and.w	r3, r3, #1
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d00c      	beq.n	800d5b8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	f003 0301 	and.w	r3, r3, #1
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d007      	beq.n	800d5b8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	f06f 0201 	mvn.w	r2, #1
 800d5b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d5b2:	6878      	ldr	r0, [r7, #4]
 800d5b4:	f7f4 fe44 	bl	8002240 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d5b8:	68bb      	ldr	r3, [r7, #8]
 800d5ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d104      	bne.n	800d5cc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800d5c2:	68bb      	ldr	r3, [r7, #8]
 800d5c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d00c      	beq.n	800d5e6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d007      	beq.n	800d5e6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800d5de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d5e0:	6878      	ldr	r0, [r7, #4]
 800d5e2:	f000 fb37 	bl	800dc54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800d5e6:	68bb      	ldr	r3, [r7, #8]
 800d5e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d00c      	beq.n	800d60a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d007      	beq.n	800d60a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800d602:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d604:	6878      	ldr	r0, [r7, #4]
 800d606:	f000 fb2f 	bl	800dc68 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800d60a:	68bb      	ldr	r3, [r7, #8]
 800d60c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d610:	2b00      	cmp	r3, #0
 800d612:	d00c      	beq.n	800d62e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d007      	beq.n	800d62e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800d626:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d628:	6878      	ldr	r0, [r7, #4]
 800d62a:	f000 f92d 	bl	800d888 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800d62e:	68bb      	ldr	r3, [r7, #8]
 800d630:	f003 0320 	and.w	r3, r3, #32
 800d634:	2b00      	cmp	r3, #0
 800d636:	d00c      	beq.n	800d652 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	f003 0320 	and.w	r3, r3, #32
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d007      	beq.n	800d652 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	f06f 0220 	mvn.w	r2, #32
 800d64a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d64c:	6878      	ldr	r0, [r7, #4]
 800d64e:	f000 faf7 	bl	800dc40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d652:	bf00      	nop
 800d654:	3710      	adds	r7, #16
 800d656:	46bd      	mov	sp, r7
 800d658:	bd80      	pop	{r7, pc}
	...

0800d65c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d65c:	b580      	push	{r7, lr}
 800d65e:	b084      	sub	sp, #16
 800d660:	af00      	add	r7, sp, #0
 800d662:	6078      	str	r0, [r7, #4]
 800d664:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d666:	2300      	movs	r3, #0
 800d668:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d670:	2b01      	cmp	r3, #1
 800d672:	d101      	bne.n	800d678 <HAL_TIM_ConfigClockSource+0x1c>
 800d674:	2302      	movs	r3, #2
 800d676:	e0dc      	b.n	800d832 <HAL_TIM_ConfigClockSource+0x1d6>
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	2201      	movs	r2, #1
 800d67c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	2202      	movs	r2, #2
 800d684:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	689b      	ldr	r3, [r3, #8]
 800d68e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d690:	68ba      	ldr	r2, [r7, #8]
 800d692:	4b6a      	ldr	r3, [pc, #424]	@ (800d83c <HAL_TIM_ConfigClockSource+0x1e0>)
 800d694:	4013      	ands	r3, r2
 800d696:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d698:	68bb      	ldr	r3, [r7, #8]
 800d69a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d69e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	68ba      	ldr	r2, [r7, #8]
 800d6a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d6a8:	683b      	ldr	r3, [r7, #0]
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	4a64      	ldr	r2, [pc, #400]	@ (800d840 <HAL_TIM_ConfigClockSource+0x1e4>)
 800d6ae:	4293      	cmp	r3, r2
 800d6b0:	f000 80a9 	beq.w	800d806 <HAL_TIM_ConfigClockSource+0x1aa>
 800d6b4:	4a62      	ldr	r2, [pc, #392]	@ (800d840 <HAL_TIM_ConfigClockSource+0x1e4>)
 800d6b6:	4293      	cmp	r3, r2
 800d6b8:	f200 80ae 	bhi.w	800d818 <HAL_TIM_ConfigClockSource+0x1bc>
 800d6bc:	4a61      	ldr	r2, [pc, #388]	@ (800d844 <HAL_TIM_ConfigClockSource+0x1e8>)
 800d6be:	4293      	cmp	r3, r2
 800d6c0:	f000 80a1 	beq.w	800d806 <HAL_TIM_ConfigClockSource+0x1aa>
 800d6c4:	4a5f      	ldr	r2, [pc, #380]	@ (800d844 <HAL_TIM_ConfigClockSource+0x1e8>)
 800d6c6:	4293      	cmp	r3, r2
 800d6c8:	f200 80a6 	bhi.w	800d818 <HAL_TIM_ConfigClockSource+0x1bc>
 800d6cc:	4a5e      	ldr	r2, [pc, #376]	@ (800d848 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d6ce:	4293      	cmp	r3, r2
 800d6d0:	f000 8099 	beq.w	800d806 <HAL_TIM_ConfigClockSource+0x1aa>
 800d6d4:	4a5c      	ldr	r2, [pc, #368]	@ (800d848 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d6d6:	4293      	cmp	r3, r2
 800d6d8:	f200 809e 	bhi.w	800d818 <HAL_TIM_ConfigClockSource+0x1bc>
 800d6dc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800d6e0:	f000 8091 	beq.w	800d806 <HAL_TIM_ConfigClockSource+0x1aa>
 800d6e4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800d6e8:	f200 8096 	bhi.w	800d818 <HAL_TIM_ConfigClockSource+0x1bc>
 800d6ec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d6f0:	f000 8089 	beq.w	800d806 <HAL_TIM_ConfigClockSource+0x1aa>
 800d6f4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d6f8:	f200 808e 	bhi.w	800d818 <HAL_TIM_ConfigClockSource+0x1bc>
 800d6fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d700:	d03e      	beq.n	800d780 <HAL_TIM_ConfigClockSource+0x124>
 800d702:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d706:	f200 8087 	bhi.w	800d818 <HAL_TIM_ConfigClockSource+0x1bc>
 800d70a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d70e:	f000 8086 	beq.w	800d81e <HAL_TIM_ConfigClockSource+0x1c2>
 800d712:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d716:	d87f      	bhi.n	800d818 <HAL_TIM_ConfigClockSource+0x1bc>
 800d718:	2b70      	cmp	r3, #112	@ 0x70
 800d71a:	d01a      	beq.n	800d752 <HAL_TIM_ConfigClockSource+0xf6>
 800d71c:	2b70      	cmp	r3, #112	@ 0x70
 800d71e:	d87b      	bhi.n	800d818 <HAL_TIM_ConfigClockSource+0x1bc>
 800d720:	2b60      	cmp	r3, #96	@ 0x60
 800d722:	d050      	beq.n	800d7c6 <HAL_TIM_ConfigClockSource+0x16a>
 800d724:	2b60      	cmp	r3, #96	@ 0x60
 800d726:	d877      	bhi.n	800d818 <HAL_TIM_ConfigClockSource+0x1bc>
 800d728:	2b50      	cmp	r3, #80	@ 0x50
 800d72a:	d03c      	beq.n	800d7a6 <HAL_TIM_ConfigClockSource+0x14a>
 800d72c:	2b50      	cmp	r3, #80	@ 0x50
 800d72e:	d873      	bhi.n	800d818 <HAL_TIM_ConfigClockSource+0x1bc>
 800d730:	2b40      	cmp	r3, #64	@ 0x40
 800d732:	d058      	beq.n	800d7e6 <HAL_TIM_ConfigClockSource+0x18a>
 800d734:	2b40      	cmp	r3, #64	@ 0x40
 800d736:	d86f      	bhi.n	800d818 <HAL_TIM_ConfigClockSource+0x1bc>
 800d738:	2b30      	cmp	r3, #48	@ 0x30
 800d73a:	d064      	beq.n	800d806 <HAL_TIM_ConfigClockSource+0x1aa>
 800d73c:	2b30      	cmp	r3, #48	@ 0x30
 800d73e:	d86b      	bhi.n	800d818 <HAL_TIM_ConfigClockSource+0x1bc>
 800d740:	2b20      	cmp	r3, #32
 800d742:	d060      	beq.n	800d806 <HAL_TIM_ConfigClockSource+0x1aa>
 800d744:	2b20      	cmp	r3, #32
 800d746:	d867      	bhi.n	800d818 <HAL_TIM_ConfigClockSource+0x1bc>
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d05c      	beq.n	800d806 <HAL_TIM_ConfigClockSource+0x1aa>
 800d74c:	2b10      	cmp	r3, #16
 800d74e:	d05a      	beq.n	800d806 <HAL_TIM_ConfigClockSource+0x1aa>
 800d750:	e062      	b.n	800d818 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d756:	683b      	ldr	r3, [r7, #0]
 800d758:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d75a:	683b      	ldr	r3, [r7, #0]
 800d75c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d75e:	683b      	ldr	r3, [r7, #0]
 800d760:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d762:	f000 f9bf 	bl	800dae4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	689b      	ldr	r3, [r3, #8]
 800d76c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d76e:	68bb      	ldr	r3, [r7, #8]
 800d770:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800d774:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	68ba      	ldr	r2, [r7, #8]
 800d77c:	609a      	str	r2, [r3, #8]
      break;
 800d77e:	e04f      	b.n	800d820 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d784:	683b      	ldr	r3, [r7, #0]
 800d786:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d788:	683b      	ldr	r3, [r7, #0]
 800d78a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d78c:	683b      	ldr	r3, [r7, #0]
 800d78e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d790:	f000 f9a8 	bl	800dae4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	689a      	ldr	r2, [r3, #8]
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800d7a2:	609a      	str	r2, [r3, #8]
      break;
 800d7a4:	e03c      	b.n	800d820 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d7aa:	683b      	ldr	r3, [r7, #0]
 800d7ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d7ae:	683b      	ldr	r3, [r7, #0]
 800d7b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d7b2:	461a      	mov	r2, r3
 800d7b4:	f000 f918 	bl	800d9e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	2150      	movs	r1, #80	@ 0x50
 800d7be:	4618      	mov	r0, r3
 800d7c0:	f000 f972 	bl	800daa8 <TIM_ITRx_SetConfig>
      break;
 800d7c4:	e02c      	b.n	800d820 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d7ca:	683b      	ldr	r3, [r7, #0]
 800d7cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d7ce:	683b      	ldr	r3, [r7, #0]
 800d7d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d7d2:	461a      	mov	r2, r3
 800d7d4:	f000 f937 	bl	800da46 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	2160      	movs	r1, #96	@ 0x60
 800d7de:	4618      	mov	r0, r3
 800d7e0:	f000 f962 	bl	800daa8 <TIM_ITRx_SetConfig>
      break;
 800d7e4:	e01c      	b.n	800d820 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d7ea:	683b      	ldr	r3, [r7, #0]
 800d7ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d7ee:	683b      	ldr	r3, [r7, #0]
 800d7f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d7f2:	461a      	mov	r2, r3
 800d7f4:	f000 f8f8 	bl	800d9e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	2140      	movs	r1, #64	@ 0x40
 800d7fe:	4618      	mov	r0, r3
 800d800:	f000 f952 	bl	800daa8 <TIM_ITRx_SetConfig>
      break;
 800d804:	e00c      	b.n	800d820 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	681a      	ldr	r2, [r3, #0]
 800d80a:	683b      	ldr	r3, [r7, #0]
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	4619      	mov	r1, r3
 800d810:	4610      	mov	r0, r2
 800d812:	f000 f949 	bl	800daa8 <TIM_ITRx_SetConfig>
      break;
 800d816:	e003      	b.n	800d820 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800d818:	2301      	movs	r3, #1
 800d81a:	73fb      	strb	r3, [r7, #15]
      break;
 800d81c:	e000      	b.n	800d820 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800d81e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	2201      	movs	r2, #1
 800d824:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	2200      	movs	r2, #0
 800d82c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800d830:	7bfb      	ldrb	r3, [r7, #15]
}
 800d832:	4618      	mov	r0, r3
 800d834:	3710      	adds	r7, #16
 800d836:	46bd      	mov	sp, r7
 800d838:	bd80      	pop	{r7, pc}
 800d83a:	bf00      	nop
 800d83c:	ffceff88 	.word	0xffceff88
 800d840:	00100040 	.word	0x00100040
 800d844:	00100030 	.word	0x00100030
 800d848:	00100020 	.word	0x00100020

0800d84c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d84c:	b480      	push	{r7}
 800d84e:	b083      	sub	sp, #12
 800d850:	af00      	add	r7, sp, #0
 800d852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d854:	bf00      	nop
 800d856:	370c      	adds	r7, #12
 800d858:	46bd      	mov	sp, r7
 800d85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d85e:	4770      	bx	lr

0800d860 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d860:	b480      	push	{r7}
 800d862:	b083      	sub	sp, #12
 800d864:	af00      	add	r7, sp, #0
 800d866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d868:	bf00      	nop
 800d86a:	370c      	adds	r7, #12
 800d86c:	46bd      	mov	sp, r7
 800d86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d872:	4770      	bx	lr

0800d874 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d874:	b480      	push	{r7}
 800d876:	b083      	sub	sp, #12
 800d878:	af00      	add	r7, sp, #0
 800d87a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d87c:	bf00      	nop
 800d87e:	370c      	adds	r7, #12
 800d880:	46bd      	mov	sp, r7
 800d882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d886:	4770      	bx	lr

0800d888 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d888:	b480      	push	{r7}
 800d88a:	b083      	sub	sp, #12
 800d88c:	af00      	add	r7, sp, #0
 800d88e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d890:	bf00      	nop
 800d892:	370c      	adds	r7, #12
 800d894:	46bd      	mov	sp, r7
 800d896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d89a:	4770      	bx	lr

0800d89c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d89c:	b480      	push	{r7}
 800d89e:	b085      	sub	sp, #20
 800d8a0:	af00      	add	r7, sp, #0
 800d8a2:	6078      	str	r0, [r7, #4]
 800d8a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	4a46      	ldr	r2, [pc, #280]	@ (800d9c8 <TIM_Base_SetConfig+0x12c>)
 800d8b0:	4293      	cmp	r3, r2
 800d8b2:	d013      	beq.n	800d8dc <TIM_Base_SetConfig+0x40>
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d8ba:	d00f      	beq.n	800d8dc <TIM_Base_SetConfig+0x40>
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	4a43      	ldr	r2, [pc, #268]	@ (800d9cc <TIM_Base_SetConfig+0x130>)
 800d8c0:	4293      	cmp	r3, r2
 800d8c2:	d00b      	beq.n	800d8dc <TIM_Base_SetConfig+0x40>
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	4a42      	ldr	r2, [pc, #264]	@ (800d9d0 <TIM_Base_SetConfig+0x134>)
 800d8c8:	4293      	cmp	r3, r2
 800d8ca:	d007      	beq.n	800d8dc <TIM_Base_SetConfig+0x40>
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	4a41      	ldr	r2, [pc, #260]	@ (800d9d4 <TIM_Base_SetConfig+0x138>)
 800d8d0:	4293      	cmp	r3, r2
 800d8d2:	d003      	beq.n	800d8dc <TIM_Base_SetConfig+0x40>
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	4a40      	ldr	r2, [pc, #256]	@ (800d9d8 <TIM_Base_SetConfig+0x13c>)
 800d8d8:	4293      	cmp	r3, r2
 800d8da:	d108      	bne.n	800d8ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d8e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d8e4:	683b      	ldr	r3, [r7, #0]
 800d8e6:	685b      	ldr	r3, [r3, #4]
 800d8e8:	68fa      	ldr	r2, [r7, #12]
 800d8ea:	4313      	orrs	r3, r2
 800d8ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	4a35      	ldr	r2, [pc, #212]	@ (800d9c8 <TIM_Base_SetConfig+0x12c>)
 800d8f2:	4293      	cmp	r3, r2
 800d8f4:	d01f      	beq.n	800d936 <TIM_Base_SetConfig+0x9a>
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d8fc:	d01b      	beq.n	800d936 <TIM_Base_SetConfig+0x9a>
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	4a32      	ldr	r2, [pc, #200]	@ (800d9cc <TIM_Base_SetConfig+0x130>)
 800d902:	4293      	cmp	r3, r2
 800d904:	d017      	beq.n	800d936 <TIM_Base_SetConfig+0x9a>
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	4a31      	ldr	r2, [pc, #196]	@ (800d9d0 <TIM_Base_SetConfig+0x134>)
 800d90a:	4293      	cmp	r3, r2
 800d90c:	d013      	beq.n	800d936 <TIM_Base_SetConfig+0x9a>
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	4a30      	ldr	r2, [pc, #192]	@ (800d9d4 <TIM_Base_SetConfig+0x138>)
 800d912:	4293      	cmp	r3, r2
 800d914:	d00f      	beq.n	800d936 <TIM_Base_SetConfig+0x9a>
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	4a2f      	ldr	r2, [pc, #188]	@ (800d9d8 <TIM_Base_SetConfig+0x13c>)
 800d91a:	4293      	cmp	r3, r2
 800d91c:	d00b      	beq.n	800d936 <TIM_Base_SetConfig+0x9a>
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	4a2e      	ldr	r2, [pc, #184]	@ (800d9dc <TIM_Base_SetConfig+0x140>)
 800d922:	4293      	cmp	r3, r2
 800d924:	d007      	beq.n	800d936 <TIM_Base_SetConfig+0x9a>
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	4a2d      	ldr	r2, [pc, #180]	@ (800d9e0 <TIM_Base_SetConfig+0x144>)
 800d92a:	4293      	cmp	r3, r2
 800d92c:	d003      	beq.n	800d936 <TIM_Base_SetConfig+0x9a>
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	4a2c      	ldr	r2, [pc, #176]	@ (800d9e4 <TIM_Base_SetConfig+0x148>)
 800d932:	4293      	cmp	r3, r2
 800d934:	d108      	bne.n	800d948 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d93c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d93e:	683b      	ldr	r3, [r7, #0]
 800d940:	68db      	ldr	r3, [r3, #12]
 800d942:	68fa      	ldr	r2, [r7, #12]
 800d944:	4313      	orrs	r3, r2
 800d946:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800d94e:	683b      	ldr	r3, [r7, #0]
 800d950:	695b      	ldr	r3, [r3, #20]
 800d952:	4313      	orrs	r3, r2
 800d954:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	68fa      	ldr	r2, [r7, #12]
 800d95a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d95c:	683b      	ldr	r3, [r7, #0]
 800d95e:	689a      	ldr	r2, [r3, #8]
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d964:	683b      	ldr	r3, [r7, #0]
 800d966:	681a      	ldr	r2, [r3, #0]
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	4a16      	ldr	r2, [pc, #88]	@ (800d9c8 <TIM_Base_SetConfig+0x12c>)
 800d970:	4293      	cmp	r3, r2
 800d972:	d00f      	beq.n	800d994 <TIM_Base_SetConfig+0xf8>
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	4a18      	ldr	r2, [pc, #96]	@ (800d9d8 <TIM_Base_SetConfig+0x13c>)
 800d978:	4293      	cmp	r3, r2
 800d97a:	d00b      	beq.n	800d994 <TIM_Base_SetConfig+0xf8>
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	4a17      	ldr	r2, [pc, #92]	@ (800d9dc <TIM_Base_SetConfig+0x140>)
 800d980:	4293      	cmp	r3, r2
 800d982:	d007      	beq.n	800d994 <TIM_Base_SetConfig+0xf8>
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	4a16      	ldr	r2, [pc, #88]	@ (800d9e0 <TIM_Base_SetConfig+0x144>)
 800d988:	4293      	cmp	r3, r2
 800d98a:	d003      	beq.n	800d994 <TIM_Base_SetConfig+0xf8>
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	4a15      	ldr	r2, [pc, #84]	@ (800d9e4 <TIM_Base_SetConfig+0x148>)
 800d990:	4293      	cmp	r3, r2
 800d992:	d103      	bne.n	800d99c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d994:	683b      	ldr	r3, [r7, #0]
 800d996:	691a      	ldr	r2, [r3, #16]
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	2201      	movs	r2, #1
 800d9a0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	691b      	ldr	r3, [r3, #16]
 800d9a6:	f003 0301 	and.w	r3, r3, #1
 800d9aa:	2b01      	cmp	r3, #1
 800d9ac:	d105      	bne.n	800d9ba <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	691b      	ldr	r3, [r3, #16]
 800d9b2:	f023 0201 	bic.w	r2, r3, #1
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	611a      	str	r2, [r3, #16]
  }
}
 800d9ba:	bf00      	nop
 800d9bc:	3714      	adds	r7, #20
 800d9be:	46bd      	mov	sp, r7
 800d9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c4:	4770      	bx	lr
 800d9c6:	bf00      	nop
 800d9c8:	40010000 	.word	0x40010000
 800d9cc:	40000400 	.word	0x40000400
 800d9d0:	40000800 	.word	0x40000800
 800d9d4:	40000c00 	.word	0x40000c00
 800d9d8:	40010400 	.word	0x40010400
 800d9dc:	40014000 	.word	0x40014000
 800d9e0:	40014400 	.word	0x40014400
 800d9e4:	40014800 	.word	0x40014800

0800d9e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d9e8:	b480      	push	{r7}
 800d9ea:	b087      	sub	sp, #28
 800d9ec:	af00      	add	r7, sp, #0
 800d9ee:	60f8      	str	r0, [r7, #12]
 800d9f0:	60b9      	str	r1, [r7, #8]
 800d9f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	6a1b      	ldr	r3, [r3, #32]
 800d9f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	6a1b      	ldr	r3, [r3, #32]
 800d9fe:	f023 0201 	bic.w	r2, r3, #1
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	699b      	ldr	r3, [r3, #24]
 800da0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800da0c:	693b      	ldr	r3, [r7, #16]
 800da0e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800da12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	011b      	lsls	r3, r3, #4
 800da18:	693a      	ldr	r2, [r7, #16]
 800da1a:	4313      	orrs	r3, r2
 800da1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800da1e:	697b      	ldr	r3, [r7, #20]
 800da20:	f023 030a 	bic.w	r3, r3, #10
 800da24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800da26:	697a      	ldr	r2, [r7, #20]
 800da28:	68bb      	ldr	r3, [r7, #8]
 800da2a:	4313      	orrs	r3, r2
 800da2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	693a      	ldr	r2, [r7, #16]
 800da32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	697a      	ldr	r2, [r7, #20]
 800da38:	621a      	str	r2, [r3, #32]
}
 800da3a:	bf00      	nop
 800da3c:	371c      	adds	r7, #28
 800da3e:	46bd      	mov	sp, r7
 800da40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da44:	4770      	bx	lr

0800da46 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800da46:	b480      	push	{r7}
 800da48:	b087      	sub	sp, #28
 800da4a:	af00      	add	r7, sp, #0
 800da4c:	60f8      	str	r0, [r7, #12]
 800da4e:	60b9      	str	r1, [r7, #8]
 800da50:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	6a1b      	ldr	r3, [r3, #32]
 800da56:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	6a1b      	ldr	r3, [r3, #32]
 800da5c:	f023 0210 	bic.w	r2, r3, #16
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	699b      	ldr	r3, [r3, #24]
 800da68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800da6a:	693b      	ldr	r3, [r7, #16]
 800da6c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800da70:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	031b      	lsls	r3, r3, #12
 800da76:	693a      	ldr	r2, [r7, #16]
 800da78:	4313      	orrs	r3, r2
 800da7a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800da7c:	697b      	ldr	r3, [r7, #20]
 800da7e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800da82:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800da84:	68bb      	ldr	r3, [r7, #8]
 800da86:	011b      	lsls	r3, r3, #4
 800da88:	697a      	ldr	r2, [r7, #20]
 800da8a:	4313      	orrs	r3, r2
 800da8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	693a      	ldr	r2, [r7, #16]
 800da92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	697a      	ldr	r2, [r7, #20]
 800da98:	621a      	str	r2, [r3, #32]
}
 800da9a:	bf00      	nop
 800da9c:	371c      	adds	r7, #28
 800da9e:	46bd      	mov	sp, r7
 800daa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa4:	4770      	bx	lr
	...

0800daa8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800daa8:	b480      	push	{r7}
 800daaa:	b085      	sub	sp, #20
 800daac:	af00      	add	r7, sp, #0
 800daae:	6078      	str	r0, [r7, #4]
 800dab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	689b      	ldr	r3, [r3, #8]
 800dab6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800dab8:	68fa      	ldr	r2, [r7, #12]
 800daba:	4b09      	ldr	r3, [pc, #36]	@ (800dae0 <TIM_ITRx_SetConfig+0x38>)
 800dabc:	4013      	ands	r3, r2
 800dabe:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800dac0:	683a      	ldr	r2, [r7, #0]
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	4313      	orrs	r3, r2
 800dac6:	f043 0307 	orr.w	r3, r3, #7
 800daca:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	68fa      	ldr	r2, [r7, #12]
 800dad0:	609a      	str	r2, [r3, #8]
}
 800dad2:	bf00      	nop
 800dad4:	3714      	adds	r7, #20
 800dad6:	46bd      	mov	sp, r7
 800dad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dadc:	4770      	bx	lr
 800dade:	bf00      	nop
 800dae0:	ffcfff8f 	.word	0xffcfff8f

0800dae4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800dae4:	b480      	push	{r7}
 800dae6:	b087      	sub	sp, #28
 800dae8:	af00      	add	r7, sp, #0
 800daea:	60f8      	str	r0, [r7, #12]
 800daec:	60b9      	str	r1, [r7, #8]
 800daee:	607a      	str	r2, [r7, #4]
 800daf0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	689b      	ldr	r3, [r3, #8]
 800daf6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800daf8:	697b      	ldr	r3, [r7, #20]
 800dafa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800dafe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800db00:	683b      	ldr	r3, [r7, #0]
 800db02:	021a      	lsls	r2, r3, #8
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	431a      	orrs	r2, r3
 800db08:	68bb      	ldr	r3, [r7, #8]
 800db0a:	4313      	orrs	r3, r2
 800db0c:	697a      	ldr	r2, [r7, #20]
 800db0e:	4313      	orrs	r3, r2
 800db10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	697a      	ldr	r2, [r7, #20]
 800db16:	609a      	str	r2, [r3, #8]
}
 800db18:	bf00      	nop
 800db1a:	371c      	adds	r7, #28
 800db1c:	46bd      	mov	sp, r7
 800db1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db22:	4770      	bx	lr

0800db24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800db24:	b480      	push	{r7}
 800db26:	b085      	sub	sp, #20
 800db28:	af00      	add	r7, sp, #0
 800db2a:	6078      	str	r0, [r7, #4]
 800db2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800db34:	2b01      	cmp	r3, #1
 800db36:	d101      	bne.n	800db3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800db38:	2302      	movs	r3, #2
 800db3a:	e06d      	b.n	800dc18 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	2201      	movs	r2, #1
 800db40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	2202      	movs	r2, #2
 800db48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	685b      	ldr	r3, [r3, #4]
 800db52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	689b      	ldr	r3, [r3, #8]
 800db5a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	4a30      	ldr	r2, [pc, #192]	@ (800dc24 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800db62:	4293      	cmp	r3, r2
 800db64:	d004      	beq.n	800db70 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	4a2f      	ldr	r2, [pc, #188]	@ (800dc28 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800db6c:	4293      	cmp	r3, r2
 800db6e:	d108      	bne.n	800db82 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800db76:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800db78:	683b      	ldr	r3, [r7, #0]
 800db7a:	685b      	ldr	r3, [r3, #4]
 800db7c:	68fa      	ldr	r2, [r7, #12]
 800db7e:	4313      	orrs	r3, r2
 800db80:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800db88:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800db8a:	683b      	ldr	r3, [r7, #0]
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	68fa      	ldr	r2, [r7, #12]
 800db90:	4313      	orrs	r3, r2
 800db92:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	68fa      	ldr	r2, [r7, #12]
 800db9a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	4a20      	ldr	r2, [pc, #128]	@ (800dc24 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800dba2:	4293      	cmp	r3, r2
 800dba4:	d022      	beq.n	800dbec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dbae:	d01d      	beq.n	800dbec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	4a1d      	ldr	r2, [pc, #116]	@ (800dc2c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800dbb6:	4293      	cmp	r3, r2
 800dbb8:	d018      	beq.n	800dbec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	4a1c      	ldr	r2, [pc, #112]	@ (800dc30 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800dbc0:	4293      	cmp	r3, r2
 800dbc2:	d013      	beq.n	800dbec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	4a1a      	ldr	r2, [pc, #104]	@ (800dc34 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800dbca:	4293      	cmp	r3, r2
 800dbcc:	d00e      	beq.n	800dbec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	4a15      	ldr	r2, [pc, #84]	@ (800dc28 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800dbd4:	4293      	cmp	r3, r2
 800dbd6:	d009      	beq.n	800dbec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	4a16      	ldr	r2, [pc, #88]	@ (800dc38 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800dbde:	4293      	cmp	r3, r2
 800dbe0:	d004      	beq.n	800dbec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	4a15      	ldr	r2, [pc, #84]	@ (800dc3c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800dbe8:	4293      	cmp	r3, r2
 800dbea:	d10c      	bne.n	800dc06 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800dbec:	68bb      	ldr	r3, [r7, #8]
 800dbee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800dbf2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800dbf4:	683b      	ldr	r3, [r7, #0]
 800dbf6:	689b      	ldr	r3, [r3, #8]
 800dbf8:	68ba      	ldr	r2, [r7, #8]
 800dbfa:	4313      	orrs	r3, r2
 800dbfc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	68ba      	ldr	r2, [r7, #8]
 800dc04:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	2201      	movs	r2, #1
 800dc0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	2200      	movs	r2, #0
 800dc12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800dc16:	2300      	movs	r3, #0
}
 800dc18:	4618      	mov	r0, r3
 800dc1a:	3714      	adds	r7, #20
 800dc1c:	46bd      	mov	sp, r7
 800dc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc22:	4770      	bx	lr
 800dc24:	40010000 	.word	0x40010000
 800dc28:	40010400 	.word	0x40010400
 800dc2c:	40000400 	.word	0x40000400
 800dc30:	40000800 	.word	0x40000800
 800dc34:	40000c00 	.word	0x40000c00
 800dc38:	40001800 	.word	0x40001800
 800dc3c:	40014000 	.word	0x40014000

0800dc40 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800dc40:	b480      	push	{r7}
 800dc42:	b083      	sub	sp, #12
 800dc44:	af00      	add	r7, sp, #0
 800dc46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800dc48:	bf00      	nop
 800dc4a:	370c      	adds	r7, #12
 800dc4c:	46bd      	mov	sp, r7
 800dc4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc52:	4770      	bx	lr

0800dc54 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800dc54:	b480      	push	{r7}
 800dc56:	b083      	sub	sp, #12
 800dc58:	af00      	add	r7, sp, #0
 800dc5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800dc5c:	bf00      	nop
 800dc5e:	370c      	adds	r7, #12
 800dc60:	46bd      	mov	sp, r7
 800dc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc66:	4770      	bx	lr

0800dc68 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800dc68:	b480      	push	{r7}
 800dc6a:	b083      	sub	sp, #12
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800dc70:	bf00      	nop
 800dc72:	370c      	adds	r7, #12
 800dc74:	46bd      	mov	sp, r7
 800dc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc7a:	4770      	bx	lr

0800dc7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800dc7c:	b580      	push	{r7, lr}
 800dc7e:	b082      	sub	sp, #8
 800dc80:	af00      	add	r7, sp, #0
 800dc82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d101      	bne.n	800dc8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800dc8a:	2301      	movs	r3, #1
 800dc8c:	e042      	b.n	800dd14 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d106      	bne.n	800dca6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	2200      	movs	r2, #0
 800dc9c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800dca0:	6878      	ldr	r0, [r7, #4]
 800dca2:	f7f4 f835 	bl	8001d10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	2224      	movs	r2, #36	@ 0x24
 800dcaa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	681a      	ldr	r2, [r3, #0]
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	f022 0201 	bic.w	r2, r2, #1
 800dcbc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d002      	beq.n	800dccc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800dcc6:	6878      	ldr	r0, [r7, #4]
 800dcc8:	f001 f9ec 	bl	800f0a4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800dccc:	6878      	ldr	r0, [r7, #4]
 800dcce:	f000 fc81 	bl	800e5d4 <UART_SetConfig>
 800dcd2:	4603      	mov	r3, r0
 800dcd4:	2b01      	cmp	r3, #1
 800dcd6:	d101      	bne.n	800dcdc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800dcd8:	2301      	movs	r3, #1
 800dcda:	e01b      	b.n	800dd14 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	685a      	ldr	r2, [r3, #4]
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800dcea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	689a      	ldr	r2, [r3, #8]
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800dcfa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	681a      	ldr	r2, [r3, #0]
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	f042 0201 	orr.w	r2, r2, #1
 800dd0a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800dd0c:	6878      	ldr	r0, [r7, #4]
 800dd0e:	f001 fa6b 	bl	800f1e8 <UART_CheckIdleState>
 800dd12:	4603      	mov	r3, r0
}
 800dd14:	4618      	mov	r0, r3
 800dd16:	3708      	adds	r7, #8
 800dd18:	46bd      	mov	sp, r7
 800dd1a:	bd80      	pop	{r7, pc}

0800dd1c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dd1c:	b580      	push	{r7, lr}
 800dd1e:	b08a      	sub	sp, #40	@ 0x28
 800dd20:	af02      	add	r7, sp, #8
 800dd22:	60f8      	str	r0, [r7, #12]
 800dd24:	60b9      	str	r1, [r7, #8]
 800dd26:	603b      	str	r3, [r7, #0]
 800dd28:	4613      	mov	r3, r2
 800dd2a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800dd32:	2b20      	cmp	r3, #32
 800dd34:	d17b      	bne.n	800de2e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800dd36:	68bb      	ldr	r3, [r7, #8]
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d002      	beq.n	800dd42 <HAL_UART_Transmit+0x26>
 800dd3c:	88fb      	ldrh	r3, [r7, #6]
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d101      	bne.n	800dd46 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800dd42:	2301      	movs	r3, #1
 800dd44:	e074      	b.n	800de30 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	2200      	movs	r2, #0
 800dd4a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	2221      	movs	r2, #33	@ 0x21
 800dd52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800dd56:	f7f4 fbff 	bl	8002558 <HAL_GetTick>
 800dd5a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	88fa      	ldrh	r2, [r7, #6]
 800dd60:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	88fa      	ldrh	r2, [r7, #6]
 800dd68:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	689b      	ldr	r3, [r3, #8]
 800dd70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dd74:	d108      	bne.n	800dd88 <HAL_UART_Transmit+0x6c>
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	691b      	ldr	r3, [r3, #16]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d104      	bne.n	800dd88 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800dd7e:	2300      	movs	r3, #0
 800dd80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800dd82:	68bb      	ldr	r3, [r7, #8]
 800dd84:	61bb      	str	r3, [r7, #24]
 800dd86:	e003      	b.n	800dd90 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800dd88:	68bb      	ldr	r3, [r7, #8]
 800dd8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800dd8c:	2300      	movs	r3, #0
 800dd8e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800dd90:	e030      	b.n	800ddf4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800dd92:	683b      	ldr	r3, [r7, #0]
 800dd94:	9300      	str	r3, [sp, #0]
 800dd96:	697b      	ldr	r3, [r7, #20]
 800dd98:	2200      	movs	r2, #0
 800dd9a:	2180      	movs	r1, #128	@ 0x80
 800dd9c:	68f8      	ldr	r0, [r7, #12]
 800dd9e:	f001 facd 	bl	800f33c <UART_WaitOnFlagUntilTimeout>
 800dda2:	4603      	mov	r3, r0
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d005      	beq.n	800ddb4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	2220      	movs	r2, #32
 800ddac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800ddb0:	2303      	movs	r3, #3
 800ddb2:	e03d      	b.n	800de30 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800ddb4:	69fb      	ldr	r3, [r7, #28]
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d10b      	bne.n	800ddd2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ddba:	69bb      	ldr	r3, [r7, #24]
 800ddbc:	881b      	ldrh	r3, [r3, #0]
 800ddbe:	461a      	mov	r2, r3
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ddc8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800ddca:	69bb      	ldr	r3, [r7, #24]
 800ddcc:	3302      	adds	r3, #2
 800ddce:	61bb      	str	r3, [r7, #24]
 800ddd0:	e007      	b.n	800dde2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ddd2:	69fb      	ldr	r3, [r7, #28]
 800ddd4:	781a      	ldrb	r2, [r3, #0]
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800dddc:	69fb      	ldr	r3, [r7, #28]
 800ddde:	3301      	adds	r3, #1
 800dde0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800dde8:	b29b      	uxth	r3, r3
 800ddea:	3b01      	subs	r3, #1
 800ddec:	b29a      	uxth	r2, r3
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ddfa:	b29b      	uxth	r3, r3
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d1c8      	bne.n	800dd92 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800de00:	683b      	ldr	r3, [r7, #0]
 800de02:	9300      	str	r3, [sp, #0]
 800de04:	697b      	ldr	r3, [r7, #20]
 800de06:	2200      	movs	r2, #0
 800de08:	2140      	movs	r1, #64	@ 0x40
 800de0a:	68f8      	ldr	r0, [r7, #12]
 800de0c:	f001 fa96 	bl	800f33c <UART_WaitOnFlagUntilTimeout>
 800de10:	4603      	mov	r3, r0
 800de12:	2b00      	cmp	r3, #0
 800de14:	d005      	beq.n	800de22 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	2220      	movs	r2, #32
 800de1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800de1e:	2303      	movs	r3, #3
 800de20:	e006      	b.n	800de30 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	2220      	movs	r2, #32
 800de26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800de2a:	2300      	movs	r3, #0
 800de2c:	e000      	b.n	800de30 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800de2e:	2302      	movs	r3, #2
  }
}
 800de30:	4618      	mov	r0, r3
 800de32:	3720      	adds	r7, #32
 800de34:	46bd      	mov	sp, r7
 800de36:	bd80      	pop	{r7, pc}

0800de38 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800de38:	b580      	push	{r7, lr}
 800de3a:	b0ba      	sub	sp, #232	@ 0xe8
 800de3c:	af00      	add	r7, sp, #0
 800de3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	69db      	ldr	r3, [r3, #28]
 800de46:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	689b      	ldr	r3, [r3, #8]
 800de5a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800de5e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800de62:	f640 030f 	movw	r3, #2063	@ 0x80f
 800de66:	4013      	ands	r3, r2
 800de68:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800de6c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800de70:	2b00      	cmp	r3, #0
 800de72:	d11b      	bne.n	800deac <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800de74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800de78:	f003 0320 	and.w	r3, r3, #32
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d015      	beq.n	800deac <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800de80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800de84:	f003 0320 	and.w	r3, r3, #32
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d105      	bne.n	800de98 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800de8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800de90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800de94:	2b00      	cmp	r3, #0
 800de96:	d009      	beq.n	800deac <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	f000 8377 	beq.w	800e590 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800dea6:	6878      	ldr	r0, [r7, #4]
 800dea8:	4798      	blx	r3
      }
      return;
 800deaa:	e371      	b.n	800e590 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800deac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	f000 8123 	beq.w	800e0fc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800deb6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800deba:	4b8d      	ldr	r3, [pc, #564]	@ (800e0f0 <HAL_UART_IRQHandler+0x2b8>)
 800debc:	4013      	ands	r3, r2
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d106      	bne.n	800ded0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800dec2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800dec6:	4b8b      	ldr	r3, [pc, #556]	@ (800e0f4 <HAL_UART_IRQHandler+0x2bc>)
 800dec8:	4013      	ands	r3, r2
 800deca:	2b00      	cmp	r3, #0
 800decc:	f000 8116 	beq.w	800e0fc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ded0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ded4:	f003 0301 	and.w	r3, r3, #1
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d011      	beq.n	800df00 <HAL_UART_IRQHandler+0xc8>
 800dedc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dee0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d00b      	beq.n	800df00 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	2201      	movs	r2, #1
 800deee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800def6:	f043 0201 	orr.w	r2, r3, #1
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800df00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800df04:	f003 0302 	and.w	r3, r3, #2
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d011      	beq.n	800df30 <HAL_UART_IRQHandler+0xf8>
 800df0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800df10:	f003 0301 	and.w	r3, r3, #1
 800df14:	2b00      	cmp	r3, #0
 800df16:	d00b      	beq.n	800df30 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	2202      	movs	r2, #2
 800df1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800df26:	f043 0204 	orr.w	r2, r3, #4
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800df30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800df34:	f003 0304 	and.w	r3, r3, #4
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d011      	beq.n	800df60 <HAL_UART_IRQHandler+0x128>
 800df3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800df40:	f003 0301 	and.w	r3, r3, #1
 800df44:	2b00      	cmp	r3, #0
 800df46:	d00b      	beq.n	800df60 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	2204      	movs	r2, #4
 800df4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800df56:	f043 0202 	orr.w	r2, r3, #2
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800df60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800df64:	f003 0308 	and.w	r3, r3, #8
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d017      	beq.n	800df9c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800df6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800df70:	f003 0320 	and.w	r3, r3, #32
 800df74:	2b00      	cmp	r3, #0
 800df76:	d105      	bne.n	800df84 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800df78:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800df7c:	4b5c      	ldr	r3, [pc, #368]	@ (800e0f0 <HAL_UART_IRQHandler+0x2b8>)
 800df7e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800df80:	2b00      	cmp	r3, #0
 800df82:	d00b      	beq.n	800df9c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	2208      	movs	r2, #8
 800df8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800df92:	f043 0208 	orr.w	r2, r3, #8
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800df9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dfa0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d012      	beq.n	800dfce <HAL_UART_IRQHandler+0x196>
 800dfa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dfac:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d00c      	beq.n	800dfce <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800dfbc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dfc4:	f043 0220 	orr.w	r2, r3, #32
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	f000 82dd 	beq.w	800e594 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800dfda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dfde:	f003 0320 	and.w	r3, r3, #32
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d013      	beq.n	800e00e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800dfe6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dfea:	f003 0320 	and.w	r3, r3, #32
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d105      	bne.n	800dffe <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800dff2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800dff6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d007      	beq.n	800e00e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e002:	2b00      	cmp	r3, #0
 800e004:	d003      	beq.n	800e00e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e00a:	6878      	ldr	r0, [r7, #4]
 800e00c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e014:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	689b      	ldr	r3, [r3, #8]
 800e01e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e022:	2b40      	cmp	r3, #64	@ 0x40
 800e024:	d005      	beq.n	800e032 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e026:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e02a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d054      	beq.n	800e0dc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e032:	6878      	ldr	r0, [r7, #4]
 800e034:	f001 f9f0 	bl	800f418 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	689b      	ldr	r3, [r3, #8]
 800e03e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e042:	2b40      	cmp	r3, #64	@ 0x40
 800e044:	d146      	bne.n	800e0d4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	3308      	adds	r3, #8
 800e04c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e050:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800e054:	e853 3f00 	ldrex	r3, [r3]
 800e058:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800e05c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e060:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e064:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	3308      	adds	r3, #8
 800e06e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800e072:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800e076:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e07a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800e07e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800e082:	e841 2300 	strex	r3, r2, [r1]
 800e086:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800e08a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d1d9      	bne.n	800e046 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d017      	beq.n	800e0cc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e0a2:	4a15      	ldr	r2, [pc, #84]	@ (800e0f8 <HAL_UART_IRQHandler+0x2c0>)
 800e0a4:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e0ac:	4618      	mov	r0, r3
 800e0ae:	f7f6 fd95 	bl	8004bdc <HAL_DMA_Abort_IT>
 800e0b2:	4603      	mov	r3, r0
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d019      	beq.n	800e0ec <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e0be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e0c0:	687a      	ldr	r2, [r7, #4]
 800e0c2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800e0c6:	4610      	mov	r0, r2
 800e0c8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e0ca:	e00f      	b.n	800e0ec <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e0cc:	6878      	ldr	r0, [r7, #4]
 800e0ce:	f000 fa77 	bl	800e5c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e0d2:	e00b      	b.n	800e0ec <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e0d4:	6878      	ldr	r0, [r7, #4]
 800e0d6:	f000 fa73 	bl	800e5c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e0da:	e007      	b.n	800e0ec <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e0dc:	6878      	ldr	r0, [r7, #4]
 800e0de:	f000 fa6f 	bl	800e5c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	2200      	movs	r2, #0
 800e0e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800e0ea:	e253      	b.n	800e594 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e0ec:	bf00      	nop
    return;
 800e0ee:	e251      	b.n	800e594 <HAL_UART_IRQHandler+0x75c>
 800e0f0:	10000001 	.word	0x10000001
 800e0f4:	04000120 	.word	0x04000120
 800e0f8:	0800f4e5 	.word	0x0800f4e5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e100:	2b01      	cmp	r3, #1
 800e102:	f040 81e7 	bne.w	800e4d4 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e106:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e10a:	f003 0310 	and.w	r3, r3, #16
 800e10e:	2b00      	cmp	r3, #0
 800e110:	f000 81e0 	beq.w	800e4d4 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e114:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e118:	f003 0310 	and.w	r3, r3, #16
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	f000 81d9 	beq.w	800e4d4 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	2210      	movs	r2, #16
 800e128:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	689b      	ldr	r3, [r3, #8]
 800e130:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e134:	2b40      	cmp	r3, #64	@ 0x40
 800e136:	f040 8151 	bne.w	800e3dc <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	4a96      	ldr	r2, [pc, #600]	@ (800e39c <HAL_UART_IRQHandler+0x564>)
 800e144:	4293      	cmp	r3, r2
 800e146:	d068      	beq.n	800e21a <HAL_UART_IRQHandler+0x3e2>
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	4a93      	ldr	r2, [pc, #588]	@ (800e3a0 <HAL_UART_IRQHandler+0x568>)
 800e152:	4293      	cmp	r3, r2
 800e154:	d061      	beq.n	800e21a <HAL_UART_IRQHandler+0x3e2>
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	4a91      	ldr	r2, [pc, #580]	@ (800e3a4 <HAL_UART_IRQHandler+0x56c>)
 800e160:	4293      	cmp	r3, r2
 800e162:	d05a      	beq.n	800e21a <HAL_UART_IRQHandler+0x3e2>
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	4a8e      	ldr	r2, [pc, #568]	@ (800e3a8 <HAL_UART_IRQHandler+0x570>)
 800e16e:	4293      	cmp	r3, r2
 800e170:	d053      	beq.n	800e21a <HAL_UART_IRQHandler+0x3e2>
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	4a8c      	ldr	r2, [pc, #560]	@ (800e3ac <HAL_UART_IRQHandler+0x574>)
 800e17c:	4293      	cmp	r3, r2
 800e17e:	d04c      	beq.n	800e21a <HAL_UART_IRQHandler+0x3e2>
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	4a89      	ldr	r2, [pc, #548]	@ (800e3b0 <HAL_UART_IRQHandler+0x578>)
 800e18a:	4293      	cmp	r3, r2
 800e18c:	d045      	beq.n	800e21a <HAL_UART_IRQHandler+0x3e2>
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	4a87      	ldr	r2, [pc, #540]	@ (800e3b4 <HAL_UART_IRQHandler+0x57c>)
 800e198:	4293      	cmp	r3, r2
 800e19a:	d03e      	beq.n	800e21a <HAL_UART_IRQHandler+0x3e2>
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	4a84      	ldr	r2, [pc, #528]	@ (800e3b8 <HAL_UART_IRQHandler+0x580>)
 800e1a6:	4293      	cmp	r3, r2
 800e1a8:	d037      	beq.n	800e21a <HAL_UART_IRQHandler+0x3e2>
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	4a82      	ldr	r2, [pc, #520]	@ (800e3bc <HAL_UART_IRQHandler+0x584>)
 800e1b4:	4293      	cmp	r3, r2
 800e1b6:	d030      	beq.n	800e21a <HAL_UART_IRQHandler+0x3e2>
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	4a7f      	ldr	r2, [pc, #508]	@ (800e3c0 <HAL_UART_IRQHandler+0x588>)
 800e1c2:	4293      	cmp	r3, r2
 800e1c4:	d029      	beq.n	800e21a <HAL_UART_IRQHandler+0x3e2>
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	4a7d      	ldr	r2, [pc, #500]	@ (800e3c4 <HAL_UART_IRQHandler+0x58c>)
 800e1d0:	4293      	cmp	r3, r2
 800e1d2:	d022      	beq.n	800e21a <HAL_UART_IRQHandler+0x3e2>
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	4a7a      	ldr	r2, [pc, #488]	@ (800e3c8 <HAL_UART_IRQHandler+0x590>)
 800e1de:	4293      	cmp	r3, r2
 800e1e0:	d01b      	beq.n	800e21a <HAL_UART_IRQHandler+0x3e2>
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	4a78      	ldr	r2, [pc, #480]	@ (800e3cc <HAL_UART_IRQHandler+0x594>)
 800e1ec:	4293      	cmp	r3, r2
 800e1ee:	d014      	beq.n	800e21a <HAL_UART_IRQHandler+0x3e2>
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	4a75      	ldr	r2, [pc, #468]	@ (800e3d0 <HAL_UART_IRQHandler+0x598>)
 800e1fa:	4293      	cmp	r3, r2
 800e1fc:	d00d      	beq.n	800e21a <HAL_UART_IRQHandler+0x3e2>
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	4a73      	ldr	r2, [pc, #460]	@ (800e3d4 <HAL_UART_IRQHandler+0x59c>)
 800e208:	4293      	cmp	r3, r2
 800e20a:	d006      	beq.n	800e21a <HAL_UART_IRQHandler+0x3e2>
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	4a70      	ldr	r2, [pc, #448]	@ (800e3d8 <HAL_UART_IRQHandler+0x5a0>)
 800e216:	4293      	cmp	r3, r2
 800e218:	d106      	bne.n	800e228 <HAL_UART_IRQHandler+0x3f0>
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	685b      	ldr	r3, [r3, #4]
 800e224:	b29b      	uxth	r3, r3
 800e226:	e005      	b.n	800e234 <HAL_UART_IRQHandler+0x3fc>
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	685b      	ldr	r3, [r3, #4]
 800e232:	b29b      	uxth	r3, r3
 800e234:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e238:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	f000 81ab 	beq.w	800e598 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e248:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800e24c:	429a      	cmp	r2, r3
 800e24e:	f080 81a3 	bcs.w	800e598 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800e258:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e262:	69db      	ldr	r3, [r3, #28]
 800e264:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e268:	f000 8087 	beq.w	800e37a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e274:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800e278:	e853 3f00 	ldrex	r3, [r3]
 800e27c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800e280:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e284:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e288:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	461a      	mov	r2, r3
 800e292:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e296:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e29a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e29e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800e2a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800e2a6:	e841 2300 	strex	r3, r2, [r1]
 800e2aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800e2ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d1da      	bne.n	800e26c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	3308      	adds	r3, #8
 800e2bc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e2c0:	e853 3f00 	ldrex	r3, [r3]
 800e2c4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800e2c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e2c8:	f023 0301 	bic.w	r3, r3, #1
 800e2cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	3308      	adds	r3, #8
 800e2d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800e2da:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800e2de:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2e0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800e2e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800e2e6:	e841 2300 	strex	r3, r2, [r1]
 800e2ea:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800e2ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d1e1      	bne.n	800e2b6 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	3308      	adds	r3, #8
 800e2f8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e2fc:	e853 3f00 	ldrex	r3, [r3]
 800e300:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800e302:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e304:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e308:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	3308      	adds	r3, #8
 800e312:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800e316:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800e318:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e31a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800e31c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800e31e:	e841 2300 	strex	r3, r2, [r1]
 800e322:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800e324:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e326:	2b00      	cmp	r3, #0
 800e328:	d1e3      	bne.n	800e2f2 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	2220      	movs	r2, #32
 800e32e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	2200      	movs	r2, #0
 800e336:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e33e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e340:	e853 3f00 	ldrex	r3, [r3]
 800e344:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800e346:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e348:	f023 0310 	bic.w	r3, r3, #16
 800e34c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	461a      	mov	r2, r3
 800e356:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e35a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e35c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e35e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e360:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e362:	e841 2300 	strex	r3, r2, [r1]
 800e366:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800e368:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d1e4      	bne.n	800e338 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e374:	4618      	mov	r0, r3
 800e376:	f7f6 f913 	bl	80045a0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	2202      	movs	r2, #2
 800e37e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e38c:	b29b      	uxth	r3, r3
 800e38e:	1ad3      	subs	r3, r2, r3
 800e390:	b29b      	uxth	r3, r3
 800e392:	4619      	mov	r1, r3
 800e394:	6878      	ldr	r0, [r7, #4]
 800e396:	f7f2 ff6d 	bl	8001274 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e39a:	e0fd      	b.n	800e598 <HAL_UART_IRQHandler+0x760>
 800e39c:	40020010 	.word	0x40020010
 800e3a0:	40020028 	.word	0x40020028
 800e3a4:	40020040 	.word	0x40020040
 800e3a8:	40020058 	.word	0x40020058
 800e3ac:	40020070 	.word	0x40020070
 800e3b0:	40020088 	.word	0x40020088
 800e3b4:	400200a0 	.word	0x400200a0
 800e3b8:	400200b8 	.word	0x400200b8
 800e3bc:	40020410 	.word	0x40020410
 800e3c0:	40020428 	.word	0x40020428
 800e3c4:	40020440 	.word	0x40020440
 800e3c8:	40020458 	.word	0x40020458
 800e3cc:	40020470 	.word	0x40020470
 800e3d0:	40020488 	.word	0x40020488
 800e3d4:	400204a0 	.word	0x400204a0
 800e3d8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e3e8:	b29b      	uxth	r3, r3
 800e3ea:	1ad3      	subs	r3, r2, r3
 800e3ec:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e3f6:	b29b      	uxth	r3, r3
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	f000 80cf 	beq.w	800e59c <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800e3fe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800e402:	2b00      	cmp	r3, #0
 800e404:	f000 80ca 	beq.w	800e59c <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e40e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e410:	e853 3f00 	ldrex	r3, [r3]
 800e414:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e416:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e418:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e41c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	461a      	mov	r2, r3
 800e426:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e42a:	647b      	str	r3, [r7, #68]	@ 0x44
 800e42c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e42e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e430:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e432:	e841 2300 	strex	r3, r2, [r1]
 800e436:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e438:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d1e4      	bne.n	800e408 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	3308      	adds	r3, #8
 800e444:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e448:	e853 3f00 	ldrex	r3, [r3]
 800e44c:	623b      	str	r3, [r7, #32]
   return(result);
 800e44e:	6a3a      	ldr	r2, [r7, #32]
 800e450:	4b55      	ldr	r3, [pc, #340]	@ (800e5a8 <HAL_UART_IRQHandler+0x770>)
 800e452:	4013      	ands	r3, r2
 800e454:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	3308      	adds	r3, #8
 800e45e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800e462:	633a      	str	r2, [r7, #48]	@ 0x30
 800e464:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e466:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e468:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e46a:	e841 2300 	strex	r3, r2, [r1]
 800e46e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e470:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e472:	2b00      	cmp	r3, #0
 800e474:	d1e3      	bne.n	800e43e <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	2220      	movs	r2, #32
 800e47a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	2200      	movs	r2, #0
 800e482:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	2200      	movs	r2, #0
 800e488:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e490:	693b      	ldr	r3, [r7, #16]
 800e492:	e853 3f00 	ldrex	r3, [r3]
 800e496:	60fb      	str	r3, [r7, #12]
   return(result);
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	f023 0310 	bic.w	r3, r3, #16
 800e49e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	461a      	mov	r2, r3
 800e4a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800e4ac:	61fb      	str	r3, [r7, #28]
 800e4ae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4b0:	69b9      	ldr	r1, [r7, #24]
 800e4b2:	69fa      	ldr	r2, [r7, #28]
 800e4b4:	e841 2300 	strex	r3, r2, [r1]
 800e4b8:	617b      	str	r3, [r7, #20]
   return(result);
 800e4ba:	697b      	ldr	r3, [r7, #20]
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d1e4      	bne.n	800e48a <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	2202      	movs	r2, #2
 800e4c4:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e4c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800e4ca:	4619      	mov	r1, r3
 800e4cc:	6878      	ldr	r0, [r7, #4]
 800e4ce:	f7f2 fed1 	bl	8001274 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e4d2:	e063      	b.n	800e59c <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e4d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e4d8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d00e      	beq.n	800e4fe <HAL_UART_IRQHandler+0x6c6>
 800e4e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e4e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d008      	beq.n	800e4fe <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800e4f4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800e4f6:	6878      	ldr	r0, [r7, #4]
 800e4f8:	f001 f835 	bl	800f566 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e4fc:	e051      	b.n	800e5a2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800e4fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e502:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e506:	2b00      	cmp	r3, #0
 800e508:	d014      	beq.n	800e534 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800e50a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e50e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e512:	2b00      	cmp	r3, #0
 800e514:	d105      	bne.n	800e522 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800e516:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e51a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d008      	beq.n	800e534 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e526:	2b00      	cmp	r3, #0
 800e528:	d03a      	beq.n	800e5a0 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e52e:	6878      	ldr	r0, [r7, #4]
 800e530:	4798      	blx	r3
    }
    return;
 800e532:	e035      	b.n	800e5a0 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e534:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e538:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d009      	beq.n	800e554 <HAL_UART_IRQHandler+0x71c>
 800e540:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e544:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d003      	beq.n	800e554 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800e54c:	6878      	ldr	r0, [r7, #4]
 800e54e:	f000 ffdf 	bl	800f510 <UART_EndTransmit_IT>
    return;
 800e552:	e026      	b.n	800e5a2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800e554:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e558:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d009      	beq.n	800e574 <HAL_UART_IRQHandler+0x73c>
 800e560:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e564:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d003      	beq.n	800e574 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800e56c:	6878      	ldr	r0, [r7, #4]
 800e56e:	f001 f80e 	bl	800f58e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e572:	e016      	b.n	800e5a2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800e574:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e578:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d010      	beq.n	800e5a2 <HAL_UART_IRQHandler+0x76a>
 800e580:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e584:	2b00      	cmp	r3, #0
 800e586:	da0c      	bge.n	800e5a2 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800e588:	6878      	ldr	r0, [r7, #4]
 800e58a:	f000 fff6 	bl	800f57a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e58e:	e008      	b.n	800e5a2 <HAL_UART_IRQHandler+0x76a>
      return;
 800e590:	bf00      	nop
 800e592:	e006      	b.n	800e5a2 <HAL_UART_IRQHandler+0x76a>
    return;
 800e594:	bf00      	nop
 800e596:	e004      	b.n	800e5a2 <HAL_UART_IRQHandler+0x76a>
      return;
 800e598:	bf00      	nop
 800e59a:	e002      	b.n	800e5a2 <HAL_UART_IRQHandler+0x76a>
      return;
 800e59c:	bf00      	nop
 800e59e:	e000      	b.n	800e5a2 <HAL_UART_IRQHandler+0x76a>
    return;
 800e5a0:	bf00      	nop
  }
}
 800e5a2:	37e8      	adds	r7, #232	@ 0xe8
 800e5a4:	46bd      	mov	sp, r7
 800e5a6:	bd80      	pop	{r7, pc}
 800e5a8:	effffffe 	.word	0xeffffffe

0800e5ac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e5ac:	b480      	push	{r7}
 800e5ae:	b083      	sub	sp, #12
 800e5b0:	af00      	add	r7, sp, #0
 800e5b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800e5b4:	bf00      	nop
 800e5b6:	370c      	adds	r7, #12
 800e5b8:	46bd      	mov	sp, r7
 800e5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5be:	4770      	bx	lr

0800e5c0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e5c0:	b480      	push	{r7}
 800e5c2:	b083      	sub	sp, #12
 800e5c4:	af00      	add	r7, sp, #0
 800e5c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800e5c8:	bf00      	nop
 800e5ca:	370c      	adds	r7, #12
 800e5cc:	46bd      	mov	sp, r7
 800e5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5d2:	4770      	bx	lr

0800e5d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e5d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e5d8:	b092      	sub	sp, #72	@ 0x48
 800e5da:	af00      	add	r7, sp, #0
 800e5dc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e5de:	2300      	movs	r3, #0
 800e5e0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e5e4:	697b      	ldr	r3, [r7, #20]
 800e5e6:	689a      	ldr	r2, [r3, #8]
 800e5e8:	697b      	ldr	r3, [r7, #20]
 800e5ea:	691b      	ldr	r3, [r3, #16]
 800e5ec:	431a      	orrs	r2, r3
 800e5ee:	697b      	ldr	r3, [r7, #20]
 800e5f0:	695b      	ldr	r3, [r3, #20]
 800e5f2:	431a      	orrs	r2, r3
 800e5f4:	697b      	ldr	r3, [r7, #20]
 800e5f6:	69db      	ldr	r3, [r3, #28]
 800e5f8:	4313      	orrs	r3, r2
 800e5fa:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e5fc:	697b      	ldr	r3, [r7, #20]
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	681a      	ldr	r2, [r3, #0]
 800e602:	4bbe      	ldr	r3, [pc, #760]	@ (800e8fc <UART_SetConfig+0x328>)
 800e604:	4013      	ands	r3, r2
 800e606:	697a      	ldr	r2, [r7, #20]
 800e608:	6812      	ldr	r2, [r2, #0]
 800e60a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e60c:	430b      	orrs	r3, r1
 800e60e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e610:	697b      	ldr	r3, [r7, #20]
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	685b      	ldr	r3, [r3, #4]
 800e616:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800e61a:	697b      	ldr	r3, [r7, #20]
 800e61c:	68da      	ldr	r2, [r3, #12]
 800e61e:	697b      	ldr	r3, [r7, #20]
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	430a      	orrs	r2, r1
 800e624:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e626:	697b      	ldr	r3, [r7, #20]
 800e628:	699b      	ldr	r3, [r3, #24]
 800e62a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e62c:	697b      	ldr	r3, [r7, #20]
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	4ab3      	ldr	r2, [pc, #716]	@ (800e900 <UART_SetConfig+0x32c>)
 800e632:	4293      	cmp	r3, r2
 800e634:	d004      	beq.n	800e640 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e636:	697b      	ldr	r3, [r7, #20]
 800e638:	6a1b      	ldr	r3, [r3, #32]
 800e63a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e63c:	4313      	orrs	r3, r2
 800e63e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e640:	697b      	ldr	r3, [r7, #20]
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	689a      	ldr	r2, [r3, #8]
 800e646:	4baf      	ldr	r3, [pc, #700]	@ (800e904 <UART_SetConfig+0x330>)
 800e648:	4013      	ands	r3, r2
 800e64a:	697a      	ldr	r2, [r7, #20]
 800e64c:	6812      	ldr	r2, [r2, #0]
 800e64e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e650:	430b      	orrs	r3, r1
 800e652:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e654:	697b      	ldr	r3, [r7, #20]
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e65a:	f023 010f 	bic.w	r1, r3, #15
 800e65e:	697b      	ldr	r3, [r7, #20]
 800e660:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e662:	697b      	ldr	r3, [r7, #20]
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	430a      	orrs	r2, r1
 800e668:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e66a:	697b      	ldr	r3, [r7, #20]
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	4aa6      	ldr	r2, [pc, #664]	@ (800e908 <UART_SetConfig+0x334>)
 800e670:	4293      	cmp	r3, r2
 800e672:	d177      	bne.n	800e764 <UART_SetConfig+0x190>
 800e674:	4ba5      	ldr	r3, [pc, #660]	@ (800e90c <UART_SetConfig+0x338>)
 800e676:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e678:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800e67c:	2b28      	cmp	r3, #40	@ 0x28
 800e67e:	d86d      	bhi.n	800e75c <UART_SetConfig+0x188>
 800e680:	a201      	add	r2, pc, #4	@ (adr r2, 800e688 <UART_SetConfig+0xb4>)
 800e682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e686:	bf00      	nop
 800e688:	0800e72d 	.word	0x0800e72d
 800e68c:	0800e75d 	.word	0x0800e75d
 800e690:	0800e75d 	.word	0x0800e75d
 800e694:	0800e75d 	.word	0x0800e75d
 800e698:	0800e75d 	.word	0x0800e75d
 800e69c:	0800e75d 	.word	0x0800e75d
 800e6a0:	0800e75d 	.word	0x0800e75d
 800e6a4:	0800e75d 	.word	0x0800e75d
 800e6a8:	0800e735 	.word	0x0800e735
 800e6ac:	0800e75d 	.word	0x0800e75d
 800e6b0:	0800e75d 	.word	0x0800e75d
 800e6b4:	0800e75d 	.word	0x0800e75d
 800e6b8:	0800e75d 	.word	0x0800e75d
 800e6bc:	0800e75d 	.word	0x0800e75d
 800e6c0:	0800e75d 	.word	0x0800e75d
 800e6c4:	0800e75d 	.word	0x0800e75d
 800e6c8:	0800e73d 	.word	0x0800e73d
 800e6cc:	0800e75d 	.word	0x0800e75d
 800e6d0:	0800e75d 	.word	0x0800e75d
 800e6d4:	0800e75d 	.word	0x0800e75d
 800e6d8:	0800e75d 	.word	0x0800e75d
 800e6dc:	0800e75d 	.word	0x0800e75d
 800e6e0:	0800e75d 	.word	0x0800e75d
 800e6e4:	0800e75d 	.word	0x0800e75d
 800e6e8:	0800e745 	.word	0x0800e745
 800e6ec:	0800e75d 	.word	0x0800e75d
 800e6f0:	0800e75d 	.word	0x0800e75d
 800e6f4:	0800e75d 	.word	0x0800e75d
 800e6f8:	0800e75d 	.word	0x0800e75d
 800e6fc:	0800e75d 	.word	0x0800e75d
 800e700:	0800e75d 	.word	0x0800e75d
 800e704:	0800e75d 	.word	0x0800e75d
 800e708:	0800e74d 	.word	0x0800e74d
 800e70c:	0800e75d 	.word	0x0800e75d
 800e710:	0800e75d 	.word	0x0800e75d
 800e714:	0800e75d 	.word	0x0800e75d
 800e718:	0800e75d 	.word	0x0800e75d
 800e71c:	0800e75d 	.word	0x0800e75d
 800e720:	0800e75d 	.word	0x0800e75d
 800e724:	0800e75d 	.word	0x0800e75d
 800e728:	0800e755 	.word	0x0800e755
 800e72c:	2301      	movs	r3, #1
 800e72e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e732:	e222      	b.n	800eb7a <UART_SetConfig+0x5a6>
 800e734:	2304      	movs	r3, #4
 800e736:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e73a:	e21e      	b.n	800eb7a <UART_SetConfig+0x5a6>
 800e73c:	2308      	movs	r3, #8
 800e73e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e742:	e21a      	b.n	800eb7a <UART_SetConfig+0x5a6>
 800e744:	2310      	movs	r3, #16
 800e746:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e74a:	e216      	b.n	800eb7a <UART_SetConfig+0x5a6>
 800e74c:	2320      	movs	r3, #32
 800e74e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e752:	e212      	b.n	800eb7a <UART_SetConfig+0x5a6>
 800e754:	2340      	movs	r3, #64	@ 0x40
 800e756:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e75a:	e20e      	b.n	800eb7a <UART_SetConfig+0x5a6>
 800e75c:	2380      	movs	r3, #128	@ 0x80
 800e75e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e762:	e20a      	b.n	800eb7a <UART_SetConfig+0x5a6>
 800e764:	697b      	ldr	r3, [r7, #20]
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	4a69      	ldr	r2, [pc, #420]	@ (800e910 <UART_SetConfig+0x33c>)
 800e76a:	4293      	cmp	r3, r2
 800e76c:	d130      	bne.n	800e7d0 <UART_SetConfig+0x1fc>
 800e76e:	4b67      	ldr	r3, [pc, #412]	@ (800e90c <UART_SetConfig+0x338>)
 800e770:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e772:	f003 0307 	and.w	r3, r3, #7
 800e776:	2b05      	cmp	r3, #5
 800e778:	d826      	bhi.n	800e7c8 <UART_SetConfig+0x1f4>
 800e77a:	a201      	add	r2, pc, #4	@ (adr r2, 800e780 <UART_SetConfig+0x1ac>)
 800e77c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e780:	0800e799 	.word	0x0800e799
 800e784:	0800e7a1 	.word	0x0800e7a1
 800e788:	0800e7a9 	.word	0x0800e7a9
 800e78c:	0800e7b1 	.word	0x0800e7b1
 800e790:	0800e7b9 	.word	0x0800e7b9
 800e794:	0800e7c1 	.word	0x0800e7c1
 800e798:	2300      	movs	r3, #0
 800e79a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e79e:	e1ec      	b.n	800eb7a <UART_SetConfig+0x5a6>
 800e7a0:	2304      	movs	r3, #4
 800e7a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e7a6:	e1e8      	b.n	800eb7a <UART_SetConfig+0x5a6>
 800e7a8:	2308      	movs	r3, #8
 800e7aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e7ae:	e1e4      	b.n	800eb7a <UART_SetConfig+0x5a6>
 800e7b0:	2310      	movs	r3, #16
 800e7b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e7b6:	e1e0      	b.n	800eb7a <UART_SetConfig+0x5a6>
 800e7b8:	2320      	movs	r3, #32
 800e7ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e7be:	e1dc      	b.n	800eb7a <UART_SetConfig+0x5a6>
 800e7c0:	2340      	movs	r3, #64	@ 0x40
 800e7c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e7c6:	e1d8      	b.n	800eb7a <UART_SetConfig+0x5a6>
 800e7c8:	2380      	movs	r3, #128	@ 0x80
 800e7ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e7ce:	e1d4      	b.n	800eb7a <UART_SetConfig+0x5a6>
 800e7d0:	697b      	ldr	r3, [r7, #20]
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	4a4f      	ldr	r2, [pc, #316]	@ (800e914 <UART_SetConfig+0x340>)
 800e7d6:	4293      	cmp	r3, r2
 800e7d8:	d130      	bne.n	800e83c <UART_SetConfig+0x268>
 800e7da:	4b4c      	ldr	r3, [pc, #304]	@ (800e90c <UART_SetConfig+0x338>)
 800e7dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e7de:	f003 0307 	and.w	r3, r3, #7
 800e7e2:	2b05      	cmp	r3, #5
 800e7e4:	d826      	bhi.n	800e834 <UART_SetConfig+0x260>
 800e7e6:	a201      	add	r2, pc, #4	@ (adr r2, 800e7ec <UART_SetConfig+0x218>)
 800e7e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7ec:	0800e805 	.word	0x0800e805
 800e7f0:	0800e80d 	.word	0x0800e80d
 800e7f4:	0800e815 	.word	0x0800e815
 800e7f8:	0800e81d 	.word	0x0800e81d
 800e7fc:	0800e825 	.word	0x0800e825
 800e800:	0800e82d 	.word	0x0800e82d
 800e804:	2300      	movs	r3, #0
 800e806:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e80a:	e1b6      	b.n	800eb7a <UART_SetConfig+0x5a6>
 800e80c:	2304      	movs	r3, #4
 800e80e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e812:	e1b2      	b.n	800eb7a <UART_SetConfig+0x5a6>
 800e814:	2308      	movs	r3, #8
 800e816:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e81a:	e1ae      	b.n	800eb7a <UART_SetConfig+0x5a6>
 800e81c:	2310      	movs	r3, #16
 800e81e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e822:	e1aa      	b.n	800eb7a <UART_SetConfig+0x5a6>
 800e824:	2320      	movs	r3, #32
 800e826:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e82a:	e1a6      	b.n	800eb7a <UART_SetConfig+0x5a6>
 800e82c:	2340      	movs	r3, #64	@ 0x40
 800e82e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e832:	e1a2      	b.n	800eb7a <UART_SetConfig+0x5a6>
 800e834:	2380      	movs	r3, #128	@ 0x80
 800e836:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e83a:	e19e      	b.n	800eb7a <UART_SetConfig+0x5a6>
 800e83c:	697b      	ldr	r3, [r7, #20]
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	4a35      	ldr	r2, [pc, #212]	@ (800e918 <UART_SetConfig+0x344>)
 800e842:	4293      	cmp	r3, r2
 800e844:	d130      	bne.n	800e8a8 <UART_SetConfig+0x2d4>
 800e846:	4b31      	ldr	r3, [pc, #196]	@ (800e90c <UART_SetConfig+0x338>)
 800e848:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e84a:	f003 0307 	and.w	r3, r3, #7
 800e84e:	2b05      	cmp	r3, #5
 800e850:	d826      	bhi.n	800e8a0 <UART_SetConfig+0x2cc>
 800e852:	a201      	add	r2, pc, #4	@ (adr r2, 800e858 <UART_SetConfig+0x284>)
 800e854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e858:	0800e871 	.word	0x0800e871
 800e85c:	0800e879 	.word	0x0800e879
 800e860:	0800e881 	.word	0x0800e881
 800e864:	0800e889 	.word	0x0800e889
 800e868:	0800e891 	.word	0x0800e891
 800e86c:	0800e899 	.word	0x0800e899
 800e870:	2300      	movs	r3, #0
 800e872:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e876:	e180      	b.n	800eb7a <UART_SetConfig+0x5a6>
 800e878:	2304      	movs	r3, #4
 800e87a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e87e:	e17c      	b.n	800eb7a <UART_SetConfig+0x5a6>
 800e880:	2308      	movs	r3, #8
 800e882:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e886:	e178      	b.n	800eb7a <UART_SetConfig+0x5a6>
 800e888:	2310      	movs	r3, #16
 800e88a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e88e:	e174      	b.n	800eb7a <UART_SetConfig+0x5a6>
 800e890:	2320      	movs	r3, #32
 800e892:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e896:	e170      	b.n	800eb7a <UART_SetConfig+0x5a6>
 800e898:	2340      	movs	r3, #64	@ 0x40
 800e89a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e89e:	e16c      	b.n	800eb7a <UART_SetConfig+0x5a6>
 800e8a0:	2380      	movs	r3, #128	@ 0x80
 800e8a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e8a6:	e168      	b.n	800eb7a <UART_SetConfig+0x5a6>
 800e8a8:	697b      	ldr	r3, [r7, #20]
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	4a1b      	ldr	r2, [pc, #108]	@ (800e91c <UART_SetConfig+0x348>)
 800e8ae:	4293      	cmp	r3, r2
 800e8b0:	d142      	bne.n	800e938 <UART_SetConfig+0x364>
 800e8b2:	4b16      	ldr	r3, [pc, #88]	@ (800e90c <UART_SetConfig+0x338>)
 800e8b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e8b6:	f003 0307 	and.w	r3, r3, #7
 800e8ba:	2b05      	cmp	r3, #5
 800e8bc:	d838      	bhi.n	800e930 <UART_SetConfig+0x35c>
 800e8be:	a201      	add	r2, pc, #4	@ (adr r2, 800e8c4 <UART_SetConfig+0x2f0>)
 800e8c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8c4:	0800e8dd 	.word	0x0800e8dd
 800e8c8:	0800e8e5 	.word	0x0800e8e5
 800e8cc:	0800e8ed 	.word	0x0800e8ed
 800e8d0:	0800e8f5 	.word	0x0800e8f5
 800e8d4:	0800e921 	.word	0x0800e921
 800e8d8:	0800e929 	.word	0x0800e929
 800e8dc:	2300      	movs	r3, #0
 800e8de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e8e2:	e14a      	b.n	800eb7a <UART_SetConfig+0x5a6>
 800e8e4:	2304      	movs	r3, #4
 800e8e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e8ea:	e146      	b.n	800eb7a <UART_SetConfig+0x5a6>
 800e8ec:	2308      	movs	r3, #8
 800e8ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e8f2:	e142      	b.n	800eb7a <UART_SetConfig+0x5a6>
 800e8f4:	2310      	movs	r3, #16
 800e8f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e8fa:	e13e      	b.n	800eb7a <UART_SetConfig+0x5a6>
 800e8fc:	cfff69f3 	.word	0xcfff69f3
 800e900:	58000c00 	.word	0x58000c00
 800e904:	11fff4ff 	.word	0x11fff4ff
 800e908:	40011000 	.word	0x40011000
 800e90c:	58024400 	.word	0x58024400
 800e910:	40004400 	.word	0x40004400
 800e914:	40004800 	.word	0x40004800
 800e918:	40004c00 	.word	0x40004c00
 800e91c:	40005000 	.word	0x40005000
 800e920:	2320      	movs	r3, #32
 800e922:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e926:	e128      	b.n	800eb7a <UART_SetConfig+0x5a6>
 800e928:	2340      	movs	r3, #64	@ 0x40
 800e92a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e92e:	e124      	b.n	800eb7a <UART_SetConfig+0x5a6>
 800e930:	2380      	movs	r3, #128	@ 0x80
 800e932:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e936:	e120      	b.n	800eb7a <UART_SetConfig+0x5a6>
 800e938:	697b      	ldr	r3, [r7, #20]
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	4acb      	ldr	r2, [pc, #812]	@ (800ec6c <UART_SetConfig+0x698>)
 800e93e:	4293      	cmp	r3, r2
 800e940:	d176      	bne.n	800ea30 <UART_SetConfig+0x45c>
 800e942:	4bcb      	ldr	r3, [pc, #812]	@ (800ec70 <UART_SetConfig+0x69c>)
 800e944:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e946:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800e94a:	2b28      	cmp	r3, #40	@ 0x28
 800e94c:	d86c      	bhi.n	800ea28 <UART_SetConfig+0x454>
 800e94e:	a201      	add	r2, pc, #4	@ (adr r2, 800e954 <UART_SetConfig+0x380>)
 800e950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e954:	0800e9f9 	.word	0x0800e9f9
 800e958:	0800ea29 	.word	0x0800ea29
 800e95c:	0800ea29 	.word	0x0800ea29
 800e960:	0800ea29 	.word	0x0800ea29
 800e964:	0800ea29 	.word	0x0800ea29
 800e968:	0800ea29 	.word	0x0800ea29
 800e96c:	0800ea29 	.word	0x0800ea29
 800e970:	0800ea29 	.word	0x0800ea29
 800e974:	0800ea01 	.word	0x0800ea01
 800e978:	0800ea29 	.word	0x0800ea29
 800e97c:	0800ea29 	.word	0x0800ea29
 800e980:	0800ea29 	.word	0x0800ea29
 800e984:	0800ea29 	.word	0x0800ea29
 800e988:	0800ea29 	.word	0x0800ea29
 800e98c:	0800ea29 	.word	0x0800ea29
 800e990:	0800ea29 	.word	0x0800ea29
 800e994:	0800ea09 	.word	0x0800ea09
 800e998:	0800ea29 	.word	0x0800ea29
 800e99c:	0800ea29 	.word	0x0800ea29
 800e9a0:	0800ea29 	.word	0x0800ea29
 800e9a4:	0800ea29 	.word	0x0800ea29
 800e9a8:	0800ea29 	.word	0x0800ea29
 800e9ac:	0800ea29 	.word	0x0800ea29
 800e9b0:	0800ea29 	.word	0x0800ea29
 800e9b4:	0800ea11 	.word	0x0800ea11
 800e9b8:	0800ea29 	.word	0x0800ea29
 800e9bc:	0800ea29 	.word	0x0800ea29
 800e9c0:	0800ea29 	.word	0x0800ea29
 800e9c4:	0800ea29 	.word	0x0800ea29
 800e9c8:	0800ea29 	.word	0x0800ea29
 800e9cc:	0800ea29 	.word	0x0800ea29
 800e9d0:	0800ea29 	.word	0x0800ea29
 800e9d4:	0800ea19 	.word	0x0800ea19
 800e9d8:	0800ea29 	.word	0x0800ea29
 800e9dc:	0800ea29 	.word	0x0800ea29
 800e9e0:	0800ea29 	.word	0x0800ea29
 800e9e4:	0800ea29 	.word	0x0800ea29
 800e9e8:	0800ea29 	.word	0x0800ea29
 800e9ec:	0800ea29 	.word	0x0800ea29
 800e9f0:	0800ea29 	.word	0x0800ea29
 800e9f4:	0800ea21 	.word	0x0800ea21
 800e9f8:	2301      	movs	r3, #1
 800e9fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e9fe:	e0bc      	b.n	800eb7a <UART_SetConfig+0x5a6>
 800ea00:	2304      	movs	r3, #4
 800ea02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea06:	e0b8      	b.n	800eb7a <UART_SetConfig+0x5a6>
 800ea08:	2308      	movs	r3, #8
 800ea0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea0e:	e0b4      	b.n	800eb7a <UART_SetConfig+0x5a6>
 800ea10:	2310      	movs	r3, #16
 800ea12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea16:	e0b0      	b.n	800eb7a <UART_SetConfig+0x5a6>
 800ea18:	2320      	movs	r3, #32
 800ea1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea1e:	e0ac      	b.n	800eb7a <UART_SetConfig+0x5a6>
 800ea20:	2340      	movs	r3, #64	@ 0x40
 800ea22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea26:	e0a8      	b.n	800eb7a <UART_SetConfig+0x5a6>
 800ea28:	2380      	movs	r3, #128	@ 0x80
 800ea2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea2e:	e0a4      	b.n	800eb7a <UART_SetConfig+0x5a6>
 800ea30:	697b      	ldr	r3, [r7, #20]
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	4a8f      	ldr	r2, [pc, #572]	@ (800ec74 <UART_SetConfig+0x6a0>)
 800ea36:	4293      	cmp	r3, r2
 800ea38:	d130      	bne.n	800ea9c <UART_SetConfig+0x4c8>
 800ea3a:	4b8d      	ldr	r3, [pc, #564]	@ (800ec70 <UART_SetConfig+0x69c>)
 800ea3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ea3e:	f003 0307 	and.w	r3, r3, #7
 800ea42:	2b05      	cmp	r3, #5
 800ea44:	d826      	bhi.n	800ea94 <UART_SetConfig+0x4c0>
 800ea46:	a201      	add	r2, pc, #4	@ (adr r2, 800ea4c <UART_SetConfig+0x478>)
 800ea48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea4c:	0800ea65 	.word	0x0800ea65
 800ea50:	0800ea6d 	.word	0x0800ea6d
 800ea54:	0800ea75 	.word	0x0800ea75
 800ea58:	0800ea7d 	.word	0x0800ea7d
 800ea5c:	0800ea85 	.word	0x0800ea85
 800ea60:	0800ea8d 	.word	0x0800ea8d
 800ea64:	2300      	movs	r3, #0
 800ea66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea6a:	e086      	b.n	800eb7a <UART_SetConfig+0x5a6>
 800ea6c:	2304      	movs	r3, #4
 800ea6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea72:	e082      	b.n	800eb7a <UART_SetConfig+0x5a6>
 800ea74:	2308      	movs	r3, #8
 800ea76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea7a:	e07e      	b.n	800eb7a <UART_SetConfig+0x5a6>
 800ea7c:	2310      	movs	r3, #16
 800ea7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea82:	e07a      	b.n	800eb7a <UART_SetConfig+0x5a6>
 800ea84:	2320      	movs	r3, #32
 800ea86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea8a:	e076      	b.n	800eb7a <UART_SetConfig+0x5a6>
 800ea8c:	2340      	movs	r3, #64	@ 0x40
 800ea8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea92:	e072      	b.n	800eb7a <UART_SetConfig+0x5a6>
 800ea94:	2380      	movs	r3, #128	@ 0x80
 800ea96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea9a:	e06e      	b.n	800eb7a <UART_SetConfig+0x5a6>
 800ea9c:	697b      	ldr	r3, [r7, #20]
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	4a75      	ldr	r2, [pc, #468]	@ (800ec78 <UART_SetConfig+0x6a4>)
 800eaa2:	4293      	cmp	r3, r2
 800eaa4:	d130      	bne.n	800eb08 <UART_SetConfig+0x534>
 800eaa6:	4b72      	ldr	r3, [pc, #456]	@ (800ec70 <UART_SetConfig+0x69c>)
 800eaa8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eaaa:	f003 0307 	and.w	r3, r3, #7
 800eaae:	2b05      	cmp	r3, #5
 800eab0:	d826      	bhi.n	800eb00 <UART_SetConfig+0x52c>
 800eab2:	a201      	add	r2, pc, #4	@ (adr r2, 800eab8 <UART_SetConfig+0x4e4>)
 800eab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eab8:	0800ead1 	.word	0x0800ead1
 800eabc:	0800ead9 	.word	0x0800ead9
 800eac0:	0800eae1 	.word	0x0800eae1
 800eac4:	0800eae9 	.word	0x0800eae9
 800eac8:	0800eaf1 	.word	0x0800eaf1
 800eacc:	0800eaf9 	.word	0x0800eaf9
 800ead0:	2300      	movs	r3, #0
 800ead2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ead6:	e050      	b.n	800eb7a <UART_SetConfig+0x5a6>
 800ead8:	2304      	movs	r3, #4
 800eada:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eade:	e04c      	b.n	800eb7a <UART_SetConfig+0x5a6>
 800eae0:	2308      	movs	r3, #8
 800eae2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eae6:	e048      	b.n	800eb7a <UART_SetConfig+0x5a6>
 800eae8:	2310      	movs	r3, #16
 800eaea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eaee:	e044      	b.n	800eb7a <UART_SetConfig+0x5a6>
 800eaf0:	2320      	movs	r3, #32
 800eaf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eaf6:	e040      	b.n	800eb7a <UART_SetConfig+0x5a6>
 800eaf8:	2340      	movs	r3, #64	@ 0x40
 800eafa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eafe:	e03c      	b.n	800eb7a <UART_SetConfig+0x5a6>
 800eb00:	2380      	movs	r3, #128	@ 0x80
 800eb02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb06:	e038      	b.n	800eb7a <UART_SetConfig+0x5a6>
 800eb08:	697b      	ldr	r3, [r7, #20]
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	4a5b      	ldr	r2, [pc, #364]	@ (800ec7c <UART_SetConfig+0x6a8>)
 800eb0e:	4293      	cmp	r3, r2
 800eb10:	d130      	bne.n	800eb74 <UART_SetConfig+0x5a0>
 800eb12:	4b57      	ldr	r3, [pc, #348]	@ (800ec70 <UART_SetConfig+0x69c>)
 800eb14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800eb16:	f003 0307 	and.w	r3, r3, #7
 800eb1a:	2b05      	cmp	r3, #5
 800eb1c:	d826      	bhi.n	800eb6c <UART_SetConfig+0x598>
 800eb1e:	a201      	add	r2, pc, #4	@ (adr r2, 800eb24 <UART_SetConfig+0x550>)
 800eb20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb24:	0800eb3d 	.word	0x0800eb3d
 800eb28:	0800eb45 	.word	0x0800eb45
 800eb2c:	0800eb4d 	.word	0x0800eb4d
 800eb30:	0800eb55 	.word	0x0800eb55
 800eb34:	0800eb5d 	.word	0x0800eb5d
 800eb38:	0800eb65 	.word	0x0800eb65
 800eb3c:	2302      	movs	r3, #2
 800eb3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb42:	e01a      	b.n	800eb7a <UART_SetConfig+0x5a6>
 800eb44:	2304      	movs	r3, #4
 800eb46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb4a:	e016      	b.n	800eb7a <UART_SetConfig+0x5a6>
 800eb4c:	2308      	movs	r3, #8
 800eb4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb52:	e012      	b.n	800eb7a <UART_SetConfig+0x5a6>
 800eb54:	2310      	movs	r3, #16
 800eb56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb5a:	e00e      	b.n	800eb7a <UART_SetConfig+0x5a6>
 800eb5c:	2320      	movs	r3, #32
 800eb5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb62:	e00a      	b.n	800eb7a <UART_SetConfig+0x5a6>
 800eb64:	2340      	movs	r3, #64	@ 0x40
 800eb66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb6a:	e006      	b.n	800eb7a <UART_SetConfig+0x5a6>
 800eb6c:	2380      	movs	r3, #128	@ 0x80
 800eb6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb72:	e002      	b.n	800eb7a <UART_SetConfig+0x5a6>
 800eb74:	2380      	movs	r3, #128	@ 0x80
 800eb76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800eb7a:	697b      	ldr	r3, [r7, #20]
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	4a3f      	ldr	r2, [pc, #252]	@ (800ec7c <UART_SetConfig+0x6a8>)
 800eb80:	4293      	cmp	r3, r2
 800eb82:	f040 80f8 	bne.w	800ed76 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800eb86:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800eb8a:	2b20      	cmp	r3, #32
 800eb8c:	dc46      	bgt.n	800ec1c <UART_SetConfig+0x648>
 800eb8e:	2b02      	cmp	r3, #2
 800eb90:	f2c0 8082 	blt.w	800ec98 <UART_SetConfig+0x6c4>
 800eb94:	3b02      	subs	r3, #2
 800eb96:	2b1e      	cmp	r3, #30
 800eb98:	d87e      	bhi.n	800ec98 <UART_SetConfig+0x6c4>
 800eb9a:	a201      	add	r2, pc, #4	@ (adr r2, 800eba0 <UART_SetConfig+0x5cc>)
 800eb9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eba0:	0800ec23 	.word	0x0800ec23
 800eba4:	0800ec99 	.word	0x0800ec99
 800eba8:	0800ec2b 	.word	0x0800ec2b
 800ebac:	0800ec99 	.word	0x0800ec99
 800ebb0:	0800ec99 	.word	0x0800ec99
 800ebb4:	0800ec99 	.word	0x0800ec99
 800ebb8:	0800ec3b 	.word	0x0800ec3b
 800ebbc:	0800ec99 	.word	0x0800ec99
 800ebc0:	0800ec99 	.word	0x0800ec99
 800ebc4:	0800ec99 	.word	0x0800ec99
 800ebc8:	0800ec99 	.word	0x0800ec99
 800ebcc:	0800ec99 	.word	0x0800ec99
 800ebd0:	0800ec99 	.word	0x0800ec99
 800ebd4:	0800ec99 	.word	0x0800ec99
 800ebd8:	0800ec4b 	.word	0x0800ec4b
 800ebdc:	0800ec99 	.word	0x0800ec99
 800ebe0:	0800ec99 	.word	0x0800ec99
 800ebe4:	0800ec99 	.word	0x0800ec99
 800ebe8:	0800ec99 	.word	0x0800ec99
 800ebec:	0800ec99 	.word	0x0800ec99
 800ebf0:	0800ec99 	.word	0x0800ec99
 800ebf4:	0800ec99 	.word	0x0800ec99
 800ebf8:	0800ec99 	.word	0x0800ec99
 800ebfc:	0800ec99 	.word	0x0800ec99
 800ec00:	0800ec99 	.word	0x0800ec99
 800ec04:	0800ec99 	.word	0x0800ec99
 800ec08:	0800ec99 	.word	0x0800ec99
 800ec0c:	0800ec99 	.word	0x0800ec99
 800ec10:	0800ec99 	.word	0x0800ec99
 800ec14:	0800ec99 	.word	0x0800ec99
 800ec18:	0800ec8b 	.word	0x0800ec8b
 800ec1c:	2b40      	cmp	r3, #64	@ 0x40
 800ec1e:	d037      	beq.n	800ec90 <UART_SetConfig+0x6bc>
 800ec20:	e03a      	b.n	800ec98 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ec22:	f7fd fa4f 	bl	800c0c4 <HAL_RCCEx_GetD3PCLK1Freq>
 800ec26:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ec28:	e03c      	b.n	800eca4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ec2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ec2e:	4618      	mov	r0, r3
 800ec30:	f7fd fa5e 	bl	800c0f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ec34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ec38:	e034      	b.n	800eca4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ec3a:	f107 0318 	add.w	r3, r7, #24
 800ec3e:	4618      	mov	r0, r3
 800ec40:	f7fd fbaa 	bl	800c398 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ec44:	69fb      	ldr	r3, [r7, #28]
 800ec46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ec48:	e02c      	b.n	800eca4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ec4a:	4b09      	ldr	r3, [pc, #36]	@ (800ec70 <UART_SetConfig+0x69c>)
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	f003 0320 	and.w	r3, r3, #32
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d016      	beq.n	800ec84 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ec56:	4b06      	ldr	r3, [pc, #24]	@ (800ec70 <UART_SetConfig+0x69c>)
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	08db      	lsrs	r3, r3, #3
 800ec5c:	f003 0303 	and.w	r3, r3, #3
 800ec60:	4a07      	ldr	r2, [pc, #28]	@ (800ec80 <UART_SetConfig+0x6ac>)
 800ec62:	fa22 f303 	lsr.w	r3, r2, r3
 800ec66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ec68:	e01c      	b.n	800eca4 <UART_SetConfig+0x6d0>
 800ec6a:	bf00      	nop
 800ec6c:	40011400 	.word	0x40011400
 800ec70:	58024400 	.word	0x58024400
 800ec74:	40007800 	.word	0x40007800
 800ec78:	40007c00 	.word	0x40007c00
 800ec7c:	58000c00 	.word	0x58000c00
 800ec80:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800ec84:	4b9d      	ldr	r3, [pc, #628]	@ (800eefc <UART_SetConfig+0x928>)
 800ec86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ec88:	e00c      	b.n	800eca4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ec8a:	4b9d      	ldr	r3, [pc, #628]	@ (800ef00 <UART_SetConfig+0x92c>)
 800ec8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ec8e:	e009      	b.n	800eca4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ec90:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ec94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ec96:	e005      	b.n	800eca4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800ec98:	2300      	movs	r3, #0
 800ec9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ec9c:	2301      	movs	r3, #1
 800ec9e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800eca2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800eca4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	f000 81de 	beq.w	800f068 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ecac:	697b      	ldr	r3, [r7, #20]
 800ecae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ecb0:	4a94      	ldr	r2, [pc, #592]	@ (800ef04 <UART_SetConfig+0x930>)
 800ecb2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ecb6:	461a      	mov	r2, r3
 800ecb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ecba:	fbb3 f3f2 	udiv	r3, r3, r2
 800ecbe:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ecc0:	697b      	ldr	r3, [r7, #20]
 800ecc2:	685a      	ldr	r2, [r3, #4]
 800ecc4:	4613      	mov	r3, r2
 800ecc6:	005b      	lsls	r3, r3, #1
 800ecc8:	4413      	add	r3, r2
 800ecca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800eccc:	429a      	cmp	r2, r3
 800ecce:	d305      	bcc.n	800ecdc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ecd0:	697b      	ldr	r3, [r7, #20]
 800ecd2:	685b      	ldr	r3, [r3, #4]
 800ecd4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ecd6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ecd8:	429a      	cmp	r2, r3
 800ecda:	d903      	bls.n	800ece4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800ecdc:	2301      	movs	r3, #1
 800ecde:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ece2:	e1c1      	b.n	800f068 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ece4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ece6:	2200      	movs	r2, #0
 800ece8:	60bb      	str	r3, [r7, #8]
 800ecea:	60fa      	str	r2, [r7, #12]
 800ecec:	697b      	ldr	r3, [r7, #20]
 800ecee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ecf0:	4a84      	ldr	r2, [pc, #528]	@ (800ef04 <UART_SetConfig+0x930>)
 800ecf2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ecf6:	b29b      	uxth	r3, r3
 800ecf8:	2200      	movs	r2, #0
 800ecfa:	603b      	str	r3, [r7, #0]
 800ecfc:	607a      	str	r2, [r7, #4]
 800ecfe:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ed02:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ed06:	f7f1 fb43 	bl	8000390 <__aeabi_uldivmod>
 800ed0a:	4602      	mov	r2, r0
 800ed0c:	460b      	mov	r3, r1
 800ed0e:	4610      	mov	r0, r2
 800ed10:	4619      	mov	r1, r3
 800ed12:	f04f 0200 	mov.w	r2, #0
 800ed16:	f04f 0300 	mov.w	r3, #0
 800ed1a:	020b      	lsls	r3, r1, #8
 800ed1c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ed20:	0202      	lsls	r2, r0, #8
 800ed22:	6979      	ldr	r1, [r7, #20]
 800ed24:	6849      	ldr	r1, [r1, #4]
 800ed26:	0849      	lsrs	r1, r1, #1
 800ed28:	2000      	movs	r0, #0
 800ed2a:	460c      	mov	r4, r1
 800ed2c:	4605      	mov	r5, r0
 800ed2e:	eb12 0804 	adds.w	r8, r2, r4
 800ed32:	eb43 0905 	adc.w	r9, r3, r5
 800ed36:	697b      	ldr	r3, [r7, #20]
 800ed38:	685b      	ldr	r3, [r3, #4]
 800ed3a:	2200      	movs	r2, #0
 800ed3c:	469a      	mov	sl, r3
 800ed3e:	4693      	mov	fp, r2
 800ed40:	4652      	mov	r2, sl
 800ed42:	465b      	mov	r3, fp
 800ed44:	4640      	mov	r0, r8
 800ed46:	4649      	mov	r1, r9
 800ed48:	f7f1 fb22 	bl	8000390 <__aeabi_uldivmod>
 800ed4c:	4602      	mov	r2, r0
 800ed4e:	460b      	mov	r3, r1
 800ed50:	4613      	mov	r3, r2
 800ed52:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ed54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed56:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ed5a:	d308      	bcc.n	800ed6e <UART_SetConfig+0x79a>
 800ed5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed5e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ed62:	d204      	bcs.n	800ed6e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800ed64:	697b      	ldr	r3, [r7, #20]
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ed6a:	60da      	str	r2, [r3, #12]
 800ed6c:	e17c      	b.n	800f068 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800ed6e:	2301      	movs	r3, #1
 800ed70:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ed74:	e178      	b.n	800f068 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ed76:	697b      	ldr	r3, [r7, #20]
 800ed78:	69db      	ldr	r3, [r3, #28]
 800ed7a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ed7e:	f040 80c5 	bne.w	800ef0c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800ed82:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ed86:	2b20      	cmp	r3, #32
 800ed88:	dc48      	bgt.n	800ee1c <UART_SetConfig+0x848>
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	db7b      	blt.n	800ee86 <UART_SetConfig+0x8b2>
 800ed8e:	2b20      	cmp	r3, #32
 800ed90:	d879      	bhi.n	800ee86 <UART_SetConfig+0x8b2>
 800ed92:	a201      	add	r2, pc, #4	@ (adr r2, 800ed98 <UART_SetConfig+0x7c4>)
 800ed94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed98:	0800ee23 	.word	0x0800ee23
 800ed9c:	0800ee2b 	.word	0x0800ee2b
 800eda0:	0800ee87 	.word	0x0800ee87
 800eda4:	0800ee87 	.word	0x0800ee87
 800eda8:	0800ee33 	.word	0x0800ee33
 800edac:	0800ee87 	.word	0x0800ee87
 800edb0:	0800ee87 	.word	0x0800ee87
 800edb4:	0800ee87 	.word	0x0800ee87
 800edb8:	0800ee43 	.word	0x0800ee43
 800edbc:	0800ee87 	.word	0x0800ee87
 800edc0:	0800ee87 	.word	0x0800ee87
 800edc4:	0800ee87 	.word	0x0800ee87
 800edc8:	0800ee87 	.word	0x0800ee87
 800edcc:	0800ee87 	.word	0x0800ee87
 800edd0:	0800ee87 	.word	0x0800ee87
 800edd4:	0800ee87 	.word	0x0800ee87
 800edd8:	0800ee53 	.word	0x0800ee53
 800eddc:	0800ee87 	.word	0x0800ee87
 800ede0:	0800ee87 	.word	0x0800ee87
 800ede4:	0800ee87 	.word	0x0800ee87
 800ede8:	0800ee87 	.word	0x0800ee87
 800edec:	0800ee87 	.word	0x0800ee87
 800edf0:	0800ee87 	.word	0x0800ee87
 800edf4:	0800ee87 	.word	0x0800ee87
 800edf8:	0800ee87 	.word	0x0800ee87
 800edfc:	0800ee87 	.word	0x0800ee87
 800ee00:	0800ee87 	.word	0x0800ee87
 800ee04:	0800ee87 	.word	0x0800ee87
 800ee08:	0800ee87 	.word	0x0800ee87
 800ee0c:	0800ee87 	.word	0x0800ee87
 800ee10:	0800ee87 	.word	0x0800ee87
 800ee14:	0800ee87 	.word	0x0800ee87
 800ee18:	0800ee79 	.word	0x0800ee79
 800ee1c:	2b40      	cmp	r3, #64	@ 0x40
 800ee1e:	d02e      	beq.n	800ee7e <UART_SetConfig+0x8aa>
 800ee20:	e031      	b.n	800ee86 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ee22:	f7fb f999 	bl	800a158 <HAL_RCC_GetPCLK1Freq>
 800ee26:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ee28:	e033      	b.n	800ee92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ee2a:	f7fb f9ab 	bl	800a184 <HAL_RCC_GetPCLK2Freq>
 800ee2e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ee30:	e02f      	b.n	800ee92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ee32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ee36:	4618      	mov	r0, r3
 800ee38:	f7fd f95a 	bl	800c0f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ee3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ee40:	e027      	b.n	800ee92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ee42:	f107 0318 	add.w	r3, r7, #24
 800ee46:	4618      	mov	r0, r3
 800ee48:	f7fd faa6 	bl	800c398 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ee4c:	69fb      	ldr	r3, [r7, #28]
 800ee4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ee50:	e01f      	b.n	800ee92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ee52:	4b2d      	ldr	r3, [pc, #180]	@ (800ef08 <UART_SetConfig+0x934>)
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	f003 0320 	and.w	r3, r3, #32
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d009      	beq.n	800ee72 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ee5e:	4b2a      	ldr	r3, [pc, #168]	@ (800ef08 <UART_SetConfig+0x934>)
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	08db      	lsrs	r3, r3, #3
 800ee64:	f003 0303 	and.w	r3, r3, #3
 800ee68:	4a24      	ldr	r2, [pc, #144]	@ (800eefc <UART_SetConfig+0x928>)
 800ee6a:	fa22 f303 	lsr.w	r3, r2, r3
 800ee6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ee70:	e00f      	b.n	800ee92 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800ee72:	4b22      	ldr	r3, [pc, #136]	@ (800eefc <UART_SetConfig+0x928>)
 800ee74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ee76:	e00c      	b.n	800ee92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ee78:	4b21      	ldr	r3, [pc, #132]	@ (800ef00 <UART_SetConfig+0x92c>)
 800ee7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ee7c:	e009      	b.n	800ee92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ee7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ee82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ee84:	e005      	b.n	800ee92 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800ee86:	2300      	movs	r3, #0
 800ee88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ee8a:	2301      	movs	r3, #1
 800ee8c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ee90:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ee92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	f000 80e7 	beq.w	800f068 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ee9a:	697b      	ldr	r3, [r7, #20]
 800ee9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee9e:	4a19      	ldr	r2, [pc, #100]	@ (800ef04 <UART_SetConfig+0x930>)
 800eea0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800eea4:	461a      	mov	r2, r3
 800eea6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eea8:	fbb3 f3f2 	udiv	r3, r3, r2
 800eeac:	005a      	lsls	r2, r3, #1
 800eeae:	697b      	ldr	r3, [r7, #20]
 800eeb0:	685b      	ldr	r3, [r3, #4]
 800eeb2:	085b      	lsrs	r3, r3, #1
 800eeb4:	441a      	add	r2, r3
 800eeb6:	697b      	ldr	r3, [r7, #20]
 800eeb8:	685b      	ldr	r3, [r3, #4]
 800eeba:	fbb2 f3f3 	udiv	r3, r2, r3
 800eebe:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800eec0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eec2:	2b0f      	cmp	r3, #15
 800eec4:	d916      	bls.n	800eef4 <UART_SetConfig+0x920>
 800eec6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eec8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800eecc:	d212      	bcs.n	800eef4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800eece:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eed0:	b29b      	uxth	r3, r3
 800eed2:	f023 030f 	bic.w	r3, r3, #15
 800eed6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800eed8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eeda:	085b      	lsrs	r3, r3, #1
 800eedc:	b29b      	uxth	r3, r3
 800eede:	f003 0307 	and.w	r3, r3, #7
 800eee2:	b29a      	uxth	r2, r3
 800eee4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800eee6:	4313      	orrs	r3, r2
 800eee8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800eeea:	697b      	ldr	r3, [r7, #20]
 800eeec:	681b      	ldr	r3, [r3, #0]
 800eeee:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800eef0:	60da      	str	r2, [r3, #12]
 800eef2:	e0b9      	b.n	800f068 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800eef4:	2301      	movs	r3, #1
 800eef6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800eefa:	e0b5      	b.n	800f068 <UART_SetConfig+0xa94>
 800eefc:	03d09000 	.word	0x03d09000
 800ef00:	003d0900 	.word	0x003d0900
 800ef04:	080125c0 	.word	0x080125c0
 800ef08:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800ef0c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ef10:	2b20      	cmp	r3, #32
 800ef12:	dc49      	bgt.n	800efa8 <UART_SetConfig+0x9d4>
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	db7c      	blt.n	800f012 <UART_SetConfig+0xa3e>
 800ef18:	2b20      	cmp	r3, #32
 800ef1a:	d87a      	bhi.n	800f012 <UART_SetConfig+0xa3e>
 800ef1c:	a201      	add	r2, pc, #4	@ (adr r2, 800ef24 <UART_SetConfig+0x950>)
 800ef1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef22:	bf00      	nop
 800ef24:	0800efaf 	.word	0x0800efaf
 800ef28:	0800efb7 	.word	0x0800efb7
 800ef2c:	0800f013 	.word	0x0800f013
 800ef30:	0800f013 	.word	0x0800f013
 800ef34:	0800efbf 	.word	0x0800efbf
 800ef38:	0800f013 	.word	0x0800f013
 800ef3c:	0800f013 	.word	0x0800f013
 800ef40:	0800f013 	.word	0x0800f013
 800ef44:	0800efcf 	.word	0x0800efcf
 800ef48:	0800f013 	.word	0x0800f013
 800ef4c:	0800f013 	.word	0x0800f013
 800ef50:	0800f013 	.word	0x0800f013
 800ef54:	0800f013 	.word	0x0800f013
 800ef58:	0800f013 	.word	0x0800f013
 800ef5c:	0800f013 	.word	0x0800f013
 800ef60:	0800f013 	.word	0x0800f013
 800ef64:	0800efdf 	.word	0x0800efdf
 800ef68:	0800f013 	.word	0x0800f013
 800ef6c:	0800f013 	.word	0x0800f013
 800ef70:	0800f013 	.word	0x0800f013
 800ef74:	0800f013 	.word	0x0800f013
 800ef78:	0800f013 	.word	0x0800f013
 800ef7c:	0800f013 	.word	0x0800f013
 800ef80:	0800f013 	.word	0x0800f013
 800ef84:	0800f013 	.word	0x0800f013
 800ef88:	0800f013 	.word	0x0800f013
 800ef8c:	0800f013 	.word	0x0800f013
 800ef90:	0800f013 	.word	0x0800f013
 800ef94:	0800f013 	.word	0x0800f013
 800ef98:	0800f013 	.word	0x0800f013
 800ef9c:	0800f013 	.word	0x0800f013
 800efa0:	0800f013 	.word	0x0800f013
 800efa4:	0800f005 	.word	0x0800f005
 800efa8:	2b40      	cmp	r3, #64	@ 0x40
 800efaa:	d02e      	beq.n	800f00a <UART_SetConfig+0xa36>
 800efac:	e031      	b.n	800f012 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800efae:	f7fb f8d3 	bl	800a158 <HAL_RCC_GetPCLK1Freq>
 800efb2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800efb4:	e033      	b.n	800f01e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800efb6:	f7fb f8e5 	bl	800a184 <HAL_RCC_GetPCLK2Freq>
 800efba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800efbc:	e02f      	b.n	800f01e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800efbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800efc2:	4618      	mov	r0, r3
 800efc4:	f7fd f894 	bl	800c0f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800efc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800efca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800efcc:	e027      	b.n	800f01e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800efce:	f107 0318 	add.w	r3, r7, #24
 800efd2:	4618      	mov	r0, r3
 800efd4:	f7fd f9e0 	bl	800c398 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800efd8:	69fb      	ldr	r3, [r7, #28]
 800efda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800efdc:	e01f      	b.n	800f01e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800efde:	4b2d      	ldr	r3, [pc, #180]	@ (800f094 <UART_SetConfig+0xac0>)
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	f003 0320 	and.w	r3, r3, #32
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d009      	beq.n	800effe <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800efea:	4b2a      	ldr	r3, [pc, #168]	@ (800f094 <UART_SetConfig+0xac0>)
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	08db      	lsrs	r3, r3, #3
 800eff0:	f003 0303 	and.w	r3, r3, #3
 800eff4:	4a28      	ldr	r2, [pc, #160]	@ (800f098 <UART_SetConfig+0xac4>)
 800eff6:	fa22 f303 	lsr.w	r3, r2, r3
 800effa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800effc:	e00f      	b.n	800f01e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800effe:	4b26      	ldr	r3, [pc, #152]	@ (800f098 <UART_SetConfig+0xac4>)
 800f000:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f002:	e00c      	b.n	800f01e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f004:	4b25      	ldr	r3, [pc, #148]	@ (800f09c <UART_SetConfig+0xac8>)
 800f006:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f008:	e009      	b.n	800f01e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f00a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f00e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f010:	e005      	b.n	800f01e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800f012:	2300      	movs	r3, #0
 800f014:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800f016:	2301      	movs	r3, #1
 800f018:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800f01c:	bf00      	nop
    }

    if (pclk != 0U)
 800f01e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f020:	2b00      	cmp	r3, #0
 800f022:	d021      	beq.n	800f068 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f024:	697b      	ldr	r3, [r7, #20]
 800f026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f028:	4a1d      	ldr	r2, [pc, #116]	@ (800f0a0 <UART_SetConfig+0xacc>)
 800f02a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f02e:	461a      	mov	r2, r3
 800f030:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f032:	fbb3 f2f2 	udiv	r2, r3, r2
 800f036:	697b      	ldr	r3, [r7, #20]
 800f038:	685b      	ldr	r3, [r3, #4]
 800f03a:	085b      	lsrs	r3, r3, #1
 800f03c:	441a      	add	r2, r3
 800f03e:	697b      	ldr	r3, [r7, #20]
 800f040:	685b      	ldr	r3, [r3, #4]
 800f042:	fbb2 f3f3 	udiv	r3, r2, r3
 800f046:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f048:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f04a:	2b0f      	cmp	r3, #15
 800f04c:	d909      	bls.n	800f062 <UART_SetConfig+0xa8e>
 800f04e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f050:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f054:	d205      	bcs.n	800f062 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f056:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f058:	b29a      	uxth	r2, r3
 800f05a:	697b      	ldr	r3, [r7, #20]
 800f05c:	681b      	ldr	r3, [r3, #0]
 800f05e:	60da      	str	r2, [r3, #12]
 800f060:	e002      	b.n	800f068 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800f062:	2301      	movs	r3, #1
 800f064:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f068:	697b      	ldr	r3, [r7, #20]
 800f06a:	2201      	movs	r2, #1
 800f06c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800f070:	697b      	ldr	r3, [r7, #20]
 800f072:	2201      	movs	r2, #1
 800f074:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f078:	697b      	ldr	r3, [r7, #20]
 800f07a:	2200      	movs	r2, #0
 800f07c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800f07e:	697b      	ldr	r3, [r7, #20]
 800f080:	2200      	movs	r2, #0
 800f082:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800f084:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800f088:	4618      	mov	r0, r3
 800f08a:	3748      	adds	r7, #72	@ 0x48
 800f08c:	46bd      	mov	sp, r7
 800f08e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f092:	bf00      	nop
 800f094:	58024400 	.word	0x58024400
 800f098:	03d09000 	.word	0x03d09000
 800f09c:	003d0900 	.word	0x003d0900
 800f0a0:	080125c0 	.word	0x080125c0

0800f0a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f0a4:	b480      	push	{r7}
 800f0a6:	b083      	sub	sp, #12
 800f0a8:	af00      	add	r7, sp, #0
 800f0aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f0b0:	f003 0308 	and.w	r3, r3, #8
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d00a      	beq.n	800f0ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	685b      	ldr	r3, [r3, #4]
 800f0be:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	430a      	orrs	r2, r1
 800f0cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f0d2:	f003 0301 	and.w	r3, r3, #1
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d00a      	beq.n	800f0f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	681b      	ldr	r3, [r3, #0]
 800f0de:	685b      	ldr	r3, [r3, #4]
 800f0e0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	430a      	orrs	r2, r1
 800f0ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f0f4:	f003 0302 	and.w	r3, r3, #2
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d00a      	beq.n	800f112 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	685b      	ldr	r3, [r3, #4]
 800f102:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	430a      	orrs	r2, r1
 800f110:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f116:	f003 0304 	and.w	r3, r3, #4
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d00a      	beq.n	800f134 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	681b      	ldr	r3, [r3, #0]
 800f122:	685b      	ldr	r3, [r3, #4]
 800f124:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	430a      	orrs	r2, r1
 800f132:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f138:	f003 0310 	and.w	r3, r3, #16
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d00a      	beq.n	800f156 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	689b      	ldr	r3, [r3, #8]
 800f146:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	430a      	orrs	r2, r1
 800f154:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f15a:	f003 0320 	and.w	r3, r3, #32
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d00a      	beq.n	800f178 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	689b      	ldr	r3, [r3, #8]
 800f168:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	430a      	orrs	r2, r1
 800f176:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f17c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f180:	2b00      	cmp	r3, #0
 800f182:	d01a      	beq.n	800f1ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	685b      	ldr	r3, [r3, #4]
 800f18a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	430a      	orrs	r2, r1
 800f198:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f19e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f1a2:	d10a      	bne.n	800f1ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	685b      	ldr	r3, [r3, #4]
 800f1aa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	430a      	orrs	r2, r1
 800f1b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f1be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d00a      	beq.n	800f1dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	685b      	ldr	r3, [r3, #4]
 800f1cc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	681b      	ldr	r3, [r3, #0]
 800f1d8:	430a      	orrs	r2, r1
 800f1da:	605a      	str	r2, [r3, #4]
  }
}
 800f1dc:	bf00      	nop
 800f1de:	370c      	adds	r7, #12
 800f1e0:	46bd      	mov	sp, r7
 800f1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1e6:	4770      	bx	lr

0800f1e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f1e8:	b580      	push	{r7, lr}
 800f1ea:	b098      	sub	sp, #96	@ 0x60
 800f1ec:	af02      	add	r7, sp, #8
 800f1ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	2200      	movs	r2, #0
 800f1f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f1f8:	f7f3 f9ae 	bl	8002558 <HAL_GetTick>
 800f1fc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	f003 0308 	and.w	r3, r3, #8
 800f208:	2b08      	cmp	r3, #8
 800f20a:	d12f      	bne.n	800f26c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f20c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800f210:	9300      	str	r3, [sp, #0]
 800f212:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f214:	2200      	movs	r2, #0
 800f216:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800f21a:	6878      	ldr	r0, [r7, #4]
 800f21c:	f000 f88e 	bl	800f33c <UART_WaitOnFlagUntilTimeout>
 800f220:	4603      	mov	r3, r0
 800f222:	2b00      	cmp	r3, #0
 800f224:	d022      	beq.n	800f26c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f22c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f22e:	e853 3f00 	ldrex	r3, [r3]
 800f232:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f234:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f236:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f23a:	653b      	str	r3, [r7, #80]	@ 0x50
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	461a      	mov	r2, r3
 800f242:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f244:	647b      	str	r3, [r7, #68]	@ 0x44
 800f246:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f248:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f24a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f24c:	e841 2300 	strex	r3, r2, [r1]
 800f250:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f252:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f254:	2b00      	cmp	r3, #0
 800f256:	d1e6      	bne.n	800f226 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	2220      	movs	r2, #32
 800f25c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	2200      	movs	r2, #0
 800f264:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f268:	2303      	movs	r3, #3
 800f26a:	e063      	b.n	800f334 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	f003 0304 	and.w	r3, r3, #4
 800f276:	2b04      	cmp	r3, #4
 800f278:	d149      	bne.n	800f30e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f27a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800f27e:	9300      	str	r3, [sp, #0]
 800f280:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f282:	2200      	movs	r2, #0
 800f284:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800f288:	6878      	ldr	r0, [r7, #4]
 800f28a:	f000 f857 	bl	800f33c <UART_WaitOnFlagUntilTimeout>
 800f28e:	4603      	mov	r3, r0
 800f290:	2b00      	cmp	r3, #0
 800f292:	d03c      	beq.n	800f30e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f29a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f29c:	e853 3f00 	ldrex	r3, [r3]
 800f2a0:	623b      	str	r3, [r7, #32]
   return(result);
 800f2a2:	6a3b      	ldr	r3, [r7, #32]
 800f2a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f2a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	461a      	mov	r2, r3
 800f2b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f2b2:	633b      	str	r3, [r7, #48]	@ 0x30
 800f2b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f2b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f2ba:	e841 2300 	strex	r3, r2, [r1]
 800f2be:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f2c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d1e6      	bne.n	800f294 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	3308      	adds	r3, #8
 800f2cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2ce:	693b      	ldr	r3, [r7, #16]
 800f2d0:	e853 3f00 	ldrex	r3, [r3]
 800f2d4:	60fb      	str	r3, [r7, #12]
   return(result);
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	f023 0301 	bic.w	r3, r3, #1
 800f2dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	3308      	adds	r3, #8
 800f2e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f2e6:	61fa      	str	r2, [r7, #28]
 800f2e8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2ea:	69b9      	ldr	r1, [r7, #24]
 800f2ec:	69fa      	ldr	r2, [r7, #28]
 800f2ee:	e841 2300 	strex	r3, r2, [r1]
 800f2f2:	617b      	str	r3, [r7, #20]
   return(result);
 800f2f4:	697b      	ldr	r3, [r7, #20]
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d1e5      	bne.n	800f2c6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	2220      	movs	r2, #32
 800f2fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	2200      	movs	r2, #0
 800f306:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f30a:	2303      	movs	r3, #3
 800f30c:	e012      	b.n	800f334 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	2220      	movs	r2, #32
 800f312:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	2220      	movs	r2, #32
 800f31a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	2200      	movs	r2, #0
 800f322:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	2200      	movs	r2, #0
 800f328:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	2200      	movs	r2, #0
 800f32e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f332:	2300      	movs	r3, #0
}
 800f334:	4618      	mov	r0, r3
 800f336:	3758      	adds	r7, #88	@ 0x58
 800f338:	46bd      	mov	sp, r7
 800f33a:	bd80      	pop	{r7, pc}

0800f33c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f33c:	b580      	push	{r7, lr}
 800f33e:	b084      	sub	sp, #16
 800f340:	af00      	add	r7, sp, #0
 800f342:	60f8      	str	r0, [r7, #12]
 800f344:	60b9      	str	r1, [r7, #8]
 800f346:	603b      	str	r3, [r7, #0]
 800f348:	4613      	mov	r3, r2
 800f34a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f34c:	e04f      	b.n	800f3ee <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f34e:	69bb      	ldr	r3, [r7, #24]
 800f350:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f354:	d04b      	beq.n	800f3ee <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f356:	f7f3 f8ff 	bl	8002558 <HAL_GetTick>
 800f35a:	4602      	mov	r2, r0
 800f35c:	683b      	ldr	r3, [r7, #0]
 800f35e:	1ad3      	subs	r3, r2, r3
 800f360:	69ba      	ldr	r2, [r7, #24]
 800f362:	429a      	cmp	r2, r3
 800f364:	d302      	bcc.n	800f36c <UART_WaitOnFlagUntilTimeout+0x30>
 800f366:	69bb      	ldr	r3, [r7, #24]
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d101      	bne.n	800f370 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800f36c:	2303      	movs	r3, #3
 800f36e:	e04e      	b.n	800f40e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	f003 0304 	and.w	r3, r3, #4
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d037      	beq.n	800f3ee <UART_WaitOnFlagUntilTimeout+0xb2>
 800f37e:	68bb      	ldr	r3, [r7, #8]
 800f380:	2b80      	cmp	r3, #128	@ 0x80
 800f382:	d034      	beq.n	800f3ee <UART_WaitOnFlagUntilTimeout+0xb2>
 800f384:	68bb      	ldr	r3, [r7, #8]
 800f386:	2b40      	cmp	r3, #64	@ 0x40
 800f388:	d031      	beq.n	800f3ee <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	681b      	ldr	r3, [r3, #0]
 800f38e:	69db      	ldr	r3, [r3, #28]
 800f390:	f003 0308 	and.w	r3, r3, #8
 800f394:	2b08      	cmp	r3, #8
 800f396:	d110      	bne.n	800f3ba <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	2208      	movs	r2, #8
 800f39e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f3a0:	68f8      	ldr	r0, [r7, #12]
 800f3a2:	f000 f839 	bl	800f418 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800f3a6:	68fb      	ldr	r3, [r7, #12]
 800f3a8:	2208      	movs	r2, #8
 800f3aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	2200      	movs	r2, #0
 800f3b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800f3b6:	2301      	movs	r3, #1
 800f3b8:	e029      	b.n	800f40e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f3ba:	68fb      	ldr	r3, [r7, #12]
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	69db      	ldr	r3, [r3, #28]
 800f3c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f3c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f3c8:	d111      	bne.n	800f3ee <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800f3d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f3d4:	68f8      	ldr	r0, [r7, #12]
 800f3d6:	f000 f81f 	bl	800f418 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	2220      	movs	r2, #32
 800f3de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	2200      	movs	r2, #0
 800f3e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800f3ea:	2303      	movs	r3, #3
 800f3ec:	e00f      	b.n	800f40e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	69da      	ldr	r2, [r3, #28]
 800f3f4:	68bb      	ldr	r3, [r7, #8]
 800f3f6:	4013      	ands	r3, r2
 800f3f8:	68ba      	ldr	r2, [r7, #8]
 800f3fa:	429a      	cmp	r2, r3
 800f3fc:	bf0c      	ite	eq
 800f3fe:	2301      	moveq	r3, #1
 800f400:	2300      	movne	r3, #0
 800f402:	b2db      	uxtb	r3, r3
 800f404:	461a      	mov	r2, r3
 800f406:	79fb      	ldrb	r3, [r7, #7]
 800f408:	429a      	cmp	r2, r3
 800f40a:	d0a0      	beq.n	800f34e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f40c:	2300      	movs	r3, #0
}
 800f40e:	4618      	mov	r0, r3
 800f410:	3710      	adds	r7, #16
 800f412:	46bd      	mov	sp, r7
 800f414:	bd80      	pop	{r7, pc}
	...

0800f418 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f418:	b480      	push	{r7}
 800f41a:	b095      	sub	sp, #84	@ 0x54
 800f41c:	af00      	add	r7, sp, #0
 800f41e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	681b      	ldr	r3, [r3, #0]
 800f424:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f426:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f428:	e853 3f00 	ldrex	r3, [r3]
 800f42c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800f42e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f430:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f434:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	461a      	mov	r2, r3
 800f43c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f43e:	643b      	str	r3, [r7, #64]	@ 0x40
 800f440:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f442:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f444:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f446:	e841 2300 	strex	r3, r2, [r1]
 800f44a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f44c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d1e6      	bne.n	800f420 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	681b      	ldr	r3, [r3, #0]
 800f456:	3308      	adds	r3, #8
 800f458:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f45a:	6a3b      	ldr	r3, [r7, #32]
 800f45c:	e853 3f00 	ldrex	r3, [r3]
 800f460:	61fb      	str	r3, [r7, #28]
   return(result);
 800f462:	69fa      	ldr	r2, [r7, #28]
 800f464:	4b1e      	ldr	r3, [pc, #120]	@ (800f4e0 <UART_EndRxTransfer+0xc8>)
 800f466:	4013      	ands	r3, r2
 800f468:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	681b      	ldr	r3, [r3, #0]
 800f46e:	3308      	adds	r3, #8
 800f470:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f472:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f474:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f476:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f478:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f47a:	e841 2300 	strex	r3, r2, [r1]
 800f47e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f482:	2b00      	cmp	r3, #0
 800f484:	d1e5      	bne.n	800f452 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f48a:	2b01      	cmp	r3, #1
 800f48c:	d118      	bne.n	800f4c0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f494:	68fb      	ldr	r3, [r7, #12]
 800f496:	e853 3f00 	ldrex	r3, [r3]
 800f49a:	60bb      	str	r3, [r7, #8]
   return(result);
 800f49c:	68bb      	ldr	r3, [r7, #8]
 800f49e:	f023 0310 	bic.w	r3, r3, #16
 800f4a2:	647b      	str	r3, [r7, #68]	@ 0x44
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	461a      	mov	r2, r3
 800f4aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f4ac:	61bb      	str	r3, [r7, #24]
 800f4ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4b0:	6979      	ldr	r1, [r7, #20]
 800f4b2:	69ba      	ldr	r2, [r7, #24]
 800f4b4:	e841 2300 	strex	r3, r2, [r1]
 800f4b8:	613b      	str	r3, [r7, #16]
   return(result);
 800f4ba:	693b      	ldr	r3, [r7, #16]
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d1e6      	bne.n	800f48e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	2220      	movs	r2, #32
 800f4c4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	2200      	movs	r2, #0
 800f4cc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	2200      	movs	r2, #0
 800f4d2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800f4d4:	bf00      	nop
 800f4d6:	3754      	adds	r7, #84	@ 0x54
 800f4d8:	46bd      	mov	sp, r7
 800f4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4de:	4770      	bx	lr
 800f4e0:	effffffe 	.word	0xeffffffe

0800f4e4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f4e4:	b580      	push	{r7, lr}
 800f4e6:	b084      	sub	sp, #16
 800f4e8:	af00      	add	r7, sp, #0
 800f4ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f4f0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	2200      	movs	r2, #0
 800f4f6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800f4fa:	68fb      	ldr	r3, [r7, #12]
 800f4fc:	2200      	movs	r2, #0
 800f4fe:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f502:	68f8      	ldr	r0, [r7, #12]
 800f504:	f7ff f85c 	bl	800e5c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f508:	bf00      	nop
 800f50a:	3710      	adds	r7, #16
 800f50c:	46bd      	mov	sp, r7
 800f50e:	bd80      	pop	{r7, pc}

0800f510 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f510:	b580      	push	{r7, lr}
 800f512:	b088      	sub	sp, #32
 800f514:	af00      	add	r7, sp, #0
 800f516:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f51e:	68fb      	ldr	r3, [r7, #12]
 800f520:	e853 3f00 	ldrex	r3, [r3]
 800f524:	60bb      	str	r3, [r7, #8]
   return(result);
 800f526:	68bb      	ldr	r3, [r7, #8]
 800f528:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f52c:	61fb      	str	r3, [r7, #28]
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	461a      	mov	r2, r3
 800f534:	69fb      	ldr	r3, [r7, #28]
 800f536:	61bb      	str	r3, [r7, #24]
 800f538:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f53a:	6979      	ldr	r1, [r7, #20]
 800f53c:	69ba      	ldr	r2, [r7, #24]
 800f53e:	e841 2300 	strex	r3, r2, [r1]
 800f542:	613b      	str	r3, [r7, #16]
   return(result);
 800f544:	693b      	ldr	r3, [r7, #16]
 800f546:	2b00      	cmp	r3, #0
 800f548:	d1e6      	bne.n	800f518 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	2220      	movs	r2, #32
 800f54e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	2200      	movs	r2, #0
 800f556:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f558:	6878      	ldr	r0, [r7, #4]
 800f55a:	f7ff f827 	bl	800e5ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f55e:	bf00      	nop
 800f560:	3720      	adds	r7, #32
 800f562:	46bd      	mov	sp, r7
 800f564:	bd80      	pop	{r7, pc}

0800f566 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800f566:	b480      	push	{r7}
 800f568:	b083      	sub	sp, #12
 800f56a:	af00      	add	r7, sp, #0
 800f56c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f56e:	bf00      	nop
 800f570:	370c      	adds	r7, #12
 800f572:	46bd      	mov	sp, r7
 800f574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f578:	4770      	bx	lr

0800f57a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800f57a:	b480      	push	{r7}
 800f57c:	b083      	sub	sp, #12
 800f57e:	af00      	add	r7, sp, #0
 800f580:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800f582:	bf00      	nop
 800f584:	370c      	adds	r7, #12
 800f586:	46bd      	mov	sp, r7
 800f588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f58c:	4770      	bx	lr

0800f58e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800f58e:	b480      	push	{r7}
 800f590:	b083      	sub	sp, #12
 800f592:	af00      	add	r7, sp, #0
 800f594:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800f596:	bf00      	nop
 800f598:	370c      	adds	r7, #12
 800f59a:	46bd      	mov	sp, r7
 800f59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5a0:	4770      	bx	lr

0800f5a2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f5a2:	b480      	push	{r7}
 800f5a4:	b085      	sub	sp, #20
 800f5a6:	af00      	add	r7, sp, #0
 800f5a8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f5b0:	2b01      	cmp	r3, #1
 800f5b2:	d101      	bne.n	800f5b8 <HAL_UARTEx_DisableFifoMode+0x16>
 800f5b4:	2302      	movs	r3, #2
 800f5b6:	e027      	b.n	800f608 <HAL_UARTEx_DisableFifoMode+0x66>
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	2201      	movs	r2, #1
 800f5bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	2224      	movs	r2, #36	@ 0x24
 800f5c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	681b      	ldr	r3, [r3, #0]
 800f5ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	681b      	ldr	r3, [r3, #0]
 800f5d4:	681a      	ldr	r2, [r3, #0]
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	681b      	ldr	r3, [r3, #0]
 800f5da:	f022 0201 	bic.w	r2, r2, #1
 800f5de:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f5e0:	68fb      	ldr	r3, [r7, #12]
 800f5e2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800f5e6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	2200      	movs	r2, #0
 800f5ec:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	681b      	ldr	r3, [r3, #0]
 800f5f2:	68fa      	ldr	r2, [r7, #12]
 800f5f4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	2220      	movs	r2, #32
 800f5fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	2200      	movs	r2, #0
 800f602:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f606:	2300      	movs	r3, #0
}
 800f608:	4618      	mov	r0, r3
 800f60a:	3714      	adds	r7, #20
 800f60c:	46bd      	mov	sp, r7
 800f60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f612:	4770      	bx	lr

0800f614 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f614:	b580      	push	{r7, lr}
 800f616:	b084      	sub	sp, #16
 800f618:	af00      	add	r7, sp, #0
 800f61a:	6078      	str	r0, [r7, #4]
 800f61c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f624:	2b01      	cmp	r3, #1
 800f626:	d101      	bne.n	800f62c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f628:	2302      	movs	r3, #2
 800f62a:	e02d      	b.n	800f688 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	2201      	movs	r2, #1
 800f630:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	2224      	movs	r2, #36	@ 0x24
 800f638:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	681a      	ldr	r2, [r3, #0]
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	681b      	ldr	r3, [r3, #0]
 800f64e:	f022 0201 	bic.w	r2, r2, #1
 800f652:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	689b      	ldr	r3, [r3, #8]
 800f65a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	683a      	ldr	r2, [r7, #0]
 800f664:	430a      	orrs	r2, r1
 800f666:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f668:	6878      	ldr	r0, [r7, #4]
 800f66a:	f000 f84f 	bl	800f70c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	681b      	ldr	r3, [r3, #0]
 800f672:	68fa      	ldr	r2, [r7, #12]
 800f674:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	2220      	movs	r2, #32
 800f67a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	2200      	movs	r2, #0
 800f682:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f686:	2300      	movs	r3, #0
}
 800f688:	4618      	mov	r0, r3
 800f68a:	3710      	adds	r7, #16
 800f68c:	46bd      	mov	sp, r7
 800f68e:	bd80      	pop	{r7, pc}

0800f690 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f690:	b580      	push	{r7, lr}
 800f692:	b084      	sub	sp, #16
 800f694:	af00      	add	r7, sp, #0
 800f696:	6078      	str	r0, [r7, #4]
 800f698:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f6a0:	2b01      	cmp	r3, #1
 800f6a2:	d101      	bne.n	800f6a8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f6a4:	2302      	movs	r3, #2
 800f6a6:	e02d      	b.n	800f704 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	2201      	movs	r2, #1
 800f6ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	2224      	movs	r2, #36	@ 0x24
 800f6b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	681b      	ldr	r3, [r3, #0]
 800f6be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	681a      	ldr	r2, [r3, #0]
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	681b      	ldr	r3, [r3, #0]
 800f6ca:	f022 0201 	bic.w	r2, r2, #1
 800f6ce:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	689b      	ldr	r3, [r3, #8]
 800f6d6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	683a      	ldr	r2, [r7, #0]
 800f6e0:	430a      	orrs	r2, r1
 800f6e2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f6e4:	6878      	ldr	r0, [r7, #4]
 800f6e6:	f000 f811 	bl	800f70c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	681b      	ldr	r3, [r3, #0]
 800f6ee:	68fa      	ldr	r2, [r7, #12]
 800f6f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	2220      	movs	r2, #32
 800f6f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	2200      	movs	r2, #0
 800f6fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f702:	2300      	movs	r3, #0
}
 800f704:	4618      	mov	r0, r3
 800f706:	3710      	adds	r7, #16
 800f708:	46bd      	mov	sp, r7
 800f70a:	bd80      	pop	{r7, pc}

0800f70c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f70c:	b480      	push	{r7}
 800f70e:	b085      	sub	sp, #20
 800f710:	af00      	add	r7, sp, #0
 800f712:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d108      	bne.n	800f72e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	2201      	movs	r2, #1
 800f720:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	2201      	movs	r2, #1
 800f728:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f72c:	e031      	b.n	800f792 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f72e:	2310      	movs	r3, #16
 800f730:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f732:	2310      	movs	r3, #16
 800f734:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	681b      	ldr	r3, [r3, #0]
 800f73a:	689b      	ldr	r3, [r3, #8]
 800f73c:	0e5b      	lsrs	r3, r3, #25
 800f73e:	b2db      	uxtb	r3, r3
 800f740:	f003 0307 	and.w	r3, r3, #7
 800f744:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	681b      	ldr	r3, [r3, #0]
 800f74a:	689b      	ldr	r3, [r3, #8]
 800f74c:	0f5b      	lsrs	r3, r3, #29
 800f74e:	b2db      	uxtb	r3, r3
 800f750:	f003 0307 	and.w	r3, r3, #7
 800f754:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f756:	7bbb      	ldrb	r3, [r7, #14]
 800f758:	7b3a      	ldrb	r2, [r7, #12]
 800f75a:	4911      	ldr	r1, [pc, #68]	@ (800f7a0 <UARTEx_SetNbDataToProcess+0x94>)
 800f75c:	5c8a      	ldrb	r2, [r1, r2]
 800f75e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f762:	7b3a      	ldrb	r2, [r7, #12]
 800f764:	490f      	ldr	r1, [pc, #60]	@ (800f7a4 <UARTEx_SetNbDataToProcess+0x98>)
 800f766:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f768:	fb93 f3f2 	sdiv	r3, r3, r2
 800f76c:	b29a      	uxth	r2, r3
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f774:	7bfb      	ldrb	r3, [r7, #15]
 800f776:	7b7a      	ldrb	r2, [r7, #13]
 800f778:	4909      	ldr	r1, [pc, #36]	@ (800f7a0 <UARTEx_SetNbDataToProcess+0x94>)
 800f77a:	5c8a      	ldrb	r2, [r1, r2]
 800f77c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f780:	7b7a      	ldrb	r2, [r7, #13]
 800f782:	4908      	ldr	r1, [pc, #32]	@ (800f7a4 <UARTEx_SetNbDataToProcess+0x98>)
 800f784:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f786:	fb93 f3f2 	sdiv	r3, r3, r2
 800f78a:	b29a      	uxth	r2, r3
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800f792:	bf00      	nop
 800f794:	3714      	adds	r7, #20
 800f796:	46bd      	mov	sp, r7
 800f798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f79c:	4770      	bx	lr
 800f79e:	bf00      	nop
 800f7a0:	080125d8 	.word	0x080125d8
 800f7a4:	080125e0 	.word	0x080125e0

0800f7a8 <__cvt>:
 800f7a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f7aa:	ed2d 8b02 	vpush	{d8}
 800f7ae:	eeb0 8b40 	vmov.f64	d8, d0
 800f7b2:	b085      	sub	sp, #20
 800f7b4:	4617      	mov	r7, r2
 800f7b6:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800f7b8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f7ba:	ee18 2a90 	vmov	r2, s17
 800f7be:	f025 0520 	bic.w	r5, r5, #32
 800f7c2:	2a00      	cmp	r2, #0
 800f7c4:	bfb6      	itet	lt
 800f7c6:	222d      	movlt	r2, #45	@ 0x2d
 800f7c8:	2200      	movge	r2, #0
 800f7ca:	eeb1 8b40 	vneglt.f64	d8, d0
 800f7ce:	2d46      	cmp	r5, #70	@ 0x46
 800f7d0:	460c      	mov	r4, r1
 800f7d2:	701a      	strb	r2, [r3, #0]
 800f7d4:	d004      	beq.n	800f7e0 <__cvt+0x38>
 800f7d6:	2d45      	cmp	r5, #69	@ 0x45
 800f7d8:	d100      	bne.n	800f7dc <__cvt+0x34>
 800f7da:	3401      	adds	r4, #1
 800f7dc:	2102      	movs	r1, #2
 800f7de:	e000      	b.n	800f7e2 <__cvt+0x3a>
 800f7e0:	2103      	movs	r1, #3
 800f7e2:	ab03      	add	r3, sp, #12
 800f7e4:	9301      	str	r3, [sp, #4]
 800f7e6:	ab02      	add	r3, sp, #8
 800f7e8:	9300      	str	r3, [sp, #0]
 800f7ea:	4622      	mov	r2, r4
 800f7ec:	4633      	mov	r3, r6
 800f7ee:	eeb0 0b48 	vmov.f64	d0, d8
 800f7f2:	f000 fe55 	bl	80104a0 <_dtoa_r>
 800f7f6:	2d47      	cmp	r5, #71	@ 0x47
 800f7f8:	d114      	bne.n	800f824 <__cvt+0x7c>
 800f7fa:	07fb      	lsls	r3, r7, #31
 800f7fc:	d50a      	bpl.n	800f814 <__cvt+0x6c>
 800f7fe:	1902      	adds	r2, r0, r4
 800f800:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800f804:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f808:	bf08      	it	eq
 800f80a:	9203      	streq	r2, [sp, #12]
 800f80c:	2130      	movs	r1, #48	@ 0x30
 800f80e:	9b03      	ldr	r3, [sp, #12]
 800f810:	4293      	cmp	r3, r2
 800f812:	d319      	bcc.n	800f848 <__cvt+0xa0>
 800f814:	9b03      	ldr	r3, [sp, #12]
 800f816:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f818:	1a1b      	subs	r3, r3, r0
 800f81a:	6013      	str	r3, [r2, #0]
 800f81c:	b005      	add	sp, #20
 800f81e:	ecbd 8b02 	vpop	{d8}
 800f822:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f824:	2d46      	cmp	r5, #70	@ 0x46
 800f826:	eb00 0204 	add.w	r2, r0, r4
 800f82a:	d1e9      	bne.n	800f800 <__cvt+0x58>
 800f82c:	7803      	ldrb	r3, [r0, #0]
 800f82e:	2b30      	cmp	r3, #48	@ 0x30
 800f830:	d107      	bne.n	800f842 <__cvt+0x9a>
 800f832:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800f836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f83a:	bf1c      	itt	ne
 800f83c:	f1c4 0401 	rsbne	r4, r4, #1
 800f840:	6034      	strne	r4, [r6, #0]
 800f842:	6833      	ldr	r3, [r6, #0]
 800f844:	441a      	add	r2, r3
 800f846:	e7db      	b.n	800f800 <__cvt+0x58>
 800f848:	1c5c      	adds	r4, r3, #1
 800f84a:	9403      	str	r4, [sp, #12]
 800f84c:	7019      	strb	r1, [r3, #0]
 800f84e:	e7de      	b.n	800f80e <__cvt+0x66>

0800f850 <__exponent>:
 800f850:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f852:	2900      	cmp	r1, #0
 800f854:	bfba      	itte	lt
 800f856:	4249      	neglt	r1, r1
 800f858:	232d      	movlt	r3, #45	@ 0x2d
 800f85a:	232b      	movge	r3, #43	@ 0x2b
 800f85c:	2909      	cmp	r1, #9
 800f85e:	7002      	strb	r2, [r0, #0]
 800f860:	7043      	strb	r3, [r0, #1]
 800f862:	dd29      	ble.n	800f8b8 <__exponent+0x68>
 800f864:	f10d 0307 	add.w	r3, sp, #7
 800f868:	461d      	mov	r5, r3
 800f86a:	270a      	movs	r7, #10
 800f86c:	461a      	mov	r2, r3
 800f86e:	fbb1 f6f7 	udiv	r6, r1, r7
 800f872:	fb07 1416 	mls	r4, r7, r6, r1
 800f876:	3430      	adds	r4, #48	@ 0x30
 800f878:	f802 4c01 	strb.w	r4, [r2, #-1]
 800f87c:	460c      	mov	r4, r1
 800f87e:	2c63      	cmp	r4, #99	@ 0x63
 800f880:	f103 33ff 	add.w	r3, r3, #4294967295
 800f884:	4631      	mov	r1, r6
 800f886:	dcf1      	bgt.n	800f86c <__exponent+0x1c>
 800f888:	3130      	adds	r1, #48	@ 0x30
 800f88a:	1e94      	subs	r4, r2, #2
 800f88c:	f803 1c01 	strb.w	r1, [r3, #-1]
 800f890:	1c41      	adds	r1, r0, #1
 800f892:	4623      	mov	r3, r4
 800f894:	42ab      	cmp	r3, r5
 800f896:	d30a      	bcc.n	800f8ae <__exponent+0x5e>
 800f898:	f10d 0309 	add.w	r3, sp, #9
 800f89c:	1a9b      	subs	r3, r3, r2
 800f89e:	42ac      	cmp	r4, r5
 800f8a0:	bf88      	it	hi
 800f8a2:	2300      	movhi	r3, #0
 800f8a4:	3302      	adds	r3, #2
 800f8a6:	4403      	add	r3, r0
 800f8a8:	1a18      	subs	r0, r3, r0
 800f8aa:	b003      	add	sp, #12
 800f8ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f8ae:	f813 6b01 	ldrb.w	r6, [r3], #1
 800f8b2:	f801 6f01 	strb.w	r6, [r1, #1]!
 800f8b6:	e7ed      	b.n	800f894 <__exponent+0x44>
 800f8b8:	2330      	movs	r3, #48	@ 0x30
 800f8ba:	3130      	adds	r1, #48	@ 0x30
 800f8bc:	7083      	strb	r3, [r0, #2]
 800f8be:	70c1      	strb	r1, [r0, #3]
 800f8c0:	1d03      	adds	r3, r0, #4
 800f8c2:	e7f1      	b.n	800f8a8 <__exponent+0x58>
 800f8c4:	0000      	movs	r0, r0
	...

0800f8c8 <_printf_float>:
 800f8c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8cc:	b08d      	sub	sp, #52	@ 0x34
 800f8ce:	460c      	mov	r4, r1
 800f8d0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800f8d4:	4616      	mov	r6, r2
 800f8d6:	461f      	mov	r7, r3
 800f8d8:	4605      	mov	r5, r0
 800f8da:	f000 fcdf 	bl	801029c <_localeconv_r>
 800f8de:	f8d0 b000 	ldr.w	fp, [r0]
 800f8e2:	4658      	mov	r0, fp
 800f8e4:	f7f0 fd4c 	bl	8000380 <strlen>
 800f8e8:	2300      	movs	r3, #0
 800f8ea:	930a      	str	r3, [sp, #40]	@ 0x28
 800f8ec:	f8d8 3000 	ldr.w	r3, [r8]
 800f8f0:	f894 9018 	ldrb.w	r9, [r4, #24]
 800f8f4:	6822      	ldr	r2, [r4, #0]
 800f8f6:	9005      	str	r0, [sp, #20]
 800f8f8:	3307      	adds	r3, #7
 800f8fa:	f023 0307 	bic.w	r3, r3, #7
 800f8fe:	f103 0108 	add.w	r1, r3, #8
 800f902:	f8c8 1000 	str.w	r1, [r8]
 800f906:	ed93 0b00 	vldr	d0, [r3]
 800f90a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800fb68 <_printf_float+0x2a0>
 800f90e:	eeb0 7bc0 	vabs.f64	d7, d0
 800f912:	eeb4 7b46 	vcmp.f64	d7, d6
 800f916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f91a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800f91e:	dd24      	ble.n	800f96a <_printf_float+0xa2>
 800f920:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800f924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f928:	d502      	bpl.n	800f930 <_printf_float+0x68>
 800f92a:	232d      	movs	r3, #45	@ 0x2d
 800f92c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f930:	498f      	ldr	r1, [pc, #572]	@ (800fb70 <_printf_float+0x2a8>)
 800f932:	4b90      	ldr	r3, [pc, #576]	@ (800fb74 <_printf_float+0x2ac>)
 800f934:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800f938:	bf94      	ite	ls
 800f93a:	4688      	movls	r8, r1
 800f93c:	4698      	movhi	r8, r3
 800f93e:	f022 0204 	bic.w	r2, r2, #4
 800f942:	2303      	movs	r3, #3
 800f944:	6123      	str	r3, [r4, #16]
 800f946:	6022      	str	r2, [r4, #0]
 800f948:	f04f 0a00 	mov.w	sl, #0
 800f94c:	9700      	str	r7, [sp, #0]
 800f94e:	4633      	mov	r3, r6
 800f950:	aa0b      	add	r2, sp, #44	@ 0x2c
 800f952:	4621      	mov	r1, r4
 800f954:	4628      	mov	r0, r5
 800f956:	f000 f9d1 	bl	800fcfc <_printf_common>
 800f95a:	3001      	adds	r0, #1
 800f95c:	f040 8089 	bne.w	800fa72 <_printf_float+0x1aa>
 800f960:	f04f 30ff 	mov.w	r0, #4294967295
 800f964:	b00d      	add	sp, #52	@ 0x34
 800f966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f96a:	eeb4 0b40 	vcmp.f64	d0, d0
 800f96e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f972:	d709      	bvc.n	800f988 <_printf_float+0xc0>
 800f974:	ee10 3a90 	vmov	r3, s1
 800f978:	2b00      	cmp	r3, #0
 800f97a:	bfbc      	itt	lt
 800f97c:	232d      	movlt	r3, #45	@ 0x2d
 800f97e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800f982:	497d      	ldr	r1, [pc, #500]	@ (800fb78 <_printf_float+0x2b0>)
 800f984:	4b7d      	ldr	r3, [pc, #500]	@ (800fb7c <_printf_float+0x2b4>)
 800f986:	e7d5      	b.n	800f934 <_printf_float+0x6c>
 800f988:	6863      	ldr	r3, [r4, #4]
 800f98a:	1c59      	adds	r1, r3, #1
 800f98c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800f990:	d139      	bne.n	800fa06 <_printf_float+0x13e>
 800f992:	2306      	movs	r3, #6
 800f994:	6063      	str	r3, [r4, #4]
 800f996:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800f99a:	2300      	movs	r3, #0
 800f99c:	6022      	str	r2, [r4, #0]
 800f99e:	9303      	str	r3, [sp, #12]
 800f9a0:	ab0a      	add	r3, sp, #40	@ 0x28
 800f9a2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800f9a6:	ab09      	add	r3, sp, #36	@ 0x24
 800f9a8:	9300      	str	r3, [sp, #0]
 800f9aa:	6861      	ldr	r1, [r4, #4]
 800f9ac:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800f9b0:	4628      	mov	r0, r5
 800f9b2:	f7ff fef9 	bl	800f7a8 <__cvt>
 800f9b6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800f9ba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f9bc:	4680      	mov	r8, r0
 800f9be:	d129      	bne.n	800fa14 <_printf_float+0x14c>
 800f9c0:	1cc8      	adds	r0, r1, #3
 800f9c2:	db02      	blt.n	800f9ca <_printf_float+0x102>
 800f9c4:	6863      	ldr	r3, [r4, #4]
 800f9c6:	4299      	cmp	r1, r3
 800f9c8:	dd41      	ble.n	800fa4e <_printf_float+0x186>
 800f9ca:	f1a9 0902 	sub.w	r9, r9, #2
 800f9ce:	fa5f f989 	uxtb.w	r9, r9
 800f9d2:	3901      	subs	r1, #1
 800f9d4:	464a      	mov	r2, r9
 800f9d6:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800f9da:	9109      	str	r1, [sp, #36]	@ 0x24
 800f9dc:	f7ff ff38 	bl	800f850 <__exponent>
 800f9e0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f9e2:	1813      	adds	r3, r2, r0
 800f9e4:	2a01      	cmp	r2, #1
 800f9e6:	4682      	mov	sl, r0
 800f9e8:	6123      	str	r3, [r4, #16]
 800f9ea:	dc02      	bgt.n	800f9f2 <_printf_float+0x12a>
 800f9ec:	6822      	ldr	r2, [r4, #0]
 800f9ee:	07d2      	lsls	r2, r2, #31
 800f9f0:	d501      	bpl.n	800f9f6 <_printf_float+0x12e>
 800f9f2:	3301      	adds	r3, #1
 800f9f4:	6123      	str	r3, [r4, #16]
 800f9f6:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d0a6      	beq.n	800f94c <_printf_float+0x84>
 800f9fe:	232d      	movs	r3, #45	@ 0x2d
 800fa00:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fa04:	e7a2      	b.n	800f94c <_printf_float+0x84>
 800fa06:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800fa0a:	d1c4      	bne.n	800f996 <_printf_float+0xce>
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d1c2      	bne.n	800f996 <_printf_float+0xce>
 800fa10:	2301      	movs	r3, #1
 800fa12:	e7bf      	b.n	800f994 <_printf_float+0xcc>
 800fa14:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800fa18:	d9db      	bls.n	800f9d2 <_printf_float+0x10a>
 800fa1a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800fa1e:	d118      	bne.n	800fa52 <_printf_float+0x18a>
 800fa20:	2900      	cmp	r1, #0
 800fa22:	6863      	ldr	r3, [r4, #4]
 800fa24:	dd0b      	ble.n	800fa3e <_printf_float+0x176>
 800fa26:	6121      	str	r1, [r4, #16]
 800fa28:	b913      	cbnz	r3, 800fa30 <_printf_float+0x168>
 800fa2a:	6822      	ldr	r2, [r4, #0]
 800fa2c:	07d0      	lsls	r0, r2, #31
 800fa2e:	d502      	bpl.n	800fa36 <_printf_float+0x16e>
 800fa30:	3301      	adds	r3, #1
 800fa32:	440b      	add	r3, r1
 800fa34:	6123      	str	r3, [r4, #16]
 800fa36:	65a1      	str	r1, [r4, #88]	@ 0x58
 800fa38:	f04f 0a00 	mov.w	sl, #0
 800fa3c:	e7db      	b.n	800f9f6 <_printf_float+0x12e>
 800fa3e:	b913      	cbnz	r3, 800fa46 <_printf_float+0x17e>
 800fa40:	6822      	ldr	r2, [r4, #0]
 800fa42:	07d2      	lsls	r2, r2, #31
 800fa44:	d501      	bpl.n	800fa4a <_printf_float+0x182>
 800fa46:	3302      	adds	r3, #2
 800fa48:	e7f4      	b.n	800fa34 <_printf_float+0x16c>
 800fa4a:	2301      	movs	r3, #1
 800fa4c:	e7f2      	b.n	800fa34 <_printf_float+0x16c>
 800fa4e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800fa52:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fa54:	4299      	cmp	r1, r3
 800fa56:	db05      	blt.n	800fa64 <_printf_float+0x19c>
 800fa58:	6823      	ldr	r3, [r4, #0]
 800fa5a:	6121      	str	r1, [r4, #16]
 800fa5c:	07d8      	lsls	r0, r3, #31
 800fa5e:	d5ea      	bpl.n	800fa36 <_printf_float+0x16e>
 800fa60:	1c4b      	adds	r3, r1, #1
 800fa62:	e7e7      	b.n	800fa34 <_printf_float+0x16c>
 800fa64:	2900      	cmp	r1, #0
 800fa66:	bfd4      	ite	le
 800fa68:	f1c1 0202 	rsble	r2, r1, #2
 800fa6c:	2201      	movgt	r2, #1
 800fa6e:	4413      	add	r3, r2
 800fa70:	e7e0      	b.n	800fa34 <_printf_float+0x16c>
 800fa72:	6823      	ldr	r3, [r4, #0]
 800fa74:	055a      	lsls	r2, r3, #21
 800fa76:	d407      	bmi.n	800fa88 <_printf_float+0x1c0>
 800fa78:	6923      	ldr	r3, [r4, #16]
 800fa7a:	4642      	mov	r2, r8
 800fa7c:	4631      	mov	r1, r6
 800fa7e:	4628      	mov	r0, r5
 800fa80:	47b8      	blx	r7
 800fa82:	3001      	adds	r0, #1
 800fa84:	d12a      	bne.n	800fadc <_printf_float+0x214>
 800fa86:	e76b      	b.n	800f960 <_printf_float+0x98>
 800fa88:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800fa8c:	f240 80e0 	bls.w	800fc50 <_printf_float+0x388>
 800fa90:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800fa94:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800fa98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa9c:	d133      	bne.n	800fb06 <_printf_float+0x23e>
 800fa9e:	4a38      	ldr	r2, [pc, #224]	@ (800fb80 <_printf_float+0x2b8>)
 800faa0:	2301      	movs	r3, #1
 800faa2:	4631      	mov	r1, r6
 800faa4:	4628      	mov	r0, r5
 800faa6:	47b8      	blx	r7
 800faa8:	3001      	adds	r0, #1
 800faaa:	f43f af59 	beq.w	800f960 <_printf_float+0x98>
 800faae:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800fab2:	4543      	cmp	r3, r8
 800fab4:	db02      	blt.n	800fabc <_printf_float+0x1f4>
 800fab6:	6823      	ldr	r3, [r4, #0]
 800fab8:	07d8      	lsls	r0, r3, #31
 800faba:	d50f      	bpl.n	800fadc <_printf_float+0x214>
 800fabc:	9b05      	ldr	r3, [sp, #20]
 800fabe:	465a      	mov	r2, fp
 800fac0:	4631      	mov	r1, r6
 800fac2:	4628      	mov	r0, r5
 800fac4:	47b8      	blx	r7
 800fac6:	3001      	adds	r0, #1
 800fac8:	f43f af4a 	beq.w	800f960 <_printf_float+0x98>
 800facc:	f04f 0900 	mov.w	r9, #0
 800fad0:	f108 38ff 	add.w	r8, r8, #4294967295
 800fad4:	f104 0a1a 	add.w	sl, r4, #26
 800fad8:	45c8      	cmp	r8, r9
 800fada:	dc09      	bgt.n	800faf0 <_printf_float+0x228>
 800fadc:	6823      	ldr	r3, [r4, #0]
 800fade:	079b      	lsls	r3, r3, #30
 800fae0:	f100 8107 	bmi.w	800fcf2 <_printf_float+0x42a>
 800fae4:	68e0      	ldr	r0, [r4, #12]
 800fae6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fae8:	4298      	cmp	r0, r3
 800faea:	bfb8      	it	lt
 800faec:	4618      	movlt	r0, r3
 800faee:	e739      	b.n	800f964 <_printf_float+0x9c>
 800faf0:	2301      	movs	r3, #1
 800faf2:	4652      	mov	r2, sl
 800faf4:	4631      	mov	r1, r6
 800faf6:	4628      	mov	r0, r5
 800faf8:	47b8      	blx	r7
 800fafa:	3001      	adds	r0, #1
 800fafc:	f43f af30 	beq.w	800f960 <_printf_float+0x98>
 800fb00:	f109 0901 	add.w	r9, r9, #1
 800fb04:	e7e8      	b.n	800fad8 <_printf_float+0x210>
 800fb06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	dc3b      	bgt.n	800fb84 <_printf_float+0x2bc>
 800fb0c:	4a1c      	ldr	r2, [pc, #112]	@ (800fb80 <_printf_float+0x2b8>)
 800fb0e:	2301      	movs	r3, #1
 800fb10:	4631      	mov	r1, r6
 800fb12:	4628      	mov	r0, r5
 800fb14:	47b8      	blx	r7
 800fb16:	3001      	adds	r0, #1
 800fb18:	f43f af22 	beq.w	800f960 <_printf_float+0x98>
 800fb1c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800fb20:	ea59 0303 	orrs.w	r3, r9, r3
 800fb24:	d102      	bne.n	800fb2c <_printf_float+0x264>
 800fb26:	6823      	ldr	r3, [r4, #0]
 800fb28:	07d9      	lsls	r1, r3, #31
 800fb2a:	d5d7      	bpl.n	800fadc <_printf_float+0x214>
 800fb2c:	9b05      	ldr	r3, [sp, #20]
 800fb2e:	465a      	mov	r2, fp
 800fb30:	4631      	mov	r1, r6
 800fb32:	4628      	mov	r0, r5
 800fb34:	47b8      	blx	r7
 800fb36:	3001      	adds	r0, #1
 800fb38:	f43f af12 	beq.w	800f960 <_printf_float+0x98>
 800fb3c:	f04f 0a00 	mov.w	sl, #0
 800fb40:	f104 0b1a 	add.w	fp, r4, #26
 800fb44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fb46:	425b      	negs	r3, r3
 800fb48:	4553      	cmp	r3, sl
 800fb4a:	dc01      	bgt.n	800fb50 <_printf_float+0x288>
 800fb4c:	464b      	mov	r3, r9
 800fb4e:	e794      	b.n	800fa7a <_printf_float+0x1b2>
 800fb50:	2301      	movs	r3, #1
 800fb52:	465a      	mov	r2, fp
 800fb54:	4631      	mov	r1, r6
 800fb56:	4628      	mov	r0, r5
 800fb58:	47b8      	blx	r7
 800fb5a:	3001      	adds	r0, #1
 800fb5c:	f43f af00 	beq.w	800f960 <_printf_float+0x98>
 800fb60:	f10a 0a01 	add.w	sl, sl, #1
 800fb64:	e7ee      	b.n	800fb44 <_printf_float+0x27c>
 800fb66:	bf00      	nop
 800fb68:	ffffffff 	.word	0xffffffff
 800fb6c:	7fefffff 	.word	0x7fefffff
 800fb70:	080125e8 	.word	0x080125e8
 800fb74:	080125ec 	.word	0x080125ec
 800fb78:	080125f0 	.word	0x080125f0
 800fb7c:	080125f4 	.word	0x080125f4
 800fb80:	080125f8 	.word	0x080125f8
 800fb84:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800fb86:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800fb8a:	4553      	cmp	r3, sl
 800fb8c:	bfa8      	it	ge
 800fb8e:	4653      	movge	r3, sl
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	4699      	mov	r9, r3
 800fb94:	dc37      	bgt.n	800fc06 <_printf_float+0x33e>
 800fb96:	2300      	movs	r3, #0
 800fb98:	9307      	str	r3, [sp, #28]
 800fb9a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fb9e:	f104 021a 	add.w	r2, r4, #26
 800fba2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800fba4:	9907      	ldr	r1, [sp, #28]
 800fba6:	9306      	str	r3, [sp, #24]
 800fba8:	eba3 0309 	sub.w	r3, r3, r9
 800fbac:	428b      	cmp	r3, r1
 800fbae:	dc31      	bgt.n	800fc14 <_printf_float+0x34c>
 800fbb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fbb2:	459a      	cmp	sl, r3
 800fbb4:	dc3b      	bgt.n	800fc2e <_printf_float+0x366>
 800fbb6:	6823      	ldr	r3, [r4, #0]
 800fbb8:	07da      	lsls	r2, r3, #31
 800fbba:	d438      	bmi.n	800fc2e <_printf_float+0x366>
 800fbbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fbbe:	ebaa 0903 	sub.w	r9, sl, r3
 800fbc2:	9b06      	ldr	r3, [sp, #24]
 800fbc4:	ebaa 0303 	sub.w	r3, sl, r3
 800fbc8:	4599      	cmp	r9, r3
 800fbca:	bfa8      	it	ge
 800fbcc:	4699      	movge	r9, r3
 800fbce:	f1b9 0f00 	cmp.w	r9, #0
 800fbd2:	dc34      	bgt.n	800fc3e <_printf_float+0x376>
 800fbd4:	f04f 0800 	mov.w	r8, #0
 800fbd8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fbdc:	f104 0b1a 	add.w	fp, r4, #26
 800fbe0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fbe2:	ebaa 0303 	sub.w	r3, sl, r3
 800fbe6:	eba3 0309 	sub.w	r3, r3, r9
 800fbea:	4543      	cmp	r3, r8
 800fbec:	f77f af76 	ble.w	800fadc <_printf_float+0x214>
 800fbf0:	2301      	movs	r3, #1
 800fbf2:	465a      	mov	r2, fp
 800fbf4:	4631      	mov	r1, r6
 800fbf6:	4628      	mov	r0, r5
 800fbf8:	47b8      	blx	r7
 800fbfa:	3001      	adds	r0, #1
 800fbfc:	f43f aeb0 	beq.w	800f960 <_printf_float+0x98>
 800fc00:	f108 0801 	add.w	r8, r8, #1
 800fc04:	e7ec      	b.n	800fbe0 <_printf_float+0x318>
 800fc06:	4642      	mov	r2, r8
 800fc08:	4631      	mov	r1, r6
 800fc0a:	4628      	mov	r0, r5
 800fc0c:	47b8      	blx	r7
 800fc0e:	3001      	adds	r0, #1
 800fc10:	d1c1      	bne.n	800fb96 <_printf_float+0x2ce>
 800fc12:	e6a5      	b.n	800f960 <_printf_float+0x98>
 800fc14:	2301      	movs	r3, #1
 800fc16:	4631      	mov	r1, r6
 800fc18:	4628      	mov	r0, r5
 800fc1a:	9206      	str	r2, [sp, #24]
 800fc1c:	47b8      	blx	r7
 800fc1e:	3001      	adds	r0, #1
 800fc20:	f43f ae9e 	beq.w	800f960 <_printf_float+0x98>
 800fc24:	9b07      	ldr	r3, [sp, #28]
 800fc26:	9a06      	ldr	r2, [sp, #24]
 800fc28:	3301      	adds	r3, #1
 800fc2a:	9307      	str	r3, [sp, #28]
 800fc2c:	e7b9      	b.n	800fba2 <_printf_float+0x2da>
 800fc2e:	9b05      	ldr	r3, [sp, #20]
 800fc30:	465a      	mov	r2, fp
 800fc32:	4631      	mov	r1, r6
 800fc34:	4628      	mov	r0, r5
 800fc36:	47b8      	blx	r7
 800fc38:	3001      	adds	r0, #1
 800fc3a:	d1bf      	bne.n	800fbbc <_printf_float+0x2f4>
 800fc3c:	e690      	b.n	800f960 <_printf_float+0x98>
 800fc3e:	9a06      	ldr	r2, [sp, #24]
 800fc40:	464b      	mov	r3, r9
 800fc42:	4442      	add	r2, r8
 800fc44:	4631      	mov	r1, r6
 800fc46:	4628      	mov	r0, r5
 800fc48:	47b8      	blx	r7
 800fc4a:	3001      	adds	r0, #1
 800fc4c:	d1c2      	bne.n	800fbd4 <_printf_float+0x30c>
 800fc4e:	e687      	b.n	800f960 <_printf_float+0x98>
 800fc50:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800fc54:	f1b9 0f01 	cmp.w	r9, #1
 800fc58:	dc01      	bgt.n	800fc5e <_printf_float+0x396>
 800fc5a:	07db      	lsls	r3, r3, #31
 800fc5c:	d536      	bpl.n	800fccc <_printf_float+0x404>
 800fc5e:	2301      	movs	r3, #1
 800fc60:	4642      	mov	r2, r8
 800fc62:	4631      	mov	r1, r6
 800fc64:	4628      	mov	r0, r5
 800fc66:	47b8      	blx	r7
 800fc68:	3001      	adds	r0, #1
 800fc6a:	f43f ae79 	beq.w	800f960 <_printf_float+0x98>
 800fc6e:	9b05      	ldr	r3, [sp, #20]
 800fc70:	465a      	mov	r2, fp
 800fc72:	4631      	mov	r1, r6
 800fc74:	4628      	mov	r0, r5
 800fc76:	47b8      	blx	r7
 800fc78:	3001      	adds	r0, #1
 800fc7a:	f43f ae71 	beq.w	800f960 <_printf_float+0x98>
 800fc7e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800fc82:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800fc86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc8a:	f109 39ff 	add.w	r9, r9, #4294967295
 800fc8e:	d018      	beq.n	800fcc2 <_printf_float+0x3fa>
 800fc90:	464b      	mov	r3, r9
 800fc92:	f108 0201 	add.w	r2, r8, #1
 800fc96:	4631      	mov	r1, r6
 800fc98:	4628      	mov	r0, r5
 800fc9a:	47b8      	blx	r7
 800fc9c:	3001      	adds	r0, #1
 800fc9e:	d10c      	bne.n	800fcba <_printf_float+0x3f2>
 800fca0:	e65e      	b.n	800f960 <_printf_float+0x98>
 800fca2:	2301      	movs	r3, #1
 800fca4:	465a      	mov	r2, fp
 800fca6:	4631      	mov	r1, r6
 800fca8:	4628      	mov	r0, r5
 800fcaa:	47b8      	blx	r7
 800fcac:	3001      	adds	r0, #1
 800fcae:	f43f ae57 	beq.w	800f960 <_printf_float+0x98>
 800fcb2:	f108 0801 	add.w	r8, r8, #1
 800fcb6:	45c8      	cmp	r8, r9
 800fcb8:	dbf3      	blt.n	800fca2 <_printf_float+0x3da>
 800fcba:	4653      	mov	r3, sl
 800fcbc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800fcc0:	e6dc      	b.n	800fa7c <_printf_float+0x1b4>
 800fcc2:	f04f 0800 	mov.w	r8, #0
 800fcc6:	f104 0b1a 	add.w	fp, r4, #26
 800fcca:	e7f4      	b.n	800fcb6 <_printf_float+0x3ee>
 800fccc:	2301      	movs	r3, #1
 800fcce:	4642      	mov	r2, r8
 800fcd0:	e7e1      	b.n	800fc96 <_printf_float+0x3ce>
 800fcd2:	2301      	movs	r3, #1
 800fcd4:	464a      	mov	r2, r9
 800fcd6:	4631      	mov	r1, r6
 800fcd8:	4628      	mov	r0, r5
 800fcda:	47b8      	blx	r7
 800fcdc:	3001      	adds	r0, #1
 800fcde:	f43f ae3f 	beq.w	800f960 <_printf_float+0x98>
 800fce2:	f108 0801 	add.w	r8, r8, #1
 800fce6:	68e3      	ldr	r3, [r4, #12]
 800fce8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800fcea:	1a5b      	subs	r3, r3, r1
 800fcec:	4543      	cmp	r3, r8
 800fcee:	dcf0      	bgt.n	800fcd2 <_printf_float+0x40a>
 800fcf0:	e6f8      	b.n	800fae4 <_printf_float+0x21c>
 800fcf2:	f04f 0800 	mov.w	r8, #0
 800fcf6:	f104 0919 	add.w	r9, r4, #25
 800fcfa:	e7f4      	b.n	800fce6 <_printf_float+0x41e>

0800fcfc <_printf_common>:
 800fcfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fd00:	4616      	mov	r6, r2
 800fd02:	4698      	mov	r8, r3
 800fd04:	688a      	ldr	r2, [r1, #8]
 800fd06:	690b      	ldr	r3, [r1, #16]
 800fd08:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800fd0c:	4293      	cmp	r3, r2
 800fd0e:	bfb8      	it	lt
 800fd10:	4613      	movlt	r3, r2
 800fd12:	6033      	str	r3, [r6, #0]
 800fd14:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800fd18:	4607      	mov	r7, r0
 800fd1a:	460c      	mov	r4, r1
 800fd1c:	b10a      	cbz	r2, 800fd22 <_printf_common+0x26>
 800fd1e:	3301      	adds	r3, #1
 800fd20:	6033      	str	r3, [r6, #0]
 800fd22:	6823      	ldr	r3, [r4, #0]
 800fd24:	0699      	lsls	r1, r3, #26
 800fd26:	bf42      	ittt	mi
 800fd28:	6833      	ldrmi	r3, [r6, #0]
 800fd2a:	3302      	addmi	r3, #2
 800fd2c:	6033      	strmi	r3, [r6, #0]
 800fd2e:	6825      	ldr	r5, [r4, #0]
 800fd30:	f015 0506 	ands.w	r5, r5, #6
 800fd34:	d106      	bne.n	800fd44 <_printf_common+0x48>
 800fd36:	f104 0a19 	add.w	sl, r4, #25
 800fd3a:	68e3      	ldr	r3, [r4, #12]
 800fd3c:	6832      	ldr	r2, [r6, #0]
 800fd3e:	1a9b      	subs	r3, r3, r2
 800fd40:	42ab      	cmp	r3, r5
 800fd42:	dc26      	bgt.n	800fd92 <_printf_common+0x96>
 800fd44:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800fd48:	6822      	ldr	r2, [r4, #0]
 800fd4a:	3b00      	subs	r3, #0
 800fd4c:	bf18      	it	ne
 800fd4e:	2301      	movne	r3, #1
 800fd50:	0692      	lsls	r2, r2, #26
 800fd52:	d42b      	bmi.n	800fdac <_printf_common+0xb0>
 800fd54:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800fd58:	4641      	mov	r1, r8
 800fd5a:	4638      	mov	r0, r7
 800fd5c:	47c8      	blx	r9
 800fd5e:	3001      	adds	r0, #1
 800fd60:	d01e      	beq.n	800fda0 <_printf_common+0xa4>
 800fd62:	6823      	ldr	r3, [r4, #0]
 800fd64:	6922      	ldr	r2, [r4, #16]
 800fd66:	f003 0306 	and.w	r3, r3, #6
 800fd6a:	2b04      	cmp	r3, #4
 800fd6c:	bf02      	ittt	eq
 800fd6e:	68e5      	ldreq	r5, [r4, #12]
 800fd70:	6833      	ldreq	r3, [r6, #0]
 800fd72:	1aed      	subeq	r5, r5, r3
 800fd74:	68a3      	ldr	r3, [r4, #8]
 800fd76:	bf0c      	ite	eq
 800fd78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fd7c:	2500      	movne	r5, #0
 800fd7e:	4293      	cmp	r3, r2
 800fd80:	bfc4      	itt	gt
 800fd82:	1a9b      	subgt	r3, r3, r2
 800fd84:	18ed      	addgt	r5, r5, r3
 800fd86:	2600      	movs	r6, #0
 800fd88:	341a      	adds	r4, #26
 800fd8a:	42b5      	cmp	r5, r6
 800fd8c:	d11a      	bne.n	800fdc4 <_printf_common+0xc8>
 800fd8e:	2000      	movs	r0, #0
 800fd90:	e008      	b.n	800fda4 <_printf_common+0xa8>
 800fd92:	2301      	movs	r3, #1
 800fd94:	4652      	mov	r2, sl
 800fd96:	4641      	mov	r1, r8
 800fd98:	4638      	mov	r0, r7
 800fd9a:	47c8      	blx	r9
 800fd9c:	3001      	adds	r0, #1
 800fd9e:	d103      	bne.n	800fda8 <_printf_common+0xac>
 800fda0:	f04f 30ff 	mov.w	r0, #4294967295
 800fda4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fda8:	3501      	adds	r5, #1
 800fdaa:	e7c6      	b.n	800fd3a <_printf_common+0x3e>
 800fdac:	18e1      	adds	r1, r4, r3
 800fdae:	1c5a      	adds	r2, r3, #1
 800fdb0:	2030      	movs	r0, #48	@ 0x30
 800fdb2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800fdb6:	4422      	add	r2, r4
 800fdb8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800fdbc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800fdc0:	3302      	adds	r3, #2
 800fdc2:	e7c7      	b.n	800fd54 <_printf_common+0x58>
 800fdc4:	2301      	movs	r3, #1
 800fdc6:	4622      	mov	r2, r4
 800fdc8:	4641      	mov	r1, r8
 800fdca:	4638      	mov	r0, r7
 800fdcc:	47c8      	blx	r9
 800fdce:	3001      	adds	r0, #1
 800fdd0:	d0e6      	beq.n	800fda0 <_printf_common+0xa4>
 800fdd2:	3601      	adds	r6, #1
 800fdd4:	e7d9      	b.n	800fd8a <_printf_common+0x8e>
	...

0800fdd8 <_printf_i>:
 800fdd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fddc:	7e0f      	ldrb	r7, [r1, #24]
 800fdde:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800fde0:	2f78      	cmp	r7, #120	@ 0x78
 800fde2:	4691      	mov	r9, r2
 800fde4:	4680      	mov	r8, r0
 800fde6:	460c      	mov	r4, r1
 800fde8:	469a      	mov	sl, r3
 800fdea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800fdee:	d807      	bhi.n	800fe00 <_printf_i+0x28>
 800fdf0:	2f62      	cmp	r7, #98	@ 0x62
 800fdf2:	d80a      	bhi.n	800fe0a <_printf_i+0x32>
 800fdf4:	2f00      	cmp	r7, #0
 800fdf6:	f000 80d2 	beq.w	800ff9e <_printf_i+0x1c6>
 800fdfa:	2f58      	cmp	r7, #88	@ 0x58
 800fdfc:	f000 80b9 	beq.w	800ff72 <_printf_i+0x19a>
 800fe00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fe04:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800fe08:	e03a      	b.n	800fe80 <_printf_i+0xa8>
 800fe0a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800fe0e:	2b15      	cmp	r3, #21
 800fe10:	d8f6      	bhi.n	800fe00 <_printf_i+0x28>
 800fe12:	a101      	add	r1, pc, #4	@ (adr r1, 800fe18 <_printf_i+0x40>)
 800fe14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fe18:	0800fe71 	.word	0x0800fe71
 800fe1c:	0800fe85 	.word	0x0800fe85
 800fe20:	0800fe01 	.word	0x0800fe01
 800fe24:	0800fe01 	.word	0x0800fe01
 800fe28:	0800fe01 	.word	0x0800fe01
 800fe2c:	0800fe01 	.word	0x0800fe01
 800fe30:	0800fe85 	.word	0x0800fe85
 800fe34:	0800fe01 	.word	0x0800fe01
 800fe38:	0800fe01 	.word	0x0800fe01
 800fe3c:	0800fe01 	.word	0x0800fe01
 800fe40:	0800fe01 	.word	0x0800fe01
 800fe44:	0800ff85 	.word	0x0800ff85
 800fe48:	0800feaf 	.word	0x0800feaf
 800fe4c:	0800ff3f 	.word	0x0800ff3f
 800fe50:	0800fe01 	.word	0x0800fe01
 800fe54:	0800fe01 	.word	0x0800fe01
 800fe58:	0800ffa7 	.word	0x0800ffa7
 800fe5c:	0800fe01 	.word	0x0800fe01
 800fe60:	0800feaf 	.word	0x0800feaf
 800fe64:	0800fe01 	.word	0x0800fe01
 800fe68:	0800fe01 	.word	0x0800fe01
 800fe6c:	0800ff47 	.word	0x0800ff47
 800fe70:	6833      	ldr	r3, [r6, #0]
 800fe72:	1d1a      	adds	r2, r3, #4
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	6032      	str	r2, [r6, #0]
 800fe78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fe7c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800fe80:	2301      	movs	r3, #1
 800fe82:	e09d      	b.n	800ffc0 <_printf_i+0x1e8>
 800fe84:	6833      	ldr	r3, [r6, #0]
 800fe86:	6820      	ldr	r0, [r4, #0]
 800fe88:	1d19      	adds	r1, r3, #4
 800fe8a:	6031      	str	r1, [r6, #0]
 800fe8c:	0606      	lsls	r6, r0, #24
 800fe8e:	d501      	bpl.n	800fe94 <_printf_i+0xbc>
 800fe90:	681d      	ldr	r5, [r3, #0]
 800fe92:	e003      	b.n	800fe9c <_printf_i+0xc4>
 800fe94:	0645      	lsls	r5, r0, #25
 800fe96:	d5fb      	bpl.n	800fe90 <_printf_i+0xb8>
 800fe98:	f9b3 5000 	ldrsh.w	r5, [r3]
 800fe9c:	2d00      	cmp	r5, #0
 800fe9e:	da03      	bge.n	800fea8 <_printf_i+0xd0>
 800fea0:	232d      	movs	r3, #45	@ 0x2d
 800fea2:	426d      	negs	r5, r5
 800fea4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fea8:	4859      	ldr	r0, [pc, #356]	@ (8010010 <_printf_i+0x238>)
 800feaa:	230a      	movs	r3, #10
 800feac:	e011      	b.n	800fed2 <_printf_i+0xfa>
 800feae:	6821      	ldr	r1, [r4, #0]
 800feb0:	6833      	ldr	r3, [r6, #0]
 800feb2:	0608      	lsls	r0, r1, #24
 800feb4:	f853 5b04 	ldr.w	r5, [r3], #4
 800feb8:	d402      	bmi.n	800fec0 <_printf_i+0xe8>
 800feba:	0649      	lsls	r1, r1, #25
 800febc:	bf48      	it	mi
 800febe:	b2ad      	uxthmi	r5, r5
 800fec0:	2f6f      	cmp	r7, #111	@ 0x6f
 800fec2:	4853      	ldr	r0, [pc, #332]	@ (8010010 <_printf_i+0x238>)
 800fec4:	6033      	str	r3, [r6, #0]
 800fec6:	bf14      	ite	ne
 800fec8:	230a      	movne	r3, #10
 800feca:	2308      	moveq	r3, #8
 800fecc:	2100      	movs	r1, #0
 800fece:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800fed2:	6866      	ldr	r6, [r4, #4]
 800fed4:	60a6      	str	r6, [r4, #8]
 800fed6:	2e00      	cmp	r6, #0
 800fed8:	bfa2      	ittt	ge
 800feda:	6821      	ldrge	r1, [r4, #0]
 800fedc:	f021 0104 	bicge.w	r1, r1, #4
 800fee0:	6021      	strge	r1, [r4, #0]
 800fee2:	b90d      	cbnz	r5, 800fee8 <_printf_i+0x110>
 800fee4:	2e00      	cmp	r6, #0
 800fee6:	d04b      	beq.n	800ff80 <_printf_i+0x1a8>
 800fee8:	4616      	mov	r6, r2
 800feea:	fbb5 f1f3 	udiv	r1, r5, r3
 800feee:	fb03 5711 	mls	r7, r3, r1, r5
 800fef2:	5dc7      	ldrb	r7, [r0, r7]
 800fef4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800fef8:	462f      	mov	r7, r5
 800fefa:	42bb      	cmp	r3, r7
 800fefc:	460d      	mov	r5, r1
 800fefe:	d9f4      	bls.n	800feea <_printf_i+0x112>
 800ff00:	2b08      	cmp	r3, #8
 800ff02:	d10b      	bne.n	800ff1c <_printf_i+0x144>
 800ff04:	6823      	ldr	r3, [r4, #0]
 800ff06:	07df      	lsls	r7, r3, #31
 800ff08:	d508      	bpl.n	800ff1c <_printf_i+0x144>
 800ff0a:	6923      	ldr	r3, [r4, #16]
 800ff0c:	6861      	ldr	r1, [r4, #4]
 800ff0e:	4299      	cmp	r1, r3
 800ff10:	bfde      	ittt	le
 800ff12:	2330      	movle	r3, #48	@ 0x30
 800ff14:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ff18:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ff1c:	1b92      	subs	r2, r2, r6
 800ff1e:	6122      	str	r2, [r4, #16]
 800ff20:	f8cd a000 	str.w	sl, [sp]
 800ff24:	464b      	mov	r3, r9
 800ff26:	aa03      	add	r2, sp, #12
 800ff28:	4621      	mov	r1, r4
 800ff2a:	4640      	mov	r0, r8
 800ff2c:	f7ff fee6 	bl	800fcfc <_printf_common>
 800ff30:	3001      	adds	r0, #1
 800ff32:	d14a      	bne.n	800ffca <_printf_i+0x1f2>
 800ff34:	f04f 30ff 	mov.w	r0, #4294967295
 800ff38:	b004      	add	sp, #16
 800ff3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff3e:	6823      	ldr	r3, [r4, #0]
 800ff40:	f043 0320 	orr.w	r3, r3, #32
 800ff44:	6023      	str	r3, [r4, #0]
 800ff46:	4833      	ldr	r0, [pc, #204]	@ (8010014 <_printf_i+0x23c>)
 800ff48:	2778      	movs	r7, #120	@ 0x78
 800ff4a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ff4e:	6823      	ldr	r3, [r4, #0]
 800ff50:	6831      	ldr	r1, [r6, #0]
 800ff52:	061f      	lsls	r7, r3, #24
 800ff54:	f851 5b04 	ldr.w	r5, [r1], #4
 800ff58:	d402      	bmi.n	800ff60 <_printf_i+0x188>
 800ff5a:	065f      	lsls	r7, r3, #25
 800ff5c:	bf48      	it	mi
 800ff5e:	b2ad      	uxthmi	r5, r5
 800ff60:	6031      	str	r1, [r6, #0]
 800ff62:	07d9      	lsls	r1, r3, #31
 800ff64:	bf44      	itt	mi
 800ff66:	f043 0320 	orrmi.w	r3, r3, #32
 800ff6a:	6023      	strmi	r3, [r4, #0]
 800ff6c:	b11d      	cbz	r5, 800ff76 <_printf_i+0x19e>
 800ff6e:	2310      	movs	r3, #16
 800ff70:	e7ac      	b.n	800fecc <_printf_i+0xf4>
 800ff72:	4827      	ldr	r0, [pc, #156]	@ (8010010 <_printf_i+0x238>)
 800ff74:	e7e9      	b.n	800ff4a <_printf_i+0x172>
 800ff76:	6823      	ldr	r3, [r4, #0]
 800ff78:	f023 0320 	bic.w	r3, r3, #32
 800ff7c:	6023      	str	r3, [r4, #0]
 800ff7e:	e7f6      	b.n	800ff6e <_printf_i+0x196>
 800ff80:	4616      	mov	r6, r2
 800ff82:	e7bd      	b.n	800ff00 <_printf_i+0x128>
 800ff84:	6833      	ldr	r3, [r6, #0]
 800ff86:	6825      	ldr	r5, [r4, #0]
 800ff88:	6961      	ldr	r1, [r4, #20]
 800ff8a:	1d18      	adds	r0, r3, #4
 800ff8c:	6030      	str	r0, [r6, #0]
 800ff8e:	062e      	lsls	r6, r5, #24
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	d501      	bpl.n	800ff98 <_printf_i+0x1c0>
 800ff94:	6019      	str	r1, [r3, #0]
 800ff96:	e002      	b.n	800ff9e <_printf_i+0x1c6>
 800ff98:	0668      	lsls	r0, r5, #25
 800ff9a:	d5fb      	bpl.n	800ff94 <_printf_i+0x1bc>
 800ff9c:	8019      	strh	r1, [r3, #0]
 800ff9e:	2300      	movs	r3, #0
 800ffa0:	6123      	str	r3, [r4, #16]
 800ffa2:	4616      	mov	r6, r2
 800ffa4:	e7bc      	b.n	800ff20 <_printf_i+0x148>
 800ffa6:	6833      	ldr	r3, [r6, #0]
 800ffa8:	1d1a      	adds	r2, r3, #4
 800ffaa:	6032      	str	r2, [r6, #0]
 800ffac:	681e      	ldr	r6, [r3, #0]
 800ffae:	6862      	ldr	r2, [r4, #4]
 800ffb0:	2100      	movs	r1, #0
 800ffb2:	4630      	mov	r0, r6
 800ffb4:	f7f0 f994 	bl	80002e0 <memchr>
 800ffb8:	b108      	cbz	r0, 800ffbe <_printf_i+0x1e6>
 800ffba:	1b80      	subs	r0, r0, r6
 800ffbc:	6060      	str	r0, [r4, #4]
 800ffbe:	6863      	ldr	r3, [r4, #4]
 800ffc0:	6123      	str	r3, [r4, #16]
 800ffc2:	2300      	movs	r3, #0
 800ffc4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ffc8:	e7aa      	b.n	800ff20 <_printf_i+0x148>
 800ffca:	6923      	ldr	r3, [r4, #16]
 800ffcc:	4632      	mov	r2, r6
 800ffce:	4649      	mov	r1, r9
 800ffd0:	4640      	mov	r0, r8
 800ffd2:	47d0      	blx	sl
 800ffd4:	3001      	adds	r0, #1
 800ffd6:	d0ad      	beq.n	800ff34 <_printf_i+0x15c>
 800ffd8:	6823      	ldr	r3, [r4, #0]
 800ffda:	079b      	lsls	r3, r3, #30
 800ffdc:	d413      	bmi.n	8010006 <_printf_i+0x22e>
 800ffde:	68e0      	ldr	r0, [r4, #12]
 800ffe0:	9b03      	ldr	r3, [sp, #12]
 800ffe2:	4298      	cmp	r0, r3
 800ffe4:	bfb8      	it	lt
 800ffe6:	4618      	movlt	r0, r3
 800ffe8:	e7a6      	b.n	800ff38 <_printf_i+0x160>
 800ffea:	2301      	movs	r3, #1
 800ffec:	4632      	mov	r2, r6
 800ffee:	4649      	mov	r1, r9
 800fff0:	4640      	mov	r0, r8
 800fff2:	47d0      	blx	sl
 800fff4:	3001      	adds	r0, #1
 800fff6:	d09d      	beq.n	800ff34 <_printf_i+0x15c>
 800fff8:	3501      	adds	r5, #1
 800fffa:	68e3      	ldr	r3, [r4, #12]
 800fffc:	9903      	ldr	r1, [sp, #12]
 800fffe:	1a5b      	subs	r3, r3, r1
 8010000:	42ab      	cmp	r3, r5
 8010002:	dcf2      	bgt.n	800ffea <_printf_i+0x212>
 8010004:	e7eb      	b.n	800ffde <_printf_i+0x206>
 8010006:	2500      	movs	r5, #0
 8010008:	f104 0619 	add.w	r6, r4, #25
 801000c:	e7f5      	b.n	800fffa <_printf_i+0x222>
 801000e:	bf00      	nop
 8010010:	080125fa 	.word	0x080125fa
 8010014:	0801260b 	.word	0x0801260b

08010018 <std>:
 8010018:	2300      	movs	r3, #0
 801001a:	b510      	push	{r4, lr}
 801001c:	4604      	mov	r4, r0
 801001e:	e9c0 3300 	strd	r3, r3, [r0]
 8010022:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010026:	6083      	str	r3, [r0, #8]
 8010028:	8181      	strh	r1, [r0, #12]
 801002a:	6643      	str	r3, [r0, #100]	@ 0x64
 801002c:	81c2      	strh	r2, [r0, #14]
 801002e:	6183      	str	r3, [r0, #24]
 8010030:	4619      	mov	r1, r3
 8010032:	2208      	movs	r2, #8
 8010034:	305c      	adds	r0, #92	@ 0x5c
 8010036:	f000 f928 	bl	801028a <memset>
 801003a:	4b0d      	ldr	r3, [pc, #52]	@ (8010070 <std+0x58>)
 801003c:	6263      	str	r3, [r4, #36]	@ 0x24
 801003e:	4b0d      	ldr	r3, [pc, #52]	@ (8010074 <std+0x5c>)
 8010040:	62a3      	str	r3, [r4, #40]	@ 0x28
 8010042:	4b0d      	ldr	r3, [pc, #52]	@ (8010078 <std+0x60>)
 8010044:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8010046:	4b0d      	ldr	r3, [pc, #52]	@ (801007c <std+0x64>)
 8010048:	6323      	str	r3, [r4, #48]	@ 0x30
 801004a:	4b0d      	ldr	r3, [pc, #52]	@ (8010080 <std+0x68>)
 801004c:	6224      	str	r4, [r4, #32]
 801004e:	429c      	cmp	r4, r3
 8010050:	d006      	beq.n	8010060 <std+0x48>
 8010052:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8010056:	4294      	cmp	r4, r2
 8010058:	d002      	beq.n	8010060 <std+0x48>
 801005a:	33d0      	adds	r3, #208	@ 0xd0
 801005c:	429c      	cmp	r4, r3
 801005e:	d105      	bne.n	801006c <std+0x54>
 8010060:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8010064:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010068:	f000 b98c 	b.w	8010384 <__retarget_lock_init_recursive>
 801006c:	bd10      	pop	{r4, pc}
 801006e:	bf00      	nop
 8010070:	08010205 	.word	0x08010205
 8010074:	08010227 	.word	0x08010227
 8010078:	0801025f 	.word	0x0801025f
 801007c:	08010283 	.word	0x08010283
 8010080:	24000990 	.word	0x24000990

08010084 <stdio_exit_handler>:
 8010084:	4a02      	ldr	r2, [pc, #8]	@ (8010090 <stdio_exit_handler+0xc>)
 8010086:	4903      	ldr	r1, [pc, #12]	@ (8010094 <stdio_exit_handler+0x10>)
 8010088:	4803      	ldr	r0, [pc, #12]	@ (8010098 <stdio_exit_handler+0x14>)
 801008a:	f000 b869 	b.w	8010160 <_fwalk_sglue>
 801008e:	bf00      	nop
 8010090:	24000010 	.word	0x24000010
 8010094:	08011c09 	.word	0x08011c09
 8010098:	24000020 	.word	0x24000020

0801009c <cleanup_stdio>:
 801009c:	6841      	ldr	r1, [r0, #4]
 801009e:	4b0c      	ldr	r3, [pc, #48]	@ (80100d0 <cleanup_stdio+0x34>)
 80100a0:	4299      	cmp	r1, r3
 80100a2:	b510      	push	{r4, lr}
 80100a4:	4604      	mov	r4, r0
 80100a6:	d001      	beq.n	80100ac <cleanup_stdio+0x10>
 80100a8:	f001 fdae 	bl	8011c08 <_fflush_r>
 80100ac:	68a1      	ldr	r1, [r4, #8]
 80100ae:	4b09      	ldr	r3, [pc, #36]	@ (80100d4 <cleanup_stdio+0x38>)
 80100b0:	4299      	cmp	r1, r3
 80100b2:	d002      	beq.n	80100ba <cleanup_stdio+0x1e>
 80100b4:	4620      	mov	r0, r4
 80100b6:	f001 fda7 	bl	8011c08 <_fflush_r>
 80100ba:	68e1      	ldr	r1, [r4, #12]
 80100bc:	4b06      	ldr	r3, [pc, #24]	@ (80100d8 <cleanup_stdio+0x3c>)
 80100be:	4299      	cmp	r1, r3
 80100c0:	d004      	beq.n	80100cc <cleanup_stdio+0x30>
 80100c2:	4620      	mov	r0, r4
 80100c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80100c8:	f001 bd9e 	b.w	8011c08 <_fflush_r>
 80100cc:	bd10      	pop	{r4, pc}
 80100ce:	bf00      	nop
 80100d0:	24000990 	.word	0x24000990
 80100d4:	240009f8 	.word	0x240009f8
 80100d8:	24000a60 	.word	0x24000a60

080100dc <global_stdio_init.part.0>:
 80100dc:	b510      	push	{r4, lr}
 80100de:	4b0b      	ldr	r3, [pc, #44]	@ (801010c <global_stdio_init.part.0+0x30>)
 80100e0:	4c0b      	ldr	r4, [pc, #44]	@ (8010110 <global_stdio_init.part.0+0x34>)
 80100e2:	4a0c      	ldr	r2, [pc, #48]	@ (8010114 <global_stdio_init.part.0+0x38>)
 80100e4:	601a      	str	r2, [r3, #0]
 80100e6:	4620      	mov	r0, r4
 80100e8:	2200      	movs	r2, #0
 80100ea:	2104      	movs	r1, #4
 80100ec:	f7ff ff94 	bl	8010018 <std>
 80100f0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80100f4:	2201      	movs	r2, #1
 80100f6:	2109      	movs	r1, #9
 80100f8:	f7ff ff8e 	bl	8010018 <std>
 80100fc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8010100:	2202      	movs	r2, #2
 8010102:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010106:	2112      	movs	r1, #18
 8010108:	f7ff bf86 	b.w	8010018 <std>
 801010c:	24000ac8 	.word	0x24000ac8
 8010110:	24000990 	.word	0x24000990
 8010114:	08010085 	.word	0x08010085

08010118 <__sfp_lock_acquire>:
 8010118:	4801      	ldr	r0, [pc, #4]	@ (8010120 <__sfp_lock_acquire+0x8>)
 801011a:	f000 b934 	b.w	8010386 <__retarget_lock_acquire_recursive>
 801011e:	bf00      	nop
 8010120:	24000ad1 	.word	0x24000ad1

08010124 <__sfp_lock_release>:
 8010124:	4801      	ldr	r0, [pc, #4]	@ (801012c <__sfp_lock_release+0x8>)
 8010126:	f000 b92f 	b.w	8010388 <__retarget_lock_release_recursive>
 801012a:	bf00      	nop
 801012c:	24000ad1 	.word	0x24000ad1

08010130 <__sinit>:
 8010130:	b510      	push	{r4, lr}
 8010132:	4604      	mov	r4, r0
 8010134:	f7ff fff0 	bl	8010118 <__sfp_lock_acquire>
 8010138:	6a23      	ldr	r3, [r4, #32]
 801013a:	b11b      	cbz	r3, 8010144 <__sinit+0x14>
 801013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010140:	f7ff bff0 	b.w	8010124 <__sfp_lock_release>
 8010144:	4b04      	ldr	r3, [pc, #16]	@ (8010158 <__sinit+0x28>)
 8010146:	6223      	str	r3, [r4, #32]
 8010148:	4b04      	ldr	r3, [pc, #16]	@ (801015c <__sinit+0x2c>)
 801014a:	681b      	ldr	r3, [r3, #0]
 801014c:	2b00      	cmp	r3, #0
 801014e:	d1f5      	bne.n	801013c <__sinit+0xc>
 8010150:	f7ff ffc4 	bl	80100dc <global_stdio_init.part.0>
 8010154:	e7f2      	b.n	801013c <__sinit+0xc>
 8010156:	bf00      	nop
 8010158:	0801009d 	.word	0x0801009d
 801015c:	24000ac8 	.word	0x24000ac8

08010160 <_fwalk_sglue>:
 8010160:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010164:	4607      	mov	r7, r0
 8010166:	4688      	mov	r8, r1
 8010168:	4614      	mov	r4, r2
 801016a:	2600      	movs	r6, #0
 801016c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010170:	f1b9 0901 	subs.w	r9, r9, #1
 8010174:	d505      	bpl.n	8010182 <_fwalk_sglue+0x22>
 8010176:	6824      	ldr	r4, [r4, #0]
 8010178:	2c00      	cmp	r4, #0
 801017a:	d1f7      	bne.n	801016c <_fwalk_sglue+0xc>
 801017c:	4630      	mov	r0, r6
 801017e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010182:	89ab      	ldrh	r3, [r5, #12]
 8010184:	2b01      	cmp	r3, #1
 8010186:	d907      	bls.n	8010198 <_fwalk_sglue+0x38>
 8010188:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801018c:	3301      	adds	r3, #1
 801018e:	d003      	beq.n	8010198 <_fwalk_sglue+0x38>
 8010190:	4629      	mov	r1, r5
 8010192:	4638      	mov	r0, r7
 8010194:	47c0      	blx	r8
 8010196:	4306      	orrs	r6, r0
 8010198:	3568      	adds	r5, #104	@ 0x68
 801019a:	e7e9      	b.n	8010170 <_fwalk_sglue+0x10>

0801019c <sniprintf>:
 801019c:	b40c      	push	{r2, r3}
 801019e:	b530      	push	{r4, r5, lr}
 80101a0:	4b17      	ldr	r3, [pc, #92]	@ (8010200 <sniprintf+0x64>)
 80101a2:	1e0c      	subs	r4, r1, #0
 80101a4:	681d      	ldr	r5, [r3, #0]
 80101a6:	b09d      	sub	sp, #116	@ 0x74
 80101a8:	da08      	bge.n	80101bc <sniprintf+0x20>
 80101aa:	238b      	movs	r3, #139	@ 0x8b
 80101ac:	602b      	str	r3, [r5, #0]
 80101ae:	f04f 30ff 	mov.w	r0, #4294967295
 80101b2:	b01d      	add	sp, #116	@ 0x74
 80101b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80101b8:	b002      	add	sp, #8
 80101ba:	4770      	bx	lr
 80101bc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80101c0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80101c4:	bf14      	ite	ne
 80101c6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80101ca:	4623      	moveq	r3, r4
 80101cc:	9304      	str	r3, [sp, #16]
 80101ce:	9307      	str	r3, [sp, #28]
 80101d0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80101d4:	9002      	str	r0, [sp, #8]
 80101d6:	9006      	str	r0, [sp, #24]
 80101d8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80101dc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80101de:	ab21      	add	r3, sp, #132	@ 0x84
 80101e0:	a902      	add	r1, sp, #8
 80101e2:	4628      	mov	r0, r5
 80101e4:	9301      	str	r3, [sp, #4]
 80101e6:	f001 fb8f 	bl	8011908 <_svfiprintf_r>
 80101ea:	1c43      	adds	r3, r0, #1
 80101ec:	bfbc      	itt	lt
 80101ee:	238b      	movlt	r3, #139	@ 0x8b
 80101f0:	602b      	strlt	r3, [r5, #0]
 80101f2:	2c00      	cmp	r4, #0
 80101f4:	d0dd      	beq.n	80101b2 <sniprintf+0x16>
 80101f6:	9b02      	ldr	r3, [sp, #8]
 80101f8:	2200      	movs	r2, #0
 80101fa:	701a      	strb	r2, [r3, #0]
 80101fc:	e7d9      	b.n	80101b2 <sniprintf+0x16>
 80101fe:	bf00      	nop
 8010200:	2400001c 	.word	0x2400001c

08010204 <__sread>:
 8010204:	b510      	push	{r4, lr}
 8010206:	460c      	mov	r4, r1
 8010208:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801020c:	f000 f86c 	bl	80102e8 <_read_r>
 8010210:	2800      	cmp	r0, #0
 8010212:	bfab      	itete	ge
 8010214:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8010216:	89a3      	ldrhlt	r3, [r4, #12]
 8010218:	181b      	addge	r3, r3, r0
 801021a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801021e:	bfac      	ite	ge
 8010220:	6563      	strge	r3, [r4, #84]	@ 0x54
 8010222:	81a3      	strhlt	r3, [r4, #12]
 8010224:	bd10      	pop	{r4, pc}

08010226 <__swrite>:
 8010226:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801022a:	461f      	mov	r7, r3
 801022c:	898b      	ldrh	r3, [r1, #12]
 801022e:	05db      	lsls	r3, r3, #23
 8010230:	4605      	mov	r5, r0
 8010232:	460c      	mov	r4, r1
 8010234:	4616      	mov	r6, r2
 8010236:	d505      	bpl.n	8010244 <__swrite+0x1e>
 8010238:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801023c:	2302      	movs	r3, #2
 801023e:	2200      	movs	r2, #0
 8010240:	f000 f840 	bl	80102c4 <_lseek_r>
 8010244:	89a3      	ldrh	r3, [r4, #12]
 8010246:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801024a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801024e:	81a3      	strh	r3, [r4, #12]
 8010250:	4632      	mov	r2, r6
 8010252:	463b      	mov	r3, r7
 8010254:	4628      	mov	r0, r5
 8010256:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801025a:	f000 b857 	b.w	801030c <_write_r>

0801025e <__sseek>:
 801025e:	b510      	push	{r4, lr}
 8010260:	460c      	mov	r4, r1
 8010262:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010266:	f000 f82d 	bl	80102c4 <_lseek_r>
 801026a:	1c43      	adds	r3, r0, #1
 801026c:	89a3      	ldrh	r3, [r4, #12]
 801026e:	bf15      	itete	ne
 8010270:	6560      	strne	r0, [r4, #84]	@ 0x54
 8010272:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8010276:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801027a:	81a3      	strheq	r3, [r4, #12]
 801027c:	bf18      	it	ne
 801027e:	81a3      	strhne	r3, [r4, #12]
 8010280:	bd10      	pop	{r4, pc}

08010282 <__sclose>:
 8010282:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010286:	f000 b80d 	b.w	80102a4 <_close_r>

0801028a <memset>:
 801028a:	4402      	add	r2, r0
 801028c:	4603      	mov	r3, r0
 801028e:	4293      	cmp	r3, r2
 8010290:	d100      	bne.n	8010294 <memset+0xa>
 8010292:	4770      	bx	lr
 8010294:	f803 1b01 	strb.w	r1, [r3], #1
 8010298:	e7f9      	b.n	801028e <memset+0x4>
	...

0801029c <_localeconv_r>:
 801029c:	4800      	ldr	r0, [pc, #0]	@ (80102a0 <_localeconv_r+0x4>)
 801029e:	4770      	bx	lr
 80102a0:	2400015c 	.word	0x2400015c

080102a4 <_close_r>:
 80102a4:	b538      	push	{r3, r4, r5, lr}
 80102a6:	4d06      	ldr	r5, [pc, #24]	@ (80102c0 <_close_r+0x1c>)
 80102a8:	2300      	movs	r3, #0
 80102aa:	4604      	mov	r4, r0
 80102ac:	4608      	mov	r0, r1
 80102ae:	602b      	str	r3, [r5, #0]
 80102b0:	f7f1 fed4 	bl	800205c <_close>
 80102b4:	1c43      	adds	r3, r0, #1
 80102b6:	d102      	bne.n	80102be <_close_r+0x1a>
 80102b8:	682b      	ldr	r3, [r5, #0]
 80102ba:	b103      	cbz	r3, 80102be <_close_r+0x1a>
 80102bc:	6023      	str	r3, [r4, #0]
 80102be:	bd38      	pop	{r3, r4, r5, pc}
 80102c0:	24000acc 	.word	0x24000acc

080102c4 <_lseek_r>:
 80102c4:	b538      	push	{r3, r4, r5, lr}
 80102c6:	4d07      	ldr	r5, [pc, #28]	@ (80102e4 <_lseek_r+0x20>)
 80102c8:	4604      	mov	r4, r0
 80102ca:	4608      	mov	r0, r1
 80102cc:	4611      	mov	r1, r2
 80102ce:	2200      	movs	r2, #0
 80102d0:	602a      	str	r2, [r5, #0]
 80102d2:	461a      	mov	r2, r3
 80102d4:	f7f1 fee9 	bl	80020aa <_lseek>
 80102d8:	1c43      	adds	r3, r0, #1
 80102da:	d102      	bne.n	80102e2 <_lseek_r+0x1e>
 80102dc:	682b      	ldr	r3, [r5, #0]
 80102de:	b103      	cbz	r3, 80102e2 <_lseek_r+0x1e>
 80102e0:	6023      	str	r3, [r4, #0]
 80102e2:	bd38      	pop	{r3, r4, r5, pc}
 80102e4:	24000acc 	.word	0x24000acc

080102e8 <_read_r>:
 80102e8:	b538      	push	{r3, r4, r5, lr}
 80102ea:	4d07      	ldr	r5, [pc, #28]	@ (8010308 <_read_r+0x20>)
 80102ec:	4604      	mov	r4, r0
 80102ee:	4608      	mov	r0, r1
 80102f0:	4611      	mov	r1, r2
 80102f2:	2200      	movs	r2, #0
 80102f4:	602a      	str	r2, [r5, #0]
 80102f6:	461a      	mov	r2, r3
 80102f8:	f7f1 fe77 	bl	8001fea <_read>
 80102fc:	1c43      	adds	r3, r0, #1
 80102fe:	d102      	bne.n	8010306 <_read_r+0x1e>
 8010300:	682b      	ldr	r3, [r5, #0]
 8010302:	b103      	cbz	r3, 8010306 <_read_r+0x1e>
 8010304:	6023      	str	r3, [r4, #0]
 8010306:	bd38      	pop	{r3, r4, r5, pc}
 8010308:	24000acc 	.word	0x24000acc

0801030c <_write_r>:
 801030c:	b538      	push	{r3, r4, r5, lr}
 801030e:	4d07      	ldr	r5, [pc, #28]	@ (801032c <_write_r+0x20>)
 8010310:	4604      	mov	r4, r0
 8010312:	4608      	mov	r0, r1
 8010314:	4611      	mov	r1, r2
 8010316:	2200      	movs	r2, #0
 8010318:	602a      	str	r2, [r5, #0]
 801031a:	461a      	mov	r2, r3
 801031c:	f7f1 fe82 	bl	8002024 <_write>
 8010320:	1c43      	adds	r3, r0, #1
 8010322:	d102      	bne.n	801032a <_write_r+0x1e>
 8010324:	682b      	ldr	r3, [r5, #0]
 8010326:	b103      	cbz	r3, 801032a <_write_r+0x1e>
 8010328:	6023      	str	r3, [r4, #0]
 801032a:	bd38      	pop	{r3, r4, r5, pc}
 801032c:	24000acc 	.word	0x24000acc

08010330 <__errno>:
 8010330:	4b01      	ldr	r3, [pc, #4]	@ (8010338 <__errno+0x8>)
 8010332:	6818      	ldr	r0, [r3, #0]
 8010334:	4770      	bx	lr
 8010336:	bf00      	nop
 8010338:	2400001c 	.word	0x2400001c

0801033c <__libc_init_array>:
 801033c:	b570      	push	{r4, r5, r6, lr}
 801033e:	4d0d      	ldr	r5, [pc, #52]	@ (8010374 <__libc_init_array+0x38>)
 8010340:	4c0d      	ldr	r4, [pc, #52]	@ (8010378 <__libc_init_array+0x3c>)
 8010342:	1b64      	subs	r4, r4, r5
 8010344:	10a4      	asrs	r4, r4, #2
 8010346:	2600      	movs	r6, #0
 8010348:	42a6      	cmp	r6, r4
 801034a:	d109      	bne.n	8010360 <__libc_init_array+0x24>
 801034c:	4d0b      	ldr	r5, [pc, #44]	@ (801037c <__libc_init_array+0x40>)
 801034e:	4c0c      	ldr	r4, [pc, #48]	@ (8010380 <__libc_init_array+0x44>)
 8010350:	f001 fff8 	bl	8012344 <_init>
 8010354:	1b64      	subs	r4, r4, r5
 8010356:	10a4      	asrs	r4, r4, #2
 8010358:	2600      	movs	r6, #0
 801035a:	42a6      	cmp	r6, r4
 801035c:	d105      	bne.n	801036a <__libc_init_array+0x2e>
 801035e:	bd70      	pop	{r4, r5, r6, pc}
 8010360:	f855 3b04 	ldr.w	r3, [r5], #4
 8010364:	4798      	blx	r3
 8010366:	3601      	adds	r6, #1
 8010368:	e7ee      	b.n	8010348 <__libc_init_array+0xc>
 801036a:	f855 3b04 	ldr.w	r3, [r5], #4
 801036e:	4798      	blx	r3
 8010370:	3601      	adds	r6, #1
 8010372:	e7f2      	b.n	801035a <__libc_init_array+0x1e>
 8010374:	08012960 	.word	0x08012960
 8010378:	08012960 	.word	0x08012960
 801037c:	08012960 	.word	0x08012960
 8010380:	08012964 	.word	0x08012964

08010384 <__retarget_lock_init_recursive>:
 8010384:	4770      	bx	lr

08010386 <__retarget_lock_acquire_recursive>:
 8010386:	4770      	bx	lr

08010388 <__retarget_lock_release_recursive>:
 8010388:	4770      	bx	lr

0801038a <quorem>:
 801038a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801038e:	6903      	ldr	r3, [r0, #16]
 8010390:	690c      	ldr	r4, [r1, #16]
 8010392:	42a3      	cmp	r3, r4
 8010394:	4607      	mov	r7, r0
 8010396:	db7e      	blt.n	8010496 <quorem+0x10c>
 8010398:	3c01      	subs	r4, #1
 801039a:	f101 0814 	add.w	r8, r1, #20
 801039e:	00a3      	lsls	r3, r4, #2
 80103a0:	f100 0514 	add.w	r5, r0, #20
 80103a4:	9300      	str	r3, [sp, #0]
 80103a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80103aa:	9301      	str	r3, [sp, #4]
 80103ac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80103b0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80103b4:	3301      	adds	r3, #1
 80103b6:	429a      	cmp	r2, r3
 80103b8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80103bc:	fbb2 f6f3 	udiv	r6, r2, r3
 80103c0:	d32e      	bcc.n	8010420 <quorem+0x96>
 80103c2:	f04f 0a00 	mov.w	sl, #0
 80103c6:	46c4      	mov	ip, r8
 80103c8:	46ae      	mov	lr, r5
 80103ca:	46d3      	mov	fp, sl
 80103cc:	f85c 3b04 	ldr.w	r3, [ip], #4
 80103d0:	b298      	uxth	r0, r3
 80103d2:	fb06 a000 	mla	r0, r6, r0, sl
 80103d6:	0c02      	lsrs	r2, r0, #16
 80103d8:	0c1b      	lsrs	r3, r3, #16
 80103da:	fb06 2303 	mla	r3, r6, r3, r2
 80103de:	f8de 2000 	ldr.w	r2, [lr]
 80103e2:	b280      	uxth	r0, r0
 80103e4:	b292      	uxth	r2, r2
 80103e6:	1a12      	subs	r2, r2, r0
 80103e8:	445a      	add	r2, fp
 80103ea:	f8de 0000 	ldr.w	r0, [lr]
 80103ee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80103f2:	b29b      	uxth	r3, r3
 80103f4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80103f8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80103fc:	b292      	uxth	r2, r2
 80103fe:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8010402:	45e1      	cmp	r9, ip
 8010404:	f84e 2b04 	str.w	r2, [lr], #4
 8010408:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801040c:	d2de      	bcs.n	80103cc <quorem+0x42>
 801040e:	9b00      	ldr	r3, [sp, #0]
 8010410:	58eb      	ldr	r3, [r5, r3]
 8010412:	b92b      	cbnz	r3, 8010420 <quorem+0x96>
 8010414:	9b01      	ldr	r3, [sp, #4]
 8010416:	3b04      	subs	r3, #4
 8010418:	429d      	cmp	r5, r3
 801041a:	461a      	mov	r2, r3
 801041c:	d32f      	bcc.n	801047e <quorem+0xf4>
 801041e:	613c      	str	r4, [r7, #16]
 8010420:	4638      	mov	r0, r7
 8010422:	f001 f90d 	bl	8011640 <__mcmp>
 8010426:	2800      	cmp	r0, #0
 8010428:	db25      	blt.n	8010476 <quorem+0xec>
 801042a:	4629      	mov	r1, r5
 801042c:	2000      	movs	r0, #0
 801042e:	f858 2b04 	ldr.w	r2, [r8], #4
 8010432:	f8d1 c000 	ldr.w	ip, [r1]
 8010436:	fa1f fe82 	uxth.w	lr, r2
 801043a:	fa1f f38c 	uxth.w	r3, ip
 801043e:	eba3 030e 	sub.w	r3, r3, lr
 8010442:	4403      	add	r3, r0
 8010444:	0c12      	lsrs	r2, r2, #16
 8010446:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801044a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801044e:	b29b      	uxth	r3, r3
 8010450:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010454:	45c1      	cmp	r9, r8
 8010456:	f841 3b04 	str.w	r3, [r1], #4
 801045a:	ea4f 4022 	mov.w	r0, r2, asr #16
 801045e:	d2e6      	bcs.n	801042e <quorem+0xa4>
 8010460:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010464:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010468:	b922      	cbnz	r2, 8010474 <quorem+0xea>
 801046a:	3b04      	subs	r3, #4
 801046c:	429d      	cmp	r5, r3
 801046e:	461a      	mov	r2, r3
 8010470:	d30b      	bcc.n	801048a <quorem+0x100>
 8010472:	613c      	str	r4, [r7, #16]
 8010474:	3601      	adds	r6, #1
 8010476:	4630      	mov	r0, r6
 8010478:	b003      	add	sp, #12
 801047a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801047e:	6812      	ldr	r2, [r2, #0]
 8010480:	3b04      	subs	r3, #4
 8010482:	2a00      	cmp	r2, #0
 8010484:	d1cb      	bne.n	801041e <quorem+0x94>
 8010486:	3c01      	subs	r4, #1
 8010488:	e7c6      	b.n	8010418 <quorem+0x8e>
 801048a:	6812      	ldr	r2, [r2, #0]
 801048c:	3b04      	subs	r3, #4
 801048e:	2a00      	cmp	r2, #0
 8010490:	d1ef      	bne.n	8010472 <quorem+0xe8>
 8010492:	3c01      	subs	r4, #1
 8010494:	e7ea      	b.n	801046c <quorem+0xe2>
 8010496:	2000      	movs	r0, #0
 8010498:	e7ee      	b.n	8010478 <quorem+0xee>
 801049a:	0000      	movs	r0, r0
 801049c:	0000      	movs	r0, r0
	...

080104a0 <_dtoa_r>:
 80104a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104a4:	ed2d 8b02 	vpush	{d8}
 80104a8:	69c7      	ldr	r7, [r0, #28]
 80104aa:	b091      	sub	sp, #68	@ 0x44
 80104ac:	ed8d 0b02 	vstr	d0, [sp, #8]
 80104b0:	ec55 4b10 	vmov	r4, r5, d0
 80104b4:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 80104b6:	9107      	str	r1, [sp, #28]
 80104b8:	4681      	mov	r9, r0
 80104ba:	9209      	str	r2, [sp, #36]	@ 0x24
 80104bc:	930d      	str	r3, [sp, #52]	@ 0x34
 80104be:	b97f      	cbnz	r7, 80104e0 <_dtoa_r+0x40>
 80104c0:	2010      	movs	r0, #16
 80104c2:	f000 fd8d 	bl	8010fe0 <malloc>
 80104c6:	4602      	mov	r2, r0
 80104c8:	f8c9 001c 	str.w	r0, [r9, #28]
 80104cc:	b920      	cbnz	r0, 80104d8 <_dtoa_r+0x38>
 80104ce:	4ba0      	ldr	r3, [pc, #640]	@ (8010750 <_dtoa_r+0x2b0>)
 80104d0:	21ef      	movs	r1, #239	@ 0xef
 80104d2:	48a0      	ldr	r0, [pc, #640]	@ (8010754 <_dtoa_r+0x2b4>)
 80104d4:	f001 fbf8 	bl	8011cc8 <__assert_func>
 80104d8:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80104dc:	6007      	str	r7, [r0, #0]
 80104de:	60c7      	str	r7, [r0, #12]
 80104e0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80104e4:	6819      	ldr	r1, [r3, #0]
 80104e6:	b159      	cbz	r1, 8010500 <_dtoa_r+0x60>
 80104e8:	685a      	ldr	r2, [r3, #4]
 80104ea:	604a      	str	r2, [r1, #4]
 80104ec:	2301      	movs	r3, #1
 80104ee:	4093      	lsls	r3, r2
 80104f0:	608b      	str	r3, [r1, #8]
 80104f2:	4648      	mov	r0, r9
 80104f4:	f000 fe6a 	bl	80111cc <_Bfree>
 80104f8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80104fc:	2200      	movs	r2, #0
 80104fe:	601a      	str	r2, [r3, #0]
 8010500:	1e2b      	subs	r3, r5, #0
 8010502:	bfbb      	ittet	lt
 8010504:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8010508:	9303      	strlt	r3, [sp, #12]
 801050a:	2300      	movge	r3, #0
 801050c:	2201      	movlt	r2, #1
 801050e:	bfac      	ite	ge
 8010510:	6033      	strge	r3, [r6, #0]
 8010512:	6032      	strlt	r2, [r6, #0]
 8010514:	4b90      	ldr	r3, [pc, #576]	@ (8010758 <_dtoa_r+0x2b8>)
 8010516:	9e03      	ldr	r6, [sp, #12]
 8010518:	43b3      	bics	r3, r6
 801051a:	d110      	bne.n	801053e <_dtoa_r+0x9e>
 801051c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801051e:	f242 730f 	movw	r3, #9999	@ 0x270f
 8010522:	6013      	str	r3, [r2, #0]
 8010524:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8010528:	4323      	orrs	r3, r4
 801052a:	f000 84de 	beq.w	8010eea <_dtoa_r+0xa4a>
 801052e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010530:	4f8a      	ldr	r7, [pc, #552]	@ (801075c <_dtoa_r+0x2bc>)
 8010532:	2b00      	cmp	r3, #0
 8010534:	f000 84e0 	beq.w	8010ef8 <_dtoa_r+0xa58>
 8010538:	1cfb      	adds	r3, r7, #3
 801053a:	f000 bcdb 	b.w	8010ef4 <_dtoa_r+0xa54>
 801053e:	ed9d 8b02 	vldr	d8, [sp, #8]
 8010542:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801054a:	d10a      	bne.n	8010562 <_dtoa_r+0xc2>
 801054c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801054e:	2301      	movs	r3, #1
 8010550:	6013      	str	r3, [r2, #0]
 8010552:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010554:	b113      	cbz	r3, 801055c <_dtoa_r+0xbc>
 8010556:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8010558:	4b81      	ldr	r3, [pc, #516]	@ (8010760 <_dtoa_r+0x2c0>)
 801055a:	6013      	str	r3, [r2, #0]
 801055c:	4f81      	ldr	r7, [pc, #516]	@ (8010764 <_dtoa_r+0x2c4>)
 801055e:	f000 bccb 	b.w	8010ef8 <_dtoa_r+0xa58>
 8010562:	aa0e      	add	r2, sp, #56	@ 0x38
 8010564:	a90f      	add	r1, sp, #60	@ 0x3c
 8010566:	4648      	mov	r0, r9
 8010568:	eeb0 0b48 	vmov.f64	d0, d8
 801056c:	f001 f918 	bl	80117a0 <__d2b>
 8010570:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8010574:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010576:	9001      	str	r0, [sp, #4]
 8010578:	2b00      	cmp	r3, #0
 801057a:	d045      	beq.n	8010608 <_dtoa_r+0x168>
 801057c:	eeb0 7b48 	vmov.f64	d7, d8
 8010580:	ee18 1a90 	vmov	r1, s17
 8010584:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8010588:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 801058c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8010590:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8010594:	2500      	movs	r5, #0
 8010596:	ee07 1a90 	vmov	s15, r1
 801059a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 801059e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8010738 <_dtoa_r+0x298>
 80105a2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80105a6:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8010740 <_dtoa_r+0x2a0>
 80105aa:	eea7 6b05 	vfma.f64	d6, d7, d5
 80105ae:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8010748 <_dtoa_r+0x2a8>
 80105b2:	ee07 3a90 	vmov	s15, r3
 80105b6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80105ba:	eeb0 7b46 	vmov.f64	d7, d6
 80105be:	eea4 7b05 	vfma.f64	d7, d4, d5
 80105c2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80105c6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80105ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105ce:	ee16 8a90 	vmov	r8, s13
 80105d2:	d508      	bpl.n	80105e6 <_dtoa_r+0x146>
 80105d4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80105d8:	eeb4 6b47 	vcmp.f64	d6, d7
 80105dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105e0:	bf18      	it	ne
 80105e2:	f108 38ff 	addne.w	r8, r8, #4294967295
 80105e6:	f1b8 0f16 	cmp.w	r8, #22
 80105ea:	d82b      	bhi.n	8010644 <_dtoa_r+0x1a4>
 80105ec:	495e      	ldr	r1, [pc, #376]	@ (8010768 <_dtoa_r+0x2c8>)
 80105ee:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 80105f2:	ed91 7b00 	vldr	d7, [r1]
 80105f6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80105fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105fe:	d501      	bpl.n	8010604 <_dtoa_r+0x164>
 8010600:	f108 38ff 	add.w	r8, r8, #4294967295
 8010604:	2100      	movs	r1, #0
 8010606:	e01e      	b.n	8010646 <_dtoa_r+0x1a6>
 8010608:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801060a:	4413      	add	r3, r2
 801060c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8010610:	2920      	cmp	r1, #32
 8010612:	bfc1      	itttt	gt
 8010614:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8010618:	408e      	lslgt	r6, r1
 801061a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 801061e:	fa24 f101 	lsrgt.w	r1, r4, r1
 8010622:	bfd6      	itet	le
 8010624:	f1c1 0120 	rsble	r1, r1, #32
 8010628:	4331      	orrgt	r1, r6
 801062a:	fa04 f101 	lslle.w	r1, r4, r1
 801062e:	ee07 1a90 	vmov	s15, r1
 8010632:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8010636:	3b01      	subs	r3, #1
 8010638:	ee17 1a90 	vmov	r1, s15
 801063c:	2501      	movs	r5, #1
 801063e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8010642:	e7a8      	b.n	8010596 <_dtoa_r+0xf6>
 8010644:	2101      	movs	r1, #1
 8010646:	1ad2      	subs	r2, r2, r3
 8010648:	1e53      	subs	r3, r2, #1
 801064a:	9306      	str	r3, [sp, #24]
 801064c:	bf45      	ittet	mi
 801064e:	f1c2 0301 	rsbmi	r3, r2, #1
 8010652:	9305      	strmi	r3, [sp, #20]
 8010654:	2300      	movpl	r3, #0
 8010656:	2300      	movmi	r3, #0
 8010658:	bf4c      	ite	mi
 801065a:	9306      	strmi	r3, [sp, #24]
 801065c:	9305      	strpl	r3, [sp, #20]
 801065e:	f1b8 0f00 	cmp.w	r8, #0
 8010662:	910c      	str	r1, [sp, #48]	@ 0x30
 8010664:	db18      	blt.n	8010698 <_dtoa_r+0x1f8>
 8010666:	9b06      	ldr	r3, [sp, #24]
 8010668:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 801066c:	4443      	add	r3, r8
 801066e:	9306      	str	r3, [sp, #24]
 8010670:	2300      	movs	r3, #0
 8010672:	9a07      	ldr	r2, [sp, #28]
 8010674:	2a09      	cmp	r2, #9
 8010676:	d849      	bhi.n	801070c <_dtoa_r+0x26c>
 8010678:	2a05      	cmp	r2, #5
 801067a:	bfc4      	itt	gt
 801067c:	3a04      	subgt	r2, #4
 801067e:	9207      	strgt	r2, [sp, #28]
 8010680:	9a07      	ldr	r2, [sp, #28]
 8010682:	f1a2 0202 	sub.w	r2, r2, #2
 8010686:	bfcc      	ite	gt
 8010688:	2400      	movgt	r4, #0
 801068a:	2401      	movle	r4, #1
 801068c:	2a03      	cmp	r2, #3
 801068e:	d848      	bhi.n	8010722 <_dtoa_r+0x282>
 8010690:	e8df f002 	tbb	[pc, r2]
 8010694:	3a2c2e0b 	.word	0x3a2c2e0b
 8010698:	9b05      	ldr	r3, [sp, #20]
 801069a:	2200      	movs	r2, #0
 801069c:	eba3 0308 	sub.w	r3, r3, r8
 80106a0:	9305      	str	r3, [sp, #20]
 80106a2:	920a      	str	r2, [sp, #40]	@ 0x28
 80106a4:	f1c8 0300 	rsb	r3, r8, #0
 80106a8:	e7e3      	b.n	8010672 <_dtoa_r+0x1d2>
 80106aa:	2200      	movs	r2, #0
 80106ac:	9208      	str	r2, [sp, #32]
 80106ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80106b0:	2a00      	cmp	r2, #0
 80106b2:	dc39      	bgt.n	8010728 <_dtoa_r+0x288>
 80106b4:	f04f 0b01 	mov.w	fp, #1
 80106b8:	46da      	mov	sl, fp
 80106ba:	465a      	mov	r2, fp
 80106bc:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 80106c0:	f8d9 701c 	ldr.w	r7, [r9, #28]
 80106c4:	2100      	movs	r1, #0
 80106c6:	2004      	movs	r0, #4
 80106c8:	f100 0614 	add.w	r6, r0, #20
 80106cc:	4296      	cmp	r6, r2
 80106ce:	d930      	bls.n	8010732 <_dtoa_r+0x292>
 80106d0:	6079      	str	r1, [r7, #4]
 80106d2:	4648      	mov	r0, r9
 80106d4:	9304      	str	r3, [sp, #16]
 80106d6:	f000 fd39 	bl	801114c <_Balloc>
 80106da:	9b04      	ldr	r3, [sp, #16]
 80106dc:	4607      	mov	r7, r0
 80106de:	2800      	cmp	r0, #0
 80106e0:	d146      	bne.n	8010770 <_dtoa_r+0x2d0>
 80106e2:	4b22      	ldr	r3, [pc, #136]	@ (801076c <_dtoa_r+0x2cc>)
 80106e4:	4602      	mov	r2, r0
 80106e6:	f240 11af 	movw	r1, #431	@ 0x1af
 80106ea:	e6f2      	b.n	80104d2 <_dtoa_r+0x32>
 80106ec:	2201      	movs	r2, #1
 80106ee:	e7dd      	b.n	80106ac <_dtoa_r+0x20c>
 80106f0:	2200      	movs	r2, #0
 80106f2:	9208      	str	r2, [sp, #32]
 80106f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80106f6:	eb08 0b02 	add.w	fp, r8, r2
 80106fa:	f10b 0a01 	add.w	sl, fp, #1
 80106fe:	4652      	mov	r2, sl
 8010700:	2a01      	cmp	r2, #1
 8010702:	bfb8      	it	lt
 8010704:	2201      	movlt	r2, #1
 8010706:	e7db      	b.n	80106c0 <_dtoa_r+0x220>
 8010708:	2201      	movs	r2, #1
 801070a:	e7f2      	b.n	80106f2 <_dtoa_r+0x252>
 801070c:	2401      	movs	r4, #1
 801070e:	2200      	movs	r2, #0
 8010710:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8010714:	f04f 3bff 	mov.w	fp, #4294967295
 8010718:	2100      	movs	r1, #0
 801071a:	46da      	mov	sl, fp
 801071c:	2212      	movs	r2, #18
 801071e:	9109      	str	r1, [sp, #36]	@ 0x24
 8010720:	e7ce      	b.n	80106c0 <_dtoa_r+0x220>
 8010722:	2201      	movs	r2, #1
 8010724:	9208      	str	r2, [sp, #32]
 8010726:	e7f5      	b.n	8010714 <_dtoa_r+0x274>
 8010728:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 801072c:	46da      	mov	sl, fp
 801072e:	465a      	mov	r2, fp
 8010730:	e7c6      	b.n	80106c0 <_dtoa_r+0x220>
 8010732:	3101      	adds	r1, #1
 8010734:	0040      	lsls	r0, r0, #1
 8010736:	e7c7      	b.n	80106c8 <_dtoa_r+0x228>
 8010738:	636f4361 	.word	0x636f4361
 801073c:	3fd287a7 	.word	0x3fd287a7
 8010740:	8b60c8b3 	.word	0x8b60c8b3
 8010744:	3fc68a28 	.word	0x3fc68a28
 8010748:	509f79fb 	.word	0x509f79fb
 801074c:	3fd34413 	.word	0x3fd34413
 8010750:	08012629 	.word	0x08012629
 8010754:	08012640 	.word	0x08012640
 8010758:	7ff00000 	.word	0x7ff00000
 801075c:	08012625 	.word	0x08012625
 8010760:	080125f9 	.word	0x080125f9
 8010764:	080125f8 	.word	0x080125f8
 8010768:	08012738 	.word	0x08012738
 801076c:	08012698 	.word	0x08012698
 8010770:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8010774:	f1ba 0f0e 	cmp.w	sl, #14
 8010778:	6010      	str	r0, [r2, #0]
 801077a:	d86f      	bhi.n	801085c <_dtoa_r+0x3bc>
 801077c:	2c00      	cmp	r4, #0
 801077e:	d06d      	beq.n	801085c <_dtoa_r+0x3bc>
 8010780:	f1b8 0f00 	cmp.w	r8, #0
 8010784:	f340 80c2 	ble.w	801090c <_dtoa_r+0x46c>
 8010788:	4aca      	ldr	r2, [pc, #808]	@ (8010ab4 <_dtoa_r+0x614>)
 801078a:	f008 010f 	and.w	r1, r8, #15
 801078e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8010792:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8010796:	ed92 7b00 	vldr	d7, [r2]
 801079a:	ea4f 1128 	mov.w	r1, r8, asr #4
 801079e:	f000 80a9 	beq.w	80108f4 <_dtoa_r+0x454>
 80107a2:	4ac5      	ldr	r2, [pc, #788]	@ (8010ab8 <_dtoa_r+0x618>)
 80107a4:	ed92 6b08 	vldr	d6, [r2, #32]
 80107a8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80107ac:	ed8d 6b02 	vstr	d6, [sp, #8]
 80107b0:	f001 010f 	and.w	r1, r1, #15
 80107b4:	2203      	movs	r2, #3
 80107b6:	48c0      	ldr	r0, [pc, #768]	@ (8010ab8 <_dtoa_r+0x618>)
 80107b8:	2900      	cmp	r1, #0
 80107ba:	f040 809d 	bne.w	80108f8 <_dtoa_r+0x458>
 80107be:	ed9d 6b02 	vldr	d6, [sp, #8]
 80107c2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80107c6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80107ca:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80107cc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80107d0:	2900      	cmp	r1, #0
 80107d2:	f000 80c1 	beq.w	8010958 <_dtoa_r+0x4b8>
 80107d6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80107da:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80107de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107e2:	f140 80b9 	bpl.w	8010958 <_dtoa_r+0x4b8>
 80107e6:	f1ba 0f00 	cmp.w	sl, #0
 80107ea:	f000 80b5 	beq.w	8010958 <_dtoa_r+0x4b8>
 80107ee:	f1bb 0f00 	cmp.w	fp, #0
 80107f2:	dd31      	ble.n	8010858 <_dtoa_r+0x3b8>
 80107f4:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 80107f8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80107fc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010800:	f108 31ff 	add.w	r1, r8, #4294967295
 8010804:	9104      	str	r1, [sp, #16]
 8010806:	3201      	adds	r2, #1
 8010808:	465c      	mov	r4, fp
 801080a:	ed9d 6b02 	vldr	d6, [sp, #8]
 801080e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8010812:	ee07 2a90 	vmov	s15, r2
 8010816:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801081a:	eea7 5b06 	vfma.f64	d5, d7, d6
 801081e:	ee15 2a90 	vmov	r2, s11
 8010822:	ec51 0b15 	vmov	r0, r1, d5
 8010826:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 801082a:	2c00      	cmp	r4, #0
 801082c:	f040 8098 	bne.w	8010960 <_dtoa_r+0x4c0>
 8010830:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8010834:	ee36 6b47 	vsub.f64	d6, d6, d7
 8010838:	ec41 0b17 	vmov	d7, r0, r1
 801083c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010840:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010844:	f300 8261 	bgt.w	8010d0a <_dtoa_r+0x86a>
 8010848:	eeb1 7b47 	vneg.f64	d7, d7
 801084c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010854:	f100 80f5 	bmi.w	8010a42 <_dtoa_r+0x5a2>
 8010858:	ed8d 8b02 	vstr	d8, [sp, #8]
 801085c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801085e:	2a00      	cmp	r2, #0
 8010860:	f2c0 812c 	blt.w	8010abc <_dtoa_r+0x61c>
 8010864:	f1b8 0f0e 	cmp.w	r8, #14
 8010868:	f300 8128 	bgt.w	8010abc <_dtoa_r+0x61c>
 801086c:	4b91      	ldr	r3, [pc, #580]	@ (8010ab4 <_dtoa_r+0x614>)
 801086e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8010872:	ed93 6b00 	vldr	d6, [r3]
 8010876:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010878:	2b00      	cmp	r3, #0
 801087a:	da03      	bge.n	8010884 <_dtoa_r+0x3e4>
 801087c:	f1ba 0f00 	cmp.w	sl, #0
 8010880:	f340 80d2 	ble.w	8010a28 <_dtoa_r+0x588>
 8010884:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8010888:	ed9d 7b02 	vldr	d7, [sp, #8]
 801088c:	463e      	mov	r6, r7
 801088e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8010892:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8010896:	ee15 3a10 	vmov	r3, s10
 801089a:	3330      	adds	r3, #48	@ 0x30
 801089c:	f806 3b01 	strb.w	r3, [r6], #1
 80108a0:	1bf3      	subs	r3, r6, r7
 80108a2:	459a      	cmp	sl, r3
 80108a4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80108a8:	eea3 7b46 	vfms.f64	d7, d3, d6
 80108ac:	f040 80f8 	bne.w	8010aa0 <_dtoa_r+0x600>
 80108b0:	ee37 7b07 	vadd.f64	d7, d7, d7
 80108b4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80108b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108bc:	f300 80dd 	bgt.w	8010a7a <_dtoa_r+0x5da>
 80108c0:	eeb4 7b46 	vcmp.f64	d7, d6
 80108c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108c8:	d104      	bne.n	80108d4 <_dtoa_r+0x434>
 80108ca:	ee15 3a10 	vmov	r3, s10
 80108ce:	07db      	lsls	r3, r3, #31
 80108d0:	f100 80d3 	bmi.w	8010a7a <_dtoa_r+0x5da>
 80108d4:	9901      	ldr	r1, [sp, #4]
 80108d6:	4648      	mov	r0, r9
 80108d8:	f000 fc78 	bl	80111cc <_Bfree>
 80108dc:	2300      	movs	r3, #0
 80108de:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80108e0:	7033      	strb	r3, [r6, #0]
 80108e2:	f108 0301 	add.w	r3, r8, #1
 80108e6:	6013      	str	r3, [r2, #0]
 80108e8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	f000 8304 	beq.w	8010ef8 <_dtoa_r+0xa58>
 80108f0:	601e      	str	r6, [r3, #0]
 80108f2:	e301      	b.n	8010ef8 <_dtoa_r+0xa58>
 80108f4:	2202      	movs	r2, #2
 80108f6:	e75e      	b.n	80107b6 <_dtoa_r+0x316>
 80108f8:	07cc      	lsls	r4, r1, #31
 80108fa:	d504      	bpl.n	8010906 <_dtoa_r+0x466>
 80108fc:	ed90 6b00 	vldr	d6, [r0]
 8010900:	3201      	adds	r2, #1
 8010902:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010906:	1049      	asrs	r1, r1, #1
 8010908:	3008      	adds	r0, #8
 801090a:	e755      	b.n	80107b8 <_dtoa_r+0x318>
 801090c:	d022      	beq.n	8010954 <_dtoa_r+0x4b4>
 801090e:	f1c8 0100 	rsb	r1, r8, #0
 8010912:	4a68      	ldr	r2, [pc, #416]	@ (8010ab4 <_dtoa_r+0x614>)
 8010914:	f001 000f 	and.w	r0, r1, #15
 8010918:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801091c:	ed92 7b00 	vldr	d7, [r2]
 8010920:	ee28 7b07 	vmul.f64	d7, d8, d7
 8010924:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010928:	4863      	ldr	r0, [pc, #396]	@ (8010ab8 <_dtoa_r+0x618>)
 801092a:	1109      	asrs	r1, r1, #4
 801092c:	2400      	movs	r4, #0
 801092e:	2202      	movs	r2, #2
 8010930:	b929      	cbnz	r1, 801093e <_dtoa_r+0x49e>
 8010932:	2c00      	cmp	r4, #0
 8010934:	f43f af49 	beq.w	80107ca <_dtoa_r+0x32a>
 8010938:	ed8d 7b02 	vstr	d7, [sp, #8]
 801093c:	e745      	b.n	80107ca <_dtoa_r+0x32a>
 801093e:	07ce      	lsls	r6, r1, #31
 8010940:	d505      	bpl.n	801094e <_dtoa_r+0x4ae>
 8010942:	ed90 6b00 	vldr	d6, [r0]
 8010946:	3201      	adds	r2, #1
 8010948:	2401      	movs	r4, #1
 801094a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801094e:	1049      	asrs	r1, r1, #1
 8010950:	3008      	adds	r0, #8
 8010952:	e7ed      	b.n	8010930 <_dtoa_r+0x490>
 8010954:	2202      	movs	r2, #2
 8010956:	e738      	b.n	80107ca <_dtoa_r+0x32a>
 8010958:	f8cd 8010 	str.w	r8, [sp, #16]
 801095c:	4654      	mov	r4, sl
 801095e:	e754      	b.n	801080a <_dtoa_r+0x36a>
 8010960:	4a54      	ldr	r2, [pc, #336]	@ (8010ab4 <_dtoa_r+0x614>)
 8010962:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8010966:	ed12 4b02 	vldr	d4, [r2, #-8]
 801096a:	9a08      	ldr	r2, [sp, #32]
 801096c:	ec41 0b17 	vmov	d7, r0, r1
 8010970:	443c      	add	r4, r7
 8010972:	b34a      	cbz	r2, 80109c8 <_dtoa_r+0x528>
 8010974:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8010978:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 801097c:	463e      	mov	r6, r7
 801097e:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8010982:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8010986:	ee35 7b47 	vsub.f64	d7, d5, d7
 801098a:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801098e:	ee14 2a90 	vmov	r2, s9
 8010992:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8010996:	3230      	adds	r2, #48	@ 0x30
 8010998:	ee36 6b45 	vsub.f64	d6, d6, d5
 801099c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80109a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109a4:	f806 2b01 	strb.w	r2, [r6], #1
 80109a8:	d438      	bmi.n	8010a1c <_dtoa_r+0x57c>
 80109aa:	ee32 5b46 	vsub.f64	d5, d2, d6
 80109ae:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80109b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109b6:	d462      	bmi.n	8010a7e <_dtoa_r+0x5de>
 80109b8:	42a6      	cmp	r6, r4
 80109ba:	f43f af4d 	beq.w	8010858 <_dtoa_r+0x3b8>
 80109be:	ee27 7b03 	vmul.f64	d7, d7, d3
 80109c2:	ee26 6b03 	vmul.f64	d6, d6, d3
 80109c6:	e7e0      	b.n	801098a <_dtoa_r+0x4ea>
 80109c8:	4621      	mov	r1, r4
 80109ca:	463e      	mov	r6, r7
 80109cc:	ee27 7b04 	vmul.f64	d7, d7, d4
 80109d0:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80109d4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80109d8:	ee14 2a90 	vmov	r2, s9
 80109dc:	3230      	adds	r2, #48	@ 0x30
 80109de:	f806 2b01 	strb.w	r2, [r6], #1
 80109e2:	42a6      	cmp	r6, r4
 80109e4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80109e8:	ee36 6b45 	vsub.f64	d6, d6, d5
 80109ec:	d119      	bne.n	8010a22 <_dtoa_r+0x582>
 80109ee:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 80109f2:	ee37 4b05 	vadd.f64	d4, d7, d5
 80109f6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80109fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109fe:	dc3e      	bgt.n	8010a7e <_dtoa_r+0x5de>
 8010a00:	ee35 5b47 	vsub.f64	d5, d5, d7
 8010a04:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8010a08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a0c:	f57f af24 	bpl.w	8010858 <_dtoa_r+0x3b8>
 8010a10:	460e      	mov	r6, r1
 8010a12:	3901      	subs	r1, #1
 8010a14:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010a18:	2b30      	cmp	r3, #48	@ 0x30
 8010a1a:	d0f9      	beq.n	8010a10 <_dtoa_r+0x570>
 8010a1c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8010a20:	e758      	b.n	80108d4 <_dtoa_r+0x434>
 8010a22:	ee26 6b03 	vmul.f64	d6, d6, d3
 8010a26:	e7d5      	b.n	80109d4 <_dtoa_r+0x534>
 8010a28:	d10b      	bne.n	8010a42 <_dtoa_r+0x5a2>
 8010a2a:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8010a2e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8010a32:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010a36:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a3e:	f2c0 8161 	blt.w	8010d04 <_dtoa_r+0x864>
 8010a42:	2400      	movs	r4, #0
 8010a44:	4625      	mov	r5, r4
 8010a46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010a48:	43db      	mvns	r3, r3
 8010a4a:	9304      	str	r3, [sp, #16]
 8010a4c:	463e      	mov	r6, r7
 8010a4e:	f04f 0800 	mov.w	r8, #0
 8010a52:	4621      	mov	r1, r4
 8010a54:	4648      	mov	r0, r9
 8010a56:	f000 fbb9 	bl	80111cc <_Bfree>
 8010a5a:	2d00      	cmp	r5, #0
 8010a5c:	d0de      	beq.n	8010a1c <_dtoa_r+0x57c>
 8010a5e:	f1b8 0f00 	cmp.w	r8, #0
 8010a62:	d005      	beq.n	8010a70 <_dtoa_r+0x5d0>
 8010a64:	45a8      	cmp	r8, r5
 8010a66:	d003      	beq.n	8010a70 <_dtoa_r+0x5d0>
 8010a68:	4641      	mov	r1, r8
 8010a6a:	4648      	mov	r0, r9
 8010a6c:	f000 fbae 	bl	80111cc <_Bfree>
 8010a70:	4629      	mov	r1, r5
 8010a72:	4648      	mov	r0, r9
 8010a74:	f000 fbaa 	bl	80111cc <_Bfree>
 8010a78:	e7d0      	b.n	8010a1c <_dtoa_r+0x57c>
 8010a7a:	f8cd 8010 	str.w	r8, [sp, #16]
 8010a7e:	4633      	mov	r3, r6
 8010a80:	461e      	mov	r6, r3
 8010a82:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010a86:	2a39      	cmp	r2, #57	@ 0x39
 8010a88:	d106      	bne.n	8010a98 <_dtoa_r+0x5f8>
 8010a8a:	429f      	cmp	r7, r3
 8010a8c:	d1f8      	bne.n	8010a80 <_dtoa_r+0x5e0>
 8010a8e:	9a04      	ldr	r2, [sp, #16]
 8010a90:	3201      	adds	r2, #1
 8010a92:	9204      	str	r2, [sp, #16]
 8010a94:	2230      	movs	r2, #48	@ 0x30
 8010a96:	703a      	strb	r2, [r7, #0]
 8010a98:	781a      	ldrb	r2, [r3, #0]
 8010a9a:	3201      	adds	r2, #1
 8010a9c:	701a      	strb	r2, [r3, #0]
 8010a9e:	e7bd      	b.n	8010a1c <_dtoa_r+0x57c>
 8010aa0:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010aa4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010aa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010aac:	f47f aeef 	bne.w	801088e <_dtoa_r+0x3ee>
 8010ab0:	e710      	b.n	80108d4 <_dtoa_r+0x434>
 8010ab2:	bf00      	nop
 8010ab4:	08012738 	.word	0x08012738
 8010ab8:	08012710 	.word	0x08012710
 8010abc:	9908      	ldr	r1, [sp, #32]
 8010abe:	2900      	cmp	r1, #0
 8010ac0:	f000 80e3 	beq.w	8010c8a <_dtoa_r+0x7ea>
 8010ac4:	9907      	ldr	r1, [sp, #28]
 8010ac6:	2901      	cmp	r1, #1
 8010ac8:	f300 80c8 	bgt.w	8010c5c <_dtoa_r+0x7bc>
 8010acc:	2d00      	cmp	r5, #0
 8010ace:	f000 80c1 	beq.w	8010c54 <_dtoa_r+0x7b4>
 8010ad2:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8010ad6:	9e05      	ldr	r6, [sp, #20]
 8010ad8:	461c      	mov	r4, r3
 8010ada:	9304      	str	r3, [sp, #16]
 8010adc:	9b05      	ldr	r3, [sp, #20]
 8010ade:	4413      	add	r3, r2
 8010ae0:	9305      	str	r3, [sp, #20]
 8010ae2:	9b06      	ldr	r3, [sp, #24]
 8010ae4:	2101      	movs	r1, #1
 8010ae6:	4413      	add	r3, r2
 8010ae8:	4648      	mov	r0, r9
 8010aea:	9306      	str	r3, [sp, #24]
 8010aec:	f000 fc22 	bl	8011334 <__i2b>
 8010af0:	9b04      	ldr	r3, [sp, #16]
 8010af2:	4605      	mov	r5, r0
 8010af4:	b166      	cbz	r6, 8010b10 <_dtoa_r+0x670>
 8010af6:	9a06      	ldr	r2, [sp, #24]
 8010af8:	2a00      	cmp	r2, #0
 8010afa:	dd09      	ble.n	8010b10 <_dtoa_r+0x670>
 8010afc:	42b2      	cmp	r2, r6
 8010afe:	9905      	ldr	r1, [sp, #20]
 8010b00:	bfa8      	it	ge
 8010b02:	4632      	movge	r2, r6
 8010b04:	1a89      	subs	r1, r1, r2
 8010b06:	9105      	str	r1, [sp, #20]
 8010b08:	9906      	ldr	r1, [sp, #24]
 8010b0a:	1ab6      	subs	r6, r6, r2
 8010b0c:	1a8a      	subs	r2, r1, r2
 8010b0e:	9206      	str	r2, [sp, #24]
 8010b10:	b1fb      	cbz	r3, 8010b52 <_dtoa_r+0x6b2>
 8010b12:	9a08      	ldr	r2, [sp, #32]
 8010b14:	2a00      	cmp	r2, #0
 8010b16:	f000 80bc 	beq.w	8010c92 <_dtoa_r+0x7f2>
 8010b1a:	b19c      	cbz	r4, 8010b44 <_dtoa_r+0x6a4>
 8010b1c:	4629      	mov	r1, r5
 8010b1e:	4622      	mov	r2, r4
 8010b20:	4648      	mov	r0, r9
 8010b22:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010b24:	f000 fcc6 	bl	80114b4 <__pow5mult>
 8010b28:	9a01      	ldr	r2, [sp, #4]
 8010b2a:	4601      	mov	r1, r0
 8010b2c:	4605      	mov	r5, r0
 8010b2e:	4648      	mov	r0, r9
 8010b30:	f000 fc16 	bl	8011360 <__multiply>
 8010b34:	9901      	ldr	r1, [sp, #4]
 8010b36:	9004      	str	r0, [sp, #16]
 8010b38:	4648      	mov	r0, r9
 8010b3a:	f000 fb47 	bl	80111cc <_Bfree>
 8010b3e:	9a04      	ldr	r2, [sp, #16]
 8010b40:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010b42:	9201      	str	r2, [sp, #4]
 8010b44:	1b1a      	subs	r2, r3, r4
 8010b46:	d004      	beq.n	8010b52 <_dtoa_r+0x6b2>
 8010b48:	9901      	ldr	r1, [sp, #4]
 8010b4a:	4648      	mov	r0, r9
 8010b4c:	f000 fcb2 	bl	80114b4 <__pow5mult>
 8010b50:	9001      	str	r0, [sp, #4]
 8010b52:	2101      	movs	r1, #1
 8010b54:	4648      	mov	r0, r9
 8010b56:	f000 fbed 	bl	8011334 <__i2b>
 8010b5a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010b5c:	4604      	mov	r4, r0
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	f000 81d0 	beq.w	8010f04 <_dtoa_r+0xa64>
 8010b64:	461a      	mov	r2, r3
 8010b66:	4601      	mov	r1, r0
 8010b68:	4648      	mov	r0, r9
 8010b6a:	f000 fca3 	bl	80114b4 <__pow5mult>
 8010b6e:	9b07      	ldr	r3, [sp, #28]
 8010b70:	2b01      	cmp	r3, #1
 8010b72:	4604      	mov	r4, r0
 8010b74:	f300 8095 	bgt.w	8010ca2 <_dtoa_r+0x802>
 8010b78:	9b02      	ldr	r3, [sp, #8]
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	f040 808b 	bne.w	8010c96 <_dtoa_r+0x7f6>
 8010b80:	9b03      	ldr	r3, [sp, #12]
 8010b82:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8010b86:	2a00      	cmp	r2, #0
 8010b88:	f040 8087 	bne.w	8010c9a <_dtoa_r+0x7fa>
 8010b8c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8010b90:	0d12      	lsrs	r2, r2, #20
 8010b92:	0512      	lsls	r2, r2, #20
 8010b94:	2a00      	cmp	r2, #0
 8010b96:	f000 8082 	beq.w	8010c9e <_dtoa_r+0x7fe>
 8010b9a:	9b05      	ldr	r3, [sp, #20]
 8010b9c:	3301      	adds	r3, #1
 8010b9e:	9305      	str	r3, [sp, #20]
 8010ba0:	9b06      	ldr	r3, [sp, #24]
 8010ba2:	3301      	adds	r3, #1
 8010ba4:	9306      	str	r3, [sp, #24]
 8010ba6:	2301      	movs	r3, #1
 8010ba8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010baa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	f000 81af 	beq.w	8010f10 <_dtoa_r+0xa70>
 8010bb2:	6922      	ldr	r2, [r4, #16]
 8010bb4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8010bb8:	6910      	ldr	r0, [r2, #16]
 8010bba:	f000 fb6f 	bl	801129c <__hi0bits>
 8010bbe:	f1c0 0020 	rsb	r0, r0, #32
 8010bc2:	9b06      	ldr	r3, [sp, #24]
 8010bc4:	4418      	add	r0, r3
 8010bc6:	f010 001f 	ands.w	r0, r0, #31
 8010bca:	d076      	beq.n	8010cba <_dtoa_r+0x81a>
 8010bcc:	f1c0 0220 	rsb	r2, r0, #32
 8010bd0:	2a04      	cmp	r2, #4
 8010bd2:	dd69      	ble.n	8010ca8 <_dtoa_r+0x808>
 8010bd4:	9b05      	ldr	r3, [sp, #20]
 8010bd6:	f1c0 001c 	rsb	r0, r0, #28
 8010bda:	4403      	add	r3, r0
 8010bdc:	9305      	str	r3, [sp, #20]
 8010bde:	9b06      	ldr	r3, [sp, #24]
 8010be0:	4406      	add	r6, r0
 8010be2:	4403      	add	r3, r0
 8010be4:	9306      	str	r3, [sp, #24]
 8010be6:	9b05      	ldr	r3, [sp, #20]
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	dd05      	ble.n	8010bf8 <_dtoa_r+0x758>
 8010bec:	9901      	ldr	r1, [sp, #4]
 8010bee:	461a      	mov	r2, r3
 8010bf0:	4648      	mov	r0, r9
 8010bf2:	f000 fcb9 	bl	8011568 <__lshift>
 8010bf6:	9001      	str	r0, [sp, #4]
 8010bf8:	9b06      	ldr	r3, [sp, #24]
 8010bfa:	2b00      	cmp	r3, #0
 8010bfc:	dd05      	ble.n	8010c0a <_dtoa_r+0x76a>
 8010bfe:	4621      	mov	r1, r4
 8010c00:	461a      	mov	r2, r3
 8010c02:	4648      	mov	r0, r9
 8010c04:	f000 fcb0 	bl	8011568 <__lshift>
 8010c08:	4604      	mov	r4, r0
 8010c0a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	d056      	beq.n	8010cbe <_dtoa_r+0x81e>
 8010c10:	9801      	ldr	r0, [sp, #4]
 8010c12:	4621      	mov	r1, r4
 8010c14:	f000 fd14 	bl	8011640 <__mcmp>
 8010c18:	2800      	cmp	r0, #0
 8010c1a:	da50      	bge.n	8010cbe <_dtoa_r+0x81e>
 8010c1c:	f108 33ff 	add.w	r3, r8, #4294967295
 8010c20:	9304      	str	r3, [sp, #16]
 8010c22:	9901      	ldr	r1, [sp, #4]
 8010c24:	2300      	movs	r3, #0
 8010c26:	220a      	movs	r2, #10
 8010c28:	4648      	mov	r0, r9
 8010c2a:	f000 faf1 	bl	8011210 <__multadd>
 8010c2e:	9b08      	ldr	r3, [sp, #32]
 8010c30:	9001      	str	r0, [sp, #4]
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	f000 816e 	beq.w	8010f14 <_dtoa_r+0xa74>
 8010c38:	4629      	mov	r1, r5
 8010c3a:	2300      	movs	r3, #0
 8010c3c:	220a      	movs	r2, #10
 8010c3e:	4648      	mov	r0, r9
 8010c40:	f000 fae6 	bl	8011210 <__multadd>
 8010c44:	f1bb 0f00 	cmp.w	fp, #0
 8010c48:	4605      	mov	r5, r0
 8010c4a:	dc64      	bgt.n	8010d16 <_dtoa_r+0x876>
 8010c4c:	9b07      	ldr	r3, [sp, #28]
 8010c4e:	2b02      	cmp	r3, #2
 8010c50:	dc3e      	bgt.n	8010cd0 <_dtoa_r+0x830>
 8010c52:	e060      	b.n	8010d16 <_dtoa_r+0x876>
 8010c54:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010c56:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8010c5a:	e73c      	b.n	8010ad6 <_dtoa_r+0x636>
 8010c5c:	f10a 34ff 	add.w	r4, sl, #4294967295
 8010c60:	42a3      	cmp	r3, r4
 8010c62:	bfbf      	itttt	lt
 8010c64:	1ae2      	sublt	r2, r4, r3
 8010c66:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8010c68:	189b      	addlt	r3, r3, r2
 8010c6a:	930a      	strlt	r3, [sp, #40]	@ 0x28
 8010c6c:	bfae      	itee	ge
 8010c6e:	1b1c      	subge	r4, r3, r4
 8010c70:	4623      	movlt	r3, r4
 8010c72:	2400      	movlt	r4, #0
 8010c74:	f1ba 0f00 	cmp.w	sl, #0
 8010c78:	bfb5      	itete	lt
 8010c7a:	9a05      	ldrlt	r2, [sp, #20]
 8010c7c:	9e05      	ldrge	r6, [sp, #20]
 8010c7e:	eba2 060a 	sublt.w	r6, r2, sl
 8010c82:	4652      	movge	r2, sl
 8010c84:	bfb8      	it	lt
 8010c86:	2200      	movlt	r2, #0
 8010c88:	e727      	b.n	8010ada <_dtoa_r+0x63a>
 8010c8a:	9e05      	ldr	r6, [sp, #20]
 8010c8c:	9d08      	ldr	r5, [sp, #32]
 8010c8e:	461c      	mov	r4, r3
 8010c90:	e730      	b.n	8010af4 <_dtoa_r+0x654>
 8010c92:	461a      	mov	r2, r3
 8010c94:	e758      	b.n	8010b48 <_dtoa_r+0x6a8>
 8010c96:	2300      	movs	r3, #0
 8010c98:	e786      	b.n	8010ba8 <_dtoa_r+0x708>
 8010c9a:	9b02      	ldr	r3, [sp, #8]
 8010c9c:	e784      	b.n	8010ba8 <_dtoa_r+0x708>
 8010c9e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8010ca0:	e783      	b.n	8010baa <_dtoa_r+0x70a>
 8010ca2:	2300      	movs	r3, #0
 8010ca4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010ca6:	e784      	b.n	8010bb2 <_dtoa_r+0x712>
 8010ca8:	d09d      	beq.n	8010be6 <_dtoa_r+0x746>
 8010caa:	9b05      	ldr	r3, [sp, #20]
 8010cac:	321c      	adds	r2, #28
 8010cae:	4413      	add	r3, r2
 8010cb0:	9305      	str	r3, [sp, #20]
 8010cb2:	9b06      	ldr	r3, [sp, #24]
 8010cb4:	4416      	add	r6, r2
 8010cb6:	4413      	add	r3, r2
 8010cb8:	e794      	b.n	8010be4 <_dtoa_r+0x744>
 8010cba:	4602      	mov	r2, r0
 8010cbc:	e7f5      	b.n	8010caa <_dtoa_r+0x80a>
 8010cbe:	f1ba 0f00 	cmp.w	sl, #0
 8010cc2:	f8cd 8010 	str.w	r8, [sp, #16]
 8010cc6:	46d3      	mov	fp, sl
 8010cc8:	dc21      	bgt.n	8010d0e <_dtoa_r+0x86e>
 8010cca:	9b07      	ldr	r3, [sp, #28]
 8010ccc:	2b02      	cmp	r3, #2
 8010cce:	dd1e      	ble.n	8010d0e <_dtoa_r+0x86e>
 8010cd0:	f1bb 0f00 	cmp.w	fp, #0
 8010cd4:	f47f aeb7 	bne.w	8010a46 <_dtoa_r+0x5a6>
 8010cd8:	4621      	mov	r1, r4
 8010cda:	465b      	mov	r3, fp
 8010cdc:	2205      	movs	r2, #5
 8010cde:	4648      	mov	r0, r9
 8010ce0:	f000 fa96 	bl	8011210 <__multadd>
 8010ce4:	4601      	mov	r1, r0
 8010ce6:	4604      	mov	r4, r0
 8010ce8:	9801      	ldr	r0, [sp, #4]
 8010cea:	f000 fca9 	bl	8011640 <__mcmp>
 8010cee:	2800      	cmp	r0, #0
 8010cf0:	f77f aea9 	ble.w	8010a46 <_dtoa_r+0x5a6>
 8010cf4:	463e      	mov	r6, r7
 8010cf6:	2331      	movs	r3, #49	@ 0x31
 8010cf8:	f806 3b01 	strb.w	r3, [r6], #1
 8010cfc:	9b04      	ldr	r3, [sp, #16]
 8010cfe:	3301      	adds	r3, #1
 8010d00:	9304      	str	r3, [sp, #16]
 8010d02:	e6a4      	b.n	8010a4e <_dtoa_r+0x5ae>
 8010d04:	f8cd 8010 	str.w	r8, [sp, #16]
 8010d08:	4654      	mov	r4, sl
 8010d0a:	4625      	mov	r5, r4
 8010d0c:	e7f2      	b.n	8010cf4 <_dtoa_r+0x854>
 8010d0e:	9b08      	ldr	r3, [sp, #32]
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	f000 8103 	beq.w	8010f1c <_dtoa_r+0xa7c>
 8010d16:	2e00      	cmp	r6, #0
 8010d18:	dd05      	ble.n	8010d26 <_dtoa_r+0x886>
 8010d1a:	4629      	mov	r1, r5
 8010d1c:	4632      	mov	r2, r6
 8010d1e:	4648      	mov	r0, r9
 8010d20:	f000 fc22 	bl	8011568 <__lshift>
 8010d24:	4605      	mov	r5, r0
 8010d26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	d058      	beq.n	8010dde <_dtoa_r+0x93e>
 8010d2c:	6869      	ldr	r1, [r5, #4]
 8010d2e:	4648      	mov	r0, r9
 8010d30:	f000 fa0c 	bl	801114c <_Balloc>
 8010d34:	4606      	mov	r6, r0
 8010d36:	b928      	cbnz	r0, 8010d44 <_dtoa_r+0x8a4>
 8010d38:	4b82      	ldr	r3, [pc, #520]	@ (8010f44 <_dtoa_r+0xaa4>)
 8010d3a:	4602      	mov	r2, r0
 8010d3c:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8010d40:	f7ff bbc7 	b.w	80104d2 <_dtoa_r+0x32>
 8010d44:	692a      	ldr	r2, [r5, #16]
 8010d46:	3202      	adds	r2, #2
 8010d48:	0092      	lsls	r2, r2, #2
 8010d4a:	f105 010c 	add.w	r1, r5, #12
 8010d4e:	300c      	adds	r0, #12
 8010d50:	f000 ffac 	bl	8011cac <memcpy>
 8010d54:	2201      	movs	r2, #1
 8010d56:	4631      	mov	r1, r6
 8010d58:	4648      	mov	r0, r9
 8010d5a:	f000 fc05 	bl	8011568 <__lshift>
 8010d5e:	1c7b      	adds	r3, r7, #1
 8010d60:	9305      	str	r3, [sp, #20]
 8010d62:	eb07 030b 	add.w	r3, r7, fp
 8010d66:	9309      	str	r3, [sp, #36]	@ 0x24
 8010d68:	9b02      	ldr	r3, [sp, #8]
 8010d6a:	f003 0301 	and.w	r3, r3, #1
 8010d6e:	46a8      	mov	r8, r5
 8010d70:	9308      	str	r3, [sp, #32]
 8010d72:	4605      	mov	r5, r0
 8010d74:	9b05      	ldr	r3, [sp, #20]
 8010d76:	9801      	ldr	r0, [sp, #4]
 8010d78:	4621      	mov	r1, r4
 8010d7a:	f103 3bff 	add.w	fp, r3, #4294967295
 8010d7e:	f7ff fb04 	bl	801038a <quorem>
 8010d82:	4641      	mov	r1, r8
 8010d84:	9002      	str	r0, [sp, #8]
 8010d86:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8010d8a:	9801      	ldr	r0, [sp, #4]
 8010d8c:	f000 fc58 	bl	8011640 <__mcmp>
 8010d90:	462a      	mov	r2, r5
 8010d92:	9006      	str	r0, [sp, #24]
 8010d94:	4621      	mov	r1, r4
 8010d96:	4648      	mov	r0, r9
 8010d98:	f000 fc6e 	bl	8011678 <__mdiff>
 8010d9c:	68c2      	ldr	r2, [r0, #12]
 8010d9e:	4606      	mov	r6, r0
 8010da0:	b9fa      	cbnz	r2, 8010de2 <_dtoa_r+0x942>
 8010da2:	4601      	mov	r1, r0
 8010da4:	9801      	ldr	r0, [sp, #4]
 8010da6:	f000 fc4b 	bl	8011640 <__mcmp>
 8010daa:	4602      	mov	r2, r0
 8010dac:	4631      	mov	r1, r6
 8010dae:	4648      	mov	r0, r9
 8010db0:	920a      	str	r2, [sp, #40]	@ 0x28
 8010db2:	f000 fa0b 	bl	80111cc <_Bfree>
 8010db6:	9b07      	ldr	r3, [sp, #28]
 8010db8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010dba:	9e05      	ldr	r6, [sp, #20]
 8010dbc:	ea43 0102 	orr.w	r1, r3, r2
 8010dc0:	9b08      	ldr	r3, [sp, #32]
 8010dc2:	4319      	orrs	r1, r3
 8010dc4:	d10f      	bne.n	8010de6 <_dtoa_r+0x946>
 8010dc6:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8010dca:	d028      	beq.n	8010e1e <_dtoa_r+0x97e>
 8010dcc:	9b06      	ldr	r3, [sp, #24]
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	dd02      	ble.n	8010dd8 <_dtoa_r+0x938>
 8010dd2:	9b02      	ldr	r3, [sp, #8]
 8010dd4:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8010dd8:	f88b a000 	strb.w	sl, [fp]
 8010ddc:	e639      	b.n	8010a52 <_dtoa_r+0x5b2>
 8010dde:	4628      	mov	r0, r5
 8010de0:	e7bd      	b.n	8010d5e <_dtoa_r+0x8be>
 8010de2:	2201      	movs	r2, #1
 8010de4:	e7e2      	b.n	8010dac <_dtoa_r+0x90c>
 8010de6:	9b06      	ldr	r3, [sp, #24]
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	db04      	blt.n	8010df6 <_dtoa_r+0x956>
 8010dec:	9907      	ldr	r1, [sp, #28]
 8010dee:	430b      	orrs	r3, r1
 8010df0:	9908      	ldr	r1, [sp, #32]
 8010df2:	430b      	orrs	r3, r1
 8010df4:	d120      	bne.n	8010e38 <_dtoa_r+0x998>
 8010df6:	2a00      	cmp	r2, #0
 8010df8:	ddee      	ble.n	8010dd8 <_dtoa_r+0x938>
 8010dfa:	9901      	ldr	r1, [sp, #4]
 8010dfc:	2201      	movs	r2, #1
 8010dfe:	4648      	mov	r0, r9
 8010e00:	f000 fbb2 	bl	8011568 <__lshift>
 8010e04:	4621      	mov	r1, r4
 8010e06:	9001      	str	r0, [sp, #4]
 8010e08:	f000 fc1a 	bl	8011640 <__mcmp>
 8010e0c:	2800      	cmp	r0, #0
 8010e0e:	dc03      	bgt.n	8010e18 <_dtoa_r+0x978>
 8010e10:	d1e2      	bne.n	8010dd8 <_dtoa_r+0x938>
 8010e12:	f01a 0f01 	tst.w	sl, #1
 8010e16:	d0df      	beq.n	8010dd8 <_dtoa_r+0x938>
 8010e18:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8010e1c:	d1d9      	bne.n	8010dd2 <_dtoa_r+0x932>
 8010e1e:	2339      	movs	r3, #57	@ 0x39
 8010e20:	f88b 3000 	strb.w	r3, [fp]
 8010e24:	4633      	mov	r3, r6
 8010e26:	461e      	mov	r6, r3
 8010e28:	3b01      	subs	r3, #1
 8010e2a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8010e2e:	2a39      	cmp	r2, #57	@ 0x39
 8010e30:	d053      	beq.n	8010eda <_dtoa_r+0xa3a>
 8010e32:	3201      	adds	r2, #1
 8010e34:	701a      	strb	r2, [r3, #0]
 8010e36:	e60c      	b.n	8010a52 <_dtoa_r+0x5b2>
 8010e38:	2a00      	cmp	r2, #0
 8010e3a:	dd07      	ble.n	8010e4c <_dtoa_r+0x9ac>
 8010e3c:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8010e40:	d0ed      	beq.n	8010e1e <_dtoa_r+0x97e>
 8010e42:	f10a 0301 	add.w	r3, sl, #1
 8010e46:	f88b 3000 	strb.w	r3, [fp]
 8010e4a:	e602      	b.n	8010a52 <_dtoa_r+0x5b2>
 8010e4c:	9b05      	ldr	r3, [sp, #20]
 8010e4e:	9a05      	ldr	r2, [sp, #20]
 8010e50:	f803 ac01 	strb.w	sl, [r3, #-1]
 8010e54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010e56:	4293      	cmp	r3, r2
 8010e58:	d029      	beq.n	8010eae <_dtoa_r+0xa0e>
 8010e5a:	9901      	ldr	r1, [sp, #4]
 8010e5c:	2300      	movs	r3, #0
 8010e5e:	220a      	movs	r2, #10
 8010e60:	4648      	mov	r0, r9
 8010e62:	f000 f9d5 	bl	8011210 <__multadd>
 8010e66:	45a8      	cmp	r8, r5
 8010e68:	9001      	str	r0, [sp, #4]
 8010e6a:	f04f 0300 	mov.w	r3, #0
 8010e6e:	f04f 020a 	mov.w	r2, #10
 8010e72:	4641      	mov	r1, r8
 8010e74:	4648      	mov	r0, r9
 8010e76:	d107      	bne.n	8010e88 <_dtoa_r+0x9e8>
 8010e78:	f000 f9ca 	bl	8011210 <__multadd>
 8010e7c:	4680      	mov	r8, r0
 8010e7e:	4605      	mov	r5, r0
 8010e80:	9b05      	ldr	r3, [sp, #20]
 8010e82:	3301      	adds	r3, #1
 8010e84:	9305      	str	r3, [sp, #20]
 8010e86:	e775      	b.n	8010d74 <_dtoa_r+0x8d4>
 8010e88:	f000 f9c2 	bl	8011210 <__multadd>
 8010e8c:	4629      	mov	r1, r5
 8010e8e:	4680      	mov	r8, r0
 8010e90:	2300      	movs	r3, #0
 8010e92:	220a      	movs	r2, #10
 8010e94:	4648      	mov	r0, r9
 8010e96:	f000 f9bb 	bl	8011210 <__multadd>
 8010e9a:	4605      	mov	r5, r0
 8010e9c:	e7f0      	b.n	8010e80 <_dtoa_r+0x9e0>
 8010e9e:	f1bb 0f00 	cmp.w	fp, #0
 8010ea2:	bfcc      	ite	gt
 8010ea4:	465e      	movgt	r6, fp
 8010ea6:	2601      	movle	r6, #1
 8010ea8:	443e      	add	r6, r7
 8010eaa:	f04f 0800 	mov.w	r8, #0
 8010eae:	9901      	ldr	r1, [sp, #4]
 8010eb0:	2201      	movs	r2, #1
 8010eb2:	4648      	mov	r0, r9
 8010eb4:	f000 fb58 	bl	8011568 <__lshift>
 8010eb8:	4621      	mov	r1, r4
 8010eba:	9001      	str	r0, [sp, #4]
 8010ebc:	f000 fbc0 	bl	8011640 <__mcmp>
 8010ec0:	2800      	cmp	r0, #0
 8010ec2:	dcaf      	bgt.n	8010e24 <_dtoa_r+0x984>
 8010ec4:	d102      	bne.n	8010ecc <_dtoa_r+0xa2c>
 8010ec6:	f01a 0f01 	tst.w	sl, #1
 8010eca:	d1ab      	bne.n	8010e24 <_dtoa_r+0x984>
 8010ecc:	4633      	mov	r3, r6
 8010ece:	461e      	mov	r6, r3
 8010ed0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010ed4:	2a30      	cmp	r2, #48	@ 0x30
 8010ed6:	d0fa      	beq.n	8010ece <_dtoa_r+0xa2e>
 8010ed8:	e5bb      	b.n	8010a52 <_dtoa_r+0x5b2>
 8010eda:	429f      	cmp	r7, r3
 8010edc:	d1a3      	bne.n	8010e26 <_dtoa_r+0x986>
 8010ede:	9b04      	ldr	r3, [sp, #16]
 8010ee0:	3301      	adds	r3, #1
 8010ee2:	9304      	str	r3, [sp, #16]
 8010ee4:	2331      	movs	r3, #49	@ 0x31
 8010ee6:	703b      	strb	r3, [r7, #0]
 8010ee8:	e5b3      	b.n	8010a52 <_dtoa_r+0x5b2>
 8010eea:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010eec:	4f16      	ldr	r7, [pc, #88]	@ (8010f48 <_dtoa_r+0xaa8>)
 8010eee:	b11b      	cbz	r3, 8010ef8 <_dtoa_r+0xa58>
 8010ef0:	f107 0308 	add.w	r3, r7, #8
 8010ef4:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8010ef6:	6013      	str	r3, [r2, #0]
 8010ef8:	4638      	mov	r0, r7
 8010efa:	b011      	add	sp, #68	@ 0x44
 8010efc:	ecbd 8b02 	vpop	{d8}
 8010f00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f04:	9b07      	ldr	r3, [sp, #28]
 8010f06:	2b01      	cmp	r3, #1
 8010f08:	f77f ae36 	ble.w	8010b78 <_dtoa_r+0x6d8>
 8010f0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010f0e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010f10:	2001      	movs	r0, #1
 8010f12:	e656      	b.n	8010bc2 <_dtoa_r+0x722>
 8010f14:	f1bb 0f00 	cmp.w	fp, #0
 8010f18:	f77f aed7 	ble.w	8010cca <_dtoa_r+0x82a>
 8010f1c:	463e      	mov	r6, r7
 8010f1e:	9801      	ldr	r0, [sp, #4]
 8010f20:	4621      	mov	r1, r4
 8010f22:	f7ff fa32 	bl	801038a <quorem>
 8010f26:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8010f2a:	f806 ab01 	strb.w	sl, [r6], #1
 8010f2e:	1bf2      	subs	r2, r6, r7
 8010f30:	4593      	cmp	fp, r2
 8010f32:	ddb4      	ble.n	8010e9e <_dtoa_r+0x9fe>
 8010f34:	9901      	ldr	r1, [sp, #4]
 8010f36:	2300      	movs	r3, #0
 8010f38:	220a      	movs	r2, #10
 8010f3a:	4648      	mov	r0, r9
 8010f3c:	f000 f968 	bl	8011210 <__multadd>
 8010f40:	9001      	str	r0, [sp, #4]
 8010f42:	e7ec      	b.n	8010f1e <_dtoa_r+0xa7e>
 8010f44:	08012698 	.word	0x08012698
 8010f48:	0801261c 	.word	0x0801261c

08010f4c <_free_r>:
 8010f4c:	b538      	push	{r3, r4, r5, lr}
 8010f4e:	4605      	mov	r5, r0
 8010f50:	2900      	cmp	r1, #0
 8010f52:	d041      	beq.n	8010fd8 <_free_r+0x8c>
 8010f54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010f58:	1f0c      	subs	r4, r1, #4
 8010f5a:	2b00      	cmp	r3, #0
 8010f5c:	bfb8      	it	lt
 8010f5e:	18e4      	addlt	r4, r4, r3
 8010f60:	f000 f8e8 	bl	8011134 <__malloc_lock>
 8010f64:	4a1d      	ldr	r2, [pc, #116]	@ (8010fdc <_free_r+0x90>)
 8010f66:	6813      	ldr	r3, [r2, #0]
 8010f68:	b933      	cbnz	r3, 8010f78 <_free_r+0x2c>
 8010f6a:	6063      	str	r3, [r4, #4]
 8010f6c:	6014      	str	r4, [r2, #0]
 8010f6e:	4628      	mov	r0, r5
 8010f70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010f74:	f000 b8e4 	b.w	8011140 <__malloc_unlock>
 8010f78:	42a3      	cmp	r3, r4
 8010f7a:	d908      	bls.n	8010f8e <_free_r+0x42>
 8010f7c:	6820      	ldr	r0, [r4, #0]
 8010f7e:	1821      	adds	r1, r4, r0
 8010f80:	428b      	cmp	r3, r1
 8010f82:	bf01      	itttt	eq
 8010f84:	6819      	ldreq	r1, [r3, #0]
 8010f86:	685b      	ldreq	r3, [r3, #4]
 8010f88:	1809      	addeq	r1, r1, r0
 8010f8a:	6021      	streq	r1, [r4, #0]
 8010f8c:	e7ed      	b.n	8010f6a <_free_r+0x1e>
 8010f8e:	461a      	mov	r2, r3
 8010f90:	685b      	ldr	r3, [r3, #4]
 8010f92:	b10b      	cbz	r3, 8010f98 <_free_r+0x4c>
 8010f94:	42a3      	cmp	r3, r4
 8010f96:	d9fa      	bls.n	8010f8e <_free_r+0x42>
 8010f98:	6811      	ldr	r1, [r2, #0]
 8010f9a:	1850      	adds	r0, r2, r1
 8010f9c:	42a0      	cmp	r0, r4
 8010f9e:	d10b      	bne.n	8010fb8 <_free_r+0x6c>
 8010fa0:	6820      	ldr	r0, [r4, #0]
 8010fa2:	4401      	add	r1, r0
 8010fa4:	1850      	adds	r0, r2, r1
 8010fa6:	4283      	cmp	r3, r0
 8010fa8:	6011      	str	r1, [r2, #0]
 8010faa:	d1e0      	bne.n	8010f6e <_free_r+0x22>
 8010fac:	6818      	ldr	r0, [r3, #0]
 8010fae:	685b      	ldr	r3, [r3, #4]
 8010fb0:	6053      	str	r3, [r2, #4]
 8010fb2:	4408      	add	r0, r1
 8010fb4:	6010      	str	r0, [r2, #0]
 8010fb6:	e7da      	b.n	8010f6e <_free_r+0x22>
 8010fb8:	d902      	bls.n	8010fc0 <_free_r+0x74>
 8010fba:	230c      	movs	r3, #12
 8010fbc:	602b      	str	r3, [r5, #0]
 8010fbe:	e7d6      	b.n	8010f6e <_free_r+0x22>
 8010fc0:	6820      	ldr	r0, [r4, #0]
 8010fc2:	1821      	adds	r1, r4, r0
 8010fc4:	428b      	cmp	r3, r1
 8010fc6:	bf04      	itt	eq
 8010fc8:	6819      	ldreq	r1, [r3, #0]
 8010fca:	685b      	ldreq	r3, [r3, #4]
 8010fcc:	6063      	str	r3, [r4, #4]
 8010fce:	bf04      	itt	eq
 8010fd0:	1809      	addeq	r1, r1, r0
 8010fd2:	6021      	streq	r1, [r4, #0]
 8010fd4:	6054      	str	r4, [r2, #4]
 8010fd6:	e7ca      	b.n	8010f6e <_free_r+0x22>
 8010fd8:	bd38      	pop	{r3, r4, r5, pc}
 8010fda:	bf00      	nop
 8010fdc:	24000ad8 	.word	0x24000ad8

08010fe0 <malloc>:
 8010fe0:	4b02      	ldr	r3, [pc, #8]	@ (8010fec <malloc+0xc>)
 8010fe2:	4601      	mov	r1, r0
 8010fe4:	6818      	ldr	r0, [r3, #0]
 8010fe6:	f000 b825 	b.w	8011034 <_malloc_r>
 8010fea:	bf00      	nop
 8010fec:	2400001c 	.word	0x2400001c

08010ff0 <sbrk_aligned>:
 8010ff0:	b570      	push	{r4, r5, r6, lr}
 8010ff2:	4e0f      	ldr	r6, [pc, #60]	@ (8011030 <sbrk_aligned+0x40>)
 8010ff4:	460c      	mov	r4, r1
 8010ff6:	6831      	ldr	r1, [r6, #0]
 8010ff8:	4605      	mov	r5, r0
 8010ffa:	b911      	cbnz	r1, 8011002 <sbrk_aligned+0x12>
 8010ffc:	f000 fe46 	bl	8011c8c <_sbrk_r>
 8011000:	6030      	str	r0, [r6, #0]
 8011002:	4621      	mov	r1, r4
 8011004:	4628      	mov	r0, r5
 8011006:	f000 fe41 	bl	8011c8c <_sbrk_r>
 801100a:	1c43      	adds	r3, r0, #1
 801100c:	d103      	bne.n	8011016 <sbrk_aligned+0x26>
 801100e:	f04f 34ff 	mov.w	r4, #4294967295
 8011012:	4620      	mov	r0, r4
 8011014:	bd70      	pop	{r4, r5, r6, pc}
 8011016:	1cc4      	adds	r4, r0, #3
 8011018:	f024 0403 	bic.w	r4, r4, #3
 801101c:	42a0      	cmp	r0, r4
 801101e:	d0f8      	beq.n	8011012 <sbrk_aligned+0x22>
 8011020:	1a21      	subs	r1, r4, r0
 8011022:	4628      	mov	r0, r5
 8011024:	f000 fe32 	bl	8011c8c <_sbrk_r>
 8011028:	3001      	adds	r0, #1
 801102a:	d1f2      	bne.n	8011012 <sbrk_aligned+0x22>
 801102c:	e7ef      	b.n	801100e <sbrk_aligned+0x1e>
 801102e:	bf00      	nop
 8011030:	24000ad4 	.word	0x24000ad4

08011034 <_malloc_r>:
 8011034:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011038:	1ccd      	adds	r5, r1, #3
 801103a:	f025 0503 	bic.w	r5, r5, #3
 801103e:	3508      	adds	r5, #8
 8011040:	2d0c      	cmp	r5, #12
 8011042:	bf38      	it	cc
 8011044:	250c      	movcc	r5, #12
 8011046:	2d00      	cmp	r5, #0
 8011048:	4606      	mov	r6, r0
 801104a:	db01      	blt.n	8011050 <_malloc_r+0x1c>
 801104c:	42a9      	cmp	r1, r5
 801104e:	d904      	bls.n	801105a <_malloc_r+0x26>
 8011050:	230c      	movs	r3, #12
 8011052:	6033      	str	r3, [r6, #0]
 8011054:	2000      	movs	r0, #0
 8011056:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801105a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011130 <_malloc_r+0xfc>
 801105e:	f000 f869 	bl	8011134 <__malloc_lock>
 8011062:	f8d8 3000 	ldr.w	r3, [r8]
 8011066:	461c      	mov	r4, r3
 8011068:	bb44      	cbnz	r4, 80110bc <_malloc_r+0x88>
 801106a:	4629      	mov	r1, r5
 801106c:	4630      	mov	r0, r6
 801106e:	f7ff ffbf 	bl	8010ff0 <sbrk_aligned>
 8011072:	1c43      	adds	r3, r0, #1
 8011074:	4604      	mov	r4, r0
 8011076:	d158      	bne.n	801112a <_malloc_r+0xf6>
 8011078:	f8d8 4000 	ldr.w	r4, [r8]
 801107c:	4627      	mov	r7, r4
 801107e:	2f00      	cmp	r7, #0
 8011080:	d143      	bne.n	801110a <_malloc_r+0xd6>
 8011082:	2c00      	cmp	r4, #0
 8011084:	d04b      	beq.n	801111e <_malloc_r+0xea>
 8011086:	6823      	ldr	r3, [r4, #0]
 8011088:	4639      	mov	r1, r7
 801108a:	4630      	mov	r0, r6
 801108c:	eb04 0903 	add.w	r9, r4, r3
 8011090:	f000 fdfc 	bl	8011c8c <_sbrk_r>
 8011094:	4581      	cmp	r9, r0
 8011096:	d142      	bne.n	801111e <_malloc_r+0xea>
 8011098:	6821      	ldr	r1, [r4, #0]
 801109a:	1a6d      	subs	r5, r5, r1
 801109c:	4629      	mov	r1, r5
 801109e:	4630      	mov	r0, r6
 80110a0:	f7ff ffa6 	bl	8010ff0 <sbrk_aligned>
 80110a4:	3001      	adds	r0, #1
 80110a6:	d03a      	beq.n	801111e <_malloc_r+0xea>
 80110a8:	6823      	ldr	r3, [r4, #0]
 80110aa:	442b      	add	r3, r5
 80110ac:	6023      	str	r3, [r4, #0]
 80110ae:	f8d8 3000 	ldr.w	r3, [r8]
 80110b2:	685a      	ldr	r2, [r3, #4]
 80110b4:	bb62      	cbnz	r2, 8011110 <_malloc_r+0xdc>
 80110b6:	f8c8 7000 	str.w	r7, [r8]
 80110ba:	e00f      	b.n	80110dc <_malloc_r+0xa8>
 80110bc:	6822      	ldr	r2, [r4, #0]
 80110be:	1b52      	subs	r2, r2, r5
 80110c0:	d420      	bmi.n	8011104 <_malloc_r+0xd0>
 80110c2:	2a0b      	cmp	r2, #11
 80110c4:	d917      	bls.n	80110f6 <_malloc_r+0xc2>
 80110c6:	1961      	adds	r1, r4, r5
 80110c8:	42a3      	cmp	r3, r4
 80110ca:	6025      	str	r5, [r4, #0]
 80110cc:	bf18      	it	ne
 80110ce:	6059      	strne	r1, [r3, #4]
 80110d0:	6863      	ldr	r3, [r4, #4]
 80110d2:	bf08      	it	eq
 80110d4:	f8c8 1000 	streq.w	r1, [r8]
 80110d8:	5162      	str	r2, [r4, r5]
 80110da:	604b      	str	r3, [r1, #4]
 80110dc:	4630      	mov	r0, r6
 80110de:	f000 f82f 	bl	8011140 <__malloc_unlock>
 80110e2:	f104 000b 	add.w	r0, r4, #11
 80110e6:	1d23      	adds	r3, r4, #4
 80110e8:	f020 0007 	bic.w	r0, r0, #7
 80110ec:	1ac2      	subs	r2, r0, r3
 80110ee:	bf1c      	itt	ne
 80110f0:	1a1b      	subne	r3, r3, r0
 80110f2:	50a3      	strne	r3, [r4, r2]
 80110f4:	e7af      	b.n	8011056 <_malloc_r+0x22>
 80110f6:	6862      	ldr	r2, [r4, #4]
 80110f8:	42a3      	cmp	r3, r4
 80110fa:	bf0c      	ite	eq
 80110fc:	f8c8 2000 	streq.w	r2, [r8]
 8011100:	605a      	strne	r2, [r3, #4]
 8011102:	e7eb      	b.n	80110dc <_malloc_r+0xa8>
 8011104:	4623      	mov	r3, r4
 8011106:	6864      	ldr	r4, [r4, #4]
 8011108:	e7ae      	b.n	8011068 <_malloc_r+0x34>
 801110a:	463c      	mov	r4, r7
 801110c:	687f      	ldr	r7, [r7, #4]
 801110e:	e7b6      	b.n	801107e <_malloc_r+0x4a>
 8011110:	461a      	mov	r2, r3
 8011112:	685b      	ldr	r3, [r3, #4]
 8011114:	42a3      	cmp	r3, r4
 8011116:	d1fb      	bne.n	8011110 <_malloc_r+0xdc>
 8011118:	2300      	movs	r3, #0
 801111a:	6053      	str	r3, [r2, #4]
 801111c:	e7de      	b.n	80110dc <_malloc_r+0xa8>
 801111e:	230c      	movs	r3, #12
 8011120:	6033      	str	r3, [r6, #0]
 8011122:	4630      	mov	r0, r6
 8011124:	f000 f80c 	bl	8011140 <__malloc_unlock>
 8011128:	e794      	b.n	8011054 <_malloc_r+0x20>
 801112a:	6005      	str	r5, [r0, #0]
 801112c:	e7d6      	b.n	80110dc <_malloc_r+0xa8>
 801112e:	bf00      	nop
 8011130:	24000ad8 	.word	0x24000ad8

08011134 <__malloc_lock>:
 8011134:	4801      	ldr	r0, [pc, #4]	@ (801113c <__malloc_lock+0x8>)
 8011136:	f7ff b926 	b.w	8010386 <__retarget_lock_acquire_recursive>
 801113a:	bf00      	nop
 801113c:	24000ad0 	.word	0x24000ad0

08011140 <__malloc_unlock>:
 8011140:	4801      	ldr	r0, [pc, #4]	@ (8011148 <__malloc_unlock+0x8>)
 8011142:	f7ff b921 	b.w	8010388 <__retarget_lock_release_recursive>
 8011146:	bf00      	nop
 8011148:	24000ad0 	.word	0x24000ad0

0801114c <_Balloc>:
 801114c:	b570      	push	{r4, r5, r6, lr}
 801114e:	69c6      	ldr	r6, [r0, #28]
 8011150:	4604      	mov	r4, r0
 8011152:	460d      	mov	r5, r1
 8011154:	b976      	cbnz	r6, 8011174 <_Balloc+0x28>
 8011156:	2010      	movs	r0, #16
 8011158:	f7ff ff42 	bl	8010fe0 <malloc>
 801115c:	4602      	mov	r2, r0
 801115e:	61e0      	str	r0, [r4, #28]
 8011160:	b920      	cbnz	r0, 801116c <_Balloc+0x20>
 8011162:	4b18      	ldr	r3, [pc, #96]	@ (80111c4 <_Balloc+0x78>)
 8011164:	4818      	ldr	r0, [pc, #96]	@ (80111c8 <_Balloc+0x7c>)
 8011166:	216b      	movs	r1, #107	@ 0x6b
 8011168:	f000 fdae 	bl	8011cc8 <__assert_func>
 801116c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011170:	6006      	str	r6, [r0, #0]
 8011172:	60c6      	str	r6, [r0, #12]
 8011174:	69e6      	ldr	r6, [r4, #28]
 8011176:	68f3      	ldr	r3, [r6, #12]
 8011178:	b183      	cbz	r3, 801119c <_Balloc+0x50>
 801117a:	69e3      	ldr	r3, [r4, #28]
 801117c:	68db      	ldr	r3, [r3, #12]
 801117e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011182:	b9b8      	cbnz	r0, 80111b4 <_Balloc+0x68>
 8011184:	2101      	movs	r1, #1
 8011186:	fa01 f605 	lsl.w	r6, r1, r5
 801118a:	1d72      	adds	r2, r6, #5
 801118c:	0092      	lsls	r2, r2, #2
 801118e:	4620      	mov	r0, r4
 8011190:	f000 fdb8 	bl	8011d04 <_calloc_r>
 8011194:	b160      	cbz	r0, 80111b0 <_Balloc+0x64>
 8011196:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801119a:	e00e      	b.n	80111ba <_Balloc+0x6e>
 801119c:	2221      	movs	r2, #33	@ 0x21
 801119e:	2104      	movs	r1, #4
 80111a0:	4620      	mov	r0, r4
 80111a2:	f000 fdaf 	bl	8011d04 <_calloc_r>
 80111a6:	69e3      	ldr	r3, [r4, #28]
 80111a8:	60f0      	str	r0, [r6, #12]
 80111aa:	68db      	ldr	r3, [r3, #12]
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	d1e4      	bne.n	801117a <_Balloc+0x2e>
 80111b0:	2000      	movs	r0, #0
 80111b2:	bd70      	pop	{r4, r5, r6, pc}
 80111b4:	6802      	ldr	r2, [r0, #0]
 80111b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80111ba:	2300      	movs	r3, #0
 80111bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80111c0:	e7f7      	b.n	80111b2 <_Balloc+0x66>
 80111c2:	bf00      	nop
 80111c4:	08012629 	.word	0x08012629
 80111c8:	080126a9 	.word	0x080126a9

080111cc <_Bfree>:
 80111cc:	b570      	push	{r4, r5, r6, lr}
 80111ce:	69c6      	ldr	r6, [r0, #28]
 80111d0:	4605      	mov	r5, r0
 80111d2:	460c      	mov	r4, r1
 80111d4:	b976      	cbnz	r6, 80111f4 <_Bfree+0x28>
 80111d6:	2010      	movs	r0, #16
 80111d8:	f7ff ff02 	bl	8010fe0 <malloc>
 80111dc:	4602      	mov	r2, r0
 80111de:	61e8      	str	r0, [r5, #28]
 80111e0:	b920      	cbnz	r0, 80111ec <_Bfree+0x20>
 80111e2:	4b09      	ldr	r3, [pc, #36]	@ (8011208 <_Bfree+0x3c>)
 80111e4:	4809      	ldr	r0, [pc, #36]	@ (801120c <_Bfree+0x40>)
 80111e6:	218f      	movs	r1, #143	@ 0x8f
 80111e8:	f000 fd6e 	bl	8011cc8 <__assert_func>
 80111ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80111f0:	6006      	str	r6, [r0, #0]
 80111f2:	60c6      	str	r6, [r0, #12]
 80111f4:	b13c      	cbz	r4, 8011206 <_Bfree+0x3a>
 80111f6:	69eb      	ldr	r3, [r5, #28]
 80111f8:	6862      	ldr	r2, [r4, #4]
 80111fa:	68db      	ldr	r3, [r3, #12]
 80111fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011200:	6021      	str	r1, [r4, #0]
 8011202:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011206:	bd70      	pop	{r4, r5, r6, pc}
 8011208:	08012629 	.word	0x08012629
 801120c:	080126a9 	.word	0x080126a9

08011210 <__multadd>:
 8011210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011214:	690d      	ldr	r5, [r1, #16]
 8011216:	4607      	mov	r7, r0
 8011218:	460c      	mov	r4, r1
 801121a:	461e      	mov	r6, r3
 801121c:	f101 0c14 	add.w	ip, r1, #20
 8011220:	2000      	movs	r0, #0
 8011222:	f8dc 3000 	ldr.w	r3, [ip]
 8011226:	b299      	uxth	r1, r3
 8011228:	fb02 6101 	mla	r1, r2, r1, r6
 801122c:	0c1e      	lsrs	r6, r3, #16
 801122e:	0c0b      	lsrs	r3, r1, #16
 8011230:	fb02 3306 	mla	r3, r2, r6, r3
 8011234:	b289      	uxth	r1, r1
 8011236:	3001      	adds	r0, #1
 8011238:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801123c:	4285      	cmp	r5, r0
 801123e:	f84c 1b04 	str.w	r1, [ip], #4
 8011242:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011246:	dcec      	bgt.n	8011222 <__multadd+0x12>
 8011248:	b30e      	cbz	r6, 801128e <__multadd+0x7e>
 801124a:	68a3      	ldr	r3, [r4, #8]
 801124c:	42ab      	cmp	r3, r5
 801124e:	dc19      	bgt.n	8011284 <__multadd+0x74>
 8011250:	6861      	ldr	r1, [r4, #4]
 8011252:	4638      	mov	r0, r7
 8011254:	3101      	adds	r1, #1
 8011256:	f7ff ff79 	bl	801114c <_Balloc>
 801125a:	4680      	mov	r8, r0
 801125c:	b928      	cbnz	r0, 801126a <__multadd+0x5a>
 801125e:	4602      	mov	r2, r0
 8011260:	4b0c      	ldr	r3, [pc, #48]	@ (8011294 <__multadd+0x84>)
 8011262:	480d      	ldr	r0, [pc, #52]	@ (8011298 <__multadd+0x88>)
 8011264:	21ba      	movs	r1, #186	@ 0xba
 8011266:	f000 fd2f 	bl	8011cc8 <__assert_func>
 801126a:	6922      	ldr	r2, [r4, #16]
 801126c:	3202      	adds	r2, #2
 801126e:	f104 010c 	add.w	r1, r4, #12
 8011272:	0092      	lsls	r2, r2, #2
 8011274:	300c      	adds	r0, #12
 8011276:	f000 fd19 	bl	8011cac <memcpy>
 801127a:	4621      	mov	r1, r4
 801127c:	4638      	mov	r0, r7
 801127e:	f7ff ffa5 	bl	80111cc <_Bfree>
 8011282:	4644      	mov	r4, r8
 8011284:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011288:	3501      	adds	r5, #1
 801128a:	615e      	str	r6, [r3, #20]
 801128c:	6125      	str	r5, [r4, #16]
 801128e:	4620      	mov	r0, r4
 8011290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011294:	08012698 	.word	0x08012698
 8011298:	080126a9 	.word	0x080126a9

0801129c <__hi0bits>:
 801129c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80112a0:	4603      	mov	r3, r0
 80112a2:	bf36      	itet	cc
 80112a4:	0403      	lslcc	r3, r0, #16
 80112a6:	2000      	movcs	r0, #0
 80112a8:	2010      	movcc	r0, #16
 80112aa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80112ae:	bf3c      	itt	cc
 80112b0:	021b      	lslcc	r3, r3, #8
 80112b2:	3008      	addcc	r0, #8
 80112b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80112b8:	bf3c      	itt	cc
 80112ba:	011b      	lslcc	r3, r3, #4
 80112bc:	3004      	addcc	r0, #4
 80112be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80112c2:	bf3c      	itt	cc
 80112c4:	009b      	lslcc	r3, r3, #2
 80112c6:	3002      	addcc	r0, #2
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	db05      	blt.n	80112d8 <__hi0bits+0x3c>
 80112cc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80112d0:	f100 0001 	add.w	r0, r0, #1
 80112d4:	bf08      	it	eq
 80112d6:	2020      	moveq	r0, #32
 80112d8:	4770      	bx	lr

080112da <__lo0bits>:
 80112da:	6803      	ldr	r3, [r0, #0]
 80112dc:	4602      	mov	r2, r0
 80112de:	f013 0007 	ands.w	r0, r3, #7
 80112e2:	d00b      	beq.n	80112fc <__lo0bits+0x22>
 80112e4:	07d9      	lsls	r1, r3, #31
 80112e6:	d421      	bmi.n	801132c <__lo0bits+0x52>
 80112e8:	0798      	lsls	r0, r3, #30
 80112ea:	bf49      	itett	mi
 80112ec:	085b      	lsrmi	r3, r3, #1
 80112ee:	089b      	lsrpl	r3, r3, #2
 80112f0:	2001      	movmi	r0, #1
 80112f2:	6013      	strmi	r3, [r2, #0]
 80112f4:	bf5c      	itt	pl
 80112f6:	6013      	strpl	r3, [r2, #0]
 80112f8:	2002      	movpl	r0, #2
 80112fa:	4770      	bx	lr
 80112fc:	b299      	uxth	r1, r3
 80112fe:	b909      	cbnz	r1, 8011304 <__lo0bits+0x2a>
 8011300:	0c1b      	lsrs	r3, r3, #16
 8011302:	2010      	movs	r0, #16
 8011304:	b2d9      	uxtb	r1, r3
 8011306:	b909      	cbnz	r1, 801130c <__lo0bits+0x32>
 8011308:	3008      	adds	r0, #8
 801130a:	0a1b      	lsrs	r3, r3, #8
 801130c:	0719      	lsls	r1, r3, #28
 801130e:	bf04      	itt	eq
 8011310:	091b      	lsreq	r3, r3, #4
 8011312:	3004      	addeq	r0, #4
 8011314:	0799      	lsls	r1, r3, #30
 8011316:	bf04      	itt	eq
 8011318:	089b      	lsreq	r3, r3, #2
 801131a:	3002      	addeq	r0, #2
 801131c:	07d9      	lsls	r1, r3, #31
 801131e:	d403      	bmi.n	8011328 <__lo0bits+0x4e>
 8011320:	085b      	lsrs	r3, r3, #1
 8011322:	f100 0001 	add.w	r0, r0, #1
 8011326:	d003      	beq.n	8011330 <__lo0bits+0x56>
 8011328:	6013      	str	r3, [r2, #0]
 801132a:	4770      	bx	lr
 801132c:	2000      	movs	r0, #0
 801132e:	4770      	bx	lr
 8011330:	2020      	movs	r0, #32
 8011332:	4770      	bx	lr

08011334 <__i2b>:
 8011334:	b510      	push	{r4, lr}
 8011336:	460c      	mov	r4, r1
 8011338:	2101      	movs	r1, #1
 801133a:	f7ff ff07 	bl	801114c <_Balloc>
 801133e:	4602      	mov	r2, r0
 8011340:	b928      	cbnz	r0, 801134e <__i2b+0x1a>
 8011342:	4b05      	ldr	r3, [pc, #20]	@ (8011358 <__i2b+0x24>)
 8011344:	4805      	ldr	r0, [pc, #20]	@ (801135c <__i2b+0x28>)
 8011346:	f240 1145 	movw	r1, #325	@ 0x145
 801134a:	f000 fcbd 	bl	8011cc8 <__assert_func>
 801134e:	2301      	movs	r3, #1
 8011350:	6144      	str	r4, [r0, #20]
 8011352:	6103      	str	r3, [r0, #16]
 8011354:	bd10      	pop	{r4, pc}
 8011356:	bf00      	nop
 8011358:	08012698 	.word	0x08012698
 801135c:	080126a9 	.word	0x080126a9

08011360 <__multiply>:
 8011360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011364:	4614      	mov	r4, r2
 8011366:	690a      	ldr	r2, [r1, #16]
 8011368:	6923      	ldr	r3, [r4, #16]
 801136a:	429a      	cmp	r2, r3
 801136c:	bfa8      	it	ge
 801136e:	4623      	movge	r3, r4
 8011370:	460f      	mov	r7, r1
 8011372:	bfa4      	itt	ge
 8011374:	460c      	movge	r4, r1
 8011376:	461f      	movge	r7, r3
 8011378:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801137c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8011380:	68a3      	ldr	r3, [r4, #8]
 8011382:	6861      	ldr	r1, [r4, #4]
 8011384:	eb0a 0609 	add.w	r6, sl, r9
 8011388:	42b3      	cmp	r3, r6
 801138a:	b085      	sub	sp, #20
 801138c:	bfb8      	it	lt
 801138e:	3101      	addlt	r1, #1
 8011390:	f7ff fedc 	bl	801114c <_Balloc>
 8011394:	b930      	cbnz	r0, 80113a4 <__multiply+0x44>
 8011396:	4602      	mov	r2, r0
 8011398:	4b44      	ldr	r3, [pc, #272]	@ (80114ac <__multiply+0x14c>)
 801139a:	4845      	ldr	r0, [pc, #276]	@ (80114b0 <__multiply+0x150>)
 801139c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80113a0:	f000 fc92 	bl	8011cc8 <__assert_func>
 80113a4:	f100 0514 	add.w	r5, r0, #20
 80113a8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80113ac:	462b      	mov	r3, r5
 80113ae:	2200      	movs	r2, #0
 80113b0:	4543      	cmp	r3, r8
 80113b2:	d321      	bcc.n	80113f8 <__multiply+0x98>
 80113b4:	f107 0114 	add.w	r1, r7, #20
 80113b8:	f104 0214 	add.w	r2, r4, #20
 80113bc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80113c0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80113c4:	9302      	str	r3, [sp, #8]
 80113c6:	1b13      	subs	r3, r2, r4
 80113c8:	3b15      	subs	r3, #21
 80113ca:	f023 0303 	bic.w	r3, r3, #3
 80113ce:	3304      	adds	r3, #4
 80113d0:	f104 0715 	add.w	r7, r4, #21
 80113d4:	42ba      	cmp	r2, r7
 80113d6:	bf38      	it	cc
 80113d8:	2304      	movcc	r3, #4
 80113da:	9301      	str	r3, [sp, #4]
 80113dc:	9b02      	ldr	r3, [sp, #8]
 80113de:	9103      	str	r1, [sp, #12]
 80113e0:	428b      	cmp	r3, r1
 80113e2:	d80c      	bhi.n	80113fe <__multiply+0x9e>
 80113e4:	2e00      	cmp	r6, #0
 80113e6:	dd03      	ble.n	80113f0 <__multiply+0x90>
 80113e8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	d05b      	beq.n	80114a8 <__multiply+0x148>
 80113f0:	6106      	str	r6, [r0, #16]
 80113f2:	b005      	add	sp, #20
 80113f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113f8:	f843 2b04 	str.w	r2, [r3], #4
 80113fc:	e7d8      	b.n	80113b0 <__multiply+0x50>
 80113fe:	f8b1 a000 	ldrh.w	sl, [r1]
 8011402:	f1ba 0f00 	cmp.w	sl, #0
 8011406:	d024      	beq.n	8011452 <__multiply+0xf2>
 8011408:	f104 0e14 	add.w	lr, r4, #20
 801140c:	46a9      	mov	r9, r5
 801140e:	f04f 0c00 	mov.w	ip, #0
 8011412:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011416:	f8d9 3000 	ldr.w	r3, [r9]
 801141a:	fa1f fb87 	uxth.w	fp, r7
 801141e:	b29b      	uxth	r3, r3
 8011420:	fb0a 330b 	mla	r3, sl, fp, r3
 8011424:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8011428:	f8d9 7000 	ldr.w	r7, [r9]
 801142c:	4463      	add	r3, ip
 801142e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8011432:	fb0a c70b 	mla	r7, sl, fp, ip
 8011436:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801143a:	b29b      	uxth	r3, r3
 801143c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011440:	4572      	cmp	r2, lr
 8011442:	f849 3b04 	str.w	r3, [r9], #4
 8011446:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801144a:	d8e2      	bhi.n	8011412 <__multiply+0xb2>
 801144c:	9b01      	ldr	r3, [sp, #4]
 801144e:	f845 c003 	str.w	ip, [r5, r3]
 8011452:	9b03      	ldr	r3, [sp, #12]
 8011454:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8011458:	3104      	adds	r1, #4
 801145a:	f1b9 0f00 	cmp.w	r9, #0
 801145e:	d021      	beq.n	80114a4 <__multiply+0x144>
 8011460:	682b      	ldr	r3, [r5, #0]
 8011462:	f104 0c14 	add.w	ip, r4, #20
 8011466:	46ae      	mov	lr, r5
 8011468:	f04f 0a00 	mov.w	sl, #0
 801146c:	f8bc b000 	ldrh.w	fp, [ip]
 8011470:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8011474:	fb09 770b 	mla	r7, r9, fp, r7
 8011478:	4457      	add	r7, sl
 801147a:	b29b      	uxth	r3, r3
 801147c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011480:	f84e 3b04 	str.w	r3, [lr], #4
 8011484:	f85c 3b04 	ldr.w	r3, [ip], #4
 8011488:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801148c:	f8be 3000 	ldrh.w	r3, [lr]
 8011490:	fb09 330a 	mla	r3, r9, sl, r3
 8011494:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8011498:	4562      	cmp	r2, ip
 801149a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801149e:	d8e5      	bhi.n	801146c <__multiply+0x10c>
 80114a0:	9f01      	ldr	r7, [sp, #4]
 80114a2:	51eb      	str	r3, [r5, r7]
 80114a4:	3504      	adds	r5, #4
 80114a6:	e799      	b.n	80113dc <__multiply+0x7c>
 80114a8:	3e01      	subs	r6, #1
 80114aa:	e79b      	b.n	80113e4 <__multiply+0x84>
 80114ac:	08012698 	.word	0x08012698
 80114b0:	080126a9 	.word	0x080126a9

080114b4 <__pow5mult>:
 80114b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80114b8:	4615      	mov	r5, r2
 80114ba:	f012 0203 	ands.w	r2, r2, #3
 80114be:	4607      	mov	r7, r0
 80114c0:	460e      	mov	r6, r1
 80114c2:	d007      	beq.n	80114d4 <__pow5mult+0x20>
 80114c4:	4c25      	ldr	r4, [pc, #148]	@ (801155c <__pow5mult+0xa8>)
 80114c6:	3a01      	subs	r2, #1
 80114c8:	2300      	movs	r3, #0
 80114ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80114ce:	f7ff fe9f 	bl	8011210 <__multadd>
 80114d2:	4606      	mov	r6, r0
 80114d4:	10ad      	asrs	r5, r5, #2
 80114d6:	d03d      	beq.n	8011554 <__pow5mult+0xa0>
 80114d8:	69fc      	ldr	r4, [r7, #28]
 80114da:	b97c      	cbnz	r4, 80114fc <__pow5mult+0x48>
 80114dc:	2010      	movs	r0, #16
 80114de:	f7ff fd7f 	bl	8010fe0 <malloc>
 80114e2:	4602      	mov	r2, r0
 80114e4:	61f8      	str	r0, [r7, #28]
 80114e6:	b928      	cbnz	r0, 80114f4 <__pow5mult+0x40>
 80114e8:	4b1d      	ldr	r3, [pc, #116]	@ (8011560 <__pow5mult+0xac>)
 80114ea:	481e      	ldr	r0, [pc, #120]	@ (8011564 <__pow5mult+0xb0>)
 80114ec:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80114f0:	f000 fbea 	bl	8011cc8 <__assert_func>
 80114f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80114f8:	6004      	str	r4, [r0, #0]
 80114fa:	60c4      	str	r4, [r0, #12]
 80114fc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8011500:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011504:	b94c      	cbnz	r4, 801151a <__pow5mult+0x66>
 8011506:	f240 2171 	movw	r1, #625	@ 0x271
 801150a:	4638      	mov	r0, r7
 801150c:	f7ff ff12 	bl	8011334 <__i2b>
 8011510:	2300      	movs	r3, #0
 8011512:	f8c8 0008 	str.w	r0, [r8, #8]
 8011516:	4604      	mov	r4, r0
 8011518:	6003      	str	r3, [r0, #0]
 801151a:	f04f 0900 	mov.w	r9, #0
 801151e:	07eb      	lsls	r3, r5, #31
 8011520:	d50a      	bpl.n	8011538 <__pow5mult+0x84>
 8011522:	4631      	mov	r1, r6
 8011524:	4622      	mov	r2, r4
 8011526:	4638      	mov	r0, r7
 8011528:	f7ff ff1a 	bl	8011360 <__multiply>
 801152c:	4631      	mov	r1, r6
 801152e:	4680      	mov	r8, r0
 8011530:	4638      	mov	r0, r7
 8011532:	f7ff fe4b 	bl	80111cc <_Bfree>
 8011536:	4646      	mov	r6, r8
 8011538:	106d      	asrs	r5, r5, #1
 801153a:	d00b      	beq.n	8011554 <__pow5mult+0xa0>
 801153c:	6820      	ldr	r0, [r4, #0]
 801153e:	b938      	cbnz	r0, 8011550 <__pow5mult+0x9c>
 8011540:	4622      	mov	r2, r4
 8011542:	4621      	mov	r1, r4
 8011544:	4638      	mov	r0, r7
 8011546:	f7ff ff0b 	bl	8011360 <__multiply>
 801154a:	6020      	str	r0, [r4, #0]
 801154c:	f8c0 9000 	str.w	r9, [r0]
 8011550:	4604      	mov	r4, r0
 8011552:	e7e4      	b.n	801151e <__pow5mult+0x6a>
 8011554:	4630      	mov	r0, r6
 8011556:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801155a:	bf00      	nop
 801155c:	08012704 	.word	0x08012704
 8011560:	08012629 	.word	0x08012629
 8011564:	080126a9 	.word	0x080126a9

08011568 <__lshift>:
 8011568:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801156c:	460c      	mov	r4, r1
 801156e:	6849      	ldr	r1, [r1, #4]
 8011570:	6923      	ldr	r3, [r4, #16]
 8011572:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011576:	68a3      	ldr	r3, [r4, #8]
 8011578:	4607      	mov	r7, r0
 801157a:	4691      	mov	r9, r2
 801157c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011580:	f108 0601 	add.w	r6, r8, #1
 8011584:	42b3      	cmp	r3, r6
 8011586:	db0b      	blt.n	80115a0 <__lshift+0x38>
 8011588:	4638      	mov	r0, r7
 801158a:	f7ff fddf 	bl	801114c <_Balloc>
 801158e:	4605      	mov	r5, r0
 8011590:	b948      	cbnz	r0, 80115a6 <__lshift+0x3e>
 8011592:	4602      	mov	r2, r0
 8011594:	4b28      	ldr	r3, [pc, #160]	@ (8011638 <__lshift+0xd0>)
 8011596:	4829      	ldr	r0, [pc, #164]	@ (801163c <__lshift+0xd4>)
 8011598:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801159c:	f000 fb94 	bl	8011cc8 <__assert_func>
 80115a0:	3101      	adds	r1, #1
 80115a2:	005b      	lsls	r3, r3, #1
 80115a4:	e7ee      	b.n	8011584 <__lshift+0x1c>
 80115a6:	2300      	movs	r3, #0
 80115a8:	f100 0114 	add.w	r1, r0, #20
 80115ac:	f100 0210 	add.w	r2, r0, #16
 80115b0:	4618      	mov	r0, r3
 80115b2:	4553      	cmp	r3, sl
 80115b4:	db33      	blt.n	801161e <__lshift+0xb6>
 80115b6:	6920      	ldr	r0, [r4, #16]
 80115b8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80115bc:	f104 0314 	add.w	r3, r4, #20
 80115c0:	f019 091f 	ands.w	r9, r9, #31
 80115c4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80115c8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80115cc:	d02b      	beq.n	8011626 <__lshift+0xbe>
 80115ce:	f1c9 0e20 	rsb	lr, r9, #32
 80115d2:	468a      	mov	sl, r1
 80115d4:	2200      	movs	r2, #0
 80115d6:	6818      	ldr	r0, [r3, #0]
 80115d8:	fa00 f009 	lsl.w	r0, r0, r9
 80115dc:	4310      	orrs	r0, r2
 80115de:	f84a 0b04 	str.w	r0, [sl], #4
 80115e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80115e6:	459c      	cmp	ip, r3
 80115e8:	fa22 f20e 	lsr.w	r2, r2, lr
 80115ec:	d8f3      	bhi.n	80115d6 <__lshift+0x6e>
 80115ee:	ebac 0304 	sub.w	r3, ip, r4
 80115f2:	3b15      	subs	r3, #21
 80115f4:	f023 0303 	bic.w	r3, r3, #3
 80115f8:	3304      	adds	r3, #4
 80115fa:	f104 0015 	add.w	r0, r4, #21
 80115fe:	4584      	cmp	ip, r0
 8011600:	bf38      	it	cc
 8011602:	2304      	movcc	r3, #4
 8011604:	50ca      	str	r2, [r1, r3]
 8011606:	b10a      	cbz	r2, 801160c <__lshift+0xa4>
 8011608:	f108 0602 	add.w	r6, r8, #2
 801160c:	3e01      	subs	r6, #1
 801160e:	4638      	mov	r0, r7
 8011610:	612e      	str	r6, [r5, #16]
 8011612:	4621      	mov	r1, r4
 8011614:	f7ff fdda 	bl	80111cc <_Bfree>
 8011618:	4628      	mov	r0, r5
 801161a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801161e:	f842 0f04 	str.w	r0, [r2, #4]!
 8011622:	3301      	adds	r3, #1
 8011624:	e7c5      	b.n	80115b2 <__lshift+0x4a>
 8011626:	3904      	subs	r1, #4
 8011628:	f853 2b04 	ldr.w	r2, [r3], #4
 801162c:	f841 2f04 	str.w	r2, [r1, #4]!
 8011630:	459c      	cmp	ip, r3
 8011632:	d8f9      	bhi.n	8011628 <__lshift+0xc0>
 8011634:	e7ea      	b.n	801160c <__lshift+0xa4>
 8011636:	bf00      	nop
 8011638:	08012698 	.word	0x08012698
 801163c:	080126a9 	.word	0x080126a9

08011640 <__mcmp>:
 8011640:	690a      	ldr	r2, [r1, #16]
 8011642:	4603      	mov	r3, r0
 8011644:	6900      	ldr	r0, [r0, #16]
 8011646:	1a80      	subs	r0, r0, r2
 8011648:	b530      	push	{r4, r5, lr}
 801164a:	d10e      	bne.n	801166a <__mcmp+0x2a>
 801164c:	3314      	adds	r3, #20
 801164e:	3114      	adds	r1, #20
 8011650:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8011654:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8011658:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801165c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011660:	4295      	cmp	r5, r2
 8011662:	d003      	beq.n	801166c <__mcmp+0x2c>
 8011664:	d205      	bcs.n	8011672 <__mcmp+0x32>
 8011666:	f04f 30ff 	mov.w	r0, #4294967295
 801166a:	bd30      	pop	{r4, r5, pc}
 801166c:	42a3      	cmp	r3, r4
 801166e:	d3f3      	bcc.n	8011658 <__mcmp+0x18>
 8011670:	e7fb      	b.n	801166a <__mcmp+0x2a>
 8011672:	2001      	movs	r0, #1
 8011674:	e7f9      	b.n	801166a <__mcmp+0x2a>
	...

08011678 <__mdiff>:
 8011678:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801167c:	4689      	mov	r9, r1
 801167e:	4606      	mov	r6, r0
 8011680:	4611      	mov	r1, r2
 8011682:	4648      	mov	r0, r9
 8011684:	4614      	mov	r4, r2
 8011686:	f7ff ffdb 	bl	8011640 <__mcmp>
 801168a:	1e05      	subs	r5, r0, #0
 801168c:	d112      	bne.n	80116b4 <__mdiff+0x3c>
 801168e:	4629      	mov	r1, r5
 8011690:	4630      	mov	r0, r6
 8011692:	f7ff fd5b 	bl	801114c <_Balloc>
 8011696:	4602      	mov	r2, r0
 8011698:	b928      	cbnz	r0, 80116a6 <__mdiff+0x2e>
 801169a:	4b3f      	ldr	r3, [pc, #252]	@ (8011798 <__mdiff+0x120>)
 801169c:	f240 2137 	movw	r1, #567	@ 0x237
 80116a0:	483e      	ldr	r0, [pc, #248]	@ (801179c <__mdiff+0x124>)
 80116a2:	f000 fb11 	bl	8011cc8 <__assert_func>
 80116a6:	2301      	movs	r3, #1
 80116a8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80116ac:	4610      	mov	r0, r2
 80116ae:	b003      	add	sp, #12
 80116b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116b4:	bfbc      	itt	lt
 80116b6:	464b      	movlt	r3, r9
 80116b8:	46a1      	movlt	r9, r4
 80116ba:	4630      	mov	r0, r6
 80116bc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80116c0:	bfba      	itte	lt
 80116c2:	461c      	movlt	r4, r3
 80116c4:	2501      	movlt	r5, #1
 80116c6:	2500      	movge	r5, #0
 80116c8:	f7ff fd40 	bl	801114c <_Balloc>
 80116cc:	4602      	mov	r2, r0
 80116ce:	b918      	cbnz	r0, 80116d8 <__mdiff+0x60>
 80116d0:	4b31      	ldr	r3, [pc, #196]	@ (8011798 <__mdiff+0x120>)
 80116d2:	f240 2145 	movw	r1, #581	@ 0x245
 80116d6:	e7e3      	b.n	80116a0 <__mdiff+0x28>
 80116d8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80116dc:	6926      	ldr	r6, [r4, #16]
 80116de:	60c5      	str	r5, [r0, #12]
 80116e0:	f109 0310 	add.w	r3, r9, #16
 80116e4:	f109 0514 	add.w	r5, r9, #20
 80116e8:	f104 0e14 	add.w	lr, r4, #20
 80116ec:	f100 0b14 	add.w	fp, r0, #20
 80116f0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80116f4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80116f8:	9301      	str	r3, [sp, #4]
 80116fa:	46d9      	mov	r9, fp
 80116fc:	f04f 0c00 	mov.w	ip, #0
 8011700:	9b01      	ldr	r3, [sp, #4]
 8011702:	f85e 0b04 	ldr.w	r0, [lr], #4
 8011706:	f853 af04 	ldr.w	sl, [r3, #4]!
 801170a:	9301      	str	r3, [sp, #4]
 801170c:	fa1f f38a 	uxth.w	r3, sl
 8011710:	4619      	mov	r1, r3
 8011712:	b283      	uxth	r3, r0
 8011714:	1acb      	subs	r3, r1, r3
 8011716:	0c00      	lsrs	r0, r0, #16
 8011718:	4463      	add	r3, ip
 801171a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801171e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8011722:	b29b      	uxth	r3, r3
 8011724:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8011728:	4576      	cmp	r6, lr
 801172a:	f849 3b04 	str.w	r3, [r9], #4
 801172e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011732:	d8e5      	bhi.n	8011700 <__mdiff+0x88>
 8011734:	1b33      	subs	r3, r6, r4
 8011736:	3b15      	subs	r3, #21
 8011738:	f023 0303 	bic.w	r3, r3, #3
 801173c:	3415      	adds	r4, #21
 801173e:	3304      	adds	r3, #4
 8011740:	42a6      	cmp	r6, r4
 8011742:	bf38      	it	cc
 8011744:	2304      	movcc	r3, #4
 8011746:	441d      	add	r5, r3
 8011748:	445b      	add	r3, fp
 801174a:	461e      	mov	r6, r3
 801174c:	462c      	mov	r4, r5
 801174e:	4544      	cmp	r4, r8
 8011750:	d30e      	bcc.n	8011770 <__mdiff+0xf8>
 8011752:	f108 0103 	add.w	r1, r8, #3
 8011756:	1b49      	subs	r1, r1, r5
 8011758:	f021 0103 	bic.w	r1, r1, #3
 801175c:	3d03      	subs	r5, #3
 801175e:	45a8      	cmp	r8, r5
 8011760:	bf38      	it	cc
 8011762:	2100      	movcc	r1, #0
 8011764:	440b      	add	r3, r1
 8011766:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801176a:	b191      	cbz	r1, 8011792 <__mdiff+0x11a>
 801176c:	6117      	str	r7, [r2, #16]
 801176e:	e79d      	b.n	80116ac <__mdiff+0x34>
 8011770:	f854 1b04 	ldr.w	r1, [r4], #4
 8011774:	46e6      	mov	lr, ip
 8011776:	0c08      	lsrs	r0, r1, #16
 8011778:	fa1c fc81 	uxtah	ip, ip, r1
 801177c:	4471      	add	r1, lr
 801177e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8011782:	b289      	uxth	r1, r1
 8011784:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011788:	f846 1b04 	str.w	r1, [r6], #4
 801178c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011790:	e7dd      	b.n	801174e <__mdiff+0xd6>
 8011792:	3f01      	subs	r7, #1
 8011794:	e7e7      	b.n	8011766 <__mdiff+0xee>
 8011796:	bf00      	nop
 8011798:	08012698 	.word	0x08012698
 801179c:	080126a9 	.word	0x080126a9

080117a0 <__d2b>:
 80117a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80117a4:	460f      	mov	r7, r1
 80117a6:	2101      	movs	r1, #1
 80117a8:	ec59 8b10 	vmov	r8, r9, d0
 80117ac:	4616      	mov	r6, r2
 80117ae:	f7ff fccd 	bl	801114c <_Balloc>
 80117b2:	4604      	mov	r4, r0
 80117b4:	b930      	cbnz	r0, 80117c4 <__d2b+0x24>
 80117b6:	4602      	mov	r2, r0
 80117b8:	4b23      	ldr	r3, [pc, #140]	@ (8011848 <__d2b+0xa8>)
 80117ba:	4824      	ldr	r0, [pc, #144]	@ (801184c <__d2b+0xac>)
 80117bc:	f240 310f 	movw	r1, #783	@ 0x30f
 80117c0:	f000 fa82 	bl	8011cc8 <__assert_func>
 80117c4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80117c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80117cc:	b10d      	cbz	r5, 80117d2 <__d2b+0x32>
 80117ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80117d2:	9301      	str	r3, [sp, #4]
 80117d4:	f1b8 0300 	subs.w	r3, r8, #0
 80117d8:	d023      	beq.n	8011822 <__d2b+0x82>
 80117da:	4668      	mov	r0, sp
 80117dc:	9300      	str	r3, [sp, #0]
 80117de:	f7ff fd7c 	bl	80112da <__lo0bits>
 80117e2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80117e6:	b1d0      	cbz	r0, 801181e <__d2b+0x7e>
 80117e8:	f1c0 0320 	rsb	r3, r0, #32
 80117ec:	fa02 f303 	lsl.w	r3, r2, r3
 80117f0:	430b      	orrs	r3, r1
 80117f2:	40c2      	lsrs	r2, r0
 80117f4:	6163      	str	r3, [r4, #20]
 80117f6:	9201      	str	r2, [sp, #4]
 80117f8:	9b01      	ldr	r3, [sp, #4]
 80117fa:	61a3      	str	r3, [r4, #24]
 80117fc:	2b00      	cmp	r3, #0
 80117fe:	bf0c      	ite	eq
 8011800:	2201      	moveq	r2, #1
 8011802:	2202      	movne	r2, #2
 8011804:	6122      	str	r2, [r4, #16]
 8011806:	b1a5      	cbz	r5, 8011832 <__d2b+0x92>
 8011808:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801180c:	4405      	add	r5, r0
 801180e:	603d      	str	r5, [r7, #0]
 8011810:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8011814:	6030      	str	r0, [r6, #0]
 8011816:	4620      	mov	r0, r4
 8011818:	b003      	add	sp, #12
 801181a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801181e:	6161      	str	r1, [r4, #20]
 8011820:	e7ea      	b.n	80117f8 <__d2b+0x58>
 8011822:	a801      	add	r0, sp, #4
 8011824:	f7ff fd59 	bl	80112da <__lo0bits>
 8011828:	9b01      	ldr	r3, [sp, #4]
 801182a:	6163      	str	r3, [r4, #20]
 801182c:	3020      	adds	r0, #32
 801182e:	2201      	movs	r2, #1
 8011830:	e7e8      	b.n	8011804 <__d2b+0x64>
 8011832:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011836:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801183a:	6038      	str	r0, [r7, #0]
 801183c:	6918      	ldr	r0, [r3, #16]
 801183e:	f7ff fd2d 	bl	801129c <__hi0bits>
 8011842:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011846:	e7e5      	b.n	8011814 <__d2b+0x74>
 8011848:	08012698 	.word	0x08012698
 801184c:	080126a9 	.word	0x080126a9

08011850 <__ssputs_r>:
 8011850:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011854:	688e      	ldr	r6, [r1, #8]
 8011856:	461f      	mov	r7, r3
 8011858:	42be      	cmp	r6, r7
 801185a:	680b      	ldr	r3, [r1, #0]
 801185c:	4682      	mov	sl, r0
 801185e:	460c      	mov	r4, r1
 8011860:	4690      	mov	r8, r2
 8011862:	d82d      	bhi.n	80118c0 <__ssputs_r+0x70>
 8011864:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011868:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801186c:	d026      	beq.n	80118bc <__ssputs_r+0x6c>
 801186e:	6965      	ldr	r5, [r4, #20]
 8011870:	6909      	ldr	r1, [r1, #16]
 8011872:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011876:	eba3 0901 	sub.w	r9, r3, r1
 801187a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801187e:	1c7b      	adds	r3, r7, #1
 8011880:	444b      	add	r3, r9
 8011882:	106d      	asrs	r5, r5, #1
 8011884:	429d      	cmp	r5, r3
 8011886:	bf38      	it	cc
 8011888:	461d      	movcc	r5, r3
 801188a:	0553      	lsls	r3, r2, #21
 801188c:	d527      	bpl.n	80118de <__ssputs_r+0x8e>
 801188e:	4629      	mov	r1, r5
 8011890:	f7ff fbd0 	bl	8011034 <_malloc_r>
 8011894:	4606      	mov	r6, r0
 8011896:	b360      	cbz	r0, 80118f2 <__ssputs_r+0xa2>
 8011898:	6921      	ldr	r1, [r4, #16]
 801189a:	464a      	mov	r2, r9
 801189c:	f000 fa06 	bl	8011cac <memcpy>
 80118a0:	89a3      	ldrh	r3, [r4, #12]
 80118a2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80118a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80118aa:	81a3      	strh	r3, [r4, #12]
 80118ac:	6126      	str	r6, [r4, #16]
 80118ae:	6165      	str	r5, [r4, #20]
 80118b0:	444e      	add	r6, r9
 80118b2:	eba5 0509 	sub.w	r5, r5, r9
 80118b6:	6026      	str	r6, [r4, #0]
 80118b8:	60a5      	str	r5, [r4, #8]
 80118ba:	463e      	mov	r6, r7
 80118bc:	42be      	cmp	r6, r7
 80118be:	d900      	bls.n	80118c2 <__ssputs_r+0x72>
 80118c0:	463e      	mov	r6, r7
 80118c2:	6820      	ldr	r0, [r4, #0]
 80118c4:	4632      	mov	r2, r6
 80118c6:	4641      	mov	r1, r8
 80118c8:	f000 f9c6 	bl	8011c58 <memmove>
 80118cc:	68a3      	ldr	r3, [r4, #8]
 80118ce:	1b9b      	subs	r3, r3, r6
 80118d0:	60a3      	str	r3, [r4, #8]
 80118d2:	6823      	ldr	r3, [r4, #0]
 80118d4:	4433      	add	r3, r6
 80118d6:	6023      	str	r3, [r4, #0]
 80118d8:	2000      	movs	r0, #0
 80118da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80118de:	462a      	mov	r2, r5
 80118e0:	f000 fa36 	bl	8011d50 <_realloc_r>
 80118e4:	4606      	mov	r6, r0
 80118e6:	2800      	cmp	r0, #0
 80118e8:	d1e0      	bne.n	80118ac <__ssputs_r+0x5c>
 80118ea:	6921      	ldr	r1, [r4, #16]
 80118ec:	4650      	mov	r0, sl
 80118ee:	f7ff fb2d 	bl	8010f4c <_free_r>
 80118f2:	230c      	movs	r3, #12
 80118f4:	f8ca 3000 	str.w	r3, [sl]
 80118f8:	89a3      	ldrh	r3, [r4, #12]
 80118fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80118fe:	81a3      	strh	r3, [r4, #12]
 8011900:	f04f 30ff 	mov.w	r0, #4294967295
 8011904:	e7e9      	b.n	80118da <__ssputs_r+0x8a>
	...

08011908 <_svfiprintf_r>:
 8011908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801190c:	4698      	mov	r8, r3
 801190e:	898b      	ldrh	r3, [r1, #12]
 8011910:	061b      	lsls	r3, r3, #24
 8011912:	b09d      	sub	sp, #116	@ 0x74
 8011914:	4607      	mov	r7, r0
 8011916:	460d      	mov	r5, r1
 8011918:	4614      	mov	r4, r2
 801191a:	d510      	bpl.n	801193e <_svfiprintf_r+0x36>
 801191c:	690b      	ldr	r3, [r1, #16]
 801191e:	b973      	cbnz	r3, 801193e <_svfiprintf_r+0x36>
 8011920:	2140      	movs	r1, #64	@ 0x40
 8011922:	f7ff fb87 	bl	8011034 <_malloc_r>
 8011926:	6028      	str	r0, [r5, #0]
 8011928:	6128      	str	r0, [r5, #16]
 801192a:	b930      	cbnz	r0, 801193a <_svfiprintf_r+0x32>
 801192c:	230c      	movs	r3, #12
 801192e:	603b      	str	r3, [r7, #0]
 8011930:	f04f 30ff 	mov.w	r0, #4294967295
 8011934:	b01d      	add	sp, #116	@ 0x74
 8011936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801193a:	2340      	movs	r3, #64	@ 0x40
 801193c:	616b      	str	r3, [r5, #20]
 801193e:	2300      	movs	r3, #0
 8011940:	9309      	str	r3, [sp, #36]	@ 0x24
 8011942:	2320      	movs	r3, #32
 8011944:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011948:	f8cd 800c 	str.w	r8, [sp, #12]
 801194c:	2330      	movs	r3, #48	@ 0x30
 801194e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011aec <_svfiprintf_r+0x1e4>
 8011952:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011956:	f04f 0901 	mov.w	r9, #1
 801195a:	4623      	mov	r3, r4
 801195c:	469a      	mov	sl, r3
 801195e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011962:	b10a      	cbz	r2, 8011968 <_svfiprintf_r+0x60>
 8011964:	2a25      	cmp	r2, #37	@ 0x25
 8011966:	d1f9      	bne.n	801195c <_svfiprintf_r+0x54>
 8011968:	ebba 0b04 	subs.w	fp, sl, r4
 801196c:	d00b      	beq.n	8011986 <_svfiprintf_r+0x7e>
 801196e:	465b      	mov	r3, fp
 8011970:	4622      	mov	r2, r4
 8011972:	4629      	mov	r1, r5
 8011974:	4638      	mov	r0, r7
 8011976:	f7ff ff6b 	bl	8011850 <__ssputs_r>
 801197a:	3001      	adds	r0, #1
 801197c:	f000 80a7 	beq.w	8011ace <_svfiprintf_r+0x1c6>
 8011980:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011982:	445a      	add	r2, fp
 8011984:	9209      	str	r2, [sp, #36]	@ 0x24
 8011986:	f89a 3000 	ldrb.w	r3, [sl]
 801198a:	2b00      	cmp	r3, #0
 801198c:	f000 809f 	beq.w	8011ace <_svfiprintf_r+0x1c6>
 8011990:	2300      	movs	r3, #0
 8011992:	f04f 32ff 	mov.w	r2, #4294967295
 8011996:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801199a:	f10a 0a01 	add.w	sl, sl, #1
 801199e:	9304      	str	r3, [sp, #16]
 80119a0:	9307      	str	r3, [sp, #28]
 80119a2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80119a6:	931a      	str	r3, [sp, #104]	@ 0x68
 80119a8:	4654      	mov	r4, sl
 80119aa:	2205      	movs	r2, #5
 80119ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80119b0:	484e      	ldr	r0, [pc, #312]	@ (8011aec <_svfiprintf_r+0x1e4>)
 80119b2:	f7ee fc95 	bl	80002e0 <memchr>
 80119b6:	9a04      	ldr	r2, [sp, #16]
 80119b8:	b9d8      	cbnz	r0, 80119f2 <_svfiprintf_r+0xea>
 80119ba:	06d0      	lsls	r0, r2, #27
 80119bc:	bf44      	itt	mi
 80119be:	2320      	movmi	r3, #32
 80119c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80119c4:	0711      	lsls	r1, r2, #28
 80119c6:	bf44      	itt	mi
 80119c8:	232b      	movmi	r3, #43	@ 0x2b
 80119ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80119ce:	f89a 3000 	ldrb.w	r3, [sl]
 80119d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80119d4:	d015      	beq.n	8011a02 <_svfiprintf_r+0xfa>
 80119d6:	9a07      	ldr	r2, [sp, #28]
 80119d8:	4654      	mov	r4, sl
 80119da:	2000      	movs	r0, #0
 80119dc:	f04f 0c0a 	mov.w	ip, #10
 80119e0:	4621      	mov	r1, r4
 80119e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80119e6:	3b30      	subs	r3, #48	@ 0x30
 80119e8:	2b09      	cmp	r3, #9
 80119ea:	d94b      	bls.n	8011a84 <_svfiprintf_r+0x17c>
 80119ec:	b1b0      	cbz	r0, 8011a1c <_svfiprintf_r+0x114>
 80119ee:	9207      	str	r2, [sp, #28]
 80119f0:	e014      	b.n	8011a1c <_svfiprintf_r+0x114>
 80119f2:	eba0 0308 	sub.w	r3, r0, r8
 80119f6:	fa09 f303 	lsl.w	r3, r9, r3
 80119fa:	4313      	orrs	r3, r2
 80119fc:	9304      	str	r3, [sp, #16]
 80119fe:	46a2      	mov	sl, r4
 8011a00:	e7d2      	b.n	80119a8 <_svfiprintf_r+0xa0>
 8011a02:	9b03      	ldr	r3, [sp, #12]
 8011a04:	1d19      	adds	r1, r3, #4
 8011a06:	681b      	ldr	r3, [r3, #0]
 8011a08:	9103      	str	r1, [sp, #12]
 8011a0a:	2b00      	cmp	r3, #0
 8011a0c:	bfbb      	ittet	lt
 8011a0e:	425b      	neglt	r3, r3
 8011a10:	f042 0202 	orrlt.w	r2, r2, #2
 8011a14:	9307      	strge	r3, [sp, #28]
 8011a16:	9307      	strlt	r3, [sp, #28]
 8011a18:	bfb8      	it	lt
 8011a1a:	9204      	strlt	r2, [sp, #16]
 8011a1c:	7823      	ldrb	r3, [r4, #0]
 8011a1e:	2b2e      	cmp	r3, #46	@ 0x2e
 8011a20:	d10a      	bne.n	8011a38 <_svfiprintf_r+0x130>
 8011a22:	7863      	ldrb	r3, [r4, #1]
 8011a24:	2b2a      	cmp	r3, #42	@ 0x2a
 8011a26:	d132      	bne.n	8011a8e <_svfiprintf_r+0x186>
 8011a28:	9b03      	ldr	r3, [sp, #12]
 8011a2a:	1d1a      	adds	r2, r3, #4
 8011a2c:	681b      	ldr	r3, [r3, #0]
 8011a2e:	9203      	str	r2, [sp, #12]
 8011a30:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011a34:	3402      	adds	r4, #2
 8011a36:	9305      	str	r3, [sp, #20]
 8011a38:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011afc <_svfiprintf_r+0x1f4>
 8011a3c:	7821      	ldrb	r1, [r4, #0]
 8011a3e:	2203      	movs	r2, #3
 8011a40:	4650      	mov	r0, sl
 8011a42:	f7ee fc4d 	bl	80002e0 <memchr>
 8011a46:	b138      	cbz	r0, 8011a58 <_svfiprintf_r+0x150>
 8011a48:	9b04      	ldr	r3, [sp, #16]
 8011a4a:	eba0 000a 	sub.w	r0, r0, sl
 8011a4e:	2240      	movs	r2, #64	@ 0x40
 8011a50:	4082      	lsls	r2, r0
 8011a52:	4313      	orrs	r3, r2
 8011a54:	3401      	adds	r4, #1
 8011a56:	9304      	str	r3, [sp, #16]
 8011a58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011a5c:	4824      	ldr	r0, [pc, #144]	@ (8011af0 <_svfiprintf_r+0x1e8>)
 8011a5e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011a62:	2206      	movs	r2, #6
 8011a64:	f7ee fc3c 	bl	80002e0 <memchr>
 8011a68:	2800      	cmp	r0, #0
 8011a6a:	d036      	beq.n	8011ada <_svfiprintf_r+0x1d2>
 8011a6c:	4b21      	ldr	r3, [pc, #132]	@ (8011af4 <_svfiprintf_r+0x1ec>)
 8011a6e:	bb1b      	cbnz	r3, 8011ab8 <_svfiprintf_r+0x1b0>
 8011a70:	9b03      	ldr	r3, [sp, #12]
 8011a72:	3307      	adds	r3, #7
 8011a74:	f023 0307 	bic.w	r3, r3, #7
 8011a78:	3308      	adds	r3, #8
 8011a7a:	9303      	str	r3, [sp, #12]
 8011a7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011a7e:	4433      	add	r3, r6
 8011a80:	9309      	str	r3, [sp, #36]	@ 0x24
 8011a82:	e76a      	b.n	801195a <_svfiprintf_r+0x52>
 8011a84:	fb0c 3202 	mla	r2, ip, r2, r3
 8011a88:	460c      	mov	r4, r1
 8011a8a:	2001      	movs	r0, #1
 8011a8c:	e7a8      	b.n	80119e0 <_svfiprintf_r+0xd8>
 8011a8e:	2300      	movs	r3, #0
 8011a90:	3401      	adds	r4, #1
 8011a92:	9305      	str	r3, [sp, #20]
 8011a94:	4619      	mov	r1, r3
 8011a96:	f04f 0c0a 	mov.w	ip, #10
 8011a9a:	4620      	mov	r0, r4
 8011a9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011aa0:	3a30      	subs	r2, #48	@ 0x30
 8011aa2:	2a09      	cmp	r2, #9
 8011aa4:	d903      	bls.n	8011aae <_svfiprintf_r+0x1a6>
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	d0c6      	beq.n	8011a38 <_svfiprintf_r+0x130>
 8011aaa:	9105      	str	r1, [sp, #20]
 8011aac:	e7c4      	b.n	8011a38 <_svfiprintf_r+0x130>
 8011aae:	fb0c 2101 	mla	r1, ip, r1, r2
 8011ab2:	4604      	mov	r4, r0
 8011ab4:	2301      	movs	r3, #1
 8011ab6:	e7f0      	b.n	8011a9a <_svfiprintf_r+0x192>
 8011ab8:	ab03      	add	r3, sp, #12
 8011aba:	9300      	str	r3, [sp, #0]
 8011abc:	462a      	mov	r2, r5
 8011abe:	4b0e      	ldr	r3, [pc, #56]	@ (8011af8 <_svfiprintf_r+0x1f0>)
 8011ac0:	a904      	add	r1, sp, #16
 8011ac2:	4638      	mov	r0, r7
 8011ac4:	f7fd ff00 	bl	800f8c8 <_printf_float>
 8011ac8:	1c42      	adds	r2, r0, #1
 8011aca:	4606      	mov	r6, r0
 8011acc:	d1d6      	bne.n	8011a7c <_svfiprintf_r+0x174>
 8011ace:	89ab      	ldrh	r3, [r5, #12]
 8011ad0:	065b      	lsls	r3, r3, #25
 8011ad2:	f53f af2d 	bmi.w	8011930 <_svfiprintf_r+0x28>
 8011ad6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011ad8:	e72c      	b.n	8011934 <_svfiprintf_r+0x2c>
 8011ada:	ab03      	add	r3, sp, #12
 8011adc:	9300      	str	r3, [sp, #0]
 8011ade:	462a      	mov	r2, r5
 8011ae0:	4b05      	ldr	r3, [pc, #20]	@ (8011af8 <_svfiprintf_r+0x1f0>)
 8011ae2:	a904      	add	r1, sp, #16
 8011ae4:	4638      	mov	r0, r7
 8011ae6:	f7fe f977 	bl	800fdd8 <_printf_i>
 8011aea:	e7ed      	b.n	8011ac8 <_svfiprintf_r+0x1c0>
 8011aec:	08012800 	.word	0x08012800
 8011af0:	0801280a 	.word	0x0801280a
 8011af4:	0800f8c9 	.word	0x0800f8c9
 8011af8:	08011851 	.word	0x08011851
 8011afc:	08012806 	.word	0x08012806

08011b00 <__sflush_r>:
 8011b00:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011b04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b08:	0716      	lsls	r6, r2, #28
 8011b0a:	4605      	mov	r5, r0
 8011b0c:	460c      	mov	r4, r1
 8011b0e:	d454      	bmi.n	8011bba <__sflush_r+0xba>
 8011b10:	684b      	ldr	r3, [r1, #4]
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	dc02      	bgt.n	8011b1c <__sflush_r+0x1c>
 8011b16:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	dd48      	ble.n	8011bae <__sflush_r+0xae>
 8011b1c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011b1e:	2e00      	cmp	r6, #0
 8011b20:	d045      	beq.n	8011bae <__sflush_r+0xae>
 8011b22:	2300      	movs	r3, #0
 8011b24:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011b28:	682f      	ldr	r7, [r5, #0]
 8011b2a:	6a21      	ldr	r1, [r4, #32]
 8011b2c:	602b      	str	r3, [r5, #0]
 8011b2e:	d030      	beq.n	8011b92 <__sflush_r+0x92>
 8011b30:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011b32:	89a3      	ldrh	r3, [r4, #12]
 8011b34:	0759      	lsls	r1, r3, #29
 8011b36:	d505      	bpl.n	8011b44 <__sflush_r+0x44>
 8011b38:	6863      	ldr	r3, [r4, #4]
 8011b3a:	1ad2      	subs	r2, r2, r3
 8011b3c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011b3e:	b10b      	cbz	r3, 8011b44 <__sflush_r+0x44>
 8011b40:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011b42:	1ad2      	subs	r2, r2, r3
 8011b44:	2300      	movs	r3, #0
 8011b46:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011b48:	6a21      	ldr	r1, [r4, #32]
 8011b4a:	4628      	mov	r0, r5
 8011b4c:	47b0      	blx	r6
 8011b4e:	1c43      	adds	r3, r0, #1
 8011b50:	89a3      	ldrh	r3, [r4, #12]
 8011b52:	d106      	bne.n	8011b62 <__sflush_r+0x62>
 8011b54:	6829      	ldr	r1, [r5, #0]
 8011b56:	291d      	cmp	r1, #29
 8011b58:	d82b      	bhi.n	8011bb2 <__sflush_r+0xb2>
 8011b5a:	4a2a      	ldr	r2, [pc, #168]	@ (8011c04 <__sflush_r+0x104>)
 8011b5c:	410a      	asrs	r2, r1
 8011b5e:	07d6      	lsls	r6, r2, #31
 8011b60:	d427      	bmi.n	8011bb2 <__sflush_r+0xb2>
 8011b62:	2200      	movs	r2, #0
 8011b64:	6062      	str	r2, [r4, #4]
 8011b66:	04d9      	lsls	r1, r3, #19
 8011b68:	6922      	ldr	r2, [r4, #16]
 8011b6a:	6022      	str	r2, [r4, #0]
 8011b6c:	d504      	bpl.n	8011b78 <__sflush_r+0x78>
 8011b6e:	1c42      	adds	r2, r0, #1
 8011b70:	d101      	bne.n	8011b76 <__sflush_r+0x76>
 8011b72:	682b      	ldr	r3, [r5, #0]
 8011b74:	b903      	cbnz	r3, 8011b78 <__sflush_r+0x78>
 8011b76:	6560      	str	r0, [r4, #84]	@ 0x54
 8011b78:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011b7a:	602f      	str	r7, [r5, #0]
 8011b7c:	b1b9      	cbz	r1, 8011bae <__sflush_r+0xae>
 8011b7e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011b82:	4299      	cmp	r1, r3
 8011b84:	d002      	beq.n	8011b8c <__sflush_r+0x8c>
 8011b86:	4628      	mov	r0, r5
 8011b88:	f7ff f9e0 	bl	8010f4c <_free_r>
 8011b8c:	2300      	movs	r3, #0
 8011b8e:	6363      	str	r3, [r4, #52]	@ 0x34
 8011b90:	e00d      	b.n	8011bae <__sflush_r+0xae>
 8011b92:	2301      	movs	r3, #1
 8011b94:	4628      	mov	r0, r5
 8011b96:	47b0      	blx	r6
 8011b98:	4602      	mov	r2, r0
 8011b9a:	1c50      	adds	r0, r2, #1
 8011b9c:	d1c9      	bne.n	8011b32 <__sflush_r+0x32>
 8011b9e:	682b      	ldr	r3, [r5, #0]
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	d0c6      	beq.n	8011b32 <__sflush_r+0x32>
 8011ba4:	2b1d      	cmp	r3, #29
 8011ba6:	d001      	beq.n	8011bac <__sflush_r+0xac>
 8011ba8:	2b16      	cmp	r3, #22
 8011baa:	d11e      	bne.n	8011bea <__sflush_r+0xea>
 8011bac:	602f      	str	r7, [r5, #0]
 8011bae:	2000      	movs	r0, #0
 8011bb0:	e022      	b.n	8011bf8 <__sflush_r+0xf8>
 8011bb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011bb6:	b21b      	sxth	r3, r3
 8011bb8:	e01b      	b.n	8011bf2 <__sflush_r+0xf2>
 8011bba:	690f      	ldr	r7, [r1, #16]
 8011bbc:	2f00      	cmp	r7, #0
 8011bbe:	d0f6      	beq.n	8011bae <__sflush_r+0xae>
 8011bc0:	0793      	lsls	r3, r2, #30
 8011bc2:	680e      	ldr	r6, [r1, #0]
 8011bc4:	bf08      	it	eq
 8011bc6:	694b      	ldreq	r3, [r1, #20]
 8011bc8:	600f      	str	r7, [r1, #0]
 8011bca:	bf18      	it	ne
 8011bcc:	2300      	movne	r3, #0
 8011bce:	eba6 0807 	sub.w	r8, r6, r7
 8011bd2:	608b      	str	r3, [r1, #8]
 8011bd4:	f1b8 0f00 	cmp.w	r8, #0
 8011bd8:	dde9      	ble.n	8011bae <__sflush_r+0xae>
 8011bda:	6a21      	ldr	r1, [r4, #32]
 8011bdc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011bde:	4643      	mov	r3, r8
 8011be0:	463a      	mov	r2, r7
 8011be2:	4628      	mov	r0, r5
 8011be4:	47b0      	blx	r6
 8011be6:	2800      	cmp	r0, #0
 8011be8:	dc08      	bgt.n	8011bfc <__sflush_r+0xfc>
 8011bea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011bee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011bf2:	81a3      	strh	r3, [r4, #12]
 8011bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8011bf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011bfc:	4407      	add	r7, r0
 8011bfe:	eba8 0800 	sub.w	r8, r8, r0
 8011c02:	e7e7      	b.n	8011bd4 <__sflush_r+0xd4>
 8011c04:	dfbffffe 	.word	0xdfbffffe

08011c08 <_fflush_r>:
 8011c08:	b538      	push	{r3, r4, r5, lr}
 8011c0a:	690b      	ldr	r3, [r1, #16]
 8011c0c:	4605      	mov	r5, r0
 8011c0e:	460c      	mov	r4, r1
 8011c10:	b913      	cbnz	r3, 8011c18 <_fflush_r+0x10>
 8011c12:	2500      	movs	r5, #0
 8011c14:	4628      	mov	r0, r5
 8011c16:	bd38      	pop	{r3, r4, r5, pc}
 8011c18:	b118      	cbz	r0, 8011c22 <_fflush_r+0x1a>
 8011c1a:	6a03      	ldr	r3, [r0, #32]
 8011c1c:	b90b      	cbnz	r3, 8011c22 <_fflush_r+0x1a>
 8011c1e:	f7fe fa87 	bl	8010130 <__sinit>
 8011c22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	d0f3      	beq.n	8011c12 <_fflush_r+0xa>
 8011c2a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011c2c:	07d0      	lsls	r0, r2, #31
 8011c2e:	d404      	bmi.n	8011c3a <_fflush_r+0x32>
 8011c30:	0599      	lsls	r1, r3, #22
 8011c32:	d402      	bmi.n	8011c3a <_fflush_r+0x32>
 8011c34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011c36:	f7fe fba6 	bl	8010386 <__retarget_lock_acquire_recursive>
 8011c3a:	4628      	mov	r0, r5
 8011c3c:	4621      	mov	r1, r4
 8011c3e:	f7ff ff5f 	bl	8011b00 <__sflush_r>
 8011c42:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011c44:	07da      	lsls	r2, r3, #31
 8011c46:	4605      	mov	r5, r0
 8011c48:	d4e4      	bmi.n	8011c14 <_fflush_r+0xc>
 8011c4a:	89a3      	ldrh	r3, [r4, #12]
 8011c4c:	059b      	lsls	r3, r3, #22
 8011c4e:	d4e1      	bmi.n	8011c14 <_fflush_r+0xc>
 8011c50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011c52:	f7fe fb99 	bl	8010388 <__retarget_lock_release_recursive>
 8011c56:	e7dd      	b.n	8011c14 <_fflush_r+0xc>

08011c58 <memmove>:
 8011c58:	4288      	cmp	r0, r1
 8011c5a:	b510      	push	{r4, lr}
 8011c5c:	eb01 0402 	add.w	r4, r1, r2
 8011c60:	d902      	bls.n	8011c68 <memmove+0x10>
 8011c62:	4284      	cmp	r4, r0
 8011c64:	4623      	mov	r3, r4
 8011c66:	d807      	bhi.n	8011c78 <memmove+0x20>
 8011c68:	1e43      	subs	r3, r0, #1
 8011c6a:	42a1      	cmp	r1, r4
 8011c6c:	d008      	beq.n	8011c80 <memmove+0x28>
 8011c6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011c72:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011c76:	e7f8      	b.n	8011c6a <memmove+0x12>
 8011c78:	4402      	add	r2, r0
 8011c7a:	4601      	mov	r1, r0
 8011c7c:	428a      	cmp	r2, r1
 8011c7e:	d100      	bne.n	8011c82 <memmove+0x2a>
 8011c80:	bd10      	pop	{r4, pc}
 8011c82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011c86:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011c8a:	e7f7      	b.n	8011c7c <memmove+0x24>

08011c8c <_sbrk_r>:
 8011c8c:	b538      	push	{r3, r4, r5, lr}
 8011c8e:	4d06      	ldr	r5, [pc, #24]	@ (8011ca8 <_sbrk_r+0x1c>)
 8011c90:	2300      	movs	r3, #0
 8011c92:	4604      	mov	r4, r0
 8011c94:	4608      	mov	r0, r1
 8011c96:	602b      	str	r3, [r5, #0]
 8011c98:	f7f0 fa14 	bl	80020c4 <_sbrk>
 8011c9c:	1c43      	adds	r3, r0, #1
 8011c9e:	d102      	bne.n	8011ca6 <_sbrk_r+0x1a>
 8011ca0:	682b      	ldr	r3, [r5, #0]
 8011ca2:	b103      	cbz	r3, 8011ca6 <_sbrk_r+0x1a>
 8011ca4:	6023      	str	r3, [r4, #0]
 8011ca6:	bd38      	pop	{r3, r4, r5, pc}
 8011ca8:	24000acc 	.word	0x24000acc

08011cac <memcpy>:
 8011cac:	440a      	add	r2, r1
 8011cae:	4291      	cmp	r1, r2
 8011cb0:	f100 33ff 	add.w	r3, r0, #4294967295
 8011cb4:	d100      	bne.n	8011cb8 <memcpy+0xc>
 8011cb6:	4770      	bx	lr
 8011cb8:	b510      	push	{r4, lr}
 8011cba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011cbe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011cc2:	4291      	cmp	r1, r2
 8011cc4:	d1f9      	bne.n	8011cba <memcpy+0xe>
 8011cc6:	bd10      	pop	{r4, pc}

08011cc8 <__assert_func>:
 8011cc8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011cca:	4614      	mov	r4, r2
 8011ccc:	461a      	mov	r2, r3
 8011cce:	4b09      	ldr	r3, [pc, #36]	@ (8011cf4 <__assert_func+0x2c>)
 8011cd0:	681b      	ldr	r3, [r3, #0]
 8011cd2:	4605      	mov	r5, r0
 8011cd4:	68d8      	ldr	r0, [r3, #12]
 8011cd6:	b954      	cbnz	r4, 8011cee <__assert_func+0x26>
 8011cd8:	4b07      	ldr	r3, [pc, #28]	@ (8011cf8 <__assert_func+0x30>)
 8011cda:	461c      	mov	r4, r3
 8011cdc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011ce0:	9100      	str	r1, [sp, #0]
 8011ce2:	462b      	mov	r3, r5
 8011ce4:	4905      	ldr	r1, [pc, #20]	@ (8011cfc <__assert_func+0x34>)
 8011ce6:	f000 f86f 	bl	8011dc8 <fiprintf>
 8011cea:	f000 f87f 	bl	8011dec <abort>
 8011cee:	4b04      	ldr	r3, [pc, #16]	@ (8011d00 <__assert_func+0x38>)
 8011cf0:	e7f4      	b.n	8011cdc <__assert_func+0x14>
 8011cf2:	bf00      	nop
 8011cf4:	2400001c 	.word	0x2400001c
 8011cf8:	08012856 	.word	0x08012856
 8011cfc:	08012828 	.word	0x08012828
 8011d00:	0801281b 	.word	0x0801281b

08011d04 <_calloc_r>:
 8011d04:	b570      	push	{r4, r5, r6, lr}
 8011d06:	fba1 5402 	umull	r5, r4, r1, r2
 8011d0a:	b93c      	cbnz	r4, 8011d1c <_calloc_r+0x18>
 8011d0c:	4629      	mov	r1, r5
 8011d0e:	f7ff f991 	bl	8011034 <_malloc_r>
 8011d12:	4606      	mov	r6, r0
 8011d14:	b928      	cbnz	r0, 8011d22 <_calloc_r+0x1e>
 8011d16:	2600      	movs	r6, #0
 8011d18:	4630      	mov	r0, r6
 8011d1a:	bd70      	pop	{r4, r5, r6, pc}
 8011d1c:	220c      	movs	r2, #12
 8011d1e:	6002      	str	r2, [r0, #0]
 8011d20:	e7f9      	b.n	8011d16 <_calloc_r+0x12>
 8011d22:	462a      	mov	r2, r5
 8011d24:	4621      	mov	r1, r4
 8011d26:	f7fe fab0 	bl	801028a <memset>
 8011d2a:	e7f5      	b.n	8011d18 <_calloc_r+0x14>

08011d2c <__ascii_mbtowc>:
 8011d2c:	b082      	sub	sp, #8
 8011d2e:	b901      	cbnz	r1, 8011d32 <__ascii_mbtowc+0x6>
 8011d30:	a901      	add	r1, sp, #4
 8011d32:	b142      	cbz	r2, 8011d46 <__ascii_mbtowc+0x1a>
 8011d34:	b14b      	cbz	r3, 8011d4a <__ascii_mbtowc+0x1e>
 8011d36:	7813      	ldrb	r3, [r2, #0]
 8011d38:	600b      	str	r3, [r1, #0]
 8011d3a:	7812      	ldrb	r2, [r2, #0]
 8011d3c:	1e10      	subs	r0, r2, #0
 8011d3e:	bf18      	it	ne
 8011d40:	2001      	movne	r0, #1
 8011d42:	b002      	add	sp, #8
 8011d44:	4770      	bx	lr
 8011d46:	4610      	mov	r0, r2
 8011d48:	e7fb      	b.n	8011d42 <__ascii_mbtowc+0x16>
 8011d4a:	f06f 0001 	mvn.w	r0, #1
 8011d4e:	e7f8      	b.n	8011d42 <__ascii_mbtowc+0x16>

08011d50 <_realloc_r>:
 8011d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d54:	4680      	mov	r8, r0
 8011d56:	4615      	mov	r5, r2
 8011d58:	460c      	mov	r4, r1
 8011d5a:	b921      	cbnz	r1, 8011d66 <_realloc_r+0x16>
 8011d5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011d60:	4611      	mov	r1, r2
 8011d62:	f7ff b967 	b.w	8011034 <_malloc_r>
 8011d66:	b92a      	cbnz	r2, 8011d74 <_realloc_r+0x24>
 8011d68:	f7ff f8f0 	bl	8010f4c <_free_r>
 8011d6c:	2400      	movs	r4, #0
 8011d6e:	4620      	mov	r0, r4
 8011d70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d74:	f000 f841 	bl	8011dfa <_malloc_usable_size_r>
 8011d78:	4285      	cmp	r5, r0
 8011d7a:	4606      	mov	r6, r0
 8011d7c:	d802      	bhi.n	8011d84 <_realloc_r+0x34>
 8011d7e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8011d82:	d8f4      	bhi.n	8011d6e <_realloc_r+0x1e>
 8011d84:	4629      	mov	r1, r5
 8011d86:	4640      	mov	r0, r8
 8011d88:	f7ff f954 	bl	8011034 <_malloc_r>
 8011d8c:	4607      	mov	r7, r0
 8011d8e:	2800      	cmp	r0, #0
 8011d90:	d0ec      	beq.n	8011d6c <_realloc_r+0x1c>
 8011d92:	42b5      	cmp	r5, r6
 8011d94:	462a      	mov	r2, r5
 8011d96:	4621      	mov	r1, r4
 8011d98:	bf28      	it	cs
 8011d9a:	4632      	movcs	r2, r6
 8011d9c:	f7ff ff86 	bl	8011cac <memcpy>
 8011da0:	4621      	mov	r1, r4
 8011da2:	4640      	mov	r0, r8
 8011da4:	f7ff f8d2 	bl	8010f4c <_free_r>
 8011da8:	463c      	mov	r4, r7
 8011daa:	e7e0      	b.n	8011d6e <_realloc_r+0x1e>

08011dac <__ascii_wctomb>:
 8011dac:	4603      	mov	r3, r0
 8011dae:	4608      	mov	r0, r1
 8011db0:	b141      	cbz	r1, 8011dc4 <__ascii_wctomb+0x18>
 8011db2:	2aff      	cmp	r2, #255	@ 0xff
 8011db4:	d904      	bls.n	8011dc0 <__ascii_wctomb+0x14>
 8011db6:	228a      	movs	r2, #138	@ 0x8a
 8011db8:	601a      	str	r2, [r3, #0]
 8011dba:	f04f 30ff 	mov.w	r0, #4294967295
 8011dbe:	4770      	bx	lr
 8011dc0:	700a      	strb	r2, [r1, #0]
 8011dc2:	2001      	movs	r0, #1
 8011dc4:	4770      	bx	lr
	...

08011dc8 <fiprintf>:
 8011dc8:	b40e      	push	{r1, r2, r3}
 8011dca:	b503      	push	{r0, r1, lr}
 8011dcc:	4601      	mov	r1, r0
 8011dce:	ab03      	add	r3, sp, #12
 8011dd0:	4805      	ldr	r0, [pc, #20]	@ (8011de8 <fiprintf+0x20>)
 8011dd2:	f853 2b04 	ldr.w	r2, [r3], #4
 8011dd6:	6800      	ldr	r0, [r0, #0]
 8011dd8:	9301      	str	r3, [sp, #4]
 8011dda:	f000 f83f 	bl	8011e5c <_vfiprintf_r>
 8011dde:	b002      	add	sp, #8
 8011de0:	f85d eb04 	ldr.w	lr, [sp], #4
 8011de4:	b003      	add	sp, #12
 8011de6:	4770      	bx	lr
 8011de8:	2400001c 	.word	0x2400001c

08011dec <abort>:
 8011dec:	b508      	push	{r3, lr}
 8011dee:	2006      	movs	r0, #6
 8011df0:	f000 fa08 	bl	8012204 <raise>
 8011df4:	2001      	movs	r0, #1
 8011df6:	f7f0 f8ed 	bl	8001fd4 <_exit>

08011dfa <_malloc_usable_size_r>:
 8011dfa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011dfe:	1f18      	subs	r0, r3, #4
 8011e00:	2b00      	cmp	r3, #0
 8011e02:	bfbc      	itt	lt
 8011e04:	580b      	ldrlt	r3, [r1, r0]
 8011e06:	18c0      	addlt	r0, r0, r3
 8011e08:	4770      	bx	lr

08011e0a <__sfputc_r>:
 8011e0a:	6893      	ldr	r3, [r2, #8]
 8011e0c:	3b01      	subs	r3, #1
 8011e0e:	2b00      	cmp	r3, #0
 8011e10:	b410      	push	{r4}
 8011e12:	6093      	str	r3, [r2, #8]
 8011e14:	da08      	bge.n	8011e28 <__sfputc_r+0x1e>
 8011e16:	6994      	ldr	r4, [r2, #24]
 8011e18:	42a3      	cmp	r3, r4
 8011e1a:	db01      	blt.n	8011e20 <__sfputc_r+0x16>
 8011e1c:	290a      	cmp	r1, #10
 8011e1e:	d103      	bne.n	8011e28 <__sfputc_r+0x1e>
 8011e20:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011e24:	f000 b932 	b.w	801208c <__swbuf_r>
 8011e28:	6813      	ldr	r3, [r2, #0]
 8011e2a:	1c58      	adds	r0, r3, #1
 8011e2c:	6010      	str	r0, [r2, #0]
 8011e2e:	7019      	strb	r1, [r3, #0]
 8011e30:	4608      	mov	r0, r1
 8011e32:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011e36:	4770      	bx	lr

08011e38 <__sfputs_r>:
 8011e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e3a:	4606      	mov	r6, r0
 8011e3c:	460f      	mov	r7, r1
 8011e3e:	4614      	mov	r4, r2
 8011e40:	18d5      	adds	r5, r2, r3
 8011e42:	42ac      	cmp	r4, r5
 8011e44:	d101      	bne.n	8011e4a <__sfputs_r+0x12>
 8011e46:	2000      	movs	r0, #0
 8011e48:	e007      	b.n	8011e5a <__sfputs_r+0x22>
 8011e4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011e4e:	463a      	mov	r2, r7
 8011e50:	4630      	mov	r0, r6
 8011e52:	f7ff ffda 	bl	8011e0a <__sfputc_r>
 8011e56:	1c43      	adds	r3, r0, #1
 8011e58:	d1f3      	bne.n	8011e42 <__sfputs_r+0xa>
 8011e5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011e5c <_vfiprintf_r>:
 8011e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e60:	460d      	mov	r5, r1
 8011e62:	b09d      	sub	sp, #116	@ 0x74
 8011e64:	4614      	mov	r4, r2
 8011e66:	4698      	mov	r8, r3
 8011e68:	4606      	mov	r6, r0
 8011e6a:	b118      	cbz	r0, 8011e74 <_vfiprintf_r+0x18>
 8011e6c:	6a03      	ldr	r3, [r0, #32]
 8011e6e:	b90b      	cbnz	r3, 8011e74 <_vfiprintf_r+0x18>
 8011e70:	f7fe f95e 	bl	8010130 <__sinit>
 8011e74:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011e76:	07d9      	lsls	r1, r3, #31
 8011e78:	d405      	bmi.n	8011e86 <_vfiprintf_r+0x2a>
 8011e7a:	89ab      	ldrh	r3, [r5, #12]
 8011e7c:	059a      	lsls	r2, r3, #22
 8011e7e:	d402      	bmi.n	8011e86 <_vfiprintf_r+0x2a>
 8011e80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011e82:	f7fe fa80 	bl	8010386 <__retarget_lock_acquire_recursive>
 8011e86:	89ab      	ldrh	r3, [r5, #12]
 8011e88:	071b      	lsls	r3, r3, #28
 8011e8a:	d501      	bpl.n	8011e90 <_vfiprintf_r+0x34>
 8011e8c:	692b      	ldr	r3, [r5, #16]
 8011e8e:	b99b      	cbnz	r3, 8011eb8 <_vfiprintf_r+0x5c>
 8011e90:	4629      	mov	r1, r5
 8011e92:	4630      	mov	r0, r6
 8011e94:	f000 f938 	bl	8012108 <__swsetup_r>
 8011e98:	b170      	cbz	r0, 8011eb8 <_vfiprintf_r+0x5c>
 8011e9a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011e9c:	07dc      	lsls	r4, r3, #31
 8011e9e:	d504      	bpl.n	8011eaa <_vfiprintf_r+0x4e>
 8011ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8011ea4:	b01d      	add	sp, #116	@ 0x74
 8011ea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011eaa:	89ab      	ldrh	r3, [r5, #12]
 8011eac:	0598      	lsls	r0, r3, #22
 8011eae:	d4f7      	bmi.n	8011ea0 <_vfiprintf_r+0x44>
 8011eb0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011eb2:	f7fe fa69 	bl	8010388 <__retarget_lock_release_recursive>
 8011eb6:	e7f3      	b.n	8011ea0 <_vfiprintf_r+0x44>
 8011eb8:	2300      	movs	r3, #0
 8011eba:	9309      	str	r3, [sp, #36]	@ 0x24
 8011ebc:	2320      	movs	r3, #32
 8011ebe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011ec2:	f8cd 800c 	str.w	r8, [sp, #12]
 8011ec6:	2330      	movs	r3, #48	@ 0x30
 8011ec8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8012078 <_vfiprintf_r+0x21c>
 8011ecc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011ed0:	f04f 0901 	mov.w	r9, #1
 8011ed4:	4623      	mov	r3, r4
 8011ed6:	469a      	mov	sl, r3
 8011ed8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011edc:	b10a      	cbz	r2, 8011ee2 <_vfiprintf_r+0x86>
 8011ede:	2a25      	cmp	r2, #37	@ 0x25
 8011ee0:	d1f9      	bne.n	8011ed6 <_vfiprintf_r+0x7a>
 8011ee2:	ebba 0b04 	subs.w	fp, sl, r4
 8011ee6:	d00b      	beq.n	8011f00 <_vfiprintf_r+0xa4>
 8011ee8:	465b      	mov	r3, fp
 8011eea:	4622      	mov	r2, r4
 8011eec:	4629      	mov	r1, r5
 8011eee:	4630      	mov	r0, r6
 8011ef0:	f7ff ffa2 	bl	8011e38 <__sfputs_r>
 8011ef4:	3001      	adds	r0, #1
 8011ef6:	f000 80a7 	beq.w	8012048 <_vfiprintf_r+0x1ec>
 8011efa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011efc:	445a      	add	r2, fp
 8011efe:	9209      	str	r2, [sp, #36]	@ 0x24
 8011f00:	f89a 3000 	ldrb.w	r3, [sl]
 8011f04:	2b00      	cmp	r3, #0
 8011f06:	f000 809f 	beq.w	8012048 <_vfiprintf_r+0x1ec>
 8011f0a:	2300      	movs	r3, #0
 8011f0c:	f04f 32ff 	mov.w	r2, #4294967295
 8011f10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011f14:	f10a 0a01 	add.w	sl, sl, #1
 8011f18:	9304      	str	r3, [sp, #16]
 8011f1a:	9307      	str	r3, [sp, #28]
 8011f1c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011f20:	931a      	str	r3, [sp, #104]	@ 0x68
 8011f22:	4654      	mov	r4, sl
 8011f24:	2205      	movs	r2, #5
 8011f26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f2a:	4853      	ldr	r0, [pc, #332]	@ (8012078 <_vfiprintf_r+0x21c>)
 8011f2c:	f7ee f9d8 	bl	80002e0 <memchr>
 8011f30:	9a04      	ldr	r2, [sp, #16]
 8011f32:	b9d8      	cbnz	r0, 8011f6c <_vfiprintf_r+0x110>
 8011f34:	06d1      	lsls	r1, r2, #27
 8011f36:	bf44      	itt	mi
 8011f38:	2320      	movmi	r3, #32
 8011f3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011f3e:	0713      	lsls	r3, r2, #28
 8011f40:	bf44      	itt	mi
 8011f42:	232b      	movmi	r3, #43	@ 0x2b
 8011f44:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011f48:	f89a 3000 	ldrb.w	r3, [sl]
 8011f4c:	2b2a      	cmp	r3, #42	@ 0x2a
 8011f4e:	d015      	beq.n	8011f7c <_vfiprintf_r+0x120>
 8011f50:	9a07      	ldr	r2, [sp, #28]
 8011f52:	4654      	mov	r4, sl
 8011f54:	2000      	movs	r0, #0
 8011f56:	f04f 0c0a 	mov.w	ip, #10
 8011f5a:	4621      	mov	r1, r4
 8011f5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011f60:	3b30      	subs	r3, #48	@ 0x30
 8011f62:	2b09      	cmp	r3, #9
 8011f64:	d94b      	bls.n	8011ffe <_vfiprintf_r+0x1a2>
 8011f66:	b1b0      	cbz	r0, 8011f96 <_vfiprintf_r+0x13a>
 8011f68:	9207      	str	r2, [sp, #28]
 8011f6a:	e014      	b.n	8011f96 <_vfiprintf_r+0x13a>
 8011f6c:	eba0 0308 	sub.w	r3, r0, r8
 8011f70:	fa09 f303 	lsl.w	r3, r9, r3
 8011f74:	4313      	orrs	r3, r2
 8011f76:	9304      	str	r3, [sp, #16]
 8011f78:	46a2      	mov	sl, r4
 8011f7a:	e7d2      	b.n	8011f22 <_vfiprintf_r+0xc6>
 8011f7c:	9b03      	ldr	r3, [sp, #12]
 8011f7e:	1d19      	adds	r1, r3, #4
 8011f80:	681b      	ldr	r3, [r3, #0]
 8011f82:	9103      	str	r1, [sp, #12]
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	bfbb      	ittet	lt
 8011f88:	425b      	neglt	r3, r3
 8011f8a:	f042 0202 	orrlt.w	r2, r2, #2
 8011f8e:	9307      	strge	r3, [sp, #28]
 8011f90:	9307      	strlt	r3, [sp, #28]
 8011f92:	bfb8      	it	lt
 8011f94:	9204      	strlt	r2, [sp, #16]
 8011f96:	7823      	ldrb	r3, [r4, #0]
 8011f98:	2b2e      	cmp	r3, #46	@ 0x2e
 8011f9a:	d10a      	bne.n	8011fb2 <_vfiprintf_r+0x156>
 8011f9c:	7863      	ldrb	r3, [r4, #1]
 8011f9e:	2b2a      	cmp	r3, #42	@ 0x2a
 8011fa0:	d132      	bne.n	8012008 <_vfiprintf_r+0x1ac>
 8011fa2:	9b03      	ldr	r3, [sp, #12]
 8011fa4:	1d1a      	adds	r2, r3, #4
 8011fa6:	681b      	ldr	r3, [r3, #0]
 8011fa8:	9203      	str	r2, [sp, #12]
 8011faa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011fae:	3402      	adds	r4, #2
 8011fb0:	9305      	str	r3, [sp, #20]
 8011fb2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012088 <_vfiprintf_r+0x22c>
 8011fb6:	7821      	ldrb	r1, [r4, #0]
 8011fb8:	2203      	movs	r2, #3
 8011fba:	4650      	mov	r0, sl
 8011fbc:	f7ee f990 	bl	80002e0 <memchr>
 8011fc0:	b138      	cbz	r0, 8011fd2 <_vfiprintf_r+0x176>
 8011fc2:	9b04      	ldr	r3, [sp, #16]
 8011fc4:	eba0 000a 	sub.w	r0, r0, sl
 8011fc8:	2240      	movs	r2, #64	@ 0x40
 8011fca:	4082      	lsls	r2, r0
 8011fcc:	4313      	orrs	r3, r2
 8011fce:	3401      	adds	r4, #1
 8011fd0:	9304      	str	r3, [sp, #16]
 8011fd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011fd6:	4829      	ldr	r0, [pc, #164]	@ (801207c <_vfiprintf_r+0x220>)
 8011fd8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011fdc:	2206      	movs	r2, #6
 8011fde:	f7ee f97f 	bl	80002e0 <memchr>
 8011fe2:	2800      	cmp	r0, #0
 8011fe4:	d03f      	beq.n	8012066 <_vfiprintf_r+0x20a>
 8011fe6:	4b26      	ldr	r3, [pc, #152]	@ (8012080 <_vfiprintf_r+0x224>)
 8011fe8:	bb1b      	cbnz	r3, 8012032 <_vfiprintf_r+0x1d6>
 8011fea:	9b03      	ldr	r3, [sp, #12]
 8011fec:	3307      	adds	r3, #7
 8011fee:	f023 0307 	bic.w	r3, r3, #7
 8011ff2:	3308      	adds	r3, #8
 8011ff4:	9303      	str	r3, [sp, #12]
 8011ff6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011ff8:	443b      	add	r3, r7
 8011ffa:	9309      	str	r3, [sp, #36]	@ 0x24
 8011ffc:	e76a      	b.n	8011ed4 <_vfiprintf_r+0x78>
 8011ffe:	fb0c 3202 	mla	r2, ip, r2, r3
 8012002:	460c      	mov	r4, r1
 8012004:	2001      	movs	r0, #1
 8012006:	e7a8      	b.n	8011f5a <_vfiprintf_r+0xfe>
 8012008:	2300      	movs	r3, #0
 801200a:	3401      	adds	r4, #1
 801200c:	9305      	str	r3, [sp, #20]
 801200e:	4619      	mov	r1, r3
 8012010:	f04f 0c0a 	mov.w	ip, #10
 8012014:	4620      	mov	r0, r4
 8012016:	f810 2b01 	ldrb.w	r2, [r0], #1
 801201a:	3a30      	subs	r2, #48	@ 0x30
 801201c:	2a09      	cmp	r2, #9
 801201e:	d903      	bls.n	8012028 <_vfiprintf_r+0x1cc>
 8012020:	2b00      	cmp	r3, #0
 8012022:	d0c6      	beq.n	8011fb2 <_vfiprintf_r+0x156>
 8012024:	9105      	str	r1, [sp, #20]
 8012026:	e7c4      	b.n	8011fb2 <_vfiprintf_r+0x156>
 8012028:	fb0c 2101 	mla	r1, ip, r1, r2
 801202c:	4604      	mov	r4, r0
 801202e:	2301      	movs	r3, #1
 8012030:	e7f0      	b.n	8012014 <_vfiprintf_r+0x1b8>
 8012032:	ab03      	add	r3, sp, #12
 8012034:	9300      	str	r3, [sp, #0]
 8012036:	462a      	mov	r2, r5
 8012038:	4b12      	ldr	r3, [pc, #72]	@ (8012084 <_vfiprintf_r+0x228>)
 801203a:	a904      	add	r1, sp, #16
 801203c:	4630      	mov	r0, r6
 801203e:	f7fd fc43 	bl	800f8c8 <_printf_float>
 8012042:	4607      	mov	r7, r0
 8012044:	1c78      	adds	r0, r7, #1
 8012046:	d1d6      	bne.n	8011ff6 <_vfiprintf_r+0x19a>
 8012048:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801204a:	07d9      	lsls	r1, r3, #31
 801204c:	d405      	bmi.n	801205a <_vfiprintf_r+0x1fe>
 801204e:	89ab      	ldrh	r3, [r5, #12]
 8012050:	059a      	lsls	r2, r3, #22
 8012052:	d402      	bmi.n	801205a <_vfiprintf_r+0x1fe>
 8012054:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012056:	f7fe f997 	bl	8010388 <__retarget_lock_release_recursive>
 801205a:	89ab      	ldrh	r3, [r5, #12]
 801205c:	065b      	lsls	r3, r3, #25
 801205e:	f53f af1f 	bmi.w	8011ea0 <_vfiprintf_r+0x44>
 8012062:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012064:	e71e      	b.n	8011ea4 <_vfiprintf_r+0x48>
 8012066:	ab03      	add	r3, sp, #12
 8012068:	9300      	str	r3, [sp, #0]
 801206a:	462a      	mov	r2, r5
 801206c:	4b05      	ldr	r3, [pc, #20]	@ (8012084 <_vfiprintf_r+0x228>)
 801206e:	a904      	add	r1, sp, #16
 8012070:	4630      	mov	r0, r6
 8012072:	f7fd feb1 	bl	800fdd8 <_printf_i>
 8012076:	e7e4      	b.n	8012042 <_vfiprintf_r+0x1e6>
 8012078:	08012800 	.word	0x08012800
 801207c:	0801280a 	.word	0x0801280a
 8012080:	0800f8c9 	.word	0x0800f8c9
 8012084:	08011e39 	.word	0x08011e39
 8012088:	08012806 	.word	0x08012806

0801208c <__swbuf_r>:
 801208c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801208e:	460e      	mov	r6, r1
 8012090:	4614      	mov	r4, r2
 8012092:	4605      	mov	r5, r0
 8012094:	b118      	cbz	r0, 801209e <__swbuf_r+0x12>
 8012096:	6a03      	ldr	r3, [r0, #32]
 8012098:	b90b      	cbnz	r3, 801209e <__swbuf_r+0x12>
 801209a:	f7fe f849 	bl	8010130 <__sinit>
 801209e:	69a3      	ldr	r3, [r4, #24]
 80120a0:	60a3      	str	r3, [r4, #8]
 80120a2:	89a3      	ldrh	r3, [r4, #12]
 80120a4:	071a      	lsls	r2, r3, #28
 80120a6:	d501      	bpl.n	80120ac <__swbuf_r+0x20>
 80120a8:	6923      	ldr	r3, [r4, #16]
 80120aa:	b943      	cbnz	r3, 80120be <__swbuf_r+0x32>
 80120ac:	4621      	mov	r1, r4
 80120ae:	4628      	mov	r0, r5
 80120b0:	f000 f82a 	bl	8012108 <__swsetup_r>
 80120b4:	b118      	cbz	r0, 80120be <__swbuf_r+0x32>
 80120b6:	f04f 37ff 	mov.w	r7, #4294967295
 80120ba:	4638      	mov	r0, r7
 80120bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80120be:	6823      	ldr	r3, [r4, #0]
 80120c0:	6922      	ldr	r2, [r4, #16]
 80120c2:	1a98      	subs	r0, r3, r2
 80120c4:	6963      	ldr	r3, [r4, #20]
 80120c6:	b2f6      	uxtb	r6, r6
 80120c8:	4283      	cmp	r3, r0
 80120ca:	4637      	mov	r7, r6
 80120cc:	dc05      	bgt.n	80120da <__swbuf_r+0x4e>
 80120ce:	4621      	mov	r1, r4
 80120d0:	4628      	mov	r0, r5
 80120d2:	f7ff fd99 	bl	8011c08 <_fflush_r>
 80120d6:	2800      	cmp	r0, #0
 80120d8:	d1ed      	bne.n	80120b6 <__swbuf_r+0x2a>
 80120da:	68a3      	ldr	r3, [r4, #8]
 80120dc:	3b01      	subs	r3, #1
 80120de:	60a3      	str	r3, [r4, #8]
 80120e0:	6823      	ldr	r3, [r4, #0]
 80120e2:	1c5a      	adds	r2, r3, #1
 80120e4:	6022      	str	r2, [r4, #0]
 80120e6:	701e      	strb	r6, [r3, #0]
 80120e8:	6962      	ldr	r2, [r4, #20]
 80120ea:	1c43      	adds	r3, r0, #1
 80120ec:	429a      	cmp	r2, r3
 80120ee:	d004      	beq.n	80120fa <__swbuf_r+0x6e>
 80120f0:	89a3      	ldrh	r3, [r4, #12]
 80120f2:	07db      	lsls	r3, r3, #31
 80120f4:	d5e1      	bpl.n	80120ba <__swbuf_r+0x2e>
 80120f6:	2e0a      	cmp	r6, #10
 80120f8:	d1df      	bne.n	80120ba <__swbuf_r+0x2e>
 80120fa:	4621      	mov	r1, r4
 80120fc:	4628      	mov	r0, r5
 80120fe:	f7ff fd83 	bl	8011c08 <_fflush_r>
 8012102:	2800      	cmp	r0, #0
 8012104:	d0d9      	beq.n	80120ba <__swbuf_r+0x2e>
 8012106:	e7d6      	b.n	80120b6 <__swbuf_r+0x2a>

08012108 <__swsetup_r>:
 8012108:	b538      	push	{r3, r4, r5, lr}
 801210a:	4b29      	ldr	r3, [pc, #164]	@ (80121b0 <__swsetup_r+0xa8>)
 801210c:	4605      	mov	r5, r0
 801210e:	6818      	ldr	r0, [r3, #0]
 8012110:	460c      	mov	r4, r1
 8012112:	b118      	cbz	r0, 801211c <__swsetup_r+0x14>
 8012114:	6a03      	ldr	r3, [r0, #32]
 8012116:	b90b      	cbnz	r3, 801211c <__swsetup_r+0x14>
 8012118:	f7fe f80a 	bl	8010130 <__sinit>
 801211c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012120:	0719      	lsls	r1, r3, #28
 8012122:	d422      	bmi.n	801216a <__swsetup_r+0x62>
 8012124:	06da      	lsls	r2, r3, #27
 8012126:	d407      	bmi.n	8012138 <__swsetup_r+0x30>
 8012128:	2209      	movs	r2, #9
 801212a:	602a      	str	r2, [r5, #0]
 801212c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012130:	81a3      	strh	r3, [r4, #12]
 8012132:	f04f 30ff 	mov.w	r0, #4294967295
 8012136:	e033      	b.n	80121a0 <__swsetup_r+0x98>
 8012138:	0758      	lsls	r0, r3, #29
 801213a:	d512      	bpl.n	8012162 <__swsetup_r+0x5a>
 801213c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801213e:	b141      	cbz	r1, 8012152 <__swsetup_r+0x4a>
 8012140:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012144:	4299      	cmp	r1, r3
 8012146:	d002      	beq.n	801214e <__swsetup_r+0x46>
 8012148:	4628      	mov	r0, r5
 801214a:	f7fe feff 	bl	8010f4c <_free_r>
 801214e:	2300      	movs	r3, #0
 8012150:	6363      	str	r3, [r4, #52]	@ 0x34
 8012152:	89a3      	ldrh	r3, [r4, #12]
 8012154:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8012158:	81a3      	strh	r3, [r4, #12]
 801215a:	2300      	movs	r3, #0
 801215c:	6063      	str	r3, [r4, #4]
 801215e:	6923      	ldr	r3, [r4, #16]
 8012160:	6023      	str	r3, [r4, #0]
 8012162:	89a3      	ldrh	r3, [r4, #12]
 8012164:	f043 0308 	orr.w	r3, r3, #8
 8012168:	81a3      	strh	r3, [r4, #12]
 801216a:	6923      	ldr	r3, [r4, #16]
 801216c:	b94b      	cbnz	r3, 8012182 <__swsetup_r+0x7a>
 801216e:	89a3      	ldrh	r3, [r4, #12]
 8012170:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8012174:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012178:	d003      	beq.n	8012182 <__swsetup_r+0x7a>
 801217a:	4621      	mov	r1, r4
 801217c:	4628      	mov	r0, r5
 801217e:	f000 f883 	bl	8012288 <__smakebuf_r>
 8012182:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012186:	f013 0201 	ands.w	r2, r3, #1
 801218a:	d00a      	beq.n	80121a2 <__swsetup_r+0x9a>
 801218c:	2200      	movs	r2, #0
 801218e:	60a2      	str	r2, [r4, #8]
 8012190:	6962      	ldr	r2, [r4, #20]
 8012192:	4252      	negs	r2, r2
 8012194:	61a2      	str	r2, [r4, #24]
 8012196:	6922      	ldr	r2, [r4, #16]
 8012198:	b942      	cbnz	r2, 80121ac <__swsetup_r+0xa4>
 801219a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801219e:	d1c5      	bne.n	801212c <__swsetup_r+0x24>
 80121a0:	bd38      	pop	{r3, r4, r5, pc}
 80121a2:	0799      	lsls	r1, r3, #30
 80121a4:	bf58      	it	pl
 80121a6:	6962      	ldrpl	r2, [r4, #20]
 80121a8:	60a2      	str	r2, [r4, #8]
 80121aa:	e7f4      	b.n	8012196 <__swsetup_r+0x8e>
 80121ac:	2000      	movs	r0, #0
 80121ae:	e7f7      	b.n	80121a0 <__swsetup_r+0x98>
 80121b0:	2400001c 	.word	0x2400001c

080121b4 <_raise_r>:
 80121b4:	291f      	cmp	r1, #31
 80121b6:	b538      	push	{r3, r4, r5, lr}
 80121b8:	4605      	mov	r5, r0
 80121ba:	460c      	mov	r4, r1
 80121bc:	d904      	bls.n	80121c8 <_raise_r+0x14>
 80121be:	2316      	movs	r3, #22
 80121c0:	6003      	str	r3, [r0, #0]
 80121c2:	f04f 30ff 	mov.w	r0, #4294967295
 80121c6:	bd38      	pop	{r3, r4, r5, pc}
 80121c8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80121ca:	b112      	cbz	r2, 80121d2 <_raise_r+0x1e>
 80121cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80121d0:	b94b      	cbnz	r3, 80121e6 <_raise_r+0x32>
 80121d2:	4628      	mov	r0, r5
 80121d4:	f000 f830 	bl	8012238 <_getpid_r>
 80121d8:	4622      	mov	r2, r4
 80121da:	4601      	mov	r1, r0
 80121dc:	4628      	mov	r0, r5
 80121de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80121e2:	f000 b817 	b.w	8012214 <_kill_r>
 80121e6:	2b01      	cmp	r3, #1
 80121e8:	d00a      	beq.n	8012200 <_raise_r+0x4c>
 80121ea:	1c59      	adds	r1, r3, #1
 80121ec:	d103      	bne.n	80121f6 <_raise_r+0x42>
 80121ee:	2316      	movs	r3, #22
 80121f0:	6003      	str	r3, [r0, #0]
 80121f2:	2001      	movs	r0, #1
 80121f4:	e7e7      	b.n	80121c6 <_raise_r+0x12>
 80121f6:	2100      	movs	r1, #0
 80121f8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80121fc:	4620      	mov	r0, r4
 80121fe:	4798      	blx	r3
 8012200:	2000      	movs	r0, #0
 8012202:	e7e0      	b.n	80121c6 <_raise_r+0x12>

08012204 <raise>:
 8012204:	4b02      	ldr	r3, [pc, #8]	@ (8012210 <raise+0xc>)
 8012206:	4601      	mov	r1, r0
 8012208:	6818      	ldr	r0, [r3, #0]
 801220a:	f7ff bfd3 	b.w	80121b4 <_raise_r>
 801220e:	bf00      	nop
 8012210:	2400001c 	.word	0x2400001c

08012214 <_kill_r>:
 8012214:	b538      	push	{r3, r4, r5, lr}
 8012216:	4d07      	ldr	r5, [pc, #28]	@ (8012234 <_kill_r+0x20>)
 8012218:	2300      	movs	r3, #0
 801221a:	4604      	mov	r4, r0
 801221c:	4608      	mov	r0, r1
 801221e:	4611      	mov	r1, r2
 8012220:	602b      	str	r3, [r5, #0]
 8012222:	f7ef fec7 	bl	8001fb4 <_kill>
 8012226:	1c43      	adds	r3, r0, #1
 8012228:	d102      	bne.n	8012230 <_kill_r+0x1c>
 801222a:	682b      	ldr	r3, [r5, #0]
 801222c:	b103      	cbz	r3, 8012230 <_kill_r+0x1c>
 801222e:	6023      	str	r3, [r4, #0]
 8012230:	bd38      	pop	{r3, r4, r5, pc}
 8012232:	bf00      	nop
 8012234:	24000acc 	.word	0x24000acc

08012238 <_getpid_r>:
 8012238:	f7ef beb4 	b.w	8001fa4 <_getpid>

0801223c <__swhatbuf_r>:
 801223c:	b570      	push	{r4, r5, r6, lr}
 801223e:	460c      	mov	r4, r1
 8012240:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012244:	2900      	cmp	r1, #0
 8012246:	b096      	sub	sp, #88	@ 0x58
 8012248:	4615      	mov	r5, r2
 801224a:	461e      	mov	r6, r3
 801224c:	da0d      	bge.n	801226a <__swhatbuf_r+0x2e>
 801224e:	89a3      	ldrh	r3, [r4, #12]
 8012250:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012254:	f04f 0100 	mov.w	r1, #0
 8012258:	bf14      	ite	ne
 801225a:	2340      	movne	r3, #64	@ 0x40
 801225c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012260:	2000      	movs	r0, #0
 8012262:	6031      	str	r1, [r6, #0]
 8012264:	602b      	str	r3, [r5, #0]
 8012266:	b016      	add	sp, #88	@ 0x58
 8012268:	bd70      	pop	{r4, r5, r6, pc}
 801226a:	466a      	mov	r2, sp
 801226c:	f000 f848 	bl	8012300 <_fstat_r>
 8012270:	2800      	cmp	r0, #0
 8012272:	dbec      	blt.n	801224e <__swhatbuf_r+0x12>
 8012274:	9901      	ldr	r1, [sp, #4]
 8012276:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801227a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801227e:	4259      	negs	r1, r3
 8012280:	4159      	adcs	r1, r3
 8012282:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012286:	e7eb      	b.n	8012260 <__swhatbuf_r+0x24>

08012288 <__smakebuf_r>:
 8012288:	898b      	ldrh	r3, [r1, #12]
 801228a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801228c:	079d      	lsls	r5, r3, #30
 801228e:	4606      	mov	r6, r0
 8012290:	460c      	mov	r4, r1
 8012292:	d507      	bpl.n	80122a4 <__smakebuf_r+0x1c>
 8012294:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012298:	6023      	str	r3, [r4, #0]
 801229a:	6123      	str	r3, [r4, #16]
 801229c:	2301      	movs	r3, #1
 801229e:	6163      	str	r3, [r4, #20]
 80122a0:	b003      	add	sp, #12
 80122a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80122a4:	ab01      	add	r3, sp, #4
 80122a6:	466a      	mov	r2, sp
 80122a8:	f7ff ffc8 	bl	801223c <__swhatbuf_r>
 80122ac:	9f00      	ldr	r7, [sp, #0]
 80122ae:	4605      	mov	r5, r0
 80122b0:	4639      	mov	r1, r7
 80122b2:	4630      	mov	r0, r6
 80122b4:	f7fe febe 	bl	8011034 <_malloc_r>
 80122b8:	b948      	cbnz	r0, 80122ce <__smakebuf_r+0x46>
 80122ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80122be:	059a      	lsls	r2, r3, #22
 80122c0:	d4ee      	bmi.n	80122a0 <__smakebuf_r+0x18>
 80122c2:	f023 0303 	bic.w	r3, r3, #3
 80122c6:	f043 0302 	orr.w	r3, r3, #2
 80122ca:	81a3      	strh	r3, [r4, #12]
 80122cc:	e7e2      	b.n	8012294 <__smakebuf_r+0xc>
 80122ce:	89a3      	ldrh	r3, [r4, #12]
 80122d0:	6020      	str	r0, [r4, #0]
 80122d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80122d6:	81a3      	strh	r3, [r4, #12]
 80122d8:	9b01      	ldr	r3, [sp, #4]
 80122da:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80122de:	b15b      	cbz	r3, 80122f8 <__smakebuf_r+0x70>
 80122e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80122e4:	4630      	mov	r0, r6
 80122e6:	f000 f81d 	bl	8012324 <_isatty_r>
 80122ea:	b128      	cbz	r0, 80122f8 <__smakebuf_r+0x70>
 80122ec:	89a3      	ldrh	r3, [r4, #12]
 80122ee:	f023 0303 	bic.w	r3, r3, #3
 80122f2:	f043 0301 	orr.w	r3, r3, #1
 80122f6:	81a3      	strh	r3, [r4, #12]
 80122f8:	89a3      	ldrh	r3, [r4, #12]
 80122fa:	431d      	orrs	r5, r3
 80122fc:	81a5      	strh	r5, [r4, #12]
 80122fe:	e7cf      	b.n	80122a0 <__smakebuf_r+0x18>

08012300 <_fstat_r>:
 8012300:	b538      	push	{r3, r4, r5, lr}
 8012302:	4d07      	ldr	r5, [pc, #28]	@ (8012320 <_fstat_r+0x20>)
 8012304:	2300      	movs	r3, #0
 8012306:	4604      	mov	r4, r0
 8012308:	4608      	mov	r0, r1
 801230a:	4611      	mov	r1, r2
 801230c:	602b      	str	r3, [r5, #0]
 801230e:	f7ef feb1 	bl	8002074 <_fstat>
 8012312:	1c43      	adds	r3, r0, #1
 8012314:	d102      	bne.n	801231c <_fstat_r+0x1c>
 8012316:	682b      	ldr	r3, [r5, #0]
 8012318:	b103      	cbz	r3, 801231c <_fstat_r+0x1c>
 801231a:	6023      	str	r3, [r4, #0]
 801231c:	bd38      	pop	{r3, r4, r5, pc}
 801231e:	bf00      	nop
 8012320:	24000acc 	.word	0x24000acc

08012324 <_isatty_r>:
 8012324:	b538      	push	{r3, r4, r5, lr}
 8012326:	4d06      	ldr	r5, [pc, #24]	@ (8012340 <_isatty_r+0x1c>)
 8012328:	2300      	movs	r3, #0
 801232a:	4604      	mov	r4, r0
 801232c:	4608      	mov	r0, r1
 801232e:	602b      	str	r3, [r5, #0]
 8012330:	f7ef feb0 	bl	8002094 <_isatty>
 8012334:	1c43      	adds	r3, r0, #1
 8012336:	d102      	bne.n	801233e <_isatty_r+0x1a>
 8012338:	682b      	ldr	r3, [r5, #0]
 801233a:	b103      	cbz	r3, 801233e <_isatty_r+0x1a>
 801233c:	6023      	str	r3, [r4, #0]
 801233e:	bd38      	pop	{r3, r4, r5, pc}
 8012340:	24000acc 	.word	0x24000acc

08012344 <_init>:
 8012344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012346:	bf00      	nop
 8012348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801234a:	bc08      	pop	{r3}
 801234c:	469e      	mov	lr, r3
 801234e:	4770      	bx	lr

08012350 <_fini>:
 8012350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012352:	bf00      	nop
 8012354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012356:	bc08      	pop	{r3}
 8012358:	469e      	mov	lr, r3
 801235a:	4770      	bx	lr
