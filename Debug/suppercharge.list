
suppercharge.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001015c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005f8  08010400  08010400  00011400  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080109f8  080109f8  000119f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08010a00  08010a00  00011a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08010a04  08010a04  00011a04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001d8  24000000  08010a08  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000007e0  240001d8  08010be0  000121d8  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  240009b8  08010be0  000129b8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000121d8  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002374f  00000000  00000000  00012206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003f2c  00000000  00000000  00035955  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001b18  00000000  00000000  00039888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001526  00000000  00000000  0003b3a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003c7c1  00000000  00000000  0003c8c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000287b6  00000000  00000000  00079087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00180a8a  00000000  00000000  000a183d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  002222c7  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000083cc  00000000  00000000  0022230c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000004a  00000000  00000000  0022a6d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001d8 	.word	0x240001d8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080103e4 	.word	0x080103e4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001dc 	.word	0x240001dc
 80002dc:	080103e4 	.word	0x080103e4

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <HAL_ADC_ConvCpltCallback>:
extern uint16_t adc_value[4];
extern double isense,voutsense,vinsense,vcbsense;


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b08a      	sub	sp, #40	@ 0x28
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
    double v_adc0 = ((double)adc_value[0] / ADC_RES) * VREF;
 8000688:	4b57      	ldr	r3, [pc, #348]	@ (80007e8 <HAL_ADC_ConvCpltCallback+0x168>)
 800068a:	881b      	ldrh	r3, [r3, #0]
 800068c:	ee07 3a90 	vmov	s15, r3
 8000690:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000694:	ed9f 5b48 	vldr	d5, [pc, #288]	@ 80007b8 <HAL_ADC_ConvCpltCallback+0x138>
 8000698:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800069c:	ed9f 6b48 	vldr	d6, [pc, #288]	@ 80007c0 <HAL_ADC_ConvCpltCallback+0x140>
 80006a0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80006a4:	ed87 7b08 	vstr	d7, [r7, #32]
    double v_adc1 = ((double)adc_value[1] / ADC_RES) * VREF;
 80006a8:	4b4f      	ldr	r3, [pc, #316]	@ (80007e8 <HAL_ADC_ConvCpltCallback+0x168>)
 80006aa:	885b      	ldrh	r3, [r3, #2]
 80006ac:	ee07 3a90 	vmov	s15, r3
 80006b0:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80006b4:	ed9f 5b40 	vldr	d5, [pc, #256]	@ 80007b8 <HAL_ADC_ConvCpltCallback+0x138>
 80006b8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80006bc:	ed9f 6b40 	vldr	d6, [pc, #256]	@ 80007c0 <HAL_ADC_ConvCpltCallback+0x140>
 80006c0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80006c4:	ed87 7b06 	vstr	d7, [r7, #24]
    double v_adc2 = ((double)adc_value[2] / ADC_RES) * VREF;
 80006c8:	4b47      	ldr	r3, [pc, #284]	@ (80007e8 <HAL_ADC_ConvCpltCallback+0x168>)
 80006ca:	889b      	ldrh	r3, [r3, #4]
 80006cc:	ee07 3a90 	vmov	s15, r3
 80006d0:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80006d4:	ed9f 5b38 	vldr	d5, [pc, #224]	@ 80007b8 <HAL_ADC_ConvCpltCallback+0x138>
 80006d8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80006dc:	ed9f 6b38 	vldr	d6, [pc, #224]	@ 80007c0 <HAL_ADC_ConvCpltCallback+0x140>
 80006e0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80006e4:	ed87 7b04 	vstr	d7, [r7, #16]
    double v_adc3 = ((double)adc_value[3] / ADC_RES) * VREF;
 80006e8:	4b3f      	ldr	r3, [pc, #252]	@ (80007e8 <HAL_ADC_ConvCpltCallback+0x168>)
 80006ea:	88db      	ldrh	r3, [r3, #6]
 80006ec:	ee07 3a90 	vmov	s15, r3
 80006f0:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80006f4:	ed9f 5b30 	vldr	d5, [pc, #192]	@ 80007b8 <HAL_ADC_ConvCpltCallback+0x138>
 80006f8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80006fc:	ed9f 6b30 	vldr	d6, [pc, #192]	@ 80007c0 <HAL_ADC_ConvCpltCallback+0x140>
 8000700:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000704:	ed87 7b02 	vstr	d7, [r7, #8]

    isense = (((1.38-v_adc0)/0.7+1.38)/3.3*4.3-2.5)*10 ;
 8000708:	ed9f 6b2f 	vldr	d6, [pc, #188]	@ 80007c8 <HAL_ADC_ConvCpltCallback+0x148>
 800070c:	ed97 7b08 	vldr	d7, [r7, #32]
 8000710:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000714:	ed9f 5b2e 	vldr	d5, [pc, #184]	@ 80007d0 <HAL_ADC_ConvCpltCallback+0x150>
 8000718:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800071c:	ed9f 6b2a 	vldr	d6, [pc, #168]	@ 80007c8 <HAL_ADC_ConvCpltCallback+0x148>
 8000720:	ee37 6b06 	vadd.f64	d6, d7, d6
 8000724:	ed9f 5b2c 	vldr	d5, [pc, #176]	@ 80007d8 <HAL_ADC_ConvCpltCallback+0x158>
 8000728:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800072c:	ed9f 6b2c 	vldr	d6, [pc, #176]	@ 80007e0 <HAL_ADC_ConvCpltCallback+0x160>
 8000730:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000734:	eeb0 6b04 	vmov.f64	d6, #4	@ 0x40200000  2.5
 8000738:	ee37 7b46 	vsub.f64	d7, d7, d6
 800073c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8000740:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000744:	4b29      	ldr	r3, [pc, #164]	@ (80007ec <HAL_ADC_ConvCpltCallback+0x16c>)
 8000746:	ed83 7b00 	vstr	d7, [r3]
    voutsense = v_adc1*10 ;
 800074a:	ed97 7b06 	vldr	d7, [r7, #24]
 800074e:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8000752:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000756:	4b26      	ldr	r3, [pc, #152]	@ (80007f0 <HAL_ADC_ConvCpltCallback+0x170>)
 8000758:	ed83 7b00 	vstr	d7, [r3]
    vinsense  = v_adc2*10 ;
 800075c:	ed97 7b04 	vldr	d7, [r7, #16]
 8000760:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8000764:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000768:	4b22      	ldr	r3, [pc, #136]	@ (80007f4 <HAL_ADC_ConvCpltCallback+0x174>)
 800076a:	ed83 7b00 	vstr	d7, [r3]
    vcbsense  = v_adc3*10 ;
 800076e:	ed97 7b02 	vldr	d7, [r7, #8]
 8000772:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8000776:	ee27 7b06 	vmul.f64	d7, d7, d6
 800077a:	4b1f      	ldr	r3, [pc, #124]	@ (80007f8 <HAL_ADC_ConvCpltCallback+0x178>)
 800077c:	ed83 7b00 	vstr	d7, [r3]

    send_data_to_winform(isense, voutsense, vinsense, vcbsense);
 8000780:	4b1a      	ldr	r3, [pc, #104]	@ (80007ec <HAL_ADC_ConvCpltCallback+0x16c>)
 8000782:	ed93 7b00 	vldr	d7, [r3]
 8000786:	4b1a      	ldr	r3, [pc, #104]	@ (80007f0 <HAL_ADC_ConvCpltCallback+0x170>)
 8000788:	ed93 6b00 	vldr	d6, [r3]
 800078c:	4b19      	ldr	r3, [pc, #100]	@ (80007f4 <HAL_ADC_ConvCpltCallback+0x174>)
 800078e:	ed93 5b00 	vldr	d5, [r3]
 8000792:	4b19      	ldr	r3, [pc, #100]	@ (80007f8 <HAL_ADC_ConvCpltCallback+0x178>)
 8000794:	ed93 4b00 	vldr	d4, [r3]
 8000798:	eeb0 3b44 	vmov.f64	d3, d4
 800079c:	eeb0 2b45 	vmov.f64	d2, d5
 80007a0:	eeb0 1b46 	vmov.f64	d1, d6
 80007a4:	eeb0 0b47 	vmov.f64	d0, d7
 80007a8:	f001 fd70 	bl	800228c <send_data_to_winform>
//    send_data_to_winform(adc_value[0], adc_value[1], adc_value[2], adc_value[2]);
}
 80007ac:	bf00      	nop
 80007ae:	3728      	adds	r7, #40	@ 0x28
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	f3af 8000 	nop.w
 80007b8:	00000000 	.word	0x00000000
 80007bc:	40f00000 	.word	0x40f00000
 80007c0:	60000000 	.word	0x60000000
 80007c4:	400a6666 	.word	0x400a6666
 80007c8:	e147ae14 	.word	0xe147ae14
 80007cc:	3ff6147a 	.word	0x3ff6147a
 80007d0:	66666666 	.word	0x66666666
 80007d4:	3fe66666 	.word	0x3fe66666
 80007d8:	66666666 	.word	0x66666666
 80007dc:	400a6666 	.word	0x400a6666
 80007e0:	33333333 	.word	0x33333333
 80007e4:	40113333 	.word	0x40113333
 80007e8:	240001f4 	.word	0x240001f4
 80007ec:	24000200 	.word	0x24000200
 80007f0:	24000208 	.word	0x24000208
 80007f4:	24000210 	.word	0x24000210
 80007f8:	24000218 	.word	0x24000218

080007fc <adc_get_value>:

void adc_get_value()
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, adc_value, 4);
 8000800:	2204      	movs	r2, #4
 8000802:	4903      	ldr	r1, [pc, #12]	@ (8000810 <adc_get_value+0x14>)
 8000804:	4803      	ldr	r0, [pc, #12]	@ (8000814 <adc_get_value+0x18>)
 8000806:	f002 f9f9 	bl	8002bfc <HAL_ADC_Start_DMA>
}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	240001f4 	.word	0x240001f4
 8000814:	24000220 	.word	0x24000220

08000818 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b096      	sub	sp, #88	@ 0x58
 800081c:	af08      	add	r7, sp, #32
  /* USER CODE BEGIN 1 */
//	uint8_t data_write = 0xAB;
  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800081e:	f000 fc67 	bl	80010f0 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000822:	f001 fd9f 	bl	8002364 <HAL_Init>
//   app_init();

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000826:	f000 f86b 	bl	8000900 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800082a:	f000 fb8b 	bl	8000f44 <MX_GPIO_Init>
  MX_DMA_Init();
 800082e:	f000 fb69 	bl	8000f04 <MX_DMA_Init>
  MX_TIM4_Init();
 8000832:	f000 fa81 	bl	8000d38 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8000836:	f000 fb19 	bl	8000e6c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800083a:	f000 f993 	bl	8000b64 <MX_I2C1_Init>
  MX_SPI3_Init();
 800083e:	f000 f9d1 	bl	8000be4 <MX_SPI3_Init>
  MX_ADC1_Init();
 8000842:	f000 f8db 	bl	80009fc <MX_ADC1_Init>
  MX_TIM1_Init();
 8000846:	f000 fa23 	bl	8000c90 <MX_TIM1_Init>
  MX_UART7_Init();
 800084a:	f000 fac3 	bl	8000dd4 <MX_UART7_Init>
  Control_Init();
 800084e:	f000 fd8b 	bl	8001368 <Control_Init>

  double V_CB;
  double V_Bat;
  double Vref;
  double Ib;
  double D = 0;
 8000852:	f04f 0200 	mov.w	r2, #0
 8000856:	f04f 0300 	mov.w	r3, #0
 800085a:	e9c7 2304 	strd	r2, r3, [r7, #16]
//      HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
//      HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
//      HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
//      HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
//	  HAL_Delay(1);
	  adc_get_value();
 800085e:	f7ff ffcd 	bl	80007fc <adc_get_value>
	   V_CB = voutsense;
 8000862:	4b23      	ldr	r3, [pc, #140]	@ (80008f0 <main+0xd8>)
 8000864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000868:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	   V_Bat = vinsense;
 800086c:	4b21      	ldr	r3, [pc, #132]	@ (80008f4 <main+0xdc>)
 800086e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000872:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	  Vref = 24;  // Set your reference voltage
 8000876:	f04f 0200 	mov.w	r2, #0
 800087a:	4b1f      	ldr	r3, [pc, #124]	@ (80008f8 <main+0xe0>)
 800087c:	e9c7 2308 	strd	r2, r3, [r7, #32]
	   Ib = isense;
 8000880:	4b1e      	ldr	r3, [pc, #120]	@ (80008fc <main+0xe4>)
 8000882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000886:	e9c7 2306 	strd	r2, r3, [r7, #24]

	  // Control variables


	  // Update control system
	  Control_Update(V_CB, V_Bat, Vref, 0, 0, &D, 0, &uk_V, &uk_Ib, 0, 0, 0, 0, 0, 0, 0);
 800088a:	463b      	mov	r3, r7
 800088c:	f107 0208 	add.w	r2, r7, #8
 8000890:	f107 0010 	add.w	r0, r7, #16
 8000894:	2100      	movs	r1, #0
 8000896:	9106      	str	r1, [sp, #24]
 8000898:	2100      	movs	r1, #0
 800089a:	9105      	str	r1, [sp, #20]
 800089c:	2100      	movs	r1, #0
 800089e:	9104      	str	r1, [sp, #16]
 80008a0:	2100      	movs	r1, #0
 80008a2:	9103      	str	r1, [sp, #12]
 80008a4:	2100      	movs	r1, #0
 80008a6:	9102      	str	r1, [sp, #8]
 80008a8:	2100      	movs	r1, #0
 80008aa:	9101      	str	r1, [sp, #4]
 80008ac:	2100      	movs	r1, #0
 80008ae:	9100      	str	r1, [sp, #0]
 80008b0:	2100      	movs	r1, #0
 80008b2:	ed9f 4b0d 	vldr	d4, [pc, #52]	@ 80008e8 <main+0xd0>
 80008b6:	ed9f 3b0c 	vldr	d3, [pc, #48]	@ 80008e8 <main+0xd0>
 80008ba:	ed97 2b08 	vldr	d2, [r7, #32]
 80008be:	ed97 1b0a 	vldr	d1, [r7, #40]	@ 0x28
 80008c2:	ed97 0b0c 	vldr	d0, [r7, #48]	@ 0x30
 80008c6:	f000 ff9b 	bl	8001800 <Control_Update>

	   //Update PWM duty cycle
	  mosfet(D);
 80008ca:	ed97 7b04 	vldr	d7, [r7, #16]
 80008ce:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80008d2:	eeb0 0a67 	vmov.f32	s0, s15
 80008d6:	f001 fc8f 	bl	80021f8 <mosfet>

	   //Add delay or wait for timer interrupt
	  delay_ns(500);  // Adjust based on your control frequency
 80008da:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80008de:	f001 fca9 	bl	8002234 <delay_ns>
  {
 80008e2:	bf00      	nop
 80008e4:	e7bb      	b.n	800085e <main+0x46>
 80008e6:	bf00      	nop
	...
 80008f0:	24000208 	.word	0x24000208
 80008f4:	24000210 	.word	0x24000210
 80008f8:	40380000 	.word	0x40380000
 80008fc:	24000200 	.word	0x24000200

08000900 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b09c      	sub	sp, #112	@ 0x70
 8000904:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000906:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800090a:	224c      	movs	r2, #76	@ 0x4c
 800090c:	2100      	movs	r1, #0
 800090e:	4618      	mov	r0, r3
 8000910:	f00d fd0b 	bl	800e32a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000914:	1d3b      	adds	r3, r7, #4
 8000916:	2220      	movs	r2, #32
 8000918:	2100      	movs	r1, #0
 800091a:	4618      	mov	r0, r3
 800091c:	f00d fd05 	bl	800e32a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000920:	2002      	movs	r0, #2
 8000922:	f006 fb8f 	bl	8007044 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000926:	2300      	movs	r3, #0
 8000928:	603b      	str	r3, [r7, #0]
 800092a:	4b32      	ldr	r3, [pc, #200]	@ (80009f4 <SystemClock_Config+0xf4>)
 800092c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800092e:	4a31      	ldr	r2, [pc, #196]	@ (80009f4 <SystemClock_Config+0xf4>)
 8000930:	f023 0301 	bic.w	r3, r3, #1
 8000934:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000936:	4b2f      	ldr	r3, [pc, #188]	@ (80009f4 <SystemClock_Config+0xf4>)
 8000938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800093a:	f003 0301 	and.w	r3, r3, #1
 800093e:	603b      	str	r3, [r7, #0]
 8000940:	4b2d      	ldr	r3, [pc, #180]	@ (80009f8 <SystemClock_Config+0xf8>)
 8000942:	699b      	ldr	r3, [r3, #24]
 8000944:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000948:	4a2b      	ldr	r2, [pc, #172]	@ (80009f8 <SystemClock_Config+0xf8>)
 800094a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800094e:	6193      	str	r3, [r2, #24]
 8000950:	4b29      	ldr	r3, [pc, #164]	@ (80009f8 <SystemClock_Config+0xf8>)
 8000952:	699b      	ldr	r3, [r3, #24]
 8000954:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000958:	603b      	str	r3, [r7, #0]
 800095a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800095c:	bf00      	nop
 800095e:	4b26      	ldr	r3, [pc, #152]	@ (80009f8 <SystemClock_Config+0xf8>)
 8000960:	699b      	ldr	r3, [r3, #24]
 8000962:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000966:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800096a:	d1f8      	bne.n	800095e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800096c:	2302      	movs	r3, #2
 800096e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000970:	2301      	movs	r3, #1
 8000972:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000974:	2340      	movs	r3, #64	@ 0x40
 8000976:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000978:	2302      	movs	r3, #2
 800097a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800097c:	2300      	movs	r3, #0
 800097e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000980:	2304      	movs	r3, #4
 8000982:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 8000984:	2312      	movs	r3, #18
 8000986:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000988:	2302      	movs	r3, #2
 800098a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800098c:	2303      	movs	r3, #3
 800098e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000990:	2302      	movs	r3, #2
 8000992:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000994:	230c      	movs	r3, #12
 8000996:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000998:	2300      	movs	r3, #0
 800099a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800099c:	2300      	movs	r3, #0
 800099e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009a4:	4618      	mov	r0, r3
 80009a6:	f006 fb87 	bl	80070b8 <HAL_RCC_OscConfig>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80009b0:	f000 fbca 	bl	8001148 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009b4:	233f      	movs	r3, #63	@ 0x3f
 80009b6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009b8:	2303      	movs	r3, #3
 80009ba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009bc:	2300      	movs	r3, #0
 80009be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80009c0:	2300      	movs	r3, #0
 80009c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80009c4:	2340      	movs	r3, #64	@ 0x40
 80009c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV4;
 80009c8:	2350      	movs	r3, #80	@ 0x50
 80009ca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV8;
 80009cc:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80009d0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80009d2:	2340      	movs	r3, #64	@ 0x40
 80009d4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80009d6:	1d3b      	adds	r3, r7, #4
 80009d8:	2103      	movs	r1, #3
 80009da:	4618      	mov	r0, r3
 80009dc:	f006 ffc6 	bl	800796c <HAL_RCC_ClockConfig>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <SystemClock_Config+0xea>
  {
    Error_Handler();
 80009e6:	f000 fbaf 	bl	8001148 <Error_Handler>
  }
}
 80009ea:	bf00      	nop
 80009ec:	3770      	adds	r7, #112	@ 0x70
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	58000400 	.word	0x58000400
 80009f8:	58024800 	.word	0x58024800

080009fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b08a      	sub	sp, #40	@ 0x28
 8000a00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000a02:	f107 031c 	add.w	r3, r7, #28
 8000a06:	2200      	movs	r2, #0
 8000a08:	601a      	str	r2, [r3, #0]
 8000a0a:	605a      	str	r2, [r3, #4]
 8000a0c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a0e:	463b      	mov	r3, r7
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
 8000a14:	605a      	str	r2, [r3, #4]
 8000a16:	609a      	str	r2, [r3, #8]
 8000a18:	60da      	str	r2, [r3, #12]
 8000a1a:	611a      	str	r2, [r3, #16]
 8000a1c:	615a      	str	r2, [r3, #20]
 8000a1e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a20:	4b4a      	ldr	r3, [pc, #296]	@ (8000b4c <MX_ADC1_Init+0x150>)
 8000a22:	4a4b      	ldr	r2, [pc, #300]	@ (8000b50 <MX_ADC1_Init+0x154>)
 8000a24:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000a26:	4b49      	ldr	r3, [pc, #292]	@ (8000b4c <MX_ADC1_Init+0x150>)
 8000a28:	2201      	movs	r2, #1
 8000a2a:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000a2c:	4b47      	ldr	r3, [pc, #284]	@ (8000b4c <MX_ADC1_Init+0x150>)
 8000a2e:	2208      	movs	r2, #8
 8000a30:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a32:	4b46      	ldr	r3, [pc, #280]	@ (8000b4c <MX_ADC1_Init+0x150>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a38:	4b44      	ldr	r3, [pc, #272]	@ (8000b4c <MX_ADC1_Init+0x150>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 4;
 8000a3e:	4b43      	ldr	r3, [pc, #268]	@ (8000b4c <MX_ADC1_Init+0x150>)
 8000a40:	2204      	movs	r2, #4
 8000a42:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a44:	4b41      	ldr	r3, [pc, #260]	@ (8000b4c <MX_ADC1_Init+0x150>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a4a:	4b40      	ldr	r3, [pc, #256]	@ (8000b4c <MX_ADC1_Init+0x150>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a50:	4b3e      	ldr	r3, [pc, #248]	@ (8000b4c <MX_ADC1_Init+0x150>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_ONESHOT;
 8000a56:	4b3d      	ldr	r3, [pc, #244]	@ (8000b4c <MX_ADC1_Init+0x150>)
 8000a58:	2201      	movs	r2, #1
 8000a5a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a5c:	4b3b      	ldr	r3, [pc, #236]	@ (8000b4c <MX_ADC1_Init+0x150>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000a62:	4b3a      	ldr	r3, [pc, #232]	@ (8000b4c <MX_ADC1_Init+0x150>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000a68:	4b38      	ldr	r3, [pc, #224]	@ (8000b4c <MX_ADC1_Init+0x150>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 1;
 8000a70:	4b36      	ldr	r3, [pc, #216]	@ (8000b4c <MX_ADC1_Init+0x150>)
 8000a72:	2201      	movs	r2, #1
 8000a74:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a76:	4835      	ldr	r0, [pc, #212]	@ (8000b4c <MX_ADC1_Init+0x150>)
 8000a78:	f001 ff1e 	bl	80028b8 <HAL_ADC_Init>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000a82:	f000 fb61 	bl	8001148 <Error_Handler>
  }
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000a86:	4b31      	ldr	r3, [pc, #196]	@ (8000b4c <MX_ADC1_Init+0x150>)
 8000a88:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000a8c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000a8e:	4b2f      	ldr	r3, [pc, #188]	@ (8000b4c <MX_ADC1_Init+0x150>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a94:	482d      	ldr	r0, [pc, #180]	@ (8000b4c <MX_ADC1_Init+0x150>)
 8000a96:	f001 ff0f 	bl	80028b8 <HAL_ADC_Init>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8000aa0:	f000 fb52 	bl	8001148 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000aa8:	f107 031c 	add.w	r3, r7, #28
 8000aac:	4619      	mov	r1, r3
 8000aae:	4827      	ldr	r0, [pc, #156]	@ (8000b4c <MX_ADC1_Init+0x150>)
 8000ab0:	f002 ff28 	bl	8003904 <HAL_ADCEx_MultiModeConfigChannel>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8000aba:	f000 fb45 	bl	8001148 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000abe:	4b25      	ldr	r3, [pc, #148]	@ (8000b54 <MX_ADC1_Init+0x158>)
 8000ac0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ac2:	2306      	movs	r3, #6
 8000ac4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000aca:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000ace:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ad0:	2304      	movs	r3, #4
 8000ad2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000adc:	463b      	mov	r3, r7
 8000ade:	4619      	mov	r1, r3
 8000ae0:	481a      	ldr	r0, [pc, #104]	@ (8000b4c <MX_ADC1_Init+0x150>)
 8000ae2:	f002 f963 	bl	8002dac <HAL_ADC_ConfigChannel>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 8000aec:	f000 fb2c 	bl	8001148 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000af0:	4b19      	ldr	r3, [pc, #100]	@ (8000b58 <MX_ADC1_Init+0x15c>)
 8000af2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000af4:	230c      	movs	r3, #12
 8000af6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000af8:	463b      	mov	r3, r7
 8000afa:	4619      	mov	r1, r3
 8000afc:	4813      	ldr	r0, [pc, #76]	@ (8000b4c <MX_ADC1_Init+0x150>)
 8000afe:	f002 f955 	bl	8002dac <HAL_ADC_ConfigChannel>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <MX_ADC1_Init+0x110>
  {
    Error_Handler();
 8000b08:	f000 fb1e 	bl	8001148 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000b0c:	4b13      	ldr	r3, [pc, #76]	@ (8000b5c <MX_ADC1_Init+0x160>)
 8000b0e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000b10:	2312      	movs	r3, #18
 8000b12:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b14:	463b      	mov	r3, r7
 8000b16:	4619      	mov	r1, r3
 8000b18:	480c      	ldr	r0, [pc, #48]	@ (8000b4c <MX_ADC1_Init+0x150>)
 8000b1a:	f002 f947 	bl	8002dac <HAL_ADC_ConfigChannel>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_ADC1_Init+0x12c>
  {
    Error_Handler();
 8000b24:	f000 fb10 	bl	8001148 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 8000b28:	4b0d      	ldr	r3, [pc, #52]	@ (8000b60 <MX_ADC1_Init+0x164>)
 8000b2a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000b2c:	2318      	movs	r3, #24
 8000b2e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b30:	463b      	mov	r3, r7
 8000b32:	4619      	mov	r1, r3
 8000b34:	4805      	ldr	r0, [pc, #20]	@ (8000b4c <MX_ADC1_Init+0x150>)
 8000b36:	f002 f939 	bl	8002dac <HAL_ADC_ConfigChannel>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_ADC1_Init+0x148>
  {
    Error_Handler();
 8000b40:	f000 fb02 	bl	8001148 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b44:	bf00      	nop
 8000b46:	3728      	adds	r7, #40	@ 0x28
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	24000220 	.word	0x24000220
 8000b50:	40022000 	.word	0x40022000
 8000b54:	1d500080 	.word	0x1d500080
 8000b58:	10c00010 	.word	0x10c00010
 8000b5c:	21800100 	.word	0x21800100
 8000b60:	4b840000 	.word	0x4b840000

08000b64 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b68:	4b1b      	ldr	r3, [pc, #108]	@ (8000bd8 <MX_I2C1_Init+0x74>)
 8000b6a:	4a1c      	ldr	r2, [pc, #112]	@ (8000bdc <MX_I2C1_Init+0x78>)
 8000b6c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00301739;
 8000b6e:	4b1a      	ldr	r3, [pc, #104]	@ (8000bd8 <MX_I2C1_Init+0x74>)
 8000b70:	4a1b      	ldr	r2, [pc, #108]	@ (8000be0 <MX_I2C1_Init+0x7c>)
 8000b72:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000b74:	4b18      	ldr	r3, [pc, #96]	@ (8000bd8 <MX_I2C1_Init+0x74>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b7a:	4b17      	ldr	r3, [pc, #92]	@ (8000bd8 <MX_I2C1_Init+0x74>)
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b80:	4b15      	ldr	r3, [pc, #84]	@ (8000bd8 <MX_I2C1_Init+0x74>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000b86:	4b14      	ldr	r3, [pc, #80]	@ (8000bd8 <MX_I2C1_Init+0x74>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b8c:	4b12      	ldr	r3, [pc, #72]	@ (8000bd8 <MX_I2C1_Init+0x74>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b92:	4b11      	ldr	r3, [pc, #68]	@ (8000bd8 <MX_I2C1_Init+0x74>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b98:	4b0f      	ldr	r3, [pc, #60]	@ (8000bd8 <MX_I2C1_Init+0x74>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b9e:	480e      	ldr	r0, [pc, #56]	@ (8000bd8 <MX_I2C1_Init+0x74>)
 8000ba0:	f006 f91c 	bl	8006ddc <HAL_I2C_Init>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000baa:	f000 facd 	bl	8001148 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bae:	2100      	movs	r1, #0
 8000bb0:	4809      	ldr	r0, [pc, #36]	@ (8000bd8 <MX_I2C1_Init+0x74>)
 8000bb2:	f006 f9af 	bl	8006f14 <HAL_I2CEx_ConfigAnalogFilter>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000bbc:	f000 fac4 	bl	8001148 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	4805      	ldr	r0, [pc, #20]	@ (8000bd8 <MX_I2C1_Init+0x74>)
 8000bc4:	f006 f9f1 	bl	8006faa <HAL_I2CEx_ConfigDigitalFilter>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000bce:	f000 fabb 	bl	8001148 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bd2:	bf00      	nop
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	240002fc 	.word	0x240002fc
 8000bdc:	40005400 	.word	0x40005400
 8000be0:	00301739 	.word	0x00301739

08000be4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000be8:	4b27      	ldr	r3, [pc, #156]	@ (8000c88 <MX_SPI3_Init+0xa4>)
 8000bea:	4a28      	ldr	r2, [pc, #160]	@ (8000c8c <MX_SPI3_Init+0xa8>)
 8000bec:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000bee:	4b26      	ldr	r3, [pc, #152]	@ (8000c88 <MX_SPI3_Init+0xa4>)
 8000bf0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000bf4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000bf6:	4b24      	ldr	r3, [pc, #144]	@ (8000c88 <MX_SPI3_Init+0xa4>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000bfc:	4b22      	ldr	r3, [pc, #136]	@ (8000c88 <MX_SPI3_Init+0xa4>)
 8000bfe:	2203      	movs	r2, #3
 8000c00:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c02:	4b21      	ldr	r3, [pc, #132]	@ (8000c88 <MX_SPI3_Init+0xa4>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c08:	4b1f      	ldr	r3, [pc, #124]	@ (8000c88 <MX_SPI3_Init+0xa4>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000c0e:	4b1e      	ldr	r3, [pc, #120]	@ (8000c88 <MX_SPI3_Init+0xa4>)
 8000c10:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000c14:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c16:	4b1c      	ldr	r3, [pc, #112]	@ (8000c88 <MX_SPI3_Init+0xa4>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c1c:	4b1a      	ldr	r3, [pc, #104]	@ (8000c88 <MX_SPI3_Init+0xa4>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c22:	4b19      	ldr	r3, [pc, #100]	@ (8000c88 <MX_SPI3_Init+0xa4>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c28:	4b17      	ldr	r3, [pc, #92]	@ (8000c88 <MX_SPI3_Init+0xa4>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8000c2e:	4b16      	ldr	r3, [pc, #88]	@ (8000c88 <MX_SPI3_Init+0xa4>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c34:	4b14      	ldr	r3, [pc, #80]	@ (8000c88 <MX_SPI3_Init+0xa4>)
 8000c36:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c3a:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000c3c:	4b12      	ldr	r3, [pc, #72]	@ (8000c88 <MX_SPI3_Init+0xa4>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000c42:	4b11      	ldr	r3, [pc, #68]	@ (8000c88 <MX_SPI3_Init+0xa4>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c48:	4b0f      	ldr	r3, [pc, #60]	@ (8000c88 <MX_SPI3_Init+0xa4>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c88 <MX_SPI3_Init+0xa4>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000c54:	4b0c      	ldr	r3, [pc, #48]	@ (8000c88 <MX_SPI3_Init+0xa4>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000c5a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c88 <MX_SPI3_Init+0xa4>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000c60:	4b09      	ldr	r3, [pc, #36]	@ (8000c88 <MX_SPI3_Init+0xa4>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000c66:	4b08      	ldr	r3, [pc, #32]	@ (8000c88 <MX_SPI3_Init+0xa4>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000c6c:	4b06      	ldr	r3, [pc, #24]	@ (8000c88 <MX_SPI3_Init+0xa4>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000c72:	4805      	ldr	r0, [pc, #20]	@ (8000c88 <MX_SPI3_Init+0xa4>)
 8000c74:	f009 ff04 	bl	800aa80 <HAL_SPI_Init>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 8000c7e:	f000 fa63 	bl	8001148 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000c82:	bf00      	nop
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	24000350 	.word	0x24000350
 8000c8c:	40003c00 	.word	0x40003c00

08000c90 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b088      	sub	sp, #32
 8000c94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c96:	f107 0310 	add.w	r3, r7, #16
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	605a      	str	r2, [r3, #4]
 8000ca0:	609a      	str	r2, [r3, #8]
 8000ca2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ca4:	1d3b      	adds	r3, r7, #4
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	601a      	str	r2, [r3, #0]
 8000caa:	605a      	str	r2, [r3, #4]
 8000cac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000cae:	4b20      	ldr	r3, [pc, #128]	@ (8000d30 <MX_TIM1_Init+0xa0>)
 8000cb0:	4a20      	ldr	r2, [pc, #128]	@ (8000d34 <MX_TIM1_Init+0xa4>)
 8000cb2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1-1;
 8000cb4:	4b1e      	ldr	r3, [pc, #120]	@ (8000d30 <MX_TIM1_Init+0xa0>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cba:	4b1d      	ldr	r3, [pc, #116]	@ (8000d30 <MX_TIM1_Init+0xa0>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000cc0:	4b1b      	ldr	r3, [pc, #108]	@ (8000d30 <MX_TIM1_Init+0xa0>)
 8000cc2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000cc6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cc8:	4b19      	ldr	r3, [pc, #100]	@ (8000d30 <MX_TIM1_Init+0xa0>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000cce:	4b18      	ldr	r3, [pc, #96]	@ (8000d30 <MX_TIM1_Init+0xa0>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cd4:	4b16      	ldr	r3, [pc, #88]	@ (8000d30 <MX_TIM1_Init+0xa0>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000cda:	4815      	ldr	r0, [pc, #84]	@ (8000d30 <MX_TIM1_Init+0xa0>)
 8000cdc:	f00a fac9 	bl	800b272 <HAL_TIM_Base_Init>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000ce6:	f000 fa2f 	bl	8001148 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000cf0:	f107 0310 	add.w	r3, r7, #16
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	480e      	ldr	r0, [pc, #56]	@ (8000d30 <MX_TIM1_Init+0xa0>)
 8000cf8:	f00a fd02 	bl	800b700 <HAL_TIM_ConfigClockSource>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000d02:	f000 fa21 	bl	8001148 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d06:	2300      	movs	r3, #0
 8000d08:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d12:	1d3b      	adds	r3, r7, #4
 8000d14:	4619      	mov	r1, r3
 8000d16:	4806      	ldr	r0, [pc, #24]	@ (8000d30 <MX_TIM1_Init+0xa0>)
 8000d18:	f00a ff56 	bl	800bbc8 <HAL_TIMEx_MasterConfigSynchronization>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000d22:	f000 fa11 	bl	8001148 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000d26:	bf00      	nop
 8000d28:	3720      	adds	r7, #32
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	240003d8 	.word	0x240003d8
 8000d34:	40010000 	.word	0x40010000

08000d38 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b088      	sub	sp, #32
 8000d3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d3e:	f107 0310 	add.w	r3, r7, #16
 8000d42:	2200      	movs	r2, #0
 8000d44:	601a      	str	r2, [r3, #0]
 8000d46:	605a      	str	r2, [r3, #4]
 8000d48:	609a      	str	r2, [r3, #8]
 8000d4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d4c:	1d3b      	adds	r3, r7, #4
 8000d4e:	2200      	movs	r2, #0
 8000d50:	601a      	str	r2, [r3, #0]
 8000d52:	605a      	str	r2, [r3, #4]
 8000d54:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000d56:	4b1d      	ldr	r3, [pc, #116]	@ (8000dcc <MX_TIM4_Init+0x94>)
 8000d58:	4a1d      	ldr	r2, [pc, #116]	@ (8000dd0 <MX_TIM4_Init+0x98>)
 8000d5a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 5-1;
 8000d5c:	4b1b      	ldr	r3, [pc, #108]	@ (8000dcc <MX_TIM4_Init+0x94>)
 8000d5e:	2204      	movs	r2, #4
 8000d60:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d62:	4b1a      	ldr	r3, [pc, #104]	@ (8000dcc <MX_TIM4_Init+0x94>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 8000d68:	4b18      	ldr	r3, [pc, #96]	@ (8000dcc <MX_TIM4_Init+0x94>)
 8000d6a:	2263      	movs	r2, #99	@ 0x63
 8000d6c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d6e:	4b17      	ldr	r3, [pc, #92]	@ (8000dcc <MX_TIM4_Init+0x94>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d74:	4b15      	ldr	r3, [pc, #84]	@ (8000dcc <MX_TIM4_Init+0x94>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000d7a:	4814      	ldr	r0, [pc, #80]	@ (8000dcc <MX_TIM4_Init+0x94>)
 8000d7c:	f00a fa79 	bl	800b272 <HAL_TIM_Base_Init>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000d86:	f000 f9df 	bl	8001148 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d8a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d8e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000d90:	f107 0310 	add.w	r3, r7, #16
 8000d94:	4619      	mov	r1, r3
 8000d96:	480d      	ldr	r0, [pc, #52]	@ (8000dcc <MX_TIM4_Init+0x94>)
 8000d98:	f00a fcb2 	bl	800b700 <HAL_TIM_ConfigClockSource>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000da2:	f000 f9d1 	bl	8001148 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000da6:	2300      	movs	r3, #0
 8000da8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000daa:	2300      	movs	r3, #0
 8000dac:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000dae:	1d3b      	adds	r3, r7, #4
 8000db0:	4619      	mov	r1, r3
 8000db2:	4806      	ldr	r0, [pc, #24]	@ (8000dcc <MX_TIM4_Init+0x94>)
 8000db4:	f00a ff08 	bl	800bbc8 <HAL_TIMEx_MasterConfigSynchronization>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000dbe:	f000 f9c3 	bl	8001148 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000dc2:	bf00      	nop
 8000dc4:	3720      	adds	r7, #32
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	24000424 	.word	0x24000424
 8000dd0:	40000800 	.word	0x40000800

08000dd4 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8000dd8:	4b22      	ldr	r3, [pc, #136]	@ (8000e64 <MX_UART7_Init+0x90>)
 8000dda:	4a23      	ldr	r2, [pc, #140]	@ (8000e68 <MX_UART7_Init+0x94>)
 8000ddc:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8000dde:	4b21      	ldr	r3, [pc, #132]	@ (8000e64 <MX_UART7_Init+0x90>)
 8000de0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000de4:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8000de6:	4b1f      	ldr	r3, [pc, #124]	@ (8000e64 <MX_UART7_Init+0x90>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8000dec:	4b1d      	ldr	r3, [pc, #116]	@ (8000e64 <MX_UART7_Init+0x90>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8000df2:	4b1c      	ldr	r3, [pc, #112]	@ (8000e64 <MX_UART7_Init+0x90>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8000df8:	4b1a      	ldr	r3, [pc, #104]	@ (8000e64 <MX_UART7_Init+0x90>)
 8000dfa:	220c      	movs	r2, #12
 8000dfc:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dfe:	4b19      	ldr	r3, [pc, #100]	@ (8000e64 <MX_UART7_Init+0x90>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e04:	4b17      	ldr	r3, [pc, #92]	@ (8000e64 <MX_UART7_Init+0x90>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e0a:	4b16      	ldr	r3, [pc, #88]	@ (8000e64 <MX_UART7_Init+0x90>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e10:	4b14      	ldr	r3, [pc, #80]	@ (8000e64 <MX_UART7_Init+0x90>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	625a      	str	r2, [r3, #36]	@ 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e16:	4b13      	ldr	r3, [pc, #76]	@ (8000e64 <MX_UART7_Init+0x90>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8000e1c:	4811      	ldr	r0, [pc, #68]	@ (8000e64 <MX_UART7_Init+0x90>)
 8000e1e:	f00a ff7f 	bl	800bd20 <HAL_UART_Init>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8000e28:	f000 f98e 	bl	8001148 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	480d      	ldr	r0, [pc, #52]	@ (8000e64 <MX_UART7_Init+0x90>)
 8000e30:	f00c fc42 	bl	800d6b8 <HAL_UARTEx_SetTxFifoThreshold>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 8000e3a:	f000 f985 	bl	8001148 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e3e:	2100      	movs	r1, #0
 8000e40:	4808      	ldr	r0, [pc, #32]	@ (8000e64 <MX_UART7_Init+0x90>)
 8000e42:	f00c fc77 	bl	800d734 <HAL_UARTEx_SetRxFifoThreshold>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8000e4c:	f000 f97c 	bl	8001148 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8000e50:	4804      	ldr	r0, [pc, #16]	@ (8000e64 <MX_UART7_Init+0x90>)
 8000e52:	f00c fbf8 	bl	800d646 <HAL_UARTEx_DisableFifoMode>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 8000e5c:	f000 f974 	bl	8001148 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8000e60:	bf00      	nop
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	24000470 	.word	0x24000470
 8000e68:	40007800 	.word	0x40007800

08000e6c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e70:	4b22      	ldr	r3, [pc, #136]	@ (8000efc <MX_USART2_UART_Init+0x90>)
 8000e72:	4a23      	ldr	r2, [pc, #140]	@ (8000f00 <MX_USART2_UART_Init+0x94>)
 8000e74:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e76:	4b21      	ldr	r3, [pc, #132]	@ (8000efc <MX_USART2_UART_Init+0x90>)
 8000e78:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e7c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e7e:	4b1f      	ldr	r3, [pc, #124]	@ (8000efc <MX_USART2_UART_Init+0x90>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e84:	4b1d      	ldr	r3, [pc, #116]	@ (8000efc <MX_USART2_UART_Init+0x90>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e8a:	4b1c      	ldr	r3, [pc, #112]	@ (8000efc <MX_USART2_UART_Init+0x90>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e90:	4b1a      	ldr	r3, [pc, #104]	@ (8000efc <MX_USART2_UART_Init+0x90>)
 8000e92:	220c      	movs	r2, #12
 8000e94:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e96:	4b19      	ldr	r3, [pc, #100]	@ (8000efc <MX_USART2_UART_Init+0x90>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e9c:	4b17      	ldr	r3, [pc, #92]	@ (8000efc <MX_USART2_UART_Init+0x90>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ea2:	4b16      	ldr	r3, [pc, #88]	@ (8000efc <MX_USART2_UART_Init+0x90>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ea8:	4b14      	ldr	r3, [pc, #80]	@ (8000efc <MX_USART2_UART_Init+0x90>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000eae:	4b13      	ldr	r3, [pc, #76]	@ (8000efc <MX_USART2_UART_Init+0x90>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000eb4:	4811      	ldr	r0, [pc, #68]	@ (8000efc <MX_USART2_UART_Init+0x90>)
 8000eb6:	f00a ff33 	bl	800bd20 <HAL_UART_Init>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000ec0:	f000 f942 	bl	8001148 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	480d      	ldr	r0, [pc, #52]	@ (8000efc <MX_USART2_UART_Init+0x90>)
 8000ec8:	f00c fbf6 	bl	800d6b8 <HAL_UARTEx_SetTxFifoThreshold>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000ed2:	f000 f939 	bl	8001148 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	4808      	ldr	r0, [pc, #32]	@ (8000efc <MX_USART2_UART_Init+0x90>)
 8000eda:	f00c fc2b 	bl	800d734 <HAL_UARTEx_SetRxFifoThreshold>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000ee4:	f000 f930 	bl	8001148 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000ee8:	4804      	ldr	r0, [pc, #16]	@ (8000efc <MX_USART2_UART_Init+0x90>)
 8000eea:	f00c fbac 	bl	800d646 <HAL_UARTEx_DisableFifoMode>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000ef4:	f000 f928 	bl	8001148 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ef8:	bf00      	nop
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	24000504 	.word	0x24000504
 8000f00:	40004400 	.word	0x40004400

08000f04 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f0a:	4b0d      	ldr	r3, [pc, #52]	@ (8000f40 <MX_DMA_Init+0x3c>)
 8000f0c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000f10:	4a0b      	ldr	r2, [pc, #44]	@ (8000f40 <MX_DMA_Init+0x3c>)
 8000f12:	f043 0301 	orr.w	r3, r3, #1
 8000f16:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000f1a:	4b09      	ldr	r3, [pc, #36]	@ (8000f40 <MX_DMA_Init+0x3c>)
 8000f1c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000f20:	f003 0301 	and.w	r3, r3, #1
 8000f24:	607b      	str	r3, [r7, #4]
 8000f26:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000f28:	2200      	movs	r2, #0
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	200b      	movs	r0, #11
 8000f2e:	f002 fea2 	bl	8003c76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000f32:	200b      	movs	r0, #11
 8000f34:	f002 feb9 	bl	8003caa <HAL_NVIC_EnableIRQ>

}
 8000f38:	bf00      	nop
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	58024400 	.word	0x58024400

08000f44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b08c      	sub	sp, #48	@ 0x30
 8000f48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f4a:	f107 031c 	add.w	r3, r7, #28
 8000f4e:	2200      	movs	r2, #0
 8000f50:	601a      	str	r2, [r3, #0]
 8000f52:	605a      	str	r2, [r3, #4]
 8000f54:	609a      	str	r2, [r3, #8]
 8000f56:	60da      	str	r2, [r3, #12]
 8000f58:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f5a:	4b60      	ldr	r3, [pc, #384]	@ (80010dc <MX_GPIO_Init+0x198>)
 8000f5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f60:	4a5e      	ldr	r2, [pc, #376]	@ (80010dc <MX_GPIO_Init+0x198>)
 8000f62:	f043 0304 	orr.w	r3, r3, #4
 8000f66:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f6a:	4b5c      	ldr	r3, [pc, #368]	@ (80010dc <MX_GPIO_Init+0x198>)
 8000f6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f70:	f003 0304 	and.w	r3, r3, #4
 8000f74:	61bb      	str	r3, [r7, #24]
 8000f76:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f78:	4b58      	ldr	r3, [pc, #352]	@ (80010dc <MX_GPIO_Init+0x198>)
 8000f7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f7e:	4a57      	ldr	r2, [pc, #348]	@ (80010dc <MX_GPIO_Init+0x198>)
 8000f80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f84:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f88:	4b54      	ldr	r3, [pc, #336]	@ (80010dc <MX_GPIO_Init+0x198>)
 8000f8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f92:	617b      	str	r3, [r7, #20]
 8000f94:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f96:	4b51      	ldr	r3, [pc, #324]	@ (80010dc <MX_GPIO_Init+0x198>)
 8000f98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f9c:	4a4f      	ldr	r2, [pc, #316]	@ (80010dc <MX_GPIO_Init+0x198>)
 8000f9e:	f043 0301 	orr.w	r3, r3, #1
 8000fa2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fa6:	4b4d      	ldr	r3, [pc, #308]	@ (80010dc <MX_GPIO_Init+0x198>)
 8000fa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fac:	f003 0301 	and.w	r3, r3, #1
 8000fb0:	613b      	str	r3, [r7, #16]
 8000fb2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fb4:	4b49      	ldr	r3, [pc, #292]	@ (80010dc <MX_GPIO_Init+0x198>)
 8000fb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fba:	4a48      	ldr	r2, [pc, #288]	@ (80010dc <MX_GPIO_Init+0x198>)
 8000fbc:	f043 0308 	orr.w	r3, r3, #8
 8000fc0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fc4:	4b45      	ldr	r3, [pc, #276]	@ (80010dc <MX_GPIO_Init+0x198>)
 8000fc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fca:	f003 0308 	and.w	r3, r3, #8
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd2:	4b42      	ldr	r3, [pc, #264]	@ (80010dc <MX_GPIO_Init+0x198>)
 8000fd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fd8:	4a40      	ldr	r2, [pc, #256]	@ (80010dc <MX_GPIO_Init+0x198>)
 8000fda:	f043 0302 	orr.w	r3, r3, #2
 8000fde:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fe2:	4b3e      	ldr	r3, [pc, #248]	@ (80010dc <MX_GPIO_Init+0x198>)
 8000fe4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fe8:	f003 0302 	and.w	r3, r3, #2
 8000fec:	60bb      	str	r3, [r7, #8]
 8000fee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ff0:	4b3a      	ldr	r3, [pc, #232]	@ (80010dc <MX_GPIO_Init+0x198>)
 8000ff2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ff6:	4a39      	ldr	r2, [pc, #228]	@ (80010dc <MX_GPIO_Init+0x198>)
 8000ff8:	f043 0310 	orr.w	r3, r3, #16
 8000ffc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001000:	4b36      	ldr	r3, [pc, #216]	@ (80010dc <MX_GPIO_Init+0x198>)
 8001002:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001006:	f003 0310 	and.w	r3, r3, #16
 800100a:	607b      	str	r3, [r7, #4]
 800100c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, bypass_Pin|reset_Pin, GPIO_PIN_RESET);
 800100e:	2200      	movs	r2, #0
 8001010:	f248 0140 	movw	r1, #32832	@ 0x8040
 8001014:	4832      	ldr	r0, [pc, #200]	@ (80010e0 <MX_GPIO_Init+0x19c>)
 8001016:	f005 fec7 	bl	8006da8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 800101a:	2200      	movs	r2, #0
 800101c:	f24f 0111 	movw	r1, #61457	@ 0xf011
 8001020:	4830      	ldr	r0, [pc, #192]	@ (80010e4 <MX_GPIO_Init+0x1a0>)
 8001022:	f005 fec1 	bl	8006da8 <HAL_GPIO_WritePin>
                          |select_Pin|MODBUS_nWR2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8001026:	2200      	movs	r2, #0
 8001028:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800102c:	482e      	ldr	r0, [pc, #184]	@ (80010e8 <MX_GPIO_Init+0x1a4>)
 800102e:	f005 febb 	bl	8006da8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, GPIO_PIN_RESET);
 8001032:	2200      	movs	r2, #0
 8001034:	2101      	movs	r1, #1
 8001036:	482d      	ldr	r0, [pc, #180]	@ (80010ec <MX_GPIO_Init+0x1a8>)
 8001038:	f005 feb6 	bl	8006da8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : bypass_Pin reset_Pin */
  GPIO_InitStruct.Pin = bypass_Pin|reset_Pin;
 800103c:	f248 0340 	movw	r3, #32832	@ 0x8040
 8001040:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001042:	2301      	movs	r3, #1
 8001044:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001046:	2300      	movs	r3, #0
 8001048:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104a:	2300      	movs	r3, #0
 800104c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800104e:	f107 031c 	add.w	r3, r7, #28
 8001052:	4619      	mov	r1, r3
 8001054:	4822      	ldr	r0, [pc, #136]	@ (80010e0 <MX_GPIO_Init+0x19c>)
 8001056:	f005 fcf7 	bl	8006a48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15
                           select_Pin MODBUS_nWR2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 800105a:	f24f 0311 	movw	r3, #61457	@ 0xf011
 800105e:	61fb      	str	r3, [r7, #28]
                          |select_Pin|MODBUS_nWR2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001060:	2301      	movs	r3, #1
 8001062:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001064:	2300      	movs	r3, #0
 8001066:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001068:	2300      	movs	r3, #0
 800106a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800106c:	f107 031c 	add.w	r3, r7, #28
 8001070:	4619      	mov	r1, r3
 8001072:	481c      	ldr	r0, [pc, #112]	@ (80010e4 <MX_GPIO_Init+0x1a0>)
 8001074:	f005 fce8 	bl	8006a48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001078:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800107c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107e:	2302      	movs	r3, #2
 8001080:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001086:	2300      	movs	r3, #0
 8001088:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800108a:	2309      	movs	r3, #9
 800108c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800108e:	f107 031c 	add.w	r3, r7, #28
 8001092:	4619      	mov	r1, r3
 8001094:	4812      	ldr	r0, [pc, #72]	@ (80010e0 <MX_GPIO_Init+0x19c>)
 8001096:	f005 fcd7 	bl	8006a48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800109a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800109e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a0:	2301      	movs	r3, #1
 80010a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a4:	2300      	movs	r3, #0
 80010a6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a8:	2300      	movs	r3, #0
 80010aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ac:	f107 031c 	add.w	r3, r7, #28
 80010b0:	4619      	mov	r1, r3
 80010b2:	480d      	ldr	r0, [pc, #52]	@ (80010e8 <MX_GPIO_Init+0x1a4>)
 80010b4:	f005 fcc8 	bl	8006a48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80010b8:	2301      	movs	r3, #1
 80010ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010bc:	2301      	movs	r3, #1
 80010be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	2300      	movs	r3, #0
 80010c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c4:	2300      	movs	r3, #0
 80010c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010c8:	f107 031c 	add.w	r3, r7, #28
 80010cc:	4619      	mov	r1, r3
 80010ce:	4807      	ldr	r0, [pc, #28]	@ (80010ec <MX_GPIO_Init+0x1a8>)
 80010d0:	f005 fcba 	bl	8006a48 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010d4:	bf00      	nop
 80010d6:	3730      	adds	r7, #48	@ 0x30
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	58024400 	.word	0x58024400
 80010e0:	58020000 	.word	0x58020000
 80010e4:	58020c00 	.word	0x58020c00
 80010e8:	58020400 	.word	0x58020400
 80010ec:	58021000 	.word	0x58021000

080010f0 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80010f6:	463b      	mov	r3, r7
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]
 80010fe:	609a      	str	r2, [r3, #8]
 8001100:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001102:	f002 fded 	bl	8003ce0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001106:	2301      	movs	r3, #1
 8001108:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800110a:	2300      	movs	r3, #0
 800110c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800110e:	2300      	movs	r3, #0
 8001110:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001112:	231f      	movs	r3, #31
 8001114:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001116:	2387      	movs	r3, #135	@ 0x87
 8001118:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800111a:	2300      	movs	r3, #0
 800111c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800111e:	2300      	movs	r3, #0
 8001120:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001122:	2301      	movs	r3, #1
 8001124:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001126:	2301      	movs	r3, #1
 8001128:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800112a:	2300      	movs	r3, #0
 800112c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800112e:	2300      	movs	r3, #0
 8001130:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001132:	463b      	mov	r3, r7
 8001134:	4618      	mov	r0, r3
 8001136:	f002 fe0b 	bl	8003d50 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800113a:	2004      	movs	r0, #4
 800113c:	f002 fde8 	bl	8003d10 <HAL_MPU_Enable>

}
 8001140:	bf00      	nop
 8001142:	3710      	adds	r7, #16
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}

08001148 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800114c:	b672      	cpsid	i
}
 800114e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001150:	bf00      	nop
 8001152:	e7fd      	b.n	8001150 <Error_Handler+0x8>

08001154 <modbus_send_data>:
static void resetArray(uint8_t *arr, size_t size)
{
  memset(arr, 0, size);
}
void modbus_send_data(uint8_t *data,uint8_t num)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	460b      	mov	r3, r1
 800115e:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(MODBUS_GPIO_WRITE_PORT,MODBUS_WRITE_PORT,GPIO_PIN_SET);
 8001160:	2201      	movs	r2, #1
 8001162:	2110      	movs	r1, #16
 8001164:	4809      	ldr	r0, [pc, #36]	@ (800118c <modbus_send_data+0x38>)
 8001166:	f005 fe1f 	bl	8006da8 <HAL_GPIO_WritePin>
	HAL_UART_Transmit(&huart2,data,num,100);
 800116a:	78fb      	ldrb	r3, [r7, #3]
 800116c:	b29a      	uxth	r2, r3
 800116e:	2364      	movs	r3, #100	@ 0x64
 8001170:	6879      	ldr	r1, [r7, #4]
 8001172:	4807      	ldr	r0, [pc, #28]	@ (8001190 <modbus_send_data+0x3c>)
 8001174:	f00a fe24 	bl	800bdc0 <HAL_UART_Transmit>
	HAL_GPIO_WritePin(MODBUS_GPIO_WRITE_PORT,MODBUS_WRITE_PORT,GPIO_PIN_RESET);
 8001178:	2200      	movs	r2, #0
 800117a:	2110      	movs	r1, #16
 800117c:	4803      	ldr	r0, [pc, #12]	@ (800118c <modbus_send_data+0x38>)
 800117e:	f005 fe13 	bl	8006da8 <HAL_GPIO_WritePin>
}
 8001182:	bf00      	nop
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	58020c00 	.word	0x58020c00
 8001190:	24000504 	.word	0x24000504

08001194 <modbus_respone_data>:
void modbus_respone_data()
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b086      	sub	sp, #24
 8001198:	af00      	add	r7, sp, #0
	uint8_t slave_id_ = 1;
 800119a:	2301      	movs	r3, #1
 800119c:	72fb      	strb	r3, [r7, #11]
	if(slave_id_ == modbus_receive[0])
 800119e:	4b31      	ldr	r3, [pc, #196]	@ (8001264 <modbus_respone_data+0xd0>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	7afa      	ldrb	r2, [r7, #11]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d159      	bne.n	800125c <modbus_respone_data+0xc8>
	{
		uint16_t start_addr = (modbus_receive[2] << 8) | modbus_receive[3]; // start address
 80011a8:	4b2e      	ldr	r3, [pc, #184]	@ (8001264 <modbus_respone_data+0xd0>)
 80011aa:	789b      	ldrb	r3, [r3, #2]
 80011ac:	021b      	lsls	r3, r3, #8
 80011ae:	b21a      	sxth	r2, r3
 80011b0:	4b2c      	ldr	r3, [pc, #176]	@ (8001264 <modbus_respone_data+0xd0>)
 80011b2:	78db      	ldrb	r3, [r3, #3]
 80011b4:	b21b      	sxth	r3, r3
 80011b6:	4313      	orrs	r3, r2
 80011b8:	b21b      	sxth	r3, r3
 80011ba:	82fb      	strh	r3, [r7, #22]
    uint16_t num_registers = (modbus_receive[4] << 8) | modbus_receive[5]; // number of registers
 80011bc:	4b29      	ldr	r3, [pc, #164]	@ (8001264 <modbus_respone_data+0xd0>)
 80011be:	791b      	ldrb	r3, [r3, #4]
 80011c0:	021b      	lsls	r3, r3, #8
 80011c2:	b21a      	sxth	r2, r3
 80011c4:	4b27      	ldr	r3, [pc, #156]	@ (8001264 <modbus_respone_data+0xd0>)
 80011c6:	795b      	ldrb	r3, [r3, #5]
 80011c8:	b21b      	sxth	r3, r3
 80011ca:	4313      	orrs	r3, r2
 80011cc:	b21b      	sxth	r3, r3
 80011ce:	813b      	strh	r3, [r7, #8]
		modbus_send[0] = MODBUS_ID;  // slave ID
 80011d0:	4b25      	ldr	r3, [pc, #148]	@ (8001268 <modbus_respone_data+0xd4>)
 80011d2:	2201      	movs	r2, #1
 80011d4:	701a      	strb	r2, [r3, #0]
	  modbus_send[1] = HOLDING_REGISTERS_READ_FUCTION_CODE;  // function code
 80011d6:	4b24      	ldr	r3, [pc, #144]	@ (8001268 <modbus_respone_data+0xd4>)
 80011d8:	2203      	movs	r2, #3
 80011da:	705a      	strb	r2, [r3, #1]
	  modbus_send[2] = num_registers*2;  // Byte count
 80011dc:	893b      	ldrh	r3, [r7, #8]
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	b2da      	uxtb	r2, r3
 80011e4:	4b20      	ldr	r3, [pc, #128]	@ (8001268 <modbus_respone_data+0xd4>)
 80011e6:	709a      	strb	r2, [r3, #2]
		int indx = 3;  // we need to keep track of how many bytes has been stored in TxData Buffer
 80011e8:	2303      	movs	r3, #3
 80011ea:	613b      	str	r3, [r7, #16]

		for (int i=0; i<num_registers; i++)   // Load the actual data into TxData buffer
 80011ec:	2300      	movs	r3, #0
 80011ee:	60fb      	str	r3, [r7, #12]
 80011f0:	e013      	b.n	800121a <modbus_respone_data+0x86>
		{
			modbus_send[indx++] = (modbus_database[start_addr]>>8)&0xFF;  // extract the higher byte
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	1c5a      	adds	r2, r3, #1
 80011f6:	613a      	str	r2, [r7, #16]
 80011f8:	4a1b      	ldr	r2, [pc, #108]	@ (8001268 <modbus_respone_data+0xd4>)
 80011fa:	2100      	movs	r1, #0
 80011fc:	54d1      	strb	r1, [r2, r3]
			modbus_send[indx++] = (modbus_database[start_addr])&0xFF;   // extract the lower byte
 80011fe:	8afa      	ldrh	r2, [r7, #22]
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	1c59      	adds	r1, r3, #1
 8001204:	6139      	str	r1, [r7, #16]
 8001206:	4919      	ldr	r1, [pc, #100]	@ (800126c <modbus_respone_data+0xd8>)
 8001208:	5c89      	ldrb	r1, [r1, r2]
 800120a:	4a17      	ldr	r2, [pc, #92]	@ (8001268 <modbus_respone_data+0xd4>)
 800120c:	54d1      	strb	r1, [r2, r3]
			start_addr++;  // increment the register address
 800120e:	8afb      	ldrh	r3, [r7, #22]
 8001210:	3301      	adds	r3, #1
 8001212:	82fb      	strh	r3, [r7, #22]
		for (int i=0; i<num_registers; i++)   // Load the actual data into TxData buffer
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	3301      	adds	r3, #1
 8001218:	60fb      	str	r3, [r7, #12]
 800121a:	893b      	ldrh	r3, [r7, #8]
 800121c:	68fa      	ldr	r2, [r7, #12]
 800121e:	429a      	cmp	r2, r3
 8001220:	dbe7      	blt.n	80011f2 <modbus_respone_data+0x5e>
		}
	uint16_t crc = crc16(modbus_send, num_registers);
 8001222:	893b      	ldrh	r3, [r7, #8]
 8001224:	4619      	mov	r1, r3
 8001226:	4810      	ldr	r0, [pc, #64]	@ (8001268 <modbus_respone_data+0xd4>)
 8001228:	f000 f866 	bl	80012f8 <crc16>
 800122c:	4603      	mov	r3, r0
 800122e:	80fb      	strh	r3, [r7, #6]
	modbus_send[num_registers] = crc&0xFF;   // CRC LOW
 8001230:	893b      	ldrh	r3, [r7, #8]
 8001232:	88fa      	ldrh	r2, [r7, #6]
 8001234:	b2d1      	uxtb	r1, r2
 8001236:	4a0c      	ldr	r2, [pc, #48]	@ (8001268 <modbus_respone_data+0xd4>)
 8001238:	54d1      	strb	r1, [r2, r3]
	modbus_send[num_registers+1] = (crc>>8)&0xFF;  // CRC HIGH
 800123a:	88fb      	ldrh	r3, [r7, #6]
 800123c:	0a1b      	lsrs	r3, r3, #8
 800123e:	b29a      	uxth	r2, r3
 8001240:	893b      	ldrh	r3, [r7, #8]
 8001242:	3301      	adds	r3, #1
 8001244:	b2d1      	uxtb	r1, r2
 8001246:	4a08      	ldr	r2, [pc, #32]	@ (8001268 <modbus_respone_data+0xd4>)
 8001248:	54d1      	strb	r1, [r2, r3]
	num_registers = num_registers+2;
 800124a:	893b      	ldrh	r3, [r7, #8]
 800124c:	3302      	adds	r3, #2
 800124e:	813b      	strh	r3, [r7, #8]
	modbus_send_data(modbus_send,num_registers);  // send data... CRC will be calculated in the function itself
 8001250:	893b      	ldrh	r3, [r7, #8]
 8001252:	b2db      	uxtb	r3, r3
 8001254:	4619      	mov	r1, r3
 8001256:	4804      	ldr	r0, [pc, #16]	@ (8001268 <modbus_respone_data+0xd4>)
 8001258:	f7ff ff7c 	bl	8001154 <modbus_send_data>
	}
}
 800125c:	bf00      	nop
 800125e:	3718      	adds	r7, #24
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	240005ac 	.word	0x240005ac
 8001268:	24000598 	.word	0x24000598
 800126c:	240005d8 	.word	0x240005d8

08001270 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	460b      	mov	r3, r1
 800127a:	807b      	strh	r3, [r7, #2]
		if (huart->Instance == USART1)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a19      	ldr	r2, [pc, #100]	@ (80012e8 <HAL_UARTEx_RxEventCallback+0x78>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d12b      	bne.n	80012de <HAL_UARTEx_RxEventCallback+0x6e>
    {
			  if (is_requesting)
 8001286:	4b19      	ldr	r3, [pc, #100]	@ (80012ec <HAL_UARTEx_RxEventCallback+0x7c>)
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d025      	beq.n	80012da <HAL_UARTEx_RxEventCallback+0x6a>
        {
           uint8_t numRegisters = modbus_receive[2] / 2;
 800128e:	4b18      	ldr	r3, [pc, #96]	@ (80012f0 <HAL_UARTEx_RxEventCallback+0x80>)
 8001290:	789b      	ldrb	r3, [r3, #2]
 8001292:	085b      	lsrs	r3, r3, #1
 8001294:	73bb      	strb	r3, [r7, #14]
           for (uint8_t i = 0; i < numRegisters; i++)
 8001296:	2300      	movs	r3, #0
 8001298:	73fb      	strb	r3, [r7, #15]
 800129a:	e016      	b.n	80012ca <HAL_UARTEx_RxEventCallback+0x5a>
           {
               final_data[i] = (modbus_receive[3 + (i * 2)] << 8) | modbus_receive[4 + (i * 2)];
 800129c:	7bfb      	ldrb	r3, [r7, #15]
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	3303      	adds	r3, #3
 80012a2:	4a13      	ldr	r2, [pc, #76]	@ (80012f0 <HAL_UARTEx_RxEventCallback+0x80>)
 80012a4:	5cd3      	ldrb	r3, [r2, r3]
 80012a6:	021b      	lsls	r3, r3, #8
 80012a8:	b21a      	sxth	r2, r3
 80012aa:	7bfb      	ldrb	r3, [r7, #15]
 80012ac:	3302      	adds	r3, #2
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	490f      	ldr	r1, [pc, #60]	@ (80012f0 <HAL_UARTEx_RxEventCallback+0x80>)
 80012b2:	5ccb      	ldrb	r3, [r1, r3]
 80012b4:	b21b      	sxth	r3, r3
 80012b6:	4313      	orrs	r3, r2
 80012b8:	b21a      	sxth	r2, r3
 80012ba:	7bfb      	ldrb	r3, [r7, #15]
 80012bc:	b291      	uxth	r1, r2
 80012be:	4a0d      	ldr	r2, [pc, #52]	@ (80012f4 <HAL_UARTEx_RxEventCallback+0x84>)
 80012c0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
           for (uint8_t i = 0; i < numRegisters; i++)
 80012c4:	7bfb      	ldrb	r3, [r7, #15]
 80012c6:	3301      	adds	r3, #1
 80012c8:	73fb      	strb	r3, [r7, #15]
 80012ca:	7bfa      	ldrb	r2, [r7, #15]
 80012cc:	7bbb      	ldrb	r3, [r7, #14]
 80012ce:	429a      	cmp	r2, r3
 80012d0:	d3e4      	bcc.n	800129c <HAL_UARTEx_RxEventCallback+0x2c>
           }
           is_requesting = 0;
 80012d2:	4b06      	ldr	r3, [pc, #24]	@ (80012ec <HAL_UARTEx_RxEventCallback+0x7c>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	701a      	strb	r2, [r3, #0]
        else
        {
           modbus_respone_data();
        }
    }
}
 80012d8:	e001      	b.n	80012de <HAL_UARTEx_RxEventCallback+0x6e>
           modbus_respone_data();
 80012da:	f7ff ff5b 	bl	8001194 <modbus_respone_data>
}
 80012de:	bf00      	nop
 80012e0:	3710      	adds	r7, #16
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	40011000 	.word	0x40011000
 80012ec:	240005d4 	.word	0x240005d4
 80012f0:	240005ac 	.word	0x240005ac
 80012f4:	240005c0 	.word	0x240005c0

080012f8 <crc16>:
    0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42,
    0x43, 0x83, 0x41, 0x81, 0x80, 0x40
};

uint16_t crc16(uint8_t *buffer, uint16_t buffer_length)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b085      	sub	sp, #20
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	460b      	mov	r3, r1
 8001302:	807b      	strh	r3, [r7, #2]
    uint8_t crc_hi = 0xFF; /* high CRC byte initialized */
 8001304:	23ff      	movs	r3, #255	@ 0xff
 8001306:	73fb      	strb	r3, [r7, #15]
    uint8_t crc_lo = 0xFF; /* low CRC byte initialized */
 8001308:	23ff      	movs	r3, #255	@ 0xff
 800130a:	73bb      	strb	r3, [r7, #14]
    unsigned int i; /* will index into CRC lookup */

    /* pass through message buffer */
    while (buffer_length--) {
 800130c:	e013      	b.n	8001336 <crc16+0x3e>
        i = crc_lo ^ *buffer++; /* calculate the CRC  */
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	1c5a      	adds	r2, r3, #1
 8001312:	607a      	str	r2, [r7, #4]
 8001314:	781a      	ldrb	r2, [r3, #0]
 8001316:	7bbb      	ldrb	r3, [r7, #14]
 8001318:	4053      	eors	r3, r2
 800131a:	b2db      	uxtb	r3, r3
 800131c:	60bb      	str	r3, [r7, #8]
        crc_lo = crc_hi ^ table_crc_hi[i];
 800131e:	4a0f      	ldr	r2, [pc, #60]	@ (800135c <crc16+0x64>)
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	4413      	add	r3, r2
 8001324:	781a      	ldrb	r2, [r3, #0]
 8001326:	7bfb      	ldrb	r3, [r7, #15]
 8001328:	4053      	eors	r3, r2
 800132a:	73bb      	strb	r3, [r7, #14]
        crc_hi = table_crc_lo[i];
 800132c:	4a0c      	ldr	r2, [pc, #48]	@ (8001360 <crc16+0x68>)
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	4413      	add	r3, r2
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	73fb      	strb	r3, [r7, #15]
    while (buffer_length--) {
 8001336:	887b      	ldrh	r3, [r7, #2]
 8001338:	1e5a      	subs	r2, r3, #1
 800133a:	807a      	strh	r2, [r7, #2]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d1e6      	bne.n	800130e <crc16+0x16>
    }

    return (crc_hi << 8 | crc_lo);
 8001340:	7bfb      	ldrb	r3, [r7, #15]
 8001342:	021b      	lsls	r3, r3, #8
 8001344:	b21a      	sxth	r2, r3
 8001346:	7bbb      	ldrb	r3, [r7, #14]
 8001348:	b21b      	sxth	r3, r3
 800134a:	4313      	orrs	r3, r2
 800134c:	b21b      	sxth	r3, r3
 800134e:	b29b      	uxth	r3, r3
}
 8001350:	4618      	mov	r0, r3
 8001352:	3714      	adds	r7, #20
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	08010448 	.word	0x08010448
 8001360:	08010548 	.word	0x08010548
 8001364:	00000000 	.word	0x00000000

08001368 <Control_Init>:
 PI_V PIVarV;
 PI_Ib PIVarIb;
 PI_Ic PIVarIc;
 Ratel RL;
 SystemState sysState;
void Control_Init(void) {
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
    // Initialize hardware peripherals (PWM, ADC, etc.) here

    // Initialize parameters
    iParas.count = 0;
 800136c:	4bb8      	ldr	r3, [pc, #736]	@ (8001650 <Control_Init+0x2e8>)
 800136e:	2200      	movs	r2, #0
 8001370:	671a      	str	r2, [r3, #112]	@ 0x70
    iParas.RL = 0.1;
 8001372:	49b7      	ldr	r1, [pc, #732]	@ (8001650 <Control_Init+0x2e8>)
 8001374:	a39e      	add	r3, pc, #632	@ (adr r3, 80015f0 <Control_Init+0x288>)
 8001376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800137a:	e9c1 2300 	strd	r2, r3, [r1]
    iParas.C = 1e-3;       // Replaced pow(10,-3) with 1e-3
 800137e:	49b4      	ldr	r1, [pc, #720]	@ (8001650 <Control_Init+0x2e8>)
 8001380:	a39d      	add	r3, pc, #628	@ (adr r3, 80015f8 <Control_Init+0x290>)
 8001382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001386:	e9c1 2304 	strd	r2, r3, [r1, #16]
    iParas.L = 100e-6;     // Replaced 100*pow(10,-6)
 800138a:	49b1      	ldr	r1, [pc, #708]	@ (8001650 <Control_Init+0x2e8>)
 800138c:	a39c      	add	r3, pc, #624	@ (adr r3, 8001600 <Control_Init+0x298>)
 800138e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001392:	e9c1 2302 	strd	r2, r3, [r1, #8]
    iParas.r_ds = 7.5e-3;
 8001396:	49ae      	ldr	r1, [pc, #696]	@ (8001650 <Control_Init+0x2e8>)
 8001398:	a39b      	add	r3, pc, #620	@ (adr r3, 8001608 <Control_Init+0x2a0>)
 800139a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800139e:	e9c1 2308 	strd	r2, r3, [r1, #32]
    iParas.r_f = 6.3e-3;
 80013a2:	49ab      	ldr	r1, [pc, #684]	@ (8001650 <Control_Init+0x2e8>)
 80013a4:	a39a      	add	r3, pc, #616	@ (adr r3, 8001610 <Control_Init+0x2a8>)
 80013a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013aa:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    iParas.V_f = 0.7;
 80013ae:	49a8      	ldr	r1, [pc, #672]	@ (8001650 <Control_Init+0x2e8>)
 80013b0:	a399      	add	r3, pc, #612	@ (adr r3, 8001618 <Control_Init+0x2b0>)
 80013b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b6:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    iParas.Imax = 2;
 80013ba:	49a5      	ldr	r1, [pc, #660]	@ (8001650 <Control_Init+0x2e8>)
 80013bc:	f04f 0200 	mov.w	r2, #0
 80013c0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80013c4:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    iParas.Vmax = 30;
 80013c8:	49a1      	ldr	r1, [pc, #644]	@ (8001650 <Control_Init+0x2e8>)
 80013ca:	f04f 0200 	mov.w	r2, #0
 80013ce:	4ba1      	ldr	r3, [pc, #644]	@ (8001654 <Control_Init+0x2ec>)
 80013d0:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    // Switching frequency
    convParas.Fsw = 200000;
 80013d4:	49a0      	ldr	r1, [pc, #640]	@ (8001658 <Control_Init+0x2f0>)
 80013d6:	a392      	add	r3, pc, #584	@ (adr r3, 8001620 <Control_Init+0x2b8>)
 80013d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013dc:	e9c1 2300 	strd	r2, r3, [r1]
    convParas.Td = 1.0/convParas.Fsw;
 80013e0:	4b9d      	ldr	r3, [pc, #628]	@ (8001658 <Control_Init+0x2f0>)
 80013e2:	ed93 6b00 	vldr	d6, [r3]
 80013e6:	eeb7 5b00 	vmov.f64	d5, #112	@ 0x3f800000  1.0
 80013ea:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80013ee:	4b9a      	ldr	r3, [pc, #616]	@ (8001658 <Control_Init+0x2f0>)
 80013f0:	ed83 7b02 	vstr	d7, [r3, #8]
    convParas.Tfi = 1.0/(5*convParas.Fsw);
 80013f4:	4b98      	ldr	r3, [pc, #608]	@ (8001658 <Control_Init+0x2f0>)
 80013f6:	ed93 7b00 	vldr	d7, [r3]
 80013fa:	eeb1 6b04 	vmov.f64	d6, #20	@ 0x40a00000  5.0
 80013fe:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001402:	eeb7 5b00 	vmov.f64	d5, #112	@ 0x3f800000  1.0
 8001406:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800140a:	4b93      	ldr	r3, [pc, #588]	@ (8001658 <Control_Init+0x2f0>)
 800140c:	ed83 7b04 	vstr	d7, [r3, #16]

    // PI voltage controller
    PIVarV.Tsv = 0.1/convParas.Fsw;
 8001410:	4b91      	ldr	r3, [pc, #580]	@ (8001658 <Control_Init+0x2f0>)
 8001412:	ed93 6b00 	vldr	d6, [r3]
 8001416:	ed9f 5b76 	vldr	d5, [pc, #472]	@ 80015f0 <Control_Init+0x288>
 800141a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800141e:	4b8f      	ldr	r3, [pc, #572]	@ (800165c <Control_Init+0x2f4>)
 8001420:	ed83 7b1c 	vstr	d7, [r3, #112]	@ 0x70
    PIVarV.Kpv = 0.05;
 8001424:	498d      	ldr	r1, [pc, #564]	@ (800165c <Control_Init+0x2f4>)
 8001426:	a380      	add	r3, pc, #512	@ (adr r3, 8001628 <Control_Init+0x2c0>)
 8001428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800142c:	e9c1 2300 	strd	r2, r3, [r1]
    PIVarV.Kiv = 0.14;
 8001430:	498a      	ldr	r1, [pc, #552]	@ (800165c <Control_Init+0x2f4>)
 8001432:	a37f      	add	r3, pc, #508	@ (adr r3, 8001630 <Control_Init+0x2c8>)
 8001434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001438:	e9c1 2304 	strd	r2, r3, [r1, #16]
    PIVarV.Tiv = 1.0/PIVarV.Kiv;
 800143c:	4b87      	ldr	r3, [pc, #540]	@ (800165c <Control_Init+0x2f4>)
 800143e:	ed93 6b04 	vldr	d6, [r3, #16]
 8001442:	eeb7 5b00 	vmov.f64	d5, #112	@ 0x3f800000  1.0
 8001446:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800144a:	4b84      	ldr	r3, [pc, #528]	@ (800165c <Control_Init+0x2f4>)
 800144c:	ed83 7b06 	vstr	d7, [r3, #24]
    PIVarV.Dv = 1-PIVarV.Tsv/PIVarV.Tiv;
 8001450:	4b82      	ldr	r3, [pc, #520]	@ (800165c <Control_Init+0x2f4>)
 8001452:	ed93 5b1c 	vldr	d5, [r3, #112]	@ 0x70
 8001456:	4b81      	ldr	r3, [pc, #516]	@ (800165c <Control_Init+0x2f4>)
 8001458:	ed93 6b06 	vldr	d6, [r3, #24]
 800145c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001460:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8001464:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001468:	4b7c      	ldr	r3, [pc, #496]	@ (800165c <Control_Init+0x2f4>)
 800146a:	ed83 7b08 	vstr	d7, [r3, #32]
    PIVarV.uk_1_v = 0; PIVarV.uk_v = 0; PIVarV.usk_1_v = 0;
 800146e:	497b      	ldr	r1, [pc, #492]	@ (800165c <Control_Init+0x2f4>)
 8001470:	f04f 0200 	mov.w	r2, #0
 8001474:	f04f 0300 	mov.w	r3, #0
 8001478:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
 800147c:	4977      	ldr	r1, [pc, #476]	@ (800165c <Control_Init+0x2f4>)
 800147e:	f04f 0200 	mov.w	r2, #0
 8001482:	f04f 0300 	mov.w	r3, #0
 8001486:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
 800148a:	4974      	ldr	r1, [pc, #464]	@ (800165c <Control_Init+0x2f4>)
 800148c:	f04f 0200 	mov.w	r2, #0
 8001490:	f04f 0300 	mov.w	r3, #0
 8001494:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    PIVarV.ek_v = 0; PIVarV.ek_1_v = 0; PIVarV.esk_v = 0; PIVarV.esk_1_v = 0;
 8001498:	4970      	ldr	r1, [pc, #448]	@ (800165c <Control_Init+0x2f4>)
 800149a:	f04f 0200 	mov.w	r2, #0
 800149e:	f04f 0300 	mov.w	r3, #0
 80014a2:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
 80014a6:	496d      	ldr	r1, [pc, #436]	@ (800165c <Control_Init+0x2f4>)
 80014a8:	f04f 0200 	mov.w	r2, #0
 80014ac:	f04f 0300 	mov.w	r3, #0
 80014b0:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
 80014b4:	4969      	ldr	r1, [pc, #420]	@ (800165c <Control_Init+0x2f4>)
 80014b6:	f04f 0200 	mov.w	r2, #0
 80014ba:	f04f 0300 	mov.w	r3, #0
 80014be:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 80014c2:	4966      	ldr	r1, [pc, #408]	@ (800165c <Control_Init+0x2f4>)
 80014c4:	f04f 0200 	mov.w	r2, #0
 80014c8:	f04f 0300 	mov.w	r3, #0
 80014cc:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
    PIVarV.uMax_v = iParas.Vmax; PIVarV.uMin_v = -PIVarV.uMax_v;
 80014d0:	4b5f      	ldr	r3, [pc, #380]	@ (8001650 <Control_Init+0x2e8>)
 80014d2:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80014d6:	4961      	ldr	r1, [pc, #388]	@ (800165c <Control_Init+0x2f4>)
 80014d8:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
 80014dc:	4b5f      	ldr	r3, [pc, #380]	@ (800165c <Control_Init+0x2f4>)
 80014de:	ed93 7b18 	vldr	d7, [r3, #96]	@ 0x60
 80014e2:	eeb1 7b47 	vneg.f64	d7, d7
 80014e6:	4b5d      	ldr	r3, [pc, #372]	@ (800165c <Control_Init+0x2f4>)
 80014e8:	ed83 7b1a 	vstr	d7, [r3, #104]	@ 0x68

    // PI battery current controller
    PIVarIb.Tsb = 10.0/convParas.Fsw;
 80014ec:	4b5a      	ldr	r3, [pc, #360]	@ (8001658 <Control_Init+0x2f0>)
 80014ee:	ed93 6b00 	vldr	d6, [r3]
 80014f2:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 80014f6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80014fa:	4b59      	ldr	r3, [pc, #356]	@ (8001660 <Control_Init+0x2f8>)
 80014fc:	ed83 7b1c 	vstr	d7, [r3, #112]	@ 0x70
    PIVarIb.Kpb = -0.04;
 8001500:	4957      	ldr	r1, [pc, #348]	@ (8001660 <Control_Init+0x2f8>)
 8001502:	a34d      	add	r3, pc, #308	@ (adr r3, 8001638 <Control_Init+0x2d0>)
 8001504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001508:	e9c1 2300 	strd	r2, r3, [r1]
    PIVarIb.Kib = -0.05;
 800150c:	4954      	ldr	r1, [pc, #336]	@ (8001660 <Control_Init+0x2f8>)
 800150e:	a34c      	add	r3, pc, #304	@ (adr r3, 8001640 <Control_Init+0x2d8>)
 8001510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001514:	e9c1 2304 	strd	r2, r3, [r1, #16]
    PIVarIb.Tib = 1.0/PIVarIb.Kib;
 8001518:	4b51      	ldr	r3, [pc, #324]	@ (8001660 <Control_Init+0x2f8>)
 800151a:	ed93 6b04 	vldr	d6, [r3, #16]
 800151e:	eeb7 5b00 	vmov.f64	d5, #112	@ 0x3f800000  1.0
 8001522:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001526:	4b4e      	ldr	r3, [pc, #312]	@ (8001660 <Control_Init+0x2f8>)
 8001528:	ed83 7b06 	vstr	d7, [r3, #24]
    PIVarIb.Db = 1-PIVarIb.Tsb/PIVarIb.Tib;
 800152c:	4b4c      	ldr	r3, [pc, #304]	@ (8001660 <Control_Init+0x2f8>)
 800152e:	ed93 5b1c 	vldr	d5, [r3, #112]	@ 0x70
 8001532:	4b4b      	ldr	r3, [pc, #300]	@ (8001660 <Control_Init+0x2f8>)
 8001534:	ed93 6b06 	vldr	d6, [r3, #24]
 8001538:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800153c:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8001540:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001544:	4b46      	ldr	r3, [pc, #280]	@ (8001660 <Control_Init+0x2f8>)
 8001546:	ed83 7b08 	vstr	d7, [r3, #32]
    PIVarIb.uk_1_b = 0; PIVarIb.uk_b = 0; PIVarIb.usk_1_b = 0;
 800154a:	4945      	ldr	r1, [pc, #276]	@ (8001660 <Control_Init+0x2f8>)
 800154c:	f04f 0200 	mov.w	r2, #0
 8001550:	f04f 0300 	mov.w	r3, #0
 8001554:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
 8001558:	4941      	ldr	r1, [pc, #260]	@ (8001660 <Control_Init+0x2f8>)
 800155a:	f04f 0200 	mov.w	r2, #0
 800155e:	f04f 0300 	mov.w	r3, #0
 8001562:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
 8001566:	493e      	ldr	r1, [pc, #248]	@ (8001660 <Control_Init+0x2f8>)
 8001568:	f04f 0200 	mov.w	r2, #0
 800156c:	f04f 0300 	mov.w	r3, #0
 8001570:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    PIVarIb.ek_b = 0; PIVarIb.ek_1_b = 0; PIVarIb.esk_b = 0; PIVarIb.esk_1_b = 0;
 8001574:	493a      	ldr	r1, [pc, #232]	@ (8001660 <Control_Init+0x2f8>)
 8001576:	f04f 0200 	mov.w	r2, #0
 800157a:	f04f 0300 	mov.w	r3, #0
 800157e:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
 8001582:	4937      	ldr	r1, [pc, #220]	@ (8001660 <Control_Init+0x2f8>)
 8001584:	f04f 0200 	mov.w	r2, #0
 8001588:	f04f 0300 	mov.w	r3, #0
 800158c:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
 8001590:	4933      	ldr	r1, [pc, #204]	@ (8001660 <Control_Init+0x2f8>)
 8001592:	f04f 0200 	mov.w	r2, #0
 8001596:	f04f 0300 	mov.w	r3, #0
 800159a:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 800159e:	4930      	ldr	r1, [pc, #192]	@ (8001660 <Control_Init+0x2f8>)
 80015a0:	f04f 0200 	mov.w	r2, #0
 80015a4:	f04f 0300 	mov.w	r3, #0
 80015a8:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
    PIVarIb.iMax_b = iParas.Imax; PIVarIb.iMin_b = -PIVarIb.iMax_b;
 80015ac:	4b28      	ldr	r3, [pc, #160]	@ (8001650 <Control_Init+0x2e8>)
 80015ae:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80015b2:	492b      	ldr	r1, [pc, #172]	@ (8001660 <Control_Init+0x2f8>)
 80015b4:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
 80015b8:	4b29      	ldr	r3, [pc, #164]	@ (8001660 <Control_Init+0x2f8>)
 80015ba:	ed93 7b18 	vldr	d7, [r3, #96]	@ 0x60
 80015be:	eeb1 7b47 	vneg.f64	d7, d7
 80015c2:	4b27      	ldr	r3, [pc, #156]	@ (8001660 <Control_Init+0x2f8>)
 80015c4:	ed83 7b1a 	vstr	d7, [r3, #104]	@ 0x68

    // PI capacitor current controller
    PIVarIc.Tsc = 10.0/convParas.Fsw;
 80015c8:	4b23      	ldr	r3, [pc, #140]	@ (8001658 <Control_Init+0x2f0>)
 80015ca:	ed93 6b00 	vldr	d6, [r3]
 80015ce:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 80015d2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80015d6:	4b23      	ldr	r3, [pc, #140]	@ (8001664 <Control_Init+0x2fc>)
 80015d8:	ed83 7b1c 	vstr	d7, [r3, #112]	@ 0x70
    PIVarIc.Kpc = 1.33;
 80015dc:	4921      	ldr	r1, [pc, #132]	@ (8001664 <Control_Init+0x2fc>)
 80015de:	a31a      	add	r3, pc, #104	@ (adr r3, 8001648 <Control_Init+0x2e0>)
 80015e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e4:	e9c1 2300 	strd	r2, r3, [r1]
    PIVarIc.Kic = 10474;
 80015e8:	491e      	ldr	r1, [pc, #120]	@ (8001664 <Control_Init+0x2fc>)
 80015ea:	e03d      	b.n	8001668 <Control_Init+0x300>
 80015ec:	f3af 8000 	nop.w
 80015f0:	9999999a 	.word	0x9999999a
 80015f4:	3fb99999 	.word	0x3fb99999
 80015f8:	d2f1a9fc 	.word	0xd2f1a9fc
 80015fc:	3f50624d 	.word	0x3f50624d
 8001600:	eb1c432d 	.word	0xeb1c432d
 8001604:	3f1a36e2 	.word	0x3f1a36e2
 8001608:	eb851eb8 	.word	0xeb851eb8
 800160c:	3f7eb851 	.word	0x3f7eb851
 8001610:	5f6fd220 	.word	0x5f6fd220
 8001614:	3f79ce07 	.word	0x3f79ce07
 8001618:	66666666 	.word	0x66666666
 800161c:	3fe66666 	.word	0x3fe66666
 8001620:	00000000 	.word	0x00000000
 8001624:	41086a00 	.word	0x41086a00
 8001628:	9999999a 	.word	0x9999999a
 800162c:	3fa99999 	.word	0x3fa99999
 8001630:	1eb851ec 	.word	0x1eb851ec
 8001634:	3fc1eb85 	.word	0x3fc1eb85
 8001638:	47ae147b 	.word	0x47ae147b
 800163c:	bfa47ae1 	.word	0xbfa47ae1
 8001640:	9999999a 	.word	0x9999999a
 8001644:	bfa99999 	.word	0xbfa99999
 8001648:	147ae148 	.word	0x147ae148
 800164c:	3ff547ae 	.word	0x3ff547ae
 8001650:	24000610 	.word	0x24000610
 8001654:	403e0000 	.word	0x403e0000
 8001658:	24000688 	.word	0x24000688
 800165c:	240006d0 	.word	0x240006d0
 8001660:	24000748 	.word	0x24000748
 8001664:	240007c0 	.word	0x240007c0
 8001668:	a363      	add	r3, pc, #396	@ (adr r3, 80017f8 <Control_Init+0x490>)
 800166a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800166e:	e9c1 2304 	strd	r2, r3, [r1, #16]
    PIVarIc.Tic = 1.0/PIVarIc.Kic;
 8001672:	4b5b      	ldr	r3, [pc, #364]	@ (80017e0 <Control_Init+0x478>)
 8001674:	ed93 6b04 	vldr	d6, [r3, #16]
 8001678:	eeb7 5b00 	vmov.f64	d5, #112	@ 0x3f800000  1.0
 800167c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001680:	4b57      	ldr	r3, [pc, #348]	@ (80017e0 <Control_Init+0x478>)
 8001682:	ed83 7b06 	vstr	d7, [r3, #24]
    PIVarIc.Dc = 1-PIVarIc.Tsc/PIVarIc.Tic;
 8001686:	4b56      	ldr	r3, [pc, #344]	@ (80017e0 <Control_Init+0x478>)
 8001688:	ed93 5b1c 	vldr	d5, [r3, #112]	@ 0x70
 800168c:	4b54      	ldr	r3, [pc, #336]	@ (80017e0 <Control_Init+0x478>)
 800168e:	ed93 6b06 	vldr	d6, [r3, #24]
 8001692:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001696:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800169a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800169e:	4b50      	ldr	r3, [pc, #320]	@ (80017e0 <Control_Init+0x478>)
 80016a0:	ed83 7b08 	vstr	d7, [r3, #32]
    PIVarIc.uk_1_c = 0; PIVarIc.uk_c = 0; PIVarIc.usk_1_c = 0;
 80016a4:	494e      	ldr	r1, [pc, #312]	@ (80017e0 <Control_Init+0x478>)
 80016a6:	f04f 0200 	mov.w	r2, #0
 80016aa:	f04f 0300 	mov.w	r3, #0
 80016ae:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
 80016b2:	494b      	ldr	r1, [pc, #300]	@ (80017e0 <Control_Init+0x478>)
 80016b4:	f04f 0200 	mov.w	r2, #0
 80016b8:	f04f 0300 	mov.w	r3, #0
 80016bc:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
 80016c0:	4947      	ldr	r1, [pc, #284]	@ (80017e0 <Control_Init+0x478>)
 80016c2:	f04f 0200 	mov.w	r2, #0
 80016c6:	f04f 0300 	mov.w	r3, #0
 80016ca:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    PIVarIc.ek_c = 0; PIVarIc.ek_1_c = 0; PIVarIc.esk_c = 0; PIVarIc.esk_1_c = 0;
 80016ce:	4944      	ldr	r1, [pc, #272]	@ (80017e0 <Control_Init+0x478>)
 80016d0:	f04f 0200 	mov.w	r2, #0
 80016d4:	f04f 0300 	mov.w	r3, #0
 80016d8:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
 80016dc:	4940      	ldr	r1, [pc, #256]	@ (80017e0 <Control_Init+0x478>)
 80016de:	f04f 0200 	mov.w	r2, #0
 80016e2:	f04f 0300 	mov.w	r3, #0
 80016e6:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
 80016ea:	493d      	ldr	r1, [pc, #244]	@ (80017e0 <Control_Init+0x478>)
 80016ec:	f04f 0200 	mov.w	r2, #0
 80016f0:	f04f 0300 	mov.w	r3, #0
 80016f4:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 80016f8:	4939      	ldr	r1, [pc, #228]	@ (80017e0 <Control_Init+0x478>)
 80016fa:	f04f 0200 	mov.w	r2, #0
 80016fe:	f04f 0300 	mov.w	r3, #0
 8001702:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
    PIVarIc.iMax_c = iParas.Imax; PIVarIc.iMin_c = -PIVarIc.iMax_c;
 8001706:	4b37      	ldr	r3, [pc, #220]	@ (80017e4 <Control_Init+0x47c>)
 8001708:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800170c:	4934      	ldr	r1, [pc, #208]	@ (80017e0 <Control_Init+0x478>)
 800170e:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
 8001712:	4b33      	ldr	r3, [pc, #204]	@ (80017e0 <Control_Init+0x478>)
 8001714:	ed93 7b18 	vldr	d7, [r3, #96]	@ 0x60
 8001718:	eeb1 7b47 	vneg.f64	d7, d7
 800171c:	4b30      	ldr	r3, [pc, #192]	@ (80017e0 <Control_Init+0x478>)
 800171e:	ed83 7b1a 	vstr	d7, [r3, #104]	@ 0x68

    // Low pass filter
    LP.tau = 10000;
 8001722:	4931      	ldr	r1, [pc, #196]	@ (80017e8 <Control_Init+0x480>)
 8001724:	a328      	add	r3, pc, #160	@ (adr r3, 80017c8 <Control_Init+0x460>)
 8001726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800172a:	e9c1 2300 	strd	r2, r3, [r1]
    LP.T = 10e-3;       // Replaced 10*pow(10,-3)
 800172e:	492e      	ldr	r1, [pc, #184]	@ (80017e8 <Control_Init+0x480>)
 8001730:	a327      	add	r3, pc, #156	@ (adr r3, 80017d0 <Control_Init+0x468>)
 8001732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001736:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    LP.ek_lp = 0; LP.ek_1_lp = 0;
 800173a:	492b      	ldr	r1, [pc, #172]	@ (80017e8 <Control_Init+0x480>)
 800173c:	f04f 0200 	mov.w	r2, #0
 8001740:	f04f 0300 	mov.w	r3, #0
 8001744:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8001748:	4927      	ldr	r1, [pc, #156]	@ (80017e8 <Control_Init+0x480>)
 800174a:	f04f 0200 	mov.w	r2, #0
 800174e:	f04f 0300 	mov.w	r3, #0
 8001752:	e9c1 2304 	strd	r2, r3, [r1, #16]
    LP.uk_lp = 0; LP.uk_1_lp = 0;
 8001756:	4924      	ldr	r1, [pc, #144]	@ (80017e8 <Control_Init+0x480>)
 8001758:	f04f 0200 	mov.w	r2, #0
 800175c:	f04f 0300 	mov.w	r3, #0
 8001760:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8001764:	4920      	ldr	r1, [pc, #128]	@ (80017e8 <Control_Init+0x480>)
 8001766:	f04f 0200 	mov.w	r2, #0
 800176a:	f04f 0300 	mov.w	r3, #0
 800176e:	e9c1 2308 	strd	r2, r3, [r1, #32]

    // Rate limit
    RL.count = 200000-1;
 8001772:	4b1e      	ldr	r3, [pc, #120]	@ (80017ec <Control_Init+0x484>)
 8001774:	4a1e      	ldr	r2, [pc, #120]	@ (80017f0 <Control_Init+0x488>)
 8001776:	619a      	str	r2, [r3, #24]
    RL.v = 20000;
 8001778:	4b1c      	ldr	r3, [pc, #112]	@ (80017ec <Control_Init+0x484>)
 800177a:	f644 6220 	movw	r2, #20000	@ 0x4e20
 800177e:	61da      	str	r2, [r3, #28]
    RL.bf1 = 0;
 8001780:	491a      	ldr	r1, [pc, #104]	@ (80017ec <Control_Init+0x484>)
 8001782:	f04f 0200 	mov.w	r2, #0
 8001786:	f04f 0300 	mov.w	r3, #0
 800178a:	e9c1 2300 	strd	r2, r3, [r1]
    RL.bf2 = 0;
 800178e:	4917      	ldr	r1, [pc, #92]	@ (80017ec <Control_Init+0x484>)
 8001790:	f04f 0200 	mov.w	r2, #0
 8001794:	f04f 0300 	mov.w	r3, #0
 8001798:	e9c1 2302 	strd	r2, r3, [r1, #8]
    RL.bf3 = 0;
 800179c:	4913      	ldr	r1, [pc, #76]	@ (80017ec <Control_Init+0x484>)
 800179e:	f04f 0200 	mov.w	r2, #0
 80017a2:	f04f 0300 	mov.w	r3, #0
 80017a6:	e9c1 2304 	strd	r2, r3, [r1, #16]


    //lowpass
    LP.T = 5e-7;
 80017aa:	490f      	ldr	r1, [pc, #60]	@ (80017e8 <Control_Init+0x480>)
 80017ac:	a30a      	add	r3, pc, #40	@ (adr r3, 80017d8 <Control_Init+0x470>)
 80017ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b2:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    //system state
    sysState = TU_0_DEN_12V;
 80017b6:	4b0f      	ldr	r3, [pc, #60]	@ (80017f4 <Control_Init+0x48c>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	701a      	strb	r2, [r3, #0]
}
 80017bc:	bf00      	nop
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	00000000 	.word	0x00000000
 80017cc:	40c38800 	.word	0x40c38800
 80017d0:	47ae147b 	.word	0x47ae147b
 80017d4:	3f847ae1 	.word	0x3f847ae1
 80017d8:	a0b5ed8d 	.word	0xa0b5ed8d
 80017dc:	3ea0c6f7 	.word	0x3ea0c6f7
 80017e0:	240007c0 	.word	0x240007c0
 80017e4:	24000610 	.word	0x24000610
 80017e8:	240006a0 	.word	0x240006a0
 80017ec:	24000838 	.word	0x24000838
 80017f0:	00030d3f 	.word	0x00030d3f
 80017f4:	24000858 	.word	0x24000858
 80017f8:	00000000 	.word	0x00000000
 80017fc:	40c47500 	.word	0x40c47500

08001800 <Control_Update>:

void Control_Update(double V_CB, double V_Bat, double Vref, double Ib,double Ic,
                    double* D,double* Dc, double* uk_V, double* uk_Ib,double* uk_Ic,
                   double* I_SPb,double* I_SPc, double* Count, double* bf1,
                   double* bf2, double* bf3) {
 8001800:	b580      	push	{r7, lr}
 8001802:	b08e      	sub	sp, #56	@ 0x38
 8001804:	af00      	add	r7, sp, #0
 8001806:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30
 800180a:	ed87 1b0a 	vstr	d1, [r7, #40]	@ 0x28
 800180e:	ed87 2b08 	vstr	d2, [r7, #32]
 8001812:	ed87 3b06 	vstr	d3, [r7, #24]
 8001816:	ed87 4b04 	vstr	d4, [r7, #16]
 800181a:	60f8      	str	r0, [r7, #12]
 800181c:	60b9      	str	r1, [r7, #8]
 800181e:	607a      	str	r2, [r7, #4]
 8001820:	603b      	str	r3, [r7, #0]

    switch(sysState) {
 8001822:	4b17      	ldr	r3, [pc, #92]	@ (8001880 <Control_Update+0x80>)
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d002      	beq.n	8001830 <Control_Update+0x30>
 800182a:	2b01      	cmp	r3, #1
 800182c:	d017      	beq.n	800185e <Control_Update+0x5e>
//
//        	break;

    }

}
 800182e:	e01c      	b.n	800186a <Control_Update+0x6a>
            if (V_CB < 11.0) {
 8001830:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8001834:	eeb2 6b06 	vmov.f64	d6, #38	@ 0x41300000  11.0
 8001838:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800183c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001840:	d506      	bpl.n	8001850 <Control_Update+0x50>
                *D = 0.95;  // Full duty cycle if voltage too low
 8001842:	68f9      	ldr	r1, [r7, #12]
 8001844:	a30c      	add	r3, pc, #48	@ (adr r3, 8001878 <Control_Update+0x78>)
 8001846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800184a:	e9c1 2300 	strd	r2, r3, [r1]
            break;
 800184e:	e00c      	b.n	800186a <Control_Update+0x6a>
            	HAL_Delay(5);
 8001850:	2005      	movs	r0, #5
 8001852:	f000 fe19 	bl	8002488 <HAL_Delay>
            	sysState = TU_12_DEN_24V;
 8001856:	4b0a      	ldr	r3, [pc, #40]	@ (8001880 <Control_Update+0x80>)
 8001858:	2201      	movs	r2, #1
 800185a:	701a      	strb	r2, [r3, #0]
            break;
 800185c:	e005      	b.n	800186a <Control_Update+0x6a>
        	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, 0);
 800185e:	2200      	movs	r2, #0
 8001860:	2101      	movs	r1, #1
 8001862:	4808      	ldr	r0, [pc, #32]	@ (8001884 <Control_Update+0x84>)
 8001864:	f005 faa0 	bl	8006da8 <HAL_GPIO_WritePin>
            break;
 8001868:	bf00      	nop
}
 800186a:	bf00      	nop
 800186c:	3738      	adds	r7, #56	@ 0x38
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	f3af 8000 	nop.w
 8001878:	66666666 	.word	0x66666666
 800187c:	3fee6666 	.word	0x3fee6666
 8001880:	24000858 	.word	0x24000858
 8001884:	58021000 	.word	0x58021000

08001888 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800188e:	4b0a      	ldr	r3, [pc, #40]	@ (80018b8 <HAL_MspInit+0x30>)
 8001890:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001894:	4a08      	ldr	r2, [pc, #32]	@ (80018b8 <HAL_MspInit+0x30>)
 8001896:	f043 0302 	orr.w	r3, r3, #2
 800189a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800189e:	4b06      	ldr	r3, [pc, #24]	@ (80018b8 <HAL_MspInit+0x30>)
 80018a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80018a4:	f003 0302 	and.w	r3, r3, #2
 80018a8:	607b      	str	r3, [r7, #4]
 80018aa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018ac:	bf00      	nop
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr
 80018b8:	58024400 	.word	0x58024400

080018bc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b0bc      	sub	sp, #240	@ 0xf0
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	605a      	str	r2, [r3, #4]
 80018ce:	609a      	str	r2, [r3, #8]
 80018d0:	60da      	str	r2, [r3, #12]
 80018d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018d4:	f107 0318 	add.w	r3, r7, #24
 80018d8:	22c0      	movs	r2, #192	@ 0xc0
 80018da:	2100      	movs	r1, #0
 80018dc:	4618      	mov	r0, r3
 80018de:	f00c fd24 	bl	800e32a <memset>
  if(hadc->Instance==ADC1)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a52      	ldr	r2, [pc, #328]	@ (8001a30 <HAL_ADC_MspInit+0x174>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	f040 809d 	bne.w	8001a28 <HAL_ADC_MspInit+0x16c>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80018ee:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80018f2:	f04f 0300 	mov.w	r3, #0
 80018f6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 80018fa:	2304      	movs	r3, #4
 80018fc:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 10;
 80018fe:	230a      	movs	r3, #10
 8001900:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001902:	2302      	movs	r3, #2
 8001904:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001906:	2302      	movs	r3, #2
 8001908:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 800190a:	2302      	movs	r3, #2
 800190c:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800190e:	23c0      	movs	r3, #192	@ 0xc0
 8001910:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001912:	2320      	movs	r3, #32
 8001914:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001916:	2300      	movs	r3, #0
 8001918:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800191a:	2300      	movs	r3, #0
 800191c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001920:	f107 0318 	add.w	r3, r7, #24
 8001924:	4618      	mov	r0, r3
 8001926:	f006 fbad 	bl	8008084 <HAL_RCCEx_PeriphCLKConfig>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 8001930:	f7ff fc0a 	bl	8001148 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001934:	4b3f      	ldr	r3, [pc, #252]	@ (8001a34 <HAL_ADC_MspInit+0x178>)
 8001936:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800193a:	4a3e      	ldr	r2, [pc, #248]	@ (8001a34 <HAL_ADC_MspInit+0x178>)
 800193c:	f043 0320 	orr.w	r3, r3, #32
 8001940:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001944:	4b3b      	ldr	r3, [pc, #236]	@ (8001a34 <HAL_ADC_MspInit+0x178>)
 8001946:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800194a:	f003 0320 	and.w	r3, r3, #32
 800194e:	617b      	str	r3, [r7, #20]
 8001950:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001952:	4b38      	ldr	r3, [pc, #224]	@ (8001a34 <HAL_ADC_MspInit+0x178>)
 8001954:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001958:	4a36      	ldr	r2, [pc, #216]	@ (8001a34 <HAL_ADC_MspInit+0x178>)
 800195a:	f043 0301 	orr.w	r3, r3, #1
 800195e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001962:	4b34      	ldr	r3, [pc, #208]	@ (8001a34 <HAL_ADC_MspInit+0x178>)
 8001964:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001968:	f003 0301 	and.w	r3, r3, #1
 800196c:	613b      	str	r3, [r7, #16]
 800196e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001970:	4b30      	ldr	r3, [pc, #192]	@ (8001a34 <HAL_ADC_MspInit+0x178>)
 8001972:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001976:	4a2f      	ldr	r2, [pc, #188]	@ (8001a34 <HAL_ADC_MspInit+0x178>)
 8001978:	f043 0304 	orr.w	r3, r3, #4
 800197c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001980:	4b2c      	ldr	r3, [pc, #176]	@ (8001a34 <HAL_ADC_MspInit+0x178>)
 8001982:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001986:	f003 0304 	and.w	r3, r3, #4
 800198a:	60fb      	str	r3, [r7, #12]
 800198c:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_INP18
    PA7     ------> ADC1_INP7
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|adc1_channel_7_isense_Pin;
 800198e:	2390      	movs	r3, #144	@ 0x90
 8001990:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001994:	2303      	movs	r3, #3
 8001996:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199a:	2300      	movs	r3, #0
 800199c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80019a4:	4619      	mov	r1, r3
 80019a6:	4824      	ldr	r0, [pc, #144]	@ (8001a38 <HAL_ADC_MspInit+0x17c>)
 80019a8:	f005 f84e 	bl	8006a48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = adc1_channel_4_voutsense_Pin|adc1_channel_8_vinsense_Pin;
 80019ac:	2330      	movs	r3, #48	@ 0x30
 80019ae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019b2:	2303      	movs	r3, #3
 80019b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b8:	2300      	movs	r3, #0
 80019ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019be:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80019c2:	4619      	mov	r1, r3
 80019c4:	481d      	ldr	r0, [pc, #116]	@ (8001a3c <HAL_ADC_MspInit+0x180>)
 80019c6:	f005 f83f 	bl	8006a48 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 80019ca:	4b1d      	ldr	r3, [pc, #116]	@ (8001a40 <HAL_ADC_MspInit+0x184>)
 80019cc:	4a1d      	ldr	r2, [pc, #116]	@ (8001a44 <HAL_ADC_MspInit+0x188>)
 80019ce:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80019d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001a40 <HAL_ADC_MspInit+0x184>)
 80019d2:	2209      	movs	r2, #9
 80019d4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001a40 <HAL_ADC_MspInit+0x184>)
 80019d8:	2200      	movs	r2, #0
 80019da:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80019dc:	4b18      	ldr	r3, [pc, #96]	@ (8001a40 <HAL_ADC_MspInit+0x184>)
 80019de:	2200      	movs	r2, #0
 80019e0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80019e2:	4b17      	ldr	r3, [pc, #92]	@ (8001a40 <HAL_ADC_MspInit+0x184>)
 80019e4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80019e8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80019ea:	4b15      	ldr	r3, [pc, #84]	@ (8001a40 <HAL_ADC_MspInit+0x184>)
 80019ec:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80019f0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80019f2:	4b13      	ldr	r3, [pc, #76]	@ (8001a40 <HAL_ADC_MspInit+0x184>)
 80019f4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019f8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80019fa:	4b11      	ldr	r3, [pc, #68]	@ (8001a40 <HAL_ADC_MspInit+0x184>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001a00:	4b0f      	ldr	r3, [pc, #60]	@ (8001a40 <HAL_ADC_MspInit+0x184>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a06:	4b0e      	ldr	r3, [pc, #56]	@ (8001a40 <HAL_ADC_MspInit+0x184>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001a0c:	480c      	ldr	r0, [pc, #48]	@ (8001a40 <HAL_ADC_MspInit+0x184>)
 8001a0e:	f002 f9df 	bl	8003dd0 <HAL_DMA_Init>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <HAL_ADC_MspInit+0x160>
    {
      Error_Handler();
 8001a18:	f7ff fb96 	bl	8001148 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	4a08      	ldr	r2, [pc, #32]	@ (8001a40 <HAL_ADC_MspInit+0x184>)
 8001a20:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001a22:	4a07      	ldr	r2, [pc, #28]	@ (8001a40 <HAL_ADC_MspInit+0x184>)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001a28:	bf00      	nop
 8001a2a:	37f0      	adds	r7, #240	@ 0xf0
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	40022000 	.word	0x40022000
 8001a34:	58024400 	.word	0x58024400
 8001a38:	58020000 	.word	0x58020000
 8001a3c:	58020800 	.word	0x58020800
 8001a40:	24000284 	.word	0x24000284
 8001a44:	40020010 	.word	0x40020010

08001a48 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b0ba      	sub	sp, #232	@ 0xe8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a50:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	605a      	str	r2, [r3, #4]
 8001a5a:	609a      	str	r2, [r3, #8]
 8001a5c:	60da      	str	r2, [r3, #12]
 8001a5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a60:	f107 0310 	add.w	r3, r7, #16
 8001a64:	22c0      	movs	r2, #192	@ 0xc0
 8001a66:	2100      	movs	r1, #0
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f00c fc5e 	bl	800e32a <memset>
  if(hi2c->Instance==I2C1)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a26      	ldr	r2, [pc, #152]	@ (8001b0c <HAL_I2C_MspInit+0xc4>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d145      	bne.n	8001b04 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001a78:	f04f 0208 	mov.w	r2, #8
 8001a7c:	f04f 0300 	mov.w	r3, #0
 8001a80:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001a84:	2300      	movs	r3, #0
 8001a86:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a8a:	f107 0310 	add.w	r3, r7, #16
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f006 faf8 	bl	8008084 <HAL_RCCEx_PeriphCLKConfig>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001a9a:	f7ff fb55 	bl	8001148 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a9e:	4b1c      	ldr	r3, [pc, #112]	@ (8001b10 <HAL_I2C_MspInit+0xc8>)
 8001aa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001aa4:	4a1a      	ldr	r2, [pc, #104]	@ (8001b10 <HAL_I2C_MspInit+0xc8>)
 8001aa6:	f043 0302 	orr.w	r3, r3, #2
 8001aaa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001aae:	4b18      	ldr	r3, [pc, #96]	@ (8001b10 <HAL_I2C_MspInit+0xc8>)
 8001ab0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ab4:	f003 0302 	and.w	r3, r3, #2
 8001ab8:	60fb      	str	r3, [r7, #12]
 8001aba:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001abc:	23c0      	movs	r3, #192	@ 0xc0
 8001abe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ac2:	2312      	movs	r3, #18
 8001ac4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ad4:	2304      	movs	r3, #4
 8001ad6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ada:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001ade:	4619      	mov	r1, r3
 8001ae0:	480c      	ldr	r0, [pc, #48]	@ (8001b14 <HAL_I2C_MspInit+0xcc>)
 8001ae2:	f004 ffb1 	bl	8006a48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ae6:	4b0a      	ldr	r3, [pc, #40]	@ (8001b10 <HAL_I2C_MspInit+0xc8>)
 8001ae8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001aec:	4a08      	ldr	r2, [pc, #32]	@ (8001b10 <HAL_I2C_MspInit+0xc8>)
 8001aee:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001af2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001af6:	4b06      	ldr	r3, [pc, #24]	@ (8001b10 <HAL_I2C_MspInit+0xc8>)
 8001af8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001afc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b00:	60bb      	str	r3, [r7, #8]
 8001b02:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001b04:	bf00      	nop
 8001b06:	37e8      	adds	r7, #232	@ 0xe8
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	40005400 	.word	0x40005400
 8001b10:	58024400 	.word	0x58024400
 8001b14:	58020400 	.word	0x58020400

08001b18 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b0ba      	sub	sp, #232	@ 0xe8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b20:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001b24:	2200      	movs	r2, #0
 8001b26:	601a      	str	r2, [r3, #0]
 8001b28:	605a      	str	r2, [r3, #4]
 8001b2a:	609a      	str	r2, [r3, #8]
 8001b2c:	60da      	str	r2, [r3, #12]
 8001b2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b30:	f107 0310 	add.w	r3, r7, #16
 8001b34:	22c0      	movs	r2, #192	@ 0xc0
 8001b36:	2100      	movs	r1, #0
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f00c fbf6 	bl	800e32a <memset>
  if(hspi->Instance==SPI3)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a2a      	ldr	r2, [pc, #168]	@ (8001bec <HAL_SPI_MspInit+0xd4>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d14d      	bne.n	8001be4 <HAL_SPI_MspInit+0xcc>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8001b48:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001b4c:	f04f 0300 	mov.w	r3, #0
 8001b50:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001b54:	2300      	movs	r3, #0
 8001b56:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b58:	f107 0310 	add.w	r3, r7, #16
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f006 fa91 	bl	8008084 <HAL_RCCEx_PeriphCLKConfig>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8001b68:	f7ff faee 	bl	8001148 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001b6c:	4b20      	ldr	r3, [pc, #128]	@ (8001bf0 <HAL_SPI_MspInit+0xd8>)
 8001b6e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001b72:	4a1f      	ldr	r2, [pc, #124]	@ (8001bf0 <HAL_SPI_MspInit+0xd8>)
 8001b74:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b78:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001b7c:	4b1c      	ldr	r3, [pc, #112]	@ (8001bf0 <HAL_SPI_MspInit+0xd8>)
 8001b7e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001b82:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001b86:	60fb      	str	r3, [r7, #12]
 8001b88:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b8a:	4b19      	ldr	r3, [pc, #100]	@ (8001bf0 <HAL_SPI_MspInit+0xd8>)
 8001b8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b90:	4a17      	ldr	r2, [pc, #92]	@ (8001bf0 <HAL_SPI_MspInit+0xd8>)
 8001b92:	f043 0304 	orr.w	r3, r3, #4
 8001b96:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b9a:	4b15      	ldr	r3, [pc, #84]	@ (8001bf0 <HAL_SPI_MspInit+0xd8>)
 8001b9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ba0:	f003 0304 	and.w	r3, r3, #4
 8001ba4:	60bb      	str	r3, [r7, #8]
 8001ba6:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001ba8:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001bac:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001bc2:	2306      	movs	r3, #6
 8001bc4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bc8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001bcc:	4619      	mov	r1, r3
 8001bce:	4809      	ldr	r0, [pc, #36]	@ (8001bf4 <HAL_SPI_MspInit+0xdc>)
 8001bd0:	f004 ff3a 	bl	8006a48 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	2100      	movs	r1, #0
 8001bd8:	2033      	movs	r0, #51	@ 0x33
 8001bda:	f002 f84c 	bl	8003c76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8001bde:	2033      	movs	r0, #51	@ 0x33
 8001be0:	f002 f863 	bl	8003caa <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001be4:	bf00      	nop
 8001be6:	37e8      	adds	r7, #232	@ 0xe8
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	40003c00 	.word	0x40003c00
 8001bf0:	58024400 	.word	0x58024400
 8001bf4:	58020800 	.word	0x58020800

08001bf8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a19      	ldr	r2, [pc, #100]	@ (8001c6c <HAL_TIM_Base_MspInit+0x74>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d10f      	bne.n	8001c2a <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c0a:	4b19      	ldr	r3, [pc, #100]	@ (8001c70 <HAL_TIM_Base_MspInit+0x78>)
 8001c0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001c10:	4a17      	ldr	r2, [pc, #92]	@ (8001c70 <HAL_TIM_Base_MspInit+0x78>)
 8001c12:	f043 0301 	orr.w	r3, r3, #1
 8001c16:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001c1a:	4b15      	ldr	r3, [pc, #84]	@ (8001c70 <HAL_TIM_Base_MspInit+0x78>)
 8001c1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001c20:	f003 0301 	and.w	r3, r3, #1
 8001c24:	60fb      	str	r3, [r7, #12]
 8001c26:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001c28:	e01b      	b.n	8001c62 <HAL_TIM_Base_MspInit+0x6a>
  else if(htim_base->Instance==TIM4)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a11      	ldr	r2, [pc, #68]	@ (8001c74 <HAL_TIM_Base_MspInit+0x7c>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d116      	bne.n	8001c62 <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c34:	4b0e      	ldr	r3, [pc, #56]	@ (8001c70 <HAL_TIM_Base_MspInit+0x78>)
 8001c36:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c3a:	4a0d      	ldr	r2, [pc, #52]	@ (8001c70 <HAL_TIM_Base_MspInit+0x78>)
 8001c3c:	f043 0304 	orr.w	r3, r3, #4
 8001c40:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001c44:	4b0a      	ldr	r3, [pc, #40]	@ (8001c70 <HAL_TIM_Base_MspInit+0x78>)
 8001c46:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c4a:	f003 0304 	and.w	r3, r3, #4
 8001c4e:	60bb      	str	r3, [r7, #8]
 8001c50:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001c52:	2200      	movs	r2, #0
 8001c54:	2100      	movs	r1, #0
 8001c56:	201e      	movs	r0, #30
 8001c58:	f002 f80d 	bl	8003c76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001c5c:	201e      	movs	r0, #30
 8001c5e:	f002 f824 	bl	8003caa <HAL_NVIC_EnableIRQ>
}
 8001c62:	bf00      	nop
 8001c64:	3710      	adds	r7, #16
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	40010000 	.word	0x40010000
 8001c70:	58024400 	.word	0x58024400
 8001c74:	40000800 	.word	0x40000800

08001c78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b0bc      	sub	sp, #240	@ 0xf0
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c80:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]
 8001c88:	605a      	str	r2, [r3, #4]
 8001c8a:	609a      	str	r2, [r3, #8]
 8001c8c:	60da      	str	r2, [r3, #12]
 8001c8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c90:	f107 0318 	add.w	r3, r7, #24
 8001c94:	22c0      	movs	r2, #192	@ 0xc0
 8001c96:	2100      	movs	r1, #0
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f00c fb46 	bl	800e32a <memset>
  if(huart->Instance==UART7)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a50      	ldr	r2, [pc, #320]	@ (8001de4 <HAL_UART_MspInit+0x16c>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d146      	bne.n	8001d36 <HAL_UART_MspInit+0xbe>

  /* USER CODE END UART7_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8001ca8:	f04f 0202 	mov.w	r2, #2
 8001cac:	f04f 0300 	mov.w	r3, #0
 8001cb0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cba:	f107 0318 	add.w	r3, r7, #24
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f006 f9e0 	bl	8008084 <HAL_RCCEx_PeriphCLKConfig>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001cca:	f7ff fa3d 	bl	8001148 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8001cce:	4b46      	ldr	r3, [pc, #280]	@ (8001de8 <HAL_UART_MspInit+0x170>)
 8001cd0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001cd4:	4a44      	ldr	r2, [pc, #272]	@ (8001de8 <HAL_UART_MspInit+0x170>)
 8001cd6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001cda:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001cde:	4b42      	ldr	r3, [pc, #264]	@ (8001de8 <HAL_UART_MspInit+0x170>)
 8001ce0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ce4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001ce8:	617b      	str	r3, [r7, #20]
 8001cea:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cec:	4b3e      	ldr	r3, [pc, #248]	@ (8001de8 <HAL_UART_MspInit+0x170>)
 8001cee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cf2:	4a3d      	ldr	r2, [pc, #244]	@ (8001de8 <HAL_UART_MspInit+0x170>)
 8001cf4:	f043 0302 	orr.w	r3, r3, #2
 8001cf8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001cfc:	4b3a      	ldr	r3, [pc, #232]	@ (8001de8 <HAL_UART_MspInit+0x170>)
 8001cfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	613b      	str	r3, [r7, #16]
 8001d08:	693b      	ldr	r3, [r7, #16]
    /**UART7 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> UART7_RX
    PB4 (NJTRST)     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001d0a:	2318      	movs	r3, #24
 8001d0c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d10:	2302      	movs	r3, #2
 8001d12:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d16:	2300      	movs	r3, #0
 8001d18:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF11_UART7;
 8001d22:	230b      	movs	r3, #11
 8001d24:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d28:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	482f      	ldr	r0, [pc, #188]	@ (8001dec <HAL_UART_MspInit+0x174>)
 8001d30:	f004 fe8a 	bl	8006a48 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001d34:	e052      	b.n	8001ddc <HAL_UART_MspInit+0x164>
  else if(huart->Instance==USART2)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a2d      	ldr	r2, [pc, #180]	@ (8001df0 <HAL_UART_MspInit+0x178>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d14d      	bne.n	8001ddc <HAL_UART_MspInit+0x164>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001d40:	f04f 0202 	mov.w	r2, #2
 8001d44:	f04f 0300 	mov.w	r3, #0
 8001d48:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d52:	f107 0318 	add.w	r3, r7, #24
 8001d56:	4618      	mov	r0, r3
 8001d58:	f006 f994 	bl	8008084 <HAL_RCCEx_PeriphCLKConfig>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <HAL_UART_MspInit+0xee>
      Error_Handler();
 8001d62:	f7ff f9f1 	bl	8001148 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d66:	4b20      	ldr	r3, [pc, #128]	@ (8001de8 <HAL_UART_MspInit+0x170>)
 8001d68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001d6c:	4a1e      	ldr	r2, [pc, #120]	@ (8001de8 <HAL_UART_MspInit+0x170>)
 8001d6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d72:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001d76:	4b1c      	ldr	r3, [pc, #112]	@ (8001de8 <HAL_UART_MspInit+0x170>)
 8001d78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001d7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d80:	60fb      	str	r3, [r7, #12]
 8001d82:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d84:	4b18      	ldr	r3, [pc, #96]	@ (8001de8 <HAL_UART_MspInit+0x170>)
 8001d86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d8a:	4a17      	ldr	r2, [pc, #92]	@ (8001de8 <HAL_UART_MspInit+0x170>)
 8001d8c:	f043 0308 	orr.w	r3, r3, #8
 8001d90:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d94:	4b14      	ldr	r3, [pc, #80]	@ (8001de8 <HAL_UART_MspInit+0x170>)
 8001d96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d9a:	f003 0308 	and.w	r3, r3, #8
 8001d9e:	60bb      	str	r3, [r7, #8]
 8001da0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MODBUS_TX2_Pin|MODBUS_RX2_Pin;
 8001da2:	2360      	movs	r3, #96	@ 0x60
 8001da4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da8:	2302      	movs	r3, #2
 8001daa:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dae:	2300      	movs	r3, #0
 8001db0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db4:	2300      	movs	r3, #0
 8001db6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001dba:	2307      	movs	r3, #7
 8001dbc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001dc0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	480b      	ldr	r0, [pc, #44]	@ (8001df4 <HAL_UART_MspInit+0x17c>)
 8001dc8:	f004 fe3e 	bl	8006a48 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001dcc:	2200      	movs	r2, #0
 8001dce:	2100      	movs	r1, #0
 8001dd0:	2026      	movs	r0, #38	@ 0x26
 8001dd2:	f001 ff50 	bl	8003c76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001dd6:	2026      	movs	r0, #38	@ 0x26
 8001dd8:	f001 ff67 	bl	8003caa <HAL_NVIC_EnableIRQ>
}
 8001ddc:	bf00      	nop
 8001dde:	37f0      	adds	r7, #240	@ 0xf0
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	40007800 	.word	0x40007800
 8001de8:	58024400 	.word	0x58024400
 8001dec:	58020400 	.word	0x58020400
 8001df0:	40004400 	.word	0x40004400
 8001df4:	58020c00 	.word	0x58020c00

08001df8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001dfc:	bf00      	nop
 8001dfe:	e7fd      	b.n	8001dfc <NMI_Handler+0x4>

08001e00 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e04:	bf00      	nop
 8001e06:	e7fd      	b.n	8001e04 <HardFault_Handler+0x4>

08001e08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e0c:	bf00      	nop
 8001e0e:	e7fd      	b.n	8001e0c <MemManage_Handler+0x4>

08001e10 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e14:	bf00      	nop
 8001e16:	e7fd      	b.n	8001e14 <BusFault_Handler+0x4>

08001e18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e1c:	bf00      	nop
 8001e1e:	e7fd      	b.n	8001e1c <UsageFault_Handler+0x4>

08001e20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e24:	bf00      	nop
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr

08001e2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e2e:	b480      	push	{r7}
 8001e30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e32:	bf00      	nop
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e40:	bf00      	nop
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr

08001e4a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e4e:	f000 fafb 	bl	8002448 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e52:	bf00      	nop
 8001e54:	bd80      	pop	{r7, pc}
	...

08001e58 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001e5c:	4802      	ldr	r0, [pc, #8]	@ (8001e68 <DMA1_Stream0_IRQHandler+0x10>)
 8001e5e:	f003 fae1 	bl	8005424 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001e62:	bf00      	nop
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	24000284 	.word	0x24000284

08001e6c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001e70:	4802      	ldr	r0, [pc, #8]	@ (8001e7c <TIM4_IRQHandler+0x10>)
 8001e72:	f009 fb3d 	bl	800b4f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001e76:	bf00      	nop
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	24000424 	.word	0x24000424

08001e80 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001e84:	4802      	ldr	r0, [pc, #8]	@ (8001e90 <USART2_IRQHandler+0x10>)
 8001e86:	f00a f829 	bl	800bedc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001e8a:	bf00      	nop
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	24000504 	.word	0x24000504

08001e94 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8001e98:	4802      	ldr	r0, [pc, #8]	@ (8001ea4 <SPI3_IRQHandler+0x10>)
 8001e9a:	f008 ff15 	bl	800acc8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8001e9e:	bf00      	nop
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	24000350 	.word	0x24000350

08001ea8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  return 1;
 8001eac:	2301      	movs	r3, #1
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <_kill>:

int _kill(int pid, int sig)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ec2:	f00c fa85 	bl	800e3d0 <__errno>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2216      	movs	r2, #22
 8001eca:	601a      	str	r2, [r3, #0]
  return -1;
 8001ecc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3708      	adds	r7, #8
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}

08001ed8 <_exit>:

void _exit (int status)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ee0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f7ff ffe7 	bl	8001eb8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001eea:	bf00      	nop
 8001eec:	e7fd      	b.n	8001eea <_exit+0x12>

08001eee <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	b086      	sub	sp, #24
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	60f8      	str	r0, [r7, #12]
 8001ef6:	60b9      	str	r1, [r7, #8]
 8001ef8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001efa:	2300      	movs	r3, #0
 8001efc:	617b      	str	r3, [r7, #20]
 8001efe:	e00a      	b.n	8001f16 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f00:	f3af 8000 	nop.w
 8001f04:	4601      	mov	r1, r0
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	1c5a      	adds	r2, r3, #1
 8001f0a:	60ba      	str	r2, [r7, #8]
 8001f0c:	b2ca      	uxtb	r2, r1
 8001f0e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	3301      	adds	r3, #1
 8001f14:	617b      	str	r3, [r7, #20]
 8001f16:	697a      	ldr	r2, [r7, #20]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	dbf0      	blt.n	8001f00 <_read+0x12>
  }

  return len;
 8001f1e:	687b      	ldr	r3, [r7, #4]
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3718      	adds	r7, #24
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}

08001f28 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b086      	sub	sp, #24
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	60f8      	str	r0, [r7, #12]
 8001f30:	60b9      	str	r1, [r7, #8]
 8001f32:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f34:	2300      	movs	r3, #0
 8001f36:	617b      	str	r3, [r7, #20]
 8001f38:	e009      	b.n	8001f4e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	1c5a      	adds	r2, r3, #1
 8001f3e:	60ba      	str	r2, [r7, #8]
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	617b      	str	r3, [r7, #20]
 8001f4e:	697a      	ldr	r2, [r7, #20]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	429a      	cmp	r2, r3
 8001f54:	dbf1      	blt.n	8001f3a <_write+0x12>
  }
  return len;
 8001f56:	687b      	ldr	r3, [r7, #4]
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3718      	adds	r7, #24
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <_close>:

int _close(int file)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f88:	605a      	str	r2, [r3, #4]
  return 0;
 8001f8a:	2300      	movs	r3, #0
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	370c      	adds	r7, #12
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr

08001f98 <_isatty>:

int _isatty(int file)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001fa0:	2301      	movs	r3, #1
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr

08001fae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fae:	b480      	push	{r7}
 8001fb0:	b085      	sub	sp, #20
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	60f8      	str	r0, [r7, #12]
 8001fb6:	60b9      	str	r1, [r7, #8]
 8001fb8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001fba:	2300      	movs	r3, #0
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3714      	adds	r7, #20
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b086      	sub	sp, #24
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fd0:	4a14      	ldr	r2, [pc, #80]	@ (8002024 <_sbrk+0x5c>)
 8001fd2:	4b15      	ldr	r3, [pc, #84]	@ (8002028 <_sbrk+0x60>)
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fdc:	4b13      	ldr	r3, [pc, #76]	@ (800202c <_sbrk+0x64>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d102      	bne.n	8001fea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fe4:	4b11      	ldr	r3, [pc, #68]	@ (800202c <_sbrk+0x64>)
 8001fe6:	4a12      	ldr	r2, [pc, #72]	@ (8002030 <_sbrk+0x68>)
 8001fe8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fea:	4b10      	ldr	r3, [pc, #64]	@ (800202c <_sbrk+0x64>)
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	693a      	ldr	r2, [r7, #16]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d207      	bcs.n	8002008 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ff8:	f00c f9ea 	bl	800e3d0 <__errno>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	220c      	movs	r2, #12
 8002000:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002002:	f04f 33ff 	mov.w	r3, #4294967295
 8002006:	e009      	b.n	800201c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002008:	4b08      	ldr	r3, [pc, #32]	@ (800202c <_sbrk+0x64>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800200e:	4b07      	ldr	r3, [pc, #28]	@ (800202c <_sbrk+0x64>)
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4413      	add	r3, r2
 8002016:	4a05      	ldr	r2, [pc, #20]	@ (800202c <_sbrk+0x64>)
 8002018:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800201a:	68fb      	ldr	r3, [r7, #12]
}
 800201c:	4618      	mov	r0, r3
 800201e:	3718      	adds	r7, #24
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	24080000 	.word	0x24080000
 8002028:	00000400 	.word	0x00000400
 800202c:	2400085c 	.word	0x2400085c
 8002030:	240009b8 	.word	0x240009b8

08002034 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002038:	4b37      	ldr	r3, [pc, #220]	@ (8002118 <SystemInit+0xe4>)
 800203a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800203e:	4a36      	ldr	r2, [pc, #216]	@ (8002118 <SystemInit+0xe4>)
 8002040:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002044:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002048:	4b34      	ldr	r3, [pc, #208]	@ (800211c <SystemInit+0xe8>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 030f 	and.w	r3, r3, #15
 8002050:	2b06      	cmp	r3, #6
 8002052:	d807      	bhi.n	8002064 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002054:	4b31      	ldr	r3, [pc, #196]	@ (800211c <SystemInit+0xe8>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f023 030f 	bic.w	r3, r3, #15
 800205c:	4a2f      	ldr	r2, [pc, #188]	@ (800211c <SystemInit+0xe8>)
 800205e:	f043 0307 	orr.w	r3, r3, #7
 8002062:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
	  RCC->CR |= RCC_CR_HSION;
 8002064:	4b2e      	ldr	r3, [pc, #184]	@ (8002120 <SystemInit+0xec>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a2d      	ldr	r2, [pc, #180]	@ (8002120 <SystemInit+0xec>)
 800206a:	f043 0301 	orr.w	r3, r3, #1
 800206e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002070:	4b2b      	ldr	r3, [pc, #172]	@ (8002120 <SystemInit+0xec>)
 8002072:	2200      	movs	r2, #0
 8002074:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002076:	4b2a      	ldr	r3, [pc, #168]	@ (8002120 <SystemInit+0xec>)
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	4929      	ldr	r1, [pc, #164]	@ (8002120 <SystemInit+0xec>)
 800207c:	4b29      	ldr	r3, [pc, #164]	@ (8002124 <SystemInit+0xf0>)
 800207e:	4013      	ands	r3, r2
 8002080:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002082:	4b26      	ldr	r3, [pc, #152]	@ (800211c <SystemInit+0xe8>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0308 	and.w	r3, r3, #8
 800208a:	2b00      	cmp	r3, #0
 800208c:	d007      	beq.n	800209e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800208e:	4b23      	ldr	r3, [pc, #140]	@ (800211c <SystemInit+0xe8>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f023 030f 	bic.w	r3, r3, #15
 8002096:	4a21      	ldr	r2, [pc, #132]	@ (800211c <SystemInit+0xe8>)
 8002098:	f043 0307 	orr.w	r3, r3, #7
 800209c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800209e:	4b20      	ldr	r3, [pc, #128]	@ (8002120 <SystemInit+0xec>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80020a4:	4b1e      	ldr	r3, [pc, #120]	@ (8002120 <SystemInit+0xec>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80020aa:	4b1d      	ldr	r3, [pc, #116]	@ (8002120 <SystemInit+0xec>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80020b0:	4b1b      	ldr	r3, [pc, #108]	@ (8002120 <SystemInit+0xec>)
 80020b2:	4a1d      	ldr	r2, [pc, #116]	@ (8002128 <SystemInit+0xf4>)
 80020b4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80020b6:	4b1a      	ldr	r3, [pc, #104]	@ (8002120 <SystemInit+0xec>)
 80020b8:	4a1c      	ldr	r2, [pc, #112]	@ (800212c <SystemInit+0xf8>)
 80020ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80020bc:	4b18      	ldr	r3, [pc, #96]	@ (8002120 <SystemInit+0xec>)
 80020be:	4a1c      	ldr	r2, [pc, #112]	@ (8002130 <SystemInit+0xfc>)
 80020c0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80020c2:	4b17      	ldr	r3, [pc, #92]	@ (8002120 <SystemInit+0xec>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80020c8:	4b15      	ldr	r3, [pc, #84]	@ (8002120 <SystemInit+0xec>)
 80020ca:	4a19      	ldr	r2, [pc, #100]	@ (8002130 <SystemInit+0xfc>)
 80020cc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80020ce:	4b14      	ldr	r3, [pc, #80]	@ (8002120 <SystemInit+0xec>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80020d4:	4b12      	ldr	r3, [pc, #72]	@ (8002120 <SystemInit+0xec>)
 80020d6:	4a16      	ldr	r2, [pc, #88]	@ (8002130 <SystemInit+0xfc>)
 80020d8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80020da:	4b11      	ldr	r3, [pc, #68]	@ (8002120 <SystemInit+0xec>)
 80020dc:	2200      	movs	r2, #0
 80020de:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80020e0:	4b0f      	ldr	r3, [pc, #60]	@ (8002120 <SystemInit+0xec>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a0e      	ldr	r2, [pc, #56]	@ (8002120 <SystemInit+0xec>)
 80020e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020ea:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80020ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002120 <SystemInit+0xec>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80020f2:	4b10      	ldr	r3, [pc, #64]	@ (8002134 <SystemInit+0x100>)
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	4b10      	ldr	r3, [pc, #64]	@ (8002138 <SystemInit+0x104>)
 80020f8:	4013      	ands	r3, r2
 80020fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80020fe:	d202      	bcs.n	8002106 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002100:	4b0e      	ldr	r3, [pc, #56]	@ (800213c <SystemInit+0x108>)
 8002102:	2201      	movs	r2, #1
 8002104:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002106:	4b0e      	ldr	r3, [pc, #56]	@ (8002140 <SystemInit+0x10c>)
 8002108:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800210c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800210e:	bf00      	nop
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr
 8002118:	e000ed00 	.word	0xe000ed00
 800211c:	52002000 	.word	0x52002000
 8002120:	58024400 	.word	0x58024400
 8002124:	eaf6ed7f 	.word	0xeaf6ed7f
 8002128:	02020200 	.word	0x02020200
 800212c:	01ff0000 	.word	0x01ff0000
 8002130:	01010280 	.word	0x01010280
 8002134:	5c001000 	.word	0x5c001000
 8002138:	ffff0000 	.word	0xffff0000
 800213c:	51008108 	.word	0x51008108
 8002140:	52004000 	.word	0x52004000

08002144 <HAL_TIM_PeriodElapsedCallback>:
// Use volatile for variables shared between ISR and main
volatile int check = 0;
volatile int a = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM4)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a25      	ldr	r2, [pc, #148]	@ (80021e8 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d144      	bne.n	80021e0 <HAL_TIM_PeriodElapsedCallback+0x9c>
    {
        if(check <= a)
 8002156:	4b25      	ldr	r3, [pc, #148]	@ (80021ec <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	4b25      	ldr	r3, [pc, #148]	@ (80021f0 <HAL_TIM_PeriodElapsedCallback+0xac>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	429a      	cmp	r2, r3
 8002160:	dc18      	bgt.n	8002194 <HAL_TIM_PeriodElapsedCallback+0x50>
        {
//
        	            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8002162:	2201      	movs	r2, #1
 8002164:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002168:	4822      	ldr	r0, [pc, #136]	@ (80021f4 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800216a:	f004 fe1d 	bl	8006da8 <HAL_GPIO_WritePin>
        	            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 800216e:	2201      	movs	r2, #1
 8002170:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002174:	481f      	ldr	r0, [pc, #124]	@ (80021f4 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8002176:	f004 fe17 	bl	8006da8 <HAL_GPIO_WritePin>
        	            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 800217a:	2201      	movs	r2, #1
 800217c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002180:	481c      	ldr	r0, [pc, #112]	@ (80021f4 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8002182:	f004 fe11 	bl	8006da8 <HAL_GPIO_WritePin>
        	            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8002186:	2201      	movs	r2, #1
 8002188:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800218c:	4819      	ldr	r0, [pc, #100]	@ (80021f4 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800218e:	f004 fe0b 	bl	8006da8 <HAL_GPIO_WritePin>
 8002192:	e020      	b.n	80021d6 <HAL_TIM_PeriodElapsedCallback+0x92>
//            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
//            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
//            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
//            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
        }
        else if (check < 1000)  // Changed condition
 8002194:	4b15      	ldr	r3, [pc, #84]	@ (80021ec <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800219c:	da18      	bge.n	80021d0 <HAL_TIM_PeriodElapsedCallback+0x8c>
        {

        	            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 800219e:	2200      	movs	r2, #0
 80021a0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80021a4:	4813      	ldr	r0, [pc, #76]	@ (80021f4 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80021a6:	f004 fdff 	bl	8006da8 <HAL_GPIO_WritePin>
        	            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 80021aa:	2200      	movs	r2, #0
 80021ac:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80021b0:	4810      	ldr	r0, [pc, #64]	@ (80021f4 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80021b2:	f004 fdf9 	bl	8006da8 <HAL_GPIO_WritePin>
        	            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80021b6:	2200      	movs	r2, #0
 80021b8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80021bc:	480d      	ldr	r0, [pc, #52]	@ (80021f4 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80021be:	f004 fdf3 	bl	8006da8 <HAL_GPIO_WritePin>
        	            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80021c2:	2200      	movs	r2, #0
 80021c4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80021c8:	480a      	ldr	r0, [pc, #40]	@ (80021f4 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80021ca:	f004 fded 	bl	8006da8 <HAL_GPIO_WritePin>
 80021ce:	e002      	b.n	80021d6 <HAL_TIM_PeriodElapsedCallback+0x92>
//            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
//            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
        }
        else
        {
            check = 0;
 80021d0:	4b06      	ldr	r3, [pc, #24]	@ (80021ec <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	601a      	str	r2, [r3, #0]
        }

        check++;
 80021d6:	4b05      	ldr	r3, [pc, #20]	@ (80021ec <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	3301      	adds	r3, #1
 80021dc:	4a03      	ldr	r2, [pc, #12]	@ (80021ec <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80021de:	6013      	str	r3, [r2, #0]
    }
}
 80021e0:	bf00      	nop
 80021e2:	3708      	adds	r7, #8
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	40000800 	.word	0x40000800
 80021ec:	24000860 	.word	0x24000860
 80021f0:	24000864 	.word	0x24000864
 80021f4:	58020c00 	.word	0x58020c00

080021f8 <mosfet>:

void mosfet(float duty)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	ed87 0a01 	vstr	s0, [r7, #4]
    a = (int)(duty * 1000);
 8002202:	edd7 7a01 	vldr	s15, [r7, #4]
 8002206:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8002228 <mosfet+0x30>
 800220a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800220e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002212:	ee17 2a90 	vmov	r2, s15
 8002216:	4b05      	ldr	r3, [pc, #20]	@ (800222c <mosfet+0x34>)
 8002218:	601a      	str	r2, [r3, #0]
    HAL_TIM_Base_Start_IT(&htim4);
 800221a:	4805      	ldr	r0, [pc, #20]	@ (8002230 <mosfet+0x38>)
 800221c:	f009 f8f0 	bl	800b400 <HAL_TIM_Base_Start_IT>
}
 8002220:	bf00      	nop
 8002222:	3708      	adds	r7, #8
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	447a0000 	.word	0x447a0000
 800222c:	24000864 	.word	0x24000864
 8002230:	24000424 	.word	0x24000424

08002234 <delay_ns>:
    HAL_TIM_Base_Stop_IT(&htim4);
    check = 0;
}
// Hàm delay 100ns sử dụng TIM1
// Hàm delay 100ns sử dụng TIM1
void delay_ns(uint32_t ns) {
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
    uint32_t ticks = (uint32_t)(ns / 27.77f);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	ee07 3a90 	vmov	s15, r3
 8002242:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002246:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8002280 <delay_ns+0x4c>
 800224a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800224e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002252:	ee17 3a90 	vmov	r3, s15
 8002256:	60fb      	str	r3, [r7, #12]
    HAL_TIM_Base_Start(&htim1);
 8002258:	480a      	ldr	r0, [pc, #40]	@ (8002284 <delay_ns+0x50>)
 800225a:	f009 f861 	bl	800b320 <HAL_TIM_Base_Start>
    uint32_t start = TIM1->CNT;
 800225e:	4b0a      	ldr	r3, [pc, #40]	@ (8002288 <delay_ns+0x54>)
 8002260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002262:	60bb      	str	r3, [r7, #8]
    while ((uint32_t)(TIM1->CNT - start) < ticks);
 8002264:	bf00      	nop
 8002266:	4b08      	ldr	r3, [pc, #32]	@ (8002288 <delay_ns+0x54>)
 8002268:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	68fa      	ldr	r2, [r7, #12]
 8002270:	429a      	cmp	r2, r3
 8002272:	d8f8      	bhi.n	8002266 <delay_ns+0x32>
}
 8002274:	bf00      	nop
 8002276:	bf00      	nop
 8002278:	3710      	adds	r7, #16
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	41de28f6 	.word	0x41de28f6
 8002284:	240003d8 	.word	0x240003d8
 8002288:	40010000 	.word	0x40010000

0800228c <send_data_to_winform>:
 */
#include"winform.h"
#include"adc.h"
extern UART_HandleTypeDef huart7;
void send_data_to_winform(double isense, double voutsense, double vinsense, double vcbsense)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b0b2      	sub	sp, #200	@ 0xc8
 8002290:	af08      	add	r7, sp, #32
 8002292:	ed87 0b06 	vstr	d0, [r7, #24]
 8002296:	ed87 1b04 	vstr	d1, [r7, #16]
 800229a:	ed87 2b02 	vstr	d2, [r7, #8]
 800229e:	ed87 3b00 	vstr	d3, [r7]
    char msg[128]; // rộng hơn 50 để đủ chỗ cho nhãn + đơn vị + separator
    int len = snprintf(msg, sizeof(msg),
 80022a2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80022a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80022aa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80022ae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80022b2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80022b6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80022ba:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80022be:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80022c2:	e9cd 2300 	strd	r2, r3, [sp]
 80022c6:	4a10      	ldr	r2, [pc, #64]	@ (8002308 <send_data_to_winform+0x7c>)
 80022c8:	2180      	movs	r1, #128	@ 0x80
 80022ca:	f00b ffb7 	bl	800e23c <sniprintf>
 80022ce:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
                       "Vin=%.2f V\r\n"
                       "Vcb=%.2f V\r\n"
                       "----------------------\r\n",
                       isense, voutsense, vinsense, vcbsense);

    if (len < 0) return;                    // lỗi format
 80022d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	db11      	blt.n	80022fe <send_data_to_winform+0x72>
    if (len > (int)sizeof(msg)) len = sizeof(msg); // phòng tràn
 80022da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80022de:	2b80      	cmp	r3, #128	@ 0x80
 80022e0:	dd02      	ble.n	80022e8 <send_data_to_winform+0x5c>
 80022e2:	2380      	movs	r3, #128	@ 0x80
 80022e4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

    HAL_UART_Transmit(&huart7, (uint8_t*)msg, (uint16_t)len, HAL_MAX_DELAY);
 80022e8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80022ec:	b29a      	uxth	r2, r3
 80022ee:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 80022f2:	f04f 33ff 	mov.w	r3, #4294967295
 80022f6:	4805      	ldr	r0, [pc, #20]	@ (800230c <send_data_to_winform+0x80>)
 80022f8:	f009 fd62 	bl	800bdc0 <HAL_UART_Transmit>
 80022fc:	e000      	b.n	8002300 <send_data_to_winform+0x74>
    if (len < 0) return;                    // lỗi format
 80022fe:	bf00      	nop
}
 8002300:	37a8      	adds	r7, #168	@ 0xa8
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	08010400 	.word	0x08010400
 800230c:	24000470 	.word	0x24000470

08002310 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002310:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002348 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002314:	f7ff fe8e 	bl	8002034 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002318:	480c      	ldr	r0, [pc, #48]	@ (800234c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800231a:	490d      	ldr	r1, [pc, #52]	@ (8002350 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800231c:	4a0d      	ldr	r2, [pc, #52]	@ (8002354 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800231e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002320:	e002      	b.n	8002328 <LoopCopyDataInit>

08002322 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002322:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002324:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002326:	3304      	adds	r3, #4

08002328 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002328:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800232a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800232c:	d3f9      	bcc.n	8002322 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800232e:	4a0a      	ldr	r2, [pc, #40]	@ (8002358 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002330:	4c0a      	ldr	r4, [pc, #40]	@ (800235c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002332:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002334:	e001      	b.n	800233a <LoopFillZerobss>

08002336 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002336:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002338:	3204      	adds	r2, #4

0800233a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800233a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800233c:	d3fb      	bcc.n	8002336 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800233e:	f00c f84d 	bl	800e3dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002342:	f7fe fa69 	bl	8000818 <main>
  bx  lr
 8002346:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002348:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800234c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002350:	240001d8 	.word	0x240001d8
  ldr r2, =_sidata
 8002354:	08010a08 	.word	0x08010a08
  ldr r2, =_sbss
 8002358:	240001d8 	.word	0x240001d8
  ldr r4, =_ebss
 800235c:	240009b8 	.word	0x240009b8

08002360 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002360:	e7fe      	b.n	8002360 <ADC3_IRQHandler>
	...

08002364 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800236a:	2003      	movs	r0, #3
 800236c:	f001 fc78 	bl	8003c60 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002370:	f005 fcb2 	bl	8007cd8 <HAL_RCC_GetSysClockFreq>
 8002374:	4602      	mov	r2, r0
 8002376:	4b15      	ldr	r3, [pc, #84]	@ (80023cc <HAL_Init+0x68>)
 8002378:	699b      	ldr	r3, [r3, #24]
 800237a:	0a1b      	lsrs	r3, r3, #8
 800237c:	f003 030f 	and.w	r3, r3, #15
 8002380:	4913      	ldr	r1, [pc, #76]	@ (80023d0 <HAL_Init+0x6c>)
 8002382:	5ccb      	ldrb	r3, [r1, r3]
 8002384:	f003 031f 	and.w	r3, r3, #31
 8002388:	fa22 f303 	lsr.w	r3, r2, r3
 800238c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800238e:	4b0f      	ldr	r3, [pc, #60]	@ (80023cc <HAL_Init+0x68>)
 8002390:	699b      	ldr	r3, [r3, #24]
 8002392:	f003 030f 	and.w	r3, r3, #15
 8002396:	4a0e      	ldr	r2, [pc, #56]	@ (80023d0 <HAL_Init+0x6c>)
 8002398:	5cd3      	ldrb	r3, [r2, r3]
 800239a:	f003 031f 	and.w	r3, r3, #31
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	fa22 f303 	lsr.w	r3, r2, r3
 80023a4:	4a0b      	ldr	r2, [pc, #44]	@ (80023d4 <HAL_Init+0x70>)
 80023a6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80023a8:	4a0b      	ldr	r2, [pc, #44]	@ (80023d8 <HAL_Init+0x74>)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80023ae:	200f      	movs	r0, #15
 80023b0:	f000 f814 	bl	80023dc <HAL_InitTick>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d001      	beq.n	80023be <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e002      	b.n	80023c4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80023be:	f7ff fa63 	bl	8001888 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023c2:	2300      	movs	r3, #0
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3708      	adds	r7, #8
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	58024400 	.word	0x58024400
 80023d0:	08010648 	.word	0x08010648
 80023d4:	24000004 	.word	0x24000004
 80023d8:	24000000 	.word	0x24000000

080023dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80023e4:	4b15      	ldr	r3, [pc, #84]	@ (800243c <HAL_InitTick+0x60>)
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d101      	bne.n	80023f0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e021      	b.n	8002434 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80023f0:	4b13      	ldr	r3, [pc, #76]	@ (8002440 <HAL_InitTick+0x64>)
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	4b11      	ldr	r3, [pc, #68]	@ (800243c <HAL_InitTick+0x60>)
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	4619      	mov	r1, r3
 80023fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002402:	fbb2 f3f3 	udiv	r3, r2, r3
 8002406:	4618      	mov	r0, r3
 8002408:	f001 fc5d 	bl	8003cc6 <HAL_SYSTICK_Config>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e00e      	b.n	8002434 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2b0f      	cmp	r3, #15
 800241a:	d80a      	bhi.n	8002432 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800241c:	2200      	movs	r2, #0
 800241e:	6879      	ldr	r1, [r7, #4]
 8002420:	f04f 30ff 	mov.w	r0, #4294967295
 8002424:	f001 fc27 	bl	8003c76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002428:	4a06      	ldr	r2, [pc, #24]	@ (8002444 <HAL_InitTick+0x68>)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800242e:	2300      	movs	r3, #0
 8002430:	e000      	b.n	8002434 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
}
 8002434:	4618      	mov	r0, r3
 8002436:	3708      	adds	r7, #8
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	2400000c 	.word	0x2400000c
 8002440:	24000000 	.word	0x24000000
 8002444:	24000008 	.word	0x24000008

08002448 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800244c:	4b06      	ldr	r3, [pc, #24]	@ (8002468 <HAL_IncTick+0x20>)
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	461a      	mov	r2, r3
 8002452:	4b06      	ldr	r3, [pc, #24]	@ (800246c <HAL_IncTick+0x24>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4413      	add	r3, r2
 8002458:	4a04      	ldr	r2, [pc, #16]	@ (800246c <HAL_IncTick+0x24>)
 800245a:	6013      	str	r3, [r2, #0]
}
 800245c:	bf00      	nop
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	2400000c 	.word	0x2400000c
 800246c:	24000868 	.word	0x24000868

08002470 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0
  return uwTick;
 8002474:	4b03      	ldr	r3, [pc, #12]	@ (8002484 <HAL_GetTick+0x14>)
 8002476:	681b      	ldr	r3, [r3, #0]
}
 8002478:	4618      	mov	r0, r3
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	24000868 	.word	0x24000868

08002488 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002490:	f7ff ffee 	bl	8002470 <HAL_GetTick>
 8002494:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024a0:	d005      	beq.n	80024ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024a2:	4b0a      	ldr	r3, [pc, #40]	@ (80024cc <HAL_Delay+0x44>)
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	461a      	mov	r2, r3
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	4413      	add	r3, r2
 80024ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80024ae:	bf00      	nop
 80024b0:	f7ff ffde 	bl	8002470 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	68fa      	ldr	r2, [r7, #12]
 80024bc:	429a      	cmp	r2, r3
 80024be:	d8f7      	bhi.n	80024b0 <HAL_Delay+0x28>
  {
  }
}
 80024c0:	bf00      	nop
 80024c2:	bf00      	nop
 80024c4:	3710      	adds	r7, #16
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	2400000c 	.word	0x2400000c

080024d0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80024d4:	4b03      	ldr	r3, [pc, #12]	@ (80024e4 <HAL_GetREVID+0x14>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	0c1b      	lsrs	r3, r3, #16
}
 80024da:	4618      	mov	r0, r3
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr
 80024e4:	5c001000 	.word	0x5c001000

080024e8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	431a      	orrs	r2, r3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	609a      	str	r2, [r3, #8]
}
 8002502:	bf00      	nop
 8002504:	370c      	adds	r7, #12
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr

0800250e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800250e:	b480      	push	{r7}
 8002510:	b083      	sub	sp, #12
 8002512:	af00      	add	r7, sp, #0
 8002514:	6078      	str	r0, [r7, #4]
 8002516:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	431a      	orrs	r2, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	609a      	str	r2, [r3, #8]
}
 8002528:	bf00      	nop
 800252a:	370c      	adds	r7, #12
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002544:	4618      	mov	r0, r3
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002550:	b480      	push	{r7}
 8002552:	b087      	sub	sp, #28
 8002554:	af00      	add	r7, sp, #0
 8002556:	60f8      	str	r0, [r7, #12]
 8002558:	60b9      	str	r1, [r7, #8]
 800255a:	607a      	str	r2, [r7, #4]
 800255c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	3360      	adds	r3, #96	@ 0x60
 8002562:	461a      	mov	r2, r3
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	4413      	add	r3, r2
 800256a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	430b      	orrs	r3, r1
 800257e:	431a      	orrs	r2, r3
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002584:	bf00      	nop
 8002586:	371c      	adds	r7, #28
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002590:	b480      	push	{r7}
 8002592:	b085      	sub	sp, #20
 8002594:	af00      	add	r7, sp, #0
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	60b9      	str	r1, [r7, #8]
 800259a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	691b      	ldr	r3, [r3, #16]
 80025a0:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	f003 031f 	and.w	r3, r3, #31
 80025aa:	6879      	ldr	r1, [r7, #4]
 80025ac:	fa01 f303 	lsl.w	r3, r1, r3
 80025b0:	431a      	orrs	r2, r3
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	611a      	str	r2, [r3, #16]
}
 80025b6:	bf00      	nop
 80025b8:	3714      	adds	r7, #20
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr

080025c2 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80025c2:	b480      	push	{r7}
 80025c4:	b087      	sub	sp, #28
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	60f8      	str	r0, [r7, #12]
 80025ca:	60b9      	str	r1, [r7, #8]
 80025cc:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	3360      	adds	r3, #96	@ 0x60
 80025d2:	461a      	mov	r2, r3
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	4413      	add	r3, r2
 80025da:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	431a      	orrs	r2, r3
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	601a      	str	r2, [r3, #0]
  }
}
 80025ec:	bf00      	nop
 80025ee:	371c      	adds	r7, #28
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002608:	2b00      	cmp	r3, #0
 800260a:	d101      	bne.n	8002610 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800260c:	2301      	movs	r3, #1
 800260e:	e000      	b.n	8002612 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002610:	2300      	movs	r3, #0
}
 8002612:	4618      	mov	r0, r3
 8002614:	370c      	adds	r7, #12
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr

0800261e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800261e:	b480      	push	{r7}
 8002620:	b087      	sub	sp, #28
 8002622:	af00      	add	r7, sp, #0
 8002624:	60f8      	str	r0, [r7, #12]
 8002626:	60b9      	str	r1, [r7, #8]
 8002628:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	3330      	adds	r3, #48	@ 0x30
 800262e:	461a      	mov	r2, r3
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	0a1b      	lsrs	r3, r3, #8
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	f003 030c 	and.w	r3, r3, #12
 800263a:	4413      	add	r3, r2
 800263c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	f003 031f 	and.w	r3, r3, #31
 8002648:	211f      	movs	r1, #31
 800264a:	fa01 f303 	lsl.w	r3, r1, r3
 800264e:	43db      	mvns	r3, r3
 8002650:	401a      	ands	r2, r3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	0e9b      	lsrs	r3, r3, #26
 8002656:	f003 011f 	and.w	r1, r3, #31
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	f003 031f 	and.w	r3, r3, #31
 8002660:	fa01 f303 	lsl.w	r3, r1, r3
 8002664:	431a      	orrs	r2, r3
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800266a:	bf00      	nop
 800266c:	371c      	adds	r7, #28
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr

08002676 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8002676:	b480      	push	{r7}
 8002678:	b083      	sub	sp, #12
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
 800267e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	f023 0203 	bic.w	r2, r3, #3
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	431a      	orrs	r2, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	60da      	str	r2, [r3, #12]
}
 8002690:	bf00      	nop
 8002692:	370c      	adds	r7, #12
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr

0800269c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800269c:	b480      	push	{r7}
 800269e:	b087      	sub	sp, #28
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	60f8      	str	r0, [r7, #12]
 80026a4:	60b9      	str	r1, [r7, #8]
 80026a6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	3314      	adds	r3, #20
 80026ac:	461a      	mov	r2, r3
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	0e5b      	lsrs	r3, r3, #25
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	f003 0304 	and.w	r3, r3, #4
 80026b8:	4413      	add	r3, r2
 80026ba:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	0d1b      	lsrs	r3, r3, #20
 80026c4:	f003 031f 	and.w	r3, r3, #31
 80026c8:	2107      	movs	r1, #7
 80026ca:	fa01 f303 	lsl.w	r3, r1, r3
 80026ce:	43db      	mvns	r3, r3
 80026d0:	401a      	ands	r2, r3
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	0d1b      	lsrs	r3, r3, #20
 80026d6:	f003 031f 	and.w	r3, r3, #31
 80026da:	6879      	ldr	r1, [r7, #4]
 80026dc:	fa01 f303 	lsl.w	r3, r1, r3
 80026e0:	431a      	orrs	r2, r3
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80026e6:	bf00      	nop
 80026e8:	371c      	adds	r7, #28
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
	...

080026f4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b085      	sub	sp, #20
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	60b9      	str	r1, [r7, #8]
 80026fe:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800270c:	43db      	mvns	r3, r3
 800270e:	401a      	ands	r2, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f003 0318 	and.w	r3, r3, #24
 8002716:	4908      	ldr	r1, [pc, #32]	@ (8002738 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002718:	40d9      	lsrs	r1, r3
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	400b      	ands	r3, r1
 800271e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002722:	431a      	orrs	r2, r3
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800272a:	bf00      	nop
 800272c:	3714      	adds	r7, #20
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	000fffff 	.word	0x000fffff

0800273c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	f003 031f 	and.w	r3, r3, #31
}
 800274c:	4618      	mov	r0, r3
 800274e:	370c      	adds	r7, #12
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr

08002758 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	689a      	ldr	r2, [r3, #8]
 8002764:	4b04      	ldr	r3, [pc, #16]	@ (8002778 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002766:	4013      	ands	r3, r2
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	6093      	str	r3, [r2, #8]
}
 800276c:	bf00      	nop
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr
 8002778:	5fffffc0 	.word	0x5fffffc0

0800277c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800278c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002790:	d101      	bne.n	8002796 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002792:	2301      	movs	r3, #1
 8002794:	e000      	b.n	8002798 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002796:	2300      	movs	r3, #0
}
 8002798:	4618      	mov	r0, r3
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	689a      	ldr	r2, [r3, #8]
 80027b0:	4b05      	ldr	r3, [pc, #20]	@ (80027c8 <LL_ADC_EnableInternalRegulator+0x24>)
 80027b2:	4013      	ands	r3, r2
 80027b4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80027bc:	bf00      	nop
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr
 80027c8:	6fffffc0 	.word	0x6fffffc0

080027cc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80027e0:	d101      	bne.n	80027e6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80027e2:	2301      	movs	r3, #1
 80027e4:	e000      	b.n	80027e8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80027e6:	2300      	movs	r3, #0
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	370c      	adds	r7, #12
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr

080027f4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	689a      	ldr	r2, [r3, #8]
 8002800:	4b05      	ldr	r3, [pc, #20]	@ (8002818 <LL_ADC_Enable+0x24>)
 8002802:	4013      	ands	r3, r2
 8002804:	f043 0201 	orr.w	r2, r3, #1
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800280c:	bf00      	nop
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr
 8002818:	7fffffc0 	.word	0x7fffffc0

0800281c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	f003 0301 	and.w	r3, r3, #1
 800282c:	2b01      	cmp	r3, #1
 800282e:	d101      	bne.n	8002834 <LL_ADC_IsEnabled+0x18>
 8002830:	2301      	movs	r3, #1
 8002832:	e000      	b.n	8002836 <LL_ADC_IsEnabled+0x1a>
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	370c      	adds	r7, #12
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
	...

08002844 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	689a      	ldr	r2, [r3, #8]
 8002850:	4b05      	ldr	r3, [pc, #20]	@ (8002868 <LL_ADC_REG_StartConversion+0x24>)
 8002852:	4013      	ands	r3, r2
 8002854:	f043 0204 	orr.w	r2, r3, #4
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800285c:	bf00      	nop
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr
 8002868:	7fffffc0 	.word	0x7fffffc0

0800286c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	f003 0304 	and.w	r3, r3, #4
 800287c:	2b04      	cmp	r3, #4
 800287e:	d101      	bne.n	8002884 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002880:	2301      	movs	r3, #1
 8002882:	e000      	b.n	8002886 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	370c      	adds	r7, #12
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr

08002892 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002892:	b480      	push	{r7}
 8002894:	b083      	sub	sp, #12
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	f003 0308 	and.w	r3, r3, #8
 80028a2:	2b08      	cmp	r3, #8
 80028a4:	d101      	bne.n	80028aa <LL_ADC_INJ_IsConversionOngoing+0x18>
 80028a6:	2301      	movs	r3, #1
 80028a8:	e000      	b.n	80028ac <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80028aa:	2300      	movs	r3, #0
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	370c      	adds	r7, #12
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr

080028b8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80028b8:	b590      	push	{r4, r7, lr}
 80028ba:	b089      	sub	sp, #36	@ 0x24
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028c0:	2300      	movs	r3, #0
 80028c2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80028c4:	2300      	movs	r3, #0
 80028c6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d101      	bne.n	80028d2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e18f      	b.n	8002bf2 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d109      	bne.n	80028f4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f7fe ffeb 	bl	80018bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2200      	movs	r2, #0
 80028f0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4618      	mov	r0, r3
 80028fa:	f7ff ff3f 	bl	800277c <LL_ADC_IsDeepPowerDownEnabled>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d004      	beq.n	800290e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4618      	mov	r0, r3
 800290a:	f7ff ff25 	bl	8002758 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4618      	mov	r0, r3
 8002914:	f7ff ff5a 	bl	80027cc <LL_ADC_IsInternalRegulatorEnabled>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d114      	bne.n	8002948 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4618      	mov	r0, r3
 8002924:	f7ff ff3e 	bl	80027a4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002928:	4b87      	ldr	r3, [pc, #540]	@ (8002b48 <HAL_ADC_Init+0x290>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	099b      	lsrs	r3, r3, #6
 800292e:	4a87      	ldr	r2, [pc, #540]	@ (8002b4c <HAL_ADC_Init+0x294>)
 8002930:	fba2 2303 	umull	r2, r3, r2, r3
 8002934:	099b      	lsrs	r3, r3, #6
 8002936:	3301      	adds	r3, #1
 8002938:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800293a:	e002      	b.n	8002942 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	3b01      	subs	r3, #1
 8002940:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d1f9      	bne.n	800293c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4618      	mov	r0, r3
 800294e:	f7ff ff3d 	bl	80027cc <LL_ADC_IsInternalRegulatorEnabled>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d10d      	bne.n	8002974 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800295c:	f043 0210 	orr.w	r2, r3, #16
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002968:	f043 0201 	orr.w	r2, r3, #1
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4618      	mov	r0, r3
 800297a:	f7ff ff77 	bl	800286c <LL_ADC_REG_IsConversionOngoing>
 800297e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002984:	f003 0310 	and.w	r3, r3, #16
 8002988:	2b00      	cmp	r3, #0
 800298a:	f040 8129 	bne.w	8002be0 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	2b00      	cmp	r3, #0
 8002992:	f040 8125 	bne.w	8002be0 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800299a:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800299e:	f043 0202 	orr.w	r2, r3, #2
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4618      	mov	r0, r3
 80029ac:	f7ff ff36 	bl	800281c <LL_ADC_IsEnabled>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d136      	bne.n	8002a24 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a65      	ldr	r2, [pc, #404]	@ (8002b50 <HAL_ADC_Init+0x298>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d004      	beq.n	80029ca <HAL_ADC_Init+0x112>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a63      	ldr	r2, [pc, #396]	@ (8002b54 <HAL_ADC_Init+0x29c>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d10e      	bne.n	80029e8 <HAL_ADC_Init+0x130>
 80029ca:	4861      	ldr	r0, [pc, #388]	@ (8002b50 <HAL_ADC_Init+0x298>)
 80029cc:	f7ff ff26 	bl	800281c <LL_ADC_IsEnabled>
 80029d0:	4604      	mov	r4, r0
 80029d2:	4860      	ldr	r0, [pc, #384]	@ (8002b54 <HAL_ADC_Init+0x29c>)
 80029d4:	f7ff ff22 	bl	800281c <LL_ADC_IsEnabled>
 80029d8:	4603      	mov	r3, r0
 80029da:	4323      	orrs	r3, r4
 80029dc:	2b00      	cmp	r3, #0
 80029de:	bf0c      	ite	eq
 80029e0:	2301      	moveq	r3, #1
 80029e2:	2300      	movne	r3, #0
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	e008      	b.n	80029fa <HAL_ADC_Init+0x142>
 80029e8:	485b      	ldr	r0, [pc, #364]	@ (8002b58 <HAL_ADC_Init+0x2a0>)
 80029ea:	f7ff ff17 	bl	800281c <LL_ADC_IsEnabled>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	bf0c      	ite	eq
 80029f4:	2301      	moveq	r3, #1
 80029f6:	2300      	movne	r3, #0
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d012      	beq.n	8002a24 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a53      	ldr	r2, [pc, #332]	@ (8002b50 <HAL_ADC_Init+0x298>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d004      	beq.n	8002a12 <HAL_ADC_Init+0x15a>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a51      	ldr	r2, [pc, #324]	@ (8002b54 <HAL_ADC_Init+0x29c>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d101      	bne.n	8002a16 <HAL_ADC_Init+0x15e>
 8002a12:	4a52      	ldr	r2, [pc, #328]	@ (8002b5c <HAL_ADC_Init+0x2a4>)
 8002a14:	e000      	b.n	8002a18 <HAL_ADC_Init+0x160>
 8002a16:	4a52      	ldr	r2, [pc, #328]	@ (8002b60 <HAL_ADC_Init+0x2a8>)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	4610      	mov	r0, r2
 8002a20:	f7ff fd62 	bl	80024e8 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002a24:	f7ff fd54 	bl	80024d0 <HAL_GetREVID>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d914      	bls.n	8002a5c <HAL_ADC_Init+0x1a4>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	2b10      	cmp	r3, #16
 8002a38:	d110      	bne.n	8002a5c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	7d5b      	ldrb	r3, [r3, #21]
 8002a3e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002a44:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002a4a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	7f1b      	ldrb	r3, [r3, #28]
 8002a50:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002a52:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002a54:	f043 030c 	orr.w	r3, r3, #12
 8002a58:	61bb      	str	r3, [r7, #24]
 8002a5a:	e00d      	b.n	8002a78 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	7d5b      	ldrb	r3, [r3, #21]
 8002a60:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002a66:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002a6c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	7f1b      	ldrb	r3, [r3, #28]
 8002a72:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002a74:	4313      	orrs	r3, r2
 8002a76:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	7f1b      	ldrb	r3, [r3, #28]
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d106      	bne.n	8002a8e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6a1b      	ldr	r3, [r3, #32]
 8002a84:	3b01      	subs	r3, #1
 8002a86:	045b      	lsls	r3, r3, #17
 8002a88:	69ba      	ldr	r2, [r7, #24]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d009      	beq.n	8002aaa <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a9a:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aa2:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002aa4:	69ba      	ldr	r2, [r7, #24]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	68da      	ldr	r2, [r3, #12]
 8002ab0:	4b2c      	ldr	r3, [pc, #176]	@ (8002b64 <HAL_ADC_Init+0x2ac>)
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	6812      	ldr	r2, [r2, #0]
 8002ab8:	69b9      	ldr	r1, [r7, #24]
 8002aba:	430b      	orrs	r3, r1
 8002abc:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7ff fed2 	bl	800286c <LL_ADC_REG_IsConversionOngoing>
 8002ac8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7ff fedf 	bl	8002892 <LL_ADC_INJ_IsConversionOngoing>
 8002ad4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d15f      	bne.n	8002b9c <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d15c      	bne.n	8002b9c <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	7d1b      	ldrb	r3, [r3, #20]
 8002ae6:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8002aec:	4313      	orrs	r3, r2
 8002aee:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	68da      	ldr	r2, [r3, #12]
 8002af6:	4b1c      	ldr	r3, [pc, #112]	@ (8002b68 <HAL_ADC_Init+0x2b0>)
 8002af8:	4013      	ands	r3, r2
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	6812      	ldr	r2, [r2, #0]
 8002afe:	69b9      	ldr	r1, [r7, #24]
 8002b00:	430b      	orrs	r3, r1
 8002b02:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d130      	bne.n	8002b70 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b12:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	691a      	ldr	r2, [r3, #16]
 8002b1a:	4b14      	ldr	r3, [pc, #80]	@ (8002b6c <HAL_ADC_Init+0x2b4>)
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002b22:	3a01      	subs	r2, #1
 8002b24:	0411      	lsls	r1, r2, #16
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002b2a:	4311      	orrs	r1, r2
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002b30:	4311      	orrs	r1, r2
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002b36:	430a      	orrs	r2, r1
 8002b38:	431a      	orrs	r2, r3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f042 0201 	orr.w	r2, r2, #1
 8002b42:	611a      	str	r2, [r3, #16]
 8002b44:	e01c      	b.n	8002b80 <HAL_ADC_Init+0x2c8>
 8002b46:	bf00      	nop
 8002b48:	24000000 	.word	0x24000000
 8002b4c:	053e2d63 	.word	0x053e2d63
 8002b50:	40022000 	.word	0x40022000
 8002b54:	40022100 	.word	0x40022100
 8002b58:	58026000 	.word	0x58026000
 8002b5c:	40022300 	.word	0x40022300
 8002b60:	58026300 	.word	0x58026300
 8002b64:	fff0c003 	.word	0xfff0c003
 8002b68:	ffffbffc 	.word	0xffffbffc
 8002b6c:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	691a      	ldr	r2, [r3, #16]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f022 0201 	bic.w	r2, r2, #1
 8002b7e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	691b      	ldr	r3, [r3, #16]
 8002b86:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	430a      	orrs	r2, r1
 8002b94:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f000 fd82 	bl	80036a0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d10c      	bne.n	8002bbe <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002baa:	f023 010f 	bic.w	r1, r3, #15
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	699b      	ldr	r3, [r3, #24]
 8002bb2:	1e5a      	subs	r2, r3, #1
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	430a      	orrs	r2, r1
 8002bba:	631a      	str	r2, [r3, #48]	@ 0x30
 8002bbc:	e007      	b.n	8002bce <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f022 020f 	bic.w	r2, r2, #15
 8002bcc:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bd2:	f023 0303 	bic.w	r3, r3, #3
 8002bd6:	f043 0201 	orr.w	r2, r3, #1
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	655a      	str	r2, [r3, #84]	@ 0x54
 8002bde:	e007      	b.n	8002bf0 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002be4:	f043 0210 	orr.w	r2, r3, #16
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002bf0:	7ffb      	ldrb	r3, [r7, #31]
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3724      	adds	r7, #36	@ 0x24
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd90      	pop	{r4, r7, pc}
 8002bfa:	bf00      	nop

08002bfc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b086      	sub	sp, #24
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	60f8      	str	r0, [r7, #12]
 8002c04:	60b9      	str	r1, [r7, #8]
 8002c06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a55      	ldr	r2, [pc, #340]	@ (8002d64 <HAL_ADC_Start_DMA+0x168>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d004      	beq.n	8002c1c <HAL_ADC_Start_DMA+0x20>
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a54      	ldr	r2, [pc, #336]	@ (8002d68 <HAL_ADC_Start_DMA+0x16c>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d101      	bne.n	8002c20 <HAL_ADC_Start_DMA+0x24>
 8002c1c:	4b53      	ldr	r3, [pc, #332]	@ (8002d6c <HAL_ADC_Start_DMA+0x170>)
 8002c1e:	e000      	b.n	8002c22 <HAL_ADC_Start_DMA+0x26>
 8002c20:	4b53      	ldr	r3, [pc, #332]	@ (8002d70 <HAL_ADC_Start_DMA+0x174>)
 8002c22:	4618      	mov	r0, r3
 8002c24:	f7ff fd8a 	bl	800273c <LL_ADC_GetMultimode>
 8002c28:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7ff fe1c 	bl	800286c <LL_ADC_REG_IsConversionOngoing>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	f040 808c 	bne.w	8002d54 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d101      	bne.n	8002c4a <HAL_ADC_Start_DMA+0x4e>
 8002c46:	2302      	movs	r3, #2
 8002c48:	e087      	b.n	8002d5a <HAL_ADC_Start_DMA+0x15e>
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d005      	beq.n	8002c64 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	2b05      	cmp	r3, #5
 8002c5c:	d002      	beq.n	8002c64 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	2b09      	cmp	r3, #9
 8002c62:	d170      	bne.n	8002d46 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002c64:	68f8      	ldr	r0, [r7, #12]
 8002c66:	f000 fbfd 	bl	8003464 <ADC_Enable>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002c6e:	7dfb      	ldrb	r3, [r7, #23]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d163      	bne.n	8002d3c <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002c78:	4b3e      	ldr	r3, [pc, #248]	@ (8002d74 <HAL_ADC_Start_DMA+0x178>)
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a37      	ldr	r2, [pc, #220]	@ (8002d68 <HAL_ADC_Start_DMA+0x16c>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d002      	beq.n	8002c94 <HAL_ADC_Start_DMA+0x98>
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	e000      	b.n	8002c96 <HAL_ADC_Start_DMA+0x9a>
 8002c94:	4b33      	ldr	r3, [pc, #204]	@ (8002d64 <HAL_ADC_Start_DMA+0x168>)
 8002c96:	68fa      	ldr	r2, [r7, #12]
 8002c98:	6812      	ldr	r2, [r2, #0]
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d002      	beq.n	8002ca4 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d105      	bne.n	8002cb0 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ca8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cb4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d006      	beq.n	8002cca <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cc0:	f023 0206 	bic.w	r2, r3, #6
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	659a      	str	r2, [r3, #88]	@ 0x58
 8002cc8:	e002      	b.n	8002cd0 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cd4:	4a28      	ldr	r2, [pc, #160]	@ (8002d78 <HAL_ADC_Start_DMA+0x17c>)
 8002cd6:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cdc:	4a27      	ldr	r2, [pc, #156]	@ (8002d7c <HAL_ADC_Start_DMA+0x180>)
 8002cde:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ce4:	4a26      	ldr	r2, [pc, #152]	@ (8002d80 <HAL_ADC_Start_DMA+0x184>)
 8002ce6:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	221c      	movs	r2, #28
 8002cee:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	685a      	ldr	r2, [r3, #4]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f042 0210 	orr.w	r2, r2, #16
 8002d06:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d10:	4619      	mov	r1, r3
 8002d12:	4610      	mov	r0, r2
 8002d14:	f7ff fcaf 	bl	8002676 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	3340      	adds	r3, #64	@ 0x40
 8002d22:	4619      	mov	r1, r3
 8002d24:	68ba      	ldr	r2, [r7, #8]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f001 fbae 	bl	8004488 <HAL_DMA_Start_IT>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4618      	mov	r0, r3
 8002d36:	f7ff fd85 	bl	8002844 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002d3a:	e00d      	b.n	8002d58 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8002d44:	e008      	b.n	8002d58 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002d52:	e001      	b.n	8002d58 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002d54:	2302      	movs	r3, #2
 8002d56:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002d58:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3718      	adds	r7, #24
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	40022000 	.word	0x40022000
 8002d68:	40022100 	.word	0x40022100
 8002d6c:	40022300 	.word	0x40022300
 8002d70:	58026300 	.word	0x58026300
 8002d74:	fffff0fe 	.word	0xfffff0fe
 8002d78:	08003579 	.word	0x08003579
 8002d7c:	08003651 	.word	0x08003651
 8002d80:	0800366d 	.word	0x0800366d

08002d84 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002d8c:	bf00      	nop
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002da0:	bf00      	nop
 8002da2:	370c      	adds	r7, #12
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr

08002dac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002dac:	b590      	push	{r4, r7, lr}
 8002dae:	b0a1      	sub	sp, #132	@ 0x84
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002db6:	2300      	movs	r3, #0
 8002db8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	4a65      	ldr	r2, [pc, #404]	@ (8002f5c <HAL_ADC_ConfigChannel+0x1b0>)
 8002dc6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d101      	bne.n	8002dd6 <HAL_ADC_ConfigChannel+0x2a>
 8002dd2:	2302      	movs	r3, #2
 8002dd4:	e32e      	b.n	8003434 <HAL_ADC_ConfigChannel+0x688>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2201      	movs	r2, #1
 8002dda:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4618      	mov	r0, r3
 8002de4:	f7ff fd42 	bl	800286c <LL_ADC_REG_IsConversionOngoing>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	f040 8313 	bne.w	8003416 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	db2c      	blt.n	8002e52 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d108      	bne.n	8002e16 <HAL_ADC_ConfigChannel+0x6a>
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	0e9b      	lsrs	r3, r3, #26
 8002e0a:	f003 031f 	and.w	r3, r3, #31
 8002e0e:	2201      	movs	r2, #1
 8002e10:	fa02 f303 	lsl.w	r3, r2, r3
 8002e14:	e016      	b.n	8002e44 <HAL_ADC_ConfigChannel+0x98>
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e1c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002e1e:	fa93 f3a3 	rbit	r3, r3
 8002e22:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002e24:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002e26:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002e28:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d101      	bne.n	8002e32 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8002e2e:	2320      	movs	r3, #32
 8002e30:	e003      	b.n	8002e3a <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8002e32:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002e34:	fab3 f383 	clz	r3, r3
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	f003 031f 	and.w	r3, r3, #31
 8002e3e:	2201      	movs	r2, #1
 8002e40:	fa02 f303 	lsl.w	r3, r2, r3
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	6812      	ldr	r2, [r2, #0]
 8002e48:	69d1      	ldr	r1, [r2, #28]
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	6812      	ldr	r2, [r2, #0]
 8002e4e:	430b      	orrs	r3, r1
 8002e50:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6818      	ldr	r0, [r3, #0]
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	6859      	ldr	r1, [r3, #4]
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	461a      	mov	r2, r3
 8002e60:	f7ff fbdd 	bl	800261e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f7ff fcff 	bl	800286c <LL_ADC_REG_IsConversionOngoing>
 8002e6e:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4618      	mov	r0, r3
 8002e76:	f7ff fd0c 	bl	8002892 <LL_ADC_INJ_IsConversionOngoing>
 8002e7a:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002e7c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	f040 80b8 	bne.w	8002ff4 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002e84:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	f040 80b4 	bne.w	8002ff4 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6818      	ldr	r0, [r3, #0]
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	6819      	ldr	r1, [r3, #0]
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	461a      	mov	r2, r3
 8002e9a:	f7ff fbff 	bl	800269c <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002e9e:	4b30      	ldr	r3, [pc, #192]	@ (8002f60 <HAL_ADC_ConfigChannel+0x1b4>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8002ea6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002eaa:	d10b      	bne.n	8002ec4 <HAL_ADC_ConfigChannel+0x118>
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	695a      	ldr	r2, [r3, #20]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	089b      	lsrs	r3, r3, #2
 8002eb8:	f003 0307 	and.w	r3, r3, #7
 8002ebc:	005b      	lsls	r3, r3, #1
 8002ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec2:	e01d      	b.n	8002f00 <HAL_ADC_ConfigChannel+0x154>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	f003 0310 	and.w	r3, r3, #16
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d10b      	bne.n	8002eea <HAL_ADC_ConfigChannel+0x13e>
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	695a      	ldr	r2, [r3, #20]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	089b      	lsrs	r3, r3, #2
 8002ede:	f003 0307 	and.w	r3, r3, #7
 8002ee2:	005b      	lsls	r3, r3, #1
 8002ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee8:	e00a      	b.n	8002f00 <HAL_ADC_ConfigChannel+0x154>
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	695a      	ldr	r2, [r3, #20]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	089b      	lsrs	r3, r3, #2
 8002ef6:	f003 0304 	and.w	r3, r3, #4
 8002efa:	005b      	lsls	r3, r3, #1
 8002efc:	fa02 f303 	lsl.w	r3, r2, r3
 8002f00:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	691b      	ldr	r3, [r3, #16]
 8002f06:	2b04      	cmp	r3, #4
 8002f08:	d02c      	beq.n	8002f64 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6818      	ldr	r0, [r3, #0]
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	6919      	ldr	r1, [r3, #16]
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002f18:	f7ff fb1a 	bl	8002550 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6818      	ldr	r0, [r3, #0]
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	6919      	ldr	r1, [r3, #16]
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	7e5b      	ldrb	r3, [r3, #25]
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d102      	bne.n	8002f32 <HAL_ADC_ConfigChannel+0x186>
 8002f2c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002f30:	e000      	b.n	8002f34 <HAL_ADC_ConfigChannel+0x188>
 8002f32:	2300      	movs	r3, #0
 8002f34:	461a      	mov	r2, r3
 8002f36:	f7ff fb44 	bl	80025c2 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6818      	ldr	r0, [r3, #0]
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	6919      	ldr	r1, [r3, #16]
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	7e1b      	ldrb	r3, [r3, #24]
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d102      	bne.n	8002f50 <HAL_ADC_ConfigChannel+0x1a4>
 8002f4a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002f4e:	e000      	b.n	8002f52 <HAL_ADC_ConfigChannel+0x1a6>
 8002f50:	2300      	movs	r3, #0
 8002f52:	461a      	mov	r2, r3
 8002f54:	f7ff fb1c 	bl	8002590 <LL_ADC_SetDataRightShift>
 8002f58:	e04c      	b.n	8002ff4 <HAL_ADC_ConfigChannel+0x248>
 8002f5a:	bf00      	nop
 8002f5c:	47ff0000 	.word	0x47ff0000
 8002f60:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f6a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	069b      	lsls	r3, r3, #26
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d107      	bne.n	8002f88 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002f86:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002f8e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	069b      	lsls	r3, r3, #26
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d107      	bne.n	8002fac <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002faa:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002fb2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	069b      	lsls	r3, r3, #26
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d107      	bne.n	8002fd0 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002fce:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002fd6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	069b      	lsls	r3, r3, #26
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d107      	bne.n	8002ff4 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002ff2:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f7ff fc0f 	bl	800281c <LL_ADC_IsEnabled>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	f040 8211 	bne.w	8003428 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6818      	ldr	r0, [r3, #0]
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	6819      	ldr	r1, [r3, #0]
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	461a      	mov	r2, r3
 8003014:	f7ff fb6e 	bl	80026f4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	4aa1      	ldr	r2, [pc, #644]	@ (80032a4 <HAL_ADC_ConfigChannel+0x4f8>)
 800301e:	4293      	cmp	r3, r2
 8003020:	f040 812e 	bne.w	8003280 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003030:	2b00      	cmp	r3, #0
 8003032:	d10b      	bne.n	800304c <HAL_ADC_ConfigChannel+0x2a0>
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	0e9b      	lsrs	r3, r3, #26
 800303a:	3301      	adds	r3, #1
 800303c:	f003 031f 	and.w	r3, r3, #31
 8003040:	2b09      	cmp	r3, #9
 8003042:	bf94      	ite	ls
 8003044:	2301      	movls	r3, #1
 8003046:	2300      	movhi	r3, #0
 8003048:	b2db      	uxtb	r3, r3
 800304a:	e019      	b.n	8003080 <HAL_ADC_ConfigChannel+0x2d4>
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003052:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003054:	fa93 f3a3 	rbit	r3, r3
 8003058:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800305a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800305c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800305e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003060:	2b00      	cmp	r3, #0
 8003062:	d101      	bne.n	8003068 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8003064:	2320      	movs	r3, #32
 8003066:	e003      	b.n	8003070 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8003068:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800306a:	fab3 f383 	clz	r3, r3
 800306e:	b2db      	uxtb	r3, r3
 8003070:	3301      	adds	r3, #1
 8003072:	f003 031f 	and.w	r3, r3, #31
 8003076:	2b09      	cmp	r3, #9
 8003078:	bf94      	ite	ls
 800307a:	2301      	movls	r3, #1
 800307c:	2300      	movhi	r3, #0
 800307e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003080:	2b00      	cmp	r3, #0
 8003082:	d079      	beq.n	8003178 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800308c:	2b00      	cmp	r3, #0
 800308e:	d107      	bne.n	80030a0 <HAL_ADC_ConfigChannel+0x2f4>
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	0e9b      	lsrs	r3, r3, #26
 8003096:	3301      	adds	r3, #1
 8003098:	069b      	lsls	r3, r3, #26
 800309a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800309e:	e015      	b.n	80030cc <HAL_ADC_ConfigChannel+0x320>
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80030a8:	fa93 f3a3 	rbit	r3, r3
 80030ac:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80030ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80030b0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80030b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d101      	bne.n	80030bc <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 80030b8:	2320      	movs	r3, #32
 80030ba:	e003      	b.n	80030c4 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 80030bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80030be:	fab3 f383 	clz	r3, r3
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	3301      	adds	r3, #1
 80030c6:	069b      	lsls	r3, r3, #26
 80030c8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d109      	bne.n	80030ec <HAL_ADC_ConfigChannel+0x340>
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	0e9b      	lsrs	r3, r3, #26
 80030de:	3301      	adds	r3, #1
 80030e0:	f003 031f 	and.w	r3, r3, #31
 80030e4:	2101      	movs	r1, #1
 80030e6:	fa01 f303 	lsl.w	r3, r1, r3
 80030ea:	e017      	b.n	800311c <HAL_ADC_ConfigChannel+0x370>
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80030f4:	fa93 f3a3 	rbit	r3, r3
 80030f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80030fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030fc:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80030fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003100:	2b00      	cmp	r3, #0
 8003102:	d101      	bne.n	8003108 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8003104:	2320      	movs	r3, #32
 8003106:	e003      	b.n	8003110 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8003108:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800310a:	fab3 f383 	clz	r3, r3
 800310e:	b2db      	uxtb	r3, r3
 8003110:	3301      	adds	r3, #1
 8003112:	f003 031f 	and.w	r3, r3, #31
 8003116:	2101      	movs	r1, #1
 8003118:	fa01 f303 	lsl.w	r3, r1, r3
 800311c:	ea42 0103 	orr.w	r1, r2, r3
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003128:	2b00      	cmp	r3, #0
 800312a:	d10a      	bne.n	8003142 <HAL_ADC_ConfigChannel+0x396>
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	0e9b      	lsrs	r3, r3, #26
 8003132:	3301      	adds	r3, #1
 8003134:	f003 021f 	and.w	r2, r3, #31
 8003138:	4613      	mov	r3, r2
 800313a:	005b      	lsls	r3, r3, #1
 800313c:	4413      	add	r3, r2
 800313e:	051b      	lsls	r3, r3, #20
 8003140:	e018      	b.n	8003174 <HAL_ADC_ConfigChannel+0x3c8>
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003148:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800314a:	fa93 f3a3 	rbit	r3, r3
 800314e:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8003150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003152:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8003154:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003156:	2b00      	cmp	r3, #0
 8003158:	d101      	bne.n	800315e <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 800315a:	2320      	movs	r3, #32
 800315c:	e003      	b.n	8003166 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 800315e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003160:	fab3 f383 	clz	r3, r3
 8003164:	b2db      	uxtb	r3, r3
 8003166:	3301      	adds	r3, #1
 8003168:	f003 021f 	and.w	r2, r3, #31
 800316c:	4613      	mov	r3, r2
 800316e:	005b      	lsls	r3, r3, #1
 8003170:	4413      	add	r3, r2
 8003172:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003174:	430b      	orrs	r3, r1
 8003176:	e07e      	b.n	8003276 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003180:	2b00      	cmp	r3, #0
 8003182:	d107      	bne.n	8003194 <HAL_ADC_ConfigChannel+0x3e8>
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	0e9b      	lsrs	r3, r3, #26
 800318a:	3301      	adds	r3, #1
 800318c:	069b      	lsls	r3, r3, #26
 800318e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003192:	e015      	b.n	80031c0 <HAL_ADC_ConfigChannel+0x414>
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800319a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800319c:	fa93 f3a3 	rbit	r3, r3
 80031a0:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80031a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80031a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d101      	bne.n	80031b0 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 80031ac:	2320      	movs	r3, #32
 80031ae:	e003      	b.n	80031b8 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 80031b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031b2:	fab3 f383 	clz	r3, r3
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	3301      	adds	r3, #1
 80031ba:	069b      	lsls	r3, r3, #26
 80031bc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d109      	bne.n	80031e0 <HAL_ADC_ConfigChannel+0x434>
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	0e9b      	lsrs	r3, r3, #26
 80031d2:	3301      	adds	r3, #1
 80031d4:	f003 031f 	and.w	r3, r3, #31
 80031d8:	2101      	movs	r1, #1
 80031da:	fa01 f303 	lsl.w	r3, r1, r3
 80031de:	e017      	b.n	8003210 <HAL_ADC_ConfigChannel+0x464>
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	fa93 f3a3 	rbit	r3, r3
 80031ec:	61bb      	str	r3, [r7, #24]
  return result;
 80031ee:	69bb      	ldr	r3, [r7, #24]
 80031f0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80031f2:	6a3b      	ldr	r3, [r7, #32]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d101      	bne.n	80031fc <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 80031f8:	2320      	movs	r3, #32
 80031fa:	e003      	b.n	8003204 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 80031fc:	6a3b      	ldr	r3, [r7, #32]
 80031fe:	fab3 f383 	clz	r3, r3
 8003202:	b2db      	uxtb	r3, r3
 8003204:	3301      	adds	r3, #1
 8003206:	f003 031f 	and.w	r3, r3, #31
 800320a:	2101      	movs	r1, #1
 800320c:	fa01 f303 	lsl.w	r3, r1, r3
 8003210:	ea42 0103 	orr.w	r1, r2, r3
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800321c:	2b00      	cmp	r3, #0
 800321e:	d10d      	bne.n	800323c <HAL_ADC_ConfigChannel+0x490>
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	0e9b      	lsrs	r3, r3, #26
 8003226:	3301      	adds	r3, #1
 8003228:	f003 021f 	and.w	r2, r3, #31
 800322c:	4613      	mov	r3, r2
 800322e:	005b      	lsls	r3, r3, #1
 8003230:	4413      	add	r3, r2
 8003232:	3b1e      	subs	r3, #30
 8003234:	051b      	lsls	r3, r3, #20
 8003236:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800323a:	e01b      	b.n	8003274 <HAL_ADC_ConfigChannel+0x4c8>
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	fa93 f3a3 	rbit	r3, r3
 8003248:	60fb      	str	r3, [r7, #12]
  return result;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d101      	bne.n	8003258 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8003254:	2320      	movs	r3, #32
 8003256:	e003      	b.n	8003260 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	fab3 f383 	clz	r3, r3
 800325e:	b2db      	uxtb	r3, r3
 8003260:	3301      	adds	r3, #1
 8003262:	f003 021f 	and.w	r2, r3, #31
 8003266:	4613      	mov	r3, r2
 8003268:	005b      	lsls	r3, r3, #1
 800326a:	4413      	add	r3, r2
 800326c:	3b1e      	subs	r3, #30
 800326e:	051b      	lsls	r3, r3, #20
 8003270:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003274:	430b      	orrs	r3, r1
 8003276:	683a      	ldr	r2, [r7, #0]
 8003278:	6892      	ldr	r2, [r2, #8]
 800327a:	4619      	mov	r1, r3
 800327c:	f7ff fa0e 	bl	800269c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2b00      	cmp	r3, #0
 8003286:	f280 80cf 	bge.w	8003428 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a06      	ldr	r2, [pc, #24]	@ (80032a8 <HAL_ADC_ConfigChannel+0x4fc>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d004      	beq.n	800329e <HAL_ADC_ConfigChannel+0x4f2>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a04      	ldr	r2, [pc, #16]	@ (80032ac <HAL_ADC_ConfigChannel+0x500>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d10a      	bne.n	80032b4 <HAL_ADC_ConfigChannel+0x508>
 800329e:	4b04      	ldr	r3, [pc, #16]	@ (80032b0 <HAL_ADC_ConfigChannel+0x504>)
 80032a0:	e009      	b.n	80032b6 <HAL_ADC_ConfigChannel+0x50a>
 80032a2:	bf00      	nop
 80032a4:	47ff0000 	.word	0x47ff0000
 80032a8:	40022000 	.word	0x40022000
 80032ac:	40022100 	.word	0x40022100
 80032b0:	40022300 	.word	0x40022300
 80032b4:	4b61      	ldr	r3, [pc, #388]	@ (800343c <HAL_ADC_ConfigChannel+0x690>)
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7ff f93c 	bl	8002534 <LL_ADC_GetCommonPathInternalCh>
 80032bc:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a5f      	ldr	r2, [pc, #380]	@ (8003440 <HAL_ADC_ConfigChannel+0x694>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d004      	beq.n	80032d2 <HAL_ADC_ConfigChannel+0x526>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a5d      	ldr	r2, [pc, #372]	@ (8003444 <HAL_ADC_ConfigChannel+0x698>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d10e      	bne.n	80032f0 <HAL_ADC_ConfigChannel+0x544>
 80032d2:	485b      	ldr	r0, [pc, #364]	@ (8003440 <HAL_ADC_ConfigChannel+0x694>)
 80032d4:	f7ff faa2 	bl	800281c <LL_ADC_IsEnabled>
 80032d8:	4604      	mov	r4, r0
 80032da:	485a      	ldr	r0, [pc, #360]	@ (8003444 <HAL_ADC_ConfigChannel+0x698>)
 80032dc:	f7ff fa9e 	bl	800281c <LL_ADC_IsEnabled>
 80032e0:	4603      	mov	r3, r0
 80032e2:	4323      	orrs	r3, r4
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	bf0c      	ite	eq
 80032e8:	2301      	moveq	r3, #1
 80032ea:	2300      	movne	r3, #0
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	e008      	b.n	8003302 <HAL_ADC_ConfigChannel+0x556>
 80032f0:	4855      	ldr	r0, [pc, #340]	@ (8003448 <HAL_ADC_ConfigChannel+0x69c>)
 80032f2:	f7ff fa93 	bl	800281c <LL_ADC_IsEnabled>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	bf0c      	ite	eq
 80032fc:	2301      	moveq	r3, #1
 80032fe:	2300      	movne	r3, #0
 8003300:	b2db      	uxtb	r3, r3
 8003302:	2b00      	cmp	r3, #0
 8003304:	d07d      	beq.n	8003402 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a50      	ldr	r2, [pc, #320]	@ (800344c <HAL_ADC_ConfigChannel+0x6a0>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d130      	bne.n	8003372 <HAL_ADC_ConfigChannel+0x5c6>
 8003310:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003312:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d12b      	bne.n	8003372 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a4a      	ldr	r2, [pc, #296]	@ (8003448 <HAL_ADC_ConfigChannel+0x69c>)
 8003320:	4293      	cmp	r3, r2
 8003322:	f040 8081 	bne.w	8003428 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a45      	ldr	r2, [pc, #276]	@ (8003440 <HAL_ADC_ConfigChannel+0x694>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d004      	beq.n	800333a <HAL_ADC_ConfigChannel+0x58e>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a43      	ldr	r2, [pc, #268]	@ (8003444 <HAL_ADC_ConfigChannel+0x698>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d101      	bne.n	800333e <HAL_ADC_ConfigChannel+0x592>
 800333a:	4a45      	ldr	r2, [pc, #276]	@ (8003450 <HAL_ADC_ConfigChannel+0x6a4>)
 800333c:	e000      	b.n	8003340 <HAL_ADC_ConfigChannel+0x594>
 800333e:	4a3f      	ldr	r2, [pc, #252]	@ (800343c <HAL_ADC_ConfigChannel+0x690>)
 8003340:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003342:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003346:	4619      	mov	r1, r3
 8003348:	4610      	mov	r0, r2
 800334a:	f7ff f8e0 	bl	800250e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800334e:	4b41      	ldr	r3, [pc, #260]	@ (8003454 <HAL_ADC_ConfigChannel+0x6a8>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	099b      	lsrs	r3, r3, #6
 8003354:	4a40      	ldr	r2, [pc, #256]	@ (8003458 <HAL_ADC_ConfigChannel+0x6ac>)
 8003356:	fba2 2303 	umull	r2, r3, r2, r3
 800335a:	099b      	lsrs	r3, r3, #6
 800335c:	3301      	adds	r3, #1
 800335e:	005b      	lsls	r3, r3, #1
 8003360:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003362:	e002      	b.n	800336a <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	3b01      	subs	r3, #1
 8003368:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d1f9      	bne.n	8003364 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003370:	e05a      	b.n	8003428 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a39      	ldr	r2, [pc, #228]	@ (800345c <HAL_ADC_ConfigChannel+0x6b0>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d11e      	bne.n	80033ba <HAL_ADC_ConfigChannel+0x60e>
 800337c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800337e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d119      	bne.n	80033ba <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a2f      	ldr	r2, [pc, #188]	@ (8003448 <HAL_ADC_ConfigChannel+0x69c>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d14b      	bne.n	8003428 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a2a      	ldr	r2, [pc, #168]	@ (8003440 <HAL_ADC_ConfigChannel+0x694>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d004      	beq.n	80033a4 <HAL_ADC_ConfigChannel+0x5f8>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a29      	ldr	r2, [pc, #164]	@ (8003444 <HAL_ADC_ConfigChannel+0x698>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d101      	bne.n	80033a8 <HAL_ADC_ConfigChannel+0x5fc>
 80033a4:	4a2a      	ldr	r2, [pc, #168]	@ (8003450 <HAL_ADC_ConfigChannel+0x6a4>)
 80033a6:	e000      	b.n	80033aa <HAL_ADC_ConfigChannel+0x5fe>
 80033a8:	4a24      	ldr	r2, [pc, #144]	@ (800343c <HAL_ADC_ConfigChannel+0x690>)
 80033aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033ac:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80033b0:	4619      	mov	r1, r3
 80033b2:	4610      	mov	r0, r2
 80033b4:	f7ff f8ab 	bl	800250e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80033b8:	e036      	b.n	8003428 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a28      	ldr	r2, [pc, #160]	@ (8003460 <HAL_ADC_ConfigChannel+0x6b4>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d131      	bne.n	8003428 <HAL_ADC_ConfigChannel+0x67c>
 80033c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d12c      	bne.n	8003428 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a1d      	ldr	r2, [pc, #116]	@ (8003448 <HAL_ADC_ConfigChannel+0x69c>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d127      	bne.n	8003428 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a18      	ldr	r2, [pc, #96]	@ (8003440 <HAL_ADC_ConfigChannel+0x694>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d004      	beq.n	80033ec <HAL_ADC_ConfigChannel+0x640>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a17      	ldr	r2, [pc, #92]	@ (8003444 <HAL_ADC_ConfigChannel+0x698>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d101      	bne.n	80033f0 <HAL_ADC_ConfigChannel+0x644>
 80033ec:	4a18      	ldr	r2, [pc, #96]	@ (8003450 <HAL_ADC_ConfigChannel+0x6a4>)
 80033ee:	e000      	b.n	80033f2 <HAL_ADC_ConfigChannel+0x646>
 80033f0:	4a12      	ldr	r2, [pc, #72]	@ (800343c <HAL_ADC_ConfigChannel+0x690>)
 80033f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033f4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80033f8:	4619      	mov	r1, r3
 80033fa:	4610      	mov	r0, r2
 80033fc:	f7ff f887 	bl	800250e <LL_ADC_SetCommonPathInternalCh>
 8003400:	e012      	b.n	8003428 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003406:	f043 0220 	orr.w	r2, r3, #32
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003414:	e008      	b.n	8003428 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800341a:	f043 0220 	orr.w	r2, r3, #32
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2200      	movs	r2, #0
 800342c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003430:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003434:	4618      	mov	r0, r3
 8003436:	3784      	adds	r7, #132	@ 0x84
 8003438:	46bd      	mov	sp, r7
 800343a:	bd90      	pop	{r4, r7, pc}
 800343c:	58026300 	.word	0x58026300
 8003440:	40022000 	.word	0x40022000
 8003444:	40022100 	.word	0x40022100
 8003448:	58026000 	.word	0x58026000
 800344c:	cb840000 	.word	0xcb840000
 8003450:	40022300 	.word	0x40022300
 8003454:	24000000 	.word	0x24000000
 8003458:	053e2d63 	.word	0x053e2d63
 800345c:	c7520000 	.word	0xc7520000
 8003460:	cfb80000 	.word	0xcfb80000

08003464 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4618      	mov	r0, r3
 8003472:	f7ff f9d3 	bl	800281c <LL_ADC_IsEnabled>
 8003476:	4603      	mov	r3, r0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d16e      	bne.n	800355a <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	689a      	ldr	r2, [r3, #8]
 8003482:	4b38      	ldr	r3, [pc, #224]	@ (8003564 <ADC_Enable+0x100>)
 8003484:	4013      	ands	r3, r2
 8003486:	2b00      	cmp	r3, #0
 8003488:	d00d      	beq.n	80034a6 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800348e:	f043 0210 	orr.w	r2, r3, #16
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800349a:	f043 0201 	orr.w	r2, r3, #1
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e05a      	b.n	800355c <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4618      	mov	r0, r3
 80034ac:	f7ff f9a2 	bl	80027f4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80034b0:	f7fe ffde 	bl	8002470 <HAL_GetTick>
 80034b4:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a2b      	ldr	r2, [pc, #172]	@ (8003568 <ADC_Enable+0x104>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d004      	beq.n	80034ca <ADC_Enable+0x66>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a29      	ldr	r2, [pc, #164]	@ (800356c <ADC_Enable+0x108>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d101      	bne.n	80034ce <ADC_Enable+0x6a>
 80034ca:	4b29      	ldr	r3, [pc, #164]	@ (8003570 <ADC_Enable+0x10c>)
 80034cc:	e000      	b.n	80034d0 <ADC_Enable+0x6c>
 80034ce:	4b29      	ldr	r3, [pc, #164]	@ (8003574 <ADC_Enable+0x110>)
 80034d0:	4618      	mov	r0, r3
 80034d2:	f7ff f933 	bl	800273c <LL_ADC_GetMultimode>
 80034d6:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a23      	ldr	r2, [pc, #140]	@ (800356c <ADC_Enable+0x108>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d002      	beq.n	80034e8 <ADC_Enable+0x84>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	e000      	b.n	80034ea <ADC_Enable+0x86>
 80034e8:	4b1f      	ldr	r3, [pc, #124]	@ (8003568 <ADC_Enable+0x104>)
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	6812      	ldr	r2, [r2, #0]
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d02c      	beq.n	800354c <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d130      	bne.n	800355a <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80034f8:	e028      	b.n	800354c <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4618      	mov	r0, r3
 8003500:	f7ff f98c 	bl	800281c <LL_ADC_IsEnabled>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d104      	bne.n	8003514 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4618      	mov	r0, r3
 8003510:	f7ff f970 	bl	80027f4 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003514:	f7fe ffac 	bl	8002470 <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	2b02      	cmp	r3, #2
 8003520:	d914      	bls.n	800354c <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0301 	and.w	r3, r3, #1
 800352c:	2b01      	cmp	r3, #1
 800352e:	d00d      	beq.n	800354c <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003534:	f043 0210 	orr.w	r2, r3, #16
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003540:	f043 0201 	orr.w	r2, r3, #1
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e007      	b.n	800355c <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0301 	and.w	r3, r3, #1
 8003556:	2b01      	cmp	r3, #1
 8003558:	d1cf      	bne.n	80034fa <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800355a:	2300      	movs	r3, #0
}
 800355c:	4618      	mov	r0, r3
 800355e:	3710      	adds	r7, #16
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}
 8003564:	8000003f 	.word	0x8000003f
 8003568:	40022000 	.word	0x40022000
 800356c:	40022100 	.word	0x40022100
 8003570:	40022300 	.word	0x40022300
 8003574:	58026300 	.word	0x58026300

08003578 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003584:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800358a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800358e:	2b00      	cmp	r3, #0
 8003590:	d14b      	bne.n	800362a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003596:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0308 	and.w	r3, r3, #8
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d021      	beq.n	80035f0 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4618      	mov	r0, r3
 80035b2:	f7ff f821 	bl	80025f8 <LL_ADC_REG_IsTriggerSourceSWStart>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d032      	beq.n	8003622 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d12b      	bne.n	8003622 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035ce:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035da:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d11f      	bne.n	8003622 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035e6:	f043 0201 	orr.w	r2, r3, #1
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	655a      	str	r2, [r3, #84]	@ 0x54
 80035ee:	e018      	b.n	8003622 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	f003 0303 	and.w	r3, r3, #3
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d111      	bne.n	8003622 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003602:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800360e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d105      	bne.n	8003622 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800361a:	f043 0201 	orr.w	r2, r3, #1
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003622:	68f8      	ldr	r0, [r7, #12]
 8003624:	f7fd f82c 	bl	8000680 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003628:	e00e      	b.n	8003648 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800362e:	f003 0310 	and.w	r3, r3, #16
 8003632:	2b00      	cmp	r3, #0
 8003634:	d003      	beq.n	800363e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003636:	68f8      	ldr	r0, [r7, #12]
 8003638:	f7ff fbae 	bl	8002d98 <HAL_ADC_ErrorCallback>
}
 800363c:	e004      	b.n	8003648 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003642:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	4798      	blx	r3
}
 8003648:	bf00      	nop
 800364a:	3710      	adds	r7, #16
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}

08003650 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b084      	sub	sp, #16
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800365c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800365e:	68f8      	ldr	r0, [r7, #12]
 8003660:	f7ff fb90 	bl	8002d84 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003664:	bf00      	nop
 8003666:	3710      	adds	r7, #16
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003678:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800367e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800368a:	f043 0204 	orr.w	r2, r3, #4
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003692:	68f8      	ldr	r0, [r7, #12]
 8003694:	f7ff fb80 	bl	8002d98 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003698:	bf00      	nop
 800369a:	3710      	adds	r7, #16
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}

080036a0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a7a      	ldr	r2, [pc, #488]	@ (8003898 <ADC_ConfigureBoostMode+0x1f8>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d004      	beq.n	80036bc <ADC_ConfigureBoostMode+0x1c>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a79      	ldr	r2, [pc, #484]	@ (800389c <ADC_ConfigureBoostMode+0x1fc>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d109      	bne.n	80036d0 <ADC_ConfigureBoostMode+0x30>
 80036bc:	4b78      	ldr	r3, [pc, #480]	@ (80038a0 <ADC_ConfigureBoostMode+0x200>)
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	bf14      	ite	ne
 80036c8:	2301      	movne	r3, #1
 80036ca:	2300      	moveq	r3, #0
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	e008      	b.n	80036e2 <ADC_ConfigureBoostMode+0x42>
 80036d0:	4b74      	ldr	r3, [pc, #464]	@ (80038a4 <ADC_ConfigureBoostMode+0x204>)
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	bf14      	ite	ne
 80036dc:	2301      	movne	r3, #1
 80036de:	2300      	moveq	r3, #0
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d01c      	beq.n	8003720 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80036e6:	f004 fc71 	bl	8007fcc <HAL_RCC_GetHCLKFreq>
 80036ea:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80036f4:	d010      	beq.n	8003718 <ADC_ConfigureBoostMode+0x78>
 80036f6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80036fa:	d873      	bhi.n	80037e4 <ADC_ConfigureBoostMode+0x144>
 80036fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003700:	d002      	beq.n	8003708 <ADC_ConfigureBoostMode+0x68>
 8003702:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003706:	d16d      	bne.n	80037e4 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	0c1b      	lsrs	r3, r3, #16
 800370e:	68fa      	ldr	r2, [r7, #12]
 8003710:	fbb2 f3f3 	udiv	r3, r2, r3
 8003714:	60fb      	str	r3, [r7, #12]
        break;
 8003716:	e068      	b.n	80037ea <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	089b      	lsrs	r3, r3, #2
 800371c:	60fb      	str	r3, [r7, #12]
        break;
 800371e:	e064      	b.n	80037ea <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003720:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8003724:	f04f 0100 	mov.w	r1, #0
 8003728:	f005 feb6 	bl	8009498 <HAL_RCCEx_GetPeriphCLKFreq>
 800372c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003736:	d051      	beq.n	80037dc <ADC_ConfigureBoostMode+0x13c>
 8003738:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800373c:	d854      	bhi.n	80037e8 <ADC_ConfigureBoostMode+0x148>
 800373e:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003742:	d047      	beq.n	80037d4 <ADC_ConfigureBoostMode+0x134>
 8003744:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003748:	d84e      	bhi.n	80037e8 <ADC_ConfigureBoostMode+0x148>
 800374a:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800374e:	d03d      	beq.n	80037cc <ADC_ConfigureBoostMode+0x12c>
 8003750:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003754:	d848      	bhi.n	80037e8 <ADC_ConfigureBoostMode+0x148>
 8003756:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800375a:	d033      	beq.n	80037c4 <ADC_ConfigureBoostMode+0x124>
 800375c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003760:	d842      	bhi.n	80037e8 <ADC_ConfigureBoostMode+0x148>
 8003762:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003766:	d029      	beq.n	80037bc <ADC_ConfigureBoostMode+0x11c>
 8003768:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800376c:	d83c      	bhi.n	80037e8 <ADC_ConfigureBoostMode+0x148>
 800376e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003772:	d01a      	beq.n	80037aa <ADC_ConfigureBoostMode+0x10a>
 8003774:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003778:	d836      	bhi.n	80037e8 <ADC_ConfigureBoostMode+0x148>
 800377a:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800377e:	d014      	beq.n	80037aa <ADC_ConfigureBoostMode+0x10a>
 8003780:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003784:	d830      	bhi.n	80037e8 <ADC_ConfigureBoostMode+0x148>
 8003786:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800378a:	d00e      	beq.n	80037aa <ADC_ConfigureBoostMode+0x10a>
 800378c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003790:	d82a      	bhi.n	80037e8 <ADC_ConfigureBoostMode+0x148>
 8003792:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003796:	d008      	beq.n	80037aa <ADC_ConfigureBoostMode+0x10a>
 8003798:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800379c:	d824      	bhi.n	80037e8 <ADC_ConfigureBoostMode+0x148>
 800379e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80037a2:	d002      	beq.n	80037aa <ADC_ConfigureBoostMode+0x10a>
 80037a4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80037a8:	d11e      	bne.n	80037e8 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	0c9b      	lsrs	r3, r3, #18
 80037b0:	005b      	lsls	r3, r3, #1
 80037b2:	68fa      	ldr	r2, [r7, #12]
 80037b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80037b8:	60fb      	str	r3, [r7, #12]
        break;
 80037ba:	e016      	b.n	80037ea <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	091b      	lsrs	r3, r3, #4
 80037c0:	60fb      	str	r3, [r7, #12]
        break;
 80037c2:	e012      	b.n	80037ea <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	095b      	lsrs	r3, r3, #5
 80037c8:	60fb      	str	r3, [r7, #12]
        break;
 80037ca:	e00e      	b.n	80037ea <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	099b      	lsrs	r3, r3, #6
 80037d0:	60fb      	str	r3, [r7, #12]
        break;
 80037d2:	e00a      	b.n	80037ea <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	09db      	lsrs	r3, r3, #7
 80037d8:	60fb      	str	r3, [r7, #12]
        break;
 80037da:	e006      	b.n	80037ea <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	0a1b      	lsrs	r3, r3, #8
 80037e0:	60fb      	str	r3, [r7, #12]
        break;
 80037e2:	e002      	b.n	80037ea <ADC_ConfigureBoostMode+0x14a>
        break;
 80037e4:	bf00      	nop
 80037e6:	e000      	b.n	80037ea <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80037e8:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80037ea:	f7fe fe71 	bl	80024d0 <HAL_GetREVID>
 80037ee:	4603      	mov	r3, r0
 80037f0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d815      	bhi.n	8003824 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	4a2b      	ldr	r2, [pc, #172]	@ (80038a8 <ADC_ConfigureBoostMode+0x208>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d908      	bls.n	8003812 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	689a      	ldr	r2, [r3, #8]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800380e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003810:	e03e      	b.n	8003890 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	689a      	ldr	r2, [r3, #8]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003820:	609a      	str	r2, [r3, #8]
}
 8003822:	e035      	b.n	8003890 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	085b      	lsrs	r3, r3, #1
 8003828:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	4a1f      	ldr	r2, [pc, #124]	@ (80038ac <ADC_ConfigureBoostMode+0x20c>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d808      	bhi.n	8003844 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	689a      	ldr	r2, [r3, #8]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003840:	609a      	str	r2, [r3, #8]
}
 8003842:	e025      	b.n	8003890 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	4a1a      	ldr	r2, [pc, #104]	@ (80038b0 <ADC_ConfigureBoostMode+0x210>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d80a      	bhi.n	8003862 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800385e:	609a      	str	r2, [r3, #8]
}
 8003860:	e016      	b.n	8003890 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	4a13      	ldr	r2, [pc, #76]	@ (80038b4 <ADC_ConfigureBoostMode+0x214>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d80a      	bhi.n	8003880 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800387c:	609a      	str	r2, [r3, #8]
}
 800387e:	e007      	b.n	8003890 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	689a      	ldr	r2, [r3, #8]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800388e:	609a      	str	r2, [r3, #8]
}
 8003890:	bf00      	nop
 8003892:	3710      	adds	r7, #16
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}
 8003898:	40022000 	.word	0x40022000
 800389c:	40022100 	.word	0x40022100
 80038a0:	40022300 	.word	0x40022300
 80038a4:	58026300 	.word	0x58026300
 80038a8:	01312d00 	.word	0x01312d00
 80038ac:	005f5e10 	.word	0x005f5e10
 80038b0:	00bebc20 	.word	0x00bebc20
 80038b4:	017d7840 	.word	0x017d7840

080038b8 <LL_ADC_IsEnabled>:
{
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	f003 0301 	and.w	r3, r3, #1
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d101      	bne.n	80038d0 <LL_ADC_IsEnabled+0x18>
 80038cc:	2301      	movs	r3, #1
 80038ce:	e000      	b.n	80038d2 <LL_ADC_IsEnabled+0x1a>
 80038d0:	2300      	movs	r3, #0
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	370c      	adds	r7, #12
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr

080038de <LL_ADC_REG_IsConversionOngoing>:
{
 80038de:	b480      	push	{r7}
 80038e0:	b083      	sub	sp, #12
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	f003 0304 	and.w	r3, r3, #4
 80038ee:	2b04      	cmp	r3, #4
 80038f0:	d101      	bne.n	80038f6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80038f2:	2301      	movs	r3, #1
 80038f4:	e000      	b.n	80038f8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80038f6:	2300      	movs	r3, #0
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	370c      	adds	r7, #12
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr

08003904 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003904:	b590      	push	{r4, r7, lr}
 8003906:	b09f      	sub	sp, #124	@ 0x7c
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800390e:	2300      	movs	r3, #0
 8003910:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800391a:	2b01      	cmp	r3, #1
 800391c:	d101      	bne.n	8003922 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800391e:	2302      	movs	r3, #2
 8003920:	e0be      	b.n	8003aa0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2201      	movs	r2, #1
 8003926:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800392a:	2300      	movs	r3, #0
 800392c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800392e:	2300      	movs	r3, #0
 8003930:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a5c      	ldr	r2, [pc, #368]	@ (8003aa8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d102      	bne.n	8003942 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800393c:	4b5b      	ldr	r3, [pc, #364]	@ (8003aac <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800393e:	60bb      	str	r3, [r7, #8]
 8003940:	e001      	b.n	8003946 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003942:	2300      	movs	r3, #0
 8003944:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d10b      	bne.n	8003964 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003950:	f043 0220 	orr.w	r2, r3, #32
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e09d      	b.n	8003aa0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	4618      	mov	r0, r3
 8003968:	f7ff ffb9 	bl	80038de <LL_ADC_REG_IsConversionOngoing>
 800396c:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4618      	mov	r0, r3
 8003974:	f7ff ffb3 	bl	80038de <LL_ADC_REG_IsConversionOngoing>
 8003978:	4603      	mov	r3, r0
 800397a:	2b00      	cmp	r3, #0
 800397c:	d17f      	bne.n	8003a7e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800397e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003980:	2b00      	cmp	r3, #0
 8003982:	d17c      	bne.n	8003a7e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a47      	ldr	r2, [pc, #284]	@ (8003aa8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d004      	beq.n	8003998 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a46      	ldr	r2, [pc, #280]	@ (8003aac <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d101      	bne.n	800399c <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003998:	4b45      	ldr	r3, [pc, #276]	@ (8003ab0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800399a:	e000      	b.n	800399e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 800399c:	4b45      	ldr	r3, [pc, #276]	@ (8003ab4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800399e:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d039      	beq.n	8003a1c <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80039a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	431a      	orrs	r2, r3
 80039b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80039b8:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a3a      	ldr	r2, [pc, #232]	@ (8003aa8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d004      	beq.n	80039ce <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a38      	ldr	r2, [pc, #224]	@ (8003aac <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d10e      	bne.n	80039ec <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80039ce:	4836      	ldr	r0, [pc, #216]	@ (8003aa8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80039d0:	f7ff ff72 	bl	80038b8 <LL_ADC_IsEnabled>
 80039d4:	4604      	mov	r4, r0
 80039d6:	4835      	ldr	r0, [pc, #212]	@ (8003aac <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80039d8:	f7ff ff6e 	bl	80038b8 <LL_ADC_IsEnabled>
 80039dc:	4603      	mov	r3, r0
 80039de:	4323      	orrs	r3, r4
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	bf0c      	ite	eq
 80039e4:	2301      	moveq	r3, #1
 80039e6:	2300      	movne	r3, #0
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	e008      	b.n	80039fe <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80039ec:	4832      	ldr	r0, [pc, #200]	@ (8003ab8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80039ee:	f7ff ff63 	bl	80038b8 <LL_ADC_IsEnabled>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	bf0c      	ite	eq
 80039f8:	2301      	moveq	r3, #1
 80039fa:	2300      	movne	r3, #0
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d047      	beq.n	8003a92 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003a02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a04:	689a      	ldr	r2, [r3, #8]
 8003a06:	4b2d      	ldr	r3, [pc, #180]	@ (8003abc <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003a08:	4013      	ands	r3, r2
 8003a0a:	683a      	ldr	r2, [r7, #0]
 8003a0c:	6811      	ldr	r1, [r2, #0]
 8003a0e:	683a      	ldr	r2, [r7, #0]
 8003a10:	6892      	ldr	r2, [r2, #8]
 8003a12:	430a      	orrs	r2, r1
 8003a14:	431a      	orrs	r2, r3
 8003a16:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a18:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003a1a:	e03a      	b.n	8003a92 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003a1c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003a24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a26:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a1e      	ldr	r2, [pc, #120]	@ (8003aa8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d004      	beq.n	8003a3c <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a1d      	ldr	r2, [pc, #116]	@ (8003aac <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d10e      	bne.n	8003a5a <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8003a3c:	481a      	ldr	r0, [pc, #104]	@ (8003aa8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003a3e:	f7ff ff3b 	bl	80038b8 <LL_ADC_IsEnabled>
 8003a42:	4604      	mov	r4, r0
 8003a44:	4819      	ldr	r0, [pc, #100]	@ (8003aac <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003a46:	f7ff ff37 	bl	80038b8 <LL_ADC_IsEnabled>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	4323      	orrs	r3, r4
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	bf0c      	ite	eq
 8003a52:	2301      	moveq	r3, #1
 8003a54:	2300      	movne	r3, #0
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	e008      	b.n	8003a6c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003a5a:	4817      	ldr	r0, [pc, #92]	@ (8003ab8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003a5c:	f7ff ff2c 	bl	80038b8 <LL_ADC_IsEnabled>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	bf0c      	ite	eq
 8003a66:	2301      	moveq	r3, #1
 8003a68:	2300      	movne	r3, #0
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d010      	beq.n	8003a92 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003a70:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a72:	689a      	ldr	r2, [r3, #8]
 8003a74:	4b11      	ldr	r3, [pc, #68]	@ (8003abc <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003a76:	4013      	ands	r3, r2
 8003a78:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003a7a:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003a7c:	e009      	b.n	8003a92 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a82:	f043 0220 	orr.w	r2, r3, #32
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8003a90:	e000      	b.n	8003a94 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003a92:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003a9c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	377c      	adds	r7, #124	@ 0x7c
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd90      	pop	{r4, r7, pc}
 8003aa8:	40022000 	.word	0x40022000
 8003aac:	40022100 	.word	0x40022100
 8003ab0:	40022300 	.word	0x40022300
 8003ab4:	58026300 	.word	0x58026300
 8003ab8:	58026000 	.word	0x58026000
 8003abc:	fffff0e0 	.word	0xfffff0e0

08003ac0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b085      	sub	sp, #20
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	f003 0307 	and.w	r3, r3, #7
 8003ace:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ad0:	4b0b      	ldr	r3, [pc, #44]	@ (8003b00 <__NVIC_SetPriorityGrouping+0x40>)
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ad6:	68ba      	ldr	r2, [r7, #8]
 8003ad8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003adc:	4013      	ands	r3, r2
 8003ade:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003ae8:	4b06      	ldr	r3, [pc, #24]	@ (8003b04 <__NVIC_SetPriorityGrouping+0x44>)
 8003aea:	4313      	orrs	r3, r2
 8003aec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003aee:	4a04      	ldr	r2, [pc, #16]	@ (8003b00 <__NVIC_SetPriorityGrouping+0x40>)
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	60d3      	str	r3, [r2, #12]
}
 8003af4:	bf00      	nop
 8003af6:	3714      	adds	r7, #20
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr
 8003b00:	e000ed00 	.word	0xe000ed00
 8003b04:	05fa0000 	.word	0x05fa0000

08003b08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b0c:	4b04      	ldr	r3, [pc, #16]	@ (8003b20 <__NVIC_GetPriorityGrouping+0x18>)
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	0a1b      	lsrs	r3, r3, #8
 8003b12:	f003 0307 	and.w	r3, r3, #7
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr
 8003b20:	e000ed00 	.word	0xe000ed00

08003b24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003b2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	db0b      	blt.n	8003b4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b36:	88fb      	ldrh	r3, [r7, #6]
 8003b38:	f003 021f 	and.w	r2, r3, #31
 8003b3c:	4907      	ldr	r1, [pc, #28]	@ (8003b5c <__NVIC_EnableIRQ+0x38>)
 8003b3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b42:	095b      	lsrs	r3, r3, #5
 8003b44:	2001      	movs	r0, #1
 8003b46:	fa00 f202 	lsl.w	r2, r0, r2
 8003b4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003b4e:	bf00      	nop
 8003b50:	370c      	adds	r7, #12
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop
 8003b5c:	e000e100 	.word	0xe000e100

08003b60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	4603      	mov	r3, r0
 8003b68:	6039      	str	r1, [r7, #0]
 8003b6a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003b6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	db0a      	blt.n	8003b8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	b2da      	uxtb	r2, r3
 8003b78:	490c      	ldr	r1, [pc, #48]	@ (8003bac <__NVIC_SetPriority+0x4c>)
 8003b7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b7e:	0112      	lsls	r2, r2, #4
 8003b80:	b2d2      	uxtb	r2, r2
 8003b82:	440b      	add	r3, r1
 8003b84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b88:	e00a      	b.n	8003ba0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	b2da      	uxtb	r2, r3
 8003b8e:	4908      	ldr	r1, [pc, #32]	@ (8003bb0 <__NVIC_SetPriority+0x50>)
 8003b90:	88fb      	ldrh	r3, [r7, #6]
 8003b92:	f003 030f 	and.w	r3, r3, #15
 8003b96:	3b04      	subs	r3, #4
 8003b98:	0112      	lsls	r2, r2, #4
 8003b9a:	b2d2      	uxtb	r2, r2
 8003b9c:	440b      	add	r3, r1
 8003b9e:	761a      	strb	r2, [r3, #24]
}
 8003ba0:	bf00      	nop
 8003ba2:	370c      	adds	r7, #12
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr
 8003bac:	e000e100 	.word	0xe000e100
 8003bb0:	e000ed00 	.word	0xe000ed00

08003bb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b089      	sub	sp, #36	@ 0x24
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f003 0307 	and.w	r3, r3, #7
 8003bc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003bc8:	69fb      	ldr	r3, [r7, #28]
 8003bca:	f1c3 0307 	rsb	r3, r3, #7
 8003bce:	2b04      	cmp	r3, #4
 8003bd0:	bf28      	it	cs
 8003bd2:	2304      	movcs	r3, #4
 8003bd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	3304      	adds	r3, #4
 8003bda:	2b06      	cmp	r3, #6
 8003bdc:	d902      	bls.n	8003be4 <NVIC_EncodePriority+0x30>
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	3b03      	subs	r3, #3
 8003be2:	e000      	b.n	8003be6 <NVIC_EncodePriority+0x32>
 8003be4:	2300      	movs	r3, #0
 8003be6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003be8:	f04f 32ff 	mov.w	r2, #4294967295
 8003bec:	69bb      	ldr	r3, [r7, #24]
 8003bee:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf2:	43da      	mvns	r2, r3
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	401a      	ands	r2, r3
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003bfc:	f04f 31ff 	mov.w	r1, #4294967295
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	fa01 f303 	lsl.w	r3, r1, r3
 8003c06:	43d9      	mvns	r1, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c0c:	4313      	orrs	r3, r2
         );
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3724      	adds	r7, #36	@ 0x24
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr
	...

08003c1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b082      	sub	sp, #8
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	3b01      	subs	r3, #1
 8003c28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003c2c:	d301      	bcc.n	8003c32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e00f      	b.n	8003c52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c32:	4a0a      	ldr	r2, [pc, #40]	@ (8003c5c <SysTick_Config+0x40>)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	3b01      	subs	r3, #1
 8003c38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c3a:	210f      	movs	r1, #15
 8003c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8003c40:	f7ff ff8e 	bl	8003b60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c44:	4b05      	ldr	r3, [pc, #20]	@ (8003c5c <SysTick_Config+0x40>)
 8003c46:	2200      	movs	r2, #0
 8003c48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c4a:	4b04      	ldr	r3, [pc, #16]	@ (8003c5c <SysTick_Config+0x40>)
 8003c4c:	2207      	movs	r2, #7
 8003c4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c50:	2300      	movs	r3, #0
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3708      	adds	r7, #8
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	e000e010 	.word	0xe000e010

08003c60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b082      	sub	sp, #8
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f7ff ff29 	bl	8003ac0 <__NVIC_SetPriorityGrouping>
}
 8003c6e:	bf00      	nop
 8003c70:	3708      	adds	r7, #8
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}

08003c76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c76:	b580      	push	{r7, lr}
 8003c78:	b086      	sub	sp, #24
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	60b9      	str	r1, [r7, #8]
 8003c80:	607a      	str	r2, [r7, #4]
 8003c82:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003c84:	f7ff ff40 	bl	8003b08 <__NVIC_GetPriorityGrouping>
 8003c88:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	68b9      	ldr	r1, [r7, #8]
 8003c8e:	6978      	ldr	r0, [r7, #20]
 8003c90:	f7ff ff90 	bl	8003bb4 <NVIC_EncodePriority>
 8003c94:	4602      	mov	r2, r0
 8003c96:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003c9a:	4611      	mov	r1, r2
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f7ff ff5f 	bl	8003b60 <__NVIC_SetPriority>
}
 8003ca2:	bf00      	nop
 8003ca4:	3718      	adds	r7, #24
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}

08003caa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003caa:	b580      	push	{r7, lr}
 8003cac:	b082      	sub	sp, #8
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003cb4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f7ff ff33 	bl	8003b24 <__NVIC_EnableIRQ>
}
 8003cbe:	bf00      	nop
 8003cc0:	3708      	adds	r7, #8
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}

08003cc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003cc6:	b580      	push	{r7, lr}
 8003cc8:	b082      	sub	sp, #8
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f7ff ffa4 	bl	8003c1c <SysTick_Config>
 8003cd4:	4603      	mov	r3, r0
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3708      	adds	r7, #8
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
	...

08003ce0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8003ce4:	f3bf 8f5f 	dmb	sy
}
 8003ce8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003cea:	4b07      	ldr	r3, [pc, #28]	@ (8003d08 <HAL_MPU_Disable+0x28>)
 8003cec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cee:	4a06      	ldr	r2, [pc, #24]	@ (8003d08 <HAL_MPU_Disable+0x28>)
 8003cf0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003cf4:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8003cf6:	4b05      	ldr	r3, [pc, #20]	@ (8003d0c <HAL_MPU_Disable+0x2c>)
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	605a      	str	r2, [r3, #4]
}
 8003cfc:	bf00      	nop
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr
 8003d06:	bf00      	nop
 8003d08:	e000ed00 	.word	0xe000ed00
 8003d0c:	e000ed90 	.word	0xe000ed90

08003d10 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003d18:	4a0b      	ldr	r2, [pc, #44]	@ (8003d48 <HAL_MPU_Enable+0x38>)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f043 0301 	orr.w	r3, r3, #1
 8003d20:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8003d22:	4b0a      	ldr	r3, [pc, #40]	@ (8003d4c <HAL_MPU_Enable+0x3c>)
 8003d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d26:	4a09      	ldr	r2, [pc, #36]	@ (8003d4c <HAL_MPU_Enable+0x3c>)
 8003d28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d2c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003d2e:	f3bf 8f4f 	dsb	sy
}
 8003d32:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003d34:	f3bf 8f6f 	isb	sy
}
 8003d38:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8003d3a:	bf00      	nop
 8003d3c:	370c      	adds	r7, #12
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr
 8003d46:	bf00      	nop
 8003d48:	e000ed90 	.word	0xe000ed90
 8003d4c:	e000ed00 	.word	0xe000ed00

08003d50 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b083      	sub	sp, #12
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	785a      	ldrb	r2, [r3, #1]
 8003d5c:	4b1b      	ldr	r3, [pc, #108]	@ (8003dcc <HAL_MPU_ConfigRegion+0x7c>)
 8003d5e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8003d60:	4b1a      	ldr	r3, [pc, #104]	@ (8003dcc <HAL_MPU_ConfigRegion+0x7c>)
 8003d62:	691b      	ldr	r3, [r3, #16]
 8003d64:	4a19      	ldr	r2, [pc, #100]	@ (8003dcc <HAL_MPU_ConfigRegion+0x7c>)
 8003d66:	f023 0301 	bic.w	r3, r3, #1
 8003d6a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8003d6c:	4a17      	ldr	r2, [pc, #92]	@ (8003dcc <HAL_MPU_ConfigRegion+0x7c>)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	7b1b      	ldrb	r3, [r3, #12]
 8003d78:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	7adb      	ldrb	r3, [r3, #11]
 8003d7e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003d80:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	7a9b      	ldrb	r3, [r3, #10]
 8003d86:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003d88:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	7b5b      	ldrb	r3, [r3, #13]
 8003d8e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003d90:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	7b9b      	ldrb	r3, [r3, #14]
 8003d96:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003d98:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	7bdb      	ldrb	r3, [r3, #15]
 8003d9e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003da0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	7a5b      	ldrb	r3, [r3, #9]
 8003da6:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003da8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	7a1b      	ldrb	r3, [r3, #8]
 8003dae:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003db0:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	7812      	ldrb	r2, [r2, #0]
 8003db6:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003db8:	4a04      	ldr	r2, [pc, #16]	@ (8003dcc <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003dba:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003dbc:	6113      	str	r3, [r2, #16]
}
 8003dbe:	bf00      	nop
 8003dc0:	370c      	adds	r7, #12
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr
 8003dca:	bf00      	nop
 8003dcc:	e000ed90 	.word	0xe000ed90

08003dd0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b086      	sub	sp, #24
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003dd8:	f7fe fb4a 	bl	8002470 <HAL_GetTick>
 8003ddc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d101      	bne.n	8003de8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e316      	b.n	8004416 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a66      	ldr	r2, [pc, #408]	@ (8003f88 <HAL_DMA_Init+0x1b8>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d04a      	beq.n	8003e88 <HAL_DMA_Init+0xb8>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a65      	ldr	r2, [pc, #404]	@ (8003f8c <HAL_DMA_Init+0x1bc>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d045      	beq.n	8003e88 <HAL_DMA_Init+0xb8>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a63      	ldr	r2, [pc, #396]	@ (8003f90 <HAL_DMA_Init+0x1c0>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d040      	beq.n	8003e88 <HAL_DMA_Init+0xb8>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a62      	ldr	r2, [pc, #392]	@ (8003f94 <HAL_DMA_Init+0x1c4>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d03b      	beq.n	8003e88 <HAL_DMA_Init+0xb8>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a60      	ldr	r2, [pc, #384]	@ (8003f98 <HAL_DMA_Init+0x1c8>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d036      	beq.n	8003e88 <HAL_DMA_Init+0xb8>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a5f      	ldr	r2, [pc, #380]	@ (8003f9c <HAL_DMA_Init+0x1cc>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d031      	beq.n	8003e88 <HAL_DMA_Init+0xb8>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a5d      	ldr	r2, [pc, #372]	@ (8003fa0 <HAL_DMA_Init+0x1d0>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d02c      	beq.n	8003e88 <HAL_DMA_Init+0xb8>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a5c      	ldr	r2, [pc, #368]	@ (8003fa4 <HAL_DMA_Init+0x1d4>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d027      	beq.n	8003e88 <HAL_DMA_Init+0xb8>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a5a      	ldr	r2, [pc, #360]	@ (8003fa8 <HAL_DMA_Init+0x1d8>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d022      	beq.n	8003e88 <HAL_DMA_Init+0xb8>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a59      	ldr	r2, [pc, #356]	@ (8003fac <HAL_DMA_Init+0x1dc>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d01d      	beq.n	8003e88 <HAL_DMA_Init+0xb8>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a57      	ldr	r2, [pc, #348]	@ (8003fb0 <HAL_DMA_Init+0x1e0>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d018      	beq.n	8003e88 <HAL_DMA_Init+0xb8>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a56      	ldr	r2, [pc, #344]	@ (8003fb4 <HAL_DMA_Init+0x1e4>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d013      	beq.n	8003e88 <HAL_DMA_Init+0xb8>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a54      	ldr	r2, [pc, #336]	@ (8003fb8 <HAL_DMA_Init+0x1e8>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d00e      	beq.n	8003e88 <HAL_DMA_Init+0xb8>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a53      	ldr	r2, [pc, #332]	@ (8003fbc <HAL_DMA_Init+0x1ec>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d009      	beq.n	8003e88 <HAL_DMA_Init+0xb8>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a51      	ldr	r2, [pc, #324]	@ (8003fc0 <HAL_DMA_Init+0x1f0>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d004      	beq.n	8003e88 <HAL_DMA_Init+0xb8>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a50      	ldr	r2, [pc, #320]	@ (8003fc4 <HAL_DMA_Init+0x1f4>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d101      	bne.n	8003e8c <HAL_DMA_Init+0xbc>
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e000      	b.n	8003e8e <HAL_DMA_Init+0xbe>
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	f000 813b 	beq.w	800410a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2202      	movs	r2, #2
 8003e98:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a37      	ldr	r2, [pc, #220]	@ (8003f88 <HAL_DMA_Init+0x1b8>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d04a      	beq.n	8003f44 <HAL_DMA_Init+0x174>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a36      	ldr	r2, [pc, #216]	@ (8003f8c <HAL_DMA_Init+0x1bc>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d045      	beq.n	8003f44 <HAL_DMA_Init+0x174>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a34      	ldr	r2, [pc, #208]	@ (8003f90 <HAL_DMA_Init+0x1c0>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d040      	beq.n	8003f44 <HAL_DMA_Init+0x174>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a33      	ldr	r2, [pc, #204]	@ (8003f94 <HAL_DMA_Init+0x1c4>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d03b      	beq.n	8003f44 <HAL_DMA_Init+0x174>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a31      	ldr	r2, [pc, #196]	@ (8003f98 <HAL_DMA_Init+0x1c8>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d036      	beq.n	8003f44 <HAL_DMA_Init+0x174>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a30      	ldr	r2, [pc, #192]	@ (8003f9c <HAL_DMA_Init+0x1cc>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d031      	beq.n	8003f44 <HAL_DMA_Init+0x174>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a2e      	ldr	r2, [pc, #184]	@ (8003fa0 <HAL_DMA_Init+0x1d0>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d02c      	beq.n	8003f44 <HAL_DMA_Init+0x174>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a2d      	ldr	r2, [pc, #180]	@ (8003fa4 <HAL_DMA_Init+0x1d4>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d027      	beq.n	8003f44 <HAL_DMA_Init+0x174>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a2b      	ldr	r2, [pc, #172]	@ (8003fa8 <HAL_DMA_Init+0x1d8>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d022      	beq.n	8003f44 <HAL_DMA_Init+0x174>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a2a      	ldr	r2, [pc, #168]	@ (8003fac <HAL_DMA_Init+0x1dc>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d01d      	beq.n	8003f44 <HAL_DMA_Init+0x174>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a28      	ldr	r2, [pc, #160]	@ (8003fb0 <HAL_DMA_Init+0x1e0>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d018      	beq.n	8003f44 <HAL_DMA_Init+0x174>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a27      	ldr	r2, [pc, #156]	@ (8003fb4 <HAL_DMA_Init+0x1e4>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d013      	beq.n	8003f44 <HAL_DMA_Init+0x174>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a25      	ldr	r2, [pc, #148]	@ (8003fb8 <HAL_DMA_Init+0x1e8>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d00e      	beq.n	8003f44 <HAL_DMA_Init+0x174>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a24      	ldr	r2, [pc, #144]	@ (8003fbc <HAL_DMA_Init+0x1ec>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d009      	beq.n	8003f44 <HAL_DMA_Init+0x174>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a22      	ldr	r2, [pc, #136]	@ (8003fc0 <HAL_DMA_Init+0x1f0>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d004      	beq.n	8003f44 <HAL_DMA_Init+0x174>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a21      	ldr	r2, [pc, #132]	@ (8003fc4 <HAL_DMA_Init+0x1f4>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d108      	bne.n	8003f56 <HAL_DMA_Init+0x186>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f022 0201 	bic.w	r2, r2, #1
 8003f52:	601a      	str	r2, [r3, #0]
 8003f54:	e007      	b.n	8003f66 <HAL_DMA_Init+0x196>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f022 0201 	bic.w	r2, r2, #1
 8003f64:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003f66:	e02f      	b.n	8003fc8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f68:	f7fe fa82 	bl	8002470 <HAL_GetTick>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	2b05      	cmp	r3, #5
 8003f74:	d928      	bls.n	8003fc8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2220      	movs	r2, #32
 8003f7a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2203      	movs	r2, #3
 8003f80:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e246      	b.n	8004416 <HAL_DMA_Init+0x646>
 8003f88:	40020010 	.word	0x40020010
 8003f8c:	40020028 	.word	0x40020028
 8003f90:	40020040 	.word	0x40020040
 8003f94:	40020058 	.word	0x40020058
 8003f98:	40020070 	.word	0x40020070
 8003f9c:	40020088 	.word	0x40020088
 8003fa0:	400200a0 	.word	0x400200a0
 8003fa4:	400200b8 	.word	0x400200b8
 8003fa8:	40020410 	.word	0x40020410
 8003fac:	40020428 	.word	0x40020428
 8003fb0:	40020440 	.word	0x40020440
 8003fb4:	40020458 	.word	0x40020458
 8003fb8:	40020470 	.word	0x40020470
 8003fbc:	40020488 	.word	0x40020488
 8003fc0:	400204a0 	.word	0x400204a0
 8003fc4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 0301 	and.w	r3, r3, #1
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d1c8      	bne.n	8003f68 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003fde:	697a      	ldr	r2, [r7, #20]
 8003fe0:	4b83      	ldr	r3, [pc, #524]	@ (80041f0 <HAL_DMA_Init+0x420>)
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003fee:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	691b      	ldr	r3, [r3, #16]
 8003ff4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ffa:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	699b      	ldr	r3, [r3, #24]
 8004000:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004006:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6a1b      	ldr	r3, [r3, #32]
 800400c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800400e:	697a      	ldr	r2, [r7, #20]
 8004010:	4313      	orrs	r3, r2
 8004012:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004018:	2b04      	cmp	r3, #4
 800401a:	d107      	bne.n	800402c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004024:	4313      	orrs	r3, r2
 8004026:	697a      	ldr	r2, [r7, #20]
 8004028:	4313      	orrs	r3, r2
 800402a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800402c:	4b71      	ldr	r3, [pc, #452]	@ (80041f4 <HAL_DMA_Init+0x424>)
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	4b71      	ldr	r3, [pc, #452]	@ (80041f8 <HAL_DMA_Init+0x428>)
 8004032:	4013      	ands	r3, r2
 8004034:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004038:	d328      	bcc.n	800408c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	2b28      	cmp	r3, #40	@ 0x28
 8004040:	d903      	bls.n	800404a <HAL_DMA_Init+0x27a>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	2b2e      	cmp	r3, #46	@ 0x2e
 8004048:	d917      	bls.n	800407a <HAL_DMA_Init+0x2aa>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	2b3e      	cmp	r3, #62	@ 0x3e
 8004050:	d903      	bls.n	800405a <HAL_DMA_Init+0x28a>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	2b42      	cmp	r3, #66	@ 0x42
 8004058:	d90f      	bls.n	800407a <HAL_DMA_Init+0x2aa>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	2b46      	cmp	r3, #70	@ 0x46
 8004060:	d903      	bls.n	800406a <HAL_DMA_Init+0x29a>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	2b48      	cmp	r3, #72	@ 0x48
 8004068:	d907      	bls.n	800407a <HAL_DMA_Init+0x2aa>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	2b4e      	cmp	r3, #78	@ 0x4e
 8004070:	d905      	bls.n	800407e <HAL_DMA_Init+0x2ae>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	2b52      	cmp	r3, #82	@ 0x52
 8004078:	d801      	bhi.n	800407e <HAL_DMA_Init+0x2ae>
 800407a:	2301      	movs	r3, #1
 800407c:	e000      	b.n	8004080 <HAL_DMA_Init+0x2b0>
 800407e:	2300      	movs	r3, #0
 8004080:	2b00      	cmp	r3, #0
 8004082:	d003      	beq.n	800408c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800408a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	697a      	ldr	r2, [r7, #20]
 8004092:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	695b      	ldr	r3, [r3, #20]
 800409a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	f023 0307 	bic.w	r3, r3, #7
 80040a2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040a8:	697a      	ldr	r2, [r7, #20]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b2:	2b04      	cmp	r3, #4
 80040b4:	d117      	bne.n	80040e6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040ba:	697a      	ldr	r2, [r7, #20]
 80040bc:	4313      	orrs	r3, r2
 80040be:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d00e      	beq.n	80040e6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f002 fb33 	bl	8006734 <DMA_CheckFifoParam>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d008      	beq.n	80040e6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2240      	movs	r2, #64	@ 0x40
 80040d8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2201      	movs	r2, #1
 80040de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e197      	b.n	8004416 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	697a      	ldr	r2, [r7, #20]
 80040ec:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f002 fa6e 	bl	80065d0 <DMA_CalcBaseAndBitshift>
 80040f4:	4603      	mov	r3, r0
 80040f6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040fc:	f003 031f 	and.w	r3, r3, #31
 8004100:	223f      	movs	r2, #63	@ 0x3f
 8004102:	409a      	lsls	r2, r3
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	609a      	str	r2, [r3, #8]
 8004108:	e0cd      	b.n	80042a6 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a3b      	ldr	r2, [pc, #236]	@ (80041fc <HAL_DMA_Init+0x42c>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d022      	beq.n	800415a <HAL_DMA_Init+0x38a>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a39      	ldr	r2, [pc, #228]	@ (8004200 <HAL_DMA_Init+0x430>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d01d      	beq.n	800415a <HAL_DMA_Init+0x38a>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a38      	ldr	r2, [pc, #224]	@ (8004204 <HAL_DMA_Init+0x434>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d018      	beq.n	800415a <HAL_DMA_Init+0x38a>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a36      	ldr	r2, [pc, #216]	@ (8004208 <HAL_DMA_Init+0x438>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d013      	beq.n	800415a <HAL_DMA_Init+0x38a>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a35      	ldr	r2, [pc, #212]	@ (800420c <HAL_DMA_Init+0x43c>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d00e      	beq.n	800415a <HAL_DMA_Init+0x38a>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a33      	ldr	r2, [pc, #204]	@ (8004210 <HAL_DMA_Init+0x440>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d009      	beq.n	800415a <HAL_DMA_Init+0x38a>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a32      	ldr	r2, [pc, #200]	@ (8004214 <HAL_DMA_Init+0x444>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d004      	beq.n	800415a <HAL_DMA_Init+0x38a>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a30      	ldr	r2, [pc, #192]	@ (8004218 <HAL_DMA_Init+0x448>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d101      	bne.n	800415e <HAL_DMA_Init+0x38e>
 800415a:	2301      	movs	r3, #1
 800415c:	e000      	b.n	8004160 <HAL_DMA_Init+0x390>
 800415e:	2300      	movs	r3, #0
 8004160:	2b00      	cmp	r3, #0
 8004162:	f000 8097 	beq.w	8004294 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a24      	ldr	r2, [pc, #144]	@ (80041fc <HAL_DMA_Init+0x42c>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d021      	beq.n	80041b4 <HAL_DMA_Init+0x3e4>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a22      	ldr	r2, [pc, #136]	@ (8004200 <HAL_DMA_Init+0x430>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d01c      	beq.n	80041b4 <HAL_DMA_Init+0x3e4>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a21      	ldr	r2, [pc, #132]	@ (8004204 <HAL_DMA_Init+0x434>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d017      	beq.n	80041b4 <HAL_DMA_Init+0x3e4>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a1f      	ldr	r2, [pc, #124]	@ (8004208 <HAL_DMA_Init+0x438>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d012      	beq.n	80041b4 <HAL_DMA_Init+0x3e4>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a1e      	ldr	r2, [pc, #120]	@ (800420c <HAL_DMA_Init+0x43c>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d00d      	beq.n	80041b4 <HAL_DMA_Init+0x3e4>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a1c      	ldr	r2, [pc, #112]	@ (8004210 <HAL_DMA_Init+0x440>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d008      	beq.n	80041b4 <HAL_DMA_Init+0x3e4>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a1b      	ldr	r2, [pc, #108]	@ (8004214 <HAL_DMA_Init+0x444>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d003      	beq.n	80041b4 <HAL_DMA_Init+0x3e4>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a19      	ldr	r2, [pc, #100]	@ (8004218 <HAL_DMA_Init+0x448>)
 80041b2:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2202      	movs	r2, #2
 80041b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2200      	movs	r2, #0
 80041c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80041cc:	697a      	ldr	r2, [r7, #20]
 80041ce:	4b13      	ldr	r3, [pc, #76]	@ (800421c <HAL_DMA_Init+0x44c>)
 80041d0:	4013      	ands	r3, r2
 80041d2:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	2b40      	cmp	r3, #64	@ 0x40
 80041da:	d021      	beq.n	8004220 <HAL_DMA_Init+0x450>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	2b80      	cmp	r3, #128	@ 0x80
 80041e2:	d102      	bne.n	80041ea <HAL_DMA_Init+0x41a>
 80041e4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80041e8:	e01b      	b.n	8004222 <HAL_DMA_Init+0x452>
 80041ea:	2300      	movs	r3, #0
 80041ec:	e019      	b.n	8004222 <HAL_DMA_Init+0x452>
 80041ee:	bf00      	nop
 80041f0:	fe10803f 	.word	0xfe10803f
 80041f4:	5c001000 	.word	0x5c001000
 80041f8:	ffff0000 	.word	0xffff0000
 80041fc:	58025408 	.word	0x58025408
 8004200:	5802541c 	.word	0x5802541c
 8004204:	58025430 	.word	0x58025430
 8004208:	58025444 	.word	0x58025444
 800420c:	58025458 	.word	0x58025458
 8004210:	5802546c 	.word	0x5802546c
 8004214:	58025480 	.word	0x58025480
 8004218:	58025494 	.word	0x58025494
 800421c:	fffe000f 	.word	0xfffe000f
 8004220:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	68d2      	ldr	r2, [r2, #12]
 8004226:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004228:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004230:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	695b      	ldr	r3, [r3, #20]
 8004236:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004238:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	699b      	ldr	r3, [r3, #24]
 800423e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004240:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	69db      	ldr	r3, [r3, #28]
 8004246:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004248:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6a1b      	ldr	r3, [r3, #32]
 800424e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004250:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004252:	697a      	ldr	r2, [r7, #20]
 8004254:	4313      	orrs	r3, r2
 8004256:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	697a      	ldr	r2, [r7, #20]
 800425e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	461a      	mov	r2, r3
 8004266:	4b6e      	ldr	r3, [pc, #440]	@ (8004420 <HAL_DMA_Init+0x650>)
 8004268:	4413      	add	r3, r2
 800426a:	4a6e      	ldr	r2, [pc, #440]	@ (8004424 <HAL_DMA_Init+0x654>)
 800426c:	fba2 2303 	umull	r2, r3, r2, r3
 8004270:	091b      	lsrs	r3, r3, #4
 8004272:	009a      	lsls	r2, r3, #2
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	f002 f9a9 	bl	80065d0 <DMA_CalcBaseAndBitshift>
 800427e:	4603      	mov	r3, r0
 8004280:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004286:	f003 031f 	and.w	r3, r3, #31
 800428a:	2201      	movs	r2, #1
 800428c:	409a      	lsls	r2, r3
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	605a      	str	r2, [r3, #4]
 8004292:	e008      	b.n	80042a6 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2240      	movs	r2, #64	@ 0x40
 8004298:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2203      	movs	r2, #3
 800429e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e0b7      	b.n	8004416 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a5f      	ldr	r2, [pc, #380]	@ (8004428 <HAL_DMA_Init+0x658>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d072      	beq.n	8004396 <HAL_DMA_Init+0x5c6>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a5d      	ldr	r2, [pc, #372]	@ (800442c <HAL_DMA_Init+0x65c>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d06d      	beq.n	8004396 <HAL_DMA_Init+0x5c6>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a5c      	ldr	r2, [pc, #368]	@ (8004430 <HAL_DMA_Init+0x660>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d068      	beq.n	8004396 <HAL_DMA_Init+0x5c6>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a5a      	ldr	r2, [pc, #360]	@ (8004434 <HAL_DMA_Init+0x664>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d063      	beq.n	8004396 <HAL_DMA_Init+0x5c6>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a59      	ldr	r2, [pc, #356]	@ (8004438 <HAL_DMA_Init+0x668>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d05e      	beq.n	8004396 <HAL_DMA_Init+0x5c6>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a57      	ldr	r2, [pc, #348]	@ (800443c <HAL_DMA_Init+0x66c>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d059      	beq.n	8004396 <HAL_DMA_Init+0x5c6>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a56      	ldr	r2, [pc, #344]	@ (8004440 <HAL_DMA_Init+0x670>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d054      	beq.n	8004396 <HAL_DMA_Init+0x5c6>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a54      	ldr	r2, [pc, #336]	@ (8004444 <HAL_DMA_Init+0x674>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d04f      	beq.n	8004396 <HAL_DMA_Init+0x5c6>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a53      	ldr	r2, [pc, #332]	@ (8004448 <HAL_DMA_Init+0x678>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d04a      	beq.n	8004396 <HAL_DMA_Init+0x5c6>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a51      	ldr	r2, [pc, #324]	@ (800444c <HAL_DMA_Init+0x67c>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d045      	beq.n	8004396 <HAL_DMA_Init+0x5c6>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a50      	ldr	r2, [pc, #320]	@ (8004450 <HAL_DMA_Init+0x680>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d040      	beq.n	8004396 <HAL_DMA_Init+0x5c6>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a4e      	ldr	r2, [pc, #312]	@ (8004454 <HAL_DMA_Init+0x684>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d03b      	beq.n	8004396 <HAL_DMA_Init+0x5c6>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a4d      	ldr	r2, [pc, #308]	@ (8004458 <HAL_DMA_Init+0x688>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d036      	beq.n	8004396 <HAL_DMA_Init+0x5c6>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a4b      	ldr	r2, [pc, #300]	@ (800445c <HAL_DMA_Init+0x68c>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d031      	beq.n	8004396 <HAL_DMA_Init+0x5c6>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a4a      	ldr	r2, [pc, #296]	@ (8004460 <HAL_DMA_Init+0x690>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d02c      	beq.n	8004396 <HAL_DMA_Init+0x5c6>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a48      	ldr	r2, [pc, #288]	@ (8004464 <HAL_DMA_Init+0x694>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d027      	beq.n	8004396 <HAL_DMA_Init+0x5c6>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a47      	ldr	r2, [pc, #284]	@ (8004468 <HAL_DMA_Init+0x698>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d022      	beq.n	8004396 <HAL_DMA_Init+0x5c6>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a45      	ldr	r2, [pc, #276]	@ (800446c <HAL_DMA_Init+0x69c>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d01d      	beq.n	8004396 <HAL_DMA_Init+0x5c6>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a44      	ldr	r2, [pc, #272]	@ (8004470 <HAL_DMA_Init+0x6a0>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d018      	beq.n	8004396 <HAL_DMA_Init+0x5c6>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a42      	ldr	r2, [pc, #264]	@ (8004474 <HAL_DMA_Init+0x6a4>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d013      	beq.n	8004396 <HAL_DMA_Init+0x5c6>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a41      	ldr	r2, [pc, #260]	@ (8004478 <HAL_DMA_Init+0x6a8>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d00e      	beq.n	8004396 <HAL_DMA_Init+0x5c6>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a3f      	ldr	r2, [pc, #252]	@ (800447c <HAL_DMA_Init+0x6ac>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d009      	beq.n	8004396 <HAL_DMA_Init+0x5c6>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a3e      	ldr	r2, [pc, #248]	@ (8004480 <HAL_DMA_Init+0x6b0>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d004      	beq.n	8004396 <HAL_DMA_Init+0x5c6>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a3c      	ldr	r2, [pc, #240]	@ (8004484 <HAL_DMA_Init+0x6b4>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d101      	bne.n	800439a <HAL_DMA_Init+0x5ca>
 8004396:	2301      	movs	r3, #1
 8004398:	e000      	b.n	800439c <HAL_DMA_Init+0x5cc>
 800439a:	2300      	movs	r3, #0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d032      	beq.n	8004406 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f002 fa43 	bl	800682c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	2b80      	cmp	r3, #128	@ 0x80
 80043ac:	d102      	bne.n	80043b4 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	685a      	ldr	r2, [r3, #4]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043bc:	b2d2      	uxtb	r2, r2
 80043be:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80043c4:	687a      	ldr	r2, [r7, #4]
 80043c6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80043c8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d010      	beq.n	80043f4 <HAL_DMA_Init+0x624>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	2b08      	cmp	r3, #8
 80043d8:	d80c      	bhi.n	80043f4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f002 fac0 	bl	8006960 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80043e4:	2200      	movs	r2, #0
 80043e6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80043f0:	605a      	str	r2, [r3, #4]
 80043f2:	e008      	b.n	8004406 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2201      	movs	r2, #1
 8004410:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004414:	2300      	movs	r3, #0
}
 8004416:	4618      	mov	r0, r3
 8004418:	3718      	adds	r7, #24
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
 800441e:	bf00      	nop
 8004420:	a7fdabf8 	.word	0xa7fdabf8
 8004424:	cccccccd 	.word	0xcccccccd
 8004428:	40020010 	.word	0x40020010
 800442c:	40020028 	.word	0x40020028
 8004430:	40020040 	.word	0x40020040
 8004434:	40020058 	.word	0x40020058
 8004438:	40020070 	.word	0x40020070
 800443c:	40020088 	.word	0x40020088
 8004440:	400200a0 	.word	0x400200a0
 8004444:	400200b8 	.word	0x400200b8
 8004448:	40020410 	.word	0x40020410
 800444c:	40020428 	.word	0x40020428
 8004450:	40020440 	.word	0x40020440
 8004454:	40020458 	.word	0x40020458
 8004458:	40020470 	.word	0x40020470
 800445c:	40020488 	.word	0x40020488
 8004460:	400204a0 	.word	0x400204a0
 8004464:	400204b8 	.word	0x400204b8
 8004468:	58025408 	.word	0x58025408
 800446c:	5802541c 	.word	0x5802541c
 8004470:	58025430 	.word	0x58025430
 8004474:	58025444 	.word	0x58025444
 8004478:	58025458 	.word	0x58025458
 800447c:	5802546c 	.word	0x5802546c
 8004480:	58025480 	.word	0x58025480
 8004484:	58025494 	.word	0x58025494

08004488 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b086      	sub	sp, #24
 800448c:	af00      	add	r7, sp, #0
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	60b9      	str	r1, [r7, #8]
 8004492:	607a      	str	r2, [r7, #4]
 8004494:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004496:	2300      	movs	r3, #0
 8004498:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d101      	bne.n	80044a4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e226      	b.n	80048f2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d101      	bne.n	80044b2 <HAL_DMA_Start_IT+0x2a>
 80044ae:	2302      	movs	r3, #2
 80044b0:	e21f      	b.n	80048f2 <HAL_DMA_Start_IT+0x46a>
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2201      	movs	r2, #1
 80044b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	f040 820a 	bne.w	80048dc <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2202      	movs	r2, #2
 80044cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2200      	movs	r2, #0
 80044d4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a68      	ldr	r2, [pc, #416]	@ (800467c <HAL_DMA_Start_IT+0x1f4>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d04a      	beq.n	8004576 <HAL_DMA_Start_IT+0xee>
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a66      	ldr	r2, [pc, #408]	@ (8004680 <HAL_DMA_Start_IT+0x1f8>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d045      	beq.n	8004576 <HAL_DMA_Start_IT+0xee>
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a65      	ldr	r2, [pc, #404]	@ (8004684 <HAL_DMA_Start_IT+0x1fc>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d040      	beq.n	8004576 <HAL_DMA_Start_IT+0xee>
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a63      	ldr	r2, [pc, #396]	@ (8004688 <HAL_DMA_Start_IT+0x200>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d03b      	beq.n	8004576 <HAL_DMA_Start_IT+0xee>
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a62      	ldr	r2, [pc, #392]	@ (800468c <HAL_DMA_Start_IT+0x204>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d036      	beq.n	8004576 <HAL_DMA_Start_IT+0xee>
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a60      	ldr	r2, [pc, #384]	@ (8004690 <HAL_DMA_Start_IT+0x208>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d031      	beq.n	8004576 <HAL_DMA_Start_IT+0xee>
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a5f      	ldr	r2, [pc, #380]	@ (8004694 <HAL_DMA_Start_IT+0x20c>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d02c      	beq.n	8004576 <HAL_DMA_Start_IT+0xee>
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a5d      	ldr	r2, [pc, #372]	@ (8004698 <HAL_DMA_Start_IT+0x210>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d027      	beq.n	8004576 <HAL_DMA_Start_IT+0xee>
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a5c      	ldr	r2, [pc, #368]	@ (800469c <HAL_DMA_Start_IT+0x214>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d022      	beq.n	8004576 <HAL_DMA_Start_IT+0xee>
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a5a      	ldr	r2, [pc, #360]	@ (80046a0 <HAL_DMA_Start_IT+0x218>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d01d      	beq.n	8004576 <HAL_DMA_Start_IT+0xee>
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a59      	ldr	r2, [pc, #356]	@ (80046a4 <HAL_DMA_Start_IT+0x21c>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d018      	beq.n	8004576 <HAL_DMA_Start_IT+0xee>
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a57      	ldr	r2, [pc, #348]	@ (80046a8 <HAL_DMA_Start_IT+0x220>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d013      	beq.n	8004576 <HAL_DMA_Start_IT+0xee>
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a56      	ldr	r2, [pc, #344]	@ (80046ac <HAL_DMA_Start_IT+0x224>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d00e      	beq.n	8004576 <HAL_DMA_Start_IT+0xee>
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a54      	ldr	r2, [pc, #336]	@ (80046b0 <HAL_DMA_Start_IT+0x228>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d009      	beq.n	8004576 <HAL_DMA_Start_IT+0xee>
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a53      	ldr	r2, [pc, #332]	@ (80046b4 <HAL_DMA_Start_IT+0x22c>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d004      	beq.n	8004576 <HAL_DMA_Start_IT+0xee>
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a51      	ldr	r2, [pc, #324]	@ (80046b8 <HAL_DMA_Start_IT+0x230>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d108      	bne.n	8004588 <HAL_DMA_Start_IT+0x100>
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f022 0201 	bic.w	r2, r2, #1
 8004584:	601a      	str	r2, [r3, #0]
 8004586:	e007      	b.n	8004598 <HAL_DMA_Start_IT+0x110>
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f022 0201 	bic.w	r2, r2, #1
 8004596:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	68b9      	ldr	r1, [r7, #8]
 800459e:	68f8      	ldr	r0, [r7, #12]
 80045a0:	f001 fe6a 	bl	8006278 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a34      	ldr	r2, [pc, #208]	@ (800467c <HAL_DMA_Start_IT+0x1f4>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d04a      	beq.n	8004644 <HAL_DMA_Start_IT+0x1bc>
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a33      	ldr	r2, [pc, #204]	@ (8004680 <HAL_DMA_Start_IT+0x1f8>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d045      	beq.n	8004644 <HAL_DMA_Start_IT+0x1bc>
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a31      	ldr	r2, [pc, #196]	@ (8004684 <HAL_DMA_Start_IT+0x1fc>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d040      	beq.n	8004644 <HAL_DMA_Start_IT+0x1bc>
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a30      	ldr	r2, [pc, #192]	@ (8004688 <HAL_DMA_Start_IT+0x200>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d03b      	beq.n	8004644 <HAL_DMA_Start_IT+0x1bc>
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a2e      	ldr	r2, [pc, #184]	@ (800468c <HAL_DMA_Start_IT+0x204>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d036      	beq.n	8004644 <HAL_DMA_Start_IT+0x1bc>
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a2d      	ldr	r2, [pc, #180]	@ (8004690 <HAL_DMA_Start_IT+0x208>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d031      	beq.n	8004644 <HAL_DMA_Start_IT+0x1bc>
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a2b      	ldr	r2, [pc, #172]	@ (8004694 <HAL_DMA_Start_IT+0x20c>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d02c      	beq.n	8004644 <HAL_DMA_Start_IT+0x1bc>
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a2a      	ldr	r2, [pc, #168]	@ (8004698 <HAL_DMA_Start_IT+0x210>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d027      	beq.n	8004644 <HAL_DMA_Start_IT+0x1bc>
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a28      	ldr	r2, [pc, #160]	@ (800469c <HAL_DMA_Start_IT+0x214>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d022      	beq.n	8004644 <HAL_DMA_Start_IT+0x1bc>
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a27      	ldr	r2, [pc, #156]	@ (80046a0 <HAL_DMA_Start_IT+0x218>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d01d      	beq.n	8004644 <HAL_DMA_Start_IT+0x1bc>
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a25      	ldr	r2, [pc, #148]	@ (80046a4 <HAL_DMA_Start_IT+0x21c>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d018      	beq.n	8004644 <HAL_DMA_Start_IT+0x1bc>
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a24      	ldr	r2, [pc, #144]	@ (80046a8 <HAL_DMA_Start_IT+0x220>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d013      	beq.n	8004644 <HAL_DMA_Start_IT+0x1bc>
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a22      	ldr	r2, [pc, #136]	@ (80046ac <HAL_DMA_Start_IT+0x224>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d00e      	beq.n	8004644 <HAL_DMA_Start_IT+0x1bc>
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a21      	ldr	r2, [pc, #132]	@ (80046b0 <HAL_DMA_Start_IT+0x228>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d009      	beq.n	8004644 <HAL_DMA_Start_IT+0x1bc>
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a1f      	ldr	r2, [pc, #124]	@ (80046b4 <HAL_DMA_Start_IT+0x22c>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d004      	beq.n	8004644 <HAL_DMA_Start_IT+0x1bc>
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a1e      	ldr	r2, [pc, #120]	@ (80046b8 <HAL_DMA_Start_IT+0x230>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d101      	bne.n	8004648 <HAL_DMA_Start_IT+0x1c0>
 8004644:	2301      	movs	r3, #1
 8004646:	e000      	b.n	800464a <HAL_DMA_Start_IT+0x1c2>
 8004648:	2300      	movs	r3, #0
 800464a:	2b00      	cmp	r3, #0
 800464c:	d036      	beq.n	80046bc <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f023 021e 	bic.w	r2, r3, #30
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f042 0216 	orr.w	r2, r2, #22
 8004660:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004666:	2b00      	cmp	r3, #0
 8004668:	d03e      	beq.n	80046e8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f042 0208 	orr.w	r2, r2, #8
 8004678:	601a      	str	r2, [r3, #0]
 800467a:	e035      	b.n	80046e8 <HAL_DMA_Start_IT+0x260>
 800467c:	40020010 	.word	0x40020010
 8004680:	40020028 	.word	0x40020028
 8004684:	40020040 	.word	0x40020040
 8004688:	40020058 	.word	0x40020058
 800468c:	40020070 	.word	0x40020070
 8004690:	40020088 	.word	0x40020088
 8004694:	400200a0 	.word	0x400200a0
 8004698:	400200b8 	.word	0x400200b8
 800469c:	40020410 	.word	0x40020410
 80046a0:	40020428 	.word	0x40020428
 80046a4:	40020440 	.word	0x40020440
 80046a8:	40020458 	.word	0x40020458
 80046ac:	40020470 	.word	0x40020470
 80046b0:	40020488 	.word	0x40020488
 80046b4:	400204a0 	.word	0x400204a0
 80046b8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f023 020e 	bic.w	r2, r3, #14
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f042 020a 	orr.w	r2, r2, #10
 80046ce:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d007      	beq.n	80046e8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f042 0204 	orr.w	r2, r2, #4
 80046e6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a83      	ldr	r2, [pc, #524]	@ (80048fc <HAL_DMA_Start_IT+0x474>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d072      	beq.n	80047d8 <HAL_DMA_Start_IT+0x350>
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a82      	ldr	r2, [pc, #520]	@ (8004900 <HAL_DMA_Start_IT+0x478>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d06d      	beq.n	80047d8 <HAL_DMA_Start_IT+0x350>
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a80      	ldr	r2, [pc, #512]	@ (8004904 <HAL_DMA_Start_IT+0x47c>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d068      	beq.n	80047d8 <HAL_DMA_Start_IT+0x350>
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a7f      	ldr	r2, [pc, #508]	@ (8004908 <HAL_DMA_Start_IT+0x480>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d063      	beq.n	80047d8 <HAL_DMA_Start_IT+0x350>
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a7d      	ldr	r2, [pc, #500]	@ (800490c <HAL_DMA_Start_IT+0x484>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d05e      	beq.n	80047d8 <HAL_DMA_Start_IT+0x350>
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a7c      	ldr	r2, [pc, #496]	@ (8004910 <HAL_DMA_Start_IT+0x488>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d059      	beq.n	80047d8 <HAL_DMA_Start_IT+0x350>
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a7a      	ldr	r2, [pc, #488]	@ (8004914 <HAL_DMA_Start_IT+0x48c>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d054      	beq.n	80047d8 <HAL_DMA_Start_IT+0x350>
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a79      	ldr	r2, [pc, #484]	@ (8004918 <HAL_DMA_Start_IT+0x490>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d04f      	beq.n	80047d8 <HAL_DMA_Start_IT+0x350>
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a77      	ldr	r2, [pc, #476]	@ (800491c <HAL_DMA_Start_IT+0x494>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d04a      	beq.n	80047d8 <HAL_DMA_Start_IT+0x350>
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a76      	ldr	r2, [pc, #472]	@ (8004920 <HAL_DMA_Start_IT+0x498>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d045      	beq.n	80047d8 <HAL_DMA_Start_IT+0x350>
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a74      	ldr	r2, [pc, #464]	@ (8004924 <HAL_DMA_Start_IT+0x49c>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d040      	beq.n	80047d8 <HAL_DMA_Start_IT+0x350>
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a73      	ldr	r2, [pc, #460]	@ (8004928 <HAL_DMA_Start_IT+0x4a0>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d03b      	beq.n	80047d8 <HAL_DMA_Start_IT+0x350>
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a71      	ldr	r2, [pc, #452]	@ (800492c <HAL_DMA_Start_IT+0x4a4>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d036      	beq.n	80047d8 <HAL_DMA_Start_IT+0x350>
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a70      	ldr	r2, [pc, #448]	@ (8004930 <HAL_DMA_Start_IT+0x4a8>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d031      	beq.n	80047d8 <HAL_DMA_Start_IT+0x350>
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a6e      	ldr	r2, [pc, #440]	@ (8004934 <HAL_DMA_Start_IT+0x4ac>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d02c      	beq.n	80047d8 <HAL_DMA_Start_IT+0x350>
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a6d      	ldr	r2, [pc, #436]	@ (8004938 <HAL_DMA_Start_IT+0x4b0>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d027      	beq.n	80047d8 <HAL_DMA_Start_IT+0x350>
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a6b      	ldr	r2, [pc, #428]	@ (800493c <HAL_DMA_Start_IT+0x4b4>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d022      	beq.n	80047d8 <HAL_DMA_Start_IT+0x350>
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a6a      	ldr	r2, [pc, #424]	@ (8004940 <HAL_DMA_Start_IT+0x4b8>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d01d      	beq.n	80047d8 <HAL_DMA_Start_IT+0x350>
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a68      	ldr	r2, [pc, #416]	@ (8004944 <HAL_DMA_Start_IT+0x4bc>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d018      	beq.n	80047d8 <HAL_DMA_Start_IT+0x350>
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a67      	ldr	r2, [pc, #412]	@ (8004948 <HAL_DMA_Start_IT+0x4c0>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d013      	beq.n	80047d8 <HAL_DMA_Start_IT+0x350>
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a65      	ldr	r2, [pc, #404]	@ (800494c <HAL_DMA_Start_IT+0x4c4>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d00e      	beq.n	80047d8 <HAL_DMA_Start_IT+0x350>
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a64      	ldr	r2, [pc, #400]	@ (8004950 <HAL_DMA_Start_IT+0x4c8>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d009      	beq.n	80047d8 <HAL_DMA_Start_IT+0x350>
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a62      	ldr	r2, [pc, #392]	@ (8004954 <HAL_DMA_Start_IT+0x4cc>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d004      	beq.n	80047d8 <HAL_DMA_Start_IT+0x350>
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a61      	ldr	r2, [pc, #388]	@ (8004958 <HAL_DMA_Start_IT+0x4d0>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d101      	bne.n	80047dc <HAL_DMA_Start_IT+0x354>
 80047d8:	2301      	movs	r3, #1
 80047da:	e000      	b.n	80047de <HAL_DMA_Start_IT+0x356>
 80047dc:	2300      	movs	r3, #0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d01a      	beq.n	8004818 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d007      	beq.n	8004800 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047fa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80047fe:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004804:	2b00      	cmp	r3, #0
 8004806:	d007      	beq.n	8004818 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004812:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004816:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a37      	ldr	r2, [pc, #220]	@ (80048fc <HAL_DMA_Start_IT+0x474>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d04a      	beq.n	80048b8 <HAL_DMA_Start_IT+0x430>
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a36      	ldr	r2, [pc, #216]	@ (8004900 <HAL_DMA_Start_IT+0x478>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d045      	beq.n	80048b8 <HAL_DMA_Start_IT+0x430>
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a34      	ldr	r2, [pc, #208]	@ (8004904 <HAL_DMA_Start_IT+0x47c>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d040      	beq.n	80048b8 <HAL_DMA_Start_IT+0x430>
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a33      	ldr	r2, [pc, #204]	@ (8004908 <HAL_DMA_Start_IT+0x480>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d03b      	beq.n	80048b8 <HAL_DMA_Start_IT+0x430>
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a31      	ldr	r2, [pc, #196]	@ (800490c <HAL_DMA_Start_IT+0x484>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d036      	beq.n	80048b8 <HAL_DMA_Start_IT+0x430>
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a30      	ldr	r2, [pc, #192]	@ (8004910 <HAL_DMA_Start_IT+0x488>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d031      	beq.n	80048b8 <HAL_DMA_Start_IT+0x430>
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a2e      	ldr	r2, [pc, #184]	@ (8004914 <HAL_DMA_Start_IT+0x48c>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d02c      	beq.n	80048b8 <HAL_DMA_Start_IT+0x430>
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a2d      	ldr	r2, [pc, #180]	@ (8004918 <HAL_DMA_Start_IT+0x490>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d027      	beq.n	80048b8 <HAL_DMA_Start_IT+0x430>
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a2b      	ldr	r2, [pc, #172]	@ (800491c <HAL_DMA_Start_IT+0x494>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d022      	beq.n	80048b8 <HAL_DMA_Start_IT+0x430>
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a2a      	ldr	r2, [pc, #168]	@ (8004920 <HAL_DMA_Start_IT+0x498>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d01d      	beq.n	80048b8 <HAL_DMA_Start_IT+0x430>
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a28      	ldr	r2, [pc, #160]	@ (8004924 <HAL_DMA_Start_IT+0x49c>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d018      	beq.n	80048b8 <HAL_DMA_Start_IT+0x430>
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a27      	ldr	r2, [pc, #156]	@ (8004928 <HAL_DMA_Start_IT+0x4a0>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d013      	beq.n	80048b8 <HAL_DMA_Start_IT+0x430>
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a25      	ldr	r2, [pc, #148]	@ (800492c <HAL_DMA_Start_IT+0x4a4>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d00e      	beq.n	80048b8 <HAL_DMA_Start_IT+0x430>
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a24      	ldr	r2, [pc, #144]	@ (8004930 <HAL_DMA_Start_IT+0x4a8>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d009      	beq.n	80048b8 <HAL_DMA_Start_IT+0x430>
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a22      	ldr	r2, [pc, #136]	@ (8004934 <HAL_DMA_Start_IT+0x4ac>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d004      	beq.n	80048b8 <HAL_DMA_Start_IT+0x430>
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a21      	ldr	r2, [pc, #132]	@ (8004938 <HAL_DMA_Start_IT+0x4b0>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d108      	bne.n	80048ca <HAL_DMA_Start_IT+0x442>
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f042 0201 	orr.w	r2, r2, #1
 80048c6:	601a      	str	r2, [r3, #0]
 80048c8:	e012      	b.n	80048f0 <HAL_DMA_Start_IT+0x468>
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f042 0201 	orr.w	r2, r2, #1
 80048d8:	601a      	str	r2, [r3, #0]
 80048da:	e009      	b.n	80048f0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80048e2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2200      	movs	r2, #0
 80048e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80048f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3718      	adds	r7, #24
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	bf00      	nop
 80048fc:	40020010 	.word	0x40020010
 8004900:	40020028 	.word	0x40020028
 8004904:	40020040 	.word	0x40020040
 8004908:	40020058 	.word	0x40020058
 800490c:	40020070 	.word	0x40020070
 8004910:	40020088 	.word	0x40020088
 8004914:	400200a0 	.word	0x400200a0
 8004918:	400200b8 	.word	0x400200b8
 800491c:	40020410 	.word	0x40020410
 8004920:	40020428 	.word	0x40020428
 8004924:	40020440 	.word	0x40020440
 8004928:	40020458 	.word	0x40020458
 800492c:	40020470 	.word	0x40020470
 8004930:	40020488 	.word	0x40020488
 8004934:	400204a0 	.word	0x400204a0
 8004938:	400204b8 	.word	0x400204b8
 800493c:	58025408 	.word	0x58025408
 8004940:	5802541c 	.word	0x5802541c
 8004944:	58025430 	.word	0x58025430
 8004948:	58025444 	.word	0x58025444
 800494c:	58025458 	.word	0x58025458
 8004950:	5802546c 	.word	0x5802546c
 8004954:	58025480 	.word	0x58025480
 8004958:	58025494 	.word	0x58025494

0800495c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b086      	sub	sp, #24
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004964:	f7fd fd84 	bl	8002470 <HAL_GetTick>
 8004968:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d101      	bne.n	8004974 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e2dc      	b.n	8004f2e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800497a:	b2db      	uxtb	r3, r3
 800497c:	2b02      	cmp	r3, #2
 800497e:	d008      	beq.n	8004992 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2280      	movs	r2, #128	@ 0x80
 8004984:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2200      	movs	r2, #0
 800498a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	e2cd      	b.n	8004f2e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a76      	ldr	r2, [pc, #472]	@ (8004b70 <HAL_DMA_Abort+0x214>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d04a      	beq.n	8004a32 <HAL_DMA_Abort+0xd6>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a74      	ldr	r2, [pc, #464]	@ (8004b74 <HAL_DMA_Abort+0x218>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d045      	beq.n	8004a32 <HAL_DMA_Abort+0xd6>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a73      	ldr	r2, [pc, #460]	@ (8004b78 <HAL_DMA_Abort+0x21c>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d040      	beq.n	8004a32 <HAL_DMA_Abort+0xd6>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a71      	ldr	r2, [pc, #452]	@ (8004b7c <HAL_DMA_Abort+0x220>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d03b      	beq.n	8004a32 <HAL_DMA_Abort+0xd6>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a70      	ldr	r2, [pc, #448]	@ (8004b80 <HAL_DMA_Abort+0x224>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d036      	beq.n	8004a32 <HAL_DMA_Abort+0xd6>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a6e      	ldr	r2, [pc, #440]	@ (8004b84 <HAL_DMA_Abort+0x228>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d031      	beq.n	8004a32 <HAL_DMA_Abort+0xd6>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a6d      	ldr	r2, [pc, #436]	@ (8004b88 <HAL_DMA_Abort+0x22c>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d02c      	beq.n	8004a32 <HAL_DMA_Abort+0xd6>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a6b      	ldr	r2, [pc, #428]	@ (8004b8c <HAL_DMA_Abort+0x230>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d027      	beq.n	8004a32 <HAL_DMA_Abort+0xd6>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a6a      	ldr	r2, [pc, #424]	@ (8004b90 <HAL_DMA_Abort+0x234>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d022      	beq.n	8004a32 <HAL_DMA_Abort+0xd6>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a68      	ldr	r2, [pc, #416]	@ (8004b94 <HAL_DMA_Abort+0x238>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d01d      	beq.n	8004a32 <HAL_DMA_Abort+0xd6>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a67      	ldr	r2, [pc, #412]	@ (8004b98 <HAL_DMA_Abort+0x23c>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d018      	beq.n	8004a32 <HAL_DMA_Abort+0xd6>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a65      	ldr	r2, [pc, #404]	@ (8004b9c <HAL_DMA_Abort+0x240>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d013      	beq.n	8004a32 <HAL_DMA_Abort+0xd6>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a64      	ldr	r2, [pc, #400]	@ (8004ba0 <HAL_DMA_Abort+0x244>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d00e      	beq.n	8004a32 <HAL_DMA_Abort+0xd6>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a62      	ldr	r2, [pc, #392]	@ (8004ba4 <HAL_DMA_Abort+0x248>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d009      	beq.n	8004a32 <HAL_DMA_Abort+0xd6>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a61      	ldr	r2, [pc, #388]	@ (8004ba8 <HAL_DMA_Abort+0x24c>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d004      	beq.n	8004a32 <HAL_DMA_Abort+0xd6>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a5f      	ldr	r2, [pc, #380]	@ (8004bac <HAL_DMA_Abort+0x250>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d101      	bne.n	8004a36 <HAL_DMA_Abort+0xda>
 8004a32:	2301      	movs	r3, #1
 8004a34:	e000      	b.n	8004a38 <HAL_DMA_Abort+0xdc>
 8004a36:	2300      	movs	r3, #0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d013      	beq.n	8004a64 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f022 021e 	bic.w	r2, r2, #30
 8004a4a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	695a      	ldr	r2, [r3, #20]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004a5a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	617b      	str	r3, [r7, #20]
 8004a62:	e00a      	b.n	8004a7a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f022 020e 	bic.w	r2, r2, #14
 8004a72:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a3c      	ldr	r2, [pc, #240]	@ (8004b70 <HAL_DMA_Abort+0x214>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d072      	beq.n	8004b6a <HAL_DMA_Abort+0x20e>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a3a      	ldr	r2, [pc, #232]	@ (8004b74 <HAL_DMA_Abort+0x218>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d06d      	beq.n	8004b6a <HAL_DMA_Abort+0x20e>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a39      	ldr	r2, [pc, #228]	@ (8004b78 <HAL_DMA_Abort+0x21c>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d068      	beq.n	8004b6a <HAL_DMA_Abort+0x20e>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a37      	ldr	r2, [pc, #220]	@ (8004b7c <HAL_DMA_Abort+0x220>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d063      	beq.n	8004b6a <HAL_DMA_Abort+0x20e>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a36      	ldr	r2, [pc, #216]	@ (8004b80 <HAL_DMA_Abort+0x224>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d05e      	beq.n	8004b6a <HAL_DMA_Abort+0x20e>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a34      	ldr	r2, [pc, #208]	@ (8004b84 <HAL_DMA_Abort+0x228>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d059      	beq.n	8004b6a <HAL_DMA_Abort+0x20e>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a33      	ldr	r2, [pc, #204]	@ (8004b88 <HAL_DMA_Abort+0x22c>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d054      	beq.n	8004b6a <HAL_DMA_Abort+0x20e>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a31      	ldr	r2, [pc, #196]	@ (8004b8c <HAL_DMA_Abort+0x230>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d04f      	beq.n	8004b6a <HAL_DMA_Abort+0x20e>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a30      	ldr	r2, [pc, #192]	@ (8004b90 <HAL_DMA_Abort+0x234>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d04a      	beq.n	8004b6a <HAL_DMA_Abort+0x20e>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a2e      	ldr	r2, [pc, #184]	@ (8004b94 <HAL_DMA_Abort+0x238>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d045      	beq.n	8004b6a <HAL_DMA_Abort+0x20e>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a2d      	ldr	r2, [pc, #180]	@ (8004b98 <HAL_DMA_Abort+0x23c>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d040      	beq.n	8004b6a <HAL_DMA_Abort+0x20e>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a2b      	ldr	r2, [pc, #172]	@ (8004b9c <HAL_DMA_Abort+0x240>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d03b      	beq.n	8004b6a <HAL_DMA_Abort+0x20e>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a2a      	ldr	r2, [pc, #168]	@ (8004ba0 <HAL_DMA_Abort+0x244>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d036      	beq.n	8004b6a <HAL_DMA_Abort+0x20e>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a28      	ldr	r2, [pc, #160]	@ (8004ba4 <HAL_DMA_Abort+0x248>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d031      	beq.n	8004b6a <HAL_DMA_Abort+0x20e>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a27      	ldr	r2, [pc, #156]	@ (8004ba8 <HAL_DMA_Abort+0x24c>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d02c      	beq.n	8004b6a <HAL_DMA_Abort+0x20e>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a25      	ldr	r2, [pc, #148]	@ (8004bac <HAL_DMA_Abort+0x250>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d027      	beq.n	8004b6a <HAL_DMA_Abort+0x20e>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a24      	ldr	r2, [pc, #144]	@ (8004bb0 <HAL_DMA_Abort+0x254>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d022      	beq.n	8004b6a <HAL_DMA_Abort+0x20e>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a22      	ldr	r2, [pc, #136]	@ (8004bb4 <HAL_DMA_Abort+0x258>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d01d      	beq.n	8004b6a <HAL_DMA_Abort+0x20e>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a21      	ldr	r2, [pc, #132]	@ (8004bb8 <HAL_DMA_Abort+0x25c>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d018      	beq.n	8004b6a <HAL_DMA_Abort+0x20e>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a1f      	ldr	r2, [pc, #124]	@ (8004bbc <HAL_DMA_Abort+0x260>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d013      	beq.n	8004b6a <HAL_DMA_Abort+0x20e>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a1e      	ldr	r2, [pc, #120]	@ (8004bc0 <HAL_DMA_Abort+0x264>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d00e      	beq.n	8004b6a <HAL_DMA_Abort+0x20e>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a1c      	ldr	r2, [pc, #112]	@ (8004bc4 <HAL_DMA_Abort+0x268>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d009      	beq.n	8004b6a <HAL_DMA_Abort+0x20e>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a1b      	ldr	r2, [pc, #108]	@ (8004bc8 <HAL_DMA_Abort+0x26c>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d004      	beq.n	8004b6a <HAL_DMA_Abort+0x20e>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a19      	ldr	r2, [pc, #100]	@ (8004bcc <HAL_DMA_Abort+0x270>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d132      	bne.n	8004bd0 <HAL_DMA_Abort+0x274>
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e031      	b.n	8004bd2 <HAL_DMA_Abort+0x276>
 8004b6e:	bf00      	nop
 8004b70:	40020010 	.word	0x40020010
 8004b74:	40020028 	.word	0x40020028
 8004b78:	40020040 	.word	0x40020040
 8004b7c:	40020058 	.word	0x40020058
 8004b80:	40020070 	.word	0x40020070
 8004b84:	40020088 	.word	0x40020088
 8004b88:	400200a0 	.word	0x400200a0
 8004b8c:	400200b8 	.word	0x400200b8
 8004b90:	40020410 	.word	0x40020410
 8004b94:	40020428 	.word	0x40020428
 8004b98:	40020440 	.word	0x40020440
 8004b9c:	40020458 	.word	0x40020458
 8004ba0:	40020470 	.word	0x40020470
 8004ba4:	40020488 	.word	0x40020488
 8004ba8:	400204a0 	.word	0x400204a0
 8004bac:	400204b8 	.word	0x400204b8
 8004bb0:	58025408 	.word	0x58025408
 8004bb4:	5802541c 	.word	0x5802541c
 8004bb8:	58025430 	.word	0x58025430
 8004bbc:	58025444 	.word	0x58025444
 8004bc0:	58025458 	.word	0x58025458
 8004bc4:	5802546c 	.word	0x5802546c
 8004bc8:	58025480 	.word	0x58025480
 8004bcc:	58025494 	.word	0x58025494
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d007      	beq.n	8004be6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004be0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004be4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a6d      	ldr	r2, [pc, #436]	@ (8004da0 <HAL_DMA_Abort+0x444>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d04a      	beq.n	8004c86 <HAL_DMA_Abort+0x32a>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a6b      	ldr	r2, [pc, #428]	@ (8004da4 <HAL_DMA_Abort+0x448>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d045      	beq.n	8004c86 <HAL_DMA_Abort+0x32a>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a6a      	ldr	r2, [pc, #424]	@ (8004da8 <HAL_DMA_Abort+0x44c>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d040      	beq.n	8004c86 <HAL_DMA_Abort+0x32a>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a68      	ldr	r2, [pc, #416]	@ (8004dac <HAL_DMA_Abort+0x450>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d03b      	beq.n	8004c86 <HAL_DMA_Abort+0x32a>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a67      	ldr	r2, [pc, #412]	@ (8004db0 <HAL_DMA_Abort+0x454>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d036      	beq.n	8004c86 <HAL_DMA_Abort+0x32a>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a65      	ldr	r2, [pc, #404]	@ (8004db4 <HAL_DMA_Abort+0x458>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d031      	beq.n	8004c86 <HAL_DMA_Abort+0x32a>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a64      	ldr	r2, [pc, #400]	@ (8004db8 <HAL_DMA_Abort+0x45c>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d02c      	beq.n	8004c86 <HAL_DMA_Abort+0x32a>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a62      	ldr	r2, [pc, #392]	@ (8004dbc <HAL_DMA_Abort+0x460>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d027      	beq.n	8004c86 <HAL_DMA_Abort+0x32a>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a61      	ldr	r2, [pc, #388]	@ (8004dc0 <HAL_DMA_Abort+0x464>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d022      	beq.n	8004c86 <HAL_DMA_Abort+0x32a>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a5f      	ldr	r2, [pc, #380]	@ (8004dc4 <HAL_DMA_Abort+0x468>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d01d      	beq.n	8004c86 <HAL_DMA_Abort+0x32a>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a5e      	ldr	r2, [pc, #376]	@ (8004dc8 <HAL_DMA_Abort+0x46c>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d018      	beq.n	8004c86 <HAL_DMA_Abort+0x32a>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a5c      	ldr	r2, [pc, #368]	@ (8004dcc <HAL_DMA_Abort+0x470>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d013      	beq.n	8004c86 <HAL_DMA_Abort+0x32a>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a5b      	ldr	r2, [pc, #364]	@ (8004dd0 <HAL_DMA_Abort+0x474>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d00e      	beq.n	8004c86 <HAL_DMA_Abort+0x32a>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a59      	ldr	r2, [pc, #356]	@ (8004dd4 <HAL_DMA_Abort+0x478>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d009      	beq.n	8004c86 <HAL_DMA_Abort+0x32a>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a58      	ldr	r2, [pc, #352]	@ (8004dd8 <HAL_DMA_Abort+0x47c>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d004      	beq.n	8004c86 <HAL_DMA_Abort+0x32a>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a56      	ldr	r2, [pc, #344]	@ (8004ddc <HAL_DMA_Abort+0x480>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d108      	bne.n	8004c98 <HAL_DMA_Abort+0x33c>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f022 0201 	bic.w	r2, r2, #1
 8004c94:	601a      	str	r2, [r3, #0]
 8004c96:	e007      	b.n	8004ca8 <HAL_DMA_Abort+0x34c>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f022 0201 	bic.w	r2, r2, #1
 8004ca6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004ca8:	e013      	b.n	8004cd2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004caa:	f7fd fbe1 	bl	8002470 <HAL_GetTick>
 8004cae:	4602      	mov	r2, r0
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	1ad3      	subs	r3, r2, r3
 8004cb4:	2b05      	cmp	r3, #5
 8004cb6:	d90c      	bls.n	8004cd2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2220      	movs	r2, #32
 8004cbc:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2203      	movs	r2, #3
 8004cc2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e12d      	b.n	8004f2e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 0301 	and.w	r3, r3, #1
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d1e5      	bne.n	8004caa <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a2f      	ldr	r2, [pc, #188]	@ (8004da0 <HAL_DMA_Abort+0x444>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d04a      	beq.n	8004d7e <HAL_DMA_Abort+0x422>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a2d      	ldr	r2, [pc, #180]	@ (8004da4 <HAL_DMA_Abort+0x448>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d045      	beq.n	8004d7e <HAL_DMA_Abort+0x422>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a2c      	ldr	r2, [pc, #176]	@ (8004da8 <HAL_DMA_Abort+0x44c>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d040      	beq.n	8004d7e <HAL_DMA_Abort+0x422>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a2a      	ldr	r2, [pc, #168]	@ (8004dac <HAL_DMA_Abort+0x450>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d03b      	beq.n	8004d7e <HAL_DMA_Abort+0x422>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a29      	ldr	r2, [pc, #164]	@ (8004db0 <HAL_DMA_Abort+0x454>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d036      	beq.n	8004d7e <HAL_DMA_Abort+0x422>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a27      	ldr	r2, [pc, #156]	@ (8004db4 <HAL_DMA_Abort+0x458>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d031      	beq.n	8004d7e <HAL_DMA_Abort+0x422>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a26      	ldr	r2, [pc, #152]	@ (8004db8 <HAL_DMA_Abort+0x45c>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d02c      	beq.n	8004d7e <HAL_DMA_Abort+0x422>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a24      	ldr	r2, [pc, #144]	@ (8004dbc <HAL_DMA_Abort+0x460>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d027      	beq.n	8004d7e <HAL_DMA_Abort+0x422>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a23      	ldr	r2, [pc, #140]	@ (8004dc0 <HAL_DMA_Abort+0x464>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d022      	beq.n	8004d7e <HAL_DMA_Abort+0x422>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a21      	ldr	r2, [pc, #132]	@ (8004dc4 <HAL_DMA_Abort+0x468>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d01d      	beq.n	8004d7e <HAL_DMA_Abort+0x422>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a20      	ldr	r2, [pc, #128]	@ (8004dc8 <HAL_DMA_Abort+0x46c>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d018      	beq.n	8004d7e <HAL_DMA_Abort+0x422>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a1e      	ldr	r2, [pc, #120]	@ (8004dcc <HAL_DMA_Abort+0x470>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d013      	beq.n	8004d7e <HAL_DMA_Abort+0x422>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a1d      	ldr	r2, [pc, #116]	@ (8004dd0 <HAL_DMA_Abort+0x474>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d00e      	beq.n	8004d7e <HAL_DMA_Abort+0x422>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a1b      	ldr	r2, [pc, #108]	@ (8004dd4 <HAL_DMA_Abort+0x478>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d009      	beq.n	8004d7e <HAL_DMA_Abort+0x422>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a1a      	ldr	r2, [pc, #104]	@ (8004dd8 <HAL_DMA_Abort+0x47c>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d004      	beq.n	8004d7e <HAL_DMA_Abort+0x422>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a18      	ldr	r2, [pc, #96]	@ (8004ddc <HAL_DMA_Abort+0x480>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d101      	bne.n	8004d82 <HAL_DMA_Abort+0x426>
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e000      	b.n	8004d84 <HAL_DMA_Abort+0x428>
 8004d82:	2300      	movs	r3, #0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d02b      	beq.n	8004de0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d8c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d92:	f003 031f 	and.w	r3, r3, #31
 8004d96:	223f      	movs	r2, #63	@ 0x3f
 8004d98:	409a      	lsls	r2, r3
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	609a      	str	r2, [r3, #8]
 8004d9e:	e02a      	b.n	8004df6 <HAL_DMA_Abort+0x49a>
 8004da0:	40020010 	.word	0x40020010
 8004da4:	40020028 	.word	0x40020028
 8004da8:	40020040 	.word	0x40020040
 8004dac:	40020058 	.word	0x40020058
 8004db0:	40020070 	.word	0x40020070
 8004db4:	40020088 	.word	0x40020088
 8004db8:	400200a0 	.word	0x400200a0
 8004dbc:	400200b8 	.word	0x400200b8
 8004dc0:	40020410 	.word	0x40020410
 8004dc4:	40020428 	.word	0x40020428
 8004dc8:	40020440 	.word	0x40020440
 8004dcc:	40020458 	.word	0x40020458
 8004dd0:	40020470 	.word	0x40020470
 8004dd4:	40020488 	.word	0x40020488
 8004dd8:	400204a0 	.word	0x400204a0
 8004ddc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004de4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dea:	f003 031f 	and.w	r3, r3, #31
 8004dee:	2201      	movs	r2, #1
 8004df0:	409a      	lsls	r2, r3
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a4f      	ldr	r2, [pc, #316]	@ (8004f38 <HAL_DMA_Abort+0x5dc>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d072      	beq.n	8004ee6 <HAL_DMA_Abort+0x58a>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a4d      	ldr	r2, [pc, #308]	@ (8004f3c <HAL_DMA_Abort+0x5e0>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d06d      	beq.n	8004ee6 <HAL_DMA_Abort+0x58a>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a4c      	ldr	r2, [pc, #304]	@ (8004f40 <HAL_DMA_Abort+0x5e4>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d068      	beq.n	8004ee6 <HAL_DMA_Abort+0x58a>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a4a      	ldr	r2, [pc, #296]	@ (8004f44 <HAL_DMA_Abort+0x5e8>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d063      	beq.n	8004ee6 <HAL_DMA_Abort+0x58a>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a49      	ldr	r2, [pc, #292]	@ (8004f48 <HAL_DMA_Abort+0x5ec>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d05e      	beq.n	8004ee6 <HAL_DMA_Abort+0x58a>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a47      	ldr	r2, [pc, #284]	@ (8004f4c <HAL_DMA_Abort+0x5f0>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d059      	beq.n	8004ee6 <HAL_DMA_Abort+0x58a>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a46      	ldr	r2, [pc, #280]	@ (8004f50 <HAL_DMA_Abort+0x5f4>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d054      	beq.n	8004ee6 <HAL_DMA_Abort+0x58a>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a44      	ldr	r2, [pc, #272]	@ (8004f54 <HAL_DMA_Abort+0x5f8>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d04f      	beq.n	8004ee6 <HAL_DMA_Abort+0x58a>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a43      	ldr	r2, [pc, #268]	@ (8004f58 <HAL_DMA_Abort+0x5fc>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d04a      	beq.n	8004ee6 <HAL_DMA_Abort+0x58a>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a41      	ldr	r2, [pc, #260]	@ (8004f5c <HAL_DMA_Abort+0x600>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d045      	beq.n	8004ee6 <HAL_DMA_Abort+0x58a>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a40      	ldr	r2, [pc, #256]	@ (8004f60 <HAL_DMA_Abort+0x604>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d040      	beq.n	8004ee6 <HAL_DMA_Abort+0x58a>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a3e      	ldr	r2, [pc, #248]	@ (8004f64 <HAL_DMA_Abort+0x608>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d03b      	beq.n	8004ee6 <HAL_DMA_Abort+0x58a>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a3d      	ldr	r2, [pc, #244]	@ (8004f68 <HAL_DMA_Abort+0x60c>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d036      	beq.n	8004ee6 <HAL_DMA_Abort+0x58a>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a3b      	ldr	r2, [pc, #236]	@ (8004f6c <HAL_DMA_Abort+0x610>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d031      	beq.n	8004ee6 <HAL_DMA_Abort+0x58a>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a3a      	ldr	r2, [pc, #232]	@ (8004f70 <HAL_DMA_Abort+0x614>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d02c      	beq.n	8004ee6 <HAL_DMA_Abort+0x58a>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a38      	ldr	r2, [pc, #224]	@ (8004f74 <HAL_DMA_Abort+0x618>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d027      	beq.n	8004ee6 <HAL_DMA_Abort+0x58a>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a37      	ldr	r2, [pc, #220]	@ (8004f78 <HAL_DMA_Abort+0x61c>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d022      	beq.n	8004ee6 <HAL_DMA_Abort+0x58a>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a35      	ldr	r2, [pc, #212]	@ (8004f7c <HAL_DMA_Abort+0x620>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d01d      	beq.n	8004ee6 <HAL_DMA_Abort+0x58a>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a34      	ldr	r2, [pc, #208]	@ (8004f80 <HAL_DMA_Abort+0x624>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d018      	beq.n	8004ee6 <HAL_DMA_Abort+0x58a>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a32      	ldr	r2, [pc, #200]	@ (8004f84 <HAL_DMA_Abort+0x628>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d013      	beq.n	8004ee6 <HAL_DMA_Abort+0x58a>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a31      	ldr	r2, [pc, #196]	@ (8004f88 <HAL_DMA_Abort+0x62c>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d00e      	beq.n	8004ee6 <HAL_DMA_Abort+0x58a>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a2f      	ldr	r2, [pc, #188]	@ (8004f8c <HAL_DMA_Abort+0x630>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d009      	beq.n	8004ee6 <HAL_DMA_Abort+0x58a>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a2e      	ldr	r2, [pc, #184]	@ (8004f90 <HAL_DMA_Abort+0x634>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d004      	beq.n	8004ee6 <HAL_DMA_Abort+0x58a>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a2c      	ldr	r2, [pc, #176]	@ (8004f94 <HAL_DMA_Abort+0x638>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d101      	bne.n	8004eea <HAL_DMA_Abort+0x58e>
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e000      	b.n	8004eec <HAL_DMA_Abort+0x590>
 8004eea:	2300      	movs	r3, #0
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d015      	beq.n	8004f1c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004ef8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d00c      	beq.n	8004f1c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f0c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004f10:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004f1a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2200      	movs	r2, #0
 8004f28:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8004f2c:	2300      	movs	r3, #0
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3718      	adds	r7, #24
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	bf00      	nop
 8004f38:	40020010 	.word	0x40020010
 8004f3c:	40020028 	.word	0x40020028
 8004f40:	40020040 	.word	0x40020040
 8004f44:	40020058 	.word	0x40020058
 8004f48:	40020070 	.word	0x40020070
 8004f4c:	40020088 	.word	0x40020088
 8004f50:	400200a0 	.word	0x400200a0
 8004f54:	400200b8 	.word	0x400200b8
 8004f58:	40020410 	.word	0x40020410
 8004f5c:	40020428 	.word	0x40020428
 8004f60:	40020440 	.word	0x40020440
 8004f64:	40020458 	.word	0x40020458
 8004f68:	40020470 	.word	0x40020470
 8004f6c:	40020488 	.word	0x40020488
 8004f70:	400204a0 	.word	0x400204a0
 8004f74:	400204b8 	.word	0x400204b8
 8004f78:	58025408 	.word	0x58025408
 8004f7c:	5802541c 	.word	0x5802541c
 8004f80:	58025430 	.word	0x58025430
 8004f84:	58025444 	.word	0x58025444
 8004f88:	58025458 	.word	0x58025458
 8004f8c:	5802546c 	.word	0x5802546c
 8004f90:	58025480 	.word	0x58025480
 8004f94:	58025494 	.word	0x58025494

08004f98 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b084      	sub	sp, #16
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d101      	bne.n	8004faa <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e237      	b.n	800541a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	2b02      	cmp	r3, #2
 8004fb4:	d004      	beq.n	8004fc0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2280      	movs	r2, #128	@ 0x80
 8004fba:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e22c      	b.n	800541a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a5c      	ldr	r2, [pc, #368]	@ (8005138 <HAL_DMA_Abort_IT+0x1a0>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d04a      	beq.n	8005060 <HAL_DMA_Abort_IT+0xc8>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a5b      	ldr	r2, [pc, #364]	@ (800513c <HAL_DMA_Abort_IT+0x1a4>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d045      	beq.n	8005060 <HAL_DMA_Abort_IT+0xc8>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a59      	ldr	r2, [pc, #356]	@ (8005140 <HAL_DMA_Abort_IT+0x1a8>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d040      	beq.n	8005060 <HAL_DMA_Abort_IT+0xc8>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a58      	ldr	r2, [pc, #352]	@ (8005144 <HAL_DMA_Abort_IT+0x1ac>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d03b      	beq.n	8005060 <HAL_DMA_Abort_IT+0xc8>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a56      	ldr	r2, [pc, #344]	@ (8005148 <HAL_DMA_Abort_IT+0x1b0>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d036      	beq.n	8005060 <HAL_DMA_Abort_IT+0xc8>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a55      	ldr	r2, [pc, #340]	@ (800514c <HAL_DMA_Abort_IT+0x1b4>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d031      	beq.n	8005060 <HAL_DMA_Abort_IT+0xc8>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a53      	ldr	r2, [pc, #332]	@ (8005150 <HAL_DMA_Abort_IT+0x1b8>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d02c      	beq.n	8005060 <HAL_DMA_Abort_IT+0xc8>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a52      	ldr	r2, [pc, #328]	@ (8005154 <HAL_DMA_Abort_IT+0x1bc>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d027      	beq.n	8005060 <HAL_DMA_Abort_IT+0xc8>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a50      	ldr	r2, [pc, #320]	@ (8005158 <HAL_DMA_Abort_IT+0x1c0>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d022      	beq.n	8005060 <HAL_DMA_Abort_IT+0xc8>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a4f      	ldr	r2, [pc, #316]	@ (800515c <HAL_DMA_Abort_IT+0x1c4>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d01d      	beq.n	8005060 <HAL_DMA_Abort_IT+0xc8>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a4d      	ldr	r2, [pc, #308]	@ (8005160 <HAL_DMA_Abort_IT+0x1c8>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d018      	beq.n	8005060 <HAL_DMA_Abort_IT+0xc8>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a4c      	ldr	r2, [pc, #304]	@ (8005164 <HAL_DMA_Abort_IT+0x1cc>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d013      	beq.n	8005060 <HAL_DMA_Abort_IT+0xc8>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a4a      	ldr	r2, [pc, #296]	@ (8005168 <HAL_DMA_Abort_IT+0x1d0>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d00e      	beq.n	8005060 <HAL_DMA_Abort_IT+0xc8>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a49      	ldr	r2, [pc, #292]	@ (800516c <HAL_DMA_Abort_IT+0x1d4>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d009      	beq.n	8005060 <HAL_DMA_Abort_IT+0xc8>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a47      	ldr	r2, [pc, #284]	@ (8005170 <HAL_DMA_Abort_IT+0x1d8>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d004      	beq.n	8005060 <HAL_DMA_Abort_IT+0xc8>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a46      	ldr	r2, [pc, #280]	@ (8005174 <HAL_DMA_Abort_IT+0x1dc>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d101      	bne.n	8005064 <HAL_DMA_Abort_IT+0xcc>
 8005060:	2301      	movs	r3, #1
 8005062:	e000      	b.n	8005066 <HAL_DMA_Abort_IT+0xce>
 8005064:	2300      	movs	r3, #0
 8005066:	2b00      	cmp	r3, #0
 8005068:	f000 8086 	beq.w	8005178 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2204      	movs	r2, #4
 8005070:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a2f      	ldr	r2, [pc, #188]	@ (8005138 <HAL_DMA_Abort_IT+0x1a0>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d04a      	beq.n	8005114 <HAL_DMA_Abort_IT+0x17c>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a2e      	ldr	r2, [pc, #184]	@ (800513c <HAL_DMA_Abort_IT+0x1a4>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d045      	beq.n	8005114 <HAL_DMA_Abort_IT+0x17c>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a2c      	ldr	r2, [pc, #176]	@ (8005140 <HAL_DMA_Abort_IT+0x1a8>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d040      	beq.n	8005114 <HAL_DMA_Abort_IT+0x17c>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a2b      	ldr	r2, [pc, #172]	@ (8005144 <HAL_DMA_Abort_IT+0x1ac>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d03b      	beq.n	8005114 <HAL_DMA_Abort_IT+0x17c>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a29      	ldr	r2, [pc, #164]	@ (8005148 <HAL_DMA_Abort_IT+0x1b0>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d036      	beq.n	8005114 <HAL_DMA_Abort_IT+0x17c>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a28      	ldr	r2, [pc, #160]	@ (800514c <HAL_DMA_Abort_IT+0x1b4>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d031      	beq.n	8005114 <HAL_DMA_Abort_IT+0x17c>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a26      	ldr	r2, [pc, #152]	@ (8005150 <HAL_DMA_Abort_IT+0x1b8>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d02c      	beq.n	8005114 <HAL_DMA_Abort_IT+0x17c>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a25      	ldr	r2, [pc, #148]	@ (8005154 <HAL_DMA_Abort_IT+0x1bc>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d027      	beq.n	8005114 <HAL_DMA_Abort_IT+0x17c>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a23      	ldr	r2, [pc, #140]	@ (8005158 <HAL_DMA_Abort_IT+0x1c0>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d022      	beq.n	8005114 <HAL_DMA_Abort_IT+0x17c>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a22      	ldr	r2, [pc, #136]	@ (800515c <HAL_DMA_Abort_IT+0x1c4>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d01d      	beq.n	8005114 <HAL_DMA_Abort_IT+0x17c>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a20      	ldr	r2, [pc, #128]	@ (8005160 <HAL_DMA_Abort_IT+0x1c8>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d018      	beq.n	8005114 <HAL_DMA_Abort_IT+0x17c>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a1f      	ldr	r2, [pc, #124]	@ (8005164 <HAL_DMA_Abort_IT+0x1cc>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d013      	beq.n	8005114 <HAL_DMA_Abort_IT+0x17c>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a1d      	ldr	r2, [pc, #116]	@ (8005168 <HAL_DMA_Abort_IT+0x1d0>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d00e      	beq.n	8005114 <HAL_DMA_Abort_IT+0x17c>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a1c      	ldr	r2, [pc, #112]	@ (800516c <HAL_DMA_Abort_IT+0x1d4>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d009      	beq.n	8005114 <HAL_DMA_Abort_IT+0x17c>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a1a      	ldr	r2, [pc, #104]	@ (8005170 <HAL_DMA_Abort_IT+0x1d8>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d004      	beq.n	8005114 <HAL_DMA_Abort_IT+0x17c>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a19      	ldr	r2, [pc, #100]	@ (8005174 <HAL_DMA_Abort_IT+0x1dc>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d108      	bne.n	8005126 <HAL_DMA_Abort_IT+0x18e>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f022 0201 	bic.w	r2, r2, #1
 8005122:	601a      	str	r2, [r3, #0]
 8005124:	e178      	b.n	8005418 <HAL_DMA_Abort_IT+0x480>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f022 0201 	bic.w	r2, r2, #1
 8005134:	601a      	str	r2, [r3, #0]
 8005136:	e16f      	b.n	8005418 <HAL_DMA_Abort_IT+0x480>
 8005138:	40020010 	.word	0x40020010
 800513c:	40020028 	.word	0x40020028
 8005140:	40020040 	.word	0x40020040
 8005144:	40020058 	.word	0x40020058
 8005148:	40020070 	.word	0x40020070
 800514c:	40020088 	.word	0x40020088
 8005150:	400200a0 	.word	0x400200a0
 8005154:	400200b8 	.word	0x400200b8
 8005158:	40020410 	.word	0x40020410
 800515c:	40020428 	.word	0x40020428
 8005160:	40020440 	.word	0x40020440
 8005164:	40020458 	.word	0x40020458
 8005168:	40020470 	.word	0x40020470
 800516c:	40020488 	.word	0x40020488
 8005170:	400204a0 	.word	0x400204a0
 8005174:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f022 020e 	bic.w	r2, r2, #14
 8005186:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a6c      	ldr	r2, [pc, #432]	@ (8005340 <HAL_DMA_Abort_IT+0x3a8>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d04a      	beq.n	8005228 <HAL_DMA_Abort_IT+0x290>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a6b      	ldr	r2, [pc, #428]	@ (8005344 <HAL_DMA_Abort_IT+0x3ac>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d045      	beq.n	8005228 <HAL_DMA_Abort_IT+0x290>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a69      	ldr	r2, [pc, #420]	@ (8005348 <HAL_DMA_Abort_IT+0x3b0>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d040      	beq.n	8005228 <HAL_DMA_Abort_IT+0x290>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a68      	ldr	r2, [pc, #416]	@ (800534c <HAL_DMA_Abort_IT+0x3b4>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d03b      	beq.n	8005228 <HAL_DMA_Abort_IT+0x290>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a66      	ldr	r2, [pc, #408]	@ (8005350 <HAL_DMA_Abort_IT+0x3b8>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d036      	beq.n	8005228 <HAL_DMA_Abort_IT+0x290>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a65      	ldr	r2, [pc, #404]	@ (8005354 <HAL_DMA_Abort_IT+0x3bc>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d031      	beq.n	8005228 <HAL_DMA_Abort_IT+0x290>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a63      	ldr	r2, [pc, #396]	@ (8005358 <HAL_DMA_Abort_IT+0x3c0>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d02c      	beq.n	8005228 <HAL_DMA_Abort_IT+0x290>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a62      	ldr	r2, [pc, #392]	@ (800535c <HAL_DMA_Abort_IT+0x3c4>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d027      	beq.n	8005228 <HAL_DMA_Abort_IT+0x290>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a60      	ldr	r2, [pc, #384]	@ (8005360 <HAL_DMA_Abort_IT+0x3c8>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d022      	beq.n	8005228 <HAL_DMA_Abort_IT+0x290>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a5f      	ldr	r2, [pc, #380]	@ (8005364 <HAL_DMA_Abort_IT+0x3cc>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d01d      	beq.n	8005228 <HAL_DMA_Abort_IT+0x290>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a5d      	ldr	r2, [pc, #372]	@ (8005368 <HAL_DMA_Abort_IT+0x3d0>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d018      	beq.n	8005228 <HAL_DMA_Abort_IT+0x290>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a5c      	ldr	r2, [pc, #368]	@ (800536c <HAL_DMA_Abort_IT+0x3d4>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d013      	beq.n	8005228 <HAL_DMA_Abort_IT+0x290>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a5a      	ldr	r2, [pc, #360]	@ (8005370 <HAL_DMA_Abort_IT+0x3d8>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d00e      	beq.n	8005228 <HAL_DMA_Abort_IT+0x290>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a59      	ldr	r2, [pc, #356]	@ (8005374 <HAL_DMA_Abort_IT+0x3dc>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d009      	beq.n	8005228 <HAL_DMA_Abort_IT+0x290>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a57      	ldr	r2, [pc, #348]	@ (8005378 <HAL_DMA_Abort_IT+0x3e0>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d004      	beq.n	8005228 <HAL_DMA_Abort_IT+0x290>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a56      	ldr	r2, [pc, #344]	@ (800537c <HAL_DMA_Abort_IT+0x3e4>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d108      	bne.n	800523a <HAL_DMA_Abort_IT+0x2a2>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f022 0201 	bic.w	r2, r2, #1
 8005236:	601a      	str	r2, [r3, #0]
 8005238:	e007      	b.n	800524a <HAL_DMA_Abort_IT+0x2b2>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f022 0201 	bic.w	r2, r2, #1
 8005248:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a3c      	ldr	r2, [pc, #240]	@ (8005340 <HAL_DMA_Abort_IT+0x3a8>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d072      	beq.n	800533a <HAL_DMA_Abort_IT+0x3a2>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a3a      	ldr	r2, [pc, #232]	@ (8005344 <HAL_DMA_Abort_IT+0x3ac>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d06d      	beq.n	800533a <HAL_DMA_Abort_IT+0x3a2>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a39      	ldr	r2, [pc, #228]	@ (8005348 <HAL_DMA_Abort_IT+0x3b0>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d068      	beq.n	800533a <HAL_DMA_Abort_IT+0x3a2>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a37      	ldr	r2, [pc, #220]	@ (800534c <HAL_DMA_Abort_IT+0x3b4>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d063      	beq.n	800533a <HAL_DMA_Abort_IT+0x3a2>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a36      	ldr	r2, [pc, #216]	@ (8005350 <HAL_DMA_Abort_IT+0x3b8>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d05e      	beq.n	800533a <HAL_DMA_Abort_IT+0x3a2>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a34      	ldr	r2, [pc, #208]	@ (8005354 <HAL_DMA_Abort_IT+0x3bc>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d059      	beq.n	800533a <HAL_DMA_Abort_IT+0x3a2>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a33      	ldr	r2, [pc, #204]	@ (8005358 <HAL_DMA_Abort_IT+0x3c0>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d054      	beq.n	800533a <HAL_DMA_Abort_IT+0x3a2>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a31      	ldr	r2, [pc, #196]	@ (800535c <HAL_DMA_Abort_IT+0x3c4>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d04f      	beq.n	800533a <HAL_DMA_Abort_IT+0x3a2>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a30      	ldr	r2, [pc, #192]	@ (8005360 <HAL_DMA_Abort_IT+0x3c8>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d04a      	beq.n	800533a <HAL_DMA_Abort_IT+0x3a2>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a2e      	ldr	r2, [pc, #184]	@ (8005364 <HAL_DMA_Abort_IT+0x3cc>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d045      	beq.n	800533a <HAL_DMA_Abort_IT+0x3a2>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a2d      	ldr	r2, [pc, #180]	@ (8005368 <HAL_DMA_Abort_IT+0x3d0>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d040      	beq.n	800533a <HAL_DMA_Abort_IT+0x3a2>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a2b      	ldr	r2, [pc, #172]	@ (800536c <HAL_DMA_Abort_IT+0x3d4>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d03b      	beq.n	800533a <HAL_DMA_Abort_IT+0x3a2>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a2a      	ldr	r2, [pc, #168]	@ (8005370 <HAL_DMA_Abort_IT+0x3d8>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d036      	beq.n	800533a <HAL_DMA_Abort_IT+0x3a2>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a28      	ldr	r2, [pc, #160]	@ (8005374 <HAL_DMA_Abort_IT+0x3dc>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d031      	beq.n	800533a <HAL_DMA_Abort_IT+0x3a2>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a27      	ldr	r2, [pc, #156]	@ (8005378 <HAL_DMA_Abort_IT+0x3e0>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d02c      	beq.n	800533a <HAL_DMA_Abort_IT+0x3a2>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a25      	ldr	r2, [pc, #148]	@ (800537c <HAL_DMA_Abort_IT+0x3e4>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d027      	beq.n	800533a <HAL_DMA_Abort_IT+0x3a2>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a24      	ldr	r2, [pc, #144]	@ (8005380 <HAL_DMA_Abort_IT+0x3e8>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d022      	beq.n	800533a <HAL_DMA_Abort_IT+0x3a2>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a22      	ldr	r2, [pc, #136]	@ (8005384 <HAL_DMA_Abort_IT+0x3ec>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d01d      	beq.n	800533a <HAL_DMA_Abort_IT+0x3a2>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a21      	ldr	r2, [pc, #132]	@ (8005388 <HAL_DMA_Abort_IT+0x3f0>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d018      	beq.n	800533a <HAL_DMA_Abort_IT+0x3a2>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a1f      	ldr	r2, [pc, #124]	@ (800538c <HAL_DMA_Abort_IT+0x3f4>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d013      	beq.n	800533a <HAL_DMA_Abort_IT+0x3a2>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a1e      	ldr	r2, [pc, #120]	@ (8005390 <HAL_DMA_Abort_IT+0x3f8>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d00e      	beq.n	800533a <HAL_DMA_Abort_IT+0x3a2>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a1c      	ldr	r2, [pc, #112]	@ (8005394 <HAL_DMA_Abort_IT+0x3fc>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d009      	beq.n	800533a <HAL_DMA_Abort_IT+0x3a2>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a1b      	ldr	r2, [pc, #108]	@ (8005398 <HAL_DMA_Abort_IT+0x400>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d004      	beq.n	800533a <HAL_DMA_Abort_IT+0x3a2>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a19      	ldr	r2, [pc, #100]	@ (800539c <HAL_DMA_Abort_IT+0x404>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d132      	bne.n	80053a0 <HAL_DMA_Abort_IT+0x408>
 800533a:	2301      	movs	r3, #1
 800533c:	e031      	b.n	80053a2 <HAL_DMA_Abort_IT+0x40a>
 800533e:	bf00      	nop
 8005340:	40020010 	.word	0x40020010
 8005344:	40020028 	.word	0x40020028
 8005348:	40020040 	.word	0x40020040
 800534c:	40020058 	.word	0x40020058
 8005350:	40020070 	.word	0x40020070
 8005354:	40020088 	.word	0x40020088
 8005358:	400200a0 	.word	0x400200a0
 800535c:	400200b8 	.word	0x400200b8
 8005360:	40020410 	.word	0x40020410
 8005364:	40020428 	.word	0x40020428
 8005368:	40020440 	.word	0x40020440
 800536c:	40020458 	.word	0x40020458
 8005370:	40020470 	.word	0x40020470
 8005374:	40020488 	.word	0x40020488
 8005378:	400204a0 	.word	0x400204a0
 800537c:	400204b8 	.word	0x400204b8
 8005380:	58025408 	.word	0x58025408
 8005384:	5802541c 	.word	0x5802541c
 8005388:	58025430 	.word	0x58025430
 800538c:	58025444 	.word	0x58025444
 8005390:	58025458 	.word	0x58025458
 8005394:	5802546c 	.word	0x5802546c
 8005398:	58025480 	.word	0x58025480
 800539c:	58025494 	.word	0x58025494
 80053a0:	2300      	movs	r3, #0
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d028      	beq.n	80053f8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053b0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80053b4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053ba:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053c0:	f003 031f 	and.w	r3, r3, #31
 80053c4:	2201      	movs	r2, #1
 80053c6:	409a      	lsls	r2, r3
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80053d4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d00c      	beq.n	80053f8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80053e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80053ec:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053f2:	687a      	ldr	r2, [r7, #4]
 80053f4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80053f6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2201      	movs	r2, #1
 80053fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2200      	movs	r2, #0
 8005404:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800540c:	2b00      	cmp	r3, #0
 800540e:	d003      	beq.n	8005418 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005418:	2300      	movs	r3, #0
}
 800541a:	4618      	mov	r0, r3
 800541c:	3710      	adds	r7, #16
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}
 8005422:	bf00      	nop

08005424 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b08a      	sub	sp, #40	@ 0x28
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800542c:	2300      	movs	r3, #0
 800542e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005430:	4b67      	ldr	r3, [pc, #412]	@ (80055d0 <HAL_DMA_IRQHandler+0x1ac>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a67      	ldr	r2, [pc, #412]	@ (80055d4 <HAL_DMA_IRQHandler+0x1b0>)
 8005436:	fba2 2303 	umull	r2, r3, r2, r3
 800543a:	0a9b      	lsrs	r3, r3, #10
 800543c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005442:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005448:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800544a:	6a3b      	ldr	r3, [r7, #32]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005450:	69fb      	ldr	r3, [r7, #28]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a5f      	ldr	r2, [pc, #380]	@ (80055d8 <HAL_DMA_IRQHandler+0x1b4>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d04a      	beq.n	80054f6 <HAL_DMA_IRQHandler+0xd2>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a5d      	ldr	r2, [pc, #372]	@ (80055dc <HAL_DMA_IRQHandler+0x1b8>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d045      	beq.n	80054f6 <HAL_DMA_IRQHandler+0xd2>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a5c      	ldr	r2, [pc, #368]	@ (80055e0 <HAL_DMA_IRQHandler+0x1bc>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d040      	beq.n	80054f6 <HAL_DMA_IRQHandler+0xd2>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a5a      	ldr	r2, [pc, #360]	@ (80055e4 <HAL_DMA_IRQHandler+0x1c0>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d03b      	beq.n	80054f6 <HAL_DMA_IRQHandler+0xd2>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a59      	ldr	r2, [pc, #356]	@ (80055e8 <HAL_DMA_IRQHandler+0x1c4>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d036      	beq.n	80054f6 <HAL_DMA_IRQHandler+0xd2>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a57      	ldr	r2, [pc, #348]	@ (80055ec <HAL_DMA_IRQHandler+0x1c8>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d031      	beq.n	80054f6 <HAL_DMA_IRQHandler+0xd2>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a56      	ldr	r2, [pc, #344]	@ (80055f0 <HAL_DMA_IRQHandler+0x1cc>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d02c      	beq.n	80054f6 <HAL_DMA_IRQHandler+0xd2>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a54      	ldr	r2, [pc, #336]	@ (80055f4 <HAL_DMA_IRQHandler+0x1d0>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d027      	beq.n	80054f6 <HAL_DMA_IRQHandler+0xd2>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a53      	ldr	r2, [pc, #332]	@ (80055f8 <HAL_DMA_IRQHandler+0x1d4>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d022      	beq.n	80054f6 <HAL_DMA_IRQHandler+0xd2>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a51      	ldr	r2, [pc, #324]	@ (80055fc <HAL_DMA_IRQHandler+0x1d8>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d01d      	beq.n	80054f6 <HAL_DMA_IRQHandler+0xd2>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a50      	ldr	r2, [pc, #320]	@ (8005600 <HAL_DMA_IRQHandler+0x1dc>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d018      	beq.n	80054f6 <HAL_DMA_IRQHandler+0xd2>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a4e      	ldr	r2, [pc, #312]	@ (8005604 <HAL_DMA_IRQHandler+0x1e0>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d013      	beq.n	80054f6 <HAL_DMA_IRQHandler+0xd2>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a4d      	ldr	r2, [pc, #308]	@ (8005608 <HAL_DMA_IRQHandler+0x1e4>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d00e      	beq.n	80054f6 <HAL_DMA_IRQHandler+0xd2>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a4b      	ldr	r2, [pc, #300]	@ (800560c <HAL_DMA_IRQHandler+0x1e8>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d009      	beq.n	80054f6 <HAL_DMA_IRQHandler+0xd2>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a4a      	ldr	r2, [pc, #296]	@ (8005610 <HAL_DMA_IRQHandler+0x1ec>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d004      	beq.n	80054f6 <HAL_DMA_IRQHandler+0xd2>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a48      	ldr	r2, [pc, #288]	@ (8005614 <HAL_DMA_IRQHandler+0x1f0>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d101      	bne.n	80054fa <HAL_DMA_IRQHandler+0xd6>
 80054f6:	2301      	movs	r3, #1
 80054f8:	e000      	b.n	80054fc <HAL_DMA_IRQHandler+0xd8>
 80054fa:	2300      	movs	r3, #0
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	f000 842b 	beq.w	8005d58 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005506:	f003 031f 	and.w	r3, r3, #31
 800550a:	2208      	movs	r2, #8
 800550c:	409a      	lsls	r2, r3
 800550e:	69bb      	ldr	r3, [r7, #24]
 8005510:	4013      	ands	r3, r2
 8005512:	2b00      	cmp	r3, #0
 8005514:	f000 80a2 	beq.w	800565c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a2e      	ldr	r2, [pc, #184]	@ (80055d8 <HAL_DMA_IRQHandler+0x1b4>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d04a      	beq.n	80055b8 <HAL_DMA_IRQHandler+0x194>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a2d      	ldr	r2, [pc, #180]	@ (80055dc <HAL_DMA_IRQHandler+0x1b8>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d045      	beq.n	80055b8 <HAL_DMA_IRQHandler+0x194>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a2b      	ldr	r2, [pc, #172]	@ (80055e0 <HAL_DMA_IRQHandler+0x1bc>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d040      	beq.n	80055b8 <HAL_DMA_IRQHandler+0x194>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a2a      	ldr	r2, [pc, #168]	@ (80055e4 <HAL_DMA_IRQHandler+0x1c0>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d03b      	beq.n	80055b8 <HAL_DMA_IRQHandler+0x194>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a28      	ldr	r2, [pc, #160]	@ (80055e8 <HAL_DMA_IRQHandler+0x1c4>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d036      	beq.n	80055b8 <HAL_DMA_IRQHandler+0x194>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a27      	ldr	r2, [pc, #156]	@ (80055ec <HAL_DMA_IRQHandler+0x1c8>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d031      	beq.n	80055b8 <HAL_DMA_IRQHandler+0x194>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a25      	ldr	r2, [pc, #148]	@ (80055f0 <HAL_DMA_IRQHandler+0x1cc>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d02c      	beq.n	80055b8 <HAL_DMA_IRQHandler+0x194>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a24      	ldr	r2, [pc, #144]	@ (80055f4 <HAL_DMA_IRQHandler+0x1d0>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d027      	beq.n	80055b8 <HAL_DMA_IRQHandler+0x194>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a22      	ldr	r2, [pc, #136]	@ (80055f8 <HAL_DMA_IRQHandler+0x1d4>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d022      	beq.n	80055b8 <HAL_DMA_IRQHandler+0x194>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a21      	ldr	r2, [pc, #132]	@ (80055fc <HAL_DMA_IRQHandler+0x1d8>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d01d      	beq.n	80055b8 <HAL_DMA_IRQHandler+0x194>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a1f      	ldr	r2, [pc, #124]	@ (8005600 <HAL_DMA_IRQHandler+0x1dc>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d018      	beq.n	80055b8 <HAL_DMA_IRQHandler+0x194>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a1e      	ldr	r2, [pc, #120]	@ (8005604 <HAL_DMA_IRQHandler+0x1e0>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d013      	beq.n	80055b8 <HAL_DMA_IRQHandler+0x194>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a1c      	ldr	r2, [pc, #112]	@ (8005608 <HAL_DMA_IRQHandler+0x1e4>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d00e      	beq.n	80055b8 <HAL_DMA_IRQHandler+0x194>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a1b      	ldr	r2, [pc, #108]	@ (800560c <HAL_DMA_IRQHandler+0x1e8>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d009      	beq.n	80055b8 <HAL_DMA_IRQHandler+0x194>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a19      	ldr	r2, [pc, #100]	@ (8005610 <HAL_DMA_IRQHandler+0x1ec>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d004      	beq.n	80055b8 <HAL_DMA_IRQHandler+0x194>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a18      	ldr	r2, [pc, #96]	@ (8005614 <HAL_DMA_IRQHandler+0x1f0>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d12f      	bne.n	8005618 <HAL_DMA_IRQHandler+0x1f4>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 0304 	and.w	r3, r3, #4
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	bf14      	ite	ne
 80055c6:	2301      	movne	r3, #1
 80055c8:	2300      	moveq	r3, #0
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	e02e      	b.n	800562c <HAL_DMA_IRQHandler+0x208>
 80055ce:	bf00      	nop
 80055d0:	24000000 	.word	0x24000000
 80055d4:	1b4e81b5 	.word	0x1b4e81b5
 80055d8:	40020010 	.word	0x40020010
 80055dc:	40020028 	.word	0x40020028
 80055e0:	40020040 	.word	0x40020040
 80055e4:	40020058 	.word	0x40020058
 80055e8:	40020070 	.word	0x40020070
 80055ec:	40020088 	.word	0x40020088
 80055f0:	400200a0 	.word	0x400200a0
 80055f4:	400200b8 	.word	0x400200b8
 80055f8:	40020410 	.word	0x40020410
 80055fc:	40020428 	.word	0x40020428
 8005600:	40020440 	.word	0x40020440
 8005604:	40020458 	.word	0x40020458
 8005608:	40020470 	.word	0x40020470
 800560c:	40020488 	.word	0x40020488
 8005610:	400204a0 	.word	0x400204a0
 8005614:	400204b8 	.word	0x400204b8
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f003 0308 	and.w	r3, r3, #8
 8005622:	2b00      	cmp	r3, #0
 8005624:	bf14      	ite	ne
 8005626:	2301      	movne	r3, #1
 8005628:	2300      	moveq	r3, #0
 800562a:	b2db      	uxtb	r3, r3
 800562c:	2b00      	cmp	r3, #0
 800562e:	d015      	beq.n	800565c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f022 0204 	bic.w	r2, r2, #4
 800563e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005644:	f003 031f 	and.w	r3, r3, #31
 8005648:	2208      	movs	r2, #8
 800564a:	409a      	lsls	r2, r3
 800564c:	6a3b      	ldr	r3, [r7, #32]
 800564e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005654:	f043 0201 	orr.w	r2, r3, #1
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005660:	f003 031f 	and.w	r3, r3, #31
 8005664:	69ba      	ldr	r2, [r7, #24]
 8005666:	fa22 f303 	lsr.w	r3, r2, r3
 800566a:	f003 0301 	and.w	r3, r3, #1
 800566e:	2b00      	cmp	r3, #0
 8005670:	d06e      	beq.n	8005750 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a69      	ldr	r2, [pc, #420]	@ (800581c <HAL_DMA_IRQHandler+0x3f8>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d04a      	beq.n	8005712 <HAL_DMA_IRQHandler+0x2ee>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a67      	ldr	r2, [pc, #412]	@ (8005820 <HAL_DMA_IRQHandler+0x3fc>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d045      	beq.n	8005712 <HAL_DMA_IRQHandler+0x2ee>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a66      	ldr	r2, [pc, #408]	@ (8005824 <HAL_DMA_IRQHandler+0x400>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d040      	beq.n	8005712 <HAL_DMA_IRQHandler+0x2ee>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a64      	ldr	r2, [pc, #400]	@ (8005828 <HAL_DMA_IRQHandler+0x404>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d03b      	beq.n	8005712 <HAL_DMA_IRQHandler+0x2ee>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a63      	ldr	r2, [pc, #396]	@ (800582c <HAL_DMA_IRQHandler+0x408>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d036      	beq.n	8005712 <HAL_DMA_IRQHandler+0x2ee>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a61      	ldr	r2, [pc, #388]	@ (8005830 <HAL_DMA_IRQHandler+0x40c>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d031      	beq.n	8005712 <HAL_DMA_IRQHandler+0x2ee>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a60      	ldr	r2, [pc, #384]	@ (8005834 <HAL_DMA_IRQHandler+0x410>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d02c      	beq.n	8005712 <HAL_DMA_IRQHandler+0x2ee>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a5e      	ldr	r2, [pc, #376]	@ (8005838 <HAL_DMA_IRQHandler+0x414>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d027      	beq.n	8005712 <HAL_DMA_IRQHandler+0x2ee>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a5d      	ldr	r2, [pc, #372]	@ (800583c <HAL_DMA_IRQHandler+0x418>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d022      	beq.n	8005712 <HAL_DMA_IRQHandler+0x2ee>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a5b      	ldr	r2, [pc, #364]	@ (8005840 <HAL_DMA_IRQHandler+0x41c>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d01d      	beq.n	8005712 <HAL_DMA_IRQHandler+0x2ee>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a5a      	ldr	r2, [pc, #360]	@ (8005844 <HAL_DMA_IRQHandler+0x420>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d018      	beq.n	8005712 <HAL_DMA_IRQHandler+0x2ee>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a58      	ldr	r2, [pc, #352]	@ (8005848 <HAL_DMA_IRQHandler+0x424>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d013      	beq.n	8005712 <HAL_DMA_IRQHandler+0x2ee>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a57      	ldr	r2, [pc, #348]	@ (800584c <HAL_DMA_IRQHandler+0x428>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d00e      	beq.n	8005712 <HAL_DMA_IRQHandler+0x2ee>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a55      	ldr	r2, [pc, #340]	@ (8005850 <HAL_DMA_IRQHandler+0x42c>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d009      	beq.n	8005712 <HAL_DMA_IRQHandler+0x2ee>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a54      	ldr	r2, [pc, #336]	@ (8005854 <HAL_DMA_IRQHandler+0x430>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d004      	beq.n	8005712 <HAL_DMA_IRQHandler+0x2ee>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a52      	ldr	r2, [pc, #328]	@ (8005858 <HAL_DMA_IRQHandler+0x434>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d10a      	bne.n	8005728 <HAL_DMA_IRQHandler+0x304>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	695b      	ldr	r3, [r3, #20]
 8005718:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800571c:	2b00      	cmp	r3, #0
 800571e:	bf14      	ite	ne
 8005720:	2301      	movne	r3, #1
 8005722:	2300      	moveq	r3, #0
 8005724:	b2db      	uxtb	r3, r3
 8005726:	e003      	b.n	8005730 <HAL_DMA_IRQHandler+0x30c>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	2300      	movs	r3, #0
 8005730:	2b00      	cmp	r3, #0
 8005732:	d00d      	beq.n	8005750 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005738:	f003 031f 	and.w	r3, r3, #31
 800573c:	2201      	movs	r2, #1
 800573e:	409a      	lsls	r2, r3
 8005740:	6a3b      	ldr	r3, [r7, #32]
 8005742:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005748:	f043 0202 	orr.w	r2, r3, #2
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005754:	f003 031f 	and.w	r3, r3, #31
 8005758:	2204      	movs	r2, #4
 800575a:	409a      	lsls	r2, r3
 800575c:	69bb      	ldr	r3, [r7, #24]
 800575e:	4013      	ands	r3, r2
 8005760:	2b00      	cmp	r3, #0
 8005762:	f000 808f 	beq.w	8005884 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a2c      	ldr	r2, [pc, #176]	@ (800581c <HAL_DMA_IRQHandler+0x3f8>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d04a      	beq.n	8005806 <HAL_DMA_IRQHandler+0x3e2>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a2a      	ldr	r2, [pc, #168]	@ (8005820 <HAL_DMA_IRQHandler+0x3fc>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d045      	beq.n	8005806 <HAL_DMA_IRQHandler+0x3e2>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a29      	ldr	r2, [pc, #164]	@ (8005824 <HAL_DMA_IRQHandler+0x400>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d040      	beq.n	8005806 <HAL_DMA_IRQHandler+0x3e2>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a27      	ldr	r2, [pc, #156]	@ (8005828 <HAL_DMA_IRQHandler+0x404>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d03b      	beq.n	8005806 <HAL_DMA_IRQHandler+0x3e2>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a26      	ldr	r2, [pc, #152]	@ (800582c <HAL_DMA_IRQHandler+0x408>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d036      	beq.n	8005806 <HAL_DMA_IRQHandler+0x3e2>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a24      	ldr	r2, [pc, #144]	@ (8005830 <HAL_DMA_IRQHandler+0x40c>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d031      	beq.n	8005806 <HAL_DMA_IRQHandler+0x3e2>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a23      	ldr	r2, [pc, #140]	@ (8005834 <HAL_DMA_IRQHandler+0x410>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d02c      	beq.n	8005806 <HAL_DMA_IRQHandler+0x3e2>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a21      	ldr	r2, [pc, #132]	@ (8005838 <HAL_DMA_IRQHandler+0x414>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d027      	beq.n	8005806 <HAL_DMA_IRQHandler+0x3e2>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a20      	ldr	r2, [pc, #128]	@ (800583c <HAL_DMA_IRQHandler+0x418>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d022      	beq.n	8005806 <HAL_DMA_IRQHandler+0x3e2>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a1e      	ldr	r2, [pc, #120]	@ (8005840 <HAL_DMA_IRQHandler+0x41c>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d01d      	beq.n	8005806 <HAL_DMA_IRQHandler+0x3e2>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a1d      	ldr	r2, [pc, #116]	@ (8005844 <HAL_DMA_IRQHandler+0x420>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d018      	beq.n	8005806 <HAL_DMA_IRQHandler+0x3e2>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a1b      	ldr	r2, [pc, #108]	@ (8005848 <HAL_DMA_IRQHandler+0x424>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d013      	beq.n	8005806 <HAL_DMA_IRQHandler+0x3e2>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a1a      	ldr	r2, [pc, #104]	@ (800584c <HAL_DMA_IRQHandler+0x428>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d00e      	beq.n	8005806 <HAL_DMA_IRQHandler+0x3e2>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a18      	ldr	r2, [pc, #96]	@ (8005850 <HAL_DMA_IRQHandler+0x42c>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d009      	beq.n	8005806 <HAL_DMA_IRQHandler+0x3e2>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a17      	ldr	r2, [pc, #92]	@ (8005854 <HAL_DMA_IRQHandler+0x430>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d004      	beq.n	8005806 <HAL_DMA_IRQHandler+0x3e2>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a15      	ldr	r2, [pc, #84]	@ (8005858 <HAL_DMA_IRQHandler+0x434>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d12a      	bne.n	800585c <HAL_DMA_IRQHandler+0x438>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f003 0302 	and.w	r3, r3, #2
 8005810:	2b00      	cmp	r3, #0
 8005812:	bf14      	ite	ne
 8005814:	2301      	movne	r3, #1
 8005816:	2300      	moveq	r3, #0
 8005818:	b2db      	uxtb	r3, r3
 800581a:	e023      	b.n	8005864 <HAL_DMA_IRQHandler+0x440>
 800581c:	40020010 	.word	0x40020010
 8005820:	40020028 	.word	0x40020028
 8005824:	40020040 	.word	0x40020040
 8005828:	40020058 	.word	0x40020058
 800582c:	40020070 	.word	0x40020070
 8005830:	40020088 	.word	0x40020088
 8005834:	400200a0 	.word	0x400200a0
 8005838:	400200b8 	.word	0x400200b8
 800583c:	40020410 	.word	0x40020410
 8005840:	40020428 	.word	0x40020428
 8005844:	40020440 	.word	0x40020440
 8005848:	40020458 	.word	0x40020458
 800584c:	40020470 	.word	0x40020470
 8005850:	40020488 	.word	0x40020488
 8005854:	400204a0 	.word	0x400204a0
 8005858:	400204b8 	.word	0x400204b8
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	2300      	movs	r3, #0
 8005864:	2b00      	cmp	r3, #0
 8005866:	d00d      	beq.n	8005884 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800586c:	f003 031f 	and.w	r3, r3, #31
 8005870:	2204      	movs	r2, #4
 8005872:	409a      	lsls	r2, r3
 8005874:	6a3b      	ldr	r3, [r7, #32]
 8005876:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800587c:	f043 0204 	orr.w	r2, r3, #4
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005888:	f003 031f 	and.w	r3, r3, #31
 800588c:	2210      	movs	r2, #16
 800588e:	409a      	lsls	r2, r3
 8005890:	69bb      	ldr	r3, [r7, #24]
 8005892:	4013      	ands	r3, r2
 8005894:	2b00      	cmp	r3, #0
 8005896:	f000 80a6 	beq.w	80059e6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a85      	ldr	r2, [pc, #532]	@ (8005ab4 <HAL_DMA_IRQHandler+0x690>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d04a      	beq.n	800593a <HAL_DMA_IRQHandler+0x516>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a83      	ldr	r2, [pc, #524]	@ (8005ab8 <HAL_DMA_IRQHandler+0x694>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d045      	beq.n	800593a <HAL_DMA_IRQHandler+0x516>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a82      	ldr	r2, [pc, #520]	@ (8005abc <HAL_DMA_IRQHandler+0x698>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d040      	beq.n	800593a <HAL_DMA_IRQHandler+0x516>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a80      	ldr	r2, [pc, #512]	@ (8005ac0 <HAL_DMA_IRQHandler+0x69c>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d03b      	beq.n	800593a <HAL_DMA_IRQHandler+0x516>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a7f      	ldr	r2, [pc, #508]	@ (8005ac4 <HAL_DMA_IRQHandler+0x6a0>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d036      	beq.n	800593a <HAL_DMA_IRQHandler+0x516>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a7d      	ldr	r2, [pc, #500]	@ (8005ac8 <HAL_DMA_IRQHandler+0x6a4>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d031      	beq.n	800593a <HAL_DMA_IRQHandler+0x516>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a7c      	ldr	r2, [pc, #496]	@ (8005acc <HAL_DMA_IRQHandler+0x6a8>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d02c      	beq.n	800593a <HAL_DMA_IRQHandler+0x516>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a7a      	ldr	r2, [pc, #488]	@ (8005ad0 <HAL_DMA_IRQHandler+0x6ac>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d027      	beq.n	800593a <HAL_DMA_IRQHandler+0x516>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a79      	ldr	r2, [pc, #484]	@ (8005ad4 <HAL_DMA_IRQHandler+0x6b0>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d022      	beq.n	800593a <HAL_DMA_IRQHandler+0x516>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a77      	ldr	r2, [pc, #476]	@ (8005ad8 <HAL_DMA_IRQHandler+0x6b4>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d01d      	beq.n	800593a <HAL_DMA_IRQHandler+0x516>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a76      	ldr	r2, [pc, #472]	@ (8005adc <HAL_DMA_IRQHandler+0x6b8>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d018      	beq.n	800593a <HAL_DMA_IRQHandler+0x516>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a74      	ldr	r2, [pc, #464]	@ (8005ae0 <HAL_DMA_IRQHandler+0x6bc>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d013      	beq.n	800593a <HAL_DMA_IRQHandler+0x516>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a73      	ldr	r2, [pc, #460]	@ (8005ae4 <HAL_DMA_IRQHandler+0x6c0>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d00e      	beq.n	800593a <HAL_DMA_IRQHandler+0x516>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a71      	ldr	r2, [pc, #452]	@ (8005ae8 <HAL_DMA_IRQHandler+0x6c4>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d009      	beq.n	800593a <HAL_DMA_IRQHandler+0x516>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a70      	ldr	r2, [pc, #448]	@ (8005aec <HAL_DMA_IRQHandler+0x6c8>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d004      	beq.n	800593a <HAL_DMA_IRQHandler+0x516>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a6e      	ldr	r2, [pc, #440]	@ (8005af0 <HAL_DMA_IRQHandler+0x6cc>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d10a      	bne.n	8005950 <HAL_DMA_IRQHandler+0x52c>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f003 0308 	and.w	r3, r3, #8
 8005944:	2b00      	cmp	r3, #0
 8005946:	bf14      	ite	ne
 8005948:	2301      	movne	r3, #1
 800594a:	2300      	moveq	r3, #0
 800594c:	b2db      	uxtb	r3, r3
 800594e:	e009      	b.n	8005964 <HAL_DMA_IRQHandler+0x540>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f003 0304 	and.w	r3, r3, #4
 800595a:	2b00      	cmp	r3, #0
 800595c:	bf14      	ite	ne
 800595e:	2301      	movne	r3, #1
 8005960:	2300      	moveq	r3, #0
 8005962:	b2db      	uxtb	r3, r3
 8005964:	2b00      	cmp	r3, #0
 8005966:	d03e      	beq.n	80059e6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800596c:	f003 031f 	and.w	r3, r3, #31
 8005970:	2210      	movs	r2, #16
 8005972:	409a      	lsls	r2, r3
 8005974:	6a3b      	ldr	r3, [r7, #32]
 8005976:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005982:	2b00      	cmp	r3, #0
 8005984:	d018      	beq.n	80059b8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005990:	2b00      	cmp	r3, #0
 8005992:	d108      	bne.n	80059a6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005998:	2b00      	cmp	r3, #0
 800599a:	d024      	beq.n	80059e6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	4798      	blx	r3
 80059a4:	e01f      	b.n	80059e6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d01b      	beq.n	80059e6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	4798      	blx	r3
 80059b6:	e016      	b.n	80059e6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d107      	bne.n	80059d6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f022 0208 	bic.w	r2, r2, #8
 80059d4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d003      	beq.n	80059e6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059ea:	f003 031f 	and.w	r3, r3, #31
 80059ee:	2220      	movs	r2, #32
 80059f0:	409a      	lsls	r2, r3
 80059f2:	69bb      	ldr	r3, [r7, #24]
 80059f4:	4013      	ands	r3, r2
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	f000 8110 	beq.w	8005c1c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a2c      	ldr	r2, [pc, #176]	@ (8005ab4 <HAL_DMA_IRQHandler+0x690>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d04a      	beq.n	8005a9c <HAL_DMA_IRQHandler+0x678>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a2b      	ldr	r2, [pc, #172]	@ (8005ab8 <HAL_DMA_IRQHandler+0x694>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d045      	beq.n	8005a9c <HAL_DMA_IRQHandler+0x678>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a29      	ldr	r2, [pc, #164]	@ (8005abc <HAL_DMA_IRQHandler+0x698>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d040      	beq.n	8005a9c <HAL_DMA_IRQHandler+0x678>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a28      	ldr	r2, [pc, #160]	@ (8005ac0 <HAL_DMA_IRQHandler+0x69c>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d03b      	beq.n	8005a9c <HAL_DMA_IRQHandler+0x678>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a26      	ldr	r2, [pc, #152]	@ (8005ac4 <HAL_DMA_IRQHandler+0x6a0>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d036      	beq.n	8005a9c <HAL_DMA_IRQHandler+0x678>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a25      	ldr	r2, [pc, #148]	@ (8005ac8 <HAL_DMA_IRQHandler+0x6a4>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d031      	beq.n	8005a9c <HAL_DMA_IRQHandler+0x678>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a23      	ldr	r2, [pc, #140]	@ (8005acc <HAL_DMA_IRQHandler+0x6a8>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d02c      	beq.n	8005a9c <HAL_DMA_IRQHandler+0x678>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a22      	ldr	r2, [pc, #136]	@ (8005ad0 <HAL_DMA_IRQHandler+0x6ac>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d027      	beq.n	8005a9c <HAL_DMA_IRQHandler+0x678>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a20      	ldr	r2, [pc, #128]	@ (8005ad4 <HAL_DMA_IRQHandler+0x6b0>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d022      	beq.n	8005a9c <HAL_DMA_IRQHandler+0x678>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a1f      	ldr	r2, [pc, #124]	@ (8005ad8 <HAL_DMA_IRQHandler+0x6b4>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d01d      	beq.n	8005a9c <HAL_DMA_IRQHandler+0x678>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a1d      	ldr	r2, [pc, #116]	@ (8005adc <HAL_DMA_IRQHandler+0x6b8>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d018      	beq.n	8005a9c <HAL_DMA_IRQHandler+0x678>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a1c      	ldr	r2, [pc, #112]	@ (8005ae0 <HAL_DMA_IRQHandler+0x6bc>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d013      	beq.n	8005a9c <HAL_DMA_IRQHandler+0x678>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a1a      	ldr	r2, [pc, #104]	@ (8005ae4 <HAL_DMA_IRQHandler+0x6c0>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d00e      	beq.n	8005a9c <HAL_DMA_IRQHandler+0x678>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a19      	ldr	r2, [pc, #100]	@ (8005ae8 <HAL_DMA_IRQHandler+0x6c4>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d009      	beq.n	8005a9c <HAL_DMA_IRQHandler+0x678>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a17      	ldr	r2, [pc, #92]	@ (8005aec <HAL_DMA_IRQHandler+0x6c8>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d004      	beq.n	8005a9c <HAL_DMA_IRQHandler+0x678>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a16      	ldr	r2, [pc, #88]	@ (8005af0 <HAL_DMA_IRQHandler+0x6cc>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d12b      	bne.n	8005af4 <HAL_DMA_IRQHandler+0x6d0>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f003 0310 	and.w	r3, r3, #16
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	bf14      	ite	ne
 8005aaa:	2301      	movne	r3, #1
 8005aac:	2300      	moveq	r3, #0
 8005aae:	b2db      	uxtb	r3, r3
 8005ab0:	e02a      	b.n	8005b08 <HAL_DMA_IRQHandler+0x6e4>
 8005ab2:	bf00      	nop
 8005ab4:	40020010 	.word	0x40020010
 8005ab8:	40020028 	.word	0x40020028
 8005abc:	40020040 	.word	0x40020040
 8005ac0:	40020058 	.word	0x40020058
 8005ac4:	40020070 	.word	0x40020070
 8005ac8:	40020088 	.word	0x40020088
 8005acc:	400200a0 	.word	0x400200a0
 8005ad0:	400200b8 	.word	0x400200b8
 8005ad4:	40020410 	.word	0x40020410
 8005ad8:	40020428 	.word	0x40020428
 8005adc:	40020440 	.word	0x40020440
 8005ae0:	40020458 	.word	0x40020458
 8005ae4:	40020470 	.word	0x40020470
 8005ae8:	40020488 	.word	0x40020488
 8005aec:	400204a0 	.word	0x400204a0
 8005af0:	400204b8 	.word	0x400204b8
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f003 0302 	and.w	r3, r3, #2
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	bf14      	ite	ne
 8005b02:	2301      	movne	r3, #1
 8005b04:	2300      	moveq	r3, #0
 8005b06:	b2db      	uxtb	r3, r3
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	f000 8087 	beq.w	8005c1c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b12:	f003 031f 	and.w	r3, r3, #31
 8005b16:	2220      	movs	r2, #32
 8005b18:	409a      	lsls	r2, r3
 8005b1a:	6a3b      	ldr	r3, [r7, #32]
 8005b1c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005b24:	b2db      	uxtb	r3, r3
 8005b26:	2b04      	cmp	r3, #4
 8005b28:	d139      	bne.n	8005b9e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f022 0216 	bic.w	r2, r2, #22
 8005b38:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	695a      	ldr	r2, [r3, #20]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005b48:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d103      	bne.n	8005b5a <HAL_DMA_IRQHandler+0x736>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d007      	beq.n	8005b6a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f022 0208 	bic.w	r2, r2, #8
 8005b68:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b6e:	f003 031f 	and.w	r3, r3, #31
 8005b72:	223f      	movs	r2, #63	@ 0x3f
 8005b74:	409a      	lsls	r2, r3
 8005b76:	6a3b      	ldr	r3, [r7, #32]
 8005b78:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2200      	movs	r2, #0
 8005b86:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	f000 834a 	beq.w	8006228 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	4798      	blx	r3
          }
          return;
 8005b9c:	e344      	b.n	8006228 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d018      	beq.n	8005bde <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d108      	bne.n	8005bcc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d02c      	beq.n	8005c1c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	4798      	blx	r3
 8005bca:	e027      	b.n	8005c1c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d023      	beq.n	8005c1c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	4798      	blx	r3
 8005bdc:	e01e      	b.n	8005c1c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d10f      	bne.n	8005c0c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f022 0210 	bic.w	r2, r2, #16
 8005bfa:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2201      	movs	r2, #1
 8005c00:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2200      	movs	r2, #0
 8005c08:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d003      	beq.n	8005c1c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	f000 8306 	beq.w	8006232 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c2a:	f003 0301 	and.w	r3, r3, #1
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	f000 8088 	beq.w	8005d44 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2204      	movs	r2, #4
 8005c38:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a7a      	ldr	r2, [pc, #488]	@ (8005e2c <HAL_DMA_IRQHandler+0xa08>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d04a      	beq.n	8005cdc <HAL_DMA_IRQHandler+0x8b8>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a79      	ldr	r2, [pc, #484]	@ (8005e30 <HAL_DMA_IRQHandler+0xa0c>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d045      	beq.n	8005cdc <HAL_DMA_IRQHandler+0x8b8>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a77      	ldr	r2, [pc, #476]	@ (8005e34 <HAL_DMA_IRQHandler+0xa10>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d040      	beq.n	8005cdc <HAL_DMA_IRQHandler+0x8b8>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a76      	ldr	r2, [pc, #472]	@ (8005e38 <HAL_DMA_IRQHandler+0xa14>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d03b      	beq.n	8005cdc <HAL_DMA_IRQHandler+0x8b8>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a74      	ldr	r2, [pc, #464]	@ (8005e3c <HAL_DMA_IRQHandler+0xa18>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d036      	beq.n	8005cdc <HAL_DMA_IRQHandler+0x8b8>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a73      	ldr	r2, [pc, #460]	@ (8005e40 <HAL_DMA_IRQHandler+0xa1c>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d031      	beq.n	8005cdc <HAL_DMA_IRQHandler+0x8b8>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a71      	ldr	r2, [pc, #452]	@ (8005e44 <HAL_DMA_IRQHandler+0xa20>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d02c      	beq.n	8005cdc <HAL_DMA_IRQHandler+0x8b8>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a70      	ldr	r2, [pc, #448]	@ (8005e48 <HAL_DMA_IRQHandler+0xa24>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d027      	beq.n	8005cdc <HAL_DMA_IRQHandler+0x8b8>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a6e      	ldr	r2, [pc, #440]	@ (8005e4c <HAL_DMA_IRQHandler+0xa28>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d022      	beq.n	8005cdc <HAL_DMA_IRQHandler+0x8b8>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a6d      	ldr	r2, [pc, #436]	@ (8005e50 <HAL_DMA_IRQHandler+0xa2c>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d01d      	beq.n	8005cdc <HAL_DMA_IRQHandler+0x8b8>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a6b      	ldr	r2, [pc, #428]	@ (8005e54 <HAL_DMA_IRQHandler+0xa30>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d018      	beq.n	8005cdc <HAL_DMA_IRQHandler+0x8b8>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a6a      	ldr	r2, [pc, #424]	@ (8005e58 <HAL_DMA_IRQHandler+0xa34>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d013      	beq.n	8005cdc <HAL_DMA_IRQHandler+0x8b8>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a68      	ldr	r2, [pc, #416]	@ (8005e5c <HAL_DMA_IRQHandler+0xa38>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d00e      	beq.n	8005cdc <HAL_DMA_IRQHandler+0x8b8>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a67      	ldr	r2, [pc, #412]	@ (8005e60 <HAL_DMA_IRQHandler+0xa3c>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d009      	beq.n	8005cdc <HAL_DMA_IRQHandler+0x8b8>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a65      	ldr	r2, [pc, #404]	@ (8005e64 <HAL_DMA_IRQHandler+0xa40>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d004      	beq.n	8005cdc <HAL_DMA_IRQHandler+0x8b8>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a64      	ldr	r2, [pc, #400]	@ (8005e68 <HAL_DMA_IRQHandler+0xa44>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d108      	bne.n	8005cee <HAL_DMA_IRQHandler+0x8ca>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f022 0201 	bic.w	r2, r2, #1
 8005cea:	601a      	str	r2, [r3, #0]
 8005cec:	e007      	b.n	8005cfe <HAL_DMA_IRQHandler+0x8da>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f022 0201 	bic.w	r2, r2, #1
 8005cfc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	3301      	adds	r3, #1
 8005d02:	60fb      	str	r3, [r7, #12]
 8005d04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d06:	429a      	cmp	r2, r3
 8005d08:	d307      	bcc.n	8005d1a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f003 0301 	and.w	r3, r3, #1
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d1f2      	bne.n	8005cfe <HAL_DMA_IRQHandler+0x8da>
 8005d18:	e000      	b.n	8005d1c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005d1a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f003 0301 	and.w	r3, r3, #1
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d004      	beq.n	8005d34 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2203      	movs	r2, #3
 8005d2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8005d32:	e003      	b.n	8005d3c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2201      	movs	r2, #1
 8005d38:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	f000 8272 	beq.w	8006232 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	4798      	blx	r3
 8005d56:	e26c      	b.n	8006232 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a43      	ldr	r2, [pc, #268]	@ (8005e6c <HAL_DMA_IRQHandler+0xa48>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d022      	beq.n	8005da8 <HAL_DMA_IRQHandler+0x984>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a42      	ldr	r2, [pc, #264]	@ (8005e70 <HAL_DMA_IRQHandler+0xa4c>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d01d      	beq.n	8005da8 <HAL_DMA_IRQHandler+0x984>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a40      	ldr	r2, [pc, #256]	@ (8005e74 <HAL_DMA_IRQHandler+0xa50>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d018      	beq.n	8005da8 <HAL_DMA_IRQHandler+0x984>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a3f      	ldr	r2, [pc, #252]	@ (8005e78 <HAL_DMA_IRQHandler+0xa54>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d013      	beq.n	8005da8 <HAL_DMA_IRQHandler+0x984>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a3d      	ldr	r2, [pc, #244]	@ (8005e7c <HAL_DMA_IRQHandler+0xa58>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d00e      	beq.n	8005da8 <HAL_DMA_IRQHandler+0x984>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a3c      	ldr	r2, [pc, #240]	@ (8005e80 <HAL_DMA_IRQHandler+0xa5c>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d009      	beq.n	8005da8 <HAL_DMA_IRQHandler+0x984>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a3a      	ldr	r2, [pc, #232]	@ (8005e84 <HAL_DMA_IRQHandler+0xa60>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d004      	beq.n	8005da8 <HAL_DMA_IRQHandler+0x984>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a39      	ldr	r2, [pc, #228]	@ (8005e88 <HAL_DMA_IRQHandler+0xa64>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d101      	bne.n	8005dac <HAL_DMA_IRQHandler+0x988>
 8005da8:	2301      	movs	r3, #1
 8005daa:	e000      	b.n	8005dae <HAL_DMA_IRQHandler+0x98a>
 8005dac:	2300      	movs	r3, #0
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	f000 823f 	beq.w	8006232 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005dc0:	f003 031f 	and.w	r3, r3, #31
 8005dc4:	2204      	movs	r2, #4
 8005dc6:	409a      	lsls	r2, r3
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	4013      	ands	r3, r2
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	f000 80cd 	beq.w	8005f6c <HAL_DMA_IRQHandler+0xb48>
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	f003 0304 	and.w	r3, r3, #4
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	f000 80c7 	beq.w	8005f6c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005de2:	f003 031f 	and.w	r3, r3, #31
 8005de6:	2204      	movs	r2, #4
 8005de8:	409a      	lsls	r2, r3
 8005dea:	69fb      	ldr	r3, [r7, #28]
 8005dec:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d049      	beq.n	8005e8c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d109      	bne.n	8005e16 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	f000 8210 	beq.w	800622c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005e14:	e20a      	b.n	800622c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	f000 8206 	beq.w	800622c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005e28:	e200      	b.n	800622c <HAL_DMA_IRQHandler+0xe08>
 8005e2a:	bf00      	nop
 8005e2c:	40020010 	.word	0x40020010
 8005e30:	40020028 	.word	0x40020028
 8005e34:	40020040 	.word	0x40020040
 8005e38:	40020058 	.word	0x40020058
 8005e3c:	40020070 	.word	0x40020070
 8005e40:	40020088 	.word	0x40020088
 8005e44:	400200a0 	.word	0x400200a0
 8005e48:	400200b8 	.word	0x400200b8
 8005e4c:	40020410 	.word	0x40020410
 8005e50:	40020428 	.word	0x40020428
 8005e54:	40020440 	.word	0x40020440
 8005e58:	40020458 	.word	0x40020458
 8005e5c:	40020470 	.word	0x40020470
 8005e60:	40020488 	.word	0x40020488
 8005e64:	400204a0 	.word	0x400204a0
 8005e68:	400204b8 	.word	0x400204b8
 8005e6c:	58025408 	.word	0x58025408
 8005e70:	5802541c 	.word	0x5802541c
 8005e74:	58025430 	.word	0x58025430
 8005e78:	58025444 	.word	0x58025444
 8005e7c:	58025458 	.word	0x58025458
 8005e80:	5802546c 	.word	0x5802546c
 8005e84:	58025480 	.word	0x58025480
 8005e88:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	f003 0320 	and.w	r3, r3, #32
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d160      	bne.n	8005f58 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a7f      	ldr	r2, [pc, #508]	@ (8006098 <HAL_DMA_IRQHandler+0xc74>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d04a      	beq.n	8005f36 <HAL_DMA_IRQHandler+0xb12>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a7d      	ldr	r2, [pc, #500]	@ (800609c <HAL_DMA_IRQHandler+0xc78>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d045      	beq.n	8005f36 <HAL_DMA_IRQHandler+0xb12>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a7c      	ldr	r2, [pc, #496]	@ (80060a0 <HAL_DMA_IRQHandler+0xc7c>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d040      	beq.n	8005f36 <HAL_DMA_IRQHandler+0xb12>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a7a      	ldr	r2, [pc, #488]	@ (80060a4 <HAL_DMA_IRQHandler+0xc80>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d03b      	beq.n	8005f36 <HAL_DMA_IRQHandler+0xb12>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a79      	ldr	r2, [pc, #484]	@ (80060a8 <HAL_DMA_IRQHandler+0xc84>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d036      	beq.n	8005f36 <HAL_DMA_IRQHandler+0xb12>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a77      	ldr	r2, [pc, #476]	@ (80060ac <HAL_DMA_IRQHandler+0xc88>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d031      	beq.n	8005f36 <HAL_DMA_IRQHandler+0xb12>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a76      	ldr	r2, [pc, #472]	@ (80060b0 <HAL_DMA_IRQHandler+0xc8c>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d02c      	beq.n	8005f36 <HAL_DMA_IRQHandler+0xb12>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a74      	ldr	r2, [pc, #464]	@ (80060b4 <HAL_DMA_IRQHandler+0xc90>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d027      	beq.n	8005f36 <HAL_DMA_IRQHandler+0xb12>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a73      	ldr	r2, [pc, #460]	@ (80060b8 <HAL_DMA_IRQHandler+0xc94>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d022      	beq.n	8005f36 <HAL_DMA_IRQHandler+0xb12>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a71      	ldr	r2, [pc, #452]	@ (80060bc <HAL_DMA_IRQHandler+0xc98>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d01d      	beq.n	8005f36 <HAL_DMA_IRQHandler+0xb12>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a70      	ldr	r2, [pc, #448]	@ (80060c0 <HAL_DMA_IRQHandler+0xc9c>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d018      	beq.n	8005f36 <HAL_DMA_IRQHandler+0xb12>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a6e      	ldr	r2, [pc, #440]	@ (80060c4 <HAL_DMA_IRQHandler+0xca0>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d013      	beq.n	8005f36 <HAL_DMA_IRQHandler+0xb12>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a6d      	ldr	r2, [pc, #436]	@ (80060c8 <HAL_DMA_IRQHandler+0xca4>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d00e      	beq.n	8005f36 <HAL_DMA_IRQHandler+0xb12>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a6b      	ldr	r2, [pc, #428]	@ (80060cc <HAL_DMA_IRQHandler+0xca8>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d009      	beq.n	8005f36 <HAL_DMA_IRQHandler+0xb12>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a6a      	ldr	r2, [pc, #424]	@ (80060d0 <HAL_DMA_IRQHandler+0xcac>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d004      	beq.n	8005f36 <HAL_DMA_IRQHandler+0xb12>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a68      	ldr	r2, [pc, #416]	@ (80060d4 <HAL_DMA_IRQHandler+0xcb0>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d108      	bne.n	8005f48 <HAL_DMA_IRQHandler+0xb24>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	681a      	ldr	r2, [r3, #0]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f022 0208 	bic.w	r2, r2, #8
 8005f44:	601a      	str	r2, [r3, #0]
 8005f46:	e007      	b.n	8005f58 <HAL_DMA_IRQHandler+0xb34>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f022 0204 	bic.w	r2, r2, #4
 8005f56:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	f000 8165 	beq.w	800622c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f6a:	e15f      	b.n	800622c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f70:	f003 031f 	and.w	r3, r3, #31
 8005f74:	2202      	movs	r2, #2
 8005f76:	409a      	lsls	r2, r3
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	4013      	ands	r3, r2
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	f000 80c5 	beq.w	800610c <HAL_DMA_IRQHandler+0xce8>
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	f003 0302 	and.w	r3, r3, #2
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	f000 80bf 	beq.w	800610c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f92:	f003 031f 	and.w	r3, r3, #31
 8005f96:	2202      	movs	r2, #2
 8005f98:	409a      	lsls	r2, r3
 8005f9a:	69fb      	ldr	r3, [r7, #28]
 8005f9c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d018      	beq.n	8005fda <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d109      	bne.n	8005fc6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	f000 813a 	beq.w	8006230 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005fc4:	e134      	b.n	8006230 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	f000 8130 	beq.w	8006230 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005fd8:	e12a      	b.n	8006230 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	f003 0320 	and.w	r3, r3, #32
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	f040 8089 	bne.w	80060f8 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a2b      	ldr	r2, [pc, #172]	@ (8006098 <HAL_DMA_IRQHandler+0xc74>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d04a      	beq.n	8006086 <HAL_DMA_IRQHandler+0xc62>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a29      	ldr	r2, [pc, #164]	@ (800609c <HAL_DMA_IRQHandler+0xc78>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d045      	beq.n	8006086 <HAL_DMA_IRQHandler+0xc62>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a28      	ldr	r2, [pc, #160]	@ (80060a0 <HAL_DMA_IRQHandler+0xc7c>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d040      	beq.n	8006086 <HAL_DMA_IRQHandler+0xc62>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a26      	ldr	r2, [pc, #152]	@ (80060a4 <HAL_DMA_IRQHandler+0xc80>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d03b      	beq.n	8006086 <HAL_DMA_IRQHandler+0xc62>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a25      	ldr	r2, [pc, #148]	@ (80060a8 <HAL_DMA_IRQHandler+0xc84>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d036      	beq.n	8006086 <HAL_DMA_IRQHandler+0xc62>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a23      	ldr	r2, [pc, #140]	@ (80060ac <HAL_DMA_IRQHandler+0xc88>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d031      	beq.n	8006086 <HAL_DMA_IRQHandler+0xc62>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a22      	ldr	r2, [pc, #136]	@ (80060b0 <HAL_DMA_IRQHandler+0xc8c>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d02c      	beq.n	8006086 <HAL_DMA_IRQHandler+0xc62>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a20      	ldr	r2, [pc, #128]	@ (80060b4 <HAL_DMA_IRQHandler+0xc90>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d027      	beq.n	8006086 <HAL_DMA_IRQHandler+0xc62>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a1f      	ldr	r2, [pc, #124]	@ (80060b8 <HAL_DMA_IRQHandler+0xc94>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d022      	beq.n	8006086 <HAL_DMA_IRQHandler+0xc62>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a1d      	ldr	r2, [pc, #116]	@ (80060bc <HAL_DMA_IRQHandler+0xc98>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d01d      	beq.n	8006086 <HAL_DMA_IRQHandler+0xc62>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a1c      	ldr	r2, [pc, #112]	@ (80060c0 <HAL_DMA_IRQHandler+0xc9c>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d018      	beq.n	8006086 <HAL_DMA_IRQHandler+0xc62>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a1a      	ldr	r2, [pc, #104]	@ (80060c4 <HAL_DMA_IRQHandler+0xca0>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d013      	beq.n	8006086 <HAL_DMA_IRQHandler+0xc62>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a19      	ldr	r2, [pc, #100]	@ (80060c8 <HAL_DMA_IRQHandler+0xca4>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d00e      	beq.n	8006086 <HAL_DMA_IRQHandler+0xc62>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a17      	ldr	r2, [pc, #92]	@ (80060cc <HAL_DMA_IRQHandler+0xca8>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d009      	beq.n	8006086 <HAL_DMA_IRQHandler+0xc62>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a16      	ldr	r2, [pc, #88]	@ (80060d0 <HAL_DMA_IRQHandler+0xcac>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d004      	beq.n	8006086 <HAL_DMA_IRQHandler+0xc62>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a14      	ldr	r2, [pc, #80]	@ (80060d4 <HAL_DMA_IRQHandler+0xcb0>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d128      	bne.n	80060d8 <HAL_DMA_IRQHandler+0xcb4>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	681a      	ldr	r2, [r3, #0]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f022 0214 	bic.w	r2, r2, #20
 8006094:	601a      	str	r2, [r3, #0]
 8006096:	e027      	b.n	80060e8 <HAL_DMA_IRQHandler+0xcc4>
 8006098:	40020010 	.word	0x40020010
 800609c:	40020028 	.word	0x40020028
 80060a0:	40020040 	.word	0x40020040
 80060a4:	40020058 	.word	0x40020058
 80060a8:	40020070 	.word	0x40020070
 80060ac:	40020088 	.word	0x40020088
 80060b0:	400200a0 	.word	0x400200a0
 80060b4:	400200b8 	.word	0x400200b8
 80060b8:	40020410 	.word	0x40020410
 80060bc:	40020428 	.word	0x40020428
 80060c0:	40020440 	.word	0x40020440
 80060c4:	40020458 	.word	0x40020458
 80060c8:	40020470 	.word	0x40020470
 80060cc:	40020488 	.word	0x40020488
 80060d0:	400204a0 	.word	0x400204a0
 80060d4:	400204b8 	.word	0x400204b8
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f022 020a 	bic.w	r2, r2, #10
 80060e6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2201      	movs	r2, #1
 80060ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2200      	movs	r2, #0
 80060f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	f000 8097 	beq.w	8006230 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800610a:	e091      	b.n	8006230 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006110:	f003 031f 	and.w	r3, r3, #31
 8006114:	2208      	movs	r2, #8
 8006116:	409a      	lsls	r2, r3
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	4013      	ands	r3, r2
 800611c:	2b00      	cmp	r3, #0
 800611e:	f000 8088 	beq.w	8006232 <HAL_DMA_IRQHandler+0xe0e>
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	f003 0308 	and.w	r3, r3, #8
 8006128:	2b00      	cmp	r3, #0
 800612a:	f000 8082 	beq.w	8006232 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a41      	ldr	r2, [pc, #260]	@ (8006238 <HAL_DMA_IRQHandler+0xe14>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d04a      	beq.n	80061ce <HAL_DMA_IRQHandler+0xdaa>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a3f      	ldr	r2, [pc, #252]	@ (800623c <HAL_DMA_IRQHandler+0xe18>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d045      	beq.n	80061ce <HAL_DMA_IRQHandler+0xdaa>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a3e      	ldr	r2, [pc, #248]	@ (8006240 <HAL_DMA_IRQHandler+0xe1c>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d040      	beq.n	80061ce <HAL_DMA_IRQHandler+0xdaa>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a3c      	ldr	r2, [pc, #240]	@ (8006244 <HAL_DMA_IRQHandler+0xe20>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d03b      	beq.n	80061ce <HAL_DMA_IRQHandler+0xdaa>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a3b      	ldr	r2, [pc, #236]	@ (8006248 <HAL_DMA_IRQHandler+0xe24>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d036      	beq.n	80061ce <HAL_DMA_IRQHandler+0xdaa>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a39      	ldr	r2, [pc, #228]	@ (800624c <HAL_DMA_IRQHandler+0xe28>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d031      	beq.n	80061ce <HAL_DMA_IRQHandler+0xdaa>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a38      	ldr	r2, [pc, #224]	@ (8006250 <HAL_DMA_IRQHandler+0xe2c>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d02c      	beq.n	80061ce <HAL_DMA_IRQHandler+0xdaa>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a36      	ldr	r2, [pc, #216]	@ (8006254 <HAL_DMA_IRQHandler+0xe30>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d027      	beq.n	80061ce <HAL_DMA_IRQHandler+0xdaa>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a35      	ldr	r2, [pc, #212]	@ (8006258 <HAL_DMA_IRQHandler+0xe34>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d022      	beq.n	80061ce <HAL_DMA_IRQHandler+0xdaa>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a33      	ldr	r2, [pc, #204]	@ (800625c <HAL_DMA_IRQHandler+0xe38>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d01d      	beq.n	80061ce <HAL_DMA_IRQHandler+0xdaa>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a32      	ldr	r2, [pc, #200]	@ (8006260 <HAL_DMA_IRQHandler+0xe3c>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d018      	beq.n	80061ce <HAL_DMA_IRQHandler+0xdaa>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a30      	ldr	r2, [pc, #192]	@ (8006264 <HAL_DMA_IRQHandler+0xe40>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d013      	beq.n	80061ce <HAL_DMA_IRQHandler+0xdaa>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a2f      	ldr	r2, [pc, #188]	@ (8006268 <HAL_DMA_IRQHandler+0xe44>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d00e      	beq.n	80061ce <HAL_DMA_IRQHandler+0xdaa>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a2d      	ldr	r2, [pc, #180]	@ (800626c <HAL_DMA_IRQHandler+0xe48>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d009      	beq.n	80061ce <HAL_DMA_IRQHandler+0xdaa>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a2c      	ldr	r2, [pc, #176]	@ (8006270 <HAL_DMA_IRQHandler+0xe4c>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d004      	beq.n	80061ce <HAL_DMA_IRQHandler+0xdaa>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a2a      	ldr	r2, [pc, #168]	@ (8006274 <HAL_DMA_IRQHandler+0xe50>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d108      	bne.n	80061e0 <HAL_DMA_IRQHandler+0xdbc>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	681a      	ldr	r2, [r3, #0]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f022 021c 	bic.w	r2, r2, #28
 80061dc:	601a      	str	r2, [r3, #0]
 80061de:	e007      	b.n	80061f0 <HAL_DMA_IRQHandler+0xdcc>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	681a      	ldr	r2, [r3, #0]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f022 020e 	bic.w	r2, r2, #14
 80061ee:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061f4:	f003 031f 	and.w	r3, r3, #31
 80061f8:	2201      	movs	r2, #1
 80061fa:	409a      	lsls	r2, r3
 80061fc:	69fb      	ldr	r3, [r7, #28]
 80061fe:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2201      	movs	r2, #1
 8006204:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2201      	movs	r2, #1
 800620a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2200      	movs	r2, #0
 8006212:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800621a:	2b00      	cmp	r3, #0
 800621c:	d009      	beq.n	8006232 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	4798      	blx	r3
 8006226:	e004      	b.n	8006232 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006228:	bf00      	nop
 800622a:	e002      	b.n	8006232 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800622c:	bf00      	nop
 800622e:	e000      	b.n	8006232 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006230:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006232:	3728      	adds	r7, #40	@ 0x28
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}
 8006238:	40020010 	.word	0x40020010
 800623c:	40020028 	.word	0x40020028
 8006240:	40020040 	.word	0x40020040
 8006244:	40020058 	.word	0x40020058
 8006248:	40020070 	.word	0x40020070
 800624c:	40020088 	.word	0x40020088
 8006250:	400200a0 	.word	0x400200a0
 8006254:	400200b8 	.word	0x400200b8
 8006258:	40020410 	.word	0x40020410
 800625c:	40020428 	.word	0x40020428
 8006260:	40020440 	.word	0x40020440
 8006264:	40020458 	.word	0x40020458
 8006268:	40020470 	.word	0x40020470
 800626c:	40020488 	.word	0x40020488
 8006270:	400204a0 	.word	0x400204a0
 8006274:	400204b8 	.word	0x400204b8

08006278 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006278:	b480      	push	{r7}
 800627a:	b087      	sub	sp, #28
 800627c:	af00      	add	r7, sp, #0
 800627e:	60f8      	str	r0, [r7, #12]
 8006280:	60b9      	str	r1, [r7, #8]
 8006282:	607a      	str	r2, [r7, #4]
 8006284:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800628a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006290:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a7f      	ldr	r2, [pc, #508]	@ (8006494 <DMA_SetConfig+0x21c>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d072      	beq.n	8006382 <DMA_SetConfig+0x10a>
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a7d      	ldr	r2, [pc, #500]	@ (8006498 <DMA_SetConfig+0x220>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d06d      	beq.n	8006382 <DMA_SetConfig+0x10a>
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a7c      	ldr	r2, [pc, #496]	@ (800649c <DMA_SetConfig+0x224>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d068      	beq.n	8006382 <DMA_SetConfig+0x10a>
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a7a      	ldr	r2, [pc, #488]	@ (80064a0 <DMA_SetConfig+0x228>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d063      	beq.n	8006382 <DMA_SetConfig+0x10a>
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a79      	ldr	r2, [pc, #484]	@ (80064a4 <DMA_SetConfig+0x22c>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d05e      	beq.n	8006382 <DMA_SetConfig+0x10a>
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a77      	ldr	r2, [pc, #476]	@ (80064a8 <DMA_SetConfig+0x230>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d059      	beq.n	8006382 <DMA_SetConfig+0x10a>
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a76      	ldr	r2, [pc, #472]	@ (80064ac <DMA_SetConfig+0x234>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d054      	beq.n	8006382 <DMA_SetConfig+0x10a>
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a74      	ldr	r2, [pc, #464]	@ (80064b0 <DMA_SetConfig+0x238>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d04f      	beq.n	8006382 <DMA_SetConfig+0x10a>
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a73      	ldr	r2, [pc, #460]	@ (80064b4 <DMA_SetConfig+0x23c>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d04a      	beq.n	8006382 <DMA_SetConfig+0x10a>
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a71      	ldr	r2, [pc, #452]	@ (80064b8 <DMA_SetConfig+0x240>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d045      	beq.n	8006382 <DMA_SetConfig+0x10a>
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a70      	ldr	r2, [pc, #448]	@ (80064bc <DMA_SetConfig+0x244>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d040      	beq.n	8006382 <DMA_SetConfig+0x10a>
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a6e      	ldr	r2, [pc, #440]	@ (80064c0 <DMA_SetConfig+0x248>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d03b      	beq.n	8006382 <DMA_SetConfig+0x10a>
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a6d      	ldr	r2, [pc, #436]	@ (80064c4 <DMA_SetConfig+0x24c>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d036      	beq.n	8006382 <DMA_SetConfig+0x10a>
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a6b      	ldr	r2, [pc, #428]	@ (80064c8 <DMA_SetConfig+0x250>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d031      	beq.n	8006382 <DMA_SetConfig+0x10a>
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a6a      	ldr	r2, [pc, #424]	@ (80064cc <DMA_SetConfig+0x254>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d02c      	beq.n	8006382 <DMA_SetConfig+0x10a>
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a68      	ldr	r2, [pc, #416]	@ (80064d0 <DMA_SetConfig+0x258>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d027      	beq.n	8006382 <DMA_SetConfig+0x10a>
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a67      	ldr	r2, [pc, #412]	@ (80064d4 <DMA_SetConfig+0x25c>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d022      	beq.n	8006382 <DMA_SetConfig+0x10a>
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a65      	ldr	r2, [pc, #404]	@ (80064d8 <DMA_SetConfig+0x260>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d01d      	beq.n	8006382 <DMA_SetConfig+0x10a>
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a64      	ldr	r2, [pc, #400]	@ (80064dc <DMA_SetConfig+0x264>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d018      	beq.n	8006382 <DMA_SetConfig+0x10a>
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a62      	ldr	r2, [pc, #392]	@ (80064e0 <DMA_SetConfig+0x268>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d013      	beq.n	8006382 <DMA_SetConfig+0x10a>
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a61      	ldr	r2, [pc, #388]	@ (80064e4 <DMA_SetConfig+0x26c>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d00e      	beq.n	8006382 <DMA_SetConfig+0x10a>
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a5f      	ldr	r2, [pc, #380]	@ (80064e8 <DMA_SetConfig+0x270>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d009      	beq.n	8006382 <DMA_SetConfig+0x10a>
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a5e      	ldr	r2, [pc, #376]	@ (80064ec <DMA_SetConfig+0x274>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d004      	beq.n	8006382 <DMA_SetConfig+0x10a>
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a5c      	ldr	r2, [pc, #368]	@ (80064f0 <DMA_SetConfig+0x278>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d101      	bne.n	8006386 <DMA_SetConfig+0x10e>
 8006382:	2301      	movs	r3, #1
 8006384:	e000      	b.n	8006388 <DMA_SetConfig+0x110>
 8006386:	2300      	movs	r3, #0
 8006388:	2b00      	cmp	r3, #0
 800638a:	d00d      	beq.n	80063a8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006390:	68fa      	ldr	r2, [r7, #12]
 8006392:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006394:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800639a:	2b00      	cmp	r3, #0
 800639c:	d004      	beq.n	80063a8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063a2:	68fa      	ldr	r2, [r7, #12]
 80063a4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80063a6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a39      	ldr	r2, [pc, #228]	@ (8006494 <DMA_SetConfig+0x21c>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d04a      	beq.n	8006448 <DMA_SetConfig+0x1d0>
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a38      	ldr	r2, [pc, #224]	@ (8006498 <DMA_SetConfig+0x220>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d045      	beq.n	8006448 <DMA_SetConfig+0x1d0>
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a36      	ldr	r2, [pc, #216]	@ (800649c <DMA_SetConfig+0x224>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d040      	beq.n	8006448 <DMA_SetConfig+0x1d0>
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a35      	ldr	r2, [pc, #212]	@ (80064a0 <DMA_SetConfig+0x228>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d03b      	beq.n	8006448 <DMA_SetConfig+0x1d0>
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a33      	ldr	r2, [pc, #204]	@ (80064a4 <DMA_SetConfig+0x22c>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d036      	beq.n	8006448 <DMA_SetConfig+0x1d0>
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a32      	ldr	r2, [pc, #200]	@ (80064a8 <DMA_SetConfig+0x230>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d031      	beq.n	8006448 <DMA_SetConfig+0x1d0>
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a30      	ldr	r2, [pc, #192]	@ (80064ac <DMA_SetConfig+0x234>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d02c      	beq.n	8006448 <DMA_SetConfig+0x1d0>
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a2f      	ldr	r2, [pc, #188]	@ (80064b0 <DMA_SetConfig+0x238>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d027      	beq.n	8006448 <DMA_SetConfig+0x1d0>
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a2d      	ldr	r2, [pc, #180]	@ (80064b4 <DMA_SetConfig+0x23c>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d022      	beq.n	8006448 <DMA_SetConfig+0x1d0>
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a2c      	ldr	r2, [pc, #176]	@ (80064b8 <DMA_SetConfig+0x240>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d01d      	beq.n	8006448 <DMA_SetConfig+0x1d0>
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a2a      	ldr	r2, [pc, #168]	@ (80064bc <DMA_SetConfig+0x244>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d018      	beq.n	8006448 <DMA_SetConfig+0x1d0>
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a29      	ldr	r2, [pc, #164]	@ (80064c0 <DMA_SetConfig+0x248>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d013      	beq.n	8006448 <DMA_SetConfig+0x1d0>
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a27      	ldr	r2, [pc, #156]	@ (80064c4 <DMA_SetConfig+0x24c>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d00e      	beq.n	8006448 <DMA_SetConfig+0x1d0>
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a26      	ldr	r2, [pc, #152]	@ (80064c8 <DMA_SetConfig+0x250>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d009      	beq.n	8006448 <DMA_SetConfig+0x1d0>
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a24      	ldr	r2, [pc, #144]	@ (80064cc <DMA_SetConfig+0x254>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d004      	beq.n	8006448 <DMA_SetConfig+0x1d0>
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a23      	ldr	r2, [pc, #140]	@ (80064d0 <DMA_SetConfig+0x258>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d101      	bne.n	800644c <DMA_SetConfig+0x1d4>
 8006448:	2301      	movs	r3, #1
 800644a:	e000      	b.n	800644e <DMA_SetConfig+0x1d6>
 800644c:	2300      	movs	r3, #0
 800644e:	2b00      	cmp	r3, #0
 8006450:	d059      	beq.n	8006506 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006456:	f003 031f 	and.w	r3, r3, #31
 800645a:	223f      	movs	r2, #63	@ 0x3f
 800645c:	409a      	lsls	r2, r3
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	681a      	ldr	r2, [r3, #0]
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006470:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	683a      	ldr	r2, [r7, #0]
 8006478:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	689b      	ldr	r3, [r3, #8]
 800647e:	2b40      	cmp	r3, #64	@ 0x40
 8006480:	d138      	bne.n	80064f4 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	687a      	ldr	r2, [r7, #4]
 8006488:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	68ba      	ldr	r2, [r7, #8]
 8006490:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006492:	e086      	b.n	80065a2 <DMA_SetConfig+0x32a>
 8006494:	40020010 	.word	0x40020010
 8006498:	40020028 	.word	0x40020028
 800649c:	40020040 	.word	0x40020040
 80064a0:	40020058 	.word	0x40020058
 80064a4:	40020070 	.word	0x40020070
 80064a8:	40020088 	.word	0x40020088
 80064ac:	400200a0 	.word	0x400200a0
 80064b0:	400200b8 	.word	0x400200b8
 80064b4:	40020410 	.word	0x40020410
 80064b8:	40020428 	.word	0x40020428
 80064bc:	40020440 	.word	0x40020440
 80064c0:	40020458 	.word	0x40020458
 80064c4:	40020470 	.word	0x40020470
 80064c8:	40020488 	.word	0x40020488
 80064cc:	400204a0 	.word	0x400204a0
 80064d0:	400204b8 	.word	0x400204b8
 80064d4:	58025408 	.word	0x58025408
 80064d8:	5802541c 	.word	0x5802541c
 80064dc:	58025430 	.word	0x58025430
 80064e0:	58025444 	.word	0x58025444
 80064e4:	58025458 	.word	0x58025458
 80064e8:	5802546c 	.word	0x5802546c
 80064ec:	58025480 	.word	0x58025480
 80064f0:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	68ba      	ldr	r2, [r7, #8]
 80064fa:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	687a      	ldr	r2, [r7, #4]
 8006502:	60da      	str	r2, [r3, #12]
}
 8006504:	e04d      	b.n	80065a2 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a29      	ldr	r2, [pc, #164]	@ (80065b0 <DMA_SetConfig+0x338>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d022      	beq.n	8006556 <DMA_SetConfig+0x2de>
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a27      	ldr	r2, [pc, #156]	@ (80065b4 <DMA_SetConfig+0x33c>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d01d      	beq.n	8006556 <DMA_SetConfig+0x2de>
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a26      	ldr	r2, [pc, #152]	@ (80065b8 <DMA_SetConfig+0x340>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d018      	beq.n	8006556 <DMA_SetConfig+0x2de>
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a24      	ldr	r2, [pc, #144]	@ (80065bc <DMA_SetConfig+0x344>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d013      	beq.n	8006556 <DMA_SetConfig+0x2de>
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a23      	ldr	r2, [pc, #140]	@ (80065c0 <DMA_SetConfig+0x348>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d00e      	beq.n	8006556 <DMA_SetConfig+0x2de>
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a21      	ldr	r2, [pc, #132]	@ (80065c4 <DMA_SetConfig+0x34c>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d009      	beq.n	8006556 <DMA_SetConfig+0x2de>
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a20      	ldr	r2, [pc, #128]	@ (80065c8 <DMA_SetConfig+0x350>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d004      	beq.n	8006556 <DMA_SetConfig+0x2de>
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a1e      	ldr	r2, [pc, #120]	@ (80065cc <DMA_SetConfig+0x354>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d101      	bne.n	800655a <DMA_SetConfig+0x2e2>
 8006556:	2301      	movs	r3, #1
 8006558:	e000      	b.n	800655c <DMA_SetConfig+0x2e4>
 800655a:	2300      	movs	r3, #0
 800655c:	2b00      	cmp	r3, #0
 800655e:	d020      	beq.n	80065a2 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006564:	f003 031f 	and.w	r3, r3, #31
 8006568:	2201      	movs	r2, #1
 800656a:	409a      	lsls	r2, r3
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	683a      	ldr	r2, [r7, #0]
 8006576:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	689b      	ldr	r3, [r3, #8]
 800657c:	2b40      	cmp	r3, #64	@ 0x40
 800657e:	d108      	bne.n	8006592 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	687a      	ldr	r2, [r7, #4]
 8006586:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	68ba      	ldr	r2, [r7, #8]
 800658e:	60da      	str	r2, [r3, #12]
}
 8006590:	e007      	b.n	80065a2 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	68ba      	ldr	r2, [r7, #8]
 8006598:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	687a      	ldr	r2, [r7, #4]
 80065a0:	60da      	str	r2, [r3, #12]
}
 80065a2:	bf00      	nop
 80065a4:	371c      	adds	r7, #28
 80065a6:	46bd      	mov	sp, r7
 80065a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ac:	4770      	bx	lr
 80065ae:	bf00      	nop
 80065b0:	58025408 	.word	0x58025408
 80065b4:	5802541c 	.word	0x5802541c
 80065b8:	58025430 	.word	0x58025430
 80065bc:	58025444 	.word	0x58025444
 80065c0:	58025458 	.word	0x58025458
 80065c4:	5802546c 	.word	0x5802546c
 80065c8:	58025480 	.word	0x58025480
 80065cc:	58025494 	.word	0x58025494

080065d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80065d0:	b480      	push	{r7}
 80065d2:	b085      	sub	sp, #20
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a42      	ldr	r2, [pc, #264]	@ (80066e8 <DMA_CalcBaseAndBitshift+0x118>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d04a      	beq.n	8006678 <DMA_CalcBaseAndBitshift+0xa8>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a41      	ldr	r2, [pc, #260]	@ (80066ec <DMA_CalcBaseAndBitshift+0x11c>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d045      	beq.n	8006678 <DMA_CalcBaseAndBitshift+0xa8>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a3f      	ldr	r2, [pc, #252]	@ (80066f0 <DMA_CalcBaseAndBitshift+0x120>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d040      	beq.n	8006678 <DMA_CalcBaseAndBitshift+0xa8>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a3e      	ldr	r2, [pc, #248]	@ (80066f4 <DMA_CalcBaseAndBitshift+0x124>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d03b      	beq.n	8006678 <DMA_CalcBaseAndBitshift+0xa8>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a3c      	ldr	r2, [pc, #240]	@ (80066f8 <DMA_CalcBaseAndBitshift+0x128>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d036      	beq.n	8006678 <DMA_CalcBaseAndBitshift+0xa8>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a3b      	ldr	r2, [pc, #236]	@ (80066fc <DMA_CalcBaseAndBitshift+0x12c>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d031      	beq.n	8006678 <DMA_CalcBaseAndBitshift+0xa8>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a39      	ldr	r2, [pc, #228]	@ (8006700 <DMA_CalcBaseAndBitshift+0x130>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d02c      	beq.n	8006678 <DMA_CalcBaseAndBitshift+0xa8>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a38      	ldr	r2, [pc, #224]	@ (8006704 <DMA_CalcBaseAndBitshift+0x134>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d027      	beq.n	8006678 <DMA_CalcBaseAndBitshift+0xa8>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a36      	ldr	r2, [pc, #216]	@ (8006708 <DMA_CalcBaseAndBitshift+0x138>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d022      	beq.n	8006678 <DMA_CalcBaseAndBitshift+0xa8>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a35      	ldr	r2, [pc, #212]	@ (800670c <DMA_CalcBaseAndBitshift+0x13c>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d01d      	beq.n	8006678 <DMA_CalcBaseAndBitshift+0xa8>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a33      	ldr	r2, [pc, #204]	@ (8006710 <DMA_CalcBaseAndBitshift+0x140>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d018      	beq.n	8006678 <DMA_CalcBaseAndBitshift+0xa8>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a32      	ldr	r2, [pc, #200]	@ (8006714 <DMA_CalcBaseAndBitshift+0x144>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d013      	beq.n	8006678 <DMA_CalcBaseAndBitshift+0xa8>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a30      	ldr	r2, [pc, #192]	@ (8006718 <DMA_CalcBaseAndBitshift+0x148>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d00e      	beq.n	8006678 <DMA_CalcBaseAndBitshift+0xa8>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a2f      	ldr	r2, [pc, #188]	@ (800671c <DMA_CalcBaseAndBitshift+0x14c>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d009      	beq.n	8006678 <DMA_CalcBaseAndBitshift+0xa8>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a2d      	ldr	r2, [pc, #180]	@ (8006720 <DMA_CalcBaseAndBitshift+0x150>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d004      	beq.n	8006678 <DMA_CalcBaseAndBitshift+0xa8>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a2c      	ldr	r2, [pc, #176]	@ (8006724 <DMA_CalcBaseAndBitshift+0x154>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d101      	bne.n	800667c <DMA_CalcBaseAndBitshift+0xac>
 8006678:	2301      	movs	r3, #1
 800667a:	e000      	b.n	800667e <DMA_CalcBaseAndBitshift+0xae>
 800667c:	2300      	movs	r3, #0
 800667e:	2b00      	cmp	r3, #0
 8006680:	d024      	beq.n	80066cc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	b2db      	uxtb	r3, r3
 8006688:	3b10      	subs	r3, #16
 800668a:	4a27      	ldr	r2, [pc, #156]	@ (8006728 <DMA_CalcBaseAndBitshift+0x158>)
 800668c:	fba2 2303 	umull	r2, r3, r2, r3
 8006690:	091b      	lsrs	r3, r3, #4
 8006692:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	f003 0307 	and.w	r3, r3, #7
 800669a:	4a24      	ldr	r2, [pc, #144]	@ (800672c <DMA_CalcBaseAndBitshift+0x15c>)
 800669c:	5cd3      	ldrb	r3, [r2, r3]
 800669e:	461a      	mov	r2, r3
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2b03      	cmp	r3, #3
 80066a8:	d908      	bls.n	80066bc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	461a      	mov	r2, r3
 80066b0:	4b1f      	ldr	r3, [pc, #124]	@ (8006730 <DMA_CalcBaseAndBitshift+0x160>)
 80066b2:	4013      	ands	r3, r2
 80066b4:	1d1a      	adds	r2, r3, #4
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	659a      	str	r2, [r3, #88]	@ 0x58
 80066ba:	e00d      	b.n	80066d8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	461a      	mov	r2, r3
 80066c2:	4b1b      	ldr	r3, [pc, #108]	@ (8006730 <DMA_CalcBaseAndBitshift+0x160>)
 80066c4:	4013      	ands	r3, r2
 80066c6:	687a      	ldr	r2, [r7, #4]
 80066c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80066ca:	e005      	b.n	80066d8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80066dc:	4618      	mov	r0, r3
 80066de:	3714      	adds	r7, #20
 80066e0:	46bd      	mov	sp, r7
 80066e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e6:	4770      	bx	lr
 80066e8:	40020010 	.word	0x40020010
 80066ec:	40020028 	.word	0x40020028
 80066f0:	40020040 	.word	0x40020040
 80066f4:	40020058 	.word	0x40020058
 80066f8:	40020070 	.word	0x40020070
 80066fc:	40020088 	.word	0x40020088
 8006700:	400200a0 	.word	0x400200a0
 8006704:	400200b8 	.word	0x400200b8
 8006708:	40020410 	.word	0x40020410
 800670c:	40020428 	.word	0x40020428
 8006710:	40020440 	.word	0x40020440
 8006714:	40020458 	.word	0x40020458
 8006718:	40020470 	.word	0x40020470
 800671c:	40020488 	.word	0x40020488
 8006720:	400204a0 	.word	0x400204a0
 8006724:	400204b8 	.word	0x400204b8
 8006728:	aaaaaaab 	.word	0xaaaaaaab
 800672c:	08010658 	.word	0x08010658
 8006730:	fffffc00 	.word	0xfffffc00

08006734 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006734:	b480      	push	{r7}
 8006736:	b085      	sub	sp, #20
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800673c:	2300      	movs	r3, #0
 800673e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	699b      	ldr	r3, [r3, #24]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d120      	bne.n	800678a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800674c:	2b03      	cmp	r3, #3
 800674e:	d858      	bhi.n	8006802 <DMA_CheckFifoParam+0xce>
 8006750:	a201      	add	r2, pc, #4	@ (adr r2, 8006758 <DMA_CheckFifoParam+0x24>)
 8006752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006756:	bf00      	nop
 8006758:	08006769 	.word	0x08006769
 800675c:	0800677b 	.word	0x0800677b
 8006760:	08006769 	.word	0x08006769
 8006764:	08006803 	.word	0x08006803
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800676c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006770:	2b00      	cmp	r3, #0
 8006772:	d048      	beq.n	8006806 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006774:	2301      	movs	r3, #1
 8006776:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006778:	e045      	b.n	8006806 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800677e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006782:	d142      	bne.n	800680a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006784:	2301      	movs	r3, #1
 8006786:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006788:	e03f      	b.n	800680a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	699b      	ldr	r3, [r3, #24]
 800678e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006792:	d123      	bne.n	80067dc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006798:	2b03      	cmp	r3, #3
 800679a:	d838      	bhi.n	800680e <DMA_CheckFifoParam+0xda>
 800679c:	a201      	add	r2, pc, #4	@ (adr r2, 80067a4 <DMA_CheckFifoParam+0x70>)
 800679e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067a2:	bf00      	nop
 80067a4:	080067b5 	.word	0x080067b5
 80067a8:	080067bb 	.word	0x080067bb
 80067ac:	080067b5 	.word	0x080067b5
 80067b0:	080067cd 	.word	0x080067cd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80067b4:	2301      	movs	r3, #1
 80067b6:	73fb      	strb	r3, [r7, #15]
        break;
 80067b8:	e030      	b.n	800681c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067be:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d025      	beq.n	8006812 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80067c6:	2301      	movs	r3, #1
 80067c8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80067ca:	e022      	b.n	8006812 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067d0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80067d4:	d11f      	bne.n	8006816 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80067d6:	2301      	movs	r3, #1
 80067d8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80067da:	e01c      	b.n	8006816 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067e0:	2b02      	cmp	r3, #2
 80067e2:	d902      	bls.n	80067ea <DMA_CheckFifoParam+0xb6>
 80067e4:	2b03      	cmp	r3, #3
 80067e6:	d003      	beq.n	80067f0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80067e8:	e018      	b.n	800681c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80067ea:	2301      	movs	r3, #1
 80067ec:	73fb      	strb	r3, [r7, #15]
        break;
 80067ee:	e015      	b.n	800681c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d00e      	beq.n	800681a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80067fc:	2301      	movs	r3, #1
 80067fe:	73fb      	strb	r3, [r7, #15]
    break;
 8006800:	e00b      	b.n	800681a <DMA_CheckFifoParam+0xe6>
        break;
 8006802:	bf00      	nop
 8006804:	e00a      	b.n	800681c <DMA_CheckFifoParam+0xe8>
        break;
 8006806:	bf00      	nop
 8006808:	e008      	b.n	800681c <DMA_CheckFifoParam+0xe8>
        break;
 800680a:	bf00      	nop
 800680c:	e006      	b.n	800681c <DMA_CheckFifoParam+0xe8>
        break;
 800680e:	bf00      	nop
 8006810:	e004      	b.n	800681c <DMA_CheckFifoParam+0xe8>
        break;
 8006812:	bf00      	nop
 8006814:	e002      	b.n	800681c <DMA_CheckFifoParam+0xe8>
        break;
 8006816:	bf00      	nop
 8006818:	e000      	b.n	800681c <DMA_CheckFifoParam+0xe8>
    break;
 800681a:	bf00      	nop
    }
  }

  return status;
 800681c:	7bfb      	ldrb	r3, [r7, #15]
}
 800681e:	4618      	mov	r0, r3
 8006820:	3714      	adds	r7, #20
 8006822:	46bd      	mov	sp, r7
 8006824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006828:	4770      	bx	lr
 800682a:	bf00      	nop

0800682c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800682c:	b480      	push	{r7}
 800682e:	b085      	sub	sp, #20
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a38      	ldr	r2, [pc, #224]	@ (8006920 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d022      	beq.n	800688a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a36      	ldr	r2, [pc, #216]	@ (8006924 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d01d      	beq.n	800688a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a35      	ldr	r2, [pc, #212]	@ (8006928 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d018      	beq.n	800688a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a33      	ldr	r2, [pc, #204]	@ (800692c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d013      	beq.n	800688a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a32      	ldr	r2, [pc, #200]	@ (8006930 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d00e      	beq.n	800688a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a30      	ldr	r2, [pc, #192]	@ (8006934 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d009      	beq.n	800688a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a2f      	ldr	r2, [pc, #188]	@ (8006938 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d004      	beq.n	800688a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a2d      	ldr	r2, [pc, #180]	@ (800693c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d101      	bne.n	800688e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800688a:	2301      	movs	r3, #1
 800688c:	e000      	b.n	8006890 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800688e:	2300      	movs	r3, #0
 8006890:	2b00      	cmp	r3, #0
 8006892:	d01a      	beq.n	80068ca <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	b2db      	uxtb	r3, r3
 800689a:	3b08      	subs	r3, #8
 800689c:	4a28      	ldr	r2, [pc, #160]	@ (8006940 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800689e:	fba2 2303 	umull	r2, r3, r2, r3
 80068a2:	091b      	lsrs	r3, r3, #4
 80068a4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80068a6:	68fa      	ldr	r2, [r7, #12]
 80068a8:	4b26      	ldr	r3, [pc, #152]	@ (8006944 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80068aa:	4413      	add	r3, r2
 80068ac:	009b      	lsls	r3, r3, #2
 80068ae:	461a      	mov	r2, r3
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	4a24      	ldr	r2, [pc, #144]	@ (8006948 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80068b8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	f003 031f 	and.w	r3, r3, #31
 80068c0:	2201      	movs	r2, #1
 80068c2:	409a      	lsls	r2, r3
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80068c8:	e024      	b.n	8006914 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	b2db      	uxtb	r3, r3
 80068d0:	3b10      	subs	r3, #16
 80068d2:	4a1e      	ldr	r2, [pc, #120]	@ (800694c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80068d4:	fba2 2303 	umull	r2, r3, r2, r3
 80068d8:	091b      	lsrs	r3, r3, #4
 80068da:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	4a1c      	ldr	r2, [pc, #112]	@ (8006950 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d806      	bhi.n	80068f2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	4a1b      	ldr	r2, [pc, #108]	@ (8006954 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d902      	bls.n	80068f2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	3308      	adds	r3, #8
 80068f0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80068f2:	68fa      	ldr	r2, [r7, #12]
 80068f4:	4b18      	ldr	r3, [pc, #96]	@ (8006958 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80068f6:	4413      	add	r3, r2
 80068f8:	009b      	lsls	r3, r3, #2
 80068fa:	461a      	mov	r2, r3
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	4a16      	ldr	r2, [pc, #88]	@ (800695c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006904:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	f003 031f 	and.w	r3, r3, #31
 800690c:	2201      	movs	r2, #1
 800690e:	409a      	lsls	r2, r3
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006914:	bf00      	nop
 8006916:	3714      	adds	r7, #20
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr
 8006920:	58025408 	.word	0x58025408
 8006924:	5802541c 	.word	0x5802541c
 8006928:	58025430 	.word	0x58025430
 800692c:	58025444 	.word	0x58025444
 8006930:	58025458 	.word	0x58025458
 8006934:	5802546c 	.word	0x5802546c
 8006938:	58025480 	.word	0x58025480
 800693c:	58025494 	.word	0x58025494
 8006940:	cccccccd 	.word	0xcccccccd
 8006944:	16009600 	.word	0x16009600
 8006948:	58025880 	.word	0x58025880
 800694c:	aaaaaaab 	.word	0xaaaaaaab
 8006950:	400204b8 	.word	0x400204b8
 8006954:	4002040f 	.word	0x4002040f
 8006958:	10008200 	.word	0x10008200
 800695c:	40020880 	.word	0x40020880

08006960 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006960:	b480      	push	{r7}
 8006962:	b085      	sub	sp, #20
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	b2db      	uxtb	r3, r3
 800696e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d04a      	beq.n	8006a0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	2b08      	cmp	r3, #8
 800697a:	d847      	bhi.n	8006a0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a25      	ldr	r2, [pc, #148]	@ (8006a18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d022      	beq.n	80069cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a24      	ldr	r2, [pc, #144]	@ (8006a1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d01d      	beq.n	80069cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a22      	ldr	r2, [pc, #136]	@ (8006a20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d018      	beq.n	80069cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a21      	ldr	r2, [pc, #132]	@ (8006a24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d013      	beq.n	80069cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a1f      	ldr	r2, [pc, #124]	@ (8006a28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d00e      	beq.n	80069cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a1e      	ldr	r2, [pc, #120]	@ (8006a2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d009      	beq.n	80069cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a1c      	ldr	r2, [pc, #112]	@ (8006a30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d004      	beq.n	80069cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a1b      	ldr	r2, [pc, #108]	@ (8006a34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d101      	bne.n	80069d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80069cc:	2301      	movs	r3, #1
 80069ce:	e000      	b.n	80069d2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80069d0:	2300      	movs	r3, #0
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d00a      	beq.n	80069ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80069d6:	68fa      	ldr	r2, [r7, #12]
 80069d8:	4b17      	ldr	r3, [pc, #92]	@ (8006a38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80069da:	4413      	add	r3, r2
 80069dc:	009b      	lsls	r3, r3, #2
 80069de:	461a      	mov	r2, r3
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	4a15      	ldr	r2, [pc, #84]	@ (8006a3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80069e8:	671a      	str	r2, [r3, #112]	@ 0x70
 80069ea:	e009      	b.n	8006a00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80069ec:	68fa      	ldr	r2, [r7, #12]
 80069ee:	4b14      	ldr	r3, [pc, #80]	@ (8006a40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80069f0:	4413      	add	r3, r2
 80069f2:	009b      	lsls	r3, r3, #2
 80069f4:	461a      	mov	r2, r3
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	4a11      	ldr	r2, [pc, #68]	@ (8006a44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80069fe:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	3b01      	subs	r3, #1
 8006a04:	2201      	movs	r2, #1
 8006a06:	409a      	lsls	r2, r3
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8006a0c:	bf00      	nop
 8006a0e:	3714      	adds	r7, #20
 8006a10:	46bd      	mov	sp, r7
 8006a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a16:	4770      	bx	lr
 8006a18:	58025408 	.word	0x58025408
 8006a1c:	5802541c 	.word	0x5802541c
 8006a20:	58025430 	.word	0x58025430
 8006a24:	58025444 	.word	0x58025444
 8006a28:	58025458 	.word	0x58025458
 8006a2c:	5802546c 	.word	0x5802546c
 8006a30:	58025480 	.word	0x58025480
 8006a34:	58025494 	.word	0x58025494
 8006a38:	1600963f 	.word	0x1600963f
 8006a3c:	58025940 	.word	0x58025940
 8006a40:	1000823f 	.word	0x1000823f
 8006a44:	40020940 	.word	0x40020940

08006a48 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b089      	sub	sp, #36	@ 0x24
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
 8006a50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006a52:	2300      	movs	r3, #0
 8006a54:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006a56:	4b89      	ldr	r3, [pc, #548]	@ (8006c7c <HAL_GPIO_Init+0x234>)
 8006a58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006a5a:	e194      	b.n	8006d86 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	681a      	ldr	r2, [r3, #0]
 8006a60:	2101      	movs	r1, #1
 8006a62:	69fb      	ldr	r3, [r7, #28]
 8006a64:	fa01 f303 	lsl.w	r3, r1, r3
 8006a68:	4013      	ands	r3, r2
 8006a6a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	f000 8186 	beq.w	8006d80 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	f003 0303 	and.w	r3, r3, #3
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d005      	beq.n	8006a8c <HAL_GPIO_Init+0x44>
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	f003 0303 	and.w	r3, r3, #3
 8006a88:	2b02      	cmp	r3, #2
 8006a8a:	d130      	bne.n	8006aee <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	689b      	ldr	r3, [r3, #8]
 8006a90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006a92:	69fb      	ldr	r3, [r7, #28]
 8006a94:	005b      	lsls	r3, r3, #1
 8006a96:	2203      	movs	r2, #3
 8006a98:	fa02 f303 	lsl.w	r3, r2, r3
 8006a9c:	43db      	mvns	r3, r3
 8006a9e:	69ba      	ldr	r2, [r7, #24]
 8006aa0:	4013      	ands	r3, r2
 8006aa2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	68da      	ldr	r2, [r3, #12]
 8006aa8:	69fb      	ldr	r3, [r7, #28]
 8006aaa:	005b      	lsls	r3, r3, #1
 8006aac:	fa02 f303 	lsl.w	r3, r2, r3
 8006ab0:	69ba      	ldr	r2, [r7, #24]
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	69ba      	ldr	r2, [r7, #24]
 8006aba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	69fb      	ldr	r3, [r7, #28]
 8006ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8006aca:	43db      	mvns	r3, r3
 8006acc:	69ba      	ldr	r2, [r7, #24]
 8006ace:	4013      	ands	r3, r2
 8006ad0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	685b      	ldr	r3, [r3, #4]
 8006ad6:	091b      	lsrs	r3, r3, #4
 8006ad8:	f003 0201 	and.w	r2, r3, #1
 8006adc:	69fb      	ldr	r3, [r7, #28]
 8006ade:	fa02 f303 	lsl.w	r3, r2, r3
 8006ae2:	69ba      	ldr	r2, [r7, #24]
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	69ba      	ldr	r2, [r7, #24]
 8006aec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	685b      	ldr	r3, [r3, #4]
 8006af2:	f003 0303 	and.w	r3, r3, #3
 8006af6:	2b03      	cmp	r3, #3
 8006af8:	d017      	beq.n	8006b2a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	68db      	ldr	r3, [r3, #12]
 8006afe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006b00:	69fb      	ldr	r3, [r7, #28]
 8006b02:	005b      	lsls	r3, r3, #1
 8006b04:	2203      	movs	r2, #3
 8006b06:	fa02 f303 	lsl.w	r3, r2, r3
 8006b0a:	43db      	mvns	r3, r3
 8006b0c:	69ba      	ldr	r2, [r7, #24]
 8006b0e:	4013      	ands	r3, r2
 8006b10:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	689a      	ldr	r2, [r3, #8]
 8006b16:	69fb      	ldr	r3, [r7, #28]
 8006b18:	005b      	lsls	r3, r3, #1
 8006b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b1e:	69ba      	ldr	r2, [r7, #24]
 8006b20:	4313      	orrs	r3, r2
 8006b22:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	69ba      	ldr	r2, [r7, #24]
 8006b28:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	f003 0303 	and.w	r3, r3, #3
 8006b32:	2b02      	cmp	r3, #2
 8006b34:	d123      	bne.n	8006b7e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006b36:	69fb      	ldr	r3, [r7, #28]
 8006b38:	08da      	lsrs	r2, r3, #3
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	3208      	adds	r2, #8
 8006b3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006b44:	69fb      	ldr	r3, [r7, #28]
 8006b46:	f003 0307 	and.w	r3, r3, #7
 8006b4a:	009b      	lsls	r3, r3, #2
 8006b4c:	220f      	movs	r2, #15
 8006b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b52:	43db      	mvns	r3, r3
 8006b54:	69ba      	ldr	r2, [r7, #24]
 8006b56:	4013      	ands	r3, r2
 8006b58:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	691a      	ldr	r2, [r3, #16]
 8006b5e:	69fb      	ldr	r3, [r7, #28]
 8006b60:	f003 0307 	and.w	r3, r3, #7
 8006b64:	009b      	lsls	r3, r3, #2
 8006b66:	fa02 f303 	lsl.w	r3, r2, r3
 8006b6a:	69ba      	ldr	r2, [r7, #24]
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006b70:	69fb      	ldr	r3, [r7, #28]
 8006b72:	08da      	lsrs	r2, r3, #3
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	3208      	adds	r2, #8
 8006b78:	69b9      	ldr	r1, [r7, #24]
 8006b7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006b84:	69fb      	ldr	r3, [r7, #28]
 8006b86:	005b      	lsls	r3, r3, #1
 8006b88:	2203      	movs	r2, #3
 8006b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b8e:	43db      	mvns	r3, r3
 8006b90:	69ba      	ldr	r2, [r7, #24]
 8006b92:	4013      	ands	r3, r2
 8006b94:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	f003 0203 	and.w	r2, r3, #3
 8006b9e:	69fb      	ldr	r3, [r7, #28]
 8006ba0:	005b      	lsls	r3, r3, #1
 8006ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ba6:	69ba      	ldr	r2, [r7, #24]
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	69ba      	ldr	r2, [r7, #24]
 8006bb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	f000 80e0 	beq.w	8006d80 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006bc0:	4b2f      	ldr	r3, [pc, #188]	@ (8006c80 <HAL_GPIO_Init+0x238>)
 8006bc2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006bc6:	4a2e      	ldr	r2, [pc, #184]	@ (8006c80 <HAL_GPIO_Init+0x238>)
 8006bc8:	f043 0302 	orr.w	r3, r3, #2
 8006bcc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8006bd0:	4b2b      	ldr	r3, [pc, #172]	@ (8006c80 <HAL_GPIO_Init+0x238>)
 8006bd2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006bd6:	f003 0302 	and.w	r3, r3, #2
 8006bda:	60fb      	str	r3, [r7, #12]
 8006bdc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006bde:	4a29      	ldr	r2, [pc, #164]	@ (8006c84 <HAL_GPIO_Init+0x23c>)
 8006be0:	69fb      	ldr	r3, [r7, #28]
 8006be2:	089b      	lsrs	r3, r3, #2
 8006be4:	3302      	adds	r3, #2
 8006be6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006bec:	69fb      	ldr	r3, [r7, #28]
 8006bee:	f003 0303 	and.w	r3, r3, #3
 8006bf2:	009b      	lsls	r3, r3, #2
 8006bf4:	220f      	movs	r2, #15
 8006bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8006bfa:	43db      	mvns	r3, r3
 8006bfc:	69ba      	ldr	r2, [r7, #24]
 8006bfe:	4013      	ands	r3, r2
 8006c00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	4a20      	ldr	r2, [pc, #128]	@ (8006c88 <HAL_GPIO_Init+0x240>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d052      	beq.n	8006cb0 <HAL_GPIO_Init+0x268>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	4a1f      	ldr	r2, [pc, #124]	@ (8006c8c <HAL_GPIO_Init+0x244>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d031      	beq.n	8006c76 <HAL_GPIO_Init+0x22e>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	4a1e      	ldr	r2, [pc, #120]	@ (8006c90 <HAL_GPIO_Init+0x248>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d02b      	beq.n	8006c72 <HAL_GPIO_Init+0x22a>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	4a1d      	ldr	r2, [pc, #116]	@ (8006c94 <HAL_GPIO_Init+0x24c>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d025      	beq.n	8006c6e <HAL_GPIO_Init+0x226>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	4a1c      	ldr	r2, [pc, #112]	@ (8006c98 <HAL_GPIO_Init+0x250>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d01f      	beq.n	8006c6a <HAL_GPIO_Init+0x222>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	4a1b      	ldr	r2, [pc, #108]	@ (8006c9c <HAL_GPIO_Init+0x254>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d019      	beq.n	8006c66 <HAL_GPIO_Init+0x21e>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	4a1a      	ldr	r2, [pc, #104]	@ (8006ca0 <HAL_GPIO_Init+0x258>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d013      	beq.n	8006c62 <HAL_GPIO_Init+0x21a>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	4a19      	ldr	r2, [pc, #100]	@ (8006ca4 <HAL_GPIO_Init+0x25c>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d00d      	beq.n	8006c5e <HAL_GPIO_Init+0x216>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	4a18      	ldr	r2, [pc, #96]	@ (8006ca8 <HAL_GPIO_Init+0x260>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d007      	beq.n	8006c5a <HAL_GPIO_Init+0x212>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	4a17      	ldr	r2, [pc, #92]	@ (8006cac <HAL_GPIO_Init+0x264>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d101      	bne.n	8006c56 <HAL_GPIO_Init+0x20e>
 8006c52:	2309      	movs	r3, #9
 8006c54:	e02d      	b.n	8006cb2 <HAL_GPIO_Init+0x26a>
 8006c56:	230a      	movs	r3, #10
 8006c58:	e02b      	b.n	8006cb2 <HAL_GPIO_Init+0x26a>
 8006c5a:	2308      	movs	r3, #8
 8006c5c:	e029      	b.n	8006cb2 <HAL_GPIO_Init+0x26a>
 8006c5e:	2307      	movs	r3, #7
 8006c60:	e027      	b.n	8006cb2 <HAL_GPIO_Init+0x26a>
 8006c62:	2306      	movs	r3, #6
 8006c64:	e025      	b.n	8006cb2 <HAL_GPIO_Init+0x26a>
 8006c66:	2305      	movs	r3, #5
 8006c68:	e023      	b.n	8006cb2 <HAL_GPIO_Init+0x26a>
 8006c6a:	2304      	movs	r3, #4
 8006c6c:	e021      	b.n	8006cb2 <HAL_GPIO_Init+0x26a>
 8006c6e:	2303      	movs	r3, #3
 8006c70:	e01f      	b.n	8006cb2 <HAL_GPIO_Init+0x26a>
 8006c72:	2302      	movs	r3, #2
 8006c74:	e01d      	b.n	8006cb2 <HAL_GPIO_Init+0x26a>
 8006c76:	2301      	movs	r3, #1
 8006c78:	e01b      	b.n	8006cb2 <HAL_GPIO_Init+0x26a>
 8006c7a:	bf00      	nop
 8006c7c:	58000080 	.word	0x58000080
 8006c80:	58024400 	.word	0x58024400
 8006c84:	58000400 	.word	0x58000400
 8006c88:	58020000 	.word	0x58020000
 8006c8c:	58020400 	.word	0x58020400
 8006c90:	58020800 	.word	0x58020800
 8006c94:	58020c00 	.word	0x58020c00
 8006c98:	58021000 	.word	0x58021000
 8006c9c:	58021400 	.word	0x58021400
 8006ca0:	58021800 	.word	0x58021800
 8006ca4:	58021c00 	.word	0x58021c00
 8006ca8:	58022000 	.word	0x58022000
 8006cac:	58022400 	.word	0x58022400
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	69fa      	ldr	r2, [r7, #28]
 8006cb4:	f002 0203 	and.w	r2, r2, #3
 8006cb8:	0092      	lsls	r2, r2, #2
 8006cba:	4093      	lsls	r3, r2
 8006cbc:	69ba      	ldr	r2, [r7, #24]
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006cc2:	4938      	ldr	r1, [pc, #224]	@ (8006da4 <HAL_GPIO_Init+0x35c>)
 8006cc4:	69fb      	ldr	r3, [r7, #28]
 8006cc6:	089b      	lsrs	r3, r3, #2
 8006cc8:	3302      	adds	r3, #2
 8006cca:	69ba      	ldr	r2, [r7, #24]
 8006ccc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006cd0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	43db      	mvns	r3, r3
 8006cdc:	69ba      	ldr	r2, [r7, #24]
 8006cde:	4013      	ands	r3, r2
 8006ce0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d003      	beq.n	8006cf6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006cee:	69ba      	ldr	r2, [r7, #24]
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006cf6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006cfa:	69bb      	ldr	r3, [r7, #24]
 8006cfc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006cfe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	43db      	mvns	r3, r3
 8006d0a:	69ba      	ldr	r2, [r7, #24]
 8006d0c:	4013      	ands	r3, r2
 8006d0e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d003      	beq.n	8006d24 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006d1c:	69ba      	ldr	r2, [r7, #24]
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	4313      	orrs	r3, r2
 8006d22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006d24:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006d28:	69bb      	ldr	r3, [r7, #24]
 8006d2a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	43db      	mvns	r3, r3
 8006d36:	69ba      	ldr	r2, [r7, #24]
 8006d38:	4013      	ands	r3, r2
 8006d3a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d003      	beq.n	8006d50 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006d48:	69ba      	ldr	r2, [r7, #24]
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	69ba      	ldr	r2, [r7, #24]
 8006d54:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	43db      	mvns	r3, r3
 8006d60:	69ba      	ldr	r2, [r7, #24]
 8006d62:	4013      	ands	r3, r2
 8006d64:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d003      	beq.n	8006d7a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006d72:	69ba      	ldr	r2, [r7, #24]
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	4313      	orrs	r3, r2
 8006d78:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	69ba      	ldr	r2, [r7, #24]
 8006d7e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006d80:	69fb      	ldr	r3, [r7, #28]
 8006d82:	3301      	adds	r3, #1
 8006d84:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	681a      	ldr	r2, [r3, #0]
 8006d8a:	69fb      	ldr	r3, [r7, #28]
 8006d8c:	fa22 f303 	lsr.w	r3, r2, r3
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	f47f ae63 	bne.w	8006a5c <HAL_GPIO_Init+0x14>
  }
}
 8006d96:	bf00      	nop
 8006d98:	bf00      	nop
 8006d9a:	3724      	adds	r7, #36	@ 0x24
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da2:	4770      	bx	lr
 8006da4:	58000400 	.word	0x58000400

08006da8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b083      	sub	sp, #12
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
 8006db0:	460b      	mov	r3, r1
 8006db2:	807b      	strh	r3, [r7, #2]
 8006db4:	4613      	mov	r3, r2
 8006db6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006db8:	787b      	ldrb	r3, [r7, #1]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d003      	beq.n	8006dc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006dbe:	887a      	ldrh	r2, [r7, #2]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006dc4:	e003      	b.n	8006dce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006dc6:	887b      	ldrh	r3, [r7, #2]
 8006dc8:	041a      	lsls	r2, r3, #16
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	619a      	str	r2, [r3, #24]
}
 8006dce:	bf00      	nop
 8006dd0:	370c      	adds	r7, #12
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd8:	4770      	bx	lr
	...

08006ddc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b082      	sub	sp, #8
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d101      	bne.n	8006dee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006dea:	2301      	movs	r3, #1
 8006dec:	e08b      	b.n	8006f06 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006df4:	b2db      	uxtb	r3, r3
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d106      	bne.n	8006e08 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f7fa fe20 	bl	8001a48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2224      	movs	r2, #36	@ 0x24
 8006e0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	681a      	ldr	r2, [r3, #0]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f022 0201 	bic.w	r2, r2, #1
 8006e1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	685a      	ldr	r2, [r3, #4]
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006e2c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	689a      	ldr	r2, [r3, #8]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006e3c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	68db      	ldr	r3, [r3, #12]
 8006e42:	2b01      	cmp	r3, #1
 8006e44:	d107      	bne.n	8006e56 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	689a      	ldr	r2, [r3, #8]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006e52:	609a      	str	r2, [r3, #8]
 8006e54:	e006      	b.n	8006e64 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	689a      	ldr	r2, [r3, #8]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8006e62:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	68db      	ldr	r3, [r3, #12]
 8006e68:	2b02      	cmp	r3, #2
 8006e6a:	d108      	bne.n	8006e7e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	685a      	ldr	r2, [r3, #4]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006e7a:	605a      	str	r2, [r3, #4]
 8006e7c:	e007      	b.n	8006e8e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	685a      	ldr	r2, [r3, #4]
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006e8c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	6859      	ldr	r1, [r3, #4]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681a      	ldr	r2, [r3, #0]
 8006e98:	4b1d      	ldr	r3, [pc, #116]	@ (8006f10 <HAL_I2C_Init+0x134>)
 8006e9a:	430b      	orrs	r3, r1
 8006e9c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	68da      	ldr	r2, [r3, #12]
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006eac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	691a      	ldr	r2, [r3, #16]
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	695b      	ldr	r3, [r3, #20]
 8006eb6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	699b      	ldr	r3, [r3, #24]
 8006ebe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	430a      	orrs	r2, r1
 8006ec6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	69d9      	ldr	r1, [r3, #28]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6a1a      	ldr	r2, [r3, #32]
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	430a      	orrs	r2, r1
 8006ed6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	681a      	ldr	r2, [r3, #0]
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f042 0201 	orr.w	r2, r2, #1
 8006ee6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2200      	movs	r2, #0
 8006eec:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2220      	movs	r2, #32
 8006ef2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2200      	movs	r2, #0
 8006f00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006f04:	2300      	movs	r3, #0
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3708      	adds	r7, #8
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}
 8006f0e:	bf00      	nop
 8006f10:	02008000 	.word	0x02008000

08006f14 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b083      	sub	sp, #12
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
 8006f1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f24:	b2db      	uxtb	r3, r3
 8006f26:	2b20      	cmp	r3, #32
 8006f28:	d138      	bne.n	8006f9c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006f30:	2b01      	cmp	r3, #1
 8006f32:	d101      	bne.n	8006f38 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006f34:	2302      	movs	r3, #2
 8006f36:	e032      	b.n	8006f9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2224      	movs	r2, #36	@ 0x24
 8006f44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	681a      	ldr	r2, [r3, #0]
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f022 0201 	bic.w	r2, r2, #1
 8006f56:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	681a      	ldr	r2, [r3, #0]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006f66:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	6819      	ldr	r1, [r3, #0]
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	683a      	ldr	r2, [r7, #0]
 8006f74:	430a      	orrs	r2, r1
 8006f76:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	681a      	ldr	r2, [r3, #0]
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f042 0201 	orr.w	r2, r2, #1
 8006f86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2220      	movs	r2, #32
 8006f8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2200      	movs	r2, #0
 8006f94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006f98:	2300      	movs	r3, #0
 8006f9a:	e000      	b.n	8006f9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006f9c:	2302      	movs	r3, #2
  }
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	370c      	adds	r7, #12
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa8:	4770      	bx	lr

08006faa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006faa:	b480      	push	{r7}
 8006fac:	b085      	sub	sp, #20
 8006fae:	af00      	add	r7, sp, #0
 8006fb0:	6078      	str	r0, [r7, #4]
 8006fb2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006fba:	b2db      	uxtb	r3, r3
 8006fbc:	2b20      	cmp	r3, #32
 8006fbe:	d139      	bne.n	8007034 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006fc6:	2b01      	cmp	r3, #1
 8006fc8:	d101      	bne.n	8006fce <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006fca:	2302      	movs	r3, #2
 8006fcc:	e033      	b.n	8007036 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2201      	movs	r2, #1
 8006fd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2224      	movs	r2, #36	@ 0x24
 8006fda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	681a      	ldr	r2, [r3, #0]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f022 0201 	bic.w	r2, r2, #1
 8006fec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006ffc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	021b      	lsls	r3, r3, #8
 8007002:	68fa      	ldr	r2, [r7, #12]
 8007004:	4313      	orrs	r3, r2
 8007006:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	68fa      	ldr	r2, [r7, #12]
 800700e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	681a      	ldr	r2, [r3, #0]
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f042 0201 	orr.w	r2, r2, #1
 800701e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2220      	movs	r2, #32
 8007024:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2200      	movs	r2, #0
 800702c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007030:	2300      	movs	r3, #0
 8007032:	e000      	b.n	8007036 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007034:	2302      	movs	r3, #2
  }
}
 8007036:	4618      	mov	r0, r3
 8007038:	3714      	adds	r7, #20
 800703a:	46bd      	mov	sp, r7
 800703c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007040:	4770      	bx	lr
	...

08007044 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b084      	sub	sp, #16
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800704c:	4b19      	ldr	r3, [pc, #100]	@ (80070b4 <HAL_PWREx_ConfigSupply+0x70>)
 800704e:	68db      	ldr	r3, [r3, #12]
 8007050:	f003 0304 	and.w	r3, r3, #4
 8007054:	2b04      	cmp	r3, #4
 8007056:	d00a      	beq.n	800706e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007058:	4b16      	ldr	r3, [pc, #88]	@ (80070b4 <HAL_PWREx_ConfigSupply+0x70>)
 800705a:	68db      	ldr	r3, [r3, #12]
 800705c:	f003 0307 	and.w	r3, r3, #7
 8007060:	687a      	ldr	r2, [r7, #4]
 8007062:	429a      	cmp	r2, r3
 8007064:	d001      	beq.n	800706a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007066:	2301      	movs	r3, #1
 8007068:	e01f      	b.n	80070aa <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800706a:	2300      	movs	r3, #0
 800706c:	e01d      	b.n	80070aa <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800706e:	4b11      	ldr	r3, [pc, #68]	@ (80070b4 <HAL_PWREx_ConfigSupply+0x70>)
 8007070:	68db      	ldr	r3, [r3, #12]
 8007072:	f023 0207 	bic.w	r2, r3, #7
 8007076:	490f      	ldr	r1, [pc, #60]	@ (80070b4 <HAL_PWREx_ConfigSupply+0x70>)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	4313      	orrs	r3, r2
 800707c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800707e:	f7fb f9f7 	bl	8002470 <HAL_GetTick>
 8007082:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007084:	e009      	b.n	800709a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007086:	f7fb f9f3 	bl	8002470 <HAL_GetTick>
 800708a:	4602      	mov	r2, r0
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	1ad3      	subs	r3, r2, r3
 8007090:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007094:	d901      	bls.n	800709a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007096:	2301      	movs	r3, #1
 8007098:	e007      	b.n	80070aa <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800709a:	4b06      	ldr	r3, [pc, #24]	@ (80070b4 <HAL_PWREx_ConfigSupply+0x70>)
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80070a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80070a6:	d1ee      	bne.n	8007086 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80070a8:	2300      	movs	r3, #0
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3710      	adds	r7, #16
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}
 80070b2:	bf00      	nop
 80070b4:	58024800 	.word	0x58024800

080070b8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b08c      	sub	sp, #48	@ 0x30
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d102      	bne.n	80070cc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80070c6:	2301      	movs	r3, #1
 80070c8:	f000 bc48 	b.w	800795c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f003 0301 	and.w	r3, r3, #1
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	f000 8088 	beq.w	80071ea <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80070da:	4b99      	ldr	r3, [pc, #612]	@ (8007340 <HAL_RCC_OscConfig+0x288>)
 80070dc:	691b      	ldr	r3, [r3, #16]
 80070de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80070e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80070e4:	4b96      	ldr	r3, [pc, #600]	@ (8007340 <HAL_RCC_OscConfig+0x288>)
 80070e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80070ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070ec:	2b10      	cmp	r3, #16
 80070ee:	d007      	beq.n	8007100 <HAL_RCC_OscConfig+0x48>
 80070f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070f2:	2b18      	cmp	r3, #24
 80070f4:	d111      	bne.n	800711a <HAL_RCC_OscConfig+0x62>
 80070f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070f8:	f003 0303 	and.w	r3, r3, #3
 80070fc:	2b02      	cmp	r3, #2
 80070fe:	d10c      	bne.n	800711a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007100:	4b8f      	ldr	r3, [pc, #572]	@ (8007340 <HAL_RCC_OscConfig+0x288>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007108:	2b00      	cmp	r3, #0
 800710a:	d06d      	beq.n	80071e8 <HAL_RCC_OscConfig+0x130>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	685b      	ldr	r3, [r3, #4]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d169      	bne.n	80071e8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007114:	2301      	movs	r3, #1
 8007116:	f000 bc21 	b.w	800795c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	685b      	ldr	r3, [r3, #4]
 800711e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007122:	d106      	bne.n	8007132 <HAL_RCC_OscConfig+0x7a>
 8007124:	4b86      	ldr	r3, [pc, #536]	@ (8007340 <HAL_RCC_OscConfig+0x288>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a85      	ldr	r2, [pc, #532]	@ (8007340 <HAL_RCC_OscConfig+0x288>)
 800712a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800712e:	6013      	str	r3, [r2, #0]
 8007130:	e02e      	b.n	8007190 <HAL_RCC_OscConfig+0xd8>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	685b      	ldr	r3, [r3, #4]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d10c      	bne.n	8007154 <HAL_RCC_OscConfig+0x9c>
 800713a:	4b81      	ldr	r3, [pc, #516]	@ (8007340 <HAL_RCC_OscConfig+0x288>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a80      	ldr	r2, [pc, #512]	@ (8007340 <HAL_RCC_OscConfig+0x288>)
 8007140:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007144:	6013      	str	r3, [r2, #0]
 8007146:	4b7e      	ldr	r3, [pc, #504]	@ (8007340 <HAL_RCC_OscConfig+0x288>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4a7d      	ldr	r2, [pc, #500]	@ (8007340 <HAL_RCC_OscConfig+0x288>)
 800714c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007150:	6013      	str	r3, [r2, #0]
 8007152:	e01d      	b.n	8007190 <HAL_RCC_OscConfig+0xd8>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800715c:	d10c      	bne.n	8007178 <HAL_RCC_OscConfig+0xc0>
 800715e:	4b78      	ldr	r3, [pc, #480]	@ (8007340 <HAL_RCC_OscConfig+0x288>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4a77      	ldr	r2, [pc, #476]	@ (8007340 <HAL_RCC_OscConfig+0x288>)
 8007164:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007168:	6013      	str	r3, [r2, #0]
 800716a:	4b75      	ldr	r3, [pc, #468]	@ (8007340 <HAL_RCC_OscConfig+0x288>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4a74      	ldr	r2, [pc, #464]	@ (8007340 <HAL_RCC_OscConfig+0x288>)
 8007170:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007174:	6013      	str	r3, [r2, #0]
 8007176:	e00b      	b.n	8007190 <HAL_RCC_OscConfig+0xd8>
 8007178:	4b71      	ldr	r3, [pc, #452]	@ (8007340 <HAL_RCC_OscConfig+0x288>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a70      	ldr	r2, [pc, #448]	@ (8007340 <HAL_RCC_OscConfig+0x288>)
 800717e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007182:	6013      	str	r3, [r2, #0]
 8007184:	4b6e      	ldr	r3, [pc, #440]	@ (8007340 <HAL_RCC_OscConfig+0x288>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4a6d      	ldr	r2, [pc, #436]	@ (8007340 <HAL_RCC_OscConfig+0x288>)
 800718a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800718e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d013      	beq.n	80071c0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007198:	f7fb f96a 	bl	8002470 <HAL_GetTick>
 800719c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800719e:	e008      	b.n	80071b2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80071a0:	f7fb f966 	bl	8002470 <HAL_GetTick>
 80071a4:	4602      	mov	r2, r0
 80071a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071a8:	1ad3      	subs	r3, r2, r3
 80071aa:	2b64      	cmp	r3, #100	@ 0x64
 80071ac:	d901      	bls.n	80071b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80071ae:	2303      	movs	r3, #3
 80071b0:	e3d4      	b.n	800795c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80071b2:	4b63      	ldr	r3, [pc, #396]	@ (8007340 <HAL_RCC_OscConfig+0x288>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d0f0      	beq.n	80071a0 <HAL_RCC_OscConfig+0xe8>
 80071be:	e014      	b.n	80071ea <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071c0:	f7fb f956 	bl	8002470 <HAL_GetTick>
 80071c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80071c6:	e008      	b.n	80071da <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80071c8:	f7fb f952 	bl	8002470 <HAL_GetTick>
 80071cc:	4602      	mov	r2, r0
 80071ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071d0:	1ad3      	subs	r3, r2, r3
 80071d2:	2b64      	cmp	r3, #100	@ 0x64
 80071d4:	d901      	bls.n	80071da <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80071d6:	2303      	movs	r3, #3
 80071d8:	e3c0      	b.n	800795c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80071da:	4b59      	ldr	r3, [pc, #356]	@ (8007340 <HAL_RCC_OscConfig+0x288>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d1f0      	bne.n	80071c8 <HAL_RCC_OscConfig+0x110>
 80071e6:	e000      	b.n	80071ea <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80071e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f003 0302 	and.w	r3, r3, #2
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	f000 80ca 	beq.w	800738c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80071f8:	4b51      	ldr	r3, [pc, #324]	@ (8007340 <HAL_RCC_OscConfig+0x288>)
 80071fa:	691b      	ldr	r3, [r3, #16]
 80071fc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007200:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007202:	4b4f      	ldr	r3, [pc, #316]	@ (8007340 <HAL_RCC_OscConfig+0x288>)
 8007204:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007206:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007208:	6a3b      	ldr	r3, [r7, #32]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d007      	beq.n	800721e <HAL_RCC_OscConfig+0x166>
 800720e:	6a3b      	ldr	r3, [r7, #32]
 8007210:	2b18      	cmp	r3, #24
 8007212:	d156      	bne.n	80072c2 <HAL_RCC_OscConfig+0x20a>
 8007214:	69fb      	ldr	r3, [r7, #28]
 8007216:	f003 0303 	and.w	r3, r3, #3
 800721a:	2b00      	cmp	r3, #0
 800721c:	d151      	bne.n	80072c2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800721e:	4b48      	ldr	r3, [pc, #288]	@ (8007340 <HAL_RCC_OscConfig+0x288>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f003 0304 	and.w	r3, r3, #4
 8007226:	2b00      	cmp	r3, #0
 8007228:	d005      	beq.n	8007236 <HAL_RCC_OscConfig+0x17e>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	68db      	ldr	r3, [r3, #12]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d101      	bne.n	8007236 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8007232:	2301      	movs	r3, #1
 8007234:	e392      	b.n	800795c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007236:	4b42      	ldr	r3, [pc, #264]	@ (8007340 <HAL_RCC_OscConfig+0x288>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f023 0219 	bic.w	r2, r3, #25
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	68db      	ldr	r3, [r3, #12]
 8007242:	493f      	ldr	r1, [pc, #252]	@ (8007340 <HAL_RCC_OscConfig+0x288>)
 8007244:	4313      	orrs	r3, r2
 8007246:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007248:	f7fb f912 	bl	8002470 <HAL_GetTick>
 800724c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800724e:	e008      	b.n	8007262 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007250:	f7fb f90e 	bl	8002470 <HAL_GetTick>
 8007254:	4602      	mov	r2, r0
 8007256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007258:	1ad3      	subs	r3, r2, r3
 800725a:	2b02      	cmp	r3, #2
 800725c:	d901      	bls.n	8007262 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800725e:	2303      	movs	r3, #3
 8007260:	e37c      	b.n	800795c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007262:	4b37      	ldr	r3, [pc, #220]	@ (8007340 <HAL_RCC_OscConfig+0x288>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f003 0304 	and.w	r3, r3, #4
 800726a:	2b00      	cmp	r3, #0
 800726c:	d0f0      	beq.n	8007250 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800726e:	f7fb f92f 	bl	80024d0 <HAL_GetREVID>
 8007272:	4603      	mov	r3, r0
 8007274:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007278:	4293      	cmp	r3, r2
 800727a:	d817      	bhi.n	80072ac <HAL_RCC_OscConfig+0x1f4>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	691b      	ldr	r3, [r3, #16]
 8007280:	2b40      	cmp	r3, #64	@ 0x40
 8007282:	d108      	bne.n	8007296 <HAL_RCC_OscConfig+0x1de>
 8007284:	4b2e      	ldr	r3, [pc, #184]	@ (8007340 <HAL_RCC_OscConfig+0x288>)
 8007286:	685b      	ldr	r3, [r3, #4]
 8007288:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800728c:	4a2c      	ldr	r2, [pc, #176]	@ (8007340 <HAL_RCC_OscConfig+0x288>)
 800728e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007292:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007294:	e07a      	b.n	800738c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007296:	4b2a      	ldr	r3, [pc, #168]	@ (8007340 <HAL_RCC_OscConfig+0x288>)
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	691b      	ldr	r3, [r3, #16]
 80072a2:	031b      	lsls	r3, r3, #12
 80072a4:	4926      	ldr	r1, [pc, #152]	@ (8007340 <HAL_RCC_OscConfig+0x288>)
 80072a6:	4313      	orrs	r3, r2
 80072a8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80072aa:	e06f      	b.n	800738c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80072ac:	4b24      	ldr	r3, [pc, #144]	@ (8007340 <HAL_RCC_OscConfig+0x288>)
 80072ae:	685b      	ldr	r3, [r3, #4]
 80072b0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	691b      	ldr	r3, [r3, #16]
 80072b8:	061b      	lsls	r3, r3, #24
 80072ba:	4921      	ldr	r1, [pc, #132]	@ (8007340 <HAL_RCC_OscConfig+0x288>)
 80072bc:	4313      	orrs	r3, r2
 80072be:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80072c0:	e064      	b.n	800738c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	68db      	ldr	r3, [r3, #12]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d047      	beq.n	800735a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80072ca:	4b1d      	ldr	r3, [pc, #116]	@ (8007340 <HAL_RCC_OscConfig+0x288>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f023 0219 	bic.w	r2, r3, #25
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	68db      	ldr	r3, [r3, #12]
 80072d6:	491a      	ldr	r1, [pc, #104]	@ (8007340 <HAL_RCC_OscConfig+0x288>)
 80072d8:	4313      	orrs	r3, r2
 80072da:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072dc:	f7fb f8c8 	bl	8002470 <HAL_GetTick>
 80072e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80072e2:	e008      	b.n	80072f6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80072e4:	f7fb f8c4 	bl	8002470 <HAL_GetTick>
 80072e8:	4602      	mov	r2, r0
 80072ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072ec:	1ad3      	subs	r3, r2, r3
 80072ee:	2b02      	cmp	r3, #2
 80072f0:	d901      	bls.n	80072f6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80072f2:	2303      	movs	r3, #3
 80072f4:	e332      	b.n	800795c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80072f6:	4b12      	ldr	r3, [pc, #72]	@ (8007340 <HAL_RCC_OscConfig+0x288>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f003 0304 	and.w	r3, r3, #4
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d0f0      	beq.n	80072e4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007302:	f7fb f8e5 	bl	80024d0 <HAL_GetREVID>
 8007306:	4603      	mov	r3, r0
 8007308:	f241 0203 	movw	r2, #4099	@ 0x1003
 800730c:	4293      	cmp	r3, r2
 800730e:	d819      	bhi.n	8007344 <HAL_RCC_OscConfig+0x28c>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	691b      	ldr	r3, [r3, #16]
 8007314:	2b40      	cmp	r3, #64	@ 0x40
 8007316:	d108      	bne.n	800732a <HAL_RCC_OscConfig+0x272>
 8007318:	4b09      	ldr	r3, [pc, #36]	@ (8007340 <HAL_RCC_OscConfig+0x288>)
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8007320:	4a07      	ldr	r2, [pc, #28]	@ (8007340 <HAL_RCC_OscConfig+0x288>)
 8007322:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007326:	6053      	str	r3, [r2, #4]
 8007328:	e030      	b.n	800738c <HAL_RCC_OscConfig+0x2d4>
 800732a:	4b05      	ldr	r3, [pc, #20]	@ (8007340 <HAL_RCC_OscConfig+0x288>)
 800732c:	685b      	ldr	r3, [r3, #4]
 800732e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	691b      	ldr	r3, [r3, #16]
 8007336:	031b      	lsls	r3, r3, #12
 8007338:	4901      	ldr	r1, [pc, #4]	@ (8007340 <HAL_RCC_OscConfig+0x288>)
 800733a:	4313      	orrs	r3, r2
 800733c:	604b      	str	r3, [r1, #4]
 800733e:	e025      	b.n	800738c <HAL_RCC_OscConfig+0x2d4>
 8007340:	58024400 	.word	0x58024400
 8007344:	4b9a      	ldr	r3, [pc, #616]	@ (80075b0 <HAL_RCC_OscConfig+0x4f8>)
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	691b      	ldr	r3, [r3, #16]
 8007350:	061b      	lsls	r3, r3, #24
 8007352:	4997      	ldr	r1, [pc, #604]	@ (80075b0 <HAL_RCC_OscConfig+0x4f8>)
 8007354:	4313      	orrs	r3, r2
 8007356:	604b      	str	r3, [r1, #4]
 8007358:	e018      	b.n	800738c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800735a:	4b95      	ldr	r3, [pc, #596]	@ (80075b0 <HAL_RCC_OscConfig+0x4f8>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a94      	ldr	r2, [pc, #592]	@ (80075b0 <HAL_RCC_OscConfig+0x4f8>)
 8007360:	f023 0301 	bic.w	r3, r3, #1
 8007364:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007366:	f7fb f883 	bl	8002470 <HAL_GetTick>
 800736a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800736c:	e008      	b.n	8007380 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800736e:	f7fb f87f 	bl	8002470 <HAL_GetTick>
 8007372:	4602      	mov	r2, r0
 8007374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007376:	1ad3      	subs	r3, r2, r3
 8007378:	2b02      	cmp	r3, #2
 800737a:	d901      	bls.n	8007380 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800737c:	2303      	movs	r3, #3
 800737e:	e2ed      	b.n	800795c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007380:	4b8b      	ldr	r3, [pc, #556]	@ (80075b0 <HAL_RCC_OscConfig+0x4f8>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f003 0304 	and.w	r3, r3, #4
 8007388:	2b00      	cmp	r3, #0
 800738a:	d1f0      	bne.n	800736e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f003 0310 	and.w	r3, r3, #16
 8007394:	2b00      	cmp	r3, #0
 8007396:	f000 80a9 	beq.w	80074ec <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800739a:	4b85      	ldr	r3, [pc, #532]	@ (80075b0 <HAL_RCC_OscConfig+0x4f8>)
 800739c:	691b      	ldr	r3, [r3, #16]
 800739e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80073a2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80073a4:	4b82      	ldr	r3, [pc, #520]	@ (80075b0 <HAL_RCC_OscConfig+0x4f8>)
 80073a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073a8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80073aa:	69bb      	ldr	r3, [r7, #24]
 80073ac:	2b08      	cmp	r3, #8
 80073ae:	d007      	beq.n	80073c0 <HAL_RCC_OscConfig+0x308>
 80073b0:	69bb      	ldr	r3, [r7, #24]
 80073b2:	2b18      	cmp	r3, #24
 80073b4:	d13a      	bne.n	800742c <HAL_RCC_OscConfig+0x374>
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	f003 0303 	and.w	r3, r3, #3
 80073bc:	2b01      	cmp	r3, #1
 80073be:	d135      	bne.n	800742c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80073c0:	4b7b      	ldr	r3, [pc, #492]	@ (80075b0 <HAL_RCC_OscConfig+0x4f8>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d005      	beq.n	80073d8 <HAL_RCC_OscConfig+0x320>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	69db      	ldr	r3, [r3, #28]
 80073d0:	2b80      	cmp	r3, #128	@ 0x80
 80073d2:	d001      	beq.n	80073d8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80073d4:	2301      	movs	r3, #1
 80073d6:	e2c1      	b.n	800795c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80073d8:	f7fb f87a 	bl	80024d0 <HAL_GetREVID>
 80073dc:	4603      	mov	r3, r0
 80073de:	f241 0203 	movw	r2, #4099	@ 0x1003
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d817      	bhi.n	8007416 <HAL_RCC_OscConfig+0x35e>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6a1b      	ldr	r3, [r3, #32]
 80073ea:	2b20      	cmp	r3, #32
 80073ec:	d108      	bne.n	8007400 <HAL_RCC_OscConfig+0x348>
 80073ee:	4b70      	ldr	r3, [pc, #448]	@ (80075b0 <HAL_RCC_OscConfig+0x4f8>)
 80073f0:	685b      	ldr	r3, [r3, #4]
 80073f2:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80073f6:	4a6e      	ldr	r2, [pc, #440]	@ (80075b0 <HAL_RCC_OscConfig+0x4f8>)
 80073f8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80073fc:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80073fe:	e075      	b.n	80074ec <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007400:	4b6b      	ldr	r3, [pc, #428]	@ (80075b0 <HAL_RCC_OscConfig+0x4f8>)
 8007402:	685b      	ldr	r3, [r3, #4]
 8007404:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6a1b      	ldr	r3, [r3, #32]
 800740c:	069b      	lsls	r3, r3, #26
 800740e:	4968      	ldr	r1, [pc, #416]	@ (80075b0 <HAL_RCC_OscConfig+0x4f8>)
 8007410:	4313      	orrs	r3, r2
 8007412:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007414:	e06a      	b.n	80074ec <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007416:	4b66      	ldr	r3, [pc, #408]	@ (80075b0 <HAL_RCC_OscConfig+0x4f8>)
 8007418:	68db      	ldr	r3, [r3, #12]
 800741a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6a1b      	ldr	r3, [r3, #32]
 8007422:	061b      	lsls	r3, r3, #24
 8007424:	4962      	ldr	r1, [pc, #392]	@ (80075b0 <HAL_RCC_OscConfig+0x4f8>)
 8007426:	4313      	orrs	r3, r2
 8007428:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800742a:	e05f      	b.n	80074ec <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	69db      	ldr	r3, [r3, #28]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d042      	beq.n	80074ba <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007434:	4b5e      	ldr	r3, [pc, #376]	@ (80075b0 <HAL_RCC_OscConfig+0x4f8>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a5d      	ldr	r2, [pc, #372]	@ (80075b0 <HAL_RCC_OscConfig+0x4f8>)
 800743a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800743e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007440:	f7fb f816 	bl	8002470 <HAL_GetTick>
 8007444:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007446:	e008      	b.n	800745a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007448:	f7fb f812 	bl	8002470 <HAL_GetTick>
 800744c:	4602      	mov	r2, r0
 800744e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007450:	1ad3      	subs	r3, r2, r3
 8007452:	2b02      	cmp	r3, #2
 8007454:	d901      	bls.n	800745a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8007456:	2303      	movs	r3, #3
 8007458:	e280      	b.n	800795c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800745a:	4b55      	ldr	r3, [pc, #340]	@ (80075b0 <HAL_RCC_OscConfig+0x4f8>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007462:	2b00      	cmp	r3, #0
 8007464:	d0f0      	beq.n	8007448 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007466:	f7fb f833 	bl	80024d0 <HAL_GetREVID>
 800746a:	4603      	mov	r3, r0
 800746c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007470:	4293      	cmp	r3, r2
 8007472:	d817      	bhi.n	80074a4 <HAL_RCC_OscConfig+0x3ec>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6a1b      	ldr	r3, [r3, #32]
 8007478:	2b20      	cmp	r3, #32
 800747a:	d108      	bne.n	800748e <HAL_RCC_OscConfig+0x3d6>
 800747c:	4b4c      	ldr	r3, [pc, #304]	@ (80075b0 <HAL_RCC_OscConfig+0x4f8>)
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8007484:	4a4a      	ldr	r2, [pc, #296]	@ (80075b0 <HAL_RCC_OscConfig+0x4f8>)
 8007486:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800748a:	6053      	str	r3, [r2, #4]
 800748c:	e02e      	b.n	80074ec <HAL_RCC_OscConfig+0x434>
 800748e:	4b48      	ldr	r3, [pc, #288]	@ (80075b0 <HAL_RCC_OscConfig+0x4f8>)
 8007490:	685b      	ldr	r3, [r3, #4]
 8007492:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6a1b      	ldr	r3, [r3, #32]
 800749a:	069b      	lsls	r3, r3, #26
 800749c:	4944      	ldr	r1, [pc, #272]	@ (80075b0 <HAL_RCC_OscConfig+0x4f8>)
 800749e:	4313      	orrs	r3, r2
 80074a0:	604b      	str	r3, [r1, #4]
 80074a2:	e023      	b.n	80074ec <HAL_RCC_OscConfig+0x434>
 80074a4:	4b42      	ldr	r3, [pc, #264]	@ (80075b0 <HAL_RCC_OscConfig+0x4f8>)
 80074a6:	68db      	ldr	r3, [r3, #12]
 80074a8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6a1b      	ldr	r3, [r3, #32]
 80074b0:	061b      	lsls	r3, r3, #24
 80074b2:	493f      	ldr	r1, [pc, #252]	@ (80075b0 <HAL_RCC_OscConfig+0x4f8>)
 80074b4:	4313      	orrs	r3, r2
 80074b6:	60cb      	str	r3, [r1, #12]
 80074b8:	e018      	b.n	80074ec <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80074ba:	4b3d      	ldr	r3, [pc, #244]	@ (80075b0 <HAL_RCC_OscConfig+0x4f8>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4a3c      	ldr	r2, [pc, #240]	@ (80075b0 <HAL_RCC_OscConfig+0x4f8>)
 80074c0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80074c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074c6:	f7fa ffd3 	bl	8002470 <HAL_GetTick>
 80074ca:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80074cc:	e008      	b.n	80074e0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80074ce:	f7fa ffcf 	bl	8002470 <HAL_GetTick>
 80074d2:	4602      	mov	r2, r0
 80074d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074d6:	1ad3      	subs	r3, r2, r3
 80074d8:	2b02      	cmp	r3, #2
 80074da:	d901      	bls.n	80074e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80074dc:	2303      	movs	r3, #3
 80074de:	e23d      	b.n	800795c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80074e0:	4b33      	ldr	r3, [pc, #204]	@ (80075b0 <HAL_RCC_OscConfig+0x4f8>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d1f0      	bne.n	80074ce <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f003 0308 	and.w	r3, r3, #8
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d036      	beq.n	8007566 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	695b      	ldr	r3, [r3, #20]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d019      	beq.n	8007534 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007500:	4b2b      	ldr	r3, [pc, #172]	@ (80075b0 <HAL_RCC_OscConfig+0x4f8>)
 8007502:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007504:	4a2a      	ldr	r2, [pc, #168]	@ (80075b0 <HAL_RCC_OscConfig+0x4f8>)
 8007506:	f043 0301 	orr.w	r3, r3, #1
 800750a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800750c:	f7fa ffb0 	bl	8002470 <HAL_GetTick>
 8007510:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007512:	e008      	b.n	8007526 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007514:	f7fa ffac 	bl	8002470 <HAL_GetTick>
 8007518:	4602      	mov	r2, r0
 800751a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800751c:	1ad3      	subs	r3, r2, r3
 800751e:	2b02      	cmp	r3, #2
 8007520:	d901      	bls.n	8007526 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8007522:	2303      	movs	r3, #3
 8007524:	e21a      	b.n	800795c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007526:	4b22      	ldr	r3, [pc, #136]	@ (80075b0 <HAL_RCC_OscConfig+0x4f8>)
 8007528:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800752a:	f003 0302 	and.w	r3, r3, #2
 800752e:	2b00      	cmp	r3, #0
 8007530:	d0f0      	beq.n	8007514 <HAL_RCC_OscConfig+0x45c>
 8007532:	e018      	b.n	8007566 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007534:	4b1e      	ldr	r3, [pc, #120]	@ (80075b0 <HAL_RCC_OscConfig+0x4f8>)
 8007536:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007538:	4a1d      	ldr	r2, [pc, #116]	@ (80075b0 <HAL_RCC_OscConfig+0x4f8>)
 800753a:	f023 0301 	bic.w	r3, r3, #1
 800753e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007540:	f7fa ff96 	bl	8002470 <HAL_GetTick>
 8007544:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007546:	e008      	b.n	800755a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007548:	f7fa ff92 	bl	8002470 <HAL_GetTick>
 800754c:	4602      	mov	r2, r0
 800754e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007550:	1ad3      	subs	r3, r2, r3
 8007552:	2b02      	cmp	r3, #2
 8007554:	d901      	bls.n	800755a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8007556:	2303      	movs	r3, #3
 8007558:	e200      	b.n	800795c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800755a:	4b15      	ldr	r3, [pc, #84]	@ (80075b0 <HAL_RCC_OscConfig+0x4f8>)
 800755c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800755e:	f003 0302 	and.w	r3, r3, #2
 8007562:	2b00      	cmp	r3, #0
 8007564:	d1f0      	bne.n	8007548 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f003 0320 	and.w	r3, r3, #32
 800756e:	2b00      	cmp	r3, #0
 8007570:	d039      	beq.n	80075e6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	699b      	ldr	r3, [r3, #24]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d01c      	beq.n	80075b4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800757a:	4b0d      	ldr	r3, [pc, #52]	@ (80075b0 <HAL_RCC_OscConfig+0x4f8>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4a0c      	ldr	r2, [pc, #48]	@ (80075b0 <HAL_RCC_OscConfig+0x4f8>)
 8007580:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007584:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007586:	f7fa ff73 	bl	8002470 <HAL_GetTick>
 800758a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800758c:	e008      	b.n	80075a0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800758e:	f7fa ff6f 	bl	8002470 <HAL_GetTick>
 8007592:	4602      	mov	r2, r0
 8007594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007596:	1ad3      	subs	r3, r2, r3
 8007598:	2b02      	cmp	r3, #2
 800759a:	d901      	bls.n	80075a0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800759c:	2303      	movs	r3, #3
 800759e:	e1dd      	b.n	800795c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80075a0:	4b03      	ldr	r3, [pc, #12]	@ (80075b0 <HAL_RCC_OscConfig+0x4f8>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d0f0      	beq.n	800758e <HAL_RCC_OscConfig+0x4d6>
 80075ac:	e01b      	b.n	80075e6 <HAL_RCC_OscConfig+0x52e>
 80075ae:	bf00      	nop
 80075b0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80075b4:	4b9b      	ldr	r3, [pc, #620]	@ (8007824 <HAL_RCC_OscConfig+0x76c>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4a9a      	ldr	r2, [pc, #616]	@ (8007824 <HAL_RCC_OscConfig+0x76c>)
 80075ba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80075be:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80075c0:	f7fa ff56 	bl	8002470 <HAL_GetTick>
 80075c4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80075c6:	e008      	b.n	80075da <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80075c8:	f7fa ff52 	bl	8002470 <HAL_GetTick>
 80075cc:	4602      	mov	r2, r0
 80075ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075d0:	1ad3      	subs	r3, r2, r3
 80075d2:	2b02      	cmp	r3, #2
 80075d4:	d901      	bls.n	80075da <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80075d6:	2303      	movs	r3, #3
 80075d8:	e1c0      	b.n	800795c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80075da:	4b92      	ldr	r3, [pc, #584]	@ (8007824 <HAL_RCC_OscConfig+0x76c>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d1f0      	bne.n	80075c8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f003 0304 	and.w	r3, r3, #4
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	f000 8081 	beq.w	80076f6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80075f4:	4b8c      	ldr	r3, [pc, #560]	@ (8007828 <HAL_RCC_OscConfig+0x770>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	4a8b      	ldr	r2, [pc, #556]	@ (8007828 <HAL_RCC_OscConfig+0x770>)
 80075fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80075fe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007600:	f7fa ff36 	bl	8002470 <HAL_GetTick>
 8007604:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007606:	e008      	b.n	800761a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007608:	f7fa ff32 	bl	8002470 <HAL_GetTick>
 800760c:	4602      	mov	r2, r0
 800760e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007610:	1ad3      	subs	r3, r2, r3
 8007612:	2b64      	cmp	r3, #100	@ 0x64
 8007614:	d901      	bls.n	800761a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8007616:	2303      	movs	r3, #3
 8007618:	e1a0      	b.n	800795c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800761a:	4b83      	ldr	r3, [pc, #524]	@ (8007828 <HAL_RCC_OscConfig+0x770>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007622:	2b00      	cmp	r3, #0
 8007624:	d0f0      	beq.n	8007608 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	689b      	ldr	r3, [r3, #8]
 800762a:	2b01      	cmp	r3, #1
 800762c:	d106      	bne.n	800763c <HAL_RCC_OscConfig+0x584>
 800762e:	4b7d      	ldr	r3, [pc, #500]	@ (8007824 <HAL_RCC_OscConfig+0x76c>)
 8007630:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007632:	4a7c      	ldr	r2, [pc, #496]	@ (8007824 <HAL_RCC_OscConfig+0x76c>)
 8007634:	f043 0301 	orr.w	r3, r3, #1
 8007638:	6713      	str	r3, [r2, #112]	@ 0x70
 800763a:	e02d      	b.n	8007698 <HAL_RCC_OscConfig+0x5e0>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	689b      	ldr	r3, [r3, #8]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d10c      	bne.n	800765e <HAL_RCC_OscConfig+0x5a6>
 8007644:	4b77      	ldr	r3, [pc, #476]	@ (8007824 <HAL_RCC_OscConfig+0x76c>)
 8007646:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007648:	4a76      	ldr	r2, [pc, #472]	@ (8007824 <HAL_RCC_OscConfig+0x76c>)
 800764a:	f023 0301 	bic.w	r3, r3, #1
 800764e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007650:	4b74      	ldr	r3, [pc, #464]	@ (8007824 <HAL_RCC_OscConfig+0x76c>)
 8007652:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007654:	4a73      	ldr	r2, [pc, #460]	@ (8007824 <HAL_RCC_OscConfig+0x76c>)
 8007656:	f023 0304 	bic.w	r3, r3, #4
 800765a:	6713      	str	r3, [r2, #112]	@ 0x70
 800765c:	e01c      	b.n	8007698 <HAL_RCC_OscConfig+0x5e0>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	689b      	ldr	r3, [r3, #8]
 8007662:	2b05      	cmp	r3, #5
 8007664:	d10c      	bne.n	8007680 <HAL_RCC_OscConfig+0x5c8>
 8007666:	4b6f      	ldr	r3, [pc, #444]	@ (8007824 <HAL_RCC_OscConfig+0x76c>)
 8007668:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800766a:	4a6e      	ldr	r2, [pc, #440]	@ (8007824 <HAL_RCC_OscConfig+0x76c>)
 800766c:	f043 0304 	orr.w	r3, r3, #4
 8007670:	6713      	str	r3, [r2, #112]	@ 0x70
 8007672:	4b6c      	ldr	r3, [pc, #432]	@ (8007824 <HAL_RCC_OscConfig+0x76c>)
 8007674:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007676:	4a6b      	ldr	r2, [pc, #428]	@ (8007824 <HAL_RCC_OscConfig+0x76c>)
 8007678:	f043 0301 	orr.w	r3, r3, #1
 800767c:	6713      	str	r3, [r2, #112]	@ 0x70
 800767e:	e00b      	b.n	8007698 <HAL_RCC_OscConfig+0x5e0>
 8007680:	4b68      	ldr	r3, [pc, #416]	@ (8007824 <HAL_RCC_OscConfig+0x76c>)
 8007682:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007684:	4a67      	ldr	r2, [pc, #412]	@ (8007824 <HAL_RCC_OscConfig+0x76c>)
 8007686:	f023 0301 	bic.w	r3, r3, #1
 800768a:	6713      	str	r3, [r2, #112]	@ 0x70
 800768c:	4b65      	ldr	r3, [pc, #404]	@ (8007824 <HAL_RCC_OscConfig+0x76c>)
 800768e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007690:	4a64      	ldr	r2, [pc, #400]	@ (8007824 <HAL_RCC_OscConfig+0x76c>)
 8007692:	f023 0304 	bic.w	r3, r3, #4
 8007696:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	689b      	ldr	r3, [r3, #8]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d015      	beq.n	80076cc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076a0:	f7fa fee6 	bl	8002470 <HAL_GetTick>
 80076a4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80076a6:	e00a      	b.n	80076be <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80076a8:	f7fa fee2 	bl	8002470 <HAL_GetTick>
 80076ac:	4602      	mov	r2, r0
 80076ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076b0:	1ad3      	subs	r3, r2, r3
 80076b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d901      	bls.n	80076be <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80076ba:	2303      	movs	r3, #3
 80076bc:	e14e      	b.n	800795c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80076be:	4b59      	ldr	r3, [pc, #356]	@ (8007824 <HAL_RCC_OscConfig+0x76c>)
 80076c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076c2:	f003 0302 	and.w	r3, r3, #2
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d0ee      	beq.n	80076a8 <HAL_RCC_OscConfig+0x5f0>
 80076ca:	e014      	b.n	80076f6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076cc:	f7fa fed0 	bl	8002470 <HAL_GetTick>
 80076d0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80076d2:	e00a      	b.n	80076ea <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80076d4:	f7fa fecc 	bl	8002470 <HAL_GetTick>
 80076d8:	4602      	mov	r2, r0
 80076da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076dc:	1ad3      	subs	r3, r2, r3
 80076de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d901      	bls.n	80076ea <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80076e6:	2303      	movs	r3, #3
 80076e8:	e138      	b.n	800795c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80076ea:	4b4e      	ldr	r3, [pc, #312]	@ (8007824 <HAL_RCC_OscConfig+0x76c>)
 80076ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076ee:	f003 0302 	and.w	r3, r3, #2
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d1ee      	bne.n	80076d4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	f000 812d 	beq.w	800795a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007700:	4b48      	ldr	r3, [pc, #288]	@ (8007824 <HAL_RCC_OscConfig+0x76c>)
 8007702:	691b      	ldr	r3, [r3, #16]
 8007704:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007708:	2b18      	cmp	r3, #24
 800770a:	f000 80bd 	beq.w	8007888 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007712:	2b02      	cmp	r3, #2
 8007714:	f040 809e 	bne.w	8007854 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007718:	4b42      	ldr	r3, [pc, #264]	@ (8007824 <HAL_RCC_OscConfig+0x76c>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4a41      	ldr	r2, [pc, #260]	@ (8007824 <HAL_RCC_OscConfig+0x76c>)
 800771e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007722:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007724:	f7fa fea4 	bl	8002470 <HAL_GetTick>
 8007728:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800772a:	e008      	b.n	800773e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800772c:	f7fa fea0 	bl	8002470 <HAL_GetTick>
 8007730:	4602      	mov	r2, r0
 8007732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007734:	1ad3      	subs	r3, r2, r3
 8007736:	2b02      	cmp	r3, #2
 8007738:	d901      	bls.n	800773e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800773a:	2303      	movs	r3, #3
 800773c:	e10e      	b.n	800795c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800773e:	4b39      	ldr	r3, [pc, #228]	@ (8007824 <HAL_RCC_OscConfig+0x76c>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007746:	2b00      	cmp	r3, #0
 8007748:	d1f0      	bne.n	800772c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800774a:	4b36      	ldr	r3, [pc, #216]	@ (8007824 <HAL_RCC_OscConfig+0x76c>)
 800774c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800774e:	4b37      	ldr	r3, [pc, #220]	@ (800782c <HAL_RCC_OscConfig+0x774>)
 8007750:	4013      	ands	r3, r2
 8007752:	687a      	ldr	r2, [r7, #4]
 8007754:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8007756:	687a      	ldr	r2, [r7, #4]
 8007758:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800775a:	0112      	lsls	r2, r2, #4
 800775c:	430a      	orrs	r2, r1
 800775e:	4931      	ldr	r1, [pc, #196]	@ (8007824 <HAL_RCC_OscConfig+0x76c>)
 8007760:	4313      	orrs	r3, r2
 8007762:	628b      	str	r3, [r1, #40]	@ 0x28
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007768:	3b01      	subs	r3, #1
 800776a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007772:	3b01      	subs	r3, #1
 8007774:	025b      	lsls	r3, r3, #9
 8007776:	b29b      	uxth	r3, r3
 8007778:	431a      	orrs	r2, r3
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800777e:	3b01      	subs	r3, #1
 8007780:	041b      	lsls	r3, r3, #16
 8007782:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007786:	431a      	orrs	r2, r3
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800778c:	3b01      	subs	r3, #1
 800778e:	061b      	lsls	r3, r3, #24
 8007790:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007794:	4923      	ldr	r1, [pc, #140]	@ (8007824 <HAL_RCC_OscConfig+0x76c>)
 8007796:	4313      	orrs	r3, r2
 8007798:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800779a:	4b22      	ldr	r3, [pc, #136]	@ (8007824 <HAL_RCC_OscConfig+0x76c>)
 800779c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800779e:	4a21      	ldr	r2, [pc, #132]	@ (8007824 <HAL_RCC_OscConfig+0x76c>)
 80077a0:	f023 0301 	bic.w	r3, r3, #1
 80077a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80077a6:	4b1f      	ldr	r3, [pc, #124]	@ (8007824 <HAL_RCC_OscConfig+0x76c>)
 80077a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80077aa:	4b21      	ldr	r3, [pc, #132]	@ (8007830 <HAL_RCC_OscConfig+0x778>)
 80077ac:	4013      	ands	r3, r2
 80077ae:	687a      	ldr	r2, [r7, #4]
 80077b0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80077b2:	00d2      	lsls	r2, r2, #3
 80077b4:	491b      	ldr	r1, [pc, #108]	@ (8007824 <HAL_RCC_OscConfig+0x76c>)
 80077b6:	4313      	orrs	r3, r2
 80077b8:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80077ba:	4b1a      	ldr	r3, [pc, #104]	@ (8007824 <HAL_RCC_OscConfig+0x76c>)
 80077bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077be:	f023 020c 	bic.w	r2, r3, #12
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077c6:	4917      	ldr	r1, [pc, #92]	@ (8007824 <HAL_RCC_OscConfig+0x76c>)
 80077c8:	4313      	orrs	r3, r2
 80077ca:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80077cc:	4b15      	ldr	r3, [pc, #84]	@ (8007824 <HAL_RCC_OscConfig+0x76c>)
 80077ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077d0:	f023 0202 	bic.w	r2, r3, #2
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077d8:	4912      	ldr	r1, [pc, #72]	@ (8007824 <HAL_RCC_OscConfig+0x76c>)
 80077da:	4313      	orrs	r3, r2
 80077dc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80077de:	4b11      	ldr	r3, [pc, #68]	@ (8007824 <HAL_RCC_OscConfig+0x76c>)
 80077e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077e2:	4a10      	ldr	r2, [pc, #64]	@ (8007824 <HAL_RCC_OscConfig+0x76c>)
 80077e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80077e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077ea:	4b0e      	ldr	r3, [pc, #56]	@ (8007824 <HAL_RCC_OscConfig+0x76c>)
 80077ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077ee:	4a0d      	ldr	r2, [pc, #52]	@ (8007824 <HAL_RCC_OscConfig+0x76c>)
 80077f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80077f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80077f6:	4b0b      	ldr	r3, [pc, #44]	@ (8007824 <HAL_RCC_OscConfig+0x76c>)
 80077f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077fa:	4a0a      	ldr	r2, [pc, #40]	@ (8007824 <HAL_RCC_OscConfig+0x76c>)
 80077fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007800:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8007802:	4b08      	ldr	r3, [pc, #32]	@ (8007824 <HAL_RCC_OscConfig+0x76c>)
 8007804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007806:	4a07      	ldr	r2, [pc, #28]	@ (8007824 <HAL_RCC_OscConfig+0x76c>)
 8007808:	f043 0301 	orr.w	r3, r3, #1
 800780c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800780e:	4b05      	ldr	r3, [pc, #20]	@ (8007824 <HAL_RCC_OscConfig+0x76c>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4a04      	ldr	r2, [pc, #16]	@ (8007824 <HAL_RCC_OscConfig+0x76c>)
 8007814:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007818:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800781a:	f7fa fe29 	bl	8002470 <HAL_GetTick>
 800781e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007820:	e011      	b.n	8007846 <HAL_RCC_OscConfig+0x78e>
 8007822:	bf00      	nop
 8007824:	58024400 	.word	0x58024400
 8007828:	58024800 	.word	0x58024800
 800782c:	fffffc0c 	.word	0xfffffc0c
 8007830:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007834:	f7fa fe1c 	bl	8002470 <HAL_GetTick>
 8007838:	4602      	mov	r2, r0
 800783a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800783c:	1ad3      	subs	r3, r2, r3
 800783e:	2b02      	cmp	r3, #2
 8007840:	d901      	bls.n	8007846 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8007842:	2303      	movs	r3, #3
 8007844:	e08a      	b.n	800795c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007846:	4b47      	ldr	r3, [pc, #284]	@ (8007964 <HAL_RCC_OscConfig+0x8ac>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800784e:	2b00      	cmp	r3, #0
 8007850:	d0f0      	beq.n	8007834 <HAL_RCC_OscConfig+0x77c>
 8007852:	e082      	b.n	800795a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007854:	4b43      	ldr	r3, [pc, #268]	@ (8007964 <HAL_RCC_OscConfig+0x8ac>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	4a42      	ldr	r2, [pc, #264]	@ (8007964 <HAL_RCC_OscConfig+0x8ac>)
 800785a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800785e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007860:	f7fa fe06 	bl	8002470 <HAL_GetTick>
 8007864:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007866:	e008      	b.n	800787a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007868:	f7fa fe02 	bl	8002470 <HAL_GetTick>
 800786c:	4602      	mov	r2, r0
 800786e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007870:	1ad3      	subs	r3, r2, r3
 8007872:	2b02      	cmp	r3, #2
 8007874:	d901      	bls.n	800787a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8007876:	2303      	movs	r3, #3
 8007878:	e070      	b.n	800795c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800787a:	4b3a      	ldr	r3, [pc, #232]	@ (8007964 <HAL_RCC_OscConfig+0x8ac>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007882:	2b00      	cmp	r3, #0
 8007884:	d1f0      	bne.n	8007868 <HAL_RCC_OscConfig+0x7b0>
 8007886:	e068      	b.n	800795a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007888:	4b36      	ldr	r3, [pc, #216]	@ (8007964 <HAL_RCC_OscConfig+0x8ac>)
 800788a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800788c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800788e:	4b35      	ldr	r3, [pc, #212]	@ (8007964 <HAL_RCC_OscConfig+0x8ac>)
 8007890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007892:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007898:	2b01      	cmp	r3, #1
 800789a:	d031      	beq.n	8007900 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800789c:	693b      	ldr	r3, [r7, #16]
 800789e:	f003 0203 	and.w	r2, r3, #3
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80078a6:	429a      	cmp	r2, r3
 80078a8:	d12a      	bne.n	8007900 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	091b      	lsrs	r3, r3, #4
 80078ae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80078b6:	429a      	cmp	r2, r3
 80078b8:	d122      	bne.n	8007900 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078c4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80078c6:	429a      	cmp	r2, r3
 80078c8:	d11a      	bne.n	8007900 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	0a5b      	lsrs	r3, r3, #9
 80078ce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078d6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80078d8:	429a      	cmp	r2, r3
 80078da:	d111      	bne.n	8007900 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	0c1b      	lsrs	r3, r3, #16
 80078e0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078e8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80078ea:	429a      	cmp	r2, r3
 80078ec:	d108      	bne.n	8007900 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	0e1b      	lsrs	r3, r3, #24
 80078f2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078fa:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80078fc:	429a      	cmp	r2, r3
 80078fe:	d001      	beq.n	8007904 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8007900:	2301      	movs	r3, #1
 8007902:	e02b      	b.n	800795c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8007904:	4b17      	ldr	r3, [pc, #92]	@ (8007964 <HAL_RCC_OscConfig+0x8ac>)
 8007906:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007908:	08db      	lsrs	r3, r3, #3
 800790a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800790e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007914:	693a      	ldr	r2, [r7, #16]
 8007916:	429a      	cmp	r2, r3
 8007918:	d01f      	beq.n	800795a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800791a:	4b12      	ldr	r3, [pc, #72]	@ (8007964 <HAL_RCC_OscConfig+0x8ac>)
 800791c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800791e:	4a11      	ldr	r2, [pc, #68]	@ (8007964 <HAL_RCC_OscConfig+0x8ac>)
 8007920:	f023 0301 	bic.w	r3, r3, #1
 8007924:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007926:	f7fa fda3 	bl	8002470 <HAL_GetTick>
 800792a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800792c:	bf00      	nop
 800792e:	f7fa fd9f 	bl	8002470 <HAL_GetTick>
 8007932:	4602      	mov	r2, r0
 8007934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007936:	4293      	cmp	r3, r2
 8007938:	d0f9      	beq.n	800792e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800793a:	4b0a      	ldr	r3, [pc, #40]	@ (8007964 <HAL_RCC_OscConfig+0x8ac>)
 800793c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800793e:	4b0a      	ldr	r3, [pc, #40]	@ (8007968 <HAL_RCC_OscConfig+0x8b0>)
 8007940:	4013      	ands	r3, r2
 8007942:	687a      	ldr	r2, [r7, #4]
 8007944:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007946:	00d2      	lsls	r2, r2, #3
 8007948:	4906      	ldr	r1, [pc, #24]	@ (8007964 <HAL_RCC_OscConfig+0x8ac>)
 800794a:	4313      	orrs	r3, r2
 800794c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800794e:	4b05      	ldr	r3, [pc, #20]	@ (8007964 <HAL_RCC_OscConfig+0x8ac>)
 8007950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007952:	4a04      	ldr	r2, [pc, #16]	@ (8007964 <HAL_RCC_OscConfig+0x8ac>)
 8007954:	f043 0301 	orr.w	r3, r3, #1
 8007958:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800795a:	2300      	movs	r3, #0
}
 800795c:	4618      	mov	r0, r3
 800795e:	3730      	adds	r7, #48	@ 0x30
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}
 8007964:	58024400 	.word	0x58024400
 8007968:	ffff0007 	.word	0xffff0007

0800796c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b086      	sub	sp, #24
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
 8007974:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d101      	bne.n	8007980 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800797c:	2301      	movs	r3, #1
 800797e:	e19c      	b.n	8007cba <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007980:	4b8a      	ldr	r3, [pc, #552]	@ (8007bac <HAL_RCC_ClockConfig+0x240>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f003 030f 	and.w	r3, r3, #15
 8007988:	683a      	ldr	r2, [r7, #0]
 800798a:	429a      	cmp	r2, r3
 800798c:	d910      	bls.n	80079b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800798e:	4b87      	ldr	r3, [pc, #540]	@ (8007bac <HAL_RCC_ClockConfig+0x240>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f023 020f 	bic.w	r2, r3, #15
 8007996:	4985      	ldr	r1, [pc, #532]	@ (8007bac <HAL_RCC_ClockConfig+0x240>)
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	4313      	orrs	r3, r2
 800799c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800799e:	4b83      	ldr	r3, [pc, #524]	@ (8007bac <HAL_RCC_ClockConfig+0x240>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f003 030f 	and.w	r3, r3, #15
 80079a6:	683a      	ldr	r2, [r7, #0]
 80079a8:	429a      	cmp	r2, r3
 80079aa:	d001      	beq.n	80079b0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80079ac:	2301      	movs	r3, #1
 80079ae:	e184      	b.n	8007cba <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f003 0304 	and.w	r3, r3, #4
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d010      	beq.n	80079de <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	691a      	ldr	r2, [r3, #16]
 80079c0:	4b7b      	ldr	r3, [pc, #492]	@ (8007bb0 <HAL_RCC_ClockConfig+0x244>)
 80079c2:	699b      	ldr	r3, [r3, #24]
 80079c4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80079c8:	429a      	cmp	r2, r3
 80079ca:	d908      	bls.n	80079de <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80079cc:	4b78      	ldr	r3, [pc, #480]	@ (8007bb0 <HAL_RCC_ClockConfig+0x244>)
 80079ce:	699b      	ldr	r3, [r3, #24]
 80079d0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	691b      	ldr	r3, [r3, #16]
 80079d8:	4975      	ldr	r1, [pc, #468]	@ (8007bb0 <HAL_RCC_ClockConfig+0x244>)
 80079da:	4313      	orrs	r3, r2
 80079dc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f003 0308 	and.w	r3, r3, #8
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d010      	beq.n	8007a0c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	695a      	ldr	r2, [r3, #20]
 80079ee:	4b70      	ldr	r3, [pc, #448]	@ (8007bb0 <HAL_RCC_ClockConfig+0x244>)
 80079f0:	69db      	ldr	r3, [r3, #28]
 80079f2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80079f6:	429a      	cmp	r2, r3
 80079f8:	d908      	bls.n	8007a0c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80079fa:	4b6d      	ldr	r3, [pc, #436]	@ (8007bb0 <HAL_RCC_ClockConfig+0x244>)
 80079fc:	69db      	ldr	r3, [r3, #28]
 80079fe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	695b      	ldr	r3, [r3, #20]
 8007a06:	496a      	ldr	r1, [pc, #424]	@ (8007bb0 <HAL_RCC_ClockConfig+0x244>)
 8007a08:	4313      	orrs	r3, r2
 8007a0a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f003 0310 	and.w	r3, r3, #16
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d010      	beq.n	8007a3a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	699a      	ldr	r2, [r3, #24]
 8007a1c:	4b64      	ldr	r3, [pc, #400]	@ (8007bb0 <HAL_RCC_ClockConfig+0x244>)
 8007a1e:	69db      	ldr	r3, [r3, #28]
 8007a20:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007a24:	429a      	cmp	r2, r3
 8007a26:	d908      	bls.n	8007a3a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007a28:	4b61      	ldr	r3, [pc, #388]	@ (8007bb0 <HAL_RCC_ClockConfig+0x244>)
 8007a2a:	69db      	ldr	r3, [r3, #28]
 8007a2c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	699b      	ldr	r3, [r3, #24]
 8007a34:	495e      	ldr	r1, [pc, #376]	@ (8007bb0 <HAL_RCC_ClockConfig+0x244>)
 8007a36:	4313      	orrs	r3, r2
 8007a38:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f003 0320 	and.w	r3, r3, #32
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d010      	beq.n	8007a68 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	69da      	ldr	r2, [r3, #28]
 8007a4a:	4b59      	ldr	r3, [pc, #356]	@ (8007bb0 <HAL_RCC_ClockConfig+0x244>)
 8007a4c:	6a1b      	ldr	r3, [r3, #32]
 8007a4e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007a52:	429a      	cmp	r2, r3
 8007a54:	d908      	bls.n	8007a68 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007a56:	4b56      	ldr	r3, [pc, #344]	@ (8007bb0 <HAL_RCC_ClockConfig+0x244>)
 8007a58:	6a1b      	ldr	r3, [r3, #32]
 8007a5a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	69db      	ldr	r3, [r3, #28]
 8007a62:	4953      	ldr	r1, [pc, #332]	@ (8007bb0 <HAL_RCC_ClockConfig+0x244>)
 8007a64:	4313      	orrs	r3, r2
 8007a66:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f003 0302 	and.w	r3, r3, #2
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d010      	beq.n	8007a96 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	68da      	ldr	r2, [r3, #12]
 8007a78:	4b4d      	ldr	r3, [pc, #308]	@ (8007bb0 <HAL_RCC_ClockConfig+0x244>)
 8007a7a:	699b      	ldr	r3, [r3, #24]
 8007a7c:	f003 030f 	and.w	r3, r3, #15
 8007a80:	429a      	cmp	r2, r3
 8007a82:	d908      	bls.n	8007a96 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007a84:	4b4a      	ldr	r3, [pc, #296]	@ (8007bb0 <HAL_RCC_ClockConfig+0x244>)
 8007a86:	699b      	ldr	r3, [r3, #24]
 8007a88:	f023 020f 	bic.w	r2, r3, #15
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	68db      	ldr	r3, [r3, #12]
 8007a90:	4947      	ldr	r1, [pc, #284]	@ (8007bb0 <HAL_RCC_ClockConfig+0x244>)
 8007a92:	4313      	orrs	r3, r2
 8007a94:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f003 0301 	and.w	r3, r3, #1
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d055      	beq.n	8007b4e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007aa2:	4b43      	ldr	r3, [pc, #268]	@ (8007bb0 <HAL_RCC_ClockConfig+0x244>)
 8007aa4:	699b      	ldr	r3, [r3, #24]
 8007aa6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	689b      	ldr	r3, [r3, #8]
 8007aae:	4940      	ldr	r1, [pc, #256]	@ (8007bb0 <HAL_RCC_ClockConfig+0x244>)
 8007ab0:	4313      	orrs	r3, r2
 8007ab2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	685b      	ldr	r3, [r3, #4]
 8007ab8:	2b02      	cmp	r3, #2
 8007aba:	d107      	bne.n	8007acc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007abc:	4b3c      	ldr	r3, [pc, #240]	@ (8007bb0 <HAL_RCC_ClockConfig+0x244>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d121      	bne.n	8007b0c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007ac8:	2301      	movs	r3, #1
 8007aca:	e0f6      	b.n	8007cba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	685b      	ldr	r3, [r3, #4]
 8007ad0:	2b03      	cmp	r3, #3
 8007ad2:	d107      	bne.n	8007ae4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007ad4:	4b36      	ldr	r3, [pc, #216]	@ (8007bb0 <HAL_RCC_ClockConfig+0x244>)
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d115      	bne.n	8007b0c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007ae0:	2301      	movs	r3, #1
 8007ae2:	e0ea      	b.n	8007cba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	685b      	ldr	r3, [r3, #4]
 8007ae8:	2b01      	cmp	r3, #1
 8007aea:	d107      	bne.n	8007afc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007aec:	4b30      	ldr	r3, [pc, #192]	@ (8007bb0 <HAL_RCC_ClockConfig+0x244>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d109      	bne.n	8007b0c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007af8:	2301      	movs	r3, #1
 8007afa:	e0de      	b.n	8007cba <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007afc:	4b2c      	ldr	r3, [pc, #176]	@ (8007bb0 <HAL_RCC_ClockConfig+0x244>)
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f003 0304 	and.w	r3, r3, #4
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d101      	bne.n	8007b0c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007b08:	2301      	movs	r3, #1
 8007b0a:	e0d6      	b.n	8007cba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007b0c:	4b28      	ldr	r3, [pc, #160]	@ (8007bb0 <HAL_RCC_ClockConfig+0x244>)
 8007b0e:	691b      	ldr	r3, [r3, #16]
 8007b10:	f023 0207 	bic.w	r2, r3, #7
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	685b      	ldr	r3, [r3, #4]
 8007b18:	4925      	ldr	r1, [pc, #148]	@ (8007bb0 <HAL_RCC_ClockConfig+0x244>)
 8007b1a:	4313      	orrs	r3, r2
 8007b1c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b1e:	f7fa fca7 	bl	8002470 <HAL_GetTick>
 8007b22:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b24:	e00a      	b.n	8007b3c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007b26:	f7fa fca3 	bl	8002470 <HAL_GetTick>
 8007b2a:	4602      	mov	r2, r0
 8007b2c:	697b      	ldr	r3, [r7, #20]
 8007b2e:	1ad3      	subs	r3, r2, r3
 8007b30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d901      	bls.n	8007b3c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007b38:	2303      	movs	r3, #3
 8007b3a:	e0be      	b.n	8007cba <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b3c:	4b1c      	ldr	r3, [pc, #112]	@ (8007bb0 <HAL_RCC_ClockConfig+0x244>)
 8007b3e:	691b      	ldr	r3, [r3, #16]
 8007b40:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	685b      	ldr	r3, [r3, #4]
 8007b48:	00db      	lsls	r3, r3, #3
 8007b4a:	429a      	cmp	r2, r3
 8007b4c:	d1eb      	bne.n	8007b26 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f003 0302 	and.w	r3, r3, #2
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d010      	beq.n	8007b7c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	68da      	ldr	r2, [r3, #12]
 8007b5e:	4b14      	ldr	r3, [pc, #80]	@ (8007bb0 <HAL_RCC_ClockConfig+0x244>)
 8007b60:	699b      	ldr	r3, [r3, #24]
 8007b62:	f003 030f 	and.w	r3, r3, #15
 8007b66:	429a      	cmp	r2, r3
 8007b68:	d208      	bcs.n	8007b7c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007b6a:	4b11      	ldr	r3, [pc, #68]	@ (8007bb0 <HAL_RCC_ClockConfig+0x244>)
 8007b6c:	699b      	ldr	r3, [r3, #24]
 8007b6e:	f023 020f 	bic.w	r2, r3, #15
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	68db      	ldr	r3, [r3, #12]
 8007b76:	490e      	ldr	r1, [pc, #56]	@ (8007bb0 <HAL_RCC_ClockConfig+0x244>)
 8007b78:	4313      	orrs	r3, r2
 8007b7a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007b7c:	4b0b      	ldr	r3, [pc, #44]	@ (8007bac <HAL_RCC_ClockConfig+0x240>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f003 030f 	and.w	r3, r3, #15
 8007b84:	683a      	ldr	r2, [r7, #0]
 8007b86:	429a      	cmp	r2, r3
 8007b88:	d214      	bcs.n	8007bb4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b8a:	4b08      	ldr	r3, [pc, #32]	@ (8007bac <HAL_RCC_ClockConfig+0x240>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f023 020f 	bic.w	r2, r3, #15
 8007b92:	4906      	ldr	r1, [pc, #24]	@ (8007bac <HAL_RCC_ClockConfig+0x240>)
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	4313      	orrs	r3, r2
 8007b98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b9a:	4b04      	ldr	r3, [pc, #16]	@ (8007bac <HAL_RCC_ClockConfig+0x240>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f003 030f 	and.w	r3, r3, #15
 8007ba2:	683a      	ldr	r2, [r7, #0]
 8007ba4:	429a      	cmp	r2, r3
 8007ba6:	d005      	beq.n	8007bb4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007ba8:	2301      	movs	r3, #1
 8007baa:	e086      	b.n	8007cba <HAL_RCC_ClockConfig+0x34e>
 8007bac:	52002000 	.word	0x52002000
 8007bb0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f003 0304 	and.w	r3, r3, #4
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d010      	beq.n	8007be2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	691a      	ldr	r2, [r3, #16]
 8007bc4:	4b3f      	ldr	r3, [pc, #252]	@ (8007cc4 <HAL_RCC_ClockConfig+0x358>)
 8007bc6:	699b      	ldr	r3, [r3, #24]
 8007bc8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007bcc:	429a      	cmp	r2, r3
 8007bce:	d208      	bcs.n	8007be2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007bd0:	4b3c      	ldr	r3, [pc, #240]	@ (8007cc4 <HAL_RCC_ClockConfig+0x358>)
 8007bd2:	699b      	ldr	r3, [r3, #24]
 8007bd4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	691b      	ldr	r3, [r3, #16]
 8007bdc:	4939      	ldr	r1, [pc, #228]	@ (8007cc4 <HAL_RCC_ClockConfig+0x358>)
 8007bde:	4313      	orrs	r3, r2
 8007be0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f003 0308 	and.w	r3, r3, #8
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d010      	beq.n	8007c10 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	695a      	ldr	r2, [r3, #20]
 8007bf2:	4b34      	ldr	r3, [pc, #208]	@ (8007cc4 <HAL_RCC_ClockConfig+0x358>)
 8007bf4:	69db      	ldr	r3, [r3, #28]
 8007bf6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007bfa:	429a      	cmp	r2, r3
 8007bfc:	d208      	bcs.n	8007c10 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007bfe:	4b31      	ldr	r3, [pc, #196]	@ (8007cc4 <HAL_RCC_ClockConfig+0x358>)
 8007c00:	69db      	ldr	r3, [r3, #28]
 8007c02:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	695b      	ldr	r3, [r3, #20]
 8007c0a:	492e      	ldr	r1, [pc, #184]	@ (8007cc4 <HAL_RCC_ClockConfig+0x358>)
 8007c0c:	4313      	orrs	r3, r2
 8007c0e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f003 0310 	and.w	r3, r3, #16
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d010      	beq.n	8007c3e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	699a      	ldr	r2, [r3, #24]
 8007c20:	4b28      	ldr	r3, [pc, #160]	@ (8007cc4 <HAL_RCC_ClockConfig+0x358>)
 8007c22:	69db      	ldr	r3, [r3, #28]
 8007c24:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007c28:	429a      	cmp	r2, r3
 8007c2a:	d208      	bcs.n	8007c3e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007c2c:	4b25      	ldr	r3, [pc, #148]	@ (8007cc4 <HAL_RCC_ClockConfig+0x358>)
 8007c2e:	69db      	ldr	r3, [r3, #28]
 8007c30:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	699b      	ldr	r3, [r3, #24]
 8007c38:	4922      	ldr	r1, [pc, #136]	@ (8007cc4 <HAL_RCC_ClockConfig+0x358>)
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f003 0320 	and.w	r3, r3, #32
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d010      	beq.n	8007c6c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	69da      	ldr	r2, [r3, #28]
 8007c4e:	4b1d      	ldr	r3, [pc, #116]	@ (8007cc4 <HAL_RCC_ClockConfig+0x358>)
 8007c50:	6a1b      	ldr	r3, [r3, #32]
 8007c52:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007c56:	429a      	cmp	r2, r3
 8007c58:	d208      	bcs.n	8007c6c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007c5a:	4b1a      	ldr	r3, [pc, #104]	@ (8007cc4 <HAL_RCC_ClockConfig+0x358>)
 8007c5c:	6a1b      	ldr	r3, [r3, #32]
 8007c5e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	69db      	ldr	r3, [r3, #28]
 8007c66:	4917      	ldr	r1, [pc, #92]	@ (8007cc4 <HAL_RCC_ClockConfig+0x358>)
 8007c68:	4313      	orrs	r3, r2
 8007c6a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007c6c:	f000 f834 	bl	8007cd8 <HAL_RCC_GetSysClockFreq>
 8007c70:	4602      	mov	r2, r0
 8007c72:	4b14      	ldr	r3, [pc, #80]	@ (8007cc4 <HAL_RCC_ClockConfig+0x358>)
 8007c74:	699b      	ldr	r3, [r3, #24]
 8007c76:	0a1b      	lsrs	r3, r3, #8
 8007c78:	f003 030f 	and.w	r3, r3, #15
 8007c7c:	4912      	ldr	r1, [pc, #72]	@ (8007cc8 <HAL_RCC_ClockConfig+0x35c>)
 8007c7e:	5ccb      	ldrb	r3, [r1, r3]
 8007c80:	f003 031f 	and.w	r3, r3, #31
 8007c84:	fa22 f303 	lsr.w	r3, r2, r3
 8007c88:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007c8a:	4b0e      	ldr	r3, [pc, #56]	@ (8007cc4 <HAL_RCC_ClockConfig+0x358>)
 8007c8c:	699b      	ldr	r3, [r3, #24]
 8007c8e:	f003 030f 	and.w	r3, r3, #15
 8007c92:	4a0d      	ldr	r2, [pc, #52]	@ (8007cc8 <HAL_RCC_ClockConfig+0x35c>)
 8007c94:	5cd3      	ldrb	r3, [r2, r3]
 8007c96:	f003 031f 	and.w	r3, r3, #31
 8007c9a:	693a      	ldr	r2, [r7, #16]
 8007c9c:	fa22 f303 	lsr.w	r3, r2, r3
 8007ca0:	4a0a      	ldr	r2, [pc, #40]	@ (8007ccc <HAL_RCC_ClockConfig+0x360>)
 8007ca2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007ca4:	4a0a      	ldr	r2, [pc, #40]	@ (8007cd0 <HAL_RCC_ClockConfig+0x364>)
 8007ca6:	693b      	ldr	r3, [r7, #16]
 8007ca8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8007caa:	4b0a      	ldr	r3, [pc, #40]	@ (8007cd4 <HAL_RCC_ClockConfig+0x368>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	4618      	mov	r0, r3
 8007cb0:	f7fa fb94 	bl	80023dc <HAL_InitTick>
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cba:	4618      	mov	r0, r3
 8007cbc:	3718      	adds	r7, #24
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}
 8007cc2:	bf00      	nop
 8007cc4:	58024400 	.word	0x58024400
 8007cc8:	08010648 	.word	0x08010648
 8007ccc:	24000004 	.word	0x24000004
 8007cd0:	24000000 	.word	0x24000000
 8007cd4:	24000008 	.word	0x24000008

08007cd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b089      	sub	sp, #36	@ 0x24
 8007cdc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007cde:	4bb3      	ldr	r3, [pc, #716]	@ (8007fac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ce0:	691b      	ldr	r3, [r3, #16]
 8007ce2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007ce6:	2b18      	cmp	r3, #24
 8007ce8:	f200 8155 	bhi.w	8007f96 <HAL_RCC_GetSysClockFreq+0x2be>
 8007cec:	a201      	add	r2, pc, #4	@ (adr r2, 8007cf4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8007cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cf2:	bf00      	nop
 8007cf4:	08007d59 	.word	0x08007d59
 8007cf8:	08007f97 	.word	0x08007f97
 8007cfc:	08007f97 	.word	0x08007f97
 8007d00:	08007f97 	.word	0x08007f97
 8007d04:	08007f97 	.word	0x08007f97
 8007d08:	08007f97 	.word	0x08007f97
 8007d0c:	08007f97 	.word	0x08007f97
 8007d10:	08007f97 	.word	0x08007f97
 8007d14:	08007d7f 	.word	0x08007d7f
 8007d18:	08007f97 	.word	0x08007f97
 8007d1c:	08007f97 	.word	0x08007f97
 8007d20:	08007f97 	.word	0x08007f97
 8007d24:	08007f97 	.word	0x08007f97
 8007d28:	08007f97 	.word	0x08007f97
 8007d2c:	08007f97 	.word	0x08007f97
 8007d30:	08007f97 	.word	0x08007f97
 8007d34:	08007d85 	.word	0x08007d85
 8007d38:	08007f97 	.word	0x08007f97
 8007d3c:	08007f97 	.word	0x08007f97
 8007d40:	08007f97 	.word	0x08007f97
 8007d44:	08007f97 	.word	0x08007f97
 8007d48:	08007f97 	.word	0x08007f97
 8007d4c:	08007f97 	.word	0x08007f97
 8007d50:	08007f97 	.word	0x08007f97
 8007d54:	08007d8b 	.word	0x08007d8b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007d58:	4b94      	ldr	r3, [pc, #592]	@ (8007fac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f003 0320 	and.w	r3, r3, #32
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d009      	beq.n	8007d78 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007d64:	4b91      	ldr	r3, [pc, #580]	@ (8007fac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	08db      	lsrs	r3, r3, #3
 8007d6a:	f003 0303 	and.w	r3, r3, #3
 8007d6e:	4a90      	ldr	r2, [pc, #576]	@ (8007fb0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007d70:	fa22 f303 	lsr.w	r3, r2, r3
 8007d74:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007d76:	e111      	b.n	8007f9c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007d78:	4b8d      	ldr	r3, [pc, #564]	@ (8007fb0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007d7a:	61bb      	str	r3, [r7, #24]
      break;
 8007d7c:	e10e      	b.n	8007f9c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8007d7e:	4b8d      	ldr	r3, [pc, #564]	@ (8007fb4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007d80:	61bb      	str	r3, [r7, #24]
      break;
 8007d82:	e10b      	b.n	8007f9c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007d84:	4b8c      	ldr	r3, [pc, #560]	@ (8007fb8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007d86:	61bb      	str	r3, [r7, #24]
      break;
 8007d88:	e108      	b.n	8007f9c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007d8a:	4b88      	ldr	r3, [pc, #544]	@ (8007fac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d8e:	f003 0303 	and.w	r3, r3, #3
 8007d92:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007d94:	4b85      	ldr	r3, [pc, #532]	@ (8007fac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d98:	091b      	lsrs	r3, r3, #4
 8007d9a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007d9e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007da0:	4b82      	ldr	r3, [pc, #520]	@ (8007fac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007da4:	f003 0301 	and.w	r3, r3, #1
 8007da8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007daa:	4b80      	ldr	r3, [pc, #512]	@ (8007fac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007dac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007dae:	08db      	lsrs	r3, r3, #3
 8007db0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007db4:	68fa      	ldr	r2, [r7, #12]
 8007db6:	fb02 f303 	mul.w	r3, r2, r3
 8007dba:	ee07 3a90 	vmov	s15, r3
 8007dbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dc2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8007dc6:	693b      	ldr	r3, [r7, #16]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	f000 80e1 	beq.w	8007f90 <HAL_RCC_GetSysClockFreq+0x2b8>
 8007dce:	697b      	ldr	r3, [r7, #20]
 8007dd0:	2b02      	cmp	r3, #2
 8007dd2:	f000 8083 	beq.w	8007edc <HAL_RCC_GetSysClockFreq+0x204>
 8007dd6:	697b      	ldr	r3, [r7, #20]
 8007dd8:	2b02      	cmp	r3, #2
 8007dda:	f200 80a1 	bhi.w	8007f20 <HAL_RCC_GetSysClockFreq+0x248>
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d003      	beq.n	8007dec <HAL_RCC_GetSysClockFreq+0x114>
 8007de4:	697b      	ldr	r3, [r7, #20]
 8007de6:	2b01      	cmp	r3, #1
 8007de8:	d056      	beq.n	8007e98 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007dea:	e099      	b.n	8007f20 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007dec:	4b6f      	ldr	r3, [pc, #444]	@ (8007fac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f003 0320 	and.w	r3, r3, #32
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d02d      	beq.n	8007e54 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007df8:	4b6c      	ldr	r3, [pc, #432]	@ (8007fac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	08db      	lsrs	r3, r3, #3
 8007dfe:	f003 0303 	and.w	r3, r3, #3
 8007e02:	4a6b      	ldr	r2, [pc, #428]	@ (8007fb0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007e04:	fa22 f303 	lsr.w	r3, r2, r3
 8007e08:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	ee07 3a90 	vmov	s15, r3
 8007e10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e14:	693b      	ldr	r3, [r7, #16]
 8007e16:	ee07 3a90 	vmov	s15, r3
 8007e1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e22:	4b62      	ldr	r3, [pc, #392]	@ (8007fac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e2a:	ee07 3a90 	vmov	s15, r3
 8007e2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e32:	ed97 6a02 	vldr	s12, [r7, #8]
 8007e36:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8007fbc <HAL_RCC_GetSysClockFreq+0x2e4>
 8007e3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007e46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e4e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8007e52:	e087      	b.n	8007f64 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007e54:	693b      	ldr	r3, [r7, #16]
 8007e56:	ee07 3a90 	vmov	s15, r3
 8007e5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e5e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8007fc0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007e62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e66:	4b51      	ldr	r3, [pc, #324]	@ (8007fac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e6e:	ee07 3a90 	vmov	s15, r3
 8007e72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e76:	ed97 6a02 	vldr	s12, [r7, #8]
 8007e7a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8007fbc <HAL_RCC_GetSysClockFreq+0x2e4>
 8007e7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007e8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e92:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007e96:	e065      	b.n	8007f64 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007e98:	693b      	ldr	r3, [r7, #16]
 8007e9a:	ee07 3a90 	vmov	s15, r3
 8007e9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ea2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8007fc4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007ea6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007eaa:	4b40      	ldr	r3, [pc, #256]	@ (8007fac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007eae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007eb2:	ee07 3a90 	vmov	s15, r3
 8007eb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007eba:	ed97 6a02 	vldr	s12, [r7, #8]
 8007ebe:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8007fbc <HAL_RCC_GetSysClockFreq+0x2e4>
 8007ec2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ec6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007eca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007ece:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ed6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007eda:	e043      	b.n	8007f64 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007edc:	693b      	ldr	r3, [r7, #16]
 8007ede:	ee07 3a90 	vmov	s15, r3
 8007ee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ee6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8007fc8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007eea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007eee:	4b2f      	ldr	r3, [pc, #188]	@ (8007fac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ef2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ef6:	ee07 3a90 	vmov	s15, r3
 8007efa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007efe:	ed97 6a02 	vldr	s12, [r7, #8]
 8007f02:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8007fbc <HAL_RCC_GetSysClockFreq+0x2e4>
 8007f06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f1a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007f1e:	e021      	b.n	8007f64 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007f20:	693b      	ldr	r3, [r7, #16]
 8007f22:	ee07 3a90 	vmov	s15, r3
 8007f26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f2a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8007fc4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007f2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f32:	4b1e      	ldr	r3, [pc, #120]	@ (8007fac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f3a:	ee07 3a90 	vmov	s15, r3
 8007f3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f42:	ed97 6a02 	vldr	s12, [r7, #8]
 8007f46:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8007fbc <HAL_RCC_GetSysClockFreq+0x2e4>
 8007f4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f5e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007f62:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007f64:	4b11      	ldr	r3, [pc, #68]	@ (8007fac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f68:	0a5b      	lsrs	r3, r3, #9
 8007f6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007f6e:	3301      	adds	r3, #1
 8007f70:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	ee07 3a90 	vmov	s15, r3
 8007f78:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007f7c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f88:	ee17 3a90 	vmov	r3, s15
 8007f8c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8007f8e:	e005      	b.n	8007f9c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007f90:	2300      	movs	r3, #0
 8007f92:	61bb      	str	r3, [r7, #24]
      break;
 8007f94:	e002      	b.n	8007f9c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007f96:	4b07      	ldr	r3, [pc, #28]	@ (8007fb4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007f98:	61bb      	str	r3, [r7, #24]
      break;
 8007f9a:	bf00      	nop
  }

  return sysclockfreq;
 8007f9c:	69bb      	ldr	r3, [r7, #24]
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	3724      	adds	r7, #36	@ 0x24
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa8:	4770      	bx	lr
 8007faa:	bf00      	nop
 8007fac:	58024400 	.word	0x58024400
 8007fb0:	03d09000 	.word	0x03d09000
 8007fb4:	003d0900 	.word	0x003d0900
 8007fb8:	007a1200 	.word	0x007a1200
 8007fbc:	46000000 	.word	0x46000000
 8007fc0:	4c742400 	.word	0x4c742400
 8007fc4:	4a742400 	.word	0x4a742400
 8007fc8:	4af42400 	.word	0x4af42400

08007fcc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b082      	sub	sp, #8
 8007fd0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007fd2:	f7ff fe81 	bl	8007cd8 <HAL_RCC_GetSysClockFreq>
 8007fd6:	4602      	mov	r2, r0
 8007fd8:	4b10      	ldr	r3, [pc, #64]	@ (800801c <HAL_RCC_GetHCLKFreq+0x50>)
 8007fda:	699b      	ldr	r3, [r3, #24]
 8007fdc:	0a1b      	lsrs	r3, r3, #8
 8007fde:	f003 030f 	and.w	r3, r3, #15
 8007fe2:	490f      	ldr	r1, [pc, #60]	@ (8008020 <HAL_RCC_GetHCLKFreq+0x54>)
 8007fe4:	5ccb      	ldrb	r3, [r1, r3]
 8007fe6:	f003 031f 	and.w	r3, r3, #31
 8007fea:	fa22 f303 	lsr.w	r3, r2, r3
 8007fee:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007ff0:	4b0a      	ldr	r3, [pc, #40]	@ (800801c <HAL_RCC_GetHCLKFreq+0x50>)
 8007ff2:	699b      	ldr	r3, [r3, #24]
 8007ff4:	f003 030f 	and.w	r3, r3, #15
 8007ff8:	4a09      	ldr	r2, [pc, #36]	@ (8008020 <HAL_RCC_GetHCLKFreq+0x54>)
 8007ffa:	5cd3      	ldrb	r3, [r2, r3]
 8007ffc:	f003 031f 	and.w	r3, r3, #31
 8008000:	687a      	ldr	r2, [r7, #4]
 8008002:	fa22 f303 	lsr.w	r3, r2, r3
 8008006:	4a07      	ldr	r2, [pc, #28]	@ (8008024 <HAL_RCC_GetHCLKFreq+0x58>)
 8008008:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800800a:	4a07      	ldr	r2, [pc, #28]	@ (8008028 <HAL_RCC_GetHCLKFreq+0x5c>)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008010:	4b04      	ldr	r3, [pc, #16]	@ (8008024 <HAL_RCC_GetHCLKFreq+0x58>)
 8008012:	681b      	ldr	r3, [r3, #0]
}
 8008014:	4618      	mov	r0, r3
 8008016:	3708      	adds	r7, #8
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}
 800801c:	58024400 	.word	0x58024400
 8008020:	08010648 	.word	0x08010648
 8008024:	24000004 	.word	0x24000004
 8008028:	24000000 	.word	0x24000000

0800802c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008030:	f7ff ffcc 	bl	8007fcc <HAL_RCC_GetHCLKFreq>
 8008034:	4602      	mov	r2, r0
 8008036:	4b06      	ldr	r3, [pc, #24]	@ (8008050 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008038:	69db      	ldr	r3, [r3, #28]
 800803a:	091b      	lsrs	r3, r3, #4
 800803c:	f003 0307 	and.w	r3, r3, #7
 8008040:	4904      	ldr	r1, [pc, #16]	@ (8008054 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008042:	5ccb      	ldrb	r3, [r1, r3]
 8008044:	f003 031f 	and.w	r3, r3, #31
 8008048:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800804c:	4618      	mov	r0, r3
 800804e:	bd80      	pop	{r7, pc}
 8008050:	58024400 	.word	0x58024400
 8008054:	08010648 	.word	0x08010648

08008058 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800805c:	f7ff ffb6 	bl	8007fcc <HAL_RCC_GetHCLKFreq>
 8008060:	4602      	mov	r2, r0
 8008062:	4b06      	ldr	r3, [pc, #24]	@ (800807c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008064:	69db      	ldr	r3, [r3, #28]
 8008066:	0a1b      	lsrs	r3, r3, #8
 8008068:	f003 0307 	and.w	r3, r3, #7
 800806c:	4904      	ldr	r1, [pc, #16]	@ (8008080 <HAL_RCC_GetPCLK2Freq+0x28>)
 800806e:	5ccb      	ldrb	r3, [r1, r3]
 8008070:	f003 031f 	and.w	r3, r3, #31
 8008074:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008078:	4618      	mov	r0, r3
 800807a:	bd80      	pop	{r7, pc}
 800807c:	58024400 	.word	0x58024400
 8008080:	08010648 	.word	0x08010648

08008084 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008084:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008088:	b0ca      	sub	sp, #296	@ 0x128
 800808a:	af00      	add	r7, sp, #0
 800808c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008090:	2300      	movs	r3, #0
 8008092:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008096:	2300      	movs	r3, #0
 8008098:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800809c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080a4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80080a8:	2500      	movs	r5, #0
 80080aa:	ea54 0305 	orrs.w	r3, r4, r5
 80080ae:	d049      	beq.n	8008144 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80080b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80080b6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80080ba:	d02f      	beq.n	800811c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80080bc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80080c0:	d828      	bhi.n	8008114 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80080c2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80080c6:	d01a      	beq.n	80080fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80080c8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80080cc:	d822      	bhi.n	8008114 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d003      	beq.n	80080da <HAL_RCCEx_PeriphCLKConfig+0x56>
 80080d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80080d6:	d007      	beq.n	80080e8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80080d8:	e01c      	b.n	8008114 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080da:	4bb8      	ldr	r3, [pc, #736]	@ (80083bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80080dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080de:	4ab7      	ldr	r2, [pc, #732]	@ (80083bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80080e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80080e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80080e6:	e01a      	b.n	800811e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80080e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080ec:	3308      	adds	r3, #8
 80080ee:	2102      	movs	r1, #2
 80080f0:	4618      	mov	r0, r3
 80080f2:	f002 fb61 	bl	800a7b8 <RCCEx_PLL2_Config>
 80080f6:	4603      	mov	r3, r0
 80080f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80080fc:	e00f      	b.n	800811e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80080fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008102:	3328      	adds	r3, #40	@ 0x28
 8008104:	2102      	movs	r1, #2
 8008106:	4618      	mov	r0, r3
 8008108:	f002 fc08 	bl	800a91c <RCCEx_PLL3_Config>
 800810c:	4603      	mov	r3, r0
 800810e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008112:	e004      	b.n	800811e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008114:	2301      	movs	r3, #1
 8008116:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800811a:	e000      	b.n	800811e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800811c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800811e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008122:	2b00      	cmp	r3, #0
 8008124:	d10a      	bne.n	800813c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008126:	4ba5      	ldr	r3, [pc, #660]	@ (80083bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008128:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800812a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800812e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008132:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008134:	4aa1      	ldr	r2, [pc, #644]	@ (80083bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008136:	430b      	orrs	r3, r1
 8008138:	6513      	str	r3, [r2, #80]	@ 0x50
 800813a:	e003      	b.n	8008144 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800813c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008140:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008144:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800814c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8008150:	f04f 0900 	mov.w	r9, #0
 8008154:	ea58 0309 	orrs.w	r3, r8, r9
 8008158:	d047      	beq.n	80081ea <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800815a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800815e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008160:	2b04      	cmp	r3, #4
 8008162:	d82a      	bhi.n	80081ba <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008164:	a201      	add	r2, pc, #4	@ (adr r2, 800816c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800816a:	bf00      	nop
 800816c:	08008181 	.word	0x08008181
 8008170:	0800818f 	.word	0x0800818f
 8008174:	080081a5 	.word	0x080081a5
 8008178:	080081c3 	.word	0x080081c3
 800817c:	080081c3 	.word	0x080081c3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008180:	4b8e      	ldr	r3, [pc, #568]	@ (80083bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008184:	4a8d      	ldr	r2, [pc, #564]	@ (80083bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008186:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800818a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800818c:	e01a      	b.n	80081c4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800818e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008192:	3308      	adds	r3, #8
 8008194:	2100      	movs	r1, #0
 8008196:	4618      	mov	r0, r3
 8008198:	f002 fb0e 	bl	800a7b8 <RCCEx_PLL2_Config>
 800819c:	4603      	mov	r3, r0
 800819e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80081a2:	e00f      	b.n	80081c4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80081a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081a8:	3328      	adds	r3, #40	@ 0x28
 80081aa:	2100      	movs	r1, #0
 80081ac:	4618      	mov	r0, r3
 80081ae:	f002 fbb5 	bl	800a91c <RCCEx_PLL3_Config>
 80081b2:	4603      	mov	r3, r0
 80081b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80081b8:	e004      	b.n	80081c4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80081ba:	2301      	movs	r3, #1
 80081bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80081c0:	e000      	b.n	80081c4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80081c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80081c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d10a      	bne.n	80081e2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80081cc:	4b7b      	ldr	r3, [pc, #492]	@ (80083bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80081ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80081d0:	f023 0107 	bic.w	r1, r3, #7
 80081d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80081da:	4a78      	ldr	r2, [pc, #480]	@ (80083bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80081dc:	430b      	orrs	r3, r1
 80081de:	6513      	str	r3, [r2, #80]	@ 0x50
 80081e0:	e003      	b.n	80081ea <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80081ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081f2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80081f6:	f04f 0b00 	mov.w	fp, #0
 80081fa:	ea5a 030b 	orrs.w	r3, sl, fp
 80081fe:	d04c      	beq.n	800829a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8008200:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008204:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008206:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800820a:	d030      	beq.n	800826e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800820c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008210:	d829      	bhi.n	8008266 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008212:	2bc0      	cmp	r3, #192	@ 0xc0
 8008214:	d02d      	beq.n	8008272 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8008216:	2bc0      	cmp	r3, #192	@ 0xc0
 8008218:	d825      	bhi.n	8008266 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800821a:	2b80      	cmp	r3, #128	@ 0x80
 800821c:	d018      	beq.n	8008250 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800821e:	2b80      	cmp	r3, #128	@ 0x80
 8008220:	d821      	bhi.n	8008266 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008222:	2b00      	cmp	r3, #0
 8008224:	d002      	beq.n	800822c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8008226:	2b40      	cmp	r3, #64	@ 0x40
 8008228:	d007      	beq.n	800823a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800822a:	e01c      	b.n	8008266 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800822c:	4b63      	ldr	r3, [pc, #396]	@ (80083bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800822e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008230:	4a62      	ldr	r2, [pc, #392]	@ (80083bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008232:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008236:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008238:	e01c      	b.n	8008274 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800823a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800823e:	3308      	adds	r3, #8
 8008240:	2100      	movs	r1, #0
 8008242:	4618      	mov	r0, r3
 8008244:	f002 fab8 	bl	800a7b8 <RCCEx_PLL2_Config>
 8008248:	4603      	mov	r3, r0
 800824a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800824e:	e011      	b.n	8008274 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008250:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008254:	3328      	adds	r3, #40	@ 0x28
 8008256:	2100      	movs	r1, #0
 8008258:	4618      	mov	r0, r3
 800825a:	f002 fb5f 	bl	800a91c <RCCEx_PLL3_Config>
 800825e:	4603      	mov	r3, r0
 8008260:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008264:	e006      	b.n	8008274 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008266:	2301      	movs	r3, #1
 8008268:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800826c:	e002      	b.n	8008274 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800826e:	bf00      	nop
 8008270:	e000      	b.n	8008274 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008272:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008274:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008278:	2b00      	cmp	r3, #0
 800827a:	d10a      	bne.n	8008292 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800827c:	4b4f      	ldr	r3, [pc, #316]	@ (80083bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800827e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008280:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8008284:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008288:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800828a:	4a4c      	ldr	r2, [pc, #304]	@ (80083bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800828c:	430b      	orrs	r3, r1
 800828e:	6513      	str	r3, [r2, #80]	@ 0x50
 8008290:	e003      	b.n	800829a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008292:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008296:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800829a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800829e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082a2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80082a6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80082aa:	2300      	movs	r3, #0
 80082ac:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80082b0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80082b4:	460b      	mov	r3, r1
 80082b6:	4313      	orrs	r3, r2
 80082b8:	d053      	beq.n	8008362 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80082ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082be:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80082c2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80082c6:	d035      	beq.n	8008334 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80082c8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80082cc:	d82e      	bhi.n	800832c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80082ce:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80082d2:	d031      	beq.n	8008338 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80082d4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80082d8:	d828      	bhi.n	800832c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80082da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80082de:	d01a      	beq.n	8008316 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80082e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80082e4:	d822      	bhi.n	800832c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d003      	beq.n	80082f2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80082ea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80082ee:	d007      	beq.n	8008300 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80082f0:	e01c      	b.n	800832c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80082f2:	4b32      	ldr	r3, [pc, #200]	@ (80083bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80082f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082f6:	4a31      	ldr	r2, [pc, #196]	@ (80083bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80082f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80082fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80082fe:	e01c      	b.n	800833a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008300:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008304:	3308      	adds	r3, #8
 8008306:	2100      	movs	r1, #0
 8008308:	4618      	mov	r0, r3
 800830a:	f002 fa55 	bl	800a7b8 <RCCEx_PLL2_Config>
 800830e:	4603      	mov	r3, r0
 8008310:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008314:	e011      	b.n	800833a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008316:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800831a:	3328      	adds	r3, #40	@ 0x28
 800831c:	2100      	movs	r1, #0
 800831e:	4618      	mov	r0, r3
 8008320:	f002 fafc 	bl	800a91c <RCCEx_PLL3_Config>
 8008324:	4603      	mov	r3, r0
 8008326:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800832a:	e006      	b.n	800833a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800832c:	2301      	movs	r3, #1
 800832e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008332:	e002      	b.n	800833a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008334:	bf00      	nop
 8008336:	e000      	b.n	800833a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008338:	bf00      	nop
    }

    if (ret == HAL_OK)
 800833a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800833e:	2b00      	cmp	r3, #0
 8008340:	d10b      	bne.n	800835a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008342:	4b1e      	ldr	r3, [pc, #120]	@ (80083bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008344:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008346:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800834a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800834e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008352:	4a1a      	ldr	r2, [pc, #104]	@ (80083bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008354:	430b      	orrs	r3, r1
 8008356:	6593      	str	r3, [r2, #88]	@ 0x58
 8008358:	e003      	b.n	8008362 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800835a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800835e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008362:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800836a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800836e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008372:	2300      	movs	r3, #0
 8008374:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8008378:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800837c:	460b      	mov	r3, r1
 800837e:	4313      	orrs	r3, r2
 8008380:	d056      	beq.n	8008430 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8008382:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008386:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800838a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800838e:	d038      	beq.n	8008402 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8008390:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008394:	d831      	bhi.n	80083fa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008396:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800839a:	d034      	beq.n	8008406 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800839c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80083a0:	d82b      	bhi.n	80083fa <HAL_RCCEx_PeriphCLKConfig+0x376>
 80083a2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80083a6:	d01d      	beq.n	80083e4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80083a8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80083ac:	d825      	bhi.n	80083fa <HAL_RCCEx_PeriphCLKConfig+0x376>
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d006      	beq.n	80083c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80083b2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80083b6:	d00a      	beq.n	80083ce <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80083b8:	e01f      	b.n	80083fa <HAL_RCCEx_PeriphCLKConfig+0x376>
 80083ba:	bf00      	nop
 80083bc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083c0:	4ba2      	ldr	r3, [pc, #648]	@ (800864c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80083c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083c4:	4aa1      	ldr	r2, [pc, #644]	@ (800864c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80083c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80083ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80083cc:	e01c      	b.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80083ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083d2:	3308      	adds	r3, #8
 80083d4:	2100      	movs	r1, #0
 80083d6:	4618      	mov	r0, r3
 80083d8:	f002 f9ee 	bl	800a7b8 <RCCEx_PLL2_Config>
 80083dc:	4603      	mov	r3, r0
 80083de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80083e2:	e011      	b.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80083e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083e8:	3328      	adds	r3, #40	@ 0x28
 80083ea:	2100      	movs	r1, #0
 80083ec:	4618      	mov	r0, r3
 80083ee:	f002 fa95 	bl	800a91c <RCCEx_PLL3_Config>
 80083f2:	4603      	mov	r3, r0
 80083f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80083f8:	e006      	b.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80083fa:	2301      	movs	r3, #1
 80083fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008400:	e002      	b.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8008402:	bf00      	nop
 8008404:	e000      	b.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8008406:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008408:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800840c:	2b00      	cmp	r3, #0
 800840e:	d10b      	bne.n	8008428 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008410:	4b8e      	ldr	r3, [pc, #568]	@ (800864c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008412:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008414:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8008418:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800841c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008420:	4a8a      	ldr	r2, [pc, #552]	@ (800864c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008422:	430b      	orrs	r3, r1
 8008424:	6593      	str	r3, [r2, #88]	@ 0x58
 8008426:	e003      	b.n	8008430 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008428:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800842c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008430:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008438:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800843c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008440:	2300      	movs	r3, #0
 8008442:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008446:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800844a:	460b      	mov	r3, r1
 800844c:	4313      	orrs	r3, r2
 800844e:	d03a      	beq.n	80084c6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8008450:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008454:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008456:	2b30      	cmp	r3, #48	@ 0x30
 8008458:	d01f      	beq.n	800849a <HAL_RCCEx_PeriphCLKConfig+0x416>
 800845a:	2b30      	cmp	r3, #48	@ 0x30
 800845c:	d819      	bhi.n	8008492 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800845e:	2b20      	cmp	r3, #32
 8008460:	d00c      	beq.n	800847c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8008462:	2b20      	cmp	r3, #32
 8008464:	d815      	bhi.n	8008492 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008466:	2b00      	cmp	r3, #0
 8008468:	d019      	beq.n	800849e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800846a:	2b10      	cmp	r3, #16
 800846c:	d111      	bne.n	8008492 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800846e:	4b77      	ldr	r3, [pc, #476]	@ (800864c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008472:	4a76      	ldr	r2, [pc, #472]	@ (800864c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008474:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008478:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800847a:	e011      	b.n	80084a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800847c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008480:	3308      	adds	r3, #8
 8008482:	2102      	movs	r1, #2
 8008484:	4618      	mov	r0, r3
 8008486:	f002 f997 	bl	800a7b8 <RCCEx_PLL2_Config>
 800848a:	4603      	mov	r3, r0
 800848c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008490:	e006      	b.n	80084a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008492:	2301      	movs	r3, #1
 8008494:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008498:	e002      	b.n	80084a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800849a:	bf00      	nop
 800849c:	e000      	b.n	80084a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800849e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80084a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d10a      	bne.n	80084be <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80084a8:	4b68      	ldr	r3, [pc, #416]	@ (800864c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80084aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80084ac:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80084b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80084b6:	4a65      	ldr	r2, [pc, #404]	@ (800864c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80084b8:	430b      	orrs	r3, r1
 80084ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80084bc:	e003      	b.n	80084c6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80084c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80084c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ce:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80084d2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80084d6:	2300      	movs	r3, #0
 80084d8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80084dc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80084e0:	460b      	mov	r3, r1
 80084e2:	4313      	orrs	r3, r2
 80084e4:	d051      	beq.n	800858a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80084e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80084ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80084f0:	d035      	beq.n	800855e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80084f2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80084f6:	d82e      	bhi.n	8008556 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80084f8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80084fc:	d031      	beq.n	8008562 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80084fe:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008502:	d828      	bhi.n	8008556 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008504:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008508:	d01a      	beq.n	8008540 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800850a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800850e:	d822      	bhi.n	8008556 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008510:	2b00      	cmp	r3, #0
 8008512:	d003      	beq.n	800851c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8008514:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008518:	d007      	beq.n	800852a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800851a:	e01c      	b.n	8008556 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800851c:	4b4b      	ldr	r3, [pc, #300]	@ (800864c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800851e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008520:	4a4a      	ldr	r2, [pc, #296]	@ (800864c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008522:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008526:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008528:	e01c      	b.n	8008564 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800852a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800852e:	3308      	adds	r3, #8
 8008530:	2100      	movs	r1, #0
 8008532:	4618      	mov	r0, r3
 8008534:	f002 f940 	bl	800a7b8 <RCCEx_PLL2_Config>
 8008538:	4603      	mov	r3, r0
 800853a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800853e:	e011      	b.n	8008564 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008540:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008544:	3328      	adds	r3, #40	@ 0x28
 8008546:	2100      	movs	r1, #0
 8008548:	4618      	mov	r0, r3
 800854a:	f002 f9e7 	bl	800a91c <RCCEx_PLL3_Config>
 800854e:	4603      	mov	r3, r0
 8008550:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008554:	e006      	b.n	8008564 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008556:	2301      	movs	r3, #1
 8008558:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800855c:	e002      	b.n	8008564 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800855e:	bf00      	nop
 8008560:	e000      	b.n	8008564 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008562:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008564:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008568:	2b00      	cmp	r3, #0
 800856a:	d10a      	bne.n	8008582 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800856c:	4b37      	ldr	r3, [pc, #220]	@ (800864c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800856e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008570:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8008574:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008578:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800857a:	4a34      	ldr	r2, [pc, #208]	@ (800864c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800857c:	430b      	orrs	r3, r1
 800857e:	6513      	str	r3, [r2, #80]	@ 0x50
 8008580:	e003      	b.n	800858a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008582:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008586:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800858a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800858e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008592:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8008596:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800859a:	2300      	movs	r3, #0
 800859c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80085a0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80085a4:	460b      	mov	r3, r1
 80085a6:	4313      	orrs	r3, r2
 80085a8:	d056      	beq.n	8008658 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80085aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80085b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80085b4:	d033      	beq.n	800861e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80085b6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80085ba:	d82c      	bhi.n	8008616 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80085bc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80085c0:	d02f      	beq.n	8008622 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80085c2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80085c6:	d826      	bhi.n	8008616 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80085c8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80085cc:	d02b      	beq.n	8008626 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80085ce:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80085d2:	d820      	bhi.n	8008616 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80085d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80085d8:	d012      	beq.n	8008600 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80085da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80085de:	d81a      	bhi.n	8008616 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d022      	beq.n	800862a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80085e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80085e8:	d115      	bne.n	8008616 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80085ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085ee:	3308      	adds	r3, #8
 80085f0:	2101      	movs	r1, #1
 80085f2:	4618      	mov	r0, r3
 80085f4:	f002 f8e0 	bl	800a7b8 <RCCEx_PLL2_Config>
 80085f8:	4603      	mov	r3, r0
 80085fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80085fe:	e015      	b.n	800862c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008600:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008604:	3328      	adds	r3, #40	@ 0x28
 8008606:	2101      	movs	r1, #1
 8008608:	4618      	mov	r0, r3
 800860a:	f002 f987 	bl	800a91c <RCCEx_PLL3_Config>
 800860e:	4603      	mov	r3, r0
 8008610:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008614:	e00a      	b.n	800862c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008616:	2301      	movs	r3, #1
 8008618:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800861c:	e006      	b.n	800862c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800861e:	bf00      	nop
 8008620:	e004      	b.n	800862c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008622:	bf00      	nop
 8008624:	e002      	b.n	800862c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008626:	bf00      	nop
 8008628:	e000      	b.n	800862c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800862a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800862c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008630:	2b00      	cmp	r3, #0
 8008632:	d10d      	bne.n	8008650 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008634:	4b05      	ldr	r3, [pc, #20]	@ (800864c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008636:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008638:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800863c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008640:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008642:	4a02      	ldr	r2, [pc, #8]	@ (800864c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008644:	430b      	orrs	r3, r1
 8008646:	6513      	str	r3, [r2, #80]	@ 0x50
 8008648:	e006      	b.n	8008658 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800864a:	bf00      	nop
 800864c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008650:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008654:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008658:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800865c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008660:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8008664:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008668:	2300      	movs	r3, #0
 800866a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800866e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8008672:	460b      	mov	r3, r1
 8008674:	4313      	orrs	r3, r2
 8008676:	d055      	beq.n	8008724 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8008678:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800867c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008680:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008684:	d033      	beq.n	80086ee <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8008686:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800868a:	d82c      	bhi.n	80086e6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800868c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008690:	d02f      	beq.n	80086f2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8008692:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008696:	d826      	bhi.n	80086e6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008698:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800869c:	d02b      	beq.n	80086f6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800869e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80086a2:	d820      	bhi.n	80086e6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80086a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80086a8:	d012      	beq.n	80086d0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80086aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80086ae:	d81a      	bhi.n	80086e6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d022      	beq.n	80086fa <HAL_RCCEx_PeriphCLKConfig+0x676>
 80086b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80086b8:	d115      	bne.n	80086e6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80086ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086be:	3308      	adds	r3, #8
 80086c0:	2101      	movs	r1, #1
 80086c2:	4618      	mov	r0, r3
 80086c4:	f002 f878 	bl	800a7b8 <RCCEx_PLL2_Config>
 80086c8:	4603      	mov	r3, r0
 80086ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80086ce:	e015      	b.n	80086fc <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80086d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086d4:	3328      	adds	r3, #40	@ 0x28
 80086d6:	2101      	movs	r1, #1
 80086d8:	4618      	mov	r0, r3
 80086da:	f002 f91f 	bl	800a91c <RCCEx_PLL3_Config>
 80086de:	4603      	mov	r3, r0
 80086e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80086e4:	e00a      	b.n	80086fc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80086e6:	2301      	movs	r3, #1
 80086e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80086ec:	e006      	b.n	80086fc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80086ee:	bf00      	nop
 80086f0:	e004      	b.n	80086fc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80086f2:	bf00      	nop
 80086f4:	e002      	b.n	80086fc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80086f6:	bf00      	nop
 80086f8:	e000      	b.n	80086fc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80086fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80086fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008700:	2b00      	cmp	r3, #0
 8008702:	d10b      	bne.n	800871c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008704:	4ba3      	ldr	r3, [pc, #652]	@ (8008994 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008706:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008708:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800870c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008710:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008714:	4a9f      	ldr	r2, [pc, #636]	@ (8008994 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008716:	430b      	orrs	r3, r1
 8008718:	6593      	str	r3, [r2, #88]	@ 0x58
 800871a:	e003      	b.n	8008724 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800871c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008720:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008724:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800872c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8008730:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008734:	2300      	movs	r3, #0
 8008736:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800873a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800873e:	460b      	mov	r3, r1
 8008740:	4313      	orrs	r3, r2
 8008742:	d037      	beq.n	80087b4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8008744:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008748:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800874a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800874e:	d00e      	beq.n	800876e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8008750:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008754:	d816      	bhi.n	8008784 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8008756:	2b00      	cmp	r3, #0
 8008758:	d018      	beq.n	800878c <HAL_RCCEx_PeriphCLKConfig+0x708>
 800875a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800875e:	d111      	bne.n	8008784 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008760:	4b8c      	ldr	r3, [pc, #560]	@ (8008994 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008764:	4a8b      	ldr	r2, [pc, #556]	@ (8008994 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008766:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800876a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800876c:	e00f      	b.n	800878e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800876e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008772:	3308      	adds	r3, #8
 8008774:	2101      	movs	r1, #1
 8008776:	4618      	mov	r0, r3
 8008778:	f002 f81e 	bl	800a7b8 <RCCEx_PLL2_Config>
 800877c:	4603      	mov	r3, r0
 800877e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008782:	e004      	b.n	800878e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008784:	2301      	movs	r3, #1
 8008786:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800878a:	e000      	b.n	800878e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800878c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800878e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008792:	2b00      	cmp	r3, #0
 8008794:	d10a      	bne.n	80087ac <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008796:	4b7f      	ldr	r3, [pc, #508]	@ (8008994 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008798:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800879a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800879e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80087a4:	4a7b      	ldr	r2, [pc, #492]	@ (8008994 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80087a6:	430b      	orrs	r3, r1
 80087a8:	6513      	str	r3, [r2, #80]	@ 0x50
 80087aa:	e003      	b.n	80087b4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80087b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80087b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087bc:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80087c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80087c4:	2300      	movs	r3, #0
 80087c6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80087ca:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80087ce:	460b      	mov	r3, r1
 80087d0:	4313      	orrs	r3, r2
 80087d2:	d039      	beq.n	8008848 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80087d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80087da:	2b03      	cmp	r3, #3
 80087dc:	d81c      	bhi.n	8008818 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80087de:	a201      	add	r2, pc, #4	@ (adr r2, 80087e4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80087e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087e4:	08008821 	.word	0x08008821
 80087e8:	080087f5 	.word	0x080087f5
 80087ec:	08008803 	.word	0x08008803
 80087f0:	08008821 	.word	0x08008821
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80087f4:	4b67      	ldr	r3, [pc, #412]	@ (8008994 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80087f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087f8:	4a66      	ldr	r2, [pc, #408]	@ (8008994 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80087fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80087fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008800:	e00f      	b.n	8008822 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008802:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008806:	3308      	adds	r3, #8
 8008808:	2102      	movs	r1, #2
 800880a:	4618      	mov	r0, r3
 800880c:	f001 ffd4 	bl	800a7b8 <RCCEx_PLL2_Config>
 8008810:	4603      	mov	r3, r0
 8008812:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008816:	e004      	b.n	8008822 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008818:	2301      	movs	r3, #1
 800881a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800881e:	e000      	b.n	8008822 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8008820:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008822:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008826:	2b00      	cmp	r3, #0
 8008828:	d10a      	bne.n	8008840 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800882a:	4b5a      	ldr	r3, [pc, #360]	@ (8008994 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800882c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800882e:	f023 0103 	bic.w	r1, r3, #3
 8008832:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008836:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008838:	4a56      	ldr	r2, [pc, #344]	@ (8008994 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800883a:	430b      	orrs	r3, r1
 800883c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800883e:	e003      	b.n	8008848 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008840:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008844:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008848:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800884c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008850:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8008854:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008858:	2300      	movs	r3, #0
 800885a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800885e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8008862:	460b      	mov	r3, r1
 8008864:	4313      	orrs	r3, r2
 8008866:	f000 809f 	beq.w	80089a8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800886a:	4b4b      	ldr	r3, [pc, #300]	@ (8008998 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	4a4a      	ldr	r2, [pc, #296]	@ (8008998 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008870:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008874:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008876:	f7f9 fdfb 	bl	8002470 <HAL_GetTick>
 800887a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800887e:	e00b      	b.n	8008898 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008880:	f7f9 fdf6 	bl	8002470 <HAL_GetTick>
 8008884:	4602      	mov	r2, r0
 8008886:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800888a:	1ad3      	subs	r3, r2, r3
 800888c:	2b64      	cmp	r3, #100	@ 0x64
 800888e:	d903      	bls.n	8008898 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8008890:	2303      	movs	r3, #3
 8008892:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008896:	e005      	b.n	80088a4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008898:	4b3f      	ldr	r3, [pc, #252]	@ (8008998 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d0ed      	beq.n	8008880 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80088a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d179      	bne.n	80089a0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80088ac:	4b39      	ldr	r3, [pc, #228]	@ (8008994 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80088ae:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80088b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088b4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80088b8:	4053      	eors	r3, r2
 80088ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d015      	beq.n	80088ee <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80088c2:	4b34      	ldr	r3, [pc, #208]	@ (8008994 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80088c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80088c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80088ca:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80088ce:	4b31      	ldr	r3, [pc, #196]	@ (8008994 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80088d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80088d2:	4a30      	ldr	r2, [pc, #192]	@ (8008994 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80088d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80088d8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80088da:	4b2e      	ldr	r3, [pc, #184]	@ (8008994 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80088dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80088de:	4a2d      	ldr	r2, [pc, #180]	@ (8008994 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80088e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80088e4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80088e6:	4a2b      	ldr	r2, [pc, #172]	@ (8008994 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80088e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80088ec:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80088ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088f2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80088f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80088fa:	d118      	bne.n	800892e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088fc:	f7f9 fdb8 	bl	8002470 <HAL_GetTick>
 8008900:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008904:	e00d      	b.n	8008922 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008906:	f7f9 fdb3 	bl	8002470 <HAL_GetTick>
 800890a:	4602      	mov	r2, r0
 800890c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8008910:	1ad2      	subs	r2, r2, r3
 8008912:	f241 3388 	movw	r3, #5000	@ 0x1388
 8008916:	429a      	cmp	r2, r3
 8008918:	d903      	bls.n	8008922 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800891a:	2303      	movs	r3, #3
 800891c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8008920:	e005      	b.n	800892e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008922:	4b1c      	ldr	r3, [pc, #112]	@ (8008994 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008924:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008926:	f003 0302 	and.w	r3, r3, #2
 800892a:	2b00      	cmp	r3, #0
 800892c:	d0eb      	beq.n	8008906 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800892e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008932:	2b00      	cmp	r3, #0
 8008934:	d129      	bne.n	800898a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008936:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800893a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800893e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008942:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008946:	d10e      	bne.n	8008966 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8008948:	4b12      	ldr	r3, [pc, #72]	@ (8008994 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800894a:	691b      	ldr	r3, [r3, #16]
 800894c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8008950:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008954:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008958:	091a      	lsrs	r2, r3, #4
 800895a:	4b10      	ldr	r3, [pc, #64]	@ (800899c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800895c:	4013      	ands	r3, r2
 800895e:	4a0d      	ldr	r2, [pc, #52]	@ (8008994 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008960:	430b      	orrs	r3, r1
 8008962:	6113      	str	r3, [r2, #16]
 8008964:	e005      	b.n	8008972 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8008966:	4b0b      	ldr	r3, [pc, #44]	@ (8008994 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008968:	691b      	ldr	r3, [r3, #16]
 800896a:	4a0a      	ldr	r2, [pc, #40]	@ (8008994 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800896c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008970:	6113      	str	r3, [r2, #16]
 8008972:	4b08      	ldr	r3, [pc, #32]	@ (8008994 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008974:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8008976:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800897a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800897e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008982:	4a04      	ldr	r2, [pc, #16]	@ (8008994 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008984:	430b      	orrs	r3, r1
 8008986:	6713      	str	r3, [r2, #112]	@ 0x70
 8008988:	e00e      	b.n	80089a8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800898a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800898e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8008992:	e009      	b.n	80089a8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8008994:	58024400 	.word	0x58024400
 8008998:	58024800 	.word	0x58024800
 800899c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80089a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80089a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089b0:	f002 0301 	and.w	r3, r2, #1
 80089b4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80089b8:	2300      	movs	r3, #0
 80089ba:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80089be:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80089c2:	460b      	mov	r3, r1
 80089c4:	4313      	orrs	r3, r2
 80089c6:	f000 8089 	beq.w	8008adc <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80089ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089ce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80089d0:	2b28      	cmp	r3, #40	@ 0x28
 80089d2:	d86b      	bhi.n	8008aac <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80089d4:	a201      	add	r2, pc, #4	@ (adr r2, 80089dc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80089d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089da:	bf00      	nop
 80089dc:	08008ab5 	.word	0x08008ab5
 80089e0:	08008aad 	.word	0x08008aad
 80089e4:	08008aad 	.word	0x08008aad
 80089e8:	08008aad 	.word	0x08008aad
 80089ec:	08008aad 	.word	0x08008aad
 80089f0:	08008aad 	.word	0x08008aad
 80089f4:	08008aad 	.word	0x08008aad
 80089f8:	08008aad 	.word	0x08008aad
 80089fc:	08008a81 	.word	0x08008a81
 8008a00:	08008aad 	.word	0x08008aad
 8008a04:	08008aad 	.word	0x08008aad
 8008a08:	08008aad 	.word	0x08008aad
 8008a0c:	08008aad 	.word	0x08008aad
 8008a10:	08008aad 	.word	0x08008aad
 8008a14:	08008aad 	.word	0x08008aad
 8008a18:	08008aad 	.word	0x08008aad
 8008a1c:	08008a97 	.word	0x08008a97
 8008a20:	08008aad 	.word	0x08008aad
 8008a24:	08008aad 	.word	0x08008aad
 8008a28:	08008aad 	.word	0x08008aad
 8008a2c:	08008aad 	.word	0x08008aad
 8008a30:	08008aad 	.word	0x08008aad
 8008a34:	08008aad 	.word	0x08008aad
 8008a38:	08008aad 	.word	0x08008aad
 8008a3c:	08008ab5 	.word	0x08008ab5
 8008a40:	08008aad 	.word	0x08008aad
 8008a44:	08008aad 	.word	0x08008aad
 8008a48:	08008aad 	.word	0x08008aad
 8008a4c:	08008aad 	.word	0x08008aad
 8008a50:	08008aad 	.word	0x08008aad
 8008a54:	08008aad 	.word	0x08008aad
 8008a58:	08008aad 	.word	0x08008aad
 8008a5c:	08008ab5 	.word	0x08008ab5
 8008a60:	08008aad 	.word	0x08008aad
 8008a64:	08008aad 	.word	0x08008aad
 8008a68:	08008aad 	.word	0x08008aad
 8008a6c:	08008aad 	.word	0x08008aad
 8008a70:	08008aad 	.word	0x08008aad
 8008a74:	08008aad 	.word	0x08008aad
 8008a78:	08008aad 	.word	0x08008aad
 8008a7c:	08008ab5 	.word	0x08008ab5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008a80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a84:	3308      	adds	r3, #8
 8008a86:	2101      	movs	r1, #1
 8008a88:	4618      	mov	r0, r3
 8008a8a:	f001 fe95 	bl	800a7b8 <RCCEx_PLL2_Config>
 8008a8e:	4603      	mov	r3, r0
 8008a90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008a94:	e00f      	b.n	8008ab6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008a96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a9a:	3328      	adds	r3, #40	@ 0x28
 8008a9c:	2101      	movs	r1, #1
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	f001 ff3c 	bl	800a91c <RCCEx_PLL3_Config>
 8008aa4:	4603      	mov	r3, r0
 8008aa6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008aaa:	e004      	b.n	8008ab6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008aac:	2301      	movs	r3, #1
 8008aae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008ab2:	e000      	b.n	8008ab6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8008ab4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ab6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d10a      	bne.n	8008ad4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008abe:	4bbf      	ldr	r3, [pc, #764]	@ (8008dbc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008ac0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ac2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8008ac6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008aca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008acc:	4abb      	ldr	r2, [pc, #748]	@ (8008dbc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008ace:	430b      	orrs	r3, r1
 8008ad0:	6553      	str	r3, [r2, #84]	@ 0x54
 8008ad2:	e003      	b.n	8008adc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ad4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ad8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008adc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ae4:	f002 0302 	and.w	r3, r2, #2
 8008ae8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008aec:	2300      	movs	r3, #0
 8008aee:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008af2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8008af6:	460b      	mov	r3, r1
 8008af8:	4313      	orrs	r3, r2
 8008afa:	d041      	beq.n	8008b80 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8008afc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b00:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008b02:	2b05      	cmp	r3, #5
 8008b04:	d824      	bhi.n	8008b50 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8008b06:	a201      	add	r2, pc, #4	@ (adr r2, 8008b0c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8008b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b0c:	08008b59 	.word	0x08008b59
 8008b10:	08008b25 	.word	0x08008b25
 8008b14:	08008b3b 	.word	0x08008b3b
 8008b18:	08008b59 	.word	0x08008b59
 8008b1c:	08008b59 	.word	0x08008b59
 8008b20:	08008b59 	.word	0x08008b59
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008b24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b28:	3308      	adds	r3, #8
 8008b2a:	2101      	movs	r1, #1
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	f001 fe43 	bl	800a7b8 <RCCEx_PLL2_Config>
 8008b32:	4603      	mov	r3, r0
 8008b34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008b38:	e00f      	b.n	8008b5a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008b3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b3e:	3328      	adds	r3, #40	@ 0x28
 8008b40:	2101      	movs	r1, #1
 8008b42:	4618      	mov	r0, r3
 8008b44:	f001 feea 	bl	800a91c <RCCEx_PLL3_Config>
 8008b48:	4603      	mov	r3, r0
 8008b4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008b4e:	e004      	b.n	8008b5a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b50:	2301      	movs	r3, #1
 8008b52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008b56:	e000      	b.n	8008b5a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8008b58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d10a      	bne.n	8008b78 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008b62:	4b96      	ldr	r3, [pc, #600]	@ (8008dbc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008b64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b66:	f023 0107 	bic.w	r1, r3, #7
 8008b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b6e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008b70:	4a92      	ldr	r2, [pc, #584]	@ (8008dbc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008b72:	430b      	orrs	r3, r1
 8008b74:	6553      	str	r3, [r2, #84]	@ 0x54
 8008b76:	e003      	b.n	8008b80 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b7c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008b80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b88:	f002 0304 	and.w	r3, r2, #4
 8008b8c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008b90:	2300      	movs	r3, #0
 8008b92:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008b96:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8008b9a:	460b      	mov	r3, r1
 8008b9c:	4313      	orrs	r3, r2
 8008b9e:	d044      	beq.n	8008c2a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008ba0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ba4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008ba8:	2b05      	cmp	r3, #5
 8008baa:	d825      	bhi.n	8008bf8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8008bac:	a201      	add	r2, pc, #4	@ (adr r2, 8008bb4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8008bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bb2:	bf00      	nop
 8008bb4:	08008c01 	.word	0x08008c01
 8008bb8:	08008bcd 	.word	0x08008bcd
 8008bbc:	08008be3 	.word	0x08008be3
 8008bc0:	08008c01 	.word	0x08008c01
 8008bc4:	08008c01 	.word	0x08008c01
 8008bc8:	08008c01 	.word	0x08008c01
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008bcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bd0:	3308      	adds	r3, #8
 8008bd2:	2101      	movs	r1, #1
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	f001 fdef 	bl	800a7b8 <RCCEx_PLL2_Config>
 8008bda:	4603      	mov	r3, r0
 8008bdc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008be0:	e00f      	b.n	8008c02 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008be2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008be6:	3328      	adds	r3, #40	@ 0x28
 8008be8:	2101      	movs	r1, #1
 8008bea:	4618      	mov	r0, r3
 8008bec:	f001 fe96 	bl	800a91c <RCCEx_PLL3_Config>
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008bf6:	e004      	b.n	8008c02 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008bf8:	2301      	movs	r3, #1
 8008bfa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008bfe:	e000      	b.n	8008c02 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8008c00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d10b      	bne.n	8008c22 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008c0a:	4b6c      	ldr	r3, [pc, #432]	@ (8008dbc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008c0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c0e:	f023 0107 	bic.w	r1, r3, #7
 8008c12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c16:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008c1a:	4a68      	ldr	r2, [pc, #416]	@ (8008dbc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008c1c:	430b      	orrs	r3, r1
 8008c1e:	6593      	str	r3, [r2, #88]	@ 0x58
 8008c20:	e003      	b.n	8008c2a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c26:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008c2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c32:	f002 0320 	and.w	r3, r2, #32
 8008c36:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008c40:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008c44:	460b      	mov	r3, r1
 8008c46:	4313      	orrs	r3, r2
 8008c48:	d055      	beq.n	8008cf6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8008c4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c52:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008c56:	d033      	beq.n	8008cc0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8008c58:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008c5c:	d82c      	bhi.n	8008cb8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008c5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c62:	d02f      	beq.n	8008cc4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8008c64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c68:	d826      	bhi.n	8008cb8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008c6a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008c6e:	d02b      	beq.n	8008cc8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8008c70:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008c74:	d820      	bhi.n	8008cb8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008c76:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c7a:	d012      	beq.n	8008ca2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8008c7c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c80:	d81a      	bhi.n	8008cb8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d022      	beq.n	8008ccc <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8008c86:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008c8a:	d115      	bne.n	8008cb8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008c8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c90:	3308      	adds	r3, #8
 8008c92:	2100      	movs	r1, #0
 8008c94:	4618      	mov	r0, r3
 8008c96:	f001 fd8f 	bl	800a7b8 <RCCEx_PLL2_Config>
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008ca0:	e015      	b.n	8008cce <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008ca2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ca6:	3328      	adds	r3, #40	@ 0x28
 8008ca8:	2102      	movs	r1, #2
 8008caa:	4618      	mov	r0, r3
 8008cac:	f001 fe36 	bl	800a91c <RCCEx_PLL3_Config>
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008cb6:	e00a      	b.n	8008cce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008cb8:	2301      	movs	r3, #1
 8008cba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008cbe:	e006      	b.n	8008cce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008cc0:	bf00      	nop
 8008cc2:	e004      	b.n	8008cce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008cc4:	bf00      	nop
 8008cc6:	e002      	b.n	8008cce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008cc8:	bf00      	nop
 8008cca:	e000      	b.n	8008cce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008ccc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008cce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d10b      	bne.n	8008cee <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008cd6:	4b39      	ldr	r3, [pc, #228]	@ (8008dbc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008cd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008cda:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008cde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ce6:	4a35      	ldr	r2, [pc, #212]	@ (8008dbc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008ce8:	430b      	orrs	r3, r1
 8008cea:	6553      	str	r3, [r2, #84]	@ 0x54
 8008cec:	e003      	b.n	8008cf6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008cf2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008cf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cfe:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8008d02:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008d06:	2300      	movs	r3, #0
 8008d08:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008d0c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8008d10:	460b      	mov	r3, r1
 8008d12:	4313      	orrs	r3, r2
 8008d14:	d058      	beq.n	8008dc8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8008d16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008d1e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008d22:	d033      	beq.n	8008d8c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8008d24:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008d28:	d82c      	bhi.n	8008d84 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008d2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008d2e:	d02f      	beq.n	8008d90 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8008d30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008d34:	d826      	bhi.n	8008d84 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008d36:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008d3a:	d02b      	beq.n	8008d94 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8008d3c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008d40:	d820      	bhi.n	8008d84 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008d42:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008d46:	d012      	beq.n	8008d6e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8008d48:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008d4c:	d81a      	bhi.n	8008d84 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d022      	beq.n	8008d98 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8008d52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008d56:	d115      	bne.n	8008d84 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008d58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d5c:	3308      	adds	r3, #8
 8008d5e:	2100      	movs	r1, #0
 8008d60:	4618      	mov	r0, r3
 8008d62:	f001 fd29 	bl	800a7b8 <RCCEx_PLL2_Config>
 8008d66:	4603      	mov	r3, r0
 8008d68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008d6c:	e015      	b.n	8008d9a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008d6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d72:	3328      	adds	r3, #40	@ 0x28
 8008d74:	2102      	movs	r1, #2
 8008d76:	4618      	mov	r0, r3
 8008d78:	f001 fdd0 	bl	800a91c <RCCEx_PLL3_Config>
 8008d7c:	4603      	mov	r3, r0
 8008d7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008d82:	e00a      	b.n	8008d9a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008d84:	2301      	movs	r3, #1
 8008d86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008d8a:	e006      	b.n	8008d9a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008d8c:	bf00      	nop
 8008d8e:	e004      	b.n	8008d9a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008d90:	bf00      	nop
 8008d92:	e002      	b.n	8008d9a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008d94:	bf00      	nop
 8008d96:	e000      	b.n	8008d9a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008d98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d10e      	bne.n	8008dc0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008da2:	4b06      	ldr	r3, [pc, #24]	@ (8008dbc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008da4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008da6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8008daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008dae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008db2:	4a02      	ldr	r2, [pc, #8]	@ (8008dbc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008db4:	430b      	orrs	r3, r1
 8008db6:	6593      	str	r3, [r2, #88]	@ 0x58
 8008db8:	e006      	b.n	8008dc8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8008dba:	bf00      	nop
 8008dbc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008dc0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008dc4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008dc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dd0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8008dd4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008dd8:	2300      	movs	r3, #0
 8008dda:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008dde:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8008de2:	460b      	mov	r3, r1
 8008de4:	4313      	orrs	r3, r2
 8008de6:	d055      	beq.n	8008e94 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008de8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008dec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008df0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008df4:	d033      	beq.n	8008e5e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8008df6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008dfa:	d82c      	bhi.n	8008e56 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008dfc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008e00:	d02f      	beq.n	8008e62 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8008e02:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008e06:	d826      	bhi.n	8008e56 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008e08:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008e0c:	d02b      	beq.n	8008e66 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8008e0e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008e12:	d820      	bhi.n	8008e56 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008e14:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008e18:	d012      	beq.n	8008e40 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8008e1a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008e1e:	d81a      	bhi.n	8008e56 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d022      	beq.n	8008e6a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8008e24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008e28:	d115      	bne.n	8008e56 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008e2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e2e:	3308      	adds	r3, #8
 8008e30:	2100      	movs	r1, #0
 8008e32:	4618      	mov	r0, r3
 8008e34:	f001 fcc0 	bl	800a7b8 <RCCEx_PLL2_Config>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008e3e:	e015      	b.n	8008e6c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008e40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e44:	3328      	adds	r3, #40	@ 0x28
 8008e46:	2102      	movs	r1, #2
 8008e48:	4618      	mov	r0, r3
 8008e4a:	f001 fd67 	bl	800a91c <RCCEx_PLL3_Config>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008e54:	e00a      	b.n	8008e6c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008e56:	2301      	movs	r3, #1
 8008e58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008e5c:	e006      	b.n	8008e6c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008e5e:	bf00      	nop
 8008e60:	e004      	b.n	8008e6c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008e62:	bf00      	nop
 8008e64:	e002      	b.n	8008e6c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008e66:	bf00      	nop
 8008e68:	e000      	b.n	8008e6c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008e6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d10b      	bne.n	8008e8c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008e74:	4ba1      	ldr	r3, [pc, #644]	@ (80090fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008e76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e78:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8008e7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e80:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008e84:	4a9d      	ldr	r2, [pc, #628]	@ (80090fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008e86:	430b      	orrs	r3, r1
 8008e88:	6593      	str	r3, [r2, #88]	@ 0x58
 8008e8a:	e003      	b.n	8008e94 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e90:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008e94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e9c:	f002 0308 	and.w	r3, r2, #8
 8008ea0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008eaa:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8008eae:	460b      	mov	r3, r1
 8008eb0:	4313      	orrs	r3, r2
 8008eb2:	d01e      	beq.n	8008ef2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8008eb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008eb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008ebc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ec0:	d10c      	bne.n	8008edc <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008ec2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ec6:	3328      	adds	r3, #40	@ 0x28
 8008ec8:	2102      	movs	r1, #2
 8008eca:	4618      	mov	r0, r3
 8008ecc:	f001 fd26 	bl	800a91c <RCCEx_PLL3_Config>
 8008ed0:	4603      	mov	r3, r0
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d002      	beq.n	8008edc <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008edc:	4b87      	ldr	r3, [pc, #540]	@ (80090fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008ede:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ee0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008ee4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ee8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008eec:	4a83      	ldr	r2, [pc, #524]	@ (80090fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008eee:	430b      	orrs	r3, r1
 8008ef0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008ef2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008efa:	f002 0310 	and.w	r3, r2, #16
 8008efe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008f02:	2300      	movs	r3, #0
 8008f04:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008f08:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8008f0c:	460b      	mov	r3, r1
 8008f0e:	4313      	orrs	r3, r2
 8008f10:	d01e      	beq.n	8008f50 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008f12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f16:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008f1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f1e:	d10c      	bne.n	8008f3a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008f20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f24:	3328      	adds	r3, #40	@ 0x28
 8008f26:	2102      	movs	r1, #2
 8008f28:	4618      	mov	r0, r3
 8008f2a:	f001 fcf7 	bl	800a91c <RCCEx_PLL3_Config>
 8008f2e:	4603      	mov	r3, r0
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d002      	beq.n	8008f3a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8008f34:	2301      	movs	r3, #1
 8008f36:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008f3a:	4b70      	ldr	r3, [pc, #448]	@ (80090fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008f3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f3e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008f42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f46:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008f4a:	4a6c      	ldr	r2, [pc, #432]	@ (80090fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008f4c:	430b      	orrs	r3, r1
 8008f4e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008f50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f58:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8008f5c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008f60:	2300      	movs	r3, #0
 8008f62:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008f66:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8008f6a:	460b      	mov	r3, r1
 8008f6c:	4313      	orrs	r3, r2
 8008f6e:	d03e      	beq.n	8008fee <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008f70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f74:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008f78:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008f7c:	d022      	beq.n	8008fc4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8008f7e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008f82:	d81b      	bhi.n	8008fbc <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d003      	beq.n	8008f90 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8008f88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008f8c:	d00b      	beq.n	8008fa6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8008f8e:	e015      	b.n	8008fbc <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008f90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f94:	3308      	adds	r3, #8
 8008f96:	2100      	movs	r1, #0
 8008f98:	4618      	mov	r0, r3
 8008f9a:	f001 fc0d 	bl	800a7b8 <RCCEx_PLL2_Config>
 8008f9e:	4603      	mov	r3, r0
 8008fa0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008fa4:	e00f      	b.n	8008fc6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008fa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008faa:	3328      	adds	r3, #40	@ 0x28
 8008fac:	2102      	movs	r1, #2
 8008fae:	4618      	mov	r0, r3
 8008fb0:	f001 fcb4 	bl	800a91c <RCCEx_PLL3_Config>
 8008fb4:	4603      	mov	r3, r0
 8008fb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008fba:	e004      	b.n	8008fc6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008fbc:	2301      	movs	r3, #1
 8008fbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008fc2:	e000      	b.n	8008fc6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8008fc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008fc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d10b      	bne.n	8008fe6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008fce:	4b4b      	ldr	r3, [pc, #300]	@ (80090fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008fd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008fd2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8008fd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fda:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008fde:	4a47      	ldr	r2, [pc, #284]	@ (80090fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008fe0:	430b      	orrs	r3, r1
 8008fe2:	6593      	str	r3, [r2, #88]	@ 0x58
 8008fe4:	e003      	b.n	8008fee <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fe6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008fea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008fee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ff6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8008ffa:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009000:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8009004:	460b      	mov	r3, r1
 8009006:	4313      	orrs	r3, r2
 8009008:	d03b      	beq.n	8009082 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800900a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800900e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009012:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009016:	d01f      	beq.n	8009058 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8009018:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800901c:	d818      	bhi.n	8009050 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800901e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009022:	d003      	beq.n	800902c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8009024:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009028:	d007      	beq.n	800903a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800902a:	e011      	b.n	8009050 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800902c:	4b33      	ldr	r3, [pc, #204]	@ (80090fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800902e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009030:	4a32      	ldr	r2, [pc, #200]	@ (80090fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009032:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009036:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8009038:	e00f      	b.n	800905a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800903a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800903e:	3328      	adds	r3, #40	@ 0x28
 8009040:	2101      	movs	r1, #1
 8009042:	4618      	mov	r0, r3
 8009044:	f001 fc6a 	bl	800a91c <RCCEx_PLL3_Config>
 8009048:	4603      	mov	r3, r0
 800904a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800904e:	e004      	b.n	800905a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009050:	2301      	movs	r3, #1
 8009052:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009056:	e000      	b.n	800905a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8009058:	bf00      	nop
    }

    if (ret == HAL_OK)
 800905a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800905e:	2b00      	cmp	r3, #0
 8009060:	d10b      	bne.n	800907a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009062:	4b26      	ldr	r3, [pc, #152]	@ (80090fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009064:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009066:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800906a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800906e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009072:	4a22      	ldr	r2, [pc, #136]	@ (80090fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009074:	430b      	orrs	r3, r1
 8009076:	6553      	str	r3, [r2, #84]	@ 0x54
 8009078:	e003      	b.n	8009082 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800907a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800907e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009082:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800908a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800908e:	673b      	str	r3, [r7, #112]	@ 0x70
 8009090:	2300      	movs	r3, #0
 8009092:	677b      	str	r3, [r7, #116]	@ 0x74
 8009094:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8009098:	460b      	mov	r3, r1
 800909a:	4313      	orrs	r3, r2
 800909c:	d034      	beq.n	8009108 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800909e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d003      	beq.n	80090b0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80090a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80090ac:	d007      	beq.n	80090be <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80090ae:	e011      	b.n	80090d4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80090b0:	4b12      	ldr	r3, [pc, #72]	@ (80090fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80090b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090b4:	4a11      	ldr	r2, [pc, #68]	@ (80090fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80090b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80090ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80090bc:	e00e      	b.n	80090dc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80090be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090c2:	3308      	adds	r3, #8
 80090c4:	2102      	movs	r1, #2
 80090c6:	4618      	mov	r0, r3
 80090c8:	f001 fb76 	bl	800a7b8 <RCCEx_PLL2_Config>
 80090cc:	4603      	mov	r3, r0
 80090ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80090d2:	e003      	b.n	80090dc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80090d4:	2301      	movs	r3, #1
 80090d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80090da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80090dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d10d      	bne.n	8009100 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80090e4:	4b05      	ldr	r3, [pc, #20]	@ (80090fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80090e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80090e8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80090ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80090f2:	4a02      	ldr	r2, [pc, #8]	@ (80090fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80090f4:	430b      	orrs	r3, r1
 80090f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80090f8:	e006      	b.n	8009108 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80090fa:	bf00      	nop
 80090fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009100:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009104:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009108:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800910c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009110:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8009114:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009116:	2300      	movs	r3, #0
 8009118:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800911a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800911e:	460b      	mov	r3, r1
 8009120:	4313      	orrs	r3, r2
 8009122:	d00c      	beq.n	800913e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009124:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009128:	3328      	adds	r3, #40	@ 0x28
 800912a:	2102      	movs	r1, #2
 800912c:	4618      	mov	r0, r3
 800912e:	f001 fbf5 	bl	800a91c <RCCEx_PLL3_Config>
 8009132:	4603      	mov	r3, r0
 8009134:	2b00      	cmp	r3, #0
 8009136:	d002      	beq.n	800913e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8009138:	2301      	movs	r3, #1
 800913a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800913e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009146:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800914a:	663b      	str	r3, [r7, #96]	@ 0x60
 800914c:	2300      	movs	r3, #0
 800914e:	667b      	str	r3, [r7, #100]	@ 0x64
 8009150:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8009154:	460b      	mov	r3, r1
 8009156:	4313      	orrs	r3, r2
 8009158:	d038      	beq.n	80091cc <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800915a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800915e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009162:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009166:	d018      	beq.n	800919a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8009168:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800916c:	d811      	bhi.n	8009192 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800916e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009172:	d014      	beq.n	800919e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8009174:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009178:	d80b      	bhi.n	8009192 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800917a:	2b00      	cmp	r3, #0
 800917c:	d011      	beq.n	80091a2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800917e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009182:	d106      	bne.n	8009192 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009184:	4bc3      	ldr	r3, [pc, #780]	@ (8009494 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009188:	4ac2      	ldr	r2, [pc, #776]	@ (8009494 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800918a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800918e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009190:	e008      	b.n	80091a4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009192:	2301      	movs	r3, #1
 8009194:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009198:	e004      	b.n	80091a4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800919a:	bf00      	nop
 800919c:	e002      	b.n	80091a4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800919e:	bf00      	nop
 80091a0:	e000      	b.n	80091a4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80091a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80091a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d10b      	bne.n	80091c4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80091ac:	4bb9      	ldr	r3, [pc, #740]	@ (8009494 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80091ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80091b0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80091b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80091bc:	4ab5      	ldr	r2, [pc, #724]	@ (8009494 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80091be:	430b      	orrs	r3, r1
 80091c0:	6553      	str	r3, [r2, #84]	@ 0x54
 80091c2:	e003      	b.n	80091cc <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80091c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80091cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091d4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80091d8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80091da:	2300      	movs	r3, #0
 80091dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80091de:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80091e2:	460b      	mov	r3, r1
 80091e4:	4313      	orrs	r3, r2
 80091e6:	d009      	beq.n	80091fc <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80091e8:	4baa      	ldr	r3, [pc, #680]	@ (8009494 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80091ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80091ec:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80091f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80091f6:	4aa7      	ldr	r2, [pc, #668]	@ (8009494 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80091f8:	430b      	orrs	r3, r1
 80091fa:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80091fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009204:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8009208:	653b      	str	r3, [r7, #80]	@ 0x50
 800920a:	2300      	movs	r3, #0
 800920c:	657b      	str	r3, [r7, #84]	@ 0x54
 800920e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8009212:	460b      	mov	r3, r1
 8009214:	4313      	orrs	r3, r2
 8009216:	d00a      	beq.n	800922e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009218:	4b9e      	ldr	r3, [pc, #632]	@ (8009494 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800921a:	691b      	ldr	r3, [r3, #16]
 800921c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8009220:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009224:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8009228:	4a9a      	ldr	r2, [pc, #616]	@ (8009494 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800922a:	430b      	orrs	r3, r1
 800922c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800922e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009236:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800923a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800923c:	2300      	movs	r3, #0
 800923e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009240:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8009244:	460b      	mov	r3, r1
 8009246:	4313      	orrs	r3, r2
 8009248:	d009      	beq.n	800925e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800924a:	4b92      	ldr	r3, [pc, #584]	@ (8009494 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800924c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800924e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8009252:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009256:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009258:	4a8e      	ldr	r2, [pc, #568]	@ (8009494 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800925a:	430b      	orrs	r3, r1
 800925c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800925e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009266:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800926a:	643b      	str	r3, [r7, #64]	@ 0x40
 800926c:	2300      	movs	r3, #0
 800926e:	647b      	str	r3, [r7, #68]	@ 0x44
 8009270:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8009274:	460b      	mov	r3, r1
 8009276:	4313      	orrs	r3, r2
 8009278:	d00e      	beq.n	8009298 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800927a:	4b86      	ldr	r3, [pc, #536]	@ (8009494 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800927c:	691b      	ldr	r3, [r3, #16]
 800927e:	4a85      	ldr	r2, [pc, #532]	@ (8009494 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009280:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009284:	6113      	str	r3, [r2, #16]
 8009286:	4b83      	ldr	r3, [pc, #524]	@ (8009494 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009288:	6919      	ldr	r1, [r3, #16]
 800928a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800928e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8009292:	4a80      	ldr	r2, [pc, #512]	@ (8009494 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009294:	430b      	orrs	r3, r1
 8009296:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009298:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800929c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092a0:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80092a4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80092a6:	2300      	movs	r3, #0
 80092a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80092aa:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80092ae:	460b      	mov	r3, r1
 80092b0:	4313      	orrs	r3, r2
 80092b2:	d009      	beq.n	80092c8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80092b4:	4b77      	ldr	r3, [pc, #476]	@ (8009494 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80092b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80092b8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80092bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80092c2:	4a74      	ldr	r2, [pc, #464]	@ (8009494 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80092c4:	430b      	orrs	r3, r1
 80092c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80092c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092d0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80092d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80092d6:	2300      	movs	r3, #0
 80092d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80092da:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80092de:	460b      	mov	r3, r1
 80092e0:	4313      	orrs	r3, r2
 80092e2:	d00a      	beq.n	80092fa <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80092e4:	4b6b      	ldr	r3, [pc, #428]	@ (8009494 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80092e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80092e8:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80092ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80092f4:	4a67      	ldr	r2, [pc, #412]	@ (8009494 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80092f6:	430b      	orrs	r3, r1
 80092f8:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80092fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009302:	2100      	movs	r1, #0
 8009304:	62b9      	str	r1, [r7, #40]	@ 0x28
 8009306:	f003 0301 	and.w	r3, r3, #1
 800930a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800930c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8009310:	460b      	mov	r3, r1
 8009312:	4313      	orrs	r3, r2
 8009314:	d011      	beq.n	800933a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009316:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800931a:	3308      	adds	r3, #8
 800931c:	2100      	movs	r1, #0
 800931e:	4618      	mov	r0, r3
 8009320:	f001 fa4a 	bl	800a7b8 <RCCEx_PLL2_Config>
 8009324:	4603      	mov	r3, r0
 8009326:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800932a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800932e:	2b00      	cmp	r3, #0
 8009330:	d003      	beq.n	800933a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009332:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009336:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800933a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800933e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009342:	2100      	movs	r1, #0
 8009344:	6239      	str	r1, [r7, #32]
 8009346:	f003 0302 	and.w	r3, r3, #2
 800934a:	627b      	str	r3, [r7, #36]	@ 0x24
 800934c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009350:	460b      	mov	r3, r1
 8009352:	4313      	orrs	r3, r2
 8009354:	d011      	beq.n	800937a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009356:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800935a:	3308      	adds	r3, #8
 800935c:	2101      	movs	r1, #1
 800935e:	4618      	mov	r0, r3
 8009360:	f001 fa2a 	bl	800a7b8 <RCCEx_PLL2_Config>
 8009364:	4603      	mov	r3, r0
 8009366:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800936a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800936e:	2b00      	cmp	r3, #0
 8009370:	d003      	beq.n	800937a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009372:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009376:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800937a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800937e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009382:	2100      	movs	r1, #0
 8009384:	61b9      	str	r1, [r7, #24]
 8009386:	f003 0304 	and.w	r3, r3, #4
 800938a:	61fb      	str	r3, [r7, #28]
 800938c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009390:	460b      	mov	r3, r1
 8009392:	4313      	orrs	r3, r2
 8009394:	d011      	beq.n	80093ba <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009396:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800939a:	3308      	adds	r3, #8
 800939c:	2102      	movs	r1, #2
 800939e:	4618      	mov	r0, r3
 80093a0:	f001 fa0a 	bl	800a7b8 <RCCEx_PLL2_Config>
 80093a4:	4603      	mov	r3, r0
 80093a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80093aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d003      	beq.n	80093ba <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80093b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80093ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093c2:	2100      	movs	r1, #0
 80093c4:	6139      	str	r1, [r7, #16]
 80093c6:	f003 0308 	and.w	r3, r3, #8
 80093ca:	617b      	str	r3, [r7, #20]
 80093cc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80093d0:	460b      	mov	r3, r1
 80093d2:	4313      	orrs	r3, r2
 80093d4:	d011      	beq.n	80093fa <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80093d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093da:	3328      	adds	r3, #40	@ 0x28
 80093dc:	2100      	movs	r1, #0
 80093de:	4618      	mov	r0, r3
 80093e0:	f001 fa9c 	bl	800a91c <RCCEx_PLL3_Config>
 80093e4:	4603      	mov	r3, r0
 80093e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80093ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d003      	beq.n	80093fa <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80093f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80093fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009402:	2100      	movs	r1, #0
 8009404:	60b9      	str	r1, [r7, #8]
 8009406:	f003 0310 	and.w	r3, r3, #16
 800940a:	60fb      	str	r3, [r7, #12]
 800940c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009410:	460b      	mov	r3, r1
 8009412:	4313      	orrs	r3, r2
 8009414:	d011      	beq.n	800943a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009416:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800941a:	3328      	adds	r3, #40	@ 0x28
 800941c:	2101      	movs	r1, #1
 800941e:	4618      	mov	r0, r3
 8009420:	f001 fa7c 	bl	800a91c <RCCEx_PLL3_Config>
 8009424:	4603      	mov	r3, r0
 8009426:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800942a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800942e:	2b00      	cmp	r3, #0
 8009430:	d003      	beq.n	800943a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009432:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009436:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800943a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800943e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009442:	2100      	movs	r1, #0
 8009444:	6039      	str	r1, [r7, #0]
 8009446:	f003 0320 	and.w	r3, r3, #32
 800944a:	607b      	str	r3, [r7, #4]
 800944c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009450:	460b      	mov	r3, r1
 8009452:	4313      	orrs	r3, r2
 8009454:	d011      	beq.n	800947a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009456:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800945a:	3328      	adds	r3, #40	@ 0x28
 800945c:	2102      	movs	r1, #2
 800945e:	4618      	mov	r0, r3
 8009460:	f001 fa5c 	bl	800a91c <RCCEx_PLL3_Config>
 8009464:	4603      	mov	r3, r0
 8009466:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800946a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800946e:	2b00      	cmp	r3, #0
 8009470:	d003      	beq.n	800947a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009472:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009476:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800947a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800947e:	2b00      	cmp	r3, #0
 8009480:	d101      	bne.n	8009486 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8009482:	2300      	movs	r3, #0
 8009484:	e000      	b.n	8009488 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8009486:	2301      	movs	r3, #1
}
 8009488:	4618      	mov	r0, r3
 800948a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800948e:	46bd      	mov	sp, r7
 8009490:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009494:	58024400 	.word	0x58024400

08009498 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b090      	sub	sp, #64	@ 0x40
 800949c:	af00      	add	r7, sp, #0
 800949e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80094a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80094a6:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80094aa:	430b      	orrs	r3, r1
 80094ac:	f040 8094 	bne.w	80095d8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80094b0:	4b9e      	ldr	r3, [pc, #632]	@ (800972c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80094b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80094b4:	f003 0307 	and.w	r3, r3, #7
 80094b8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80094ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094bc:	2b04      	cmp	r3, #4
 80094be:	f200 8087 	bhi.w	80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80094c2:	a201      	add	r2, pc, #4	@ (adr r2, 80094c8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80094c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094c8:	080094dd 	.word	0x080094dd
 80094cc:	08009505 	.word	0x08009505
 80094d0:	0800952d 	.word	0x0800952d
 80094d4:	080095c9 	.word	0x080095c9
 80094d8:	08009555 	.word	0x08009555
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80094dc:	4b93      	ldr	r3, [pc, #588]	@ (800972c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80094e4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80094e8:	d108      	bne.n	80094fc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80094ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80094ee:	4618      	mov	r0, r3
 80094f0:	f001 f810 	bl	800a514 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80094f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80094f8:	f000 bd45 	b.w	8009f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80094fc:	2300      	movs	r3, #0
 80094fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009500:	f000 bd41 	b.w	8009f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009504:	4b89      	ldr	r3, [pc, #548]	@ (800972c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800950c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009510:	d108      	bne.n	8009524 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009512:	f107 0318 	add.w	r3, r7, #24
 8009516:	4618      	mov	r0, r3
 8009518:	f000 fd54 	bl	8009fc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800951c:	69bb      	ldr	r3, [r7, #24]
 800951e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009520:	f000 bd31 	b.w	8009f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009524:	2300      	movs	r3, #0
 8009526:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009528:	f000 bd2d 	b.w	8009f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800952c:	4b7f      	ldr	r3, [pc, #508]	@ (800972c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009534:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009538:	d108      	bne.n	800954c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800953a:	f107 030c 	add.w	r3, r7, #12
 800953e:	4618      	mov	r0, r3
 8009540:	f000 fe94 	bl	800a26c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009548:	f000 bd1d 	b.w	8009f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800954c:	2300      	movs	r3, #0
 800954e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009550:	f000 bd19 	b.w	8009f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009554:	4b75      	ldr	r3, [pc, #468]	@ (800972c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009556:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009558:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800955c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800955e:	4b73      	ldr	r3, [pc, #460]	@ (800972c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	f003 0304 	and.w	r3, r3, #4
 8009566:	2b04      	cmp	r3, #4
 8009568:	d10c      	bne.n	8009584 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800956a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800956c:	2b00      	cmp	r3, #0
 800956e:	d109      	bne.n	8009584 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009570:	4b6e      	ldr	r3, [pc, #440]	@ (800972c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	08db      	lsrs	r3, r3, #3
 8009576:	f003 0303 	and.w	r3, r3, #3
 800957a:	4a6d      	ldr	r2, [pc, #436]	@ (8009730 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800957c:	fa22 f303 	lsr.w	r3, r2, r3
 8009580:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009582:	e01f      	b.n	80095c4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009584:	4b69      	ldr	r3, [pc, #420]	@ (800972c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800958c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009590:	d106      	bne.n	80095a0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8009592:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009594:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009598:	d102      	bne.n	80095a0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800959a:	4b66      	ldr	r3, [pc, #408]	@ (8009734 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800959c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800959e:	e011      	b.n	80095c4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80095a0:	4b62      	ldr	r3, [pc, #392]	@ (800972c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80095a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80095ac:	d106      	bne.n	80095bc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80095ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80095b4:	d102      	bne.n	80095bc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80095b6:	4b60      	ldr	r3, [pc, #384]	@ (8009738 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80095b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80095ba:	e003      	b.n	80095c4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80095bc:	2300      	movs	r3, #0
 80095be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80095c0:	f000 bce1 	b.w	8009f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80095c4:	f000 bcdf 	b.w	8009f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80095c8:	4b5c      	ldr	r3, [pc, #368]	@ (800973c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80095ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095cc:	f000 bcdb 	b.w	8009f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80095d0:	2300      	movs	r3, #0
 80095d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095d4:	f000 bcd7 	b.w	8009f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80095d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80095dc:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80095e0:	430b      	orrs	r3, r1
 80095e2:	f040 80ad 	bne.w	8009740 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80095e6:	4b51      	ldr	r3, [pc, #324]	@ (800972c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80095e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80095ea:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80095ee:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80095f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80095f6:	d056      	beq.n	80096a6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80095f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80095fe:	f200 8090 	bhi.w	8009722 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009604:	2bc0      	cmp	r3, #192	@ 0xc0
 8009606:	f000 8088 	beq.w	800971a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800960a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800960c:	2bc0      	cmp	r3, #192	@ 0xc0
 800960e:	f200 8088 	bhi.w	8009722 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009614:	2b80      	cmp	r3, #128	@ 0x80
 8009616:	d032      	beq.n	800967e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8009618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800961a:	2b80      	cmp	r3, #128	@ 0x80
 800961c:	f200 8081 	bhi.w	8009722 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009622:	2b00      	cmp	r3, #0
 8009624:	d003      	beq.n	800962e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8009626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009628:	2b40      	cmp	r3, #64	@ 0x40
 800962a:	d014      	beq.n	8009656 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800962c:	e079      	b.n	8009722 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800962e:	4b3f      	ldr	r3, [pc, #252]	@ (800972c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009636:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800963a:	d108      	bne.n	800964e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800963c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009640:	4618      	mov	r0, r3
 8009642:	f000 ff67 	bl	800a514 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009648:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800964a:	f000 bc9c 	b.w	8009f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800964e:	2300      	movs	r3, #0
 8009650:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009652:	f000 bc98 	b.w	8009f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009656:	4b35      	ldr	r3, [pc, #212]	@ (800972c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800965e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009662:	d108      	bne.n	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009664:	f107 0318 	add.w	r3, r7, #24
 8009668:	4618      	mov	r0, r3
 800966a:	f000 fcab 	bl	8009fc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800966e:	69bb      	ldr	r3, [r7, #24]
 8009670:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009672:	f000 bc88 	b.w	8009f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009676:	2300      	movs	r3, #0
 8009678:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800967a:	f000 bc84 	b.w	8009f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800967e:	4b2b      	ldr	r3, [pc, #172]	@ (800972c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009686:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800968a:	d108      	bne.n	800969e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800968c:	f107 030c 	add.w	r3, r7, #12
 8009690:	4618      	mov	r0, r3
 8009692:	f000 fdeb 	bl	800a26c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800969a:	f000 bc74 	b.w	8009f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800969e:	2300      	movs	r3, #0
 80096a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096a2:	f000 bc70 	b.w	8009f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80096a6:	4b21      	ldr	r3, [pc, #132]	@ (800972c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80096a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80096aa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80096ae:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80096b0:	4b1e      	ldr	r3, [pc, #120]	@ (800972c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	f003 0304 	and.w	r3, r3, #4
 80096b8:	2b04      	cmp	r3, #4
 80096ba:	d10c      	bne.n	80096d6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 80096bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d109      	bne.n	80096d6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80096c2:	4b1a      	ldr	r3, [pc, #104]	@ (800972c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	08db      	lsrs	r3, r3, #3
 80096c8:	f003 0303 	and.w	r3, r3, #3
 80096cc:	4a18      	ldr	r2, [pc, #96]	@ (8009730 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80096ce:	fa22 f303 	lsr.w	r3, r2, r3
 80096d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80096d4:	e01f      	b.n	8009716 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80096d6:	4b15      	ldr	r3, [pc, #84]	@ (800972c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80096de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80096e2:	d106      	bne.n	80096f2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80096e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80096ea:	d102      	bne.n	80096f2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80096ec:	4b11      	ldr	r3, [pc, #68]	@ (8009734 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80096ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80096f0:	e011      	b.n	8009716 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80096f2:	4b0e      	ldr	r3, [pc, #56]	@ (800972c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80096fa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80096fe:	d106      	bne.n	800970e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8009700:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009702:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009706:	d102      	bne.n	800970e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009708:	4b0b      	ldr	r3, [pc, #44]	@ (8009738 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800970a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800970c:	e003      	b.n	8009716 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800970e:	2300      	movs	r3, #0
 8009710:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009712:	f000 bc38 	b.w	8009f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009716:	f000 bc36 	b.w	8009f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800971a:	4b08      	ldr	r3, [pc, #32]	@ (800973c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800971c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800971e:	f000 bc32 	b.w	8009f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009722:	2300      	movs	r3, #0
 8009724:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009726:	f000 bc2e 	b.w	8009f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800972a:	bf00      	nop
 800972c:	58024400 	.word	0x58024400
 8009730:	03d09000 	.word	0x03d09000
 8009734:	003d0900 	.word	0x003d0900
 8009738:	007a1200 	.word	0x007a1200
 800973c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8009740:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009744:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8009748:	430b      	orrs	r3, r1
 800974a:	f040 809c 	bne.w	8009886 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800974e:	4b9e      	ldr	r3, [pc, #632]	@ (80099c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009750:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009752:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8009756:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800975a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800975e:	d054      	beq.n	800980a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8009760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009762:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009766:	f200 808b 	bhi.w	8009880 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800976a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800976c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009770:	f000 8083 	beq.w	800987a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8009774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009776:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800977a:	f200 8081 	bhi.w	8009880 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800977e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009780:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009784:	d02f      	beq.n	80097e6 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8009786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009788:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800978c:	d878      	bhi.n	8009880 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800978e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009790:	2b00      	cmp	r3, #0
 8009792:	d004      	beq.n	800979e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8009794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009796:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800979a:	d012      	beq.n	80097c2 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800979c:	e070      	b.n	8009880 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800979e:	4b8a      	ldr	r3, [pc, #552]	@ (80099c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80097a6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80097aa:	d107      	bne.n	80097bc <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80097ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80097b0:	4618      	mov	r0, r3
 80097b2:	f000 feaf 	bl	800a514 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80097b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80097ba:	e3e4      	b.n	8009f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80097bc:	2300      	movs	r3, #0
 80097be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097c0:	e3e1      	b.n	8009f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80097c2:	4b81      	ldr	r3, [pc, #516]	@ (80099c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80097ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80097ce:	d107      	bne.n	80097e0 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80097d0:	f107 0318 	add.w	r3, r7, #24
 80097d4:	4618      	mov	r0, r3
 80097d6:	f000 fbf5 	bl	8009fc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80097da:	69bb      	ldr	r3, [r7, #24]
 80097dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80097de:	e3d2      	b.n	8009f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80097e0:	2300      	movs	r3, #0
 80097e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097e4:	e3cf      	b.n	8009f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80097e6:	4b78      	ldr	r3, [pc, #480]	@ (80099c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80097ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80097f2:	d107      	bne.n	8009804 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80097f4:	f107 030c 	add.w	r3, r7, #12
 80097f8:	4618      	mov	r0, r3
 80097fa:	f000 fd37 	bl	800a26c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009802:	e3c0      	b.n	8009f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009804:	2300      	movs	r3, #0
 8009806:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009808:	e3bd      	b.n	8009f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800980a:	4b6f      	ldr	r3, [pc, #444]	@ (80099c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800980c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800980e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009812:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009814:	4b6c      	ldr	r3, [pc, #432]	@ (80099c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	f003 0304 	and.w	r3, r3, #4
 800981c:	2b04      	cmp	r3, #4
 800981e:	d10c      	bne.n	800983a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8009820:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009822:	2b00      	cmp	r3, #0
 8009824:	d109      	bne.n	800983a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009826:	4b68      	ldr	r3, [pc, #416]	@ (80099c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	08db      	lsrs	r3, r3, #3
 800982c:	f003 0303 	and.w	r3, r3, #3
 8009830:	4a66      	ldr	r2, [pc, #408]	@ (80099cc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8009832:	fa22 f303 	lsr.w	r3, r2, r3
 8009836:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009838:	e01e      	b.n	8009878 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800983a:	4b63      	ldr	r3, [pc, #396]	@ (80099c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009842:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009846:	d106      	bne.n	8009856 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8009848:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800984a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800984e:	d102      	bne.n	8009856 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009850:	4b5f      	ldr	r3, [pc, #380]	@ (80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8009852:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009854:	e010      	b.n	8009878 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009856:	4b5c      	ldr	r3, [pc, #368]	@ (80099c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800985e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009862:	d106      	bne.n	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8009864:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009866:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800986a:	d102      	bne.n	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800986c:	4b59      	ldr	r3, [pc, #356]	@ (80099d4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800986e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009870:	e002      	b.n	8009878 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009872:	2300      	movs	r3, #0
 8009874:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009876:	e386      	b.n	8009f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009878:	e385      	b.n	8009f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800987a:	4b57      	ldr	r3, [pc, #348]	@ (80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800987c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800987e:	e382      	b.n	8009f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009880:	2300      	movs	r3, #0
 8009882:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009884:	e37f      	b.n	8009f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8009886:	e9d7 2300 	ldrd	r2, r3, [r7]
 800988a:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800988e:	430b      	orrs	r3, r1
 8009890:	f040 80a7 	bne.w	80099e2 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8009894:	4b4c      	ldr	r3, [pc, #304]	@ (80099c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009896:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009898:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800989c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800989e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098a0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80098a4:	d055      	beq.n	8009952 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 80098a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098a8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80098ac:	f200 8096 	bhi.w	80099dc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80098b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098b2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80098b6:	f000 8084 	beq.w	80099c2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80098ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098bc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80098c0:	f200 808c 	bhi.w	80099dc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80098c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098c6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80098ca:	d030      	beq.n	800992e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 80098cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098ce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80098d2:	f200 8083 	bhi.w	80099dc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80098d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d004      	beq.n	80098e6 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80098dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098de:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80098e2:	d012      	beq.n	800990a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80098e4:	e07a      	b.n	80099dc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80098e6:	4b38      	ldr	r3, [pc, #224]	@ (80099c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80098ee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80098f2:	d107      	bne.n	8009904 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80098f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80098f8:	4618      	mov	r0, r3
 80098fa:	f000 fe0b 	bl	800a514 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80098fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009900:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009902:	e340      	b.n	8009f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009904:	2300      	movs	r3, #0
 8009906:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009908:	e33d      	b.n	8009f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800990a:	4b2f      	ldr	r3, [pc, #188]	@ (80099c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009912:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009916:	d107      	bne.n	8009928 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009918:	f107 0318 	add.w	r3, r7, #24
 800991c:	4618      	mov	r0, r3
 800991e:	f000 fb51 	bl	8009fc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009922:	69bb      	ldr	r3, [r7, #24]
 8009924:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009926:	e32e      	b.n	8009f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009928:	2300      	movs	r3, #0
 800992a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800992c:	e32b      	b.n	8009f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800992e:	4b26      	ldr	r3, [pc, #152]	@ (80099c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009936:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800993a:	d107      	bne.n	800994c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800993c:	f107 030c 	add.w	r3, r7, #12
 8009940:	4618      	mov	r0, r3
 8009942:	f000 fc93 	bl	800a26c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800994a:	e31c      	b.n	8009f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800994c:	2300      	movs	r3, #0
 800994e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009950:	e319      	b.n	8009f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009952:	4b1d      	ldr	r3, [pc, #116]	@ (80099c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009954:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009956:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800995a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800995c:	4b1a      	ldr	r3, [pc, #104]	@ (80099c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	f003 0304 	and.w	r3, r3, #4
 8009964:	2b04      	cmp	r3, #4
 8009966:	d10c      	bne.n	8009982 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8009968:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800996a:	2b00      	cmp	r3, #0
 800996c:	d109      	bne.n	8009982 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800996e:	4b16      	ldr	r3, [pc, #88]	@ (80099c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	08db      	lsrs	r3, r3, #3
 8009974:	f003 0303 	and.w	r3, r3, #3
 8009978:	4a14      	ldr	r2, [pc, #80]	@ (80099cc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800997a:	fa22 f303 	lsr.w	r3, r2, r3
 800997e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009980:	e01e      	b.n	80099c0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009982:	4b11      	ldr	r3, [pc, #68]	@ (80099c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800998a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800998e:	d106      	bne.n	800999e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8009990:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009992:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009996:	d102      	bne.n	800999e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009998:	4b0d      	ldr	r3, [pc, #52]	@ (80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800999a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800999c:	e010      	b.n	80099c0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800999e:	4b0a      	ldr	r3, [pc, #40]	@ (80099c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80099a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80099aa:	d106      	bne.n	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 80099ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80099b2:	d102      	bne.n	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80099b4:	4b07      	ldr	r3, [pc, #28]	@ (80099d4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80099b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80099b8:	e002      	b.n	80099c0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80099ba:	2300      	movs	r3, #0
 80099bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80099be:	e2e2      	b.n	8009f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80099c0:	e2e1      	b.n	8009f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80099c2:	4b05      	ldr	r3, [pc, #20]	@ (80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80099c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80099c6:	e2de      	b.n	8009f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80099c8:	58024400 	.word	0x58024400
 80099cc:	03d09000 	.word	0x03d09000
 80099d0:	003d0900 	.word	0x003d0900
 80099d4:	007a1200 	.word	0x007a1200
 80099d8:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 80099dc:	2300      	movs	r3, #0
 80099de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80099e0:	e2d1      	b.n	8009f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80099e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80099e6:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80099ea:	430b      	orrs	r3, r1
 80099ec:	f040 809c 	bne.w	8009b28 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80099f0:	4b93      	ldr	r3, [pc, #588]	@ (8009c40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80099f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80099f4:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80099f8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80099fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009a00:	d054      	beq.n	8009aac <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8009a02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a04:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009a08:	f200 808b 	bhi.w	8009b22 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009a0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a0e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009a12:	f000 8083 	beq.w	8009b1c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8009a16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a18:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009a1c:	f200 8081 	bhi.w	8009b22 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009a20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009a26:	d02f      	beq.n	8009a88 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8009a28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009a2e:	d878      	bhi.n	8009b22 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009a30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d004      	beq.n	8009a40 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8009a36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009a3c:	d012      	beq.n	8009a64 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8009a3e:	e070      	b.n	8009b22 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009a40:	4b7f      	ldr	r3, [pc, #508]	@ (8009c40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009a48:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009a4c:	d107      	bne.n	8009a5e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009a4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009a52:	4618      	mov	r0, r3
 8009a54:	f000 fd5e 	bl	800a514 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009a58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009a5c:	e293      	b.n	8009f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009a5e:	2300      	movs	r3, #0
 8009a60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a62:	e290      	b.n	8009f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009a64:	4b76      	ldr	r3, [pc, #472]	@ (8009c40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009a6c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009a70:	d107      	bne.n	8009a82 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a72:	f107 0318 	add.w	r3, r7, #24
 8009a76:	4618      	mov	r0, r3
 8009a78:	f000 faa4 	bl	8009fc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009a7c:	69bb      	ldr	r3, [r7, #24]
 8009a7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009a80:	e281      	b.n	8009f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009a82:	2300      	movs	r3, #0
 8009a84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a86:	e27e      	b.n	8009f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009a88:	4b6d      	ldr	r3, [pc, #436]	@ (8009c40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009a90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009a94:	d107      	bne.n	8009aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009a96:	f107 030c 	add.w	r3, r7, #12
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	f000 fbe6 	bl	800a26c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009aa4:	e26f      	b.n	8009f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009aaa:	e26c      	b.n	8009f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009aac:	4b64      	ldr	r3, [pc, #400]	@ (8009c40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009aae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009ab0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009ab4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009ab6:	4b62      	ldr	r3, [pc, #392]	@ (8009c40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	f003 0304 	and.w	r3, r3, #4
 8009abe:	2b04      	cmp	r3, #4
 8009ac0:	d10c      	bne.n	8009adc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8009ac2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d109      	bne.n	8009adc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009ac8:	4b5d      	ldr	r3, [pc, #372]	@ (8009c40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	08db      	lsrs	r3, r3, #3
 8009ace:	f003 0303 	and.w	r3, r3, #3
 8009ad2:	4a5c      	ldr	r2, [pc, #368]	@ (8009c44 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8009ad4:	fa22 f303 	lsr.w	r3, r2, r3
 8009ad8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009ada:	e01e      	b.n	8009b1a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009adc:	4b58      	ldr	r3, [pc, #352]	@ (8009c40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009ae4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009ae8:	d106      	bne.n	8009af8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8009aea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009aec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009af0:	d102      	bne.n	8009af8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009af2:	4b55      	ldr	r3, [pc, #340]	@ (8009c48 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009af4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009af6:	e010      	b.n	8009b1a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009af8:	4b51      	ldr	r3, [pc, #324]	@ (8009c40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009b00:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009b04:	d106      	bne.n	8009b14 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8009b06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009b0c:	d102      	bne.n	8009b14 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009b0e:	4b4f      	ldr	r3, [pc, #316]	@ (8009c4c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8009b10:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009b12:	e002      	b.n	8009b1a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009b14:	2300      	movs	r3, #0
 8009b16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009b18:	e235      	b.n	8009f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009b1a:	e234      	b.n	8009f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009b1c:	4b4c      	ldr	r3, [pc, #304]	@ (8009c50 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8009b1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b20:	e231      	b.n	8009f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009b22:	2300      	movs	r3, #0
 8009b24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b26:	e22e      	b.n	8009f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8009b28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b2c:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8009b30:	430b      	orrs	r3, r1
 8009b32:	f040 808f 	bne.w	8009c54 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8009b36:	4b42      	ldr	r3, [pc, #264]	@ (8009c40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009b38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b3a:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8009b3e:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8009b40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b42:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009b46:	d06b      	beq.n	8009c20 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8009b48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b4a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009b4e:	d874      	bhi.n	8009c3a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009b50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b52:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009b56:	d056      	beq.n	8009c06 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8009b58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b5a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009b5e:	d86c      	bhi.n	8009c3a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009b60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b62:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009b66:	d03b      	beq.n	8009be0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8009b68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b6a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009b6e:	d864      	bhi.n	8009c3a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009b70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b72:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009b76:	d021      	beq.n	8009bbc <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8009b78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b7a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009b7e:	d85c      	bhi.n	8009c3a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009b80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d004      	beq.n	8009b90 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8009b86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009b8c:	d004      	beq.n	8009b98 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8009b8e:	e054      	b.n	8009c3a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8009b90:	f7fe fa4c 	bl	800802c <HAL_RCC_GetPCLK1Freq>
 8009b94:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009b96:	e1f6      	b.n	8009f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009b98:	4b29      	ldr	r3, [pc, #164]	@ (8009c40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009ba0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009ba4:	d107      	bne.n	8009bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ba6:	f107 0318 	add.w	r3, r7, #24
 8009baa:	4618      	mov	r0, r3
 8009bac:	f000 fa0a 	bl	8009fc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009bb0:	69fb      	ldr	r3, [r7, #28]
 8009bb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009bb4:	e1e7      	b.n	8009f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009bba:	e1e4      	b.n	8009f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009bbc:	4b20      	ldr	r3, [pc, #128]	@ (8009c40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009bc4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009bc8:	d107      	bne.n	8009bda <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009bca:	f107 030c 	add.w	r3, r7, #12
 8009bce:	4618      	mov	r0, r3
 8009bd0:	f000 fb4c 	bl	800a26c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009bd4:	693b      	ldr	r3, [r7, #16]
 8009bd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009bd8:	e1d5      	b.n	8009f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009bda:	2300      	movs	r3, #0
 8009bdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009bde:	e1d2      	b.n	8009f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009be0:	4b17      	ldr	r3, [pc, #92]	@ (8009c40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	f003 0304 	and.w	r3, r3, #4
 8009be8:	2b04      	cmp	r3, #4
 8009bea:	d109      	bne.n	8009c00 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009bec:	4b14      	ldr	r3, [pc, #80]	@ (8009c40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	08db      	lsrs	r3, r3, #3
 8009bf2:	f003 0303 	and.w	r3, r3, #3
 8009bf6:	4a13      	ldr	r2, [pc, #76]	@ (8009c44 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8009bf8:	fa22 f303 	lsr.w	r3, r2, r3
 8009bfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009bfe:	e1c2      	b.n	8009f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009c00:	2300      	movs	r3, #0
 8009c02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c04:	e1bf      	b.n	8009f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009c06:	4b0e      	ldr	r3, [pc, #56]	@ (8009c40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009c0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009c12:	d102      	bne.n	8009c1a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8009c14:	4b0c      	ldr	r3, [pc, #48]	@ (8009c48 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009c16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009c18:	e1b5      	b.n	8009f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c1e:	e1b2      	b.n	8009f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009c20:	4b07      	ldr	r3, [pc, #28]	@ (8009c40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009c28:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009c2c:	d102      	bne.n	8009c34 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8009c2e:	4b07      	ldr	r3, [pc, #28]	@ (8009c4c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8009c30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009c32:	e1a8      	b.n	8009f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009c34:	2300      	movs	r3, #0
 8009c36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c38:	e1a5      	b.n	8009f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c3e:	e1a2      	b.n	8009f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009c40:	58024400 	.word	0x58024400
 8009c44:	03d09000 	.word	0x03d09000
 8009c48:	003d0900 	.word	0x003d0900
 8009c4c:	007a1200 	.word	0x007a1200
 8009c50:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009c54:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c58:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8009c5c:	430b      	orrs	r3, r1
 8009c5e:	d173      	bne.n	8009d48 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8009c60:	4b9c      	ldr	r3, [pc, #624]	@ (8009ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009c62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c64:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009c68:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009c6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c6c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009c70:	d02f      	beq.n	8009cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8009c72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c74:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009c78:	d863      	bhi.n	8009d42 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8009c7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d004      	beq.n	8009c8a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8009c80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009c86:	d012      	beq.n	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8009c88:	e05b      	b.n	8009d42 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009c8a:	4b92      	ldr	r3, [pc, #584]	@ (8009ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009c92:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009c96:	d107      	bne.n	8009ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c98:	f107 0318 	add.w	r3, r7, #24
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	f000 f991 	bl	8009fc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009ca2:	69bb      	ldr	r3, [r7, #24]
 8009ca4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009ca6:	e16e      	b.n	8009f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009ca8:	2300      	movs	r3, #0
 8009caa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009cac:	e16b      	b.n	8009f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009cae:	4b89      	ldr	r3, [pc, #548]	@ (8009ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009cb6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009cba:	d107      	bne.n	8009ccc <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009cbc:	f107 030c 	add.w	r3, r7, #12
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	f000 fad3 	bl	800a26c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009cc6:	697b      	ldr	r3, [r7, #20]
 8009cc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009cca:	e15c      	b.n	8009f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009ccc:	2300      	movs	r3, #0
 8009cce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009cd0:	e159      	b.n	8009f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009cd2:	4b80      	ldr	r3, [pc, #512]	@ (8009ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009cd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009cd6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009cda:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009cdc:	4b7d      	ldr	r3, [pc, #500]	@ (8009ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	f003 0304 	and.w	r3, r3, #4
 8009ce4:	2b04      	cmp	r3, #4
 8009ce6:	d10c      	bne.n	8009d02 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8009ce8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d109      	bne.n	8009d02 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009cee:	4b79      	ldr	r3, [pc, #484]	@ (8009ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	08db      	lsrs	r3, r3, #3
 8009cf4:	f003 0303 	and.w	r3, r3, #3
 8009cf8:	4a77      	ldr	r2, [pc, #476]	@ (8009ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8009cfa:	fa22 f303 	lsr.w	r3, r2, r3
 8009cfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009d00:	e01e      	b.n	8009d40 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009d02:	4b74      	ldr	r3, [pc, #464]	@ (8009ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009d0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009d0e:	d106      	bne.n	8009d1e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8009d10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d12:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009d16:	d102      	bne.n	8009d1e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009d18:	4b70      	ldr	r3, [pc, #448]	@ (8009edc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8009d1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009d1c:	e010      	b.n	8009d40 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009d1e:	4b6d      	ldr	r3, [pc, #436]	@ (8009ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009d26:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009d2a:	d106      	bne.n	8009d3a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8009d2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d2e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009d32:	d102      	bne.n	8009d3a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009d34:	4b6a      	ldr	r3, [pc, #424]	@ (8009ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8009d36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009d38:	e002      	b.n	8009d40 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009d3e:	e122      	b.n	8009f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009d40:	e121      	b.n	8009f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009d42:	2300      	movs	r3, #0
 8009d44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d46:	e11e      	b.n	8009f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009d48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009d4c:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8009d50:	430b      	orrs	r3, r1
 8009d52:	d133      	bne.n	8009dbc <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8009d54:	4b5f      	ldr	r3, [pc, #380]	@ (8009ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009d56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009d58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009d5c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009d5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d004      	beq.n	8009d6e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8009d64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d6a:	d012      	beq.n	8009d92 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8009d6c:	e023      	b.n	8009db6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009d6e:	4b59      	ldr	r3, [pc, #356]	@ (8009ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009d76:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009d7a:	d107      	bne.n	8009d8c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009d7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009d80:	4618      	mov	r0, r3
 8009d82:	f000 fbc7 	bl	800a514 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009d86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009d8a:	e0fc      	b.n	8009f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d90:	e0f9      	b.n	8009f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009d92:	4b50      	ldr	r3, [pc, #320]	@ (8009ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009d9a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009d9e:	d107      	bne.n	8009db0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009da0:	f107 0318 	add.w	r3, r7, #24
 8009da4:	4618      	mov	r0, r3
 8009da6:	f000 f90d 	bl	8009fc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009daa:	6a3b      	ldr	r3, [r7, #32]
 8009dac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009dae:	e0ea      	b.n	8009f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009db0:	2300      	movs	r3, #0
 8009db2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009db4:	e0e7      	b.n	8009f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009db6:	2300      	movs	r3, #0
 8009db8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009dba:	e0e4      	b.n	8009f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009dbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009dc0:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8009dc4:	430b      	orrs	r3, r1
 8009dc6:	f040 808d 	bne.w	8009ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8009dca:	4b42      	ldr	r3, [pc, #264]	@ (8009ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009dcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009dce:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8009dd2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009dd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dd6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009dda:	d06b      	beq.n	8009eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8009ddc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dde:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009de2:	d874      	bhi.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009de4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009de6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009dea:	d056      	beq.n	8009e9a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8009dec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009df2:	d86c      	bhi.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009df4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009df6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009dfa:	d03b      	beq.n	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8009dfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dfe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009e02:	d864      	bhi.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009e04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e06:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009e0a:	d021      	beq.n	8009e50 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8009e0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e0e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009e12:	d85c      	bhi.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009e14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d004      	beq.n	8009e24 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8009e1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e1c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009e20:	d004      	beq.n	8009e2c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8009e22:	e054      	b.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009e24:	f000 f8b8 	bl	8009f98 <HAL_RCCEx_GetD3PCLK1Freq>
 8009e28:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009e2a:	e0ac      	b.n	8009f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009e2c:	4b29      	ldr	r3, [pc, #164]	@ (8009ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009e34:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009e38:	d107      	bne.n	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009e3a:	f107 0318 	add.w	r3, r7, #24
 8009e3e:	4618      	mov	r0, r3
 8009e40:	f000 f8c0 	bl	8009fc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009e44:	69fb      	ldr	r3, [r7, #28]
 8009e46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009e48:	e09d      	b.n	8009f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e4e:	e09a      	b.n	8009f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009e50:	4b20      	ldr	r3, [pc, #128]	@ (8009ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009e58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009e5c:	d107      	bne.n	8009e6e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009e5e:	f107 030c 	add.w	r3, r7, #12
 8009e62:	4618      	mov	r0, r3
 8009e64:	f000 fa02 	bl	800a26c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009e68:	693b      	ldr	r3, [r7, #16]
 8009e6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009e6c:	e08b      	b.n	8009f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009e6e:	2300      	movs	r3, #0
 8009e70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e72:	e088      	b.n	8009f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009e74:	4b17      	ldr	r3, [pc, #92]	@ (8009ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	f003 0304 	and.w	r3, r3, #4
 8009e7c:	2b04      	cmp	r3, #4
 8009e7e:	d109      	bne.n	8009e94 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009e80:	4b14      	ldr	r3, [pc, #80]	@ (8009ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	08db      	lsrs	r3, r3, #3
 8009e86:	f003 0303 	and.w	r3, r3, #3
 8009e8a:	4a13      	ldr	r2, [pc, #76]	@ (8009ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8009e8c:	fa22 f303 	lsr.w	r3, r2, r3
 8009e90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009e92:	e078      	b.n	8009f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009e94:	2300      	movs	r3, #0
 8009e96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e98:	e075      	b.n	8009f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009e9a:	4b0e      	ldr	r3, [pc, #56]	@ (8009ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009ea2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009ea6:	d102      	bne.n	8009eae <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8009ea8:	4b0c      	ldr	r3, [pc, #48]	@ (8009edc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8009eaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009eac:	e06b      	b.n	8009f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009eae:	2300      	movs	r3, #0
 8009eb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009eb2:	e068      	b.n	8009f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009eb4:	4b07      	ldr	r3, [pc, #28]	@ (8009ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009ebc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009ec0:	d102      	bne.n	8009ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8009ec2:	4b07      	ldr	r3, [pc, #28]	@ (8009ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8009ec4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009ec6:	e05e      	b.n	8009f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009ec8:	2300      	movs	r3, #0
 8009eca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ecc:	e05b      	b.n	8009f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8009ece:	2300      	movs	r3, #0
 8009ed0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ed2:	e058      	b.n	8009f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009ed4:	58024400 	.word	0x58024400
 8009ed8:	03d09000 	.word	0x03d09000
 8009edc:	003d0900 	.word	0x003d0900
 8009ee0:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8009ee4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ee8:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8009eec:	430b      	orrs	r3, r1
 8009eee:	d148      	bne.n	8009f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8009ef0:	4b27      	ldr	r3, [pc, #156]	@ (8009f90 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009ef2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ef4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009ef8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009efa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009efc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009f00:	d02a      	beq.n	8009f58 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8009f02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009f08:	d838      	bhi.n	8009f7c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8009f0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d004      	beq.n	8009f1a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8009f10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f12:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009f16:	d00d      	beq.n	8009f34 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8009f18:	e030      	b.n	8009f7c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009f1a:	4b1d      	ldr	r3, [pc, #116]	@ (8009f90 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009f22:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009f26:	d102      	bne.n	8009f2e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8009f28:	4b1a      	ldr	r3, [pc, #104]	@ (8009f94 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8009f2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f2c:	e02b      	b.n	8009f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009f2e:	2300      	movs	r3, #0
 8009f30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f32:	e028      	b.n	8009f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009f34:	4b16      	ldr	r3, [pc, #88]	@ (8009f90 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009f3c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009f40:	d107      	bne.n	8009f52 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009f42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009f46:	4618      	mov	r0, r3
 8009f48:	f000 fae4 	bl	800a514 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009f4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f50:	e019      	b.n	8009f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009f52:	2300      	movs	r3, #0
 8009f54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f56:	e016      	b.n	8009f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009f58:	4b0d      	ldr	r3, [pc, #52]	@ (8009f90 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009f60:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009f64:	d107      	bne.n	8009f76 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f66:	f107 0318 	add.w	r3, r7, #24
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	f000 f82a 	bl	8009fc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009f70:	69fb      	ldr	r3, [r7, #28]
 8009f72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f74:	e007      	b.n	8009f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009f76:	2300      	movs	r3, #0
 8009f78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f7a:	e004      	b.n	8009f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f80:	e001      	b.n	8009f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8009f82:	2300      	movs	r3, #0
 8009f84:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8009f86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009f88:	4618      	mov	r0, r3
 8009f8a:	3740      	adds	r7, #64	@ 0x40
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	bd80      	pop	{r7, pc}
 8009f90:	58024400 	.word	0x58024400
 8009f94:	007a1200 	.word	0x007a1200

08009f98 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009f9c:	f7fe f816 	bl	8007fcc <HAL_RCC_GetHCLKFreq>
 8009fa0:	4602      	mov	r2, r0
 8009fa2:	4b06      	ldr	r3, [pc, #24]	@ (8009fbc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009fa4:	6a1b      	ldr	r3, [r3, #32]
 8009fa6:	091b      	lsrs	r3, r3, #4
 8009fa8:	f003 0307 	and.w	r3, r3, #7
 8009fac:	4904      	ldr	r1, [pc, #16]	@ (8009fc0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009fae:	5ccb      	ldrb	r3, [r1, r3]
 8009fb0:	f003 031f 	and.w	r3, r3, #31
 8009fb4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009fb8:	4618      	mov	r0, r3
 8009fba:	bd80      	pop	{r7, pc}
 8009fbc:	58024400 	.word	0x58024400
 8009fc0:	08010648 	.word	0x08010648

08009fc4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009fc4:	b480      	push	{r7}
 8009fc6:	b089      	sub	sp, #36	@ 0x24
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009fcc:	4ba1      	ldr	r3, [pc, #644]	@ (800a254 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009fce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fd0:	f003 0303 	and.w	r3, r3, #3
 8009fd4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8009fd6:	4b9f      	ldr	r3, [pc, #636]	@ (800a254 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009fd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fda:	0b1b      	lsrs	r3, r3, #12
 8009fdc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009fe0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009fe2:	4b9c      	ldr	r3, [pc, #624]	@ (800a254 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009fe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fe6:	091b      	lsrs	r3, r3, #4
 8009fe8:	f003 0301 	and.w	r3, r3, #1
 8009fec:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8009fee:	4b99      	ldr	r3, [pc, #612]	@ (800a254 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ff0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ff2:	08db      	lsrs	r3, r3, #3
 8009ff4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009ff8:	693a      	ldr	r2, [r7, #16]
 8009ffa:	fb02 f303 	mul.w	r3, r2, r3
 8009ffe:	ee07 3a90 	vmov	s15, r3
 800a002:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a006:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a00a:	697b      	ldr	r3, [r7, #20]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	f000 8111 	beq.w	800a234 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a012:	69bb      	ldr	r3, [r7, #24]
 800a014:	2b02      	cmp	r3, #2
 800a016:	f000 8083 	beq.w	800a120 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a01a:	69bb      	ldr	r3, [r7, #24]
 800a01c:	2b02      	cmp	r3, #2
 800a01e:	f200 80a1 	bhi.w	800a164 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a022:	69bb      	ldr	r3, [r7, #24]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d003      	beq.n	800a030 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a028:	69bb      	ldr	r3, [r7, #24]
 800a02a:	2b01      	cmp	r3, #1
 800a02c:	d056      	beq.n	800a0dc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a02e:	e099      	b.n	800a164 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a030:	4b88      	ldr	r3, [pc, #544]	@ (800a254 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	f003 0320 	and.w	r3, r3, #32
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d02d      	beq.n	800a098 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a03c:	4b85      	ldr	r3, [pc, #532]	@ (800a254 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	08db      	lsrs	r3, r3, #3
 800a042:	f003 0303 	and.w	r3, r3, #3
 800a046:	4a84      	ldr	r2, [pc, #528]	@ (800a258 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a048:	fa22 f303 	lsr.w	r3, r2, r3
 800a04c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a04e:	68bb      	ldr	r3, [r7, #8]
 800a050:	ee07 3a90 	vmov	s15, r3
 800a054:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a058:	697b      	ldr	r3, [r7, #20]
 800a05a:	ee07 3a90 	vmov	s15, r3
 800a05e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a062:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a066:	4b7b      	ldr	r3, [pc, #492]	@ (800a254 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a068:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a06a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a06e:	ee07 3a90 	vmov	s15, r3
 800a072:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a076:	ed97 6a03 	vldr	s12, [r7, #12]
 800a07a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800a25c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a07e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a082:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a086:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a08a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a08e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a092:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a096:	e087      	b.n	800a1a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a098:	697b      	ldr	r3, [r7, #20]
 800a09a:	ee07 3a90 	vmov	s15, r3
 800a09e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0a2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800a260 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a0a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0aa:	4b6a      	ldr	r3, [pc, #424]	@ (800a254 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a0ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0b2:	ee07 3a90 	vmov	s15, r3
 800a0b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0ba:	ed97 6a03 	vldr	s12, [r7, #12]
 800a0be:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800a25c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a0c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a0ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a0da:	e065      	b.n	800a1a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a0dc:	697b      	ldr	r3, [r7, #20]
 800a0de:	ee07 3a90 	vmov	s15, r3
 800a0e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0e6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a264 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a0ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0ee:	4b59      	ldr	r3, [pc, #356]	@ (800a254 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a0f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0f6:	ee07 3a90 	vmov	s15, r3
 800a0fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0fe:	ed97 6a03 	vldr	s12, [r7, #12]
 800a102:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800a25c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a106:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a10a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a10e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a112:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a116:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a11a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a11e:	e043      	b.n	800a1a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a120:	697b      	ldr	r3, [r7, #20]
 800a122:	ee07 3a90 	vmov	s15, r3
 800a126:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a12a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800a268 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a12e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a132:	4b48      	ldr	r3, [pc, #288]	@ (800a254 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a134:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a136:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a13a:	ee07 3a90 	vmov	s15, r3
 800a13e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a142:	ed97 6a03 	vldr	s12, [r7, #12]
 800a146:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800a25c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a14a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a14e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a152:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a156:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a15a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a15e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a162:	e021      	b.n	800a1a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a164:	697b      	ldr	r3, [r7, #20]
 800a166:	ee07 3a90 	vmov	s15, r3
 800a16a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a16e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800a264 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a172:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a176:	4b37      	ldr	r3, [pc, #220]	@ (800a254 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a178:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a17a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a17e:	ee07 3a90 	vmov	s15, r3
 800a182:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a186:	ed97 6a03 	vldr	s12, [r7, #12]
 800a18a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800a25c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a18e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a192:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a196:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a19a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a19e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a1a6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800a1a8:	4b2a      	ldr	r3, [pc, #168]	@ (800a254 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a1aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1ac:	0a5b      	lsrs	r3, r3, #9
 800a1ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a1b2:	ee07 3a90 	vmov	s15, r3
 800a1b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a1be:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a1c2:	edd7 6a07 	vldr	s13, [r7, #28]
 800a1c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a1ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a1ce:	ee17 2a90 	vmov	r2, s15
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800a1d6:	4b1f      	ldr	r3, [pc, #124]	@ (800a254 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a1d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1da:	0c1b      	lsrs	r3, r3, #16
 800a1dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a1e0:	ee07 3a90 	vmov	s15, r3
 800a1e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1e8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a1ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a1f0:	edd7 6a07 	vldr	s13, [r7, #28]
 800a1f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a1f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a1fc:	ee17 2a90 	vmov	r2, s15
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800a204:	4b13      	ldr	r3, [pc, #76]	@ (800a254 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a206:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a208:	0e1b      	lsrs	r3, r3, #24
 800a20a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a20e:	ee07 3a90 	vmov	s15, r3
 800a212:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a216:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a21a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a21e:	edd7 6a07 	vldr	s13, [r7, #28]
 800a222:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a226:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a22a:	ee17 2a90 	vmov	r2, s15
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a232:	e008      	b.n	800a246 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	2200      	movs	r2, #0
 800a238:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	2200      	movs	r2, #0
 800a23e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2200      	movs	r2, #0
 800a244:	609a      	str	r2, [r3, #8]
}
 800a246:	bf00      	nop
 800a248:	3724      	adds	r7, #36	@ 0x24
 800a24a:	46bd      	mov	sp, r7
 800a24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a250:	4770      	bx	lr
 800a252:	bf00      	nop
 800a254:	58024400 	.word	0x58024400
 800a258:	03d09000 	.word	0x03d09000
 800a25c:	46000000 	.word	0x46000000
 800a260:	4c742400 	.word	0x4c742400
 800a264:	4a742400 	.word	0x4a742400
 800a268:	4af42400 	.word	0x4af42400

0800a26c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800a26c:	b480      	push	{r7}
 800a26e:	b089      	sub	sp, #36	@ 0x24
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a274:	4ba1      	ldr	r3, [pc, #644]	@ (800a4fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a276:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a278:	f003 0303 	and.w	r3, r3, #3
 800a27c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800a27e:	4b9f      	ldr	r3, [pc, #636]	@ (800a4fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a280:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a282:	0d1b      	lsrs	r3, r3, #20
 800a284:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a288:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a28a:	4b9c      	ldr	r3, [pc, #624]	@ (800a4fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a28c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a28e:	0a1b      	lsrs	r3, r3, #8
 800a290:	f003 0301 	and.w	r3, r3, #1
 800a294:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800a296:	4b99      	ldr	r3, [pc, #612]	@ (800a4fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a29a:	08db      	lsrs	r3, r3, #3
 800a29c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a2a0:	693a      	ldr	r2, [r7, #16]
 800a2a2:	fb02 f303 	mul.w	r3, r2, r3
 800a2a6:	ee07 3a90 	vmov	s15, r3
 800a2aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2ae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a2b2:	697b      	ldr	r3, [r7, #20]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	f000 8111 	beq.w	800a4dc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a2ba:	69bb      	ldr	r3, [r7, #24]
 800a2bc:	2b02      	cmp	r3, #2
 800a2be:	f000 8083 	beq.w	800a3c8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a2c2:	69bb      	ldr	r3, [r7, #24]
 800a2c4:	2b02      	cmp	r3, #2
 800a2c6:	f200 80a1 	bhi.w	800a40c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a2ca:	69bb      	ldr	r3, [r7, #24]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d003      	beq.n	800a2d8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a2d0:	69bb      	ldr	r3, [r7, #24]
 800a2d2:	2b01      	cmp	r3, #1
 800a2d4:	d056      	beq.n	800a384 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a2d6:	e099      	b.n	800a40c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a2d8:	4b88      	ldr	r3, [pc, #544]	@ (800a4fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	f003 0320 	and.w	r3, r3, #32
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d02d      	beq.n	800a340 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a2e4:	4b85      	ldr	r3, [pc, #532]	@ (800a4fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	08db      	lsrs	r3, r3, #3
 800a2ea:	f003 0303 	and.w	r3, r3, #3
 800a2ee:	4a84      	ldr	r2, [pc, #528]	@ (800a500 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a2f0:	fa22 f303 	lsr.w	r3, r2, r3
 800a2f4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a2f6:	68bb      	ldr	r3, [r7, #8]
 800a2f8:	ee07 3a90 	vmov	s15, r3
 800a2fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a300:	697b      	ldr	r3, [r7, #20]
 800a302:	ee07 3a90 	vmov	s15, r3
 800a306:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a30a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a30e:	4b7b      	ldr	r3, [pc, #492]	@ (800a4fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a312:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a316:	ee07 3a90 	vmov	s15, r3
 800a31a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a31e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a322:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800a504 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a326:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a32a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a32e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a332:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a336:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a33a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a33e:	e087      	b.n	800a450 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a340:	697b      	ldr	r3, [r7, #20]
 800a342:	ee07 3a90 	vmov	s15, r3
 800a346:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a34a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800a508 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a34e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a352:	4b6a      	ldr	r3, [pc, #424]	@ (800a4fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a356:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a35a:	ee07 3a90 	vmov	s15, r3
 800a35e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a362:	ed97 6a03 	vldr	s12, [r7, #12]
 800a366:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800a504 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a36a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a36e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a372:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a376:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a37a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a37e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a382:	e065      	b.n	800a450 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a384:	697b      	ldr	r3, [r7, #20]
 800a386:	ee07 3a90 	vmov	s15, r3
 800a38a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a38e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a50c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a392:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a396:	4b59      	ldr	r3, [pc, #356]	@ (800a4fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a39a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a39e:	ee07 3a90 	vmov	s15, r3
 800a3a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a3a6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a3aa:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800a504 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a3ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a3b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a3b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a3ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a3be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a3c6:	e043      	b.n	800a450 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a3c8:	697b      	ldr	r3, [r7, #20]
 800a3ca:	ee07 3a90 	vmov	s15, r3
 800a3ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3d2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800a510 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a3d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a3da:	4b48      	ldr	r3, [pc, #288]	@ (800a4fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a3dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3e2:	ee07 3a90 	vmov	s15, r3
 800a3e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a3ea:	ed97 6a03 	vldr	s12, [r7, #12]
 800a3ee:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800a504 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a3f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a3f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a3fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a3fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a402:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a406:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a40a:	e021      	b.n	800a450 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a40c:	697b      	ldr	r3, [r7, #20]
 800a40e:	ee07 3a90 	vmov	s15, r3
 800a412:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a416:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800a50c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a41a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a41e:	4b37      	ldr	r3, [pc, #220]	@ (800a4fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a422:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a426:	ee07 3a90 	vmov	s15, r3
 800a42a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a42e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a432:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800a504 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a436:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a43a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a43e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a442:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a446:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a44a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a44e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800a450:	4b2a      	ldr	r3, [pc, #168]	@ (800a4fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a454:	0a5b      	lsrs	r3, r3, #9
 800a456:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a45a:	ee07 3a90 	vmov	s15, r3
 800a45e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a462:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a466:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a46a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a46e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a472:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a476:	ee17 2a90 	vmov	r2, s15
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800a47e:	4b1f      	ldr	r3, [pc, #124]	@ (800a4fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a482:	0c1b      	lsrs	r3, r3, #16
 800a484:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a488:	ee07 3a90 	vmov	s15, r3
 800a48c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a490:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a494:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a498:	edd7 6a07 	vldr	s13, [r7, #28]
 800a49c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a4a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a4a4:	ee17 2a90 	vmov	r2, s15
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800a4ac:	4b13      	ldr	r3, [pc, #76]	@ (800a4fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a4ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4b0:	0e1b      	lsrs	r3, r3, #24
 800a4b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a4b6:	ee07 3a90 	vmov	s15, r3
 800a4ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a4c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a4c6:	edd7 6a07 	vldr	s13, [r7, #28]
 800a4ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a4ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a4d2:	ee17 2a90 	vmov	r2, s15
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a4da:	e008      	b.n	800a4ee <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	2200      	movs	r2, #0
 800a4e0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	609a      	str	r2, [r3, #8]
}
 800a4ee:	bf00      	nop
 800a4f0:	3724      	adds	r7, #36	@ 0x24
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f8:	4770      	bx	lr
 800a4fa:	bf00      	nop
 800a4fc:	58024400 	.word	0x58024400
 800a500:	03d09000 	.word	0x03d09000
 800a504:	46000000 	.word	0x46000000
 800a508:	4c742400 	.word	0x4c742400
 800a50c:	4a742400 	.word	0x4a742400
 800a510:	4af42400 	.word	0x4af42400

0800a514 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800a514:	b480      	push	{r7}
 800a516:	b089      	sub	sp, #36	@ 0x24
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a51c:	4ba0      	ldr	r3, [pc, #640]	@ (800a7a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a51e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a520:	f003 0303 	and.w	r3, r3, #3
 800a524:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800a526:	4b9e      	ldr	r3, [pc, #632]	@ (800a7a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a528:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a52a:	091b      	lsrs	r3, r3, #4
 800a52c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a530:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800a532:	4b9b      	ldr	r3, [pc, #620]	@ (800a7a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a536:	f003 0301 	and.w	r3, r3, #1
 800a53a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a53c:	4b98      	ldr	r3, [pc, #608]	@ (800a7a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a53e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a540:	08db      	lsrs	r3, r3, #3
 800a542:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a546:	693a      	ldr	r2, [r7, #16]
 800a548:	fb02 f303 	mul.w	r3, r2, r3
 800a54c:	ee07 3a90 	vmov	s15, r3
 800a550:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a554:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800a558:	697b      	ldr	r3, [r7, #20]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	f000 8111 	beq.w	800a782 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800a560:	69bb      	ldr	r3, [r7, #24]
 800a562:	2b02      	cmp	r3, #2
 800a564:	f000 8083 	beq.w	800a66e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800a568:	69bb      	ldr	r3, [r7, #24]
 800a56a:	2b02      	cmp	r3, #2
 800a56c:	f200 80a1 	bhi.w	800a6b2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800a570:	69bb      	ldr	r3, [r7, #24]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d003      	beq.n	800a57e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800a576:	69bb      	ldr	r3, [r7, #24]
 800a578:	2b01      	cmp	r3, #1
 800a57a:	d056      	beq.n	800a62a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800a57c:	e099      	b.n	800a6b2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a57e:	4b88      	ldr	r3, [pc, #544]	@ (800a7a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	f003 0320 	and.w	r3, r3, #32
 800a586:	2b00      	cmp	r3, #0
 800a588:	d02d      	beq.n	800a5e6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a58a:	4b85      	ldr	r3, [pc, #532]	@ (800a7a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	08db      	lsrs	r3, r3, #3
 800a590:	f003 0303 	and.w	r3, r3, #3
 800a594:	4a83      	ldr	r2, [pc, #524]	@ (800a7a4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800a596:	fa22 f303 	lsr.w	r3, r2, r3
 800a59a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a59c:	68bb      	ldr	r3, [r7, #8]
 800a59e:	ee07 3a90 	vmov	s15, r3
 800a5a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5a6:	697b      	ldr	r3, [r7, #20]
 800a5a8:	ee07 3a90 	vmov	s15, r3
 800a5ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a5b4:	4b7a      	ldr	r3, [pc, #488]	@ (800a7a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a5b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a5b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5bc:	ee07 3a90 	vmov	s15, r3
 800a5c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5c4:	ed97 6a03 	vldr	s12, [r7, #12]
 800a5c8:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800a7a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a5cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a5d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a5d4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a5d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a5dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5e0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a5e4:	e087      	b.n	800a6f6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a5e6:	697b      	ldr	r3, [r7, #20]
 800a5e8:	ee07 3a90 	vmov	s15, r3
 800a5ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5f0:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800a7ac <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a5f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a5f8:	4b69      	ldr	r3, [pc, #420]	@ (800a7a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a5fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a5fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a600:	ee07 3a90 	vmov	s15, r3
 800a604:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a608:	ed97 6a03 	vldr	s12, [r7, #12]
 800a60c:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800a7a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a610:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a614:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a618:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a61c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a620:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a624:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a628:	e065      	b.n	800a6f6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a62a:	697b      	ldr	r3, [r7, #20]
 800a62c:	ee07 3a90 	vmov	s15, r3
 800a630:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a634:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800a7b0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800a638:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a63c:	4b58      	ldr	r3, [pc, #352]	@ (800a7a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a63e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a640:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a644:	ee07 3a90 	vmov	s15, r3
 800a648:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a64c:	ed97 6a03 	vldr	s12, [r7, #12]
 800a650:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800a7a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a654:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a658:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a65c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a660:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a664:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a668:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a66c:	e043      	b.n	800a6f6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a66e:	697b      	ldr	r3, [r7, #20]
 800a670:	ee07 3a90 	vmov	s15, r3
 800a674:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a678:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800a7b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800a67c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a680:	4b47      	ldr	r3, [pc, #284]	@ (800a7a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a682:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a684:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a688:	ee07 3a90 	vmov	s15, r3
 800a68c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a690:	ed97 6a03 	vldr	s12, [r7, #12]
 800a694:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800a7a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a698:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a69c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a6a0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a6a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a6a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6ac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a6b0:	e021      	b.n	800a6f6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a6b2:	697b      	ldr	r3, [r7, #20]
 800a6b4:	ee07 3a90 	vmov	s15, r3
 800a6b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6bc:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800a7ac <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a6c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a6c4:	4b36      	ldr	r3, [pc, #216]	@ (800a7a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a6c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a6c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6cc:	ee07 3a90 	vmov	s15, r3
 800a6d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a6d4:	ed97 6a03 	vldr	s12, [r7, #12]
 800a6d8:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800a7a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a6dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a6e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a6e4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a6e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a6ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6f0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a6f4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800a6f6:	4b2a      	ldr	r3, [pc, #168]	@ (800a7a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a6f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a6fa:	0a5b      	lsrs	r3, r3, #9
 800a6fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a700:	ee07 3a90 	vmov	s15, r3
 800a704:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a708:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a70c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a710:	edd7 6a07 	vldr	s13, [r7, #28]
 800a714:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a718:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a71c:	ee17 2a90 	vmov	r2, s15
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800a724:	4b1e      	ldr	r3, [pc, #120]	@ (800a7a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a726:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a728:	0c1b      	lsrs	r3, r3, #16
 800a72a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a72e:	ee07 3a90 	vmov	s15, r3
 800a732:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a736:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a73a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a73e:	edd7 6a07 	vldr	s13, [r7, #28]
 800a742:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a746:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a74a:	ee17 2a90 	vmov	r2, s15
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800a752:	4b13      	ldr	r3, [pc, #76]	@ (800a7a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a756:	0e1b      	lsrs	r3, r3, #24
 800a758:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a75c:	ee07 3a90 	vmov	s15, r3
 800a760:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a764:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a768:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a76c:	edd7 6a07 	vldr	s13, [r7, #28]
 800a770:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a774:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a778:	ee17 2a90 	vmov	r2, s15
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a780:	e008      	b.n	800a794 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	2200      	movs	r2, #0
 800a786:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	2200      	movs	r2, #0
 800a78c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	2200      	movs	r2, #0
 800a792:	609a      	str	r2, [r3, #8]
}
 800a794:	bf00      	nop
 800a796:	3724      	adds	r7, #36	@ 0x24
 800a798:	46bd      	mov	sp, r7
 800a79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79e:	4770      	bx	lr
 800a7a0:	58024400 	.word	0x58024400
 800a7a4:	03d09000 	.word	0x03d09000
 800a7a8:	46000000 	.word	0x46000000
 800a7ac:	4c742400 	.word	0x4c742400
 800a7b0:	4a742400 	.word	0x4a742400
 800a7b4:	4af42400 	.word	0x4af42400

0800a7b8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b084      	sub	sp, #16
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
 800a7c0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a7c6:	4b53      	ldr	r3, [pc, #332]	@ (800a914 <RCCEx_PLL2_Config+0x15c>)
 800a7c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7ca:	f003 0303 	and.w	r3, r3, #3
 800a7ce:	2b03      	cmp	r3, #3
 800a7d0:	d101      	bne.n	800a7d6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a7d2:	2301      	movs	r3, #1
 800a7d4:	e099      	b.n	800a90a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a7d6:	4b4f      	ldr	r3, [pc, #316]	@ (800a914 <RCCEx_PLL2_Config+0x15c>)
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	4a4e      	ldr	r2, [pc, #312]	@ (800a914 <RCCEx_PLL2_Config+0x15c>)
 800a7dc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a7e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a7e2:	f7f7 fe45 	bl	8002470 <HAL_GetTick>
 800a7e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a7e8:	e008      	b.n	800a7fc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a7ea:	f7f7 fe41 	bl	8002470 <HAL_GetTick>
 800a7ee:	4602      	mov	r2, r0
 800a7f0:	68bb      	ldr	r3, [r7, #8]
 800a7f2:	1ad3      	subs	r3, r2, r3
 800a7f4:	2b02      	cmp	r3, #2
 800a7f6:	d901      	bls.n	800a7fc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a7f8:	2303      	movs	r3, #3
 800a7fa:	e086      	b.n	800a90a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a7fc:	4b45      	ldr	r3, [pc, #276]	@ (800a914 <RCCEx_PLL2_Config+0x15c>)
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a804:	2b00      	cmp	r3, #0
 800a806:	d1f0      	bne.n	800a7ea <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a808:	4b42      	ldr	r3, [pc, #264]	@ (800a914 <RCCEx_PLL2_Config+0x15c>)
 800a80a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a80c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	031b      	lsls	r3, r3, #12
 800a816:	493f      	ldr	r1, [pc, #252]	@ (800a914 <RCCEx_PLL2_Config+0x15c>)
 800a818:	4313      	orrs	r3, r2
 800a81a:	628b      	str	r3, [r1, #40]	@ 0x28
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	685b      	ldr	r3, [r3, #4]
 800a820:	3b01      	subs	r3, #1
 800a822:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	689b      	ldr	r3, [r3, #8]
 800a82a:	3b01      	subs	r3, #1
 800a82c:	025b      	lsls	r3, r3, #9
 800a82e:	b29b      	uxth	r3, r3
 800a830:	431a      	orrs	r2, r3
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	68db      	ldr	r3, [r3, #12]
 800a836:	3b01      	subs	r3, #1
 800a838:	041b      	lsls	r3, r3, #16
 800a83a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a83e:	431a      	orrs	r2, r3
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	691b      	ldr	r3, [r3, #16]
 800a844:	3b01      	subs	r3, #1
 800a846:	061b      	lsls	r3, r3, #24
 800a848:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a84c:	4931      	ldr	r1, [pc, #196]	@ (800a914 <RCCEx_PLL2_Config+0x15c>)
 800a84e:	4313      	orrs	r3, r2
 800a850:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a852:	4b30      	ldr	r3, [pc, #192]	@ (800a914 <RCCEx_PLL2_Config+0x15c>)
 800a854:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a856:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	695b      	ldr	r3, [r3, #20]
 800a85e:	492d      	ldr	r1, [pc, #180]	@ (800a914 <RCCEx_PLL2_Config+0x15c>)
 800a860:	4313      	orrs	r3, r2
 800a862:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a864:	4b2b      	ldr	r3, [pc, #172]	@ (800a914 <RCCEx_PLL2_Config+0x15c>)
 800a866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a868:	f023 0220 	bic.w	r2, r3, #32
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	699b      	ldr	r3, [r3, #24]
 800a870:	4928      	ldr	r1, [pc, #160]	@ (800a914 <RCCEx_PLL2_Config+0x15c>)
 800a872:	4313      	orrs	r3, r2
 800a874:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a876:	4b27      	ldr	r3, [pc, #156]	@ (800a914 <RCCEx_PLL2_Config+0x15c>)
 800a878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a87a:	4a26      	ldr	r2, [pc, #152]	@ (800a914 <RCCEx_PLL2_Config+0x15c>)
 800a87c:	f023 0310 	bic.w	r3, r3, #16
 800a880:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a882:	4b24      	ldr	r3, [pc, #144]	@ (800a914 <RCCEx_PLL2_Config+0x15c>)
 800a884:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a886:	4b24      	ldr	r3, [pc, #144]	@ (800a918 <RCCEx_PLL2_Config+0x160>)
 800a888:	4013      	ands	r3, r2
 800a88a:	687a      	ldr	r2, [r7, #4]
 800a88c:	69d2      	ldr	r2, [r2, #28]
 800a88e:	00d2      	lsls	r2, r2, #3
 800a890:	4920      	ldr	r1, [pc, #128]	@ (800a914 <RCCEx_PLL2_Config+0x15c>)
 800a892:	4313      	orrs	r3, r2
 800a894:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a896:	4b1f      	ldr	r3, [pc, #124]	@ (800a914 <RCCEx_PLL2_Config+0x15c>)
 800a898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a89a:	4a1e      	ldr	r2, [pc, #120]	@ (800a914 <RCCEx_PLL2_Config+0x15c>)
 800a89c:	f043 0310 	orr.w	r3, r3, #16
 800a8a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a8a2:	683b      	ldr	r3, [r7, #0]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d106      	bne.n	800a8b6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a8a8:	4b1a      	ldr	r3, [pc, #104]	@ (800a914 <RCCEx_PLL2_Config+0x15c>)
 800a8aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8ac:	4a19      	ldr	r2, [pc, #100]	@ (800a914 <RCCEx_PLL2_Config+0x15c>)
 800a8ae:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a8b2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a8b4:	e00f      	b.n	800a8d6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a8b6:	683b      	ldr	r3, [r7, #0]
 800a8b8:	2b01      	cmp	r3, #1
 800a8ba:	d106      	bne.n	800a8ca <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a8bc:	4b15      	ldr	r3, [pc, #84]	@ (800a914 <RCCEx_PLL2_Config+0x15c>)
 800a8be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8c0:	4a14      	ldr	r2, [pc, #80]	@ (800a914 <RCCEx_PLL2_Config+0x15c>)
 800a8c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a8c6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a8c8:	e005      	b.n	800a8d6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a8ca:	4b12      	ldr	r3, [pc, #72]	@ (800a914 <RCCEx_PLL2_Config+0x15c>)
 800a8cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8ce:	4a11      	ldr	r2, [pc, #68]	@ (800a914 <RCCEx_PLL2_Config+0x15c>)
 800a8d0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a8d4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a8d6:	4b0f      	ldr	r3, [pc, #60]	@ (800a914 <RCCEx_PLL2_Config+0x15c>)
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	4a0e      	ldr	r2, [pc, #56]	@ (800a914 <RCCEx_PLL2_Config+0x15c>)
 800a8dc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a8e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a8e2:	f7f7 fdc5 	bl	8002470 <HAL_GetTick>
 800a8e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a8e8:	e008      	b.n	800a8fc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a8ea:	f7f7 fdc1 	bl	8002470 <HAL_GetTick>
 800a8ee:	4602      	mov	r2, r0
 800a8f0:	68bb      	ldr	r3, [r7, #8]
 800a8f2:	1ad3      	subs	r3, r2, r3
 800a8f4:	2b02      	cmp	r3, #2
 800a8f6:	d901      	bls.n	800a8fc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a8f8:	2303      	movs	r3, #3
 800a8fa:	e006      	b.n	800a90a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a8fc:	4b05      	ldr	r3, [pc, #20]	@ (800a914 <RCCEx_PLL2_Config+0x15c>)
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a904:	2b00      	cmp	r3, #0
 800a906:	d0f0      	beq.n	800a8ea <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a908:	7bfb      	ldrb	r3, [r7, #15]
}
 800a90a:	4618      	mov	r0, r3
 800a90c:	3710      	adds	r7, #16
 800a90e:	46bd      	mov	sp, r7
 800a910:	bd80      	pop	{r7, pc}
 800a912:	bf00      	nop
 800a914:	58024400 	.word	0x58024400
 800a918:	ffff0007 	.word	0xffff0007

0800a91c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b084      	sub	sp, #16
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
 800a924:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a926:	2300      	movs	r3, #0
 800a928:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a92a:	4b53      	ldr	r3, [pc, #332]	@ (800aa78 <RCCEx_PLL3_Config+0x15c>)
 800a92c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a92e:	f003 0303 	and.w	r3, r3, #3
 800a932:	2b03      	cmp	r3, #3
 800a934:	d101      	bne.n	800a93a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a936:	2301      	movs	r3, #1
 800a938:	e099      	b.n	800aa6e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a93a:	4b4f      	ldr	r3, [pc, #316]	@ (800aa78 <RCCEx_PLL3_Config+0x15c>)
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	4a4e      	ldr	r2, [pc, #312]	@ (800aa78 <RCCEx_PLL3_Config+0x15c>)
 800a940:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a944:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a946:	f7f7 fd93 	bl	8002470 <HAL_GetTick>
 800a94a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a94c:	e008      	b.n	800a960 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a94e:	f7f7 fd8f 	bl	8002470 <HAL_GetTick>
 800a952:	4602      	mov	r2, r0
 800a954:	68bb      	ldr	r3, [r7, #8]
 800a956:	1ad3      	subs	r3, r2, r3
 800a958:	2b02      	cmp	r3, #2
 800a95a:	d901      	bls.n	800a960 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a95c:	2303      	movs	r3, #3
 800a95e:	e086      	b.n	800aa6e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a960:	4b45      	ldr	r3, [pc, #276]	@ (800aa78 <RCCEx_PLL3_Config+0x15c>)
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d1f0      	bne.n	800a94e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a96c:	4b42      	ldr	r3, [pc, #264]	@ (800aa78 <RCCEx_PLL3_Config+0x15c>)
 800a96e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a970:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	051b      	lsls	r3, r3, #20
 800a97a:	493f      	ldr	r1, [pc, #252]	@ (800aa78 <RCCEx_PLL3_Config+0x15c>)
 800a97c:	4313      	orrs	r3, r2
 800a97e:	628b      	str	r3, [r1, #40]	@ 0x28
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	685b      	ldr	r3, [r3, #4]
 800a984:	3b01      	subs	r3, #1
 800a986:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	689b      	ldr	r3, [r3, #8]
 800a98e:	3b01      	subs	r3, #1
 800a990:	025b      	lsls	r3, r3, #9
 800a992:	b29b      	uxth	r3, r3
 800a994:	431a      	orrs	r2, r3
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	68db      	ldr	r3, [r3, #12]
 800a99a:	3b01      	subs	r3, #1
 800a99c:	041b      	lsls	r3, r3, #16
 800a99e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a9a2:	431a      	orrs	r2, r3
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	691b      	ldr	r3, [r3, #16]
 800a9a8:	3b01      	subs	r3, #1
 800a9aa:	061b      	lsls	r3, r3, #24
 800a9ac:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a9b0:	4931      	ldr	r1, [pc, #196]	@ (800aa78 <RCCEx_PLL3_Config+0x15c>)
 800a9b2:	4313      	orrs	r3, r2
 800a9b4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a9b6:	4b30      	ldr	r3, [pc, #192]	@ (800aa78 <RCCEx_PLL3_Config+0x15c>)
 800a9b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9ba:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	695b      	ldr	r3, [r3, #20]
 800a9c2:	492d      	ldr	r1, [pc, #180]	@ (800aa78 <RCCEx_PLL3_Config+0x15c>)
 800a9c4:	4313      	orrs	r3, r2
 800a9c6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a9c8:	4b2b      	ldr	r3, [pc, #172]	@ (800aa78 <RCCEx_PLL3_Config+0x15c>)
 800a9ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9cc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	699b      	ldr	r3, [r3, #24]
 800a9d4:	4928      	ldr	r1, [pc, #160]	@ (800aa78 <RCCEx_PLL3_Config+0x15c>)
 800a9d6:	4313      	orrs	r3, r2
 800a9d8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a9da:	4b27      	ldr	r3, [pc, #156]	@ (800aa78 <RCCEx_PLL3_Config+0x15c>)
 800a9dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9de:	4a26      	ldr	r2, [pc, #152]	@ (800aa78 <RCCEx_PLL3_Config+0x15c>)
 800a9e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a9e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a9e6:	4b24      	ldr	r3, [pc, #144]	@ (800aa78 <RCCEx_PLL3_Config+0x15c>)
 800a9e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a9ea:	4b24      	ldr	r3, [pc, #144]	@ (800aa7c <RCCEx_PLL3_Config+0x160>)
 800a9ec:	4013      	ands	r3, r2
 800a9ee:	687a      	ldr	r2, [r7, #4]
 800a9f0:	69d2      	ldr	r2, [r2, #28]
 800a9f2:	00d2      	lsls	r2, r2, #3
 800a9f4:	4920      	ldr	r1, [pc, #128]	@ (800aa78 <RCCEx_PLL3_Config+0x15c>)
 800a9f6:	4313      	orrs	r3, r2
 800a9f8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a9fa:	4b1f      	ldr	r3, [pc, #124]	@ (800aa78 <RCCEx_PLL3_Config+0x15c>)
 800a9fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9fe:	4a1e      	ldr	r2, [pc, #120]	@ (800aa78 <RCCEx_PLL3_Config+0x15c>)
 800aa00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800aa04:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800aa06:	683b      	ldr	r3, [r7, #0]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d106      	bne.n	800aa1a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800aa0c:	4b1a      	ldr	r3, [pc, #104]	@ (800aa78 <RCCEx_PLL3_Config+0x15c>)
 800aa0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa10:	4a19      	ldr	r2, [pc, #100]	@ (800aa78 <RCCEx_PLL3_Config+0x15c>)
 800aa12:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800aa16:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800aa18:	e00f      	b.n	800aa3a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800aa1a:	683b      	ldr	r3, [r7, #0]
 800aa1c:	2b01      	cmp	r3, #1
 800aa1e:	d106      	bne.n	800aa2e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800aa20:	4b15      	ldr	r3, [pc, #84]	@ (800aa78 <RCCEx_PLL3_Config+0x15c>)
 800aa22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa24:	4a14      	ldr	r2, [pc, #80]	@ (800aa78 <RCCEx_PLL3_Config+0x15c>)
 800aa26:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800aa2a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800aa2c:	e005      	b.n	800aa3a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800aa2e:	4b12      	ldr	r3, [pc, #72]	@ (800aa78 <RCCEx_PLL3_Config+0x15c>)
 800aa30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa32:	4a11      	ldr	r2, [pc, #68]	@ (800aa78 <RCCEx_PLL3_Config+0x15c>)
 800aa34:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800aa38:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800aa3a:	4b0f      	ldr	r3, [pc, #60]	@ (800aa78 <RCCEx_PLL3_Config+0x15c>)
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	4a0e      	ldr	r2, [pc, #56]	@ (800aa78 <RCCEx_PLL3_Config+0x15c>)
 800aa40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800aa44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aa46:	f7f7 fd13 	bl	8002470 <HAL_GetTick>
 800aa4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800aa4c:	e008      	b.n	800aa60 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800aa4e:	f7f7 fd0f 	bl	8002470 <HAL_GetTick>
 800aa52:	4602      	mov	r2, r0
 800aa54:	68bb      	ldr	r3, [r7, #8]
 800aa56:	1ad3      	subs	r3, r2, r3
 800aa58:	2b02      	cmp	r3, #2
 800aa5a:	d901      	bls.n	800aa60 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800aa5c:	2303      	movs	r3, #3
 800aa5e:	e006      	b.n	800aa6e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800aa60:	4b05      	ldr	r3, [pc, #20]	@ (800aa78 <RCCEx_PLL3_Config+0x15c>)
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d0f0      	beq.n	800aa4e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800aa6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa6e:	4618      	mov	r0, r3
 800aa70:	3710      	adds	r7, #16
 800aa72:	46bd      	mov	sp, r7
 800aa74:	bd80      	pop	{r7, pc}
 800aa76:	bf00      	nop
 800aa78:	58024400 	.word	0x58024400
 800aa7c:	ffff0007 	.word	0xffff0007

0800aa80 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b084      	sub	sp, #16
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d101      	bne.n	800aa92 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800aa8e:	2301      	movs	r3, #1
 800aa90:	e10f      	b.n	800acb2 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	2200      	movs	r2, #0
 800aa96:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	4a87      	ldr	r2, [pc, #540]	@ (800acbc <HAL_SPI_Init+0x23c>)
 800aa9e:	4293      	cmp	r3, r2
 800aaa0:	d00f      	beq.n	800aac2 <HAL_SPI_Init+0x42>
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	4a86      	ldr	r2, [pc, #536]	@ (800acc0 <HAL_SPI_Init+0x240>)
 800aaa8:	4293      	cmp	r3, r2
 800aaaa:	d00a      	beq.n	800aac2 <HAL_SPI_Init+0x42>
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	4a84      	ldr	r2, [pc, #528]	@ (800acc4 <HAL_SPI_Init+0x244>)
 800aab2:	4293      	cmp	r3, r2
 800aab4:	d005      	beq.n	800aac2 <HAL_SPI_Init+0x42>
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	68db      	ldr	r3, [r3, #12]
 800aaba:	2b0f      	cmp	r3, #15
 800aabc:	d901      	bls.n	800aac2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800aabe:	2301      	movs	r3, #1
 800aac0:	e0f7      	b.n	800acb2 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800aac2:	6878      	ldr	r0, [r7, #4]
 800aac4:	f000 fbba 	bl	800b23c <SPI_GetPacketSize>
 800aac8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	4a7b      	ldr	r2, [pc, #492]	@ (800acbc <HAL_SPI_Init+0x23c>)
 800aad0:	4293      	cmp	r3, r2
 800aad2:	d00c      	beq.n	800aaee <HAL_SPI_Init+0x6e>
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	4a79      	ldr	r2, [pc, #484]	@ (800acc0 <HAL_SPI_Init+0x240>)
 800aada:	4293      	cmp	r3, r2
 800aadc:	d007      	beq.n	800aaee <HAL_SPI_Init+0x6e>
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	4a78      	ldr	r2, [pc, #480]	@ (800acc4 <HAL_SPI_Init+0x244>)
 800aae4:	4293      	cmp	r3, r2
 800aae6:	d002      	beq.n	800aaee <HAL_SPI_Init+0x6e>
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	2b08      	cmp	r3, #8
 800aaec:	d811      	bhi.n	800ab12 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800aaf2:	4a72      	ldr	r2, [pc, #456]	@ (800acbc <HAL_SPI_Init+0x23c>)
 800aaf4:	4293      	cmp	r3, r2
 800aaf6:	d009      	beq.n	800ab0c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	4a70      	ldr	r2, [pc, #448]	@ (800acc0 <HAL_SPI_Init+0x240>)
 800aafe:	4293      	cmp	r3, r2
 800ab00:	d004      	beq.n	800ab0c <HAL_SPI_Init+0x8c>
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	4a6f      	ldr	r2, [pc, #444]	@ (800acc4 <HAL_SPI_Init+0x244>)
 800ab08:	4293      	cmp	r3, r2
 800ab0a:	d104      	bne.n	800ab16 <HAL_SPI_Init+0x96>
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	2b10      	cmp	r3, #16
 800ab10:	d901      	bls.n	800ab16 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800ab12:	2301      	movs	r3, #1
 800ab14:	e0cd      	b.n	800acb2 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800ab1c:	b2db      	uxtb	r3, r3
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d106      	bne.n	800ab30 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	2200      	movs	r2, #0
 800ab26:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ab2a:	6878      	ldr	r0, [r7, #4]
 800ab2c:	f7f6 fff4 	bl	8001b18 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	2202      	movs	r2, #2
 800ab34:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	681a      	ldr	r2, [r3, #0]
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	f022 0201 	bic.w	r2, r2, #1
 800ab46:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	689b      	ldr	r3, [r3, #8]
 800ab4e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800ab52:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	699b      	ldr	r3, [r3, #24]
 800ab58:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ab5c:	d119      	bne.n	800ab92 <HAL_SPI_Init+0x112>
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	685b      	ldr	r3, [r3, #4]
 800ab62:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ab66:	d103      	bne.n	800ab70 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d008      	beq.n	800ab82 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d10c      	bne.n	800ab92 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ab7c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ab80:	d107      	bne.n	800ab92 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	681a      	ldr	r2, [r3, #0]
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800ab90:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	685b      	ldr	r3, [r3, #4]
 800ab96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d00f      	beq.n	800abbe <HAL_SPI_Init+0x13e>
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	68db      	ldr	r3, [r3, #12]
 800aba2:	2b06      	cmp	r3, #6
 800aba4:	d90b      	bls.n	800abbe <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	430a      	orrs	r2, r1
 800abba:	601a      	str	r2, [r3, #0]
 800abbc:	e007      	b.n	800abce <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	681a      	ldr	r2, [r3, #0]
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800abcc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	69da      	ldr	r2, [r3, #28]
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abd6:	431a      	orrs	r2, r3
 800abd8:	68bb      	ldr	r3, [r7, #8]
 800abda:	431a      	orrs	r2, r3
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800abe0:	ea42 0103 	orr.w	r1, r2, r3
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	68da      	ldr	r2, [r3, #12]
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	430a      	orrs	r2, r1
 800abee:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abf8:	431a      	orrs	r2, r3
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abfe:	431a      	orrs	r2, r3
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	699b      	ldr	r3, [r3, #24]
 800ac04:	431a      	orrs	r2, r3
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	691b      	ldr	r3, [r3, #16]
 800ac0a:	431a      	orrs	r2, r3
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	695b      	ldr	r3, [r3, #20]
 800ac10:	431a      	orrs	r2, r3
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	6a1b      	ldr	r3, [r3, #32]
 800ac16:	431a      	orrs	r2, r3
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	685b      	ldr	r3, [r3, #4]
 800ac1c:	431a      	orrs	r2, r3
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ac22:	431a      	orrs	r2, r3
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	689b      	ldr	r3, [r3, #8]
 800ac28:	431a      	orrs	r2, r3
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ac2e:	ea42 0103 	orr.w	r1, r2, r3
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	430a      	orrs	r2, r1
 800ac3c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	685b      	ldr	r3, [r3, #4]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d113      	bne.n	800ac6e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	689b      	ldr	r3, [r3, #8]
 800ac4c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ac58:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	689b      	ldr	r3, [r3, #8]
 800ac60:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800ac6c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	f022 0201 	bic.w	r2, r2, #1
 800ac7c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	685b      	ldr	r3, [r3, #4]
 800ac82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d00a      	beq.n	800aca0 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	68db      	ldr	r3, [r3, #12]
 800ac90:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	430a      	orrs	r2, r1
 800ac9e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	2200      	movs	r2, #0
 800aca4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	2201      	movs	r2, #1
 800acac:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800acb0:	2300      	movs	r3, #0
}
 800acb2:	4618      	mov	r0, r3
 800acb4:	3710      	adds	r7, #16
 800acb6:	46bd      	mov	sp, r7
 800acb8:	bd80      	pop	{r7, pc}
 800acba:	bf00      	nop
 800acbc:	40013000 	.word	0x40013000
 800acc0:	40003800 	.word	0x40003800
 800acc4:	40003c00 	.word	0x40003c00

0800acc8 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b08a      	sub	sp, #40	@ 0x28
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	691b      	ldr	r3, [r3, #16]
 800acd6:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	695b      	ldr	r3, [r3, #20]
 800acde:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800ace0:	6a3a      	ldr	r2, [r7, #32]
 800ace2:	69fb      	ldr	r3, [r7, #28]
 800ace4:	4013      	ands	r3, r2
 800ace6:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	689b      	ldr	r3, [r3, #8]
 800acee:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800acf0:	2300      	movs	r3, #0
 800acf2:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800acfa:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	3330      	adds	r3, #48	@ 0x30
 800ad02:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800ad04:	69fb      	ldr	r3, [r7, #28]
 800ad06:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d010      	beq.n	800ad30 <HAL_SPI_IRQHandler+0x68>
 800ad0e:	6a3b      	ldr	r3, [r7, #32]
 800ad10:	f003 0308 	and.w	r3, r3, #8
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d00b      	beq.n	800ad30 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	699a      	ldr	r2, [r3, #24]
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ad26:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 800ad28:	6878      	ldr	r0, [r7, #4]
 800ad2a:	f000 f9c3 	bl	800b0b4 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 800ad2e:	e192      	b.n	800b056 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800ad30:	69bb      	ldr	r3, [r7, #24]
 800ad32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d113      	bne.n	800ad62 <HAL_SPI_IRQHandler+0x9a>
 800ad3a:	69bb      	ldr	r3, [r7, #24]
 800ad3c:	f003 0320 	and.w	r3, r3, #32
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d10e      	bne.n	800ad62 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800ad44:	69bb      	ldr	r3, [r7, #24]
 800ad46:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d009      	beq.n	800ad62 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ad52:	6878      	ldr	r0, [r7, #4]
 800ad54:	4798      	blx	r3
    hspi->RxISR(hspi);
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ad5a:	6878      	ldr	r0, [r7, #4]
 800ad5c:	4798      	blx	r3
    handled = 1UL;
 800ad5e:	2301      	movs	r3, #1
 800ad60:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800ad62:	69bb      	ldr	r3, [r7, #24]
 800ad64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d10f      	bne.n	800ad8c <HAL_SPI_IRQHandler+0xc4>
 800ad6c:	69bb      	ldr	r3, [r7, #24]
 800ad6e:	f003 0301 	and.w	r3, r3, #1
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d00a      	beq.n	800ad8c <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800ad76:	69bb      	ldr	r3, [r7, #24]
 800ad78:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d105      	bne.n	800ad8c <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ad84:	6878      	ldr	r0, [r7, #4]
 800ad86:	4798      	blx	r3
    handled = 1UL;
 800ad88:	2301      	movs	r3, #1
 800ad8a:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800ad8c:	69bb      	ldr	r3, [r7, #24]
 800ad8e:	f003 0320 	and.w	r3, r3, #32
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d10f      	bne.n	800adb6 <HAL_SPI_IRQHandler+0xee>
 800ad96:	69bb      	ldr	r3, [r7, #24]
 800ad98:	f003 0302 	and.w	r3, r3, #2
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d00a      	beq.n	800adb6 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800ada0:	69bb      	ldr	r3, [r7, #24]
 800ada2:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d105      	bne.n	800adb6 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800adae:	6878      	ldr	r0, [r7, #4]
 800adb0:	4798      	blx	r3
    handled = 1UL;
 800adb2:	2301      	movs	r3, #1
 800adb4:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800adb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adb8:	2b00      	cmp	r3, #0
 800adba:	f040 8147 	bne.w	800b04c <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800adbe:	69bb      	ldr	r3, [r7, #24]
 800adc0:	f003 0308 	and.w	r3, r3, #8
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	f000 808b 	beq.w	800aee0 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	699a      	ldr	r2, [r3, #24]
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	f042 0208 	orr.w	r2, r2, #8
 800add8:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	699a      	ldr	r2, [r3, #24]
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	f042 0210 	orr.w	r2, r2, #16
 800ade8:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	699a      	ldr	r2, [r3, #24]
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800adf8:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	691a      	ldr	r2, [r3, #16]
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	f022 0208 	bic.w	r2, r2, #8
 800ae08:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	689b      	ldr	r3, [r3, #8]
 800ae10:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d13d      	bne.n	800ae94 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 800ae18:	e036      	b.n	800ae88 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	68db      	ldr	r3, [r3, #12]
 800ae1e:	2b0f      	cmp	r3, #15
 800ae20:	d90b      	bls.n	800ae3a <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	681a      	ldr	r2, [r3, #0]
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ae2a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800ae2c:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ae32:	1d1a      	adds	r2, r3, #4
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	665a      	str	r2, [r3, #100]	@ 0x64
 800ae38:	e01d      	b.n	800ae76 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	68db      	ldr	r3, [r3, #12]
 800ae3e:	2b07      	cmp	r3, #7
 800ae40:	d90b      	bls.n	800ae5a <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ae46:	68fa      	ldr	r2, [r7, #12]
 800ae48:	8812      	ldrh	r2, [r2, #0]
 800ae4a:	b292      	uxth	r2, r2
 800ae4c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ae52:	1c9a      	adds	r2, r3, #2
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	665a      	str	r2, [r3, #100]	@ 0x64
 800ae58:	e00d      	b.n	800ae76 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ae66:	7812      	ldrb	r2, [r2, #0]
 800ae68:	b2d2      	uxtb	r2, r2
 800ae6a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ae70:	1c5a      	adds	r2, r3, #1
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ae7c:	b29b      	uxth	r3, r3
 800ae7e:	3b01      	subs	r3, #1
 800ae80:	b29a      	uxth	r2, r3
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ae8e:	b29b      	uxth	r3, r3
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d1c2      	bne.n	800ae1a <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 800ae94:	6878      	ldr	r0, [r7, #4]
 800ae96:	f000 f931 	bl	800b0fc <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	2201      	movs	r2, #1
 800ae9e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d003      	beq.n	800aeb4 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800aeac:	6878      	ldr	r0, [r7, #4]
 800aeae:	f000 f8f7 	bl	800b0a0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800aeb2:	e0d0      	b.n	800b056 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800aeb4:	7cfb      	ldrb	r3, [r7, #19]
 800aeb6:	2b05      	cmp	r3, #5
 800aeb8:	d103      	bne.n	800aec2 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800aeba:	6878      	ldr	r0, [r7, #4]
 800aebc:	f000 f8e6 	bl	800b08c <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800aec0:	e0c6      	b.n	800b050 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800aec2:	7cfb      	ldrb	r3, [r7, #19]
 800aec4:	2b04      	cmp	r3, #4
 800aec6:	d103      	bne.n	800aed0 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 800aec8:	6878      	ldr	r0, [r7, #4]
 800aeca:	f000 f8d5 	bl	800b078 <HAL_SPI_RxCpltCallback>
    return;
 800aece:	e0bf      	b.n	800b050 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800aed0:	7cfb      	ldrb	r3, [r7, #19]
 800aed2:	2b03      	cmp	r3, #3
 800aed4:	f040 80bc 	bne.w	800b050 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 800aed8:	6878      	ldr	r0, [r7, #4]
 800aeda:	f000 f8c3 	bl	800b064 <HAL_SPI_TxCpltCallback>
    return;
 800aede:	e0b7      	b.n	800b050 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800aee0:	69bb      	ldr	r3, [r7, #24]
 800aee2:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	f000 80b5 	beq.w	800b056 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800aeec:	69bb      	ldr	r3, [r7, #24]
 800aeee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d00f      	beq.n	800af16 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aefc:	f043 0204 	orr.w	r2, r3, #4
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	699a      	ldr	r2, [r3, #24]
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800af14:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800af16:	69bb      	ldr	r3, [r7, #24]
 800af18:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d00f      	beq.n	800af40 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800af26:	f043 0201 	orr.w	r2, r3, #1
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	699a      	ldr	r2, [r3, #24]
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800af3e:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800af40:	69bb      	ldr	r3, [r7, #24]
 800af42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800af46:	2b00      	cmp	r3, #0
 800af48:	d00f      	beq.n	800af6a <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800af50:	f043 0208 	orr.w	r2, r3, #8
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	699a      	ldr	r2, [r3, #24]
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800af68:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800af6a:	69bb      	ldr	r3, [r7, #24]
 800af6c:	f003 0320 	and.w	r3, r3, #32
 800af70:	2b00      	cmp	r3, #0
 800af72:	d00f      	beq.n	800af94 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800af7a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	699a      	ldr	r2, [r3, #24]
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	f042 0220 	orr.w	r2, r2, #32
 800af92:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d05a      	beq.n	800b054 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	681a      	ldr	r2, [r3, #0]
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	f022 0201 	bic.w	r2, r2, #1
 800afac:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	6919      	ldr	r1, [r3, #16]
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681a      	ldr	r2, [r3, #0]
 800afb8:	4b28      	ldr	r3, [pc, #160]	@ (800b05c <HAL_SPI_IRQHandler+0x394>)
 800afba:	400b      	ands	r3, r1
 800afbc:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800afbe:	697b      	ldr	r3, [r7, #20]
 800afc0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800afc4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800afc8:	d138      	bne.n	800b03c <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	689a      	ldr	r2, [r3, #8]
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800afd8:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d013      	beq.n	800b00a <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800afe6:	4a1e      	ldr	r2, [pc, #120]	@ (800b060 <HAL_SPI_IRQHandler+0x398>)
 800afe8:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800afee:	4618      	mov	r0, r3
 800aff0:	f7f9 ffd2 	bl	8004f98 <HAL_DMA_Abort_IT>
 800aff4:	4603      	mov	r3, r0
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d007      	beq.n	800b00a <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b000:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d020      	beq.n	800b054 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b016:	4a12      	ldr	r2, [pc, #72]	@ (800b060 <HAL_SPI_IRQHandler+0x398>)
 800b018:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b01e:	4618      	mov	r0, r3
 800b020:	f7f9 ffba 	bl	8004f98 <HAL_DMA_Abort_IT>
 800b024:	4603      	mov	r3, r0
 800b026:	2b00      	cmp	r3, #0
 800b028:	d014      	beq.n	800b054 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b030:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800b03a:	e00b      	b.n	800b054 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	2201      	movs	r2, #1
 800b040:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 800b044:	6878      	ldr	r0, [r7, #4]
 800b046:	f000 f82b 	bl	800b0a0 <HAL_SPI_ErrorCallback>
    return;
 800b04a:	e003      	b.n	800b054 <HAL_SPI_IRQHandler+0x38c>
    return;
 800b04c:	bf00      	nop
 800b04e:	e002      	b.n	800b056 <HAL_SPI_IRQHandler+0x38e>
    return;
 800b050:	bf00      	nop
 800b052:	e000      	b.n	800b056 <HAL_SPI_IRQHandler+0x38e>
    return;
 800b054:	bf00      	nop
  }
}
 800b056:	3728      	adds	r7, #40	@ 0x28
 800b058:	46bd      	mov	sp, r7
 800b05a:	bd80      	pop	{r7, pc}
 800b05c:	fffffc94 	.word	0xfffffc94
 800b060:	0800b0c9 	.word	0x0800b0c9

0800b064 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800b064:	b480      	push	{r7}
 800b066:	b083      	sub	sp, #12
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800b06c:	bf00      	nop
 800b06e:	370c      	adds	r7, #12
 800b070:	46bd      	mov	sp, r7
 800b072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b076:	4770      	bx	lr

0800b078 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800b078:	b480      	push	{r7}
 800b07a:	b083      	sub	sp, #12
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800b080:	bf00      	nop
 800b082:	370c      	adds	r7, #12
 800b084:	46bd      	mov	sp, r7
 800b086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08a:	4770      	bx	lr

0800b08c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800b08c:	b480      	push	{r7}
 800b08e:	b083      	sub	sp, #12
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800b094:	bf00      	nop
 800b096:	370c      	adds	r7, #12
 800b098:	46bd      	mov	sp, r7
 800b09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09e:	4770      	bx	lr

0800b0a0 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800b0a0:	b480      	push	{r7}
 800b0a2:	b083      	sub	sp, #12
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800b0a8:	bf00      	nop
 800b0aa:	370c      	adds	r7, #12
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b2:	4770      	bx	lr

0800b0b4 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800b0b4:	b480      	push	{r7}
 800b0b6:	b083      	sub	sp, #12
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 800b0bc:	bf00      	nop
 800b0be:	370c      	adds	r7, #12
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c6:	4770      	bx	lr

0800b0c8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	b084      	sub	sp, #16
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b0d4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	2200      	movs	r2, #0
 800b0da:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	2200      	movs	r2, #0
 800b0e2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	2201      	movs	r2, #1
 800b0ea:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800b0ee:	68f8      	ldr	r0, [r7, #12]
 800b0f0:	f7ff ffd6 	bl	800b0a0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b0f4:	bf00      	nop
 800b0f6:	3710      	adds	r7, #16
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	bd80      	pop	{r7, pc}

0800b0fc <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800b0fc:	b480      	push	{r7}
 800b0fe:	b085      	sub	sp, #20
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	695b      	ldr	r3, [r3, #20]
 800b10a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	699a      	ldr	r2, [r3, #24]
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	f042 0208 	orr.w	r2, r2, #8
 800b11a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	699a      	ldr	r2, [r3, #24]
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	f042 0210 	orr.w	r2, r2, #16
 800b12a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	681a      	ldr	r2, [r3, #0]
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	f022 0201 	bic.w	r2, r2, #1
 800b13a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	6919      	ldr	r1, [r3, #16]
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681a      	ldr	r2, [r3, #0]
 800b146:	4b3c      	ldr	r3, [pc, #240]	@ (800b238 <SPI_CloseTransfer+0x13c>)
 800b148:	400b      	ands	r3, r1
 800b14a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	689a      	ldr	r2, [r3, #8]
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800b15a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b162:	b2db      	uxtb	r3, r3
 800b164:	2b04      	cmp	r3, #4
 800b166:	d014      	beq.n	800b192 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	f003 0320 	and.w	r3, r3, #32
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d00f      	beq.n	800b192 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b178:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	699a      	ldr	r2, [r3, #24]
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	f042 0220 	orr.w	r2, r2, #32
 800b190:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b198:	b2db      	uxtb	r3, r3
 800b19a:	2b03      	cmp	r3, #3
 800b19c:	d014      	beq.n	800b1c8 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d00f      	beq.n	800b1c8 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b1ae:	f043 0204 	orr.w	r2, r3, #4
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	699a      	ldr	r2, [r3, #24]
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b1c6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d00f      	beq.n	800b1f2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b1d8:	f043 0201 	orr.w	r2, r3, #1
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	699a      	ldr	r2, [r3, #24]
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b1f0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d00f      	beq.n	800b21c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b202:	f043 0208 	orr.w	r2, r3, #8
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	699a      	ldr	r2, [r3, #24]
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b21a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	2200      	movs	r2, #0
 800b220:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	2200      	movs	r2, #0
 800b228:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800b22c:	bf00      	nop
 800b22e:	3714      	adds	r7, #20
 800b230:	46bd      	mov	sp, r7
 800b232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b236:	4770      	bx	lr
 800b238:	fffffc90 	.word	0xfffffc90

0800b23c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800b23c:	b480      	push	{r7}
 800b23e:	b085      	sub	sp, #20
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b248:	095b      	lsrs	r3, r3, #5
 800b24a:	3301      	adds	r3, #1
 800b24c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	68db      	ldr	r3, [r3, #12]
 800b252:	3301      	adds	r3, #1
 800b254:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800b256:	68bb      	ldr	r3, [r7, #8]
 800b258:	3307      	adds	r3, #7
 800b25a:	08db      	lsrs	r3, r3, #3
 800b25c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800b25e:	68bb      	ldr	r3, [r7, #8]
 800b260:	68fa      	ldr	r2, [r7, #12]
 800b262:	fb02 f303 	mul.w	r3, r2, r3
}
 800b266:	4618      	mov	r0, r3
 800b268:	3714      	adds	r7, #20
 800b26a:	46bd      	mov	sp, r7
 800b26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b270:	4770      	bx	lr

0800b272 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b272:	b580      	push	{r7, lr}
 800b274:	b082      	sub	sp, #8
 800b276:	af00      	add	r7, sp, #0
 800b278:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d101      	bne.n	800b284 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b280:	2301      	movs	r3, #1
 800b282:	e049      	b.n	800b318 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b28a:	b2db      	uxtb	r3, r3
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d106      	bne.n	800b29e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	2200      	movs	r2, #0
 800b294:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b298:	6878      	ldr	r0, [r7, #4]
 800b29a:	f7f6 fcad 	bl	8001bf8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	2202      	movs	r2, #2
 800b2a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681a      	ldr	r2, [r3, #0]
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	3304      	adds	r3, #4
 800b2ae:	4619      	mov	r1, r3
 800b2b0:	4610      	mov	r0, r2
 800b2b2:	f000 fb45 	bl	800b940 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	2201      	movs	r2, #1
 800b2ba:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	2201      	movs	r2, #1
 800b2c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	2201      	movs	r2, #1
 800b2ca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	2201      	movs	r2, #1
 800b2d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	2201      	movs	r2, #1
 800b2da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	2201      	movs	r2, #1
 800b2e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	2201      	movs	r2, #1
 800b2ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	2201      	movs	r2, #1
 800b2f2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	2201      	movs	r2, #1
 800b2fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	2201      	movs	r2, #1
 800b302:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	2201      	movs	r2, #1
 800b30a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	2201      	movs	r2, #1
 800b312:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b316:	2300      	movs	r3, #0
}
 800b318:	4618      	mov	r0, r3
 800b31a:	3708      	adds	r7, #8
 800b31c:	46bd      	mov	sp, r7
 800b31e:	bd80      	pop	{r7, pc}

0800b320 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800b320:	b480      	push	{r7}
 800b322:	b085      	sub	sp, #20
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b32e:	b2db      	uxtb	r3, r3
 800b330:	2b01      	cmp	r3, #1
 800b332:	d001      	beq.n	800b338 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800b334:	2301      	movs	r3, #1
 800b336:	e04c      	b.n	800b3d2 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	2202      	movs	r2, #2
 800b33c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	4a26      	ldr	r2, [pc, #152]	@ (800b3e0 <HAL_TIM_Base_Start+0xc0>)
 800b346:	4293      	cmp	r3, r2
 800b348:	d022      	beq.n	800b390 <HAL_TIM_Base_Start+0x70>
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b352:	d01d      	beq.n	800b390 <HAL_TIM_Base_Start+0x70>
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	4a22      	ldr	r2, [pc, #136]	@ (800b3e4 <HAL_TIM_Base_Start+0xc4>)
 800b35a:	4293      	cmp	r3, r2
 800b35c:	d018      	beq.n	800b390 <HAL_TIM_Base_Start+0x70>
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	4a21      	ldr	r2, [pc, #132]	@ (800b3e8 <HAL_TIM_Base_Start+0xc8>)
 800b364:	4293      	cmp	r3, r2
 800b366:	d013      	beq.n	800b390 <HAL_TIM_Base_Start+0x70>
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	4a1f      	ldr	r2, [pc, #124]	@ (800b3ec <HAL_TIM_Base_Start+0xcc>)
 800b36e:	4293      	cmp	r3, r2
 800b370:	d00e      	beq.n	800b390 <HAL_TIM_Base_Start+0x70>
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	4a1e      	ldr	r2, [pc, #120]	@ (800b3f0 <HAL_TIM_Base_Start+0xd0>)
 800b378:	4293      	cmp	r3, r2
 800b37a:	d009      	beq.n	800b390 <HAL_TIM_Base_Start+0x70>
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	4a1c      	ldr	r2, [pc, #112]	@ (800b3f4 <HAL_TIM_Base_Start+0xd4>)
 800b382:	4293      	cmp	r3, r2
 800b384:	d004      	beq.n	800b390 <HAL_TIM_Base_Start+0x70>
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	4a1b      	ldr	r2, [pc, #108]	@ (800b3f8 <HAL_TIM_Base_Start+0xd8>)
 800b38c:	4293      	cmp	r3, r2
 800b38e:	d115      	bne.n	800b3bc <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	689a      	ldr	r2, [r3, #8]
 800b396:	4b19      	ldr	r3, [pc, #100]	@ (800b3fc <HAL_TIM_Base_Start+0xdc>)
 800b398:	4013      	ands	r3, r2
 800b39a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	2b06      	cmp	r3, #6
 800b3a0:	d015      	beq.n	800b3ce <HAL_TIM_Base_Start+0xae>
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b3a8:	d011      	beq.n	800b3ce <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	681a      	ldr	r2, [r3, #0]
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	f042 0201 	orr.w	r2, r2, #1
 800b3b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b3ba:	e008      	b.n	800b3ce <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	681a      	ldr	r2, [r3, #0]
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	f042 0201 	orr.w	r2, r2, #1
 800b3ca:	601a      	str	r2, [r3, #0]
 800b3cc:	e000      	b.n	800b3d0 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b3ce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b3d0:	2300      	movs	r3, #0
}
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	3714      	adds	r7, #20
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3dc:	4770      	bx	lr
 800b3de:	bf00      	nop
 800b3e0:	40010000 	.word	0x40010000
 800b3e4:	40000400 	.word	0x40000400
 800b3e8:	40000800 	.word	0x40000800
 800b3ec:	40000c00 	.word	0x40000c00
 800b3f0:	40010400 	.word	0x40010400
 800b3f4:	40001800 	.word	0x40001800
 800b3f8:	40014000 	.word	0x40014000
 800b3fc:	00010007 	.word	0x00010007

0800b400 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b400:	b480      	push	{r7}
 800b402:	b085      	sub	sp, #20
 800b404:	af00      	add	r7, sp, #0
 800b406:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b40e:	b2db      	uxtb	r3, r3
 800b410:	2b01      	cmp	r3, #1
 800b412:	d001      	beq.n	800b418 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b414:	2301      	movs	r3, #1
 800b416:	e054      	b.n	800b4c2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	2202      	movs	r2, #2
 800b41c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	68da      	ldr	r2, [r3, #12]
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	f042 0201 	orr.w	r2, r2, #1
 800b42e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	4a26      	ldr	r2, [pc, #152]	@ (800b4d0 <HAL_TIM_Base_Start_IT+0xd0>)
 800b436:	4293      	cmp	r3, r2
 800b438:	d022      	beq.n	800b480 <HAL_TIM_Base_Start_IT+0x80>
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b442:	d01d      	beq.n	800b480 <HAL_TIM_Base_Start_IT+0x80>
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	4a22      	ldr	r2, [pc, #136]	@ (800b4d4 <HAL_TIM_Base_Start_IT+0xd4>)
 800b44a:	4293      	cmp	r3, r2
 800b44c:	d018      	beq.n	800b480 <HAL_TIM_Base_Start_IT+0x80>
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	4a21      	ldr	r2, [pc, #132]	@ (800b4d8 <HAL_TIM_Base_Start_IT+0xd8>)
 800b454:	4293      	cmp	r3, r2
 800b456:	d013      	beq.n	800b480 <HAL_TIM_Base_Start_IT+0x80>
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	4a1f      	ldr	r2, [pc, #124]	@ (800b4dc <HAL_TIM_Base_Start_IT+0xdc>)
 800b45e:	4293      	cmp	r3, r2
 800b460:	d00e      	beq.n	800b480 <HAL_TIM_Base_Start_IT+0x80>
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	4a1e      	ldr	r2, [pc, #120]	@ (800b4e0 <HAL_TIM_Base_Start_IT+0xe0>)
 800b468:	4293      	cmp	r3, r2
 800b46a:	d009      	beq.n	800b480 <HAL_TIM_Base_Start_IT+0x80>
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	4a1c      	ldr	r2, [pc, #112]	@ (800b4e4 <HAL_TIM_Base_Start_IT+0xe4>)
 800b472:	4293      	cmp	r3, r2
 800b474:	d004      	beq.n	800b480 <HAL_TIM_Base_Start_IT+0x80>
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	4a1b      	ldr	r2, [pc, #108]	@ (800b4e8 <HAL_TIM_Base_Start_IT+0xe8>)
 800b47c:	4293      	cmp	r3, r2
 800b47e:	d115      	bne.n	800b4ac <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	689a      	ldr	r2, [r3, #8]
 800b486:	4b19      	ldr	r3, [pc, #100]	@ (800b4ec <HAL_TIM_Base_Start_IT+0xec>)
 800b488:	4013      	ands	r3, r2
 800b48a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	2b06      	cmp	r3, #6
 800b490:	d015      	beq.n	800b4be <HAL_TIM_Base_Start_IT+0xbe>
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b498:	d011      	beq.n	800b4be <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	681a      	ldr	r2, [r3, #0]
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	f042 0201 	orr.w	r2, r2, #1
 800b4a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b4aa:	e008      	b.n	800b4be <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	681a      	ldr	r2, [r3, #0]
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	f042 0201 	orr.w	r2, r2, #1
 800b4ba:	601a      	str	r2, [r3, #0]
 800b4bc:	e000      	b.n	800b4c0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b4be:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b4c0:	2300      	movs	r3, #0
}
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	3714      	adds	r7, #20
 800b4c6:	46bd      	mov	sp, r7
 800b4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4cc:	4770      	bx	lr
 800b4ce:	bf00      	nop
 800b4d0:	40010000 	.word	0x40010000
 800b4d4:	40000400 	.word	0x40000400
 800b4d8:	40000800 	.word	0x40000800
 800b4dc:	40000c00 	.word	0x40000c00
 800b4e0:	40010400 	.word	0x40010400
 800b4e4:	40001800 	.word	0x40001800
 800b4e8:	40014000 	.word	0x40014000
 800b4ec:	00010007 	.word	0x00010007

0800b4f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b084      	sub	sp, #16
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	68db      	ldr	r3, [r3, #12]
 800b4fe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	691b      	ldr	r3, [r3, #16]
 800b506:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b508:	68bb      	ldr	r3, [r7, #8]
 800b50a:	f003 0302 	and.w	r3, r3, #2
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d020      	beq.n	800b554 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	f003 0302 	and.w	r3, r3, #2
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d01b      	beq.n	800b554 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	f06f 0202 	mvn.w	r2, #2
 800b524:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	2201      	movs	r2, #1
 800b52a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	699b      	ldr	r3, [r3, #24]
 800b532:	f003 0303 	and.w	r3, r3, #3
 800b536:	2b00      	cmp	r3, #0
 800b538:	d003      	beq.n	800b542 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b53a:	6878      	ldr	r0, [r7, #4]
 800b53c:	f000 f9e2 	bl	800b904 <HAL_TIM_IC_CaptureCallback>
 800b540:	e005      	b.n	800b54e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b542:	6878      	ldr	r0, [r7, #4]
 800b544:	f000 f9d4 	bl	800b8f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b548:	6878      	ldr	r0, [r7, #4]
 800b54a:	f000 f9e5 	bl	800b918 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	2200      	movs	r2, #0
 800b552:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b554:	68bb      	ldr	r3, [r7, #8]
 800b556:	f003 0304 	and.w	r3, r3, #4
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d020      	beq.n	800b5a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	f003 0304 	and.w	r3, r3, #4
 800b564:	2b00      	cmp	r3, #0
 800b566:	d01b      	beq.n	800b5a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	f06f 0204 	mvn.w	r2, #4
 800b570:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	2202      	movs	r2, #2
 800b576:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	699b      	ldr	r3, [r3, #24]
 800b57e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b582:	2b00      	cmp	r3, #0
 800b584:	d003      	beq.n	800b58e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b586:	6878      	ldr	r0, [r7, #4]
 800b588:	f000 f9bc 	bl	800b904 <HAL_TIM_IC_CaptureCallback>
 800b58c:	e005      	b.n	800b59a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b58e:	6878      	ldr	r0, [r7, #4]
 800b590:	f000 f9ae 	bl	800b8f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b594:	6878      	ldr	r0, [r7, #4]
 800b596:	f000 f9bf 	bl	800b918 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	2200      	movs	r2, #0
 800b59e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b5a0:	68bb      	ldr	r3, [r7, #8]
 800b5a2:	f003 0308 	and.w	r3, r3, #8
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d020      	beq.n	800b5ec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	f003 0308 	and.w	r3, r3, #8
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d01b      	beq.n	800b5ec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	f06f 0208 	mvn.w	r2, #8
 800b5bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	2204      	movs	r2, #4
 800b5c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	69db      	ldr	r3, [r3, #28]
 800b5ca:	f003 0303 	and.w	r3, r3, #3
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d003      	beq.n	800b5da <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b5d2:	6878      	ldr	r0, [r7, #4]
 800b5d4:	f000 f996 	bl	800b904 <HAL_TIM_IC_CaptureCallback>
 800b5d8:	e005      	b.n	800b5e6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b5da:	6878      	ldr	r0, [r7, #4]
 800b5dc:	f000 f988 	bl	800b8f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b5e0:	6878      	ldr	r0, [r7, #4]
 800b5e2:	f000 f999 	bl	800b918 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b5ec:	68bb      	ldr	r3, [r7, #8]
 800b5ee:	f003 0310 	and.w	r3, r3, #16
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d020      	beq.n	800b638 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	f003 0310 	and.w	r3, r3, #16
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d01b      	beq.n	800b638 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	f06f 0210 	mvn.w	r2, #16
 800b608:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	2208      	movs	r2, #8
 800b60e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	69db      	ldr	r3, [r3, #28]
 800b616:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d003      	beq.n	800b626 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b61e:	6878      	ldr	r0, [r7, #4]
 800b620:	f000 f970 	bl	800b904 <HAL_TIM_IC_CaptureCallback>
 800b624:	e005      	b.n	800b632 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b626:	6878      	ldr	r0, [r7, #4]
 800b628:	f000 f962 	bl	800b8f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b62c:	6878      	ldr	r0, [r7, #4]
 800b62e:	f000 f973 	bl	800b918 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	2200      	movs	r2, #0
 800b636:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b638:	68bb      	ldr	r3, [r7, #8]
 800b63a:	f003 0301 	and.w	r3, r3, #1
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d00c      	beq.n	800b65c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	f003 0301 	and.w	r3, r3, #1
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d007      	beq.n	800b65c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	f06f 0201 	mvn.w	r2, #1
 800b654:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b656:	6878      	ldr	r0, [r7, #4]
 800b658:	f7f6 fd74 	bl	8002144 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b65c:	68bb      	ldr	r3, [r7, #8]
 800b65e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b662:	2b00      	cmp	r3, #0
 800b664:	d104      	bne.n	800b670 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800b666:	68bb      	ldr	r3, [r7, #8]
 800b668:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d00c      	beq.n	800b68a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b676:	2b00      	cmp	r3, #0
 800b678:	d007      	beq.n	800b68a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800b682:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b684:	6878      	ldr	r0, [r7, #4]
 800b686:	f000 fb37 	bl	800bcf8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800b68a:	68bb      	ldr	r3, [r7, #8]
 800b68c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b690:	2b00      	cmp	r3, #0
 800b692:	d00c      	beq.n	800b6ae <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d007      	beq.n	800b6ae <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800b6a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b6a8:	6878      	ldr	r0, [r7, #4]
 800b6aa:	f000 fb2f 	bl	800bd0c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b6ae:	68bb      	ldr	r3, [r7, #8]
 800b6b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d00c      	beq.n	800b6d2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d007      	beq.n	800b6d2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b6ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b6cc:	6878      	ldr	r0, [r7, #4]
 800b6ce:	f000 f92d 	bl	800b92c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b6d2:	68bb      	ldr	r3, [r7, #8]
 800b6d4:	f003 0320 	and.w	r3, r3, #32
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d00c      	beq.n	800b6f6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	f003 0320 	and.w	r3, r3, #32
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d007      	beq.n	800b6f6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	f06f 0220 	mvn.w	r2, #32
 800b6ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b6f0:	6878      	ldr	r0, [r7, #4]
 800b6f2:	f000 faf7 	bl	800bce4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b6f6:	bf00      	nop
 800b6f8:	3710      	adds	r7, #16
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	bd80      	pop	{r7, pc}
	...

0800b700 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b700:	b580      	push	{r7, lr}
 800b702:	b084      	sub	sp, #16
 800b704:	af00      	add	r7, sp, #0
 800b706:	6078      	str	r0, [r7, #4]
 800b708:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b70a:	2300      	movs	r3, #0
 800b70c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b714:	2b01      	cmp	r3, #1
 800b716:	d101      	bne.n	800b71c <HAL_TIM_ConfigClockSource+0x1c>
 800b718:	2302      	movs	r3, #2
 800b71a:	e0dc      	b.n	800b8d6 <HAL_TIM_ConfigClockSource+0x1d6>
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	2201      	movs	r2, #1
 800b720:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	2202      	movs	r2, #2
 800b728:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	689b      	ldr	r3, [r3, #8]
 800b732:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b734:	68ba      	ldr	r2, [r7, #8]
 800b736:	4b6a      	ldr	r3, [pc, #424]	@ (800b8e0 <HAL_TIM_ConfigClockSource+0x1e0>)
 800b738:	4013      	ands	r3, r2
 800b73a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b73c:	68bb      	ldr	r3, [r7, #8]
 800b73e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b742:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	68ba      	ldr	r2, [r7, #8]
 800b74a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b74c:	683b      	ldr	r3, [r7, #0]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	4a64      	ldr	r2, [pc, #400]	@ (800b8e4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b752:	4293      	cmp	r3, r2
 800b754:	f000 80a9 	beq.w	800b8aa <HAL_TIM_ConfigClockSource+0x1aa>
 800b758:	4a62      	ldr	r2, [pc, #392]	@ (800b8e4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b75a:	4293      	cmp	r3, r2
 800b75c:	f200 80ae 	bhi.w	800b8bc <HAL_TIM_ConfigClockSource+0x1bc>
 800b760:	4a61      	ldr	r2, [pc, #388]	@ (800b8e8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b762:	4293      	cmp	r3, r2
 800b764:	f000 80a1 	beq.w	800b8aa <HAL_TIM_ConfigClockSource+0x1aa>
 800b768:	4a5f      	ldr	r2, [pc, #380]	@ (800b8e8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b76a:	4293      	cmp	r3, r2
 800b76c:	f200 80a6 	bhi.w	800b8bc <HAL_TIM_ConfigClockSource+0x1bc>
 800b770:	4a5e      	ldr	r2, [pc, #376]	@ (800b8ec <HAL_TIM_ConfigClockSource+0x1ec>)
 800b772:	4293      	cmp	r3, r2
 800b774:	f000 8099 	beq.w	800b8aa <HAL_TIM_ConfigClockSource+0x1aa>
 800b778:	4a5c      	ldr	r2, [pc, #368]	@ (800b8ec <HAL_TIM_ConfigClockSource+0x1ec>)
 800b77a:	4293      	cmp	r3, r2
 800b77c:	f200 809e 	bhi.w	800b8bc <HAL_TIM_ConfigClockSource+0x1bc>
 800b780:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800b784:	f000 8091 	beq.w	800b8aa <HAL_TIM_ConfigClockSource+0x1aa>
 800b788:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800b78c:	f200 8096 	bhi.w	800b8bc <HAL_TIM_ConfigClockSource+0x1bc>
 800b790:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b794:	f000 8089 	beq.w	800b8aa <HAL_TIM_ConfigClockSource+0x1aa>
 800b798:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b79c:	f200 808e 	bhi.w	800b8bc <HAL_TIM_ConfigClockSource+0x1bc>
 800b7a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b7a4:	d03e      	beq.n	800b824 <HAL_TIM_ConfigClockSource+0x124>
 800b7a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b7aa:	f200 8087 	bhi.w	800b8bc <HAL_TIM_ConfigClockSource+0x1bc>
 800b7ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b7b2:	f000 8086 	beq.w	800b8c2 <HAL_TIM_ConfigClockSource+0x1c2>
 800b7b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b7ba:	d87f      	bhi.n	800b8bc <HAL_TIM_ConfigClockSource+0x1bc>
 800b7bc:	2b70      	cmp	r3, #112	@ 0x70
 800b7be:	d01a      	beq.n	800b7f6 <HAL_TIM_ConfigClockSource+0xf6>
 800b7c0:	2b70      	cmp	r3, #112	@ 0x70
 800b7c2:	d87b      	bhi.n	800b8bc <HAL_TIM_ConfigClockSource+0x1bc>
 800b7c4:	2b60      	cmp	r3, #96	@ 0x60
 800b7c6:	d050      	beq.n	800b86a <HAL_TIM_ConfigClockSource+0x16a>
 800b7c8:	2b60      	cmp	r3, #96	@ 0x60
 800b7ca:	d877      	bhi.n	800b8bc <HAL_TIM_ConfigClockSource+0x1bc>
 800b7cc:	2b50      	cmp	r3, #80	@ 0x50
 800b7ce:	d03c      	beq.n	800b84a <HAL_TIM_ConfigClockSource+0x14a>
 800b7d0:	2b50      	cmp	r3, #80	@ 0x50
 800b7d2:	d873      	bhi.n	800b8bc <HAL_TIM_ConfigClockSource+0x1bc>
 800b7d4:	2b40      	cmp	r3, #64	@ 0x40
 800b7d6:	d058      	beq.n	800b88a <HAL_TIM_ConfigClockSource+0x18a>
 800b7d8:	2b40      	cmp	r3, #64	@ 0x40
 800b7da:	d86f      	bhi.n	800b8bc <HAL_TIM_ConfigClockSource+0x1bc>
 800b7dc:	2b30      	cmp	r3, #48	@ 0x30
 800b7de:	d064      	beq.n	800b8aa <HAL_TIM_ConfigClockSource+0x1aa>
 800b7e0:	2b30      	cmp	r3, #48	@ 0x30
 800b7e2:	d86b      	bhi.n	800b8bc <HAL_TIM_ConfigClockSource+0x1bc>
 800b7e4:	2b20      	cmp	r3, #32
 800b7e6:	d060      	beq.n	800b8aa <HAL_TIM_ConfigClockSource+0x1aa>
 800b7e8:	2b20      	cmp	r3, #32
 800b7ea:	d867      	bhi.n	800b8bc <HAL_TIM_ConfigClockSource+0x1bc>
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d05c      	beq.n	800b8aa <HAL_TIM_ConfigClockSource+0x1aa>
 800b7f0:	2b10      	cmp	r3, #16
 800b7f2:	d05a      	beq.n	800b8aa <HAL_TIM_ConfigClockSource+0x1aa>
 800b7f4:	e062      	b.n	800b8bc <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b7fa:	683b      	ldr	r3, [r7, #0]
 800b7fc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b7fe:	683b      	ldr	r3, [r7, #0]
 800b800:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b802:	683b      	ldr	r3, [r7, #0]
 800b804:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b806:	f000 f9bf 	bl	800bb88 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	689b      	ldr	r3, [r3, #8]
 800b810:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b812:	68bb      	ldr	r3, [r7, #8]
 800b814:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800b818:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	68ba      	ldr	r2, [r7, #8]
 800b820:	609a      	str	r2, [r3, #8]
      break;
 800b822:	e04f      	b.n	800b8c4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b828:	683b      	ldr	r3, [r7, #0]
 800b82a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b82c:	683b      	ldr	r3, [r7, #0]
 800b82e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b830:	683b      	ldr	r3, [r7, #0]
 800b832:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b834:	f000 f9a8 	bl	800bb88 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	689a      	ldr	r2, [r3, #8]
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b846:	609a      	str	r2, [r3, #8]
      break;
 800b848:	e03c      	b.n	800b8c4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b84e:	683b      	ldr	r3, [r7, #0]
 800b850:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b852:	683b      	ldr	r3, [r7, #0]
 800b854:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b856:	461a      	mov	r2, r3
 800b858:	f000 f918 	bl	800ba8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	2150      	movs	r1, #80	@ 0x50
 800b862:	4618      	mov	r0, r3
 800b864:	f000 f972 	bl	800bb4c <TIM_ITRx_SetConfig>
      break;
 800b868:	e02c      	b.n	800b8c4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b86e:	683b      	ldr	r3, [r7, #0]
 800b870:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b872:	683b      	ldr	r3, [r7, #0]
 800b874:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b876:	461a      	mov	r2, r3
 800b878:	f000 f937 	bl	800baea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	2160      	movs	r1, #96	@ 0x60
 800b882:	4618      	mov	r0, r3
 800b884:	f000 f962 	bl	800bb4c <TIM_ITRx_SetConfig>
      break;
 800b888:	e01c      	b.n	800b8c4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b88e:	683b      	ldr	r3, [r7, #0]
 800b890:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b892:	683b      	ldr	r3, [r7, #0]
 800b894:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b896:	461a      	mov	r2, r3
 800b898:	f000 f8f8 	bl	800ba8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	2140      	movs	r1, #64	@ 0x40
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	f000 f952 	bl	800bb4c <TIM_ITRx_SetConfig>
      break;
 800b8a8:	e00c      	b.n	800b8c4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681a      	ldr	r2, [r3, #0]
 800b8ae:	683b      	ldr	r3, [r7, #0]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	4619      	mov	r1, r3
 800b8b4:	4610      	mov	r0, r2
 800b8b6:	f000 f949 	bl	800bb4c <TIM_ITRx_SetConfig>
      break;
 800b8ba:	e003      	b.n	800b8c4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800b8bc:	2301      	movs	r3, #1
 800b8be:	73fb      	strb	r3, [r7, #15]
      break;
 800b8c0:	e000      	b.n	800b8c4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800b8c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	2201      	movs	r2, #1
 800b8c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	2200      	movs	r2, #0
 800b8d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b8d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	3710      	adds	r7, #16
 800b8da:	46bd      	mov	sp, r7
 800b8dc:	bd80      	pop	{r7, pc}
 800b8de:	bf00      	nop
 800b8e0:	ffceff88 	.word	0xffceff88
 800b8e4:	00100040 	.word	0x00100040
 800b8e8:	00100030 	.word	0x00100030
 800b8ec:	00100020 	.word	0x00100020

0800b8f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b8f0:	b480      	push	{r7}
 800b8f2:	b083      	sub	sp, #12
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b8f8:	bf00      	nop
 800b8fa:	370c      	adds	r7, #12
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b902:	4770      	bx	lr

0800b904 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b904:	b480      	push	{r7}
 800b906:	b083      	sub	sp, #12
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b90c:	bf00      	nop
 800b90e:	370c      	adds	r7, #12
 800b910:	46bd      	mov	sp, r7
 800b912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b916:	4770      	bx	lr

0800b918 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b918:	b480      	push	{r7}
 800b91a:	b083      	sub	sp, #12
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b920:	bf00      	nop
 800b922:	370c      	adds	r7, #12
 800b924:	46bd      	mov	sp, r7
 800b926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92a:	4770      	bx	lr

0800b92c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b92c:	b480      	push	{r7}
 800b92e:	b083      	sub	sp, #12
 800b930:	af00      	add	r7, sp, #0
 800b932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b934:	bf00      	nop
 800b936:	370c      	adds	r7, #12
 800b938:	46bd      	mov	sp, r7
 800b93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93e:	4770      	bx	lr

0800b940 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b940:	b480      	push	{r7}
 800b942:	b085      	sub	sp, #20
 800b944:	af00      	add	r7, sp, #0
 800b946:	6078      	str	r0, [r7, #4]
 800b948:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	4a46      	ldr	r2, [pc, #280]	@ (800ba6c <TIM_Base_SetConfig+0x12c>)
 800b954:	4293      	cmp	r3, r2
 800b956:	d013      	beq.n	800b980 <TIM_Base_SetConfig+0x40>
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b95e:	d00f      	beq.n	800b980 <TIM_Base_SetConfig+0x40>
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	4a43      	ldr	r2, [pc, #268]	@ (800ba70 <TIM_Base_SetConfig+0x130>)
 800b964:	4293      	cmp	r3, r2
 800b966:	d00b      	beq.n	800b980 <TIM_Base_SetConfig+0x40>
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	4a42      	ldr	r2, [pc, #264]	@ (800ba74 <TIM_Base_SetConfig+0x134>)
 800b96c:	4293      	cmp	r3, r2
 800b96e:	d007      	beq.n	800b980 <TIM_Base_SetConfig+0x40>
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	4a41      	ldr	r2, [pc, #260]	@ (800ba78 <TIM_Base_SetConfig+0x138>)
 800b974:	4293      	cmp	r3, r2
 800b976:	d003      	beq.n	800b980 <TIM_Base_SetConfig+0x40>
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	4a40      	ldr	r2, [pc, #256]	@ (800ba7c <TIM_Base_SetConfig+0x13c>)
 800b97c:	4293      	cmp	r3, r2
 800b97e:	d108      	bne.n	800b992 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b986:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b988:	683b      	ldr	r3, [r7, #0]
 800b98a:	685b      	ldr	r3, [r3, #4]
 800b98c:	68fa      	ldr	r2, [r7, #12]
 800b98e:	4313      	orrs	r3, r2
 800b990:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	4a35      	ldr	r2, [pc, #212]	@ (800ba6c <TIM_Base_SetConfig+0x12c>)
 800b996:	4293      	cmp	r3, r2
 800b998:	d01f      	beq.n	800b9da <TIM_Base_SetConfig+0x9a>
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b9a0:	d01b      	beq.n	800b9da <TIM_Base_SetConfig+0x9a>
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	4a32      	ldr	r2, [pc, #200]	@ (800ba70 <TIM_Base_SetConfig+0x130>)
 800b9a6:	4293      	cmp	r3, r2
 800b9a8:	d017      	beq.n	800b9da <TIM_Base_SetConfig+0x9a>
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	4a31      	ldr	r2, [pc, #196]	@ (800ba74 <TIM_Base_SetConfig+0x134>)
 800b9ae:	4293      	cmp	r3, r2
 800b9b0:	d013      	beq.n	800b9da <TIM_Base_SetConfig+0x9a>
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	4a30      	ldr	r2, [pc, #192]	@ (800ba78 <TIM_Base_SetConfig+0x138>)
 800b9b6:	4293      	cmp	r3, r2
 800b9b8:	d00f      	beq.n	800b9da <TIM_Base_SetConfig+0x9a>
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	4a2f      	ldr	r2, [pc, #188]	@ (800ba7c <TIM_Base_SetConfig+0x13c>)
 800b9be:	4293      	cmp	r3, r2
 800b9c0:	d00b      	beq.n	800b9da <TIM_Base_SetConfig+0x9a>
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	4a2e      	ldr	r2, [pc, #184]	@ (800ba80 <TIM_Base_SetConfig+0x140>)
 800b9c6:	4293      	cmp	r3, r2
 800b9c8:	d007      	beq.n	800b9da <TIM_Base_SetConfig+0x9a>
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	4a2d      	ldr	r2, [pc, #180]	@ (800ba84 <TIM_Base_SetConfig+0x144>)
 800b9ce:	4293      	cmp	r3, r2
 800b9d0:	d003      	beq.n	800b9da <TIM_Base_SetConfig+0x9a>
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	4a2c      	ldr	r2, [pc, #176]	@ (800ba88 <TIM_Base_SetConfig+0x148>)
 800b9d6:	4293      	cmp	r3, r2
 800b9d8:	d108      	bne.n	800b9ec <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b9e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b9e2:	683b      	ldr	r3, [r7, #0]
 800b9e4:	68db      	ldr	r3, [r3, #12]
 800b9e6:	68fa      	ldr	r2, [r7, #12]
 800b9e8:	4313      	orrs	r3, r2
 800b9ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b9f2:	683b      	ldr	r3, [r7, #0]
 800b9f4:	695b      	ldr	r3, [r3, #20]
 800b9f6:	4313      	orrs	r3, r2
 800b9f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	68fa      	ldr	r2, [r7, #12]
 800b9fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ba00:	683b      	ldr	r3, [r7, #0]
 800ba02:	689a      	ldr	r2, [r3, #8]
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ba08:	683b      	ldr	r3, [r7, #0]
 800ba0a:	681a      	ldr	r2, [r3, #0]
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	4a16      	ldr	r2, [pc, #88]	@ (800ba6c <TIM_Base_SetConfig+0x12c>)
 800ba14:	4293      	cmp	r3, r2
 800ba16:	d00f      	beq.n	800ba38 <TIM_Base_SetConfig+0xf8>
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	4a18      	ldr	r2, [pc, #96]	@ (800ba7c <TIM_Base_SetConfig+0x13c>)
 800ba1c:	4293      	cmp	r3, r2
 800ba1e:	d00b      	beq.n	800ba38 <TIM_Base_SetConfig+0xf8>
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	4a17      	ldr	r2, [pc, #92]	@ (800ba80 <TIM_Base_SetConfig+0x140>)
 800ba24:	4293      	cmp	r3, r2
 800ba26:	d007      	beq.n	800ba38 <TIM_Base_SetConfig+0xf8>
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	4a16      	ldr	r2, [pc, #88]	@ (800ba84 <TIM_Base_SetConfig+0x144>)
 800ba2c:	4293      	cmp	r3, r2
 800ba2e:	d003      	beq.n	800ba38 <TIM_Base_SetConfig+0xf8>
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	4a15      	ldr	r2, [pc, #84]	@ (800ba88 <TIM_Base_SetConfig+0x148>)
 800ba34:	4293      	cmp	r3, r2
 800ba36:	d103      	bne.n	800ba40 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ba38:	683b      	ldr	r3, [r7, #0]
 800ba3a:	691a      	ldr	r2, [r3, #16]
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	2201      	movs	r2, #1
 800ba44:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	691b      	ldr	r3, [r3, #16]
 800ba4a:	f003 0301 	and.w	r3, r3, #1
 800ba4e:	2b01      	cmp	r3, #1
 800ba50:	d105      	bne.n	800ba5e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	691b      	ldr	r3, [r3, #16]
 800ba56:	f023 0201 	bic.w	r2, r3, #1
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	611a      	str	r2, [r3, #16]
  }
}
 800ba5e:	bf00      	nop
 800ba60:	3714      	adds	r7, #20
 800ba62:	46bd      	mov	sp, r7
 800ba64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba68:	4770      	bx	lr
 800ba6a:	bf00      	nop
 800ba6c:	40010000 	.word	0x40010000
 800ba70:	40000400 	.word	0x40000400
 800ba74:	40000800 	.word	0x40000800
 800ba78:	40000c00 	.word	0x40000c00
 800ba7c:	40010400 	.word	0x40010400
 800ba80:	40014000 	.word	0x40014000
 800ba84:	40014400 	.word	0x40014400
 800ba88:	40014800 	.word	0x40014800

0800ba8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ba8c:	b480      	push	{r7}
 800ba8e:	b087      	sub	sp, #28
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	60f8      	str	r0, [r7, #12]
 800ba94:	60b9      	str	r1, [r7, #8]
 800ba96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	6a1b      	ldr	r3, [r3, #32]
 800ba9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	6a1b      	ldr	r3, [r3, #32]
 800baa2:	f023 0201 	bic.w	r2, r3, #1
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	699b      	ldr	r3, [r3, #24]
 800baae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bab0:	693b      	ldr	r3, [r7, #16]
 800bab2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800bab6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	011b      	lsls	r3, r3, #4
 800babc:	693a      	ldr	r2, [r7, #16]
 800babe:	4313      	orrs	r3, r2
 800bac0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bac2:	697b      	ldr	r3, [r7, #20]
 800bac4:	f023 030a 	bic.w	r3, r3, #10
 800bac8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800baca:	697a      	ldr	r2, [r7, #20]
 800bacc:	68bb      	ldr	r3, [r7, #8]
 800bace:	4313      	orrs	r3, r2
 800bad0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	693a      	ldr	r2, [r7, #16]
 800bad6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	697a      	ldr	r2, [r7, #20]
 800badc:	621a      	str	r2, [r3, #32]
}
 800bade:	bf00      	nop
 800bae0:	371c      	adds	r7, #28
 800bae2:	46bd      	mov	sp, r7
 800bae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae8:	4770      	bx	lr

0800baea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800baea:	b480      	push	{r7}
 800baec:	b087      	sub	sp, #28
 800baee:	af00      	add	r7, sp, #0
 800baf0:	60f8      	str	r0, [r7, #12]
 800baf2:	60b9      	str	r1, [r7, #8]
 800baf4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	6a1b      	ldr	r3, [r3, #32]
 800bafa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	6a1b      	ldr	r3, [r3, #32]
 800bb00:	f023 0210 	bic.w	r2, r3, #16
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	699b      	ldr	r3, [r3, #24]
 800bb0c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bb0e:	693b      	ldr	r3, [r7, #16]
 800bb10:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800bb14:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	031b      	lsls	r3, r3, #12
 800bb1a:	693a      	ldr	r2, [r7, #16]
 800bb1c:	4313      	orrs	r3, r2
 800bb1e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bb20:	697b      	ldr	r3, [r7, #20]
 800bb22:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800bb26:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bb28:	68bb      	ldr	r3, [r7, #8]
 800bb2a:	011b      	lsls	r3, r3, #4
 800bb2c:	697a      	ldr	r2, [r7, #20]
 800bb2e:	4313      	orrs	r3, r2
 800bb30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	693a      	ldr	r2, [r7, #16]
 800bb36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	697a      	ldr	r2, [r7, #20]
 800bb3c:	621a      	str	r2, [r3, #32]
}
 800bb3e:	bf00      	nop
 800bb40:	371c      	adds	r7, #28
 800bb42:	46bd      	mov	sp, r7
 800bb44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb48:	4770      	bx	lr
	...

0800bb4c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bb4c:	b480      	push	{r7}
 800bb4e:	b085      	sub	sp, #20
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	6078      	str	r0, [r7, #4]
 800bb54:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	689b      	ldr	r3, [r3, #8]
 800bb5a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bb5c:	68fa      	ldr	r2, [r7, #12]
 800bb5e:	4b09      	ldr	r3, [pc, #36]	@ (800bb84 <TIM_ITRx_SetConfig+0x38>)
 800bb60:	4013      	ands	r3, r2
 800bb62:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bb64:	683a      	ldr	r2, [r7, #0]
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	4313      	orrs	r3, r2
 800bb6a:	f043 0307 	orr.w	r3, r3, #7
 800bb6e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	68fa      	ldr	r2, [r7, #12]
 800bb74:	609a      	str	r2, [r3, #8]
}
 800bb76:	bf00      	nop
 800bb78:	3714      	adds	r7, #20
 800bb7a:	46bd      	mov	sp, r7
 800bb7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb80:	4770      	bx	lr
 800bb82:	bf00      	nop
 800bb84:	ffcfff8f 	.word	0xffcfff8f

0800bb88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bb88:	b480      	push	{r7}
 800bb8a:	b087      	sub	sp, #28
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	60f8      	str	r0, [r7, #12]
 800bb90:	60b9      	str	r1, [r7, #8]
 800bb92:	607a      	str	r2, [r7, #4]
 800bb94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	689b      	ldr	r3, [r3, #8]
 800bb9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bb9c:	697b      	ldr	r3, [r7, #20]
 800bb9e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bba2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bba4:	683b      	ldr	r3, [r7, #0]
 800bba6:	021a      	lsls	r2, r3, #8
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	431a      	orrs	r2, r3
 800bbac:	68bb      	ldr	r3, [r7, #8]
 800bbae:	4313      	orrs	r3, r2
 800bbb0:	697a      	ldr	r2, [r7, #20]
 800bbb2:	4313      	orrs	r3, r2
 800bbb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	697a      	ldr	r2, [r7, #20]
 800bbba:	609a      	str	r2, [r3, #8]
}
 800bbbc:	bf00      	nop
 800bbbe:	371c      	adds	r7, #28
 800bbc0:	46bd      	mov	sp, r7
 800bbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc6:	4770      	bx	lr

0800bbc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bbc8:	b480      	push	{r7}
 800bbca:	b085      	sub	sp, #20
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	6078      	str	r0, [r7, #4]
 800bbd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bbd8:	2b01      	cmp	r3, #1
 800bbda:	d101      	bne.n	800bbe0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bbdc:	2302      	movs	r3, #2
 800bbde:	e06d      	b.n	800bcbc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	2201      	movs	r2, #1
 800bbe4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	2202      	movs	r2, #2
 800bbec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	685b      	ldr	r3, [r3, #4]
 800bbf6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	689b      	ldr	r3, [r3, #8]
 800bbfe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	4a30      	ldr	r2, [pc, #192]	@ (800bcc8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bc06:	4293      	cmp	r3, r2
 800bc08:	d004      	beq.n	800bc14 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	4a2f      	ldr	r2, [pc, #188]	@ (800bccc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bc10:	4293      	cmp	r3, r2
 800bc12:	d108      	bne.n	800bc26 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800bc1a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bc1c:	683b      	ldr	r3, [r7, #0]
 800bc1e:	685b      	ldr	r3, [r3, #4]
 800bc20:	68fa      	ldr	r2, [r7, #12]
 800bc22:	4313      	orrs	r3, r2
 800bc24:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bc2c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bc2e:	683b      	ldr	r3, [r7, #0]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	68fa      	ldr	r2, [r7, #12]
 800bc34:	4313      	orrs	r3, r2
 800bc36:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	68fa      	ldr	r2, [r7, #12]
 800bc3e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	4a20      	ldr	r2, [pc, #128]	@ (800bcc8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bc46:	4293      	cmp	r3, r2
 800bc48:	d022      	beq.n	800bc90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bc52:	d01d      	beq.n	800bc90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	4a1d      	ldr	r2, [pc, #116]	@ (800bcd0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800bc5a:	4293      	cmp	r3, r2
 800bc5c:	d018      	beq.n	800bc90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	4a1c      	ldr	r2, [pc, #112]	@ (800bcd4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800bc64:	4293      	cmp	r3, r2
 800bc66:	d013      	beq.n	800bc90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	4a1a      	ldr	r2, [pc, #104]	@ (800bcd8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800bc6e:	4293      	cmp	r3, r2
 800bc70:	d00e      	beq.n	800bc90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	4a15      	ldr	r2, [pc, #84]	@ (800bccc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bc78:	4293      	cmp	r3, r2
 800bc7a:	d009      	beq.n	800bc90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	4a16      	ldr	r2, [pc, #88]	@ (800bcdc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bc82:	4293      	cmp	r3, r2
 800bc84:	d004      	beq.n	800bc90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	4a15      	ldr	r2, [pc, #84]	@ (800bce0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bc8c:	4293      	cmp	r3, r2
 800bc8e:	d10c      	bne.n	800bcaa <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bc90:	68bb      	ldr	r3, [r7, #8]
 800bc92:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bc96:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bc98:	683b      	ldr	r3, [r7, #0]
 800bc9a:	689b      	ldr	r3, [r3, #8]
 800bc9c:	68ba      	ldr	r2, [r7, #8]
 800bc9e:	4313      	orrs	r3, r2
 800bca0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	68ba      	ldr	r2, [r7, #8]
 800bca8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	2201      	movs	r2, #1
 800bcae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	2200      	movs	r2, #0
 800bcb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800bcba:	2300      	movs	r3, #0
}
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	3714      	adds	r7, #20
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc6:	4770      	bx	lr
 800bcc8:	40010000 	.word	0x40010000
 800bccc:	40010400 	.word	0x40010400
 800bcd0:	40000400 	.word	0x40000400
 800bcd4:	40000800 	.word	0x40000800
 800bcd8:	40000c00 	.word	0x40000c00
 800bcdc:	40001800 	.word	0x40001800
 800bce0:	40014000 	.word	0x40014000

0800bce4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bce4:	b480      	push	{r7}
 800bce6:	b083      	sub	sp, #12
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bcec:	bf00      	nop
 800bcee:	370c      	adds	r7, #12
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf6:	4770      	bx	lr

0800bcf8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bcf8:	b480      	push	{r7}
 800bcfa:	b083      	sub	sp, #12
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bd00:	bf00      	nop
 800bd02:	370c      	adds	r7, #12
 800bd04:	46bd      	mov	sp, r7
 800bd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0a:	4770      	bx	lr

0800bd0c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bd0c:	b480      	push	{r7}
 800bd0e:	b083      	sub	sp, #12
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bd14:	bf00      	nop
 800bd16:	370c      	adds	r7, #12
 800bd18:	46bd      	mov	sp, r7
 800bd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd1e:	4770      	bx	lr

0800bd20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	b082      	sub	sp, #8
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d101      	bne.n	800bd32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bd2e:	2301      	movs	r3, #1
 800bd30:	e042      	b.n	800bdb8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d106      	bne.n	800bd4a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	2200      	movs	r2, #0
 800bd40:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bd44:	6878      	ldr	r0, [r7, #4]
 800bd46:	f7f5 ff97 	bl	8001c78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	2224      	movs	r2, #36	@ 0x24
 800bd4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	681a      	ldr	r2, [r3, #0]
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	f022 0201 	bic.w	r2, r2, #1
 800bd60:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d002      	beq.n	800bd70 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800bd6a:	6878      	ldr	r0, [r7, #4]
 800bd6c:	f001 f9ec 	bl	800d148 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bd70:	6878      	ldr	r0, [r7, #4]
 800bd72:	f000 fc81 	bl	800c678 <UART_SetConfig>
 800bd76:	4603      	mov	r3, r0
 800bd78:	2b01      	cmp	r3, #1
 800bd7a:	d101      	bne.n	800bd80 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800bd7c:	2301      	movs	r3, #1
 800bd7e:	e01b      	b.n	800bdb8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	685a      	ldr	r2, [r3, #4]
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800bd8e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	689a      	ldr	r2, [r3, #8]
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800bd9e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	681a      	ldr	r2, [r3, #0]
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	f042 0201 	orr.w	r2, r2, #1
 800bdae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bdb0:	6878      	ldr	r0, [r7, #4]
 800bdb2:	f001 fa6b 	bl	800d28c <UART_CheckIdleState>
 800bdb6:	4603      	mov	r3, r0
}
 800bdb8:	4618      	mov	r0, r3
 800bdba:	3708      	adds	r7, #8
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	bd80      	pop	{r7, pc}

0800bdc0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bdc0:	b580      	push	{r7, lr}
 800bdc2:	b08a      	sub	sp, #40	@ 0x28
 800bdc4:	af02      	add	r7, sp, #8
 800bdc6:	60f8      	str	r0, [r7, #12]
 800bdc8:	60b9      	str	r1, [r7, #8]
 800bdca:	603b      	str	r3, [r7, #0]
 800bdcc:	4613      	mov	r3, r2
 800bdce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bdd6:	2b20      	cmp	r3, #32
 800bdd8:	d17b      	bne.n	800bed2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800bdda:	68bb      	ldr	r3, [r7, #8]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d002      	beq.n	800bde6 <HAL_UART_Transmit+0x26>
 800bde0:	88fb      	ldrh	r3, [r7, #6]
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d101      	bne.n	800bdea <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800bde6:	2301      	movs	r3, #1
 800bde8:	e074      	b.n	800bed4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	2200      	movs	r2, #0
 800bdee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	2221      	movs	r2, #33	@ 0x21
 800bdf6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bdfa:	f7f6 fb39 	bl	8002470 <HAL_GetTick>
 800bdfe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	88fa      	ldrh	r2, [r7, #6]
 800be04:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	88fa      	ldrh	r2, [r7, #6]
 800be0c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	689b      	ldr	r3, [r3, #8]
 800be14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800be18:	d108      	bne.n	800be2c <HAL_UART_Transmit+0x6c>
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	691b      	ldr	r3, [r3, #16]
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d104      	bne.n	800be2c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800be22:	2300      	movs	r3, #0
 800be24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800be26:	68bb      	ldr	r3, [r7, #8]
 800be28:	61bb      	str	r3, [r7, #24]
 800be2a:	e003      	b.n	800be34 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800be2c:	68bb      	ldr	r3, [r7, #8]
 800be2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800be30:	2300      	movs	r3, #0
 800be32:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800be34:	e030      	b.n	800be98 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800be36:	683b      	ldr	r3, [r7, #0]
 800be38:	9300      	str	r3, [sp, #0]
 800be3a:	697b      	ldr	r3, [r7, #20]
 800be3c:	2200      	movs	r2, #0
 800be3e:	2180      	movs	r1, #128	@ 0x80
 800be40:	68f8      	ldr	r0, [r7, #12]
 800be42:	f001 facd 	bl	800d3e0 <UART_WaitOnFlagUntilTimeout>
 800be46:	4603      	mov	r3, r0
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d005      	beq.n	800be58 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	2220      	movs	r2, #32
 800be50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800be54:	2303      	movs	r3, #3
 800be56:	e03d      	b.n	800bed4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800be58:	69fb      	ldr	r3, [r7, #28]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d10b      	bne.n	800be76 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800be5e:	69bb      	ldr	r3, [r7, #24]
 800be60:	881b      	ldrh	r3, [r3, #0]
 800be62:	461a      	mov	r2, r3
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800be6c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800be6e:	69bb      	ldr	r3, [r7, #24]
 800be70:	3302      	adds	r3, #2
 800be72:	61bb      	str	r3, [r7, #24]
 800be74:	e007      	b.n	800be86 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800be76:	69fb      	ldr	r3, [r7, #28]
 800be78:	781a      	ldrb	r2, [r3, #0]
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800be80:	69fb      	ldr	r3, [r7, #28]
 800be82:	3301      	adds	r3, #1
 800be84:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800be8c:	b29b      	uxth	r3, r3
 800be8e:	3b01      	subs	r3, #1
 800be90:	b29a      	uxth	r2, r3
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800be9e:	b29b      	uxth	r3, r3
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d1c8      	bne.n	800be36 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bea4:	683b      	ldr	r3, [r7, #0]
 800bea6:	9300      	str	r3, [sp, #0]
 800bea8:	697b      	ldr	r3, [r7, #20]
 800beaa:	2200      	movs	r2, #0
 800beac:	2140      	movs	r1, #64	@ 0x40
 800beae:	68f8      	ldr	r0, [r7, #12]
 800beb0:	f001 fa96 	bl	800d3e0 <UART_WaitOnFlagUntilTimeout>
 800beb4:	4603      	mov	r3, r0
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d005      	beq.n	800bec6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	2220      	movs	r2, #32
 800bebe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800bec2:	2303      	movs	r3, #3
 800bec4:	e006      	b.n	800bed4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	2220      	movs	r2, #32
 800beca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800bece:	2300      	movs	r3, #0
 800bed0:	e000      	b.n	800bed4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800bed2:	2302      	movs	r3, #2
  }
}
 800bed4:	4618      	mov	r0, r3
 800bed6:	3720      	adds	r7, #32
 800bed8:	46bd      	mov	sp, r7
 800beda:	bd80      	pop	{r7, pc}

0800bedc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bedc:	b580      	push	{r7, lr}
 800bede:	b0ba      	sub	sp, #232	@ 0xe8
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	69db      	ldr	r3, [r3, #28]
 800beea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	689b      	ldr	r3, [r3, #8]
 800befe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800bf02:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800bf06:	f640 030f 	movw	r3, #2063	@ 0x80f
 800bf0a:	4013      	ands	r3, r2
 800bf0c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800bf10:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d11b      	bne.n	800bf50 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bf18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bf1c:	f003 0320 	and.w	r3, r3, #32
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d015      	beq.n	800bf50 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bf24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bf28:	f003 0320 	and.w	r3, r3, #32
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d105      	bne.n	800bf3c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bf30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bf34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d009      	beq.n	800bf50 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	f000 8377 	beq.w	800c634 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bf4a:	6878      	ldr	r0, [r7, #4]
 800bf4c:	4798      	blx	r3
      }
      return;
 800bf4e:	e371      	b.n	800c634 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800bf50:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	f000 8123 	beq.w	800c1a0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800bf5a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800bf5e:	4b8d      	ldr	r3, [pc, #564]	@ (800c194 <HAL_UART_IRQHandler+0x2b8>)
 800bf60:	4013      	ands	r3, r2
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d106      	bne.n	800bf74 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800bf66:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800bf6a:	4b8b      	ldr	r3, [pc, #556]	@ (800c198 <HAL_UART_IRQHandler+0x2bc>)
 800bf6c:	4013      	ands	r3, r2
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	f000 8116 	beq.w	800c1a0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bf74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bf78:	f003 0301 	and.w	r3, r3, #1
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d011      	beq.n	800bfa4 <HAL_UART_IRQHandler+0xc8>
 800bf80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bf84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d00b      	beq.n	800bfa4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	2201      	movs	r2, #1
 800bf92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bf9a:	f043 0201 	orr.w	r2, r3, #1
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bfa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bfa8:	f003 0302 	and.w	r3, r3, #2
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d011      	beq.n	800bfd4 <HAL_UART_IRQHandler+0xf8>
 800bfb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bfb4:	f003 0301 	and.w	r3, r3, #1
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d00b      	beq.n	800bfd4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	2202      	movs	r2, #2
 800bfc2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bfca:	f043 0204 	orr.w	r2, r3, #4
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bfd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bfd8:	f003 0304 	and.w	r3, r3, #4
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d011      	beq.n	800c004 <HAL_UART_IRQHandler+0x128>
 800bfe0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bfe4:	f003 0301 	and.w	r3, r3, #1
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d00b      	beq.n	800c004 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	2204      	movs	r2, #4
 800bff2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bffa:	f043 0202 	orr.w	r2, r3, #2
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c004:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c008:	f003 0308 	and.w	r3, r3, #8
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d017      	beq.n	800c040 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c010:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c014:	f003 0320 	and.w	r3, r3, #32
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d105      	bne.n	800c028 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c01c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c020:	4b5c      	ldr	r3, [pc, #368]	@ (800c194 <HAL_UART_IRQHandler+0x2b8>)
 800c022:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c024:	2b00      	cmp	r3, #0
 800c026:	d00b      	beq.n	800c040 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	2208      	movs	r2, #8
 800c02e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c036:	f043 0208 	orr.w	r2, r3, #8
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c040:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c044:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d012      	beq.n	800c072 <HAL_UART_IRQHandler+0x196>
 800c04c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c050:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c054:	2b00      	cmp	r3, #0
 800c056:	d00c      	beq.n	800c072 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c060:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c068:	f043 0220 	orr.w	r2, r3, #32
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c078:	2b00      	cmp	r3, #0
 800c07a:	f000 82dd 	beq.w	800c638 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c07e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c082:	f003 0320 	and.w	r3, r3, #32
 800c086:	2b00      	cmp	r3, #0
 800c088:	d013      	beq.n	800c0b2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c08a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c08e:	f003 0320 	and.w	r3, r3, #32
 800c092:	2b00      	cmp	r3, #0
 800c094:	d105      	bne.n	800c0a2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c096:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c09a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d007      	beq.n	800c0b2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d003      	beq.n	800c0b2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c0ae:	6878      	ldr	r0, [r7, #4]
 800c0b0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c0b8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	689b      	ldr	r3, [r3, #8]
 800c0c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c0c6:	2b40      	cmp	r3, #64	@ 0x40
 800c0c8:	d005      	beq.n	800c0d6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c0ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c0ce:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d054      	beq.n	800c180 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c0d6:	6878      	ldr	r0, [r7, #4]
 800c0d8:	f001 f9f0 	bl	800d4bc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	689b      	ldr	r3, [r3, #8]
 800c0e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c0e6:	2b40      	cmp	r3, #64	@ 0x40
 800c0e8:	d146      	bne.n	800c178 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	3308      	adds	r3, #8
 800c0f0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c0f8:	e853 3f00 	ldrex	r3, [r3]
 800c0fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800c100:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c104:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c108:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	3308      	adds	r3, #8
 800c112:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800c116:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800c11a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c11e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800c122:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800c126:	e841 2300 	strex	r3, r2, [r1]
 800c12a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800c12e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c132:	2b00      	cmp	r3, #0
 800c134:	d1d9      	bne.n	800c0ea <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d017      	beq.n	800c170 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c146:	4a15      	ldr	r2, [pc, #84]	@ (800c19c <HAL_UART_IRQHandler+0x2c0>)
 800c148:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c150:	4618      	mov	r0, r3
 800c152:	f7f8 ff21 	bl	8004f98 <HAL_DMA_Abort_IT>
 800c156:	4603      	mov	r3, r0
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d019      	beq.n	800c190 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c162:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c164:	687a      	ldr	r2, [r7, #4]
 800c166:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800c16a:	4610      	mov	r0, r2
 800c16c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c16e:	e00f      	b.n	800c190 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c170:	6878      	ldr	r0, [r7, #4]
 800c172:	f000 fa77 	bl	800c664 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c176:	e00b      	b.n	800c190 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c178:	6878      	ldr	r0, [r7, #4]
 800c17a:	f000 fa73 	bl	800c664 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c17e:	e007      	b.n	800c190 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c180:	6878      	ldr	r0, [r7, #4]
 800c182:	f000 fa6f 	bl	800c664 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	2200      	movs	r2, #0
 800c18a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800c18e:	e253      	b.n	800c638 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c190:	bf00      	nop
    return;
 800c192:	e251      	b.n	800c638 <HAL_UART_IRQHandler+0x75c>
 800c194:	10000001 	.word	0x10000001
 800c198:	04000120 	.word	0x04000120
 800c19c:	0800d589 	.word	0x0800d589

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c1a4:	2b01      	cmp	r3, #1
 800c1a6:	f040 81e7 	bne.w	800c578 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c1aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c1ae:	f003 0310 	and.w	r3, r3, #16
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	f000 81e0 	beq.w	800c578 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c1b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c1bc:	f003 0310 	and.w	r3, r3, #16
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	f000 81d9 	beq.w	800c578 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	2210      	movs	r2, #16
 800c1cc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	689b      	ldr	r3, [r3, #8]
 800c1d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c1d8:	2b40      	cmp	r3, #64	@ 0x40
 800c1da:	f040 8151 	bne.w	800c480 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	4a96      	ldr	r2, [pc, #600]	@ (800c440 <HAL_UART_IRQHandler+0x564>)
 800c1e8:	4293      	cmp	r3, r2
 800c1ea:	d068      	beq.n	800c2be <HAL_UART_IRQHandler+0x3e2>
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	4a93      	ldr	r2, [pc, #588]	@ (800c444 <HAL_UART_IRQHandler+0x568>)
 800c1f6:	4293      	cmp	r3, r2
 800c1f8:	d061      	beq.n	800c2be <HAL_UART_IRQHandler+0x3e2>
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	4a91      	ldr	r2, [pc, #580]	@ (800c448 <HAL_UART_IRQHandler+0x56c>)
 800c204:	4293      	cmp	r3, r2
 800c206:	d05a      	beq.n	800c2be <HAL_UART_IRQHandler+0x3e2>
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	4a8e      	ldr	r2, [pc, #568]	@ (800c44c <HAL_UART_IRQHandler+0x570>)
 800c212:	4293      	cmp	r3, r2
 800c214:	d053      	beq.n	800c2be <HAL_UART_IRQHandler+0x3e2>
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	4a8c      	ldr	r2, [pc, #560]	@ (800c450 <HAL_UART_IRQHandler+0x574>)
 800c220:	4293      	cmp	r3, r2
 800c222:	d04c      	beq.n	800c2be <HAL_UART_IRQHandler+0x3e2>
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	4a89      	ldr	r2, [pc, #548]	@ (800c454 <HAL_UART_IRQHandler+0x578>)
 800c22e:	4293      	cmp	r3, r2
 800c230:	d045      	beq.n	800c2be <HAL_UART_IRQHandler+0x3e2>
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	4a87      	ldr	r2, [pc, #540]	@ (800c458 <HAL_UART_IRQHandler+0x57c>)
 800c23c:	4293      	cmp	r3, r2
 800c23e:	d03e      	beq.n	800c2be <HAL_UART_IRQHandler+0x3e2>
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	4a84      	ldr	r2, [pc, #528]	@ (800c45c <HAL_UART_IRQHandler+0x580>)
 800c24a:	4293      	cmp	r3, r2
 800c24c:	d037      	beq.n	800c2be <HAL_UART_IRQHandler+0x3e2>
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	4a82      	ldr	r2, [pc, #520]	@ (800c460 <HAL_UART_IRQHandler+0x584>)
 800c258:	4293      	cmp	r3, r2
 800c25a:	d030      	beq.n	800c2be <HAL_UART_IRQHandler+0x3e2>
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	4a7f      	ldr	r2, [pc, #508]	@ (800c464 <HAL_UART_IRQHandler+0x588>)
 800c266:	4293      	cmp	r3, r2
 800c268:	d029      	beq.n	800c2be <HAL_UART_IRQHandler+0x3e2>
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	4a7d      	ldr	r2, [pc, #500]	@ (800c468 <HAL_UART_IRQHandler+0x58c>)
 800c274:	4293      	cmp	r3, r2
 800c276:	d022      	beq.n	800c2be <HAL_UART_IRQHandler+0x3e2>
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	4a7a      	ldr	r2, [pc, #488]	@ (800c46c <HAL_UART_IRQHandler+0x590>)
 800c282:	4293      	cmp	r3, r2
 800c284:	d01b      	beq.n	800c2be <HAL_UART_IRQHandler+0x3e2>
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	4a78      	ldr	r2, [pc, #480]	@ (800c470 <HAL_UART_IRQHandler+0x594>)
 800c290:	4293      	cmp	r3, r2
 800c292:	d014      	beq.n	800c2be <HAL_UART_IRQHandler+0x3e2>
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	4a75      	ldr	r2, [pc, #468]	@ (800c474 <HAL_UART_IRQHandler+0x598>)
 800c29e:	4293      	cmp	r3, r2
 800c2a0:	d00d      	beq.n	800c2be <HAL_UART_IRQHandler+0x3e2>
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	4a73      	ldr	r2, [pc, #460]	@ (800c478 <HAL_UART_IRQHandler+0x59c>)
 800c2ac:	4293      	cmp	r3, r2
 800c2ae:	d006      	beq.n	800c2be <HAL_UART_IRQHandler+0x3e2>
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	4a70      	ldr	r2, [pc, #448]	@ (800c47c <HAL_UART_IRQHandler+0x5a0>)
 800c2ba:	4293      	cmp	r3, r2
 800c2bc:	d106      	bne.n	800c2cc <HAL_UART_IRQHandler+0x3f0>
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	685b      	ldr	r3, [r3, #4]
 800c2c8:	b29b      	uxth	r3, r3
 800c2ca:	e005      	b.n	800c2d8 <HAL_UART_IRQHandler+0x3fc>
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	685b      	ldr	r3, [r3, #4]
 800c2d6:	b29b      	uxth	r3, r3
 800c2d8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c2dc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	f000 81ab 	beq.w	800c63c <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c2ec:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c2f0:	429a      	cmp	r2, r3
 800c2f2:	f080 81a3 	bcs.w	800c63c <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c2fc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c306:	69db      	ldr	r3, [r3, #28]
 800c308:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c30c:	f000 8087 	beq.w	800c41e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c318:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c31c:	e853 3f00 	ldrex	r3, [r3]
 800c320:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800c324:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c328:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c32c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	461a      	mov	r2, r3
 800c336:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c33a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c33e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c342:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800c346:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c34a:	e841 2300 	strex	r3, r2, [r1]
 800c34e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800c352:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c356:	2b00      	cmp	r3, #0
 800c358:	d1da      	bne.n	800c310 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	3308      	adds	r3, #8
 800c360:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c362:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c364:	e853 3f00 	ldrex	r3, [r3]
 800c368:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c36a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c36c:	f023 0301 	bic.w	r3, r3, #1
 800c370:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	3308      	adds	r3, #8
 800c37a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c37e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800c382:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c384:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c386:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c38a:	e841 2300 	strex	r3, r2, [r1]
 800c38e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c390:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c392:	2b00      	cmp	r3, #0
 800c394:	d1e1      	bne.n	800c35a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	3308      	adds	r3, #8
 800c39c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c39e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c3a0:	e853 3f00 	ldrex	r3, [r3]
 800c3a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c3a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c3a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c3ac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	3308      	adds	r3, #8
 800c3b6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800c3ba:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c3bc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3be:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c3c0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c3c2:	e841 2300 	strex	r3, r2, [r1]
 800c3c6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c3c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d1e3      	bne.n	800c396 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	2220      	movs	r2, #32
 800c3d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	2200      	movs	r2, #0
 800c3da:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c3e4:	e853 3f00 	ldrex	r3, [r3]
 800c3e8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c3ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c3ec:	f023 0310 	bic.w	r3, r3, #16
 800c3f0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	461a      	mov	r2, r3
 800c3fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c3fe:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c400:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c402:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c404:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c406:	e841 2300 	strex	r3, r2, [r1]
 800c40a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c40c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d1e4      	bne.n	800c3dc <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c418:	4618      	mov	r0, r3
 800c41a:	f7f8 fa9f 	bl	800495c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	2202      	movs	r2, #2
 800c422:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c430:	b29b      	uxth	r3, r3
 800c432:	1ad3      	subs	r3, r2, r3
 800c434:	b29b      	uxth	r3, r3
 800c436:	4619      	mov	r1, r3
 800c438:	6878      	ldr	r0, [r7, #4]
 800c43a:	f7f4 ff19 	bl	8001270 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c43e:	e0fd      	b.n	800c63c <HAL_UART_IRQHandler+0x760>
 800c440:	40020010 	.word	0x40020010
 800c444:	40020028 	.word	0x40020028
 800c448:	40020040 	.word	0x40020040
 800c44c:	40020058 	.word	0x40020058
 800c450:	40020070 	.word	0x40020070
 800c454:	40020088 	.word	0x40020088
 800c458:	400200a0 	.word	0x400200a0
 800c45c:	400200b8 	.word	0x400200b8
 800c460:	40020410 	.word	0x40020410
 800c464:	40020428 	.word	0x40020428
 800c468:	40020440 	.word	0x40020440
 800c46c:	40020458 	.word	0x40020458
 800c470:	40020470 	.word	0x40020470
 800c474:	40020488 	.word	0x40020488
 800c478:	400204a0 	.word	0x400204a0
 800c47c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c48c:	b29b      	uxth	r3, r3
 800c48e:	1ad3      	subs	r3, r2, r3
 800c490:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c49a:	b29b      	uxth	r3, r3
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	f000 80cf 	beq.w	800c640 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800c4a2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	f000 80ca 	beq.w	800c640 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4b4:	e853 3f00 	ldrex	r3, [r3]
 800c4b8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c4ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c4c0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	461a      	mov	r2, r3
 800c4ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c4ce:	647b      	str	r3, [r7, #68]	@ 0x44
 800c4d0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4d2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c4d4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c4d6:	e841 2300 	strex	r3, r2, [r1]
 800c4da:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c4dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d1e4      	bne.n	800c4ac <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	3308      	adds	r3, #8
 800c4e8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4ec:	e853 3f00 	ldrex	r3, [r3]
 800c4f0:	623b      	str	r3, [r7, #32]
   return(result);
 800c4f2:	6a3a      	ldr	r2, [r7, #32]
 800c4f4:	4b55      	ldr	r3, [pc, #340]	@ (800c64c <HAL_UART_IRQHandler+0x770>)
 800c4f6:	4013      	ands	r3, r2
 800c4f8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	3308      	adds	r3, #8
 800c502:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800c506:	633a      	str	r2, [r7, #48]	@ 0x30
 800c508:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c50a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c50c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c50e:	e841 2300 	strex	r3, r2, [r1]
 800c512:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c514:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c516:	2b00      	cmp	r3, #0
 800c518:	d1e3      	bne.n	800c4e2 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	2220      	movs	r2, #32
 800c51e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	2200      	movs	r2, #0
 800c526:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	2200      	movs	r2, #0
 800c52c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c534:	693b      	ldr	r3, [r7, #16]
 800c536:	e853 3f00 	ldrex	r3, [r3]
 800c53a:	60fb      	str	r3, [r7, #12]
   return(result);
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	f023 0310 	bic.w	r3, r3, #16
 800c542:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	461a      	mov	r2, r3
 800c54c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800c550:	61fb      	str	r3, [r7, #28]
 800c552:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c554:	69b9      	ldr	r1, [r7, #24]
 800c556:	69fa      	ldr	r2, [r7, #28]
 800c558:	e841 2300 	strex	r3, r2, [r1]
 800c55c:	617b      	str	r3, [r7, #20]
   return(result);
 800c55e:	697b      	ldr	r3, [r7, #20]
 800c560:	2b00      	cmp	r3, #0
 800c562:	d1e4      	bne.n	800c52e <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	2202      	movs	r2, #2
 800c568:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c56a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c56e:	4619      	mov	r1, r3
 800c570:	6878      	ldr	r0, [r7, #4]
 800c572:	f7f4 fe7d 	bl	8001270 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c576:	e063      	b.n	800c640 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c578:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c57c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c580:	2b00      	cmp	r3, #0
 800c582:	d00e      	beq.n	800c5a2 <HAL_UART_IRQHandler+0x6c6>
 800c584:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c588:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d008      	beq.n	800c5a2 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800c598:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c59a:	6878      	ldr	r0, [r7, #4]
 800c59c:	f001 f835 	bl	800d60a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c5a0:	e051      	b.n	800c646 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c5a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c5a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d014      	beq.n	800c5d8 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c5ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c5b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d105      	bne.n	800c5c6 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c5ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c5be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d008      	beq.n	800c5d8 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d03a      	beq.n	800c644 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c5d2:	6878      	ldr	r0, [r7, #4]
 800c5d4:	4798      	blx	r3
    }
    return;
 800c5d6:	e035      	b.n	800c644 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c5d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c5dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d009      	beq.n	800c5f8 <HAL_UART_IRQHandler+0x71c>
 800c5e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c5e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d003      	beq.n	800c5f8 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800c5f0:	6878      	ldr	r0, [r7, #4]
 800c5f2:	f000 ffdf 	bl	800d5b4 <UART_EndTransmit_IT>
    return;
 800c5f6:	e026      	b.n	800c646 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c5f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c5fc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c600:	2b00      	cmp	r3, #0
 800c602:	d009      	beq.n	800c618 <HAL_UART_IRQHandler+0x73c>
 800c604:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c608:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d003      	beq.n	800c618 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c610:	6878      	ldr	r0, [r7, #4]
 800c612:	f001 f80e 	bl	800d632 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c616:	e016      	b.n	800c646 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c618:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c61c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c620:	2b00      	cmp	r3, #0
 800c622:	d010      	beq.n	800c646 <HAL_UART_IRQHandler+0x76a>
 800c624:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c628:	2b00      	cmp	r3, #0
 800c62a:	da0c      	bge.n	800c646 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c62c:	6878      	ldr	r0, [r7, #4]
 800c62e:	f000 fff6 	bl	800d61e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c632:	e008      	b.n	800c646 <HAL_UART_IRQHandler+0x76a>
      return;
 800c634:	bf00      	nop
 800c636:	e006      	b.n	800c646 <HAL_UART_IRQHandler+0x76a>
    return;
 800c638:	bf00      	nop
 800c63a:	e004      	b.n	800c646 <HAL_UART_IRQHandler+0x76a>
      return;
 800c63c:	bf00      	nop
 800c63e:	e002      	b.n	800c646 <HAL_UART_IRQHandler+0x76a>
      return;
 800c640:	bf00      	nop
 800c642:	e000      	b.n	800c646 <HAL_UART_IRQHandler+0x76a>
    return;
 800c644:	bf00      	nop
  }
}
 800c646:	37e8      	adds	r7, #232	@ 0xe8
 800c648:	46bd      	mov	sp, r7
 800c64a:	bd80      	pop	{r7, pc}
 800c64c:	effffffe 	.word	0xeffffffe

0800c650 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c650:	b480      	push	{r7}
 800c652:	b083      	sub	sp, #12
 800c654:	af00      	add	r7, sp, #0
 800c656:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c658:	bf00      	nop
 800c65a:	370c      	adds	r7, #12
 800c65c:	46bd      	mov	sp, r7
 800c65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c662:	4770      	bx	lr

0800c664 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c664:	b480      	push	{r7}
 800c666:	b083      	sub	sp, #12
 800c668:	af00      	add	r7, sp, #0
 800c66a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c66c:	bf00      	nop
 800c66e:	370c      	adds	r7, #12
 800c670:	46bd      	mov	sp, r7
 800c672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c676:	4770      	bx	lr

0800c678 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c678:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c67c:	b092      	sub	sp, #72	@ 0x48
 800c67e:	af00      	add	r7, sp, #0
 800c680:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c682:	2300      	movs	r3, #0
 800c684:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c688:	697b      	ldr	r3, [r7, #20]
 800c68a:	689a      	ldr	r2, [r3, #8]
 800c68c:	697b      	ldr	r3, [r7, #20]
 800c68e:	691b      	ldr	r3, [r3, #16]
 800c690:	431a      	orrs	r2, r3
 800c692:	697b      	ldr	r3, [r7, #20]
 800c694:	695b      	ldr	r3, [r3, #20]
 800c696:	431a      	orrs	r2, r3
 800c698:	697b      	ldr	r3, [r7, #20]
 800c69a:	69db      	ldr	r3, [r3, #28]
 800c69c:	4313      	orrs	r3, r2
 800c69e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c6a0:	697b      	ldr	r3, [r7, #20]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	681a      	ldr	r2, [r3, #0]
 800c6a6:	4bbe      	ldr	r3, [pc, #760]	@ (800c9a0 <UART_SetConfig+0x328>)
 800c6a8:	4013      	ands	r3, r2
 800c6aa:	697a      	ldr	r2, [r7, #20]
 800c6ac:	6812      	ldr	r2, [r2, #0]
 800c6ae:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c6b0:	430b      	orrs	r3, r1
 800c6b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c6b4:	697b      	ldr	r3, [r7, #20]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	685b      	ldr	r3, [r3, #4]
 800c6ba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c6be:	697b      	ldr	r3, [r7, #20]
 800c6c0:	68da      	ldr	r2, [r3, #12]
 800c6c2:	697b      	ldr	r3, [r7, #20]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	430a      	orrs	r2, r1
 800c6c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c6ca:	697b      	ldr	r3, [r7, #20]
 800c6cc:	699b      	ldr	r3, [r3, #24]
 800c6ce:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c6d0:	697b      	ldr	r3, [r7, #20]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	4ab3      	ldr	r2, [pc, #716]	@ (800c9a4 <UART_SetConfig+0x32c>)
 800c6d6:	4293      	cmp	r3, r2
 800c6d8:	d004      	beq.n	800c6e4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c6da:	697b      	ldr	r3, [r7, #20]
 800c6dc:	6a1b      	ldr	r3, [r3, #32]
 800c6de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c6e0:	4313      	orrs	r3, r2
 800c6e2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c6e4:	697b      	ldr	r3, [r7, #20]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	689a      	ldr	r2, [r3, #8]
 800c6ea:	4baf      	ldr	r3, [pc, #700]	@ (800c9a8 <UART_SetConfig+0x330>)
 800c6ec:	4013      	ands	r3, r2
 800c6ee:	697a      	ldr	r2, [r7, #20]
 800c6f0:	6812      	ldr	r2, [r2, #0]
 800c6f2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c6f4:	430b      	orrs	r3, r1
 800c6f6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c6f8:	697b      	ldr	r3, [r7, #20]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6fe:	f023 010f 	bic.w	r1, r3, #15
 800c702:	697b      	ldr	r3, [r7, #20]
 800c704:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c706:	697b      	ldr	r3, [r7, #20]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	430a      	orrs	r2, r1
 800c70c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c70e:	697b      	ldr	r3, [r7, #20]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	4aa6      	ldr	r2, [pc, #664]	@ (800c9ac <UART_SetConfig+0x334>)
 800c714:	4293      	cmp	r3, r2
 800c716:	d177      	bne.n	800c808 <UART_SetConfig+0x190>
 800c718:	4ba5      	ldr	r3, [pc, #660]	@ (800c9b0 <UART_SetConfig+0x338>)
 800c71a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c71c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c720:	2b28      	cmp	r3, #40	@ 0x28
 800c722:	d86d      	bhi.n	800c800 <UART_SetConfig+0x188>
 800c724:	a201      	add	r2, pc, #4	@ (adr r2, 800c72c <UART_SetConfig+0xb4>)
 800c726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c72a:	bf00      	nop
 800c72c:	0800c7d1 	.word	0x0800c7d1
 800c730:	0800c801 	.word	0x0800c801
 800c734:	0800c801 	.word	0x0800c801
 800c738:	0800c801 	.word	0x0800c801
 800c73c:	0800c801 	.word	0x0800c801
 800c740:	0800c801 	.word	0x0800c801
 800c744:	0800c801 	.word	0x0800c801
 800c748:	0800c801 	.word	0x0800c801
 800c74c:	0800c7d9 	.word	0x0800c7d9
 800c750:	0800c801 	.word	0x0800c801
 800c754:	0800c801 	.word	0x0800c801
 800c758:	0800c801 	.word	0x0800c801
 800c75c:	0800c801 	.word	0x0800c801
 800c760:	0800c801 	.word	0x0800c801
 800c764:	0800c801 	.word	0x0800c801
 800c768:	0800c801 	.word	0x0800c801
 800c76c:	0800c7e1 	.word	0x0800c7e1
 800c770:	0800c801 	.word	0x0800c801
 800c774:	0800c801 	.word	0x0800c801
 800c778:	0800c801 	.word	0x0800c801
 800c77c:	0800c801 	.word	0x0800c801
 800c780:	0800c801 	.word	0x0800c801
 800c784:	0800c801 	.word	0x0800c801
 800c788:	0800c801 	.word	0x0800c801
 800c78c:	0800c7e9 	.word	0x0800c7e9
 800c790:	0800c801 	.word	0x0800c801
 800c794:	0800c801 	.word	0x0800c801
 800c798:	0800c801 	.word	0x0800c801
 800c79c:	0800c801 	.word	0x0800c801
 800c7a0:	0800c801 	.word	0x0800c801
 800c7a4:	0800c801 	.word	0x0800c801
 800c7a8:	0800c801 	.word	0x0800c801
 800c7ac:	0800c7f1 	.word	0x0800c7f1
 800c7b0:	0800c801 	.word	0x0800c801
 800c7b4:	0800c801 	.word	0x0800c801
 800c7b8:	0800c801 	.word	0x0800c801
 800c7bc:	0800c801 	.word	0x0800c801
 800c7c0:	0800c801 	.word	0x0800c801
 800c7c4:	0800c801 	.word	0x0800c801
 800c7c8:	0800c801 	.word	0x0800c801
 800c7cc:	0800c7f9 	.word	0x0800c7f9
 800c7d0:	2301      	movs	r3, #1
 800c7d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c7d6:	e222      	b.n	800cc1e <UART_SetConfig+0x5a6>
 800c7d8:	2304      	movs	r3, #4
 800c7da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c7de:	e21e      	b.n	800cc1e <UART_SetConfig+0x5a6>
 800c7e0:	2308      	movs	r3, #8
 800c7e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c7e6:	e21a      	b.n	800cc1e <UART_SetConfig+0x5a6>
 800c7e8:	2310      	movs	r3, #16
 800c7ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c7ee:	e216      	b.n	800cc1e <UART_SetConfig+0x5a6>
 800c7f0:	2320      	movs	r3, #32
 800c7f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c7f6:	e212      	b.n	800cc1e <UART_SetConfig+0x5a6>
 800c7f8:	2340      	movs	r3, #64	@ 0x40
 800c7fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c7fe:	e20e      	b.n	800cc1e <UART_SetConfig+0x5a6>
 800c800:	2380      	movs	r3, #128	@ 0x80
 800c802:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c806:	e20a      	b.n	800cc1e <UART_SetConfig+0x5a6>
 800c808:	697b      	ldr	r3, [r7, #20]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	4a69      	ldr	r2, [pc, #420]	@ (800c9b4 <UART_SetConfig+0x33c>)
 800c80e:	4293      	cmp	r3, r2
 800c810:	d130      	bne.n	800c874 <UART_SetConfig+0x1fc>
 800c812:	4b67      	ldr	r3, [pc, #412]	@ (800c9b0 <UART_SetConfig+0x338>)
 800c814:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c816:	f003 0307 	and.w	r3, r3, #7
 800c81a:	2b05      	cmp	r3, #5
 800c81c:	d826      	bhi.n	800c86c <UART_SetConfig+0x1f4>
 800c81e:	a201      	add	r2, pc, #4	@ (adr r2, 800c824 <UART_SetConfig+0x1ac>)
 800c820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c824:	0800c83d 	.word	0x0800c83d
 800c828:	0800c845 	.word	0x0800c845
 800c82c:	0800c84d 	.word	0x0800c84d
 800c830:	0800c855 	.word	0x0800c855
 800c834:	0800c85d 	.word	0x0800c85d
 800c838:	0800c865 	.word	0x0800c865
 800c83c:	2300      	movs	r3, #0
 800c83e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c842:	e1ec      	b.n	800cc1e <UART_SetConfig+0x5a6>
 800c844:	2304      	movs	r3, #4
 800c846:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c84a:	e1e8      	b.n	800cc1e <UART_SetConfig+0x5a6>
 800c84c:	2308      	movs	r3, #8
 800c84e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c852:	e1e4      	b.n	800cc1e <UART_SetConfig+0x5a6>
 800c854:	2310      	movs	r3, #16
 800c856:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c85a:	e1e0      	b.n	800cc1e <UART_SetConfig+0x5a6>
 800c85c:	2320      	movs	r3, #32
 800c85e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c862:	e1dc      	b.n	800cc1e <UART_SetConfig+0x5a6>
 800c864:	2340      	movs	r3, #64	@ 0x40
 800c866:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c86a:	e1d8      	b.n	800cc1e <UART_SetConfig+0x5a6>
 800c86c:	2380      	movs	r3, #128	@ 0x80
 800c86e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c872:	e1d4      	b.n	800cc1e <UART_SetConfig+0x5a6>
 800c874:	697b      	ldr	r3, [r7, #20]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	4a4f      	ldr	r2, [pc, #316]	@ (800c9b8 <UART_SetConfig+0x340>)
 800c87a:	4293      	cmp	r3, r2
 800c87c:	d130      	bne.n	800c8e0 <UART_SetConfig+0x268>
 800c87e:	4b4c      	ldr	r3, [pc, #304]	@ (800c9b0 <UART_SetConfig+0x338>)
 800c880:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c882:	f003 0307 	and.w	r3, r3, #7
 800c886:	2b05      	cmp	r3, #5
 800c888:	d826      	bhi.n	800c8d8 <UART_SetConfig+0x260>
 800c88a:	a201      	add	r2, pc, #4	@ (adr r2, 800c890 <UART_SetConfig+0x218>)
 800c88c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c890:	0800c8a9 	.word	0x0800c8a9
 800c894:	0800c8b1 	.word	0x0800c8b1
 800c898:	0800c8b9 	.word	0x0800c8b9
 800c89c:	0800c8c1 	.word	0x0800c8c1
 800c8a0:	0800c8c9 	.word	0x0800c8c9
 800c8a4:	0800c8d1 	.word	0x0800c8d1
 800c8a8:	2300      	movs	r3, #0
 800c8aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c8ae:	e1b6      	b.n	800cc1e <UART_SetConfig+0x5a6>
 800c8b0:	2304      	movs	r3, #4
 800c8b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c8b6:	e1b2      	b.n	800cc1e <UART_SetConfig+0x5a6>
 800c8b8:	2308      	movs	r3, #8
 800c8ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c8be:	e1ae      	b.n	800cc1e <UART_SetConfig+0x5a6>
 800c8c0:	2310      	movs	r3, #16
 800c8c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c8c6:	e1aa      	b.n	800cc1e <UART_SetConfig+0x5a6>
 800c8c8:	2320      	movs	r3, #32
 800c8ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c8ce:	e1a6      	b.n	800cc1e <UART_SetConfig+0x5a6>
 800c8d0:	2340      	movs	r3, #64	@ 0x40
 800c8d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c8d6:	e1a2      	b.n	800cc1e <UART_SetConfig+0x5a6>
 800c8d8:	2380      	movs	r3, #128	@ 0x80
 800c8da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c8de:	e19e      	b.n	800cc1e <UART_SetConfig+0x5a6>
 800c8e0:	697b      	ldr	r3, [r7, #20]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	4a35      	ldr	r2, [pc, #212]	@ (800c9bc <UART_SetConfig+0x344>)
 800c8e6:	4293      	cmp	r3, r2
 800c8e8:	d130      	bne.n	800c94c <UART_SetConfig+0x2d4>
 800c8ea:	4b31      	ldr	r3, [pc, #196]	@ (800c9b0 <UART_SetConfig+0x338>)
 800c8ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c8ee:	f003 0307 	and.w	r3, r3, #7
 800c8f2:	2b05      	cmp	r3, #5
 800c8f4:	d826      	bhi.n	800c944 <UART_SetConfig+0x2cc>
 800c8f6:	a201      	add	r2, pc, #4	@ (adr r2, 800c8fc <UART_SetConfig+0x284>)
 800c8f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8fc:	0800c915 	.word	0x0800c915
 800c900:	0800c91d 	.word	0x0800c91d
 800c904:	0800c925 	.word	0x0800c925
 800c908:	0800c92d 	.word	0x0800c92d
 800c90c:	0800c935 	.word	0x0800c935
 800c910:	0800c93d 	.word	0x0800c93d
 800c914:	2300      	movs	r3, #0
 800c916:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c91a:	e180      	b.n	800cc1e <UART_SetConfig+0x5a6>
 800c91c:	2304      	movs	r3, #4
 800c91e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c922:	e17c      	b.n	800cc1e <UART_SetConfig+0x5a6>
 800c924:	2308      	movs	r3, #8
 800c926:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c92a:	e178      	b.n	800cc1e <UART_SetConfig+0x5a6>
 800c92c:	2310      	movs	r3, #16
 800c92e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c932:	e174      	b.n	800cc1e <UART_SetConfig+0x5a6>
 800c934:	2320      	movs	r3, #32
 800c936:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c93a:	e170      	b.n	800cc1e <UART_SetConfig+0x5a6>
 800c93c:	2340      	movs	r3, #64	@ 0x40
 800c93e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c942:	e16c      	b.n	800cc1e <UART_SetConfig+0x5a6>
 800c944:	2380      	movs	r3, #128	@ 0x80
 800c946:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c94a:	e168      	b.n	800cc1e <UART_SetConfig+0x5a6>
 800c94c:	697b      	ldr	r3, [r7, #20]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	4a1b      	ldr	r2, [pc, #108]	@ (800c9c0 <UART_SetConfig+0x348>)
 800c952:	4293      	cmp	r3, r2
 800c954:	d142      	bne.n	800c9dc <UART_SetConfig+0x364>
 800c956:	4b16      	ldr	r3, [pc, #88]	@ (800c9b0 <UART_SetConfig+0x338>)
 800c958:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c95a:	f003 0307 	and.w	r3, r3, #7
 800c95e:	2b05      	cmp	r3, #5
 800c960:	d838      	bhi.n	800c9d4 <UART_SetConfig+0x35c>
 800c962:	a201      	add	r2, pc, #4	@ (adr r2, 800c968 <UART_SetConfig+0x2f0>)
 800c964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c968:	0800c981 	.word	0x0800c981
 800c96c:	0800c989 	.word	0x0800c989
 800c970:	0800c991 	.word	0x0800c991
 800c974:	0800c999 	.word	0x0800c999
 800c978:	0800c9c5 	.word	0x0800c9c5
 800c97c:	0800c9cd 	.word	0x0800c9cd
 800c980:	2300      	movs	r3, #0
 800c982:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c986:	e14a      	b.n	800cc1e <UART_SetConfig+0x5a6>
 800c988:	2304      	movs	r3, #4
 800c98a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c98e:	e146      	b.n	800cc1e <UART_SetConfig+0x5a6>
 800c990:	2308      	movs	r3, #8
 800c992:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c996:	e142      	b.n	800cc1e <UART_SetConfig+0x5a6>
 800c998:	2310      	movs	r3, #16
 800c99a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c99e:	e13e      	b.n	800cc1e <UART_SetConfig+0x5a6>
 800c9a0:	cfff69f3 	.word	0xcfff69f3
 800c9a4:	58000c00 	.word	0x58000c00
 800c9a8:	11fff4ff 	.word	0x11fff4ff
 800c9ac:	40011000 	.word	0x40011000
 800c9b0:	58024400 	.word	0x58024400
 800c9b4:	40004400 	.word	0x40004400
 800c9b8:	40004800 	.word	0x40004800
 800c9bc:	40004c00 	.word	0x40004c00
 800c9c0:	40005000 	.word	0x40005000
 800c9c4:	2320      	movs	r3, #32
 800c9c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c9ca:	e128      	b.n	800cc1e <UART_SetConfig+0x5a6>
 800c9cc:	2340      	movs	r3, #64	@ 0x40
 800c9ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c9d2:	e124      	b.n	800cc1e <UART_SetConfig+0x5a6>
 800c9d4:	2380      	movs	r3, #128	@ 0x80
 800c9d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c9da:	e120      	b.n	800cc1e <UART_SetConfig+0x5a6>
 800c9dc:	697b      	ldr	r3, [r7, #20]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	4acb      	ldr	r2, [pc, #812]	@ (800cd10 <UART_SetConfig+0x698>)
 800c9e2:	4293      	cmp	r3, r2
 800c9e4:	d176      	bne.n	800cad4 <UART_SetConfig+0x45c>
 800c9e6:	4bcb      	ldr	r3, [pc, #812]	@ (800cd14 <UART_SetConfig+0x69c>)
 800c9e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c9ea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c9ee:	2b28      	cmp	r3, #40	@ 0x28
 800c9f0:	d86c      	bhi.n	800cacc <UART_SetConfig+0x454>
 800c9f2:	a201      	add	r2, pc, #4	@ (adr r2, 800c9f8 <UART_SetConfig+0x380>)
 800c9f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9f8:	0800ca9d 	.word	0x0800ca9d
 800c9fc:	0800cacd 	.word	0x0800cacd
 800ca00:	0800cacd 	.word	0x0800cacd
 800ca04:	0800cacd 	.word	0x0800cacd
 800ca08:	0800cacd 	.word	0x0800cacd
 800ca0c:	0800cacd 	.word	0x0800cacd
 800ca10:	0800cacd 	.word	0x0800cacd
 800ca14:	0800cacd 	.word	0x0800cacd
 800ca18:	0800caa5 	.word	0x0800caa5
 800ca1c:	0800cacd 	.word	0x0800cacd
 800ca20:	0800cacd 	.word	0x0800cacd
 800ca24:	0800cacd 	.word	0x0800cacd
 800ca28:	0800cacd 	.word	0x0800cacd
 800ca2c:	0800cacd 	.word	0x0800cacd
 800ca30:	0800cacd 	.word	0x0800cacd
 800ca34:	0800cacd 	.word	0x0800cacd
 800ca38:	0800caad 	.word	0x0800caad
 800ca3c:	0800cacd 	.word	0x0800cacd
 800ca40:	0800cacd 	.word	0x0800cacd
 800ca44:	0800cacd 	.word	0x0800cacd
 800ca48:	0800cacd 	.word	0x0800cacd
 800ca4c:	0800cacd 	.word	0x0800cacd
 800ca50:	0800cacd 	.word	0x0800cacd
 800ca54:	0800cacd 	.word	0x0800cacd
 800ca58:	0800cab5 	.word	0x0800cab5
 800ca5c:	0800cacd 	.word	0x0800cacd
 800ca60:	0800cacd 	.word	0x0800cacd
 800ca64:	0800cacd 	.word	0x0800cacd
 800ca68:	0800cacd 	.word	0x0800cacd
 800ca6c:	0800cacd 	.word	0x0800cacd
 800ca70:	0800cacd 	.word	0x0800cacd
 800ca74:	0800cacd 	.word	0x0800cacd
 800ca78:	0800cabd 	.word	0x0800cabd
 800ca7c:	0800cacd 	.word	0x0800cacd
 800ca80:	0800cacd 	.word	0x0800cacd
 800ca84:	0800cacd 	.word	0x0800cacd
 800ca88:	0800cacd 	.word	0x0800cacd
 800ca8c:	0800cacd 	.word	0x0800cacd
 800ca90:	0800cacd 	.word	0x0800cacd
 800ca94:	0800cacd 	.word	0x0800cacd
 800ca98:	0800cac5 	.word	0x0800cac5
 800ca9c:	2301      	movs	r3, #1
 800ca9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800caa2:	e0bc      	b.n	800cc1e <UART_SetConfig+0x5a6>
 800caa4:	2304      	movs	r3, #4
 800caa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800caaa:	e0b8      	b.n	800cc1e <UART_SetConfig+0x5a6>
 800caac:	2308      	movs	r3, #8
 800caae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cab2:	e0b4      	b.n	800cc1e <UART_SetConfig+0x5a6>
 800cab4:	2310      	movs	r3, #16
 800cab6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800caba:	e0b0      	b.n	800cc1e <UART_SetConfig+0x5a6>
 800cabc:	2320      	movs	r3, #32
 800cabe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cac2:	e0ac      	b.n	800cc1e <UART_SetConfig+0x5a6>
 800cac4:	2340      	movs	r3, #64	@ 0x40
 800cac6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800caca:	e0a8      	b.n	800cc1e <UART_SetConfig+0x5a6>
 800cacc:	2380      	movs	r3, #128	@ 0x80
 800cace:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cad2:	e0a4      	b.n	800cc1e <UART_SetConfig+0x5a6>
 800cad4:	697b      	ldr	r3, [r7, #20]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	4a8f      	ldr	r2, [pc, #572]	@ (800cd18 <UART_SetConfig+0x6a0>)
 800cada:	4293      	cmp	r3, r2
 800cadc:	d130      	bne.n	800cb40 <UART_SetConfig+0x4c8>
 800cade:	4b8d      	ldr	r3, [pc, #564]	@ (800cd14 <UART_SetConfig+0x69c>)
 800cae0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cae2:	f003 0307 	and.w	r3, r3, #7
 800cae6:	2b05      	cmp	r3, #5
 800cae8:	d826      	bhi.n	800cb38 <UART_SetConfig+0x4c0>
 800caea:	a201      	add	r2, pc, #4	@ (adr r2, 800caf0 <UART_SetConfig+0x478>)
 800caec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800caf0:	0800cb09 	.word	0x0800cb09
 800caf4:	0800cb11 	.word	0x0800cb11
 800caf8:	0800cb19 	.word	0x0800cb19
 800cafc:	0800cb21 	.word	0x0800cb21
 800cb00:	0800cb29 	.word	0x0800cb29
 800cb04:	0800cb31 	.word	0x0800cb31
 800cb08:	2300      	movs	r3, #0
 800cb0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb0e:	e086      	b.n	800cc1e <UART_SetConfig+0x5a6>
 800cb10:	2304      	movs	r3, #4
 800cb12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb16:	e082      	b.n	800cc1e <UART_SetConfig+0x5a6>
 800cb18:	2308      	movs	r3, #8
 800cb1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb1e:	e07e      	b.n	800cc1e <UART_SetConfig+0x5a6>
 800cb20:	2310      	movs	r3, #16
 800cb22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb26:	e07a      	b.n	800cc1e <UART_SetConfig+0x5a6>
 800cb28:	2320      	movs	r3, #32
 800cb2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb2e:	e076      	b.n	800cc1e <UART_SetConfig+0x5a6>
 800cb30:	2340      	movs	r3, #64	@ 0x40
 800cb32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb36:	e072      	b.n	800cc1e <UART_SetConfig+0x5a6>
 800cb38:	2380      	movs	r3, #128	@ 0x80
 800cb3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb3e:	e06e      	b.n	800cc1e <UART_SetConfig+0x5a6>
 800cb40:	697b      	ldr	r3, [r7, #20]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	4a75      	ldr	r2, [pc, #468]	@ (800cd1c <UART_SetConfig+0x6a4>)
 800cb46:	4293      	cmp	r3, r2
 800cb48:	d130      	bne.n	800cbac <UART_SetConfig+0x534>
 800cb4a:	4b72      	ldr	r3, [pc, #456]	@ (800cd14 <UART_SetConfig+0x69c>)
 800cb4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cb4e:	f003 0307 	and.w	r3, r3, #7
 800cb52:	2b05      	cmp	r3, #5
 800cb54:	d826      	bhi.n	800cba4 <UART_SetConfig+0x52c>
 800cb56:	a201      	add	r2, pc, #4	@ (adr r2, 800cb5c <UART_SetConfig+0x4e4>)
 800cb58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb5c:	0800cb75 	.word	0x0800cb75
 800cb60:	0800cb7d 	.word	0x0800cb7d
 800cb64:	0800cb85 	.word	0x0800cb85
 800cb68:	0800cb8d 	.word	0x0800cb8d
 800cb6c:	0800cb95 	.word	0x0800cb95
 800cb70:	0800cb9d 	.word	0x0800cb9d
 800cb74:	2300      	movs	r3, #0
 800cb76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb7a:	e050      	b.n	800cc1e <UART_SetConfig+0x5a6>
 800cb7c:	2304      	movs	r3, #4
 800cb7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb82:	e04c      	b.n	800cc1e <UART_SetConfig+0x5a6>
 800cb84:	2308      	movs	r3, #8
 800cb86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb8a:	e048      	b.n	800cc1e <UART_SetConfig+0x5a6>
 800cb8c:	2310      	movs	r3, #16
 800cb8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb92:	e044      	b.n	800cc1e <UART_SetConfig+0x5a6>
 800cb94:	2320      	movs	r3, #32
 800cb96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb9a:	e040      	b.n	800cc1e <UART_SetConfig+0x5a6>
 800cb9c:	2340      	movs	r3, #64	@ 0x40
 800cb9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cba2:	e03c      	b.n	800cc1e <UART_SetConfig+0x5a6>
 800cba4:	2380      	movs	r3, #128	@ 0x80
 800cba6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cbaa:	e038      	b.n	800cc1e <UART_SetConfig+0x5a6>
 800cbac:	697b      	ldr	r3, [r7, #20]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	4a5b      	ldr	r2, [pc, #364]	@ (800cd20 <UART_SetConfig+0x6a8>)
 800cbb2:	4293      	cmp	r3, r2
 800cbb4:	d130      	bne.n	800cc18 <UART_SetConfig+0x5a0>
 800cbb6:	4b57      	ldr	r3, [pc, #348]	@ (800cd14 <UART_SetConfig+0x69c>)
 800cbb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cbba:	f003 0307 	and.w	r3, r3, #7
 800cbbe:	2b05      	cmp	r3, #5
 800cbc0:	d826      	bhi.n	800cc10 <UART_SetConfig+0x598>
 800cbc2:	a201      	add	r2, pc, #4	@ (adr r2, 800cbc8 <UART_SetConfig+0x550>)
 800cbc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbc8:	0800cbe1 	.word	0x0800cbe1
 800cbcc:	0800cbe9 	.word	0x0800cbe9
 800cbd0:	0800cbf1 	.word	0x0800cbf1
 800cbd4:	0800cbf9 	.word	0x0800cbf9
 800cbd8:	0800cc01 	.word	0x0800cc01
 800cbdc:	0800cc09 	.word	0x0800cc09
 800cbe0:	2302      	movs	r3, #2
 800cbe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cbe6:	e01a      	b.n	800cc1e <UART_SetConfig+0x5a6>
 800cbe8:	2304      	movs	r3, #4
 800cbea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cbee:	e016      	b.n	800cc1e <UART_SetConfig+0x5a6>
 800cbf0:	2308      	movs	r3, #8
 800cbf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cbf6:	e012      	b.n	800cc1e <UART_SetConfig+0x5a6>
 800cbf8:	2310      	movs	r3, #16
 800cbfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cbfe:	e00e      	b.n	800cc1e <UART_SetConfig+0x5a6>
 800cc00:	2320      	movs	r3, #32
 800cc02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc06:	e00a      	b.n	800cc1e <UART_SetConfig+0x5a6>
 800cc08:	2340      	movs	r3, #64	@ 0x40
 800cc0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc0e:	e006      	b.n	800cc1e <UART_SetConfig+0x5a6>
 800cc10:	2380      	movs	r3, #128	@ 0x80
 800cc12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc16:	e002      	b.n	800cc1e <UART_SetConfig+0x5a6>
 800cc18:	2380      	movs	r3, #128	@ 0x80
 800cc1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800cc1e:	697b      	ldr	r3, [r7, #20]
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	4a3f      	ldr	r2, [pc, #252]	@ (800cd20 <UART_SetConfig+0x6a8>)
 800cc24:	4293      	cmp	r3, r2
 800cc26:	f040 80f8 	bne.w	800ce1a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800cc2a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800cc2e:	2b20      	cmp	r3, #32
 800cc30:	dc46      	bgt.n	800ccc0 <UART_SetConfig+0x648>
 800cc32:	2b02      	cmp	r3, #2
 800cc34:	f2c0 8082 	blt.w	800cd3c <UART_SetConfig+0x6c4>
 800cc38:	3b02      	subs	r3, #2
 800cc3a:	2b1e      	cmp	r3, #30
 800cc3c:	d87e      	bhi.n	800cd3c <UART_SetConfig+0x6c4>
 800cc3e:	a201      	add	r2, pc, #4	@ (adr r2, 800cc44 <UART_SetConfig+0x5cc>)
 800cc40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc44:	0800ccc7 	.word	0x0800ccc7
 800cc48:	0800cd3d 	.word	0x0800cd3d
 800cc4c:	0800cccf 	.word	0x0800cccf
 800cc50:	0800cd3d 	.word	0x0800cd3d
 800cc54:	0800cd3d 	.word	0x0800cd3d
 800cc58:	0800cd3d 	.word	0x0800cd3d
 800cc5c:	0800ccdf 	.word	0x0800ccdf
 800cc60:	0800cd3d 	.word	0x0800cd3d
 800cc64:	0800cd3d 	.word	0x0800cd3d
 800cc68:	0800cd3d 	.word	0x0800cd3d
 800cc6c:	0800cd3d 	.word	0x0800cd3d
 800cc70:	0800cd3d 	.word	0x0800cd3d
 800cc74:	0800cd3d 	.word	0x0800cd3d
 800cc78:	0800cd3d 	.word	0x0800cd3d
 800cc7c:	0800ccef 	.word	0x0800ccef
 800cc80:	0800cd3d 	.word	0x0800cd3d
 800cc84:	0800cd3d 	.word	0x0800cd3d
 800cc88:	0800cd3d 	.word	0x0800cd3d
 800cc8c:	0800cd3d 	.word	0x0800cd3d
 800cc90:	0800cd3d 	.word	0x0800cd3d
 800cc94:	0800cd3d 	.word	0x0800cd3d
 800cc98:	0800cd3d 	.word	0x0800cd3d
 800cc9c:	0800cd3d 	.word	0x0800cd3d
 800cca0:	0800cd3d 	.word	0x0800cd3d
 800cca4:	0800cd3d 	.word	0x0800cd3d
 800cca8:	0800cd3d 	.word	0x0800cd3d
 800ccac:	0800cd3d 	.word	0x0800cd3d
 800ccb0:	0800cd3d 	.word	0x0800cd3d
 800ccb4:	0800cd3d 	.word	0x0800cd3d
 800ccb8:	0800cd3d 	.word	0x0800cd3d
 800ccbc:	0800cd2f 	.word	0x0800cd2f
 800ccc0:	2b40      	cmp	r3, #64	@ 0x40
 800ccc2:	d037      	beq.n	800cd34 <UART_SetConfig+0x6bc>
 800ccc4:	e03a      	b.n	800cd3c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ccc6:	f7fd f967 	bl	8009f98 <HAL_RCCEx_GetD3PCLK1Freq>
 800ccca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800cccc:	e03c      	b.n	800cd48 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ccce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	f7fd f976 	bl	8009fc4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ccd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ccdc:	e034      	b.n	800cd48 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ccde:	f107 0318 	add.w	r3, r7, #24
 800cce2:	4618      	mov	r0, r3
 800cce4:	f7fd fac2 	bl	800a26c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cce8:	69fb      	ldr	r3, [r7, #28]
 800ccea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ccec:	e02c      	b.n	800cd48 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ccee:	4b09      	ldr	r3, [pc, #36]	@ (800cd14 <UART_SetConfig+0x69c>)
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	f003 0320 	and.w	r3, r3, #32
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d016      	beq.n	800cd28 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ccfa:	4b06      	ldr	r3, [pc, #24]	@ (800cd14 <UART_SetConfig+0x69c>)
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	08db      	lsrs	r3, r3, #3
 800cd00:	f003 0303 	and.w	r3, r3, #3
 800cd04:	4a07      	ldr	r2, [pc, #28]	@ (800cd24 <UART_SetConfig+0x6ac>)
 800cd06:	fa22 f303 	lsr.w	r3, r2, r3
 800cd0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cd0c:	e01c      	b.n	800cd48 <UART_SetConfig+0x6d0>
 800cd0e:	bf00      	nop
 800cd10:	40011400 	.word	0x40011400
 800cd14:	58024400 	.word	0x58024400
 800cd18:	40007800 	.word	0x40007800
 800cd1c:	40007c00 	.word	0x40007c00
 800cd20:	58000c00 	.word	0x58000c00
 800cd24:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800cd28:	4b9d      	ldr	r3, [pc, #628]	@ (800cfa0 <UART_SetConfig+0x928>)
 800cd2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cd2c:	e00c      	b.n	800cd48 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cd2e:	4b9d      	ldr	r3, [pc, #628]	@ (800cfa4 <UART_SetConfig+0x92c>)
 800cd30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cd32:	e009      	b.n	800cd48 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cd34:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cd38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cd3a:	e005      	b.n	800cd48 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800cd3c:	2300      	movs	r3, #0
 800cd3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800cd40:	2301      	movs	r3, #1
 800cd42:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800cd46:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800cd48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	f000 81de 	beq.w	800d10c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800cd50:	697b      	ldr	r3, [r7, #20]
 800cd52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd54:	4a94      	ldr	r2, [pc, #592]	@ (800cfa8 <UART_SetConfig+0x930>)
 800cd56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cd5a:	461a      	mov	r2, r3
 800cd5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cd5e:	fbb3 f3f2 	udiv	r3, r3, r2
 800cd62:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cd64:	697b      	ldr	r3, [r7, #20]
 800cd66:	685a      	ldr	r2, [r3, #4]
 800cd68:	4613      	mov	r3, r2
 800cd6a:	005b      	lsls	r3, r3, #1
 800cd6c:	4413      	add	r3, r2
 800cd6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cd70:	429a      	cmp	r2, r3
 800cd72:	d305      	bcc.n	800cd80 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800cd74:	697b      	ldr	r3, [r7, #20]
 800cd76:	685b      	ldr	r3, [r3, #4]
 800cd78:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cd7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cd7c:	429a      	cmp	r2, r3
 800cd7e:	d903      	bls.n	800cd88 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800cd80:	2301      	movs	r3, #1
 800cd82:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800cd86:	e1c1      	b.n	800d10c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cd88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cd8a:	2200      	movs	r2, #0
 800cd8c:	60bb      	str	r3, [r7, #8]
 800cd8e:	60fa      	str	r2, [r7, #12]
 800cd90:	697b      	ldr	r3, [r7, #20]
 800cd92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd94:	4a84      	ldr	r2, [pc, #528]	@ (800cfa8 <UART_SetConfig+0x930>)
 800cd96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cd9a:	b29b      	uxth	r3, r3
 800cd9c:	2200      	movs	r2, #0
 800cd9e:	603b      	str	r3, [r7, #0]
 800cda0:	607a      	str	r2, [r7, #4]
 800cda2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cda6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800cdaa:	f7f3 faf1 	bl	8000390 <__aeabi_uldivmod>
 800cdae:	4602      	mov	r2, r0
 800cdb0:	460b      	mov	r3, r1
 800cdb2:	4610      	mov	r0, r2
 800cdb4:	4619      	mov	r1, r3
 800cdb6:	f04f 0200 	mov.w	r2, #0
 800cdba:	f04f 0300 	mov.w	r3, #0
 800cdbe:	020b      	lsls	r3, r1, #8
 800cdc0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800cdc4:	0202      	lsls	r2, r0, #8
 800cdc6:	6979      	ldr	r1, [r7, #20]
 800cdc8:	6849      	ldr	r1, [r1, #4]
 800cdca:	0849      	lsrs	r1, r1, #1
 800cdcc:	2000      	movs	r0, #0
 800cdce:	460c      	mov	r4, r1
 800cdd0:	4605      	mov	r5, r0
 800cdd2:	eb12 0804 	adds.w	r8, r2, r4
 800cdd6:	eb43 0905 	adc.w	r9, r3, r5
 800cdda:	697b      	ldr	r3, [r7, #20]
 800cddc:	685b      	ldr	r3, [r3, #4]
 800cdde:	2200      	movs	r2, #0
 800cde0:	469a      	mov	sl, r3
 800cde2:	4693      	mov	fp, r2
 800cde4:	4652      	mov	r2, sl
 800cde6:	465b      	mov	r3, fp
 800cde8:	4640      	mov	r0, r8
 800cdea:	4649      	mov	r1, r9
 800cdec:	f7f3 fad0 	bl	8000390 <__aeabi_uldivmod>
 800cdf0:	4602      	mov	r2, r0
 800cdf2:	460b      	mov	r3, r1
 800cdf4:	4613      	mov	r3, r2
 800cdf6:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800cdf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdfa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800cdfe:	d308      	bcc.n	800ce12 <UART_SetConfig+0x79a>
 800ce00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce02:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ce06:	d204      	bcs.n	800ce12 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800ce08:	697b      	ldr	r3, [r7, #20]
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ce0e:	60da      	str	r2, [r3, #12]
 800ce10:	e17c      	b.n	800d10c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800ce12:	2301      	movs	r3, #1
 800ce14:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ce18:	e178      	b.n	800d10c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ce1a:	697b      	ldr	r3, [r7, #20]
 800ce1c:	69db      	ldr	r3, [r3, #28]
 800ce1e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ce22:	f040 80c5 	bne.w	800cfb0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800ce26:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ce2a:	2b20      	cmp	r3, #32
 800ce2c:	dc48      	bgt.n	800cec0 <UART_SetConfig+0x848>
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	db7b      	blt.n	800cf2a <UART_SetConfig+0x8b2>
 800ce32:	2b20      	cmp	r3, #32
 800ce34:	d879      	bhi.n	800cf2a <UART_SetConfig+0x8b2>
 800ce36:	a201      	add	r2, pc, #4	@ (adr r2, 800ce3c <UART_SetConfig+0x7c4>)
 800ce38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce3c:	0800cec7 	.word	0x0800cec7
 800ce40:	0800cecf 	.word	0x0800cecf
 800ce44:	0800cf2b 	.word	0x0800cf2b
 800ce48:	0800cf2b 	.word	0x0800cf2b
 800ce4c:	0800ced7 	.word	0x0800ced7
 800ce50:	0800cf2b 	.word	0x0800cf2b
 800ce54:	0800cf2b 	.word	0x0800cf2b
 800ce58:	0800cf2b 	.word	0x0800cf2b
 800ce5c:	0800cee7 	.word	0x0800cee7
 800ce60:	0800cf2b 	.word	0x0800cf2b
 800ce64:	0800cf2b 	.word	0x0800cf2b
 800ce68:	0800cf2b 	.word	0x0800cf2b
 800ce6c:	0800cf2b 	.word	0x0800cf2b
 800ce70:	0800cf2b 	.word	0x0800cf2b
 800ce74:	0800cf2b 	.word	0x0800cf2b
 800ce78:	0800cf2b 	.word	0x0800cf2b
 800ce7c:	0800cef7 	.word	0x0800cef7
 800ce80:	0800cf2b 	.word	0x0800cf2b
 800ce84:	0800cf2b 	.word	0x0800cf2b
 800ce88:	0800cf2b 	.word	0x0800cf2b
 800ce8c:	0800cf2b 	.word	0x0800cf2b
 800ce90:	0800cf2b 	.word	0x0800cf2b
 800ce94:	0800cf2b 	.word	0x0800cf2b
 800ce98:	0800cf2b 	.word	0x0800cf2b
 800ce9c:	0800cf2b 	.word	0x0800cf2b
 800cea0:	0800cf2b 	.word	0x0800cf2b
 800cea4:	0800cf2b 	.word	0x0800cf2b
 800cea8:	0800cf2b 	.word	0x0800cf2b
 800ceac:	0800cf2b 	.word	0x0800cf2b
 800ceb0:	0800cf2b 	.word	0x0800cf2b
 800ceb4:	0800cf2b 	.word	0x0800cf2b
 800ceb8:	0800cf2b 	.word	0x0800cf2b
 800cebc:	0800cf1d 	.word	0x0800cf1d
 800cec0:	2b40      	cmp	r3, #64	@ 0x40
 800cec2:	d02e      	beq.n	800cf22 <UART_SetConfig+0x8aa>
 800cec4:	e031      	b.n	800cf2a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cec6:	f7fb f8b1 	bl	800802c <HAL_RCC_GetPCLK1Freq>
 800ceca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800cecc:	e033      	b.n	800cf36 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cece:	f7fb f8c3 	bl	8008058 <HAL_RCC_GetPCLK2Freq>
 800ced2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ced4:	e02f      	b.n	800cf36 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ced6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ceda:	4618      	mov	r0, r3
 800cedc:	f7fd f872 	bl	8009fc4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cee0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cee2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cee4:	e027      	b.n	800cf36 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cee6:	f107 0318 	add.w	r3, r7, #24
 800ceea:	4618      	mov	r0, r3
 800ceec:	f7fd f9be 	bl	800a26c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cef0:	69fb      	ldr	r3, [r7, #28]
 800cef2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cef4:	e01f      	b.n	800cf36 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cef6:	4b2d      	ldr	r3, [pc, #180]	@ (800cfac <UART_SetConfig+0x934>)
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	f003 0320 	and.w	r3, r3, #32
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d009      	beq.n	800cf16 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cf02:	4b2a      	ldr	r3, [pc, #168]	@ (800cfac <UART_SetConfig+0x934>)
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	08db      	lsrs	r3, r3, #3
 800cf08:	f003 0303 	and.w	r3, r3, #3
 800cf0c:	4a24      	ldr	r2, [pc, #144]	@ (800cfa0 <UART_SetConfig+0x928>)
 800cf0e:	fa22 f303 	lsr.w	r3, r2, r3
 800cf12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cf14:	e00f      	b.n	800cf36 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800cf16:	4b22      	ldr	r3, [pc, #136]	@ (800cfa0 <UART_SetConfig+0x928>)
 800cf18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cf1a:	e00c      	b.n	800cf36 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cf1c:	4b21      	ldr	r3, [pc, #132]	@ (800cfa4 <UART_SetConfig+0x92c>)
 800cf1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cf20:	e009      	b.n	800cf36 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cf22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cf26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cf28:	e005      	b.n	800cf36 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800cf2a:	2300      	movs	r3, #0
 800cf2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800cf2e:	2301      	movs	r3, #1
 800cf30:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800cf34:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cf36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	f000 80e7 	beq.w	800d10c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cf3e:	697b      	ldr	r3, [r7, #20]
 800cf40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf42:	4a19      	ldr	r2, [pc, #100]	@ (800cfa8 <UART_SetConfig+0x930>)
 800cf44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cf48:	461a      	mov	r2, r3
 800cf4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cf4c:	fbb3 f3f2 	udiv	r3, r3, r2
 800cf50:	005a      	lsls	r2, r3, #1
 800cf52:	697b      	ldr	r3, [r7, #20]
 800cf54:	685b      	ldr	r3, [r3, #4]
 800cf56:	085b      	lsrs	r3, r3, #1
 800cf58:	441a      	add	r2, r3
 800cf5a:	697b      	ldr	r3, [r7, #20]
 800cf5c:	685b      	ldr	r3, [r3, #4]
 800cf5e:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf62:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cf64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf66:	2b0f      	cmp	r3, #15
 800cf68:	d916      	bls.n	800cf98 <UART_SetConfig+0x920>
 800cf6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cf70:	d212      	bcs.n	800cf98 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cf72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf74:	b29b      	uxth	r3, r3
 800cf76:	f023 030f 	bic.w	r3, r3, #15
 800cf7a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cf7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf7e:	085b      	lsrs	r3, r3, #1
 800cf80:	b29b      	uxth	r3, r3
 800cf82:	f003 0307 	and.w	r3, r3, #7
 800cf86:	b29a      	uxth	r2, r3
 800cf88:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800cf8a:	4313      	orrs	r3, r2
 800cf8c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800cf8e:	697b      	ldr	r3, [r7, #20]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800cf94:	60da      	str	r2, [r3, #12]
 800cf96:	e0b9      	b.n	800d10c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800cf98:	2301      	movs	r3, #1
 800cf9a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800cf9e:	e0b5      	b.n	800d10c <UART_SetConfig+0xa94>
 800cfa0:	03d09000 	.word	0x03d09000
 800cfa4:	003d0900 	.word	0x003d0900
 800cfa8:	08010660 	.word	0x08010660
 800cfac:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800cfb0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800cfb4:	2b20      	cmp	r3, #32
 800cfb6:	dc49      	bgt.n	800d04c <UART_SetConfig+0x9d4>
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	db7c      	blt.n	800d0b6 <UART_SetConfig+0xa3e>
 800cfbc:	2b20      	cmp	r3, #32
 800cfbe:	d87a      	bhi.n	800d0b6 <UART_SetConfig+0xa3e>
 800cfc0:	a201      	add	r2, pc, #4	@ (adr r2, 800cfc8 <UART_SetConfig+0x950>)
 800cfc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfc6:	bf00      	nop
 800cfc8:	0800d053 	.word	0x0800d053
 800cfcc:	0800d05b 	.word	0x0800d05b
 800cfd0:	0800d0b7 	.word	0x0800d0b7
 800cfd4:	0800d0b7 	.word	0x0800d0b7
 800cfd8:	0800d063 	.word	0x0800d063
 800cfdc:	0800d0b7 	.word	0x0800d0b7
 800cfe0:	0800d0b7 	.word	0x0800d0b7
 800cfe4:	0800d0b7 	.word	0x0800d0b7
 800cfe8:	0800d073 	.word	0x0800d073
 800cfec:	0800d0b7 	.word	0x0800d0b7
 800cff0:	0800d0b7 	.word	0x0800d0b7
 800cff4:	0800d0b7 	.word	0x0800d0b7
 800cff8:	0800d0b7 	.word	0x0800d0b7
 800cffc:	0800d0b7 	.word	0x0800d0b7
 800d000:	0800d0b7 	.word	0x0800d0b7
 800d004:	0800d0b7 	.word	0x0800d0b7
 800d008:	0800d083 	.word	0x0800d083
 800d00c:	0800d0b7 	.word	0x0800d0b7
 800d010:	0800d0b7 	.word	0x0800d0b7
 800d014:	0800d0b7 	.word	0x0800d0b7
 800d018:	0800d0b7 	.word	0x0800d0b7
 800d01c:	0800d0b7 	.word	0x0800d0b7
 800d020:	0800d0b7 	.word	0x0800d0b7
 800d024:	0800d0b7 	.word	0x0800d0b7
 800d028:	0800d0b7 	.word	0x0800d0b7
 800d02c:	0800d0b7 	.word	0x0800d0b7
 800d030:	0800d0b7 	.word	0x0800d0b7
 800d034:	0800d0b7 	.word	0x0800d0b7
 800d038:	0800d0b7 	.word	0x0800d0b7
 800d03c:	0800d0b7 	.word	0x0800d0b7
 800d040:	0800d0b7 	.word	0x0800d0b7
 800d044:	0800d0b7 	.word	0x0800d0b7
 800d048:	0800d0a9 	.word	0x0800d0a9
 800d04c:	2b40      	cmp	r3, #64	@ 0x40
 800d04e:	d02e      	beq.n	800d0ae <UART_SetConfig+0xa36>
 800d050:	e031      	b.n	800d0b6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d052:	f7fa ffeb 	bl	800802c <HAL_RCC_GetPCLK1Freq>
 800d056:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d058:	e033      	b.n	800d0c2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d05a:	f7fa fffd 	bl	8008058 <HAL_RCC_GetPCLK2Freq>
 800d05e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d060:	e02f      	b.n	800d0c2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d062:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d066:	4618      	mov	r0, r3
 800d068:	f7fc ffac 	bl	8009fc4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d06c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d06e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d070:	e027      	b.n	800d0c2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d072:	f107 0318 	add.w	r3, r7, #24
 800d076:	4618      	mov	r0, r3
 800d078:	f7fd f8f8 	bl	800a26c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d07c:	69fb      	ldr	r3, [r7, #28]
 800d07e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d080:	e01f      	b.n	800d0c2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d082:	4b2d      	ldr	r3, [pc, #180]	@ (800d138 <UART_SetConfig+0xac0>)
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	f003 0320 	and.w	r3, r3, #32
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d009      	beq.n	800d0a2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d08e:	4b2a      	ldr	r3, [pc, #168]	@ (800d138 <UART_SetConfig+0xac0>)
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	08db      	lsrs	r3, r3, #3
 800d094:	f003 0303 	and.w	r3, r3, #3
 800d098:	4a28      	ldr	r2, [pc, #160]	@ (800d13c <UART_SetConfig+0xac4>)
 800d09a:	fa22 f303 	lsr.w	r3, r2, r3
 800d09e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d0a0:	e00f      	b.n	800d0c2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800d0a2:	4b26      	ldr	r3, [pc, #152]	@ (800d13c <UART_SetConfig+0xac4>)
 800d0a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d0a6:	e00c      	b.n	800d0c2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d0a8:	4b25      	ldr	r3, [pc, #148]	@ (800d140 <UART_SetConfig+0xac8>)
 800d0aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d0ac:	e009      	b.n	800d0c2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d0ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d0b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d0b4:	e005      	b.n	800d0c2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800d0b6:	2300      	movs	r3, #0
 800d0b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d0ba:	2301      	movs	r3, #1
 800d0bc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d0c0:	bf00      	nop
    }

    if (pclk != 0U)
 800d0c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d021      	beq.n	800d10c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d0c8:	697b      	ldr	r3, [r7, #20]
 800d0ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d0cc:	4a1d      	ldr	r2, [pc, #116]	@ (800d144 <UART_SetConfig+0xacc>)
 800d0ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d0d2:	461a      	mov	r2, r3
 800d0d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d0d6:	fbb3 f2f2 	udiv	r2, r3, r2
 800d0da:	697b      	ldr	r3, [r7, #20]
 800d0dc:	685b      	ldr	r3, [r3, #4]
 800d0de:	085b      	lsrs	r3, r3, #1
 800d0e0:	441a      	add	r2, r3
 800d0e2:	697b      	ldr	r3, [r7, #20]
 800d0e4:	685b      	ldr	r3, [r3, #4]
 800d0e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800d0ea:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d0ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0ee:	2b0f      	cmp	r3, #15
 800d0f0:	d909      	bls.n	800d106 <UART_SetConfig+0xa8e>
 800d0f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d0f8:	d205      	bcs.n	800d106 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d0fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0fc:	b29a      	uxth	r2, r3
 800d0fe:	697b      	ldr	r3, [r7, #20]
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	60da      	str	r2, [r3, #12]
 800d104:	e002      	b.n	800d10c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800d106:	2301      	movs	r3, #1
 800d108:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d10c:	697b      	ldr	r3, [r7, #20]
 800d10e:	2201      	movs	r2, #1
 800d110:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800d114:	697b      	ldr	r3, [r7, #20]
 800d116:	2201      	movs	r2, #1
 800d118:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d11c:	697b      	ldr	r3, [r7, #20]
 800d11e:	2200      	movs	r2, #0
 800d120:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800d122:	697b      	ldr	r3, [r7, #20]
 800d124:	2200      	movs	r2, #0
 800d126:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800d128:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800d12c:	4618      	mov	r0, r3
 800d12e:	3748      	adds	r7, #72	@ 0x48
 800d130:	46bd      	mov	sp, r7
 800d132:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d136:	bf00      	nop
 800d138:	58024400 	.word	0x58024400
 800d13c:	03d09000 	.word	0x03d09000
 800d140:	003d0900 	.word	0x003d0900
 800d144:	08010660 	.word	0x08010660

0800d148 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d148:	b480      	push	{r7}
 800d14a:	b083      	sub	sp, #12
 800d14c:	af00      	add	r7, sp, #0
 800d14e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d154:	f003 0308 	and.w	r3, r3, #8
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d00a      	beq.n	800d172 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	685b      	ldr	r3, [r3, #4]
 800d162:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	430a      	orrs	r2, r1
 800d170:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d176:	f003 0301 	and.w	r3, r3, #1
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d00a      	beq.n	800d194 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	685b      	ldr	r3, [r3, #4]
 800d184:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	430a      	orrs	r2, r1
 800d192:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d198:	f003 0302 	and.w	r3, r3, #2
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d00a      	beq.n	800d1b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	685b      	ldr	r3, [r3, #4]
 800d1a6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	430a      	orrs	r2, r1
 800d1b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d1ba:	f003 0304 	and.w	r3, r3, #4
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d00a      	beq.n	800d1d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	685b      	ldr	r3, [r3, #4]
 800d1c8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	430a      	orrs	r2, r1
 800d1d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d1dc:	f003 0310 	and.w	r3, r3, #16
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d00a      	beq.n	800d1fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	689b      	ldr	r3, [r3, #8]
 800d1ea:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	430a      	orrs	r2, r1
 800d1f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d1fe:	f003 0320 	and.w	r3, r3, #32
 800d202:	2b00      	cmp	r3, #0
 800d204:	d00a      	beq.n	800d21c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	689b      	ldr	r3, [r3, #8]
 800d20c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	430a      	orrs	r2, r1
 800d21a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d220:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d224:	2b00      	cmp	r3, #0
 800d226:	d01a      	beq.n	800d25e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	685b      	ldr	r3, [r3, #4]
 800d22e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	430a      	orrs	r2, r1
 800d23c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d242:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d246:	d10a      	bne.n	800d25e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	685b      	ldr	r3, [r3, #4]
 800d24e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	430a      	orrs	r2, r1
 800d25c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d262:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d266:	2b00      	cmp	r3, #0
 800d268:	d00a      	beq.n	800d280 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	685b      	ldr	r3, [r3, #4]
 800d270:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	430a      	orrs	r2, r1
 800d27e:	605a      	str	r2, [r3, #4]
  }
}
 800d280:	bf00      	nop
 800d282:	370c      	adds	r7, #12
 800d284:	46bd      	mov	sp, r7
 800d286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d28a:	4770      	bx	lr

0800d28c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d28c:	b580      	push	{r7, lr}
 800d28e:	b098      	sub	sp, #96	@ 0x60
 800d290:	af02      	add	r7, sp, #8
 800d292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	2200      	movs	r2, #0
 800d298:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d29c:	f7f5 f8e8 	bl	8002470 <HAL_GetTick>
 800d2a0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	f003 0308 	and.w	r3, r3, #8
 800d2ac:	2b08      	cmp	r3, #8
 800d2ae:	d12f      	bne.n	800d310 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d2b0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d2b4:	9300      	str	r3, [sp, #0]
 800d2b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d2b8:	2200      	movs	r2, #0
 800d2ba:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800d2be:	6878      	ldr	r0, [r7, #4]
 800d2c0:	f000 f88e 	bl	800d3e0 <UART_WaitOnFlagUntilTimeout>
 800d2c4:	4603      	mov	r3, r0
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d022      	beq.n	800d310 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2d2:	e853 3f00 	ldrex	r3, [r3]
 800d2d6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d2d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d2da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d2de:	653b      	str	r3, [r7, #80]	@ 0x50
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	461a      	mov	r2, r3
 800d2e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d2e8:	647b      	str	r3, [r7, #68]	@ 0x44
 800d2ea:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2ec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d2ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d2f0:	e841 2300 	strex	r3, r2, [r1]
 800d2f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d2f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d1e6      	bne.n	800d2ca <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	2220      	movs	r2, #32
 800d300:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	2200      	movs	r2, #0
 800d308:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d30c:	2303      	movs	r3, #3
 800d30e:	e063      	b.n	800d3d8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	f003 0304 	and.w	r3, r3, #4
 800d31a:	2b04      	cmp	r3, #4
 800d31c:	d149      	bne.n	800d3b2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d31e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d322:	9300      	str	r3, [sp, #0]
 800d324:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d326:	2200      	movs	r2, #0
 800d328:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800d32c:	6878      	ldr	r0, [r7, #4]
 800d32e:	f000 f857 	bl	800d3e0 <UART_WaitOnFlagUntilTimeout>
 800d332:	4603      	mov	r3, r0
 800d334:	2b00      	cmp	r3, #0
 800d336:	d03c      	beq.n	800d3b2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d33e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d340:	e853 3f00 	ldrex	r3, [r3]
 800d344:	623b      	str	r3, [r7, #32]
   return(result);
 800d346:	6a3b      	ldr	r3, [r7, #32]
 800d348:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d34c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	461a      	mov	r2, r3
 800d354:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d356:	633b      	str	r3, [r7, #48]	@ 0x30
 800d358:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d35a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d35c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d35e:	e841 2300 	strex	r3, r2, [r1]
 800d362:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d366:	2b00      	cmp	r3, #0
 800d368:	d1e6      	bne.n	800d338 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	3308      	adds	r3, #8
 800d370:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d372:	693b      	ldr	r3, [r7, #16]
 800d374:	e853 3f00 	ldrex	r3, [r3]
 800d378:	60fb      	str	r3, [r7, #12]
   return(result);
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	f023 0301 	bic.w	r3, r3, #1
 800d380:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	3308      	adds	r3, #8
 800d388:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d38a:	61fa      	str	r2, [r7, #28]
 800d38c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d38e:	69b9      	ldr	r1, [r7, #24]
 800d390:	69fa      	ldr	r2, [r7, #28]
 800d392:	e841 2300 	strex	r3, r2, [r1]
 800d396:	617b      	str	r3, [r7, #20]
   return(result);
 800d398:	697b      	ldr	r3, [r7, #20]
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d1e5      	bne.n	800d36a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	2220      	movs	r2, #32
 800d3a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	2200      	movs	r2, #0
 800d3aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d3ae:	2303      	movs	r3, #3
 800d3b0:	e012      	b.n	800d3d8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	2220      	movs	r2, #32
 800d3b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	2220      	movs	r2, #32
 800d3be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	2200      	movs	r2, #0
 800d3c6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	2200      	movs	r2, #0
 800d3cc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	2200      	movs	r2, #0
 800d3d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d3d6:	2300      	movs	r3, #0
}
 800d3d8:	4618      	mov	r0, r3
 800d3da:	3758      	adds	r7, #88	@ 0x58
 800d3dc:	46bd      	mov	sp, r7
 800d3de:	bd80      	pop	{r7, pc}

0800d3e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d3e0:	b580      	push	{r7, lr}
 800d3e2:	b084      	sub	sp, #16
 800d3e4:	af00      	add	r7, sp, #0
 800d3e6:	60f8      	str	r0, [r7, #12]
 800d3e8:	60b9      	str	r1, [r7, #8]
 800d3ea:	603b      	str	r3, [r7, #0]
 800d3ec:	4613      	mov	r3, r2
 800d3ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d3f0:	e04f      	b.n	800d492 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d3f2:	69bb      	ldr	r3, [r7, #24]
 800d3f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3f8:	d04b      	beq.n	800d492 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d3fa:	f7f5 f839 	bl	8002470 <HAL_GetTick>
 800d3fe:	4602      	mov	r2, r0
 800d400:	683b      	ldr	r3, [r7, #0]
 800d402:	1ad3      	subs	r3, r2, r3
 800d404:	69ba      	ldr	r2, [r7, #24]
 800d406:	429a      	cmp	r2, r3
 800d408:	d302      	bcc.n	800d410 <UART_WaitOnFlagUntilTimeout+0x30>
 800d40a:	69bb      	ldr	r3, [r7, #24]
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d101      	bne.n	800d414 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d410:	2303      	movs	r3, #3
 800d412:	e04e      	b.n	800d4b2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	f003 0304 	and.w	r3, r3, #4
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d037      	beq.n	800d492 <UART_WaitOnFlagUntilTimeout+0xb2>
 800d422:	68bb      	ldr	r3, [r7, #8]
 800d424:	2b80      	cmp	r3, #128	@ 0x80
 800d426:	d034      	beq.n	800d492 <UART_WaitOnFlagUntilTimeout+0xb2>
 800d428:	68bb      	ldr	r3, [r7, #8]
 800d42a:	2b40      	cmp	r3, #64	@ 0x40
 800d42c:	d031      	beq.n	800d492 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	69db      	ldr	r3, [r3, #28]
 800d434:	f003 0308 	and.w	r3, r3, #8
 800d438:	2b08      	cmp	r3, #8
 800d43a:	d110      	bne.n	800d45e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	2208      	movs	r2, #8
 800d442:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d444:	68f8      	ldr	r0, [r7, #12]
 800d446:	f000 f839 	bl	800d4bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	2208      	movs	r2, #8
 800d44e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	2200      	movs	r2, #0
 800d456:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800d45a:	2301      	movs	r3, #1
 800d45c:	e029      	b.n	800d4b2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	69db      	ldr	r3, [r3, #28]
 800d464:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d468:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d46c:	d111      	bne.n	800d492 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d476:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d478:	68f8      	ldr	r0, [r7, #12]
 800d47a:	f000 f81f 	bl	800d4bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	2220      	movs	r2, #32
 800d482:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	2200      	movs	r2, #0
 800d48a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800d48e:	2303      	movs	r3, #3
 800d490:	e00f      	b.n	800d4b2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	69da      	ldr	r2, [r3, #28]
 800d498:	68bb      	ldr	r3, [r7, #8]
 800d49a:	4013      	ands	r3, r2
 800d49c:	68ba      	ldr	r2, [r7, #8]
 800d49e:	429a      	cmp	r2, r3
 800d4a0:	bf0c      	ite	eq
 800d4a2:	2301      	moveq	r3, #1
 800d4a4:	2300      	movne	r3, #0
 800d4a6:	b2db      	uxtb	r3, r3
 800d4a8:	461a      	mov	r2, r3
 800d4aa:	79fb      	ldrb	r3, [r7, #7]
 800d4ac:	429a      	cmp	r2, r3
 800d4ae:	d0a0      	beq.n	800d3f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d4b0:	2300      	movs	r3, #0
}
 800d4b2:	4618      	mov	r0, r3
 800d4b4:	3710      	adds	r7, #16
 800d4b6:	46bd      	mov	sp, r7
 800d4b8:	bd80      	pop	{r7, pc}
	...

0800d4bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d4bc:	b480      	push	{r7}
 800d4be:	b095      	sub	sp, #84	@ 0x54
 800d4c0:	af00      	add	r7, sp, #0
 800d4c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d4cc:	e853 3f00 	ldrex	r3, [r3]
 800d4d0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d4d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d4d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	461a      	mov	r2, r3
 800d4e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d4e2:	643b      	str	r3, [r7, #64]	@ 0x40
 800d4e4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4e6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d4e8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d4ea:	e841 2300 	strex	r3, r2, [r1]
 800d4ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d4f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d1e6      	bne.n	800d4c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	3308      	adds	r3, #8
 800d4fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4fe:	6a3b      	ldr	r3, [r7, #32]
 800d500:	e853 3f00 	ldrex	r3, [r3]
 800d504:	61fb      	str	r3, [r7, #28]
   return(result);
 800d506:	69fa      	ldr	r2, [r7, #28]
 800d508:	4b1e      	ldr	r3, [pc, #120]	@ (800d584 <UART_EndRxTransfer+0xc8>)
 800d50a:	4013      	ands	r3, r2
 800d50c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	3308      	adds	r3, #8
 800d514:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d516:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d518:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d51a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d51c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d51e:	e841 2300 	strex	r3, r2, [r1]
 800d522:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d526:	2b00      	cmp	r3, #0
 800d528:	d1e5      	bne.n	800d4f6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d52e:	2b01      	cmp	r3, #1
 800d530:	d118      	bne.n	800d564 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	e853 3f00 	ldrex	r3, [r3]
 800d53e:	60bb      	str	r3, [r7, #8]
   return(result);
 800d540:	68bb      	ldr	r3, [r7, #8]
 800d542:	f023 0310 	bic.w	r3, r3, #16
 800d546:	647b      	str	r3, [r7, #68]	@ 0x44
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	461a      	mov	r2, r3
 800d54e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d550:	61bb      	str	r3, [r7, #24]
 800d552:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d554:	6979      	ldr	r1, [r7, #20]
 800d556:	69ba      	ldr	r2, [r7, #24]
 800d558:	e841 2300 	strex	r3, r2, [r1]
 800d55c:	613b      	str	r3, [r7, #16]
   return(result);
 800d55e:	693b      	ldr	r3, [r7, #16]
 800d560:	2b00      	cmp	r3, #0
 800d562:	d1e6      	bne.n	800d532 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	2220      	movs	r2, #32
 800d568:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	2200      	movs	r2, #0
 800d570:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	2200      	movs	r2, #0
 800d576:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800d578:	bf00      	nop
 800d57a:	3754      	adds	r7, #84	@ 0x54
 800d57c:	46bd      	mov	sp, r7
 800d57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d582:	4770      	bx	lr
 800d584:	effffffe 	.word	0xeffffffe

0800d588 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d588:	b580      	push	{r7, lr}
 800d58a:	b084      	sub	sp, #16
 800d58c:	af00      	add	r7, sp, #0
 800d58e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d594:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	2200      	movs	r2, #0
 800d59a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	2200      	movs	r2, #0
 800d5a2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d5a6:	68f8      	ldr	r0, [r7, #12]
 800d5a8:	f7ff f85c 	bl	800c664 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d5ac:	bf00      	nop
 800d5ae:	3710      	adds	r7, #16
 800d5b0:	46bd      	mov	sp, r7
 800d5b2:	bd80      	pop	{r7, pc}

0800d5b4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d5b4:	b580      	push	{r7, lr}
 800d5b6:	b088      	sub	sp, #32
 800d5b8:	af00      	add	r7, sp, #0
 800d5ba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	e853 3f00 	ldrex	r3, [r3]
 800d5c8:	60bb      	str	r3, [r7, #8]
   return(result);
 800d5ca:	68bb      	ldr	r3, [r7, #8]
 800d5cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d5d0:	61fb      	str	r3, [r7, #28]
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	461a      	mov	r2, r3
 800d5d8:	69fb      	ldr	r3, [r7, #28]
 800d5da:	61bb      	str	r3, [r7, #24]
 800d5dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5de:	6979      	ldr	r1, [r7, #20]
 800d5e0:	69ba      	ldr	r2, [r7, #24]
 800d5e2:	e841 2300 	strex	r3, r2, [r1]
 800d5e6:	613b      	str	r3, [r7, #16]
   return(result);
 800d5e8:	693b      	ldr	r3, [r7, #16]
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d1e6      	bne.n	800d5bc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	2220      	movs	r2, #32
 800d5f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	2200      	movs	r2, #0
 800d5fa:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d5fc:	6878      	ldr	r0, [r7, #4]
 800d5fe:	f7ff f827 	bl	800c650 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d602:	bf00      	nop
 800d604:	3720      	adds	r7, #32
 800d606:	46bd      	mov	sp, r7
 800d608:	bd80      	pop	{r7, pc}

0800d60a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d60a:	b480      	push	{r7}
 800d60c:	b083      	sub	sp, #12
 800d60e:	af00      	add	r7, sp, #0
 800d610:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d612:	bf00      	nop
 800d614:	370c      	adds	r7, #12
 800d616:	46bd      	mov	sp, r7
 800d618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d61c:	4770      	bx	lr

0800d61e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d61e:	b480      	push	{r7}
 800d620:	b083      	sub	sp, #12
 800d622:	af00      	add	r7, sp, #0
 800d624:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d626:	bf00      	nop
 800d628:	370c      	adds	r7, #12
 800d62a:	46bd      	mov	sp, r7
 800d62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d630:	4770      	bx	lr

0800d632 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d632:	b480      	push	{r7}
 800d634:	b083      	sub	sp, #12
 800d636:	af00      	add	r7, sp, #0
 800d638:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d63a:	bf00      	nop
 800d63c:	370c      	adds	r7, #12
 800d63e:	46bd      	mov	sp, r7
 800d640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d644:	4770      	bx	lr

0800d646 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d646:	b480      	push	{r7}
 800d648:	b085      	sub	sp, #20
 800d64a:	af00      	add	r7, sp, #0
 800d64c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d654:	2b01      	cmp	r3, #1
 800d656:	d101      	bne.n	800d65c <HAL_UARTEx_DisableFifoMode+0x16>
 800d658:	2302      	movs	r3, #2
 800d65a:	e027      	b.n	800d6ac <HAL_UARTEx_DisableFifoMode+0x66>
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	2201      	movs	r2, #1
 800d660:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	2224      	movs	r2, #36	@ 0x24
 800d668:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	681a      	ldr	r2, [r3, #0]
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	f022 0201 	bic.w	r2, r2, #1
 800d682:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800d68a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	2200      	movs	r2, #0
 800d690:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	68fa      	ldr	r2, [r7, #12]
 800d698:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	2220      	movs	r2, #32
 800d69e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	2200      	movs	r2, #0
 800d6a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d6aa:	2300      	movs	r3, #0
}
 800d6ac:	4618      	mov	r0, r3
 800d6ae:	3714      	adds	r7, #20
 800d6b0:	46bd      	mov	sp, r7
 800d6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b6:	4770      	bx	lr

0800d6b8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d6b8:	b580      	push	{r7, lr}
 800d6ba:	b084      	sub	sp, #16
 800d6bc:	af00      	add	r7, sp, #0
 800d6be:	6078      	str	r0, [r7, #4]
 800d6c0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d6c8:	2b01      	cmp	r3, #1
 800d6ca:	d101      	bne.n	800d6d0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d6cc:	2302      	movs	r3, #2
 800d6ce:	e02d      	b.n	800d72c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	2201      	movs	r2, #1
 800d6d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	2224      	movs	r2, #36	@ 0x24
 800d6dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	681a      	ldr	r2, [r3, #0]
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	f022 0201 	bic.w	r2, r2, #1
 800d6f6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	689b      	ldr	r3, [r3, #8]
 800d6fe:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	683a      	ldr	r2, [r7, #0]
 800d708:	430a      	orrs	r2, r1
 800d70a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d70c:	6878      	ldr	r0, [r7, #4]
 800d70e:	f000 f84f 	bl	800d7b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	68fa      	ldr	r2, [r7, #12]
 800d718:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	2220      	movs	r2, #32
 800d71e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	2200      	movs	r2, #0
 800d726:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d72a:	2300      	movs	r3, #0
}
 800d72c:	4618      	mov	r0, r3
 800d72e:	3710      	adds	r7, #16
 800d730:	46bd      	mov	sp, r7
 800d732:	bd80      	pop	{r7, pc}

0800d734 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d734:	b580      	push	{r7, lr}
 800d736:	b084      	sub	sp, #16
 800d738:	af00      	add	r7, sp, #0
 800d73a:	6078      	str	r0, [r7, #4]
 800d73c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d744:	2b01      	cmp	r3, #1
 800d746:	d101      	bne.n	800d74c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d748:	2302      	movs	r3, #2
 800d74a:	e02d      	b.n	800d7a8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	2201      	movs	r2, #1
 800d750:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	2224      	movs	r2, #36	@ 0x24
 800d758:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	681a      	ldr	r2, [r3, #0]
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	f022 0201 	bic.w	r2, r2, #1
 800d772:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	689b      	ldr	r3, [r3, #8]
 800d77a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	683a      	ldr	r2, [r7, #0]
 800d784:	430a      	orrs	r2, r1
 800d786:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d788:	6878      	ldr	r0, [r7, #4]
 800d78a:	f000 f811 	bl	800d7b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	68fa      	ldr	r2, [r7, #12]
 800d794:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	2220      	movs	r2, #32
 800d79a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	2200      	movs	r2, #0
 800d7a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d7a6:	2300      	movs	r3, #0
}
 800d7a8:	4618      	mov	r0, r3
 800d7aa:	3710      	adds	r7, #16
 800d7ac:	46bd      	mov	sp, r7
 800d7ae:	bd80      	pop	{r7, pc}

0800d7b0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d7b0:	b480      	push	{r7}
 800d7b2:	b085      	sub	sp, #20
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d108      	bne.n	800d7d2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	2201      	movs	r2, #1
 800d7c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	2201      	movs	r2, #1
 800d7cc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d7d0:	e031      	b.n	800d836 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d7d2:	2310      	movs	r3, #16
 800d7d4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d7d6:	2310      	movs	r3, #16
 800d7d8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	689b      	ldr	r3, [r3, #8]
 800d7e0:	0e5b      	lsrs	r3, r3, #25
 800d7e2:	b2db      	uxtb	r3, r3
 800d7e4:	f003 0307 	and.w	r3, r3, #7
 800d7e8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	689b      	ldr	r3, [r3, #8]
 800d7f0:	0f5b      	lsrs	r3, r3, #29
 800d7f2:	b2db      	uxtb	r3, r3
 800d7f4:	f003 0307 	and.w	r3, r3, #7
 800d7f8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d7fa:	7bbb      	ldrb	r3, [r7, #14]
 800d7fc:	7b3a      	ldrb	r2, [r7, #12]
 800d7fe:	4911      	ldr	r1, [pc, #68]	@ (800d844 <UARTEx_SetNbDataToProcess+0x94>)
 800d800:	5c8a      	ldrb	r2, [r1, r2]
 800d802:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d806:	7b3a      	ldrb	r2, [r7, #12]
 800d808:	490f      	ldr	r1, [pc, #60]	@ (800d848 <UARTEx_SetNbDataToProcess+0x98>)
 800d80a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d80c:	fb93 f3f2 	sdiv	r3, r3, r2
 800d810:	b29a      	uxth	r2, r3
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d818:	7bfb      	ldrb	r3, [r7, #15]
 800d81a:	7b7a      	ldrb	r2, [r7, #13]
 800d81c:	4909      	ldr	r1, [pc, #36]	@ (800d844 <UARTEx_SetNbDataToProcess+0x94>)
 800d81e:	5c8a      	ldrb	r2, [r1, r2]
 800d820:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d824:	7b7a      	ldrb	r2, [r7, #13]
 800d826:	4908      	ldr	r1, [pc, #32]	@ (800d848 <UARTEx_SetNbDataToProcess+0x98>)
 800d828:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d82a:	fb93 f3f2 	sdiv	r3, r3, r2
 800d82e:	b29a      	uxth	r2, r3
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800d836:	bf00      	nop
 800d838:	3714      	adds	r7, #20
 800d83a:	46bd      	mov	sp, r7
 800d83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d840:	4770      	bx	lr
 800d842:	bf00      	nop
 800d844:	08010678 	.word	0x08010678
 800d848:	08010680 	.word	0x08010680

0800d84c <__cvt>:
 800d84c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d84e:	ed2d 8b02 	vpush	{d8}
 800d852:	eeb0 8b40 	vmov.f64	d8, d0
 800d856:	b085      	sub	sp, #20
 800d858:	4617      	mov	r7, r2
 800d85a:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800d85c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d85e:	ee18 2a90 	vmov	r2, s17
 800d862:	f025 0520 	bic.w	r5, r5, #32
 800d866:	2a00      	cmp	r2, #0
 800d868:	bfb6      	itet	lt
 800d86a:	222d      	movlt	r2, #45	@ 0x2d
 800d86c:	2200      	movge	r2, #0
 800d86e:	eeb1 8b40 	vneglt.f64	d8, d0
 800d872:	2d46      	cmp	r5, #70	@ 0x46
 800d874:	460c      	mov	r4, r1
 800d876:	701a      	strb	r2, [r3, #0]
 800d878:	d004      	beq.n	800d884 <__cvt+0x38>
 800d87a:	2d45      	cmp	r5, #69	@ 0x45
 800d87c:	d100      	bne.n	800d880 <__cvt+0x34>
 800d87e:	3401      	adds	r4, #1
 800d880:	2102      	movs	r1, #2
 800d882:	e000      	b.n	800d886 <__cvt+0x3a>
 800d884:	2103      	movs	r1, #3
 800d886:	ab03      	add	r3, sp, #12
 800d888:	9301      	str	r3, [sp, #4]
 800d88a:	ab02      	add	r3, sp, #8
 800d88c:	9300      	str	r3, [sp, #0]
 800d88e:	4622      	mov	r2, r4
 800d890:	4633      	mov	r3, r6
 800d892:	eeb0 0b48 	vmov.f64	d0, d8
 800d896:	f000 fe53 	bl	800e540 <_dtoa_r>
 800d89a:	2d47      	cmp	r5, #71	@ 0x47
 800d89c:	d114      	bne.n	800d8c8 <__cvt+0x7c>
 800d89e:	07fb      	lsls	r3, r7, #31
 800d8a0:	d50a      	bpl.n	800d8b8 <__cvt+0x6c>
 800d8a2:	1902      	adds	r2, r0, r4
 800d8a4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d8a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8ac:	bf08      	it	eq
 800d8ae:	9203      	streq	r2, [sp, #12]
 800d8b0:	2130      	movs	r1, #48	@ 0x30
 800d8b2:	9b03      	ldr	r3, [sp, #12]
 800d8b4:	4293      	cmp	r3, r2
 800d8b6:	d319      	bcc.n	800d8ec <__cvt+0xa0>
 800d8b8:	9b03      	ldr	r3, [sp, #12]
 800d8ba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d8bc:	1a1b      	subs	r3, r3, r0
 800d8be:	6013      	str	r3, [r2, #0]
 800d8c0:	b005      	add	sp, #20
 800d8c2:	ecbd 8b02 	vpop	{d8}
 800d8c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d8c8:	2d46      	cmp	r5, #70	@ 0x46
 800d8ca:	eb00 0204 	add.w	r2, r0, r4
 800d8ce:	d1e9      	bne.n	800d8a4 <__cvt+0x58>
 800d8d0:	7803      	ldrb	r3, [r0, #0]
 800d8d2:	2b30      	cmp	r3, #48	@ 0x30
 800d8d4:	d107      	bne.n	800d8e6 <__cvt+0x9a>
 800d8d6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d8da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8de:	bf1c      	itt	ne
 800d8e0:	f1c4 0401 	rsbne	r4, r4, #1
 800d8e4:	6034      	strne	r4, [r6, #0]
 800d8e6:	6833      	ldr	r3, [r6, #0]
 800d8e8:	441a      	add	r2, r3
 800d8ea:	e7db      	b.n	800d8a4 <__cvt+0x58>
 800d8ec:	1c5c      	adds	r4, r3, #1
 800d8ee:	9403      	str	r4, [sp, #12]
 800d8f0:	7019      	strb	r1, [r3, #0]
 800d8f2:	e7de      	b.n	800d8b2 <__cvt+0x66>

0800d8f4 <__exponent>:
 800d8f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d8f6:	2900      	cmp	r1, #0
 800d8f8:	bfba      	itte	lt
 800d8fa:	4249      	neglt	r1, r1
 800d8fc:	232d      	movlt	r3, #45	@ 0x2d
 800d8fe:	232b      	movge	r3, #43	@ 0x2b
 800d900:	2909      	cmp	r1, #9
 800d902:	7002      	strb	r2, [r0, #0]
 800d904:	7043      	strb	r3, [r0, #1]
 800d906:	dd29      	ble.n	800d95c <__exponent+0x68>
 800d908:	f10d 0307 	add.w	r3, sp, #7
 800d90c:	461d      	mov	r5, r3
 800d90e:	270a      	movs	r7, #10
 800d910:	461a      	mov	r2, r3
 800d912:	fbb1 f6f7 	udiv	r6, r1, r7
 800d916:	fb07 1416 	mls	r4, r7, r6, r1
 800d91a:	3430      	adds	r4, #48	@ 0x30
 800d91c:	f802 4c01 	strb.w	r4, [r2, #-1]
 800d920:	460c      	mov	r4, r1
 800d922:	2c63      	cmp	r4, #99	@ 0x63
 800d924:	f103 33ff 	add.w	r3, r3, #4294967295
 800d928:	4631      	mov	r1, r6
 800d92a:	dcf1      	bgt.n	800d910 <__exponent+0x1c>
 800d92c:	3130      	adds	r1, #48	@ 0x30
 800d92e:	1e94      	subs	r4, r2, #2
 800d930:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d934:	1c41      	adds	r1, r0, #1
 800d936:	4623      	mov	r3, r4
 800d938:	42ab      	cmp	r3, r5
 800d93a:	d30a      	bcc.n	800d952 <__exponent+0x5e>
 800d93c:	f10d 0309 	add.w	r3, sp, #9
 800d940:	1a9b      	subs	r3, r3, r2
 800d942:	42ac      	cmp	r4, r5
 800d944:	bf88      	it	hi
 800d946:	2300      	movhi	r3, #0
 800d948:	3302      	adds	r3, #2
 800d94a:	4403      	add	r3, r0
 800d94c:	1a18      	subs	r0, r3, r0
 800d94e:	b003      	add	sp, #12
 800d950:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d952:	f813 6b01 	ldrb.w	r6, [r3], #1
 800d956:	f801 6f01 	strb.w	r6, [r1, #1]!
 800d95a:	e7ed      	b.n	800d938 <__exponent+0x44>
 800d95c:	2330      	movs	r3, #48	@ 0x30
 800d95e:	3130      	adds	r1, #48	@ 0x30
 800d960:	7083      	strb	r3, [r0, #2]
 800d962:	70c1      	strb	r1, [r0, #3]
 800d964:	1d03      	adds	r3, r0, #4
 800d966:	e7f1      	b.n	800d94c <__exponent+0x58>

0800d968 <_printf_float>:
 800d968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d96c:	b08d      	sub	sp, #52	@ 0x34
 800d96e:	460c      	mov	r4, r1
 800d970:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800d974:	4616      	mov	r6, r2
 800d976:	461f      	mov	r7, r3
 800d978:	4605      	mov	r5, r0
 800d97a:	f000 fcdf 	bl	800e33c <_localeconv_r>
 800d97e:	f8d0 b000 	ldr.w	fp, [r0]
 800d982:	4658      	mov	r0, fp
 800d984:	f7f2 fcfc 	bl	8000380 <strlen>
 800d988:	2300      	movs	r3, #0
 800d98a:	930a      	str	r3, [sp, #40]	@ 0x28
 800d98c:	f8d8 3000 	ldr.w	r3, [r8]
 800d990:	f894 9018 	ldrb.w	r9, [r4, #24]
 800d994:	6822      	ldr	r2, [r4, #0]
 800d996:	9005      	str	r0, [sp, #20]
 800d998:	3307      	adds	r3, #7
 800d99a:	f023 0307 	bic.w	r3, r3, #7
 800d99e:	f103 0108 	add.w	r1, r3, #8
 800d9a2:	f8c8 1000 	str.w	r1, [r8]
 800d9a6:	ed93 0b00 	vldr	d0, [r3]
 800d9aa:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800dc08 <_printf_float+0x2a0>
 800d9ae:	eeb0 7bc0 	vabs.f64	d7, d0
 800d9b2:	eeb4 7b46 	vcmp.f64	d7, d6
 800d9b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9ba:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800d9be:	dd24      	ble.n	800da0a <_printf_float+0xa2>
 800d9c0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800d9c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9c8:	d502      	bpl.n	800d9d0 <_printf_float+0x68>
 800d9ca:	232d      	movs	r3, #45	@ 0x2d
 800d9cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d9d0:	498f      	ldr	r1, [pc, #572]	@ (800dc10 <_printf_float+0x2a8>)
 800d9d2:	4b90      	ldr	r3, [pc, #576]	@ (800dc14 <_printf_float+0x2ac>)
 800d9d4:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800d9d8:	bf94      	ite	ls
 800d9da:	4688      	movls	r8, r1
 800d9dc:	4698      	movhi	r8, r3
 800d9de:	f022 0204 	bic.w	r2, r2, #4
 800d9e2:	2303      	movs	r3, #3
 800d9e4:	6123      	str	r3, [r4, #16]
 800d9e6:	6022      	str	r2, [r4, #0]
 800d9e8:	f04f 0a00 	mov.w	sl, #0
 800d9ec:	9700      	str	r7, [sp, #0]
 800d9ee:	4633      	mov	r3, r6
 800d9f0:	aa0b      	add	r2, sp, #44	@ 0x2c
 800d9f2:	4621      	mov	r1, r4
 800d9f4:	4628      	mov	r0, r5
 800d9f6:	f000 f9d1 	bl	800dd9c <_printf_common>
 800d9fa:	3001      	adds	r0, #1
 800d9fc:	f040 8089 	bne.w	800db12 <_printf_float+0x1aa>
 800da00:	f04f 30ff 	mov.w	r0, #4294967295
 800da04:	b00d      	add	sp, #52	@ 0x34
 800da06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da0a:	eeb4 0b40 	vcmp.f64	d0, d0
 800da0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da12:	d709      	bvc.n	800da28 <_printf_float+0xc0>
 800da14:	ee10 3a90 	vmov	r3, s1
 800da18:	2b00      	cmp	r3, #0
 800da1a:	bfbc      	itt	lt
 800da1c:	232d      	movlt	r3, #45	@ 0x2d
 800da1e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800da22:	497d      	ldr	r1, [pc, #500]	@ (800dc18 <_printf_float+0x2b0>)
 800da24:	4b7d      	ldr	r3, [pc, #500]	@ (800dc1c <_printf_float+0x2b4>)
 800da26:	e7d5      	b.n	800d9d4 <_printf_float+0x6c>
 800da28:	6863      	ldr	r3, [r4, #4]
 800da2a:	1c59      	adds	r1, r3, #1
 800da2c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800da30:	d139      	bne.n	800daa6 <_printf_float+0x13e>
 800da32:	2306      	movs	r3, #6
 800da34:	6063      	str	r3, [r4, #4]
 800da36:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800da3a:	2300      	movs	r3, #0
 800da3c:	6022      	str	r2, [r4, #0]
 800da3e:	9303      	str	r3, [sp, #12]
 800da40:	ab0a      	add	r3, sp, #40	@ 0x28
 800da42:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800da46:	ab09      	add	r3, sp, #36	@ 0x24
 800da48:	9300      	str	r3, [sp, #0]
 800da4a:	6861      	ldr	r1, [r4, #4]
 800da4c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800da50:	4628      	mov	r0, r5
 800da52:	f7ff fefb 	bl	800d84c <__cvt>
 800da56:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800da5a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800da5c:	4680      	mov	r8, r0
 800da5e:	d129      	bne.n	800dab4 <_printf_float+0x14c>
 800da60:	1cc8      	adds	r0, r1, #3
 800da62:	db02      	blt.n	800da6a <_printf_float+0x102>
 800da64:	6863      	ldr	r3, [r4, #4]
 800da66:	4299      	cmp	r1, r3
 800da68:	dd41      	ble.n	800daee <_printf_float+0x186>
 800da6a:	f1a9 0902 	sub.w	r9, r9, #2
 800da6e:	fa5f f989 	uxtb.w	r9, r9
 800da72:	3901      	subs	r1, #1
 800da74:	464a      	mov	r2, r9
 800da76:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800da7a:	9109      	str	r1, [sp, #36]	@ 0x24
 800da7c:	f7ff ff3a 	bl	800d8f4 <__exponent>
 800da80:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800da82:	1813      	adds	r3, r2, r0
 800da84:	2a01      	cmp	r2, #1
 800da86:	4682      	mov	sl, r0
 800da88:	6123      	str	r3, [r4, #16]
 800da8a:	dc02      	bgt.n	800da92 <_printf_float+0x12a>
 800da8c:	6822      	ldr	r2, [r4, #0]
 800da8e:	07d2      	lsls	r2, r2, #31
 800da90:	d501      	bpl.n	800da96 <_printf_float+0x12e>
 800da92:	3301      	adds	r3, #1
 800da94:	6123      	str	r3, [r4, #16]
 800da96:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d0a6      	beq.n	800d9ec <_printf_float+0x84>
 800da9e:	232d      	movs	r3, #45	@ 0x2d
 800daa0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800daa4:	e7a2      	b.n	800d9ec <_printf_float+0x84>
 800daa6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800daaa:	d1c4      	bne.n	800da36 <_printf_float+0xce>
 800daac:	2b00      	cmp	r3, #0
 800daae:	d1c2      	bne.n	800da36 <_printf_float+0xce>
 800dab0:	2301      	movs	r3, #1
 800dab2:	e7bf      	b.n	800da34 <_printf_float+0xcc>
 800dab4:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800dab8:	d9db      	bls.n	800da72 <_printf_float+0x10a>
 800daba:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800dabe:	d118      	bne.n	800daf2 <_printf_float+0x18a>
 800dac0:	2900      	cmp	r1, #0
 800dac2:	6863      	ldr	r3, [r4, #4]
 800dac4:	dd0b      	ble.n	800dade <_printf_float+0x176>
 800dac6:	6121      	str	r1, [r4, #16]
 800dac8:	b913      	cbnz	r3, 800dad0 <_printf_float+0x168>
 800daca:	6822      	ldr	r2, [r4, #0]
 800dacc:	07d0      	lsls	r0, r2, #31
 800dace:	d502      	bpl.n	800dad6 <_printf_float+0x16e>
 800dad0:	3301      	adds	r3, #1
 800dad2:	440b      	add	r3, r1
 800dad4:	6123      	str	r3, [r4, #16]
 800dad6:	65a1      	str	r1, [r4, #88]	@ 0x58
 800dad8:	f04f 0a00 	mov.w	sl, #0
 800dadc:	e7db      	b.n	800da96 <_printf_float+0x12e>
 800dade:	b913      	cbnz	r3, 800dae6 <_printf_float+0x17e>
 800dae0:	6822      	ldr	r2, [r4, #0]
 800dae2:	07d2      	lsls	r2, r2, #31
 800dae4:	d501      	bpl.n	800daea <_printf_float+0x182>
 800dae6:	3302      	adds	r3, #2
 800dae8:	e7f4      	b.n	800dad4 <_printf_float+0x16c>
 800daea:	2301      	movs	r3, #1
 800daec:	e7f2      	b.n	800dad4 <_printf_float+0x16c>
 800daee:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800daf2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800daf4:	4299      	cmp	r1, r3
 800daf6:	db05      	blt.n	800db04 <_printf_float+0x19c>
 800daf8:	6823      	ldr	r3, [r4, #0]
 800dafa:	6121      	str	r1, [r4, #16]
 800dafc:	07d8      	lsls	r0, r3, #31
 800dafe:	d5ea      	bpl.n	800dad6 <_printf_float+0x16e>
 800db00:	1c4b      	adds	r3, r1, #1
 800db02:	e7e7      	b.n	800dad4 <_printf_float+0x16c>
 800db04:	2900      	cmp	r1, #0
 800db06:	bfd4      	ite	le
 800db08:	f1c1 0202 	rsble	r2, r1, #2
 800db0c:	2201      	movgt	r2, #1
 800db0e:	4413      	add	r3, r2
 800db10:	e7e0      	b.n	800dad4 <_printf_float+0x16c>
 800db12:	6823      	ldr	r3, [r4, #0]
 800db14:	055a      	lsls	r2, r3, #21
 800db16:	d407      	bmi.n	800db28 <_printf_float+0x1c0>
 800db18:	6923      	ldr	r3, [r4, #16]
 800db1a:	4642      	mov	r2, r8
 800db1c:	4631      	mov	r1, r6
 800db1e:	4628      	mov	r0, r5
 800db20:	47b8      	blx	r7
 800db22:	3001      	adds	r0, #1
 800db24:	d12a      	bne.n	800db7c <_printf_float+0x214>
 800db26:	e76b      	b.n	800da00 <_printf_float+0x98>
 800db28:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800db2c:	f240 80e0 	bls.w	800dcf0 <_printf_float+0x388>
 800db30:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800db34:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800db38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db3c:	d133      	bne.n	800dba6 <_printf_float+0x23e>
 800db3e:	4a38      	ldr	r2, [pc, #224]	@ (800dc20 <_printf_float+0x2b8>)
 800db40:	2301      	movs	r3, #1
 800db42:	4631      	mov	r1, r6
 800db44:	4628      	mov	r0, r5
 800db46:	47b8      	blx	r7
 800db48:	3001      	adds	r0, #1
 800db4a:	f43f af59 	beq.w	800da00 <_printf_float+0x98>
 800db4e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800db52:	4543      	cmp	r3, r8
 800db54:	db02      	blt.n	800db5c <_printf_float+0x1f4>
 800db56:	6823      	ldr	r3, [r4, #0]
 800db58:	07d8      	lsls	r0, r3, #31
 800db5a:	d50f      	bpl.n	800db7c <_printf_float+0x214>
 800db5c:	9b05      	ldr	r3, [sp, #20]
 800db5e:	465a      	mov	r2, fp
 800db60:	4631      	mov	r1, r6
 800db62:	4628      	mov	r0, r5
 800db64:	47b8      	blx	r7
 800db66:	3001      	adds	r0, #1
 800db68:	f43f af4a 	beq.w	800da00 <_printf_float+0x98>
 800db6c:	f04f 0900 	mov.w	r9, #0
 800db70:	f108 38ff 	add.w	r8, r8, #4294967295
 800db74:	f104 0a1a 	add.w	sl, r4, #26
 800db78:	45c8      	cmp	r8, r9
 800db7a:	dc09      	bgt.n	800db90 <_printf_float+0x228>
 800db7c:	6823      	ldr	r3, [r4, #0]
 800db7e:	079b      	lsls	r3, r3, #30
 800db80:	f100 8107 	bmi.w	800dd92 <_printf_float+0x42a>
 800db84:	68e0      	ldr	r0, [r4, #12]
 800db86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800db88:	4298      	cmp	r0, r3
 800db8a:	bfb8      	it	lt
 800db8c:	4618      	movlt	r0, r3
 800db8e:	e739      	b.n	800da04 <_printf_float+0x9c>
 800db90:	2301      	movs	r3, #1
 800db92:	4652      	mov	r2, sl
 800db94:	4631      	mov	r1, r6
 800db96:	4628      	mov	r0, r5
 800db98:	47b8      	blx	r7
 800db9a:	3001      	adds	r0, #1
 800db9c:	f43f af30 	beq.w	800da00 <_printf_float+0x98>
 800dba0:	f109 0901 	add.w	r9, r9, #1
 800dba4:	e7e8      	b.n	800db78 <_printf_float+0x210>
 800dba6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	dc3b      	bgt.n	800dc24 <_printf_float+0x2bc>
 800dbac:	4a1c      	ldr	r2, [pc, #112]	@ (800dc20 <_printf_float+0x2b8>)
 800dbae:	2301      	movs	r3, #1
 800dbb0:	4631      	mov	r1, r6
 800dbb2:	4628      	mov	r0, r5
 800dbb4:	47b8      	blx	r7
 800dbb6:	3001      	adds	r0, #1
 800dbb8:	f43f af22 	beq.w	800da00 <_printf_float+0x98>
 800dbbc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800dbc0:	ea59 0303 	orrs.w	r3, r9, r3
 800dbc4:	d102      	bne.n	800dbcc <_printf_float+0x264>
 800dbc6:	6823      	ldr	r3, [r4, #0]
 800dbc8:	07d9      	lsls	r1, r3, #31
 800dbca:	d5d7      	bpl.n	800db7c <_printf_float+0x214>
 800dbcc:	9b05      	ldr	r3, [sp, #20]
 800dbce:	465a      	mov	r2, fp
 800dbd0:	4631      	mov	r1, r6
 800dbd2:	4628      	mov	r0, r5
 800dbd4:	47b8      	blx	r7
 800dbd6:	3001      	adds	r0, #1
 800dbd8:	f43f af12 	beq.w	800da00 <_printf_float+0x98>
 800dbdc:	f04f 0a00 	mov.w	sl, #0
 800dbe0:	f104 0b1a 	add.w	fp, r4, #26
 800dbe4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dbe6:	425b      	negs	r3, r3
 800dbe8:	4553      	cmp	r3, sl
 800dbea:	dc01      	bgt.n	800dbf0 <_printf_float+0x288>
 800dbec:	464b      	mov	r3, r9
 800dbee:	e794      	b.n	800db1a <_printf_float+0x1b2>
 800dbf0:	2301      	movs	r3, #1
 800dbf2:	465a      	mov	r2, fp
 800dbf4:	4631      	mov	r1, r6
 800dbf6:	4628      	mov	r0, r5
 800dbf8:	47b8      	blx	r7
 800dbfa:	3001      	adds	r0, #1
 800dbfc:	f43f af00 	beq.w	800da00 <_printf_float+0x98>
 800dc00:	f10a 0a01 	add.w	sl, sl, #1
 800dc04:	e7ee      	b.n	800dbe4 <_printf_float+0x27c>
 800dc06:	bf00      	nop
 800dc08:	ffffffff 	.word	0xffffffff
 800dc0c:	7fefffff 	.word	0x7fefffff
 800dc10:	08010688 	.word	0x08010688
 800dc14:	0801068c 	.word	0x0801068c
 800dc18:	08010690 	.word	0x08010690
 800dc1c:	08010694 	.word	0x08010694
 800dc20:	08010698 	.word	0x08010698
 800dc24:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800dc26:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800dc2a:	4553      	cmp	r3, sl
 800dc2c:	bfa8      	it	ge
 800dc2e:	4653      	movge	r3, sl
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	4699      	mov	r9, r3
 800dc34:	dc37      	bgt.n	800dca6 <_printf_float+0x33e>
 800dc36:	2300      	movs	r3, #0
 800dc38:	9307      	str	r3, [sp, #28]
 800dc3a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dc3e:	f104 021a 	add.w	r2, r4, #26
 800dc42:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800dc44:	9907      	ldr	r1, [sp, #28]
 800dc46:	9306      	str	r3, [sp, #24]
 800dc48:	eba3 0309 	sub.w	r3, r3, r9
 800dc4c:	428b      	cmp	r3, r1
 800dc4e:	dc31      	bgt.n	800dcb4 <_printf_float+0x34c>
 800dc50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc52:	459a      	cmp	sl, r3
 800dc54:	dc3b      	bgt.n	800dcce <_printf_float+0x366>
 800dc56:	6823      	ldr	r3, [r4, #0]
 800dc58:	07da      	lsls	r2, r3, #31
 800dc5a:	d438      	bmi.n	800dcce <_printf_float+0x366>
 800dc5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc5e:	ebaa 0903 	sub.w	r9, sl, r3
 800dc62:	9b06      	ldr	r3, [sp, #24]
 800dc64:	ebaa 0303 	sub.w	r3, sl, r3
 800dc68:	4599      	cmp	r9, r3
 800dc6a:	bfa8      	it	ge
 800dc6c:	4699      	movge	r9, r3
 800dc6e:	f1b9 0f00 	cmp.w	r9, #0
 800dc72:	dc34      	bgt.n	800dcde <_printf_float+0x376>
 800dc74:	f04f 0800 	mov.w	r8, #0
 800dc78:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dc7c:	f104 0b1a 	add.w	fp, r4, #26
 800dc80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc82:	ebaa 0303 	sub.w	r3, sl, r3
 800dc86:	eba3 0309 	sub.w	r3, r3, r9
 800dc8a:	4543      	cmp	r3, r8
 800dc8c:	f77f af76 	ble.w	800db7c <_printf_float+0x214>
 800dc90:	2301      	movs	r3, #1
 800dc92:	465a      	mov	r2, fp
 800dc94:	4631      	mov	r1, r6
 800dc96:	4628      	mov	r0, r5
 800dc98:	47b8      	blx	r7
 800dc9a:	3001      	adds	r0, #1
 800dc9c:	f43f aeb0 	beq.w	800da00 <_printf_float+0x98>
 800dca0:	f108 0801 	add.w	r8, r8, #1
 800dca4:	e7ec      	b.n	800dc80 <_printf_float+0x318>
 800dca6:	4642      	mov	r2, r8
 800dca8:	4631      	mov	r1, r6
 800dcaa:	4628      	mov	r0, r5
 800dcac:	47b8      	blx	r7
 800dcae:	3001      	adds	r0, #1
 800dcb0:	d1c1      	bne.n	800dc36 <_printf_float+0x2ce>
 800dcb2:	e6a5      	b.n	800da00 <_printf_float+0x98>
 800dcb4:	2301      	movs	r3, #1
 800dcb6:	4631      	mov	r1, r6
 800dcb8:	4628      	mov	r0, r5
 800dcba:	9206      	str	r2, [sp, #24]
 800dcbc:	47b8      	blx	r7
 800dcbe:	3001      	adds	r0, #1
 800dcc0:	f43f ae9e 	beq.w	800da00 <_printf_float+0x98>
 800dcc4:	9b07      	ldr	r3, [sp, #28]
 800dcc6:	9a06      	ldr	r2, [sp, #24]
 800dcc8:	3301      	adds	r3, #1
 800dcca:	9307      	str	r3, [sp, #28]
 800dccc:	e7b9      	b.n	800dc42 <_printf_float+0x2da>
 800dcce:	9b05      	ldr	r3, [sp, #20]
 800dcd0:	465a      	mov	r2, fp
 800dcd2:	4631      	mov	r1, r6
 800dcd4:	4628      	mov	r0, r5
 800dcd6:	47b8      	blx	r7
 800dcd8:	3001      	adds	r0, #1
 800dcda:	d1bf      	bne.n	800dc5c <_printf_float+0x2f4>
 800dcdc:	e690      	b.n	800da00 <_printf_float+0x98>
 800dcde:	9a06      	ldr	r2, [sp, #24]
 800dce0:	464b      	mov	r3, r9
 800dce2:	4442      	add	r2, r8
 800dce4:	4631      	mov	r1, r6
 800dce6:	4628      	mov	r0, r5
 800dce8:	47b8      	blx	r7
 800dcea:	3001      	adds	r0, #1
 800dcec:	d1c2      	bne.n	800dc74 <_printf_float+0x30c>
 800dcee:	e687      	b.n	800da00 <_printf_float+0x98>
 800dcf0:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800dcf4:	f1b9 0f01 	cmp.w	r9, #1
 800dcf8:	dc01      	bgt.n	800dcfe <_printf_float+0x396>
 800dcfa:	07db      	lsls	r3, r3, #31
 800dcfc:	d536      	bpl.n	800dd6c <_printf_float+0x404>
 800dcfe:	2301      	movs	r3, #1
 800dd00:	4642      	mov	r2, r8
 800dd02:	4631      	mov	r1, r6
 800dd04:	4628      	mov	r0, r5
 800dd06:	47b8      	blx	r7
 800dd08:	3001      	adds	r0, #1
 800dd0a:	f43f ae79 	beq.w	800da00 <_printf_float+0x98>
 800dd0e:	9b05      	ldr	r3, [sp, #20]
 800dd10:	465a      	mov	r2, fp
 800dd12:	4631      	mov	r1, r6
 800dd14:	4628      	mov	r0, r5
 800dd16:	47b8      	blx	r7
 800dd18:	3001      	adds	r0, #1
 800dd1a:	f43f ae71 	beq.w	800da00 <_printf_float+0x98>
 800dd1e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800dd22:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800dd26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd2a:	f109 39ff 	add.w	r9, r9, #4294967295
 800dd2e:	d018      	beq.n	800dd62 <_printf_float+0x3fa>
 800dd30:	464b      	mov	r3, r9
 800dd32:	f108 0201 	add.w	r2, r8, #1
 800dd36:	4631      	mov	r1, r6
 800dd38:	4628      	mov	r0, r5
 800dd3a:	47b8      	blx	r7
 800dd3c:	3001      	adds	r0, #1
 800dd3e:	d10c      	bne.n	800dd5a <_printf_float+0x3f2>
 800dd40:	e65e      	b.n	800da00 <_printf_float+0x98>
 800dd42:	2301      	movs	r3, #1
 800dd44:	465a      	mov	r2, fp
 800dd46:	4631      	mov	r1, r6
 800dd48:	4628      	mov	r0, r5
 800dd4a:	47b8      	blx	r7
 800dd4c:	3001      	adds	r0, #1
 800dd4e:	f43f ae57 	beq.w	800da00 <_printf_float+0x98>
 800dd52:	f108 0801 	add.w	r8, r8, #1
 800dd56:	45c8      	cmp	r8, r9
 800dd58:	dbf3      	blt.n	800dd42 <_printf_float+0x3da>
 800dd5a:	4653      	mov	r3, sl
 800dd5c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800dd60:	e6dc      	b.n	800db1c <_printf_float+0x1b4>
 800dd62:	f04f 0800 	mov.w	r8, #0
 800dd66:	f104 0b1a 	add.w	fp, r4, #26
 800dd6a:	e7f4      	b.n	800dd56 <_printf_float+0x3ee>
 800dd6c:	2301      	movs	r3, #1
 800dd6e:	4642      	mov	r2, r8
 800dd70:	e7e1      	b.n	800dd36 <_printf_float+0x3ce>
 800dd72:	2301      	movs	r3, #1
 800dd74:	464a      	mov	r2, r9
 800dd76:	4631      	mov	r1, r6
 800dd78:	4628      	mov	r0, r5
 800dd7a:	47b8      	blx	r7
 800dd7c:	3001      	adds	r0, #1
 800dd7e:	f43f ae3f 	beq.w	800da00 <_printf_float+0x98>
 800dd82:	f108 0801 	add.w	r8, r8, #1
 800dd86:	68e3      	ldr	r3, [r4, #12]
 800dd88:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800dd8a:	1a5b      	subs	r3, r3, r1
 800dd8c:	4543      	cmp	r3, r8
 800dd8e:	dcf0      	bgt.n	800dd72 <_printf_float+0x40a>
 800dd90:	e6f8      	b.n	800db84 <_printf_float+0x21c>
 800dd92:	f04f 0800 	mov.w	r8, #0
 800dd96:	f104 0919 	add.w	r9, r4, #25
 800dd9a:	e7f4      	b.n	800dd86 <_printf_float+0x41e>

0800dd9c <_printf_common>:
 800dd9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dda0:	4616      	mov	r6, r2
 800dda2:	4698      	mov	r8, r3
 800dda4:	688a      	ldr	r2, [r1, #8]
 800dda6:	690b      	ldr	r3, [r1, #16]
 800dda8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ddac:	4293      	cmp	r3, r2
 800ddae:	bfb8      	it	lt
 800ddb0:	4613      	movlt	r3, r2
 800ddb2:	6033      	str	r3, [r6, #0]
 800ddb4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ddb8:	4607      	mov	r7, r0
 800ddba:	460c      	mov	r4, r1
 800ddbc:	b10a      	cbz	r2, 800ddc2 <_printf_common+0x26>
 800ddbe:	3301      	adds	r3, #1
 800ddc0:	6033      	str	r3, [r6, #0]
 800ddc2:	6823      	ldr	r3, [r4, #0]
 800ddc4:	0699      	lsls	r1, r3, #26
 800ddc6:	bf42      	ittt	mi
 800ddc8:	6833      	ldrmi	r3, [r6, #0]
 800ddca:	3302      	addmi	r3, #2
 800ddcc:	6033      	strmi	r3, [r6, #0]
 800ddce:	6825      	ldr	r5, [r4, #0]
 800ddd0:	f015 0506 	ands.w	r5, r5, #6
 800ddd4:	d106      	bne.n	800dde4 <_printf_common+0x48>
 800ddd6:	f104 0a19 	add.w	sl, r4, #25
 800ddda:	68e3      	ldr	r3, [r4, #12]
 800dddc:	6832      	ldr	r2, [r6, #0]
 800ddde:	1a9b      	subs	r3, r3, r2
 800dde0:	42ab      	cmp	r3, r5
 800dde2:	dc26      	bgt.n	800de32 <_printf_common+0x96>
 800dde4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800dde8:	6822      	ldr	r2, [r4, #0]
 800ddea:	3b00      	subs	r3, #0
 800ddec:	bf18      	it	ne
 800ddee:	2301      	movne	r3, #1
 800ddf0:	0692      	lsls	r2, r2, #26
 800ddf2:	d42b      	bmi.n	800de4c <_printf_common+0xb0>
 800ddf4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ddf8:	4641      	mov	r1, r8
 800ddfa:	4638      	mov	r0, r7
 800ddfc:	47c8      	blx	r9
 800ddfe:	3001      	adds	r0, #1
 800de00:	d01e      	beq.n	800de40 <_printf_common+0xa4>
 800de02:	6823      	ldr	r3, [r4, #0]
 800de04:	6922      	ldr	r2, [r4, #16]
 800de06:	f003 0306 	and.w	r3, r3, #6
 800de0a:	2b04      	cmp	r3, #4
 800de0c:	bf02      	ittt	eq
 800de0e:	68e5      	ldreq	r5, [r4, #12]
 800de10:	6833      	ldreq	r3, [r6, #0]
 800de12:	1aed      	subeq	r5, r5, r3
 800de14:	68a3      	ldr	r3, [r4, #8]
 800de16:	bf0c      	ite	eq
 800de18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800de1c:	2500      	movne	r5, #0
 800de1e:	4293      	cmp	r3, r2
 800de20:	bfc4      	itt	gt
 800de22:	1a9b      	subgt	r3, r3, r2
 800de24:	18ed      	addgt	r5, r5, r3
 800de26:	2600      	movs	r6, #0
 800de28:	341a      	adds	r4, #26
 800de2a:	42b5      	cmp	r5, r6
 800de2c:	d11a      	bne.n	800de64 <_printf_common+0xc8>
 800de2e:	2000      	movs	r0, #0
 800de30:	e008      	b.n	800de44 <_printf_common+0xa8>
 800de32:	2301      	movs	r3, #1
 800de34:	4652      	mov	r2, sl
 800de36:	4641      	mov	r1, r8
 800de38:	4638      	mov	r0, r7
 800de3a:	47c8      	blx	r9
 800de3c:	3001      	adds	r0, #1
 800de3e:	d103      	bne.n	800de48 <_printf_common+0xac>
 800de40:	f04f 30ff 	mov.w	r0, #4294967295
 800de44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de48:	3501      	adds	r5, #1
 800de4a:	e7c6      	b.n	800ddda <_printf_common+0x3e>
 800de4c:	18e1      	adds	r1, r4, r3
 800de4e:	1c5a      	adds	r2, r3, #1
 800de50:	2030      	movs	r0, #48	@ 0x30
 800de52:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800de56:	4422      	add	r2, r4
 800de58:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800de5c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800de60:	3302      	adds	r3, #2
 800de62:	e7c7      	b.n	800ddf4 <_printf_common+0x58>
 800de64:	2301      	movs	r3, #1
 800de66:	4622      	mov	r2, r4
 800de68:	4641      	mov	r1, r8
 800de6a:	4638      	mov	r0, r7
 800de6c:	47c8      	blx	r9
 800de6e:	3001      	adds	r0, #1
 800de70:	d0e6      	beq.n	800de40 <_printf_common+0xa4>
 800de72:	3601      	adds	r6, #1
 800de74:	e7d9      	b.n	800de2a <_printf_common+0x8e>
	...

0800de78 <_printf_i>:
 800de78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800de7c:	7e0f      	ldrb	r7, [r1, #24]
 800de7e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800de80:	2f78      	cmp	r7, #120	@ 0x78
 800de82:	4691      	mov	r9, r2
 800de84:	4680      	mov	r8, r0
 800de86:	460c      	mov	r4, r1
 800de88:	469a      	mov	sl, r3
 800de8a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800de8e:	d807      	bhi.n	800dea0 <_printf_i+0x28>
 800de90:	2f62      	cmp	r7, #98	@ 0x62
 800de92:	d80a      	bhi.n	800deaa <_printf_i+0x32>
 800de94:	2f00      	cmp	r7, #0
 800de96:	f000 80d2 	beq.w	800e03e <_printf_i+0x1c6>
 800de9a:	2f58      	cmp	r7, #88	@ 0x58
 800de9c:	f000 80b9 	beq.w	800e012 <_printf_i+0x19a>
 800dea0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dea4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800dea8:	e03a      	b.n	800df20 <_printf_i+0xa8>
 800deaa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800deae:	2b15      	cmp	r3, #21
 800deb0:	d8f6      	bhi.n	800dea0 <_printf_i+0x28>
 800deb2:	a101      	add	r1, pc, #4	@ (adr r1, 800deb8 <_printf_i+0x40>)
 800deb4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800deb8:	0800df11 	.word	0x0800df11
 800debc:	0800df25 	.word	0x0800df25
 800dec0:	0800dea1 	.word	0x0800dea1
 800dec4:	0800dea1 	.word	0x0800dea1
 800dec8:	0800dea1 	.word	0x0800dea1
 800decc:	0800dea1 	.word	0x0800dea1
 800ded0:	0800df25 	.word	0x0800df25
 800ded4:	0800dea1 	.word	0x0800dea1
 800ded8:	0800dea1 	.word	0x0800dea1
 800dedc:	0800dea1 	.word	0x0800dea1
 800dee0:	0800dea1 	.word	0x0800dea1
 800dee4:	0800e025 	.word	0x0800e025
 800dee8:	0800df4f 	.word	0x0800df4f
 800deec:	0800dfdf 	.word	0x0800dfdf
 800def0:	0800dea1 	.word	0x0800dea1
 800def4:	0800dea1 	.word	0x0800dea1
 800def8:	0800e047 	.word	0x0800e047
 800defc:	0800dea1 	.word	0x0800dea1
 800df00:	0800df4f 	.word	0x0800df4f
 800df04:	0800dea1 	.word	0x0800dea1
 800df08:	0800dea1 	.word	0x0800dea1
 800df0c:	0800dfe7 	.word	0x0800dfe7
 800df10:	6833      	ldr	r3, [r6, #0]
 800df12:	1d1a      	adds	r2, r3, #4
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	6032      	str	r2, [r6, #0]
 800df18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800df1c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800df20:	2301      	movs	r3, #1
 800df22:	e09d      	b.n	800e060 <_printf_i+0x1e8>
 800df24:	6833      	ldr	r3, [r6, #0]
 800df26:	6820      	ldr	r0, [r4, #0]
 800df28:	1d19      	adds	r1, r3, #4
 800df2a:	6031      	str	r1, [r6, #0]
 800df2c:	0606      	lsls	r6, r0, #24
 800df2e:	d501      	bpl.n	800df34 <_printf_i+0xbc>
 800df30:	681d      	ldr	r5, [r3, #0]
 800df32:	e003      	b.n	800df3c <_printf_i+0xc4>
 800df34:	0645      	lsls	r5, r0, #25
 800df36:	d5fb      	bpl.n	800df30 <_printf_i+0xb8>
 800df38:	f9b3 5000 	ldrsh.w	r5, [r3]
 800df3c:	2d00      	cmp	r5, #0
 800df3e:	da03      	bge.n	800df48 <_printf_i+0xd0>
 800df40:	232d      	movs	r3, #45	@ 0x2d
 800df42:	426d      	negs	r5, r5
 800df44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800df48:	4859      	ldr	r0, [pc, #356]	@ (800e0b0 <_printf_i+0x238>)
 800df4a:	230a      	movs	r3, #10
 800df4c:	e011      	b.n	800df72 <_printf_i+0xfa>
 800df4e:	6821      	ldr	r1, [r4, #0]
 800df50:	6833      	ldr	r3, [r6, #0]
 800df52:	0608      	lsls	r0, r1, #24
 800df54:	f853 5b04 	ldr.w	r5, [r3], #4
 800df58:	d402      	bmi.n	800df60 <_printf_i+0xe8>
 800df5a:	0649      	lsls	r1, r1, #25
 800df5c:	bf48      	it	mi
 800df5e:	b2ad      	uxthmi	r5, r5
 800df60:	2f6f      	cmp	r7, #111	@ 0x6f
 800df62:	4853      	ldr	r0, [pc, #332]	@ (800e0b0 <_printf_i+0x238>)
 800df64:	6033      	str	r3, [r6, #0]
 800df66:	bf14      	ite	ne
 800df68:	230a      	movne	r3, #10
 800df6a:	2308      	moveq	r3, #8
 800df6c:	2100      	movs	r1, #0
 800df6e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800df72:	6866      	ldr	r6, [r4, #4]
 800df74:	60a6      	str	r6, [r4, #8]
 800df76:	2e00      	cmp	r6, #0
 800df78:	bfa2      	ittt	ge
 800df7a:	6821      	ldrge	r1, [r4, #0]
 800df7c:	f021 0104 	bicge.w	r1, r1, #4
 800df80:	6021      	strge	r1, [r4, #0]
 800df82:	b90d      	cbnz	r5, 800df88 <_printf_i+0x110>
 800df84:	2e00      	cmp	r6, #0
 800df86:	d04b      	beq.n	800e020 <_printf_i+0x1a8>
 800df88:	4616      	mov	r6, r2
 800df8a:	fbb5 f1f3 	udiv	r1, r5, r3
 800df8e:	fb03 5711 	mls	r7, r3, r1, r5
 800df92:	5dc7      	ldrb	r7, [r0, r7]
 800df94:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800df98:	462f      	mov	r7, r5
 800df9a:	42bb      	cmp	r3, r7
 800df9c:	460d      	mov	r5, r1
 800df9e:	d9f4      	bls.n	800df8a <_printf_i+0x112>
 800dfa0:	2b08      	cmp	r3, #8
 800dfa2:	d10b      	bne.n	800dfbc <_printf_i+0x144>
 800dfa4:	6823      	ldr	r3, [r4, #0]
 800dfa6:	07df      	lsls	r7, r3, #31
 800dfa8:	d508      	bpl.n	800dfbc <_printf_i+0x144>
 800dfaa:	6923      	ldr	r3, [r4, #16]
 800dfac:	6861      	ldr	r1, [r4, #4]
 800dfae:	4299      	cmp	r1, r3
 800dfb0:	bfde      	ittt	le
 800dfb2:	2330      	movle	r3, #48	@ 0x30
 800dfb4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800dfb8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800dfbc:	1b92      	subs	r2, r2, r6
 800dfbe:	6122      	str	r2, [r4, #16]
 800dfc0:	f8cd a000 	str.w	sl, [sp]
 800dfc4:	464b      	mov	r3, r9
 800dfc6:	aa03      	add	r2, sp, #12
 800dfc8:	4621      	mov	r1, r4
 800dfca:	4640      	mov	r0, r8
 800dfcc:	f7ff fee6 	bl	800dd9c <_printf_common>
 800dfd0:	3001      	adds	r0, #1
 800dfd2:	d14a      	bne.n	800e06a <_printf_i+0x1f2>
 800dfd4:	f04f 30ff 	mov.w	r0, #4294967295
 800dfd8:	b004      	add	sp, #16
 800dfda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dfde:	6823      	ldr	r3, [r4, #0]
 800dfe0:	f043 0320 	orr.w	r3, r3, #32
 800dfe4:	6023      	str	r3, [r4, #0]
 800dfe6:	4833      	ldr	r0, [pc, #204]	@ (800e0b4 <_printf_i+0x23c>)
 800dfe8:	2778      	movs	r7, #120	@ 0x78
 800dfea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800dfee:	6823      	ldr	r3, [r4, #0]
 800dff0:	6831      	ldr	r1, [r6, #0]
 800dff2:	061f      	lsls	r7, r3, #24
 800dff4:	f851 5b04 	ldr.w	r5, [r1], #4
 800dff8:	d402      	bmi.n	800e000 <_printf_i+0x188>
 800dffa:	065f      	lsls	r7, r3, #25
 800dffc:	bf48      	it	mi
 800dffe:	b2ad      	uxthmi	r5, r5
 800e000:	6031      	str	r1, [r6, #0]
 800e002:	07d9      	lsls	r1, r3, #31
 800e004:	bf44      	itt	mi
 800e006:	f043 0320 	orrmi.w	r3, r3, #32
 800e00a:	6023      	strmi	r3, [r4, #0]
 800e00c:	b11d      	cbz	r5, 800e016 <_printf_i+0x19e>
 800e00e:	2310      	movs	r3, #16
 800e010:	e7ac      	b.n	800df6c <_printf_i+0xf4>
 800e012:	4827      	ldr	r0, [pc, #156]	@ (800e0b0 <_printf_i+0x238>)
 800e014:	e7e9      	b.n	800dfea <_printf_i+0x172>
 800e016:	6823      	ldr	r3, [r4, #0]
 800e018:	f023 0320 	bic.w	r3, r3, #32
 800e01c:	6023      	str	r3, [r4, #0]
 800e01e:	e7f6      	b.n	800e00e <_printf_i+0x196>
 800e020:	4616      	mov	r6, r2
 800e022:	e7bd      	b.n	800dfa0 <_printf_i+0x128>
 800e024:	6833      	ldr	r3, [r6, #0]
 800e026:	6825      	ldr	r5, [r4, #0]
 800e028:	6961      	ldr	r1, [r4, #20]
 800e02a:	1d18      	adds	r0, r3, #4
 800e02c:	6030      	str	r0, [r6, #0]
 800e02e:	062e      	lsls	r6, r5, #24
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	d501      	bpl.n	800e038 <_printf_i+0x1c0>
 800e034:	6019      	str	r1, [r3, #0]
 800e036:	e002      	b.n	800e03e <_printf_i+0x1c6>
 800e038:	0668      	lsls	r0, r5, #25
 800e03a:	d5fb      	bpl.n	800e034 <_printf_i+0x1bc>
 800e03c:	8019      	strh	r1, [r3, #0]
 800e03e:	2300      	movs	r3, #0
 800e040:	6123      	str	r3, [r4, #16]
 800e042:	4616      	mov	r6, r2
 800e044:	e7bc      	b.n	800dfc0 <_printf_i+0x148>
 800e046:	6833      	ldr	r3, [r6, #0]
 800e048:	1d1a      	adds	r2, r3, #4
 800e04a:	6032      	str	r2, [r6, #0]
 800e04c:	681e      	ldr	r6, [r3, #0]
 800e04e:	6862      	ldr	r2, [r4, #4]
 800e050:	2100      	movs	r1, #0
 800e052:	4630      	mov	r0, r6
 800e054:	f7f2 f944 	bl	80002e0 <memchr>
 800e058:	b108      	cbz	r0, 800e05e <_printf_i+0x1e6>
 800e05a:	1b80      	subs	r0, r0, r6
 800e05c:	6060      	str	r0, [r4, #4]
 800e05e:	6863      	ldr	r3, [r4, #4]
 800e060:	6123      	str	r3, [r4, #16]
 800e062:	2300      	movs	r3, #0
 800e064:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e068:	e7aa      	b.n	800dfc0 <_printf_i+0x148>
 800e06a:	6923      	ldr	r3, [r4, #16]
 800e06c:	4632      	mov	r2, r6
 800e06e:	4649      	mov	r1, r9
 800e070:	4640      	mov	r0, r8
 800e072:	47d0      	blx	sl
 800e074:	3001      	adds	r0, #1
 800e076:	d0ad      	beq.n	800dfd4 <_printf_i+0x15c>
 800e078:	6823      	ldr	r3, [r4, #0]
 800e07a:	079b      	lsls	r3, r3, #30
 800e07c:	d413      	bmi.n	800e0a6 <_printf_i+0x22e>
 800e07e:	68e0      	ldr	r0, [r4, #12]
 800e080:	9b03      	ldr	r3, [sp, #12]
 800e082:	4298      	cmp	r0, r3
 800e084:	bfb8      	it	lt
 800e086:	4618      	movlt	r0, r3
 800e088:	e7a6      	b.n	800dfd8 <_printf_i+0x160>
 800e08a:	2301      	movs	r3, #1
 800e08c:	4632      	mov	r2, r6
 800e08e:	4649      	mov	r1, r9
 800e090:	4640      	mov	r0, r8
 800e092:	47d0      	blx	sl
 800e094:	3001      	adds	r0, #1
 800e096:	d09d      	beq.n	800dfd4 <_printf_i+0x15c>
 800e098:	3501      	adds	r5, #1
 800e09a:	68e3      	ldr	r3, [r4, #12]
 800e09c:	9903      	ldr	r1, [sp, #12]
 800e09e:	1a5b      	subs	r3, r3, r1
 800e0a0:	42ab      	cmp	r3, r5
 800e0a2:	dcf2      	bgt.n	800e08a <_printf_i+0x212>
 800e0a4:	e7eb      	b.n	800e07e <_printf_i+0x206>
 800e0a6:	2500      	movs	r5, #0
 800e0a8:	f104 0619 	add.w	r6, r4, #25
 800e0ac:	e7f5      	b.n	800e09a <_printf_i+0x222>
 800e0ae:	bf00      	nop
 800e0b0:	0801069a 	.word	0x0801069a
 800e0b4:	080106ab 	.word	0x080106ab

0800e0b8 <std>:
 800e0b8:	2300      	movs	r3, #0
 800e0ba:	b510      	push	{r4, lr}
 800e0bc:	4604      	mov	r4, r0
 800e0be:	e9c0 3300 	strd	r3, r3, [r0]
 800e0c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e0c6:	6083      	str	r3, [r0, #8]
 800e0c8:	8181      	strh	r1, [r0, #12]
 800e0ca:	6643      	str	r3, [r0, #100]	@ 0x64
 800e0cc:	81c2      	strh	r2, [r0, #14]
 800e0ce:	6183      	str	r3, [r0, #24]
 800e0d0:	4619      	mov	r1, r3
 800e0d2:	2208      	movs	r2, #8
 800e0d4:	305c      	adds	r0, #92	@ 0x5c
 800e0d6:	f000 f928 	bl	800e32a <memset>
 800e0da:	4b0d      	ldr	r3, [pc, #52]	@ (800e110 <std+0x58>)
 800e0dc:	6263      	str	r3, [r4, #36]	@ 0x24
 800e0de:	4b0d      	ldr	r3, [pc, #52]	@ (800e114 <std+0x5c>)
 800e0e0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e0e2:	4b0d      	ldr	r3, [pc, #52]	@ (800e118 <std+0x60>)
 800e0e4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e0e6:	4b0d      	ldr	r3, [pc, #52]	@ (800e11c <std+0x64>)
 800e0e8:	6323      	str	r3, [r4, #48]	@ 0x30
 800e0ea:	4b0d      	ldr	r3, [pc, #52]	@ (800e120 <std+0x68>)
 800e0ec:	6224      	str	r4, [r4, #32]
 800e0ee:	429c      	cmp	r4, r3
 800e0f0:	d006      	beq.n	800e100 <std+0x48>
 800e0f2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e0f6:	4294      	cmp	r4, r2
 800e0f8:	d002      	beq.n	800e100 <std+0x48>
 800e0fa:	33d0      	adds	r3, #208	@ 0xd0
 800e0fc:	429c      	cmp	r4, r3
 800e0fe:	d105      	bne.n	800e10c <std+0x54>
 800e100:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e108:	f000 b98c 	b.w	800e424 <__retarget_lock_init_recursive>
 800e10c:	bd10      	pop	{r4, pc}
 800e10e:	bf00      	nop
 800e110:	0800e2a5 	.word	0x0800e2a5
 800e114:	0800e2c7 	.word	0x0800e2c7
 800e118:	0800e2ff 	.word	0x0800e2ff
 800e11c:	0800e323 	.word	0x0800e323
 800e120:	2400086c 	.word	0x2400086c

0800e124 <stdio_exit_handler>:
 800e124:	4a02      	ldr	r2, [pc, #8]	@ (800e130 <stdio_exit_handler+0xc>)
 800e126:	4903      	ldr	r1, [pc, #12]	@ (800e134 <stdio_exit_handler+0x10>)
 800e128:	4803      	ldr	r0, [pc, #12]	@ (800e138 <stdio_exit_handler+0x14>)
 800e12a:	f000 b869 	b.w	800e200 <_fwalk_sglue>
 800e12e:	bf00      	nop
 800e130:	24000010 	.word	0x24000010
 800e134:	0800fca9 	.word	0x0800fca9
 800e138:	24000020 	.word	0x24000020

0800e13c <cleanup_stdio>:
 800e13c:	6841      	ldr	r1, [r0, #4]
 800e13e:	4b0c      	ldr	r3, [pc, #48]	@ (800e170 <cleanup_stdio+0x34>)
 800e140:	4299      	cmp	r1, r3
 800e142:	b510      	push	{r4, lr}
 800e144:	4604      	mov	r4, r0
 800e146:	d001      	beq.n	800e14c <cleanup_stdio+0x10>
 800e148:	f001 fdae 	bl	800fca8 <_fflush_r>
 800e14c:	68a1      	ldr	r1, [r4, #8]
 800e14e:	4b09      	ldr	r3, [pc, #36]	@ (800e174 <cleanup_stdio+0x38>)
 800e150:	4299      	cmp	r1, r3
 800e152:	d002      	beq.n	800e15a <cleanup_stdio+0x1e>
 800e154:	4620      	mov	r0, r4
 800e156:	f001 fda7 	bl	800fca8 <_fflush_r>
 800e15a:	68e1      	ldr	r1, [r4, #12]
 800e15c:	4b06      	ldr	r3, [pc, #24]	@ (800e178 <cleanup_stdio+0x3c>)
 800e15e:	4299      	cmp	r1, r3
 800e160:	d004      	beq.n	800e16c <cleanup_stdio+0x30>
 800e162:	4620      	mov	r0, r4
 800e164:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e168:	f001 bd9e 	b.w	800fca8 <_fflush_r>
 800e16c:	bd10      	pop	{r4, pc}
 800e16e:	bf00      	nop
 800e170:	2400086c 	.word	0x2400086c
 800e174:	240008d4 	.word	0x240008d4
 800e178:	2400093c 	.word	0x2400093c

0800e17c <global_stdio_init.part.0>:
 800e17c:	b510      	push	{r4, lr}
 800e17e:	4b0b      	ldr	r3, [pc, #44]	@ (800e1ac <global_stdio_init.part.0+0x30>)
 800e180:	4c0b      	ldr	r4, [pc, #44]	@ (800e1b0 <global_stdio_init.part.0+0x34>)
 800e182:	4a0c      	ldr	r2, [pc, #48]	@ (800e1b4 <global_stdio_init.part.0+0x38>)
 800e184:	601a      	str	r2, [r3, #0]
 800e186:	4620      	mov	r0, r4
 800e188:	2200      	movs	r2, #0
 800e18a:	2104      	movs	r1, #4
 800e18c:	f7ff ff94 	bl	800e0b8 <std>
 800e190:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e194:	2201      	movs	r2, #1
 800e196:	2109      	movs	r1, #9
 800e198:	f7ff ff8e 	bl	800e0b8 <std>
 800e19c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e1a0:	2202      	movs	r2, #2
 800e1a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e1a6:	2112      	movs	r1, #18
 800e1a8:	f7ff bf86 	b.w	800e0b8 <std>
 800e1ac:	240009a4 	.word	0x240009a4
 800e1b0:	2400086c 	.word	0x2400086c
 800e1b4:	0800e125 	.word	0x0800e125

0800e1b8 <__sfp_lock_acquire>:
 800e1b8:	4801      	ldr	r0, [pc, #4]	@ (800e1c0 <__sfp_lock_acquire+0x8>)
 800e1ba:	f000 b934 	b.w	800e426 <__retarget_lock_acquire_recursive>
 800e1be:	bf00      	nop
 800e1c0:	240009ad 	.word	0x240009ad

0800e1c4 <__sfp_lock_release>:
 800e1c4:	4801      	ldr	r0, [pc, #4]	@ (800e1cc <__sfp_lock_release+0x8>)
 800e1c6:	f000 b92f 	b.w	800e428 <__retarget_lock_release_recursive>
 800e1ca:	bf00      	nop
 800e1cc:	240009ad 	.word	0x240009ad

0800e1d0 <__sinit>:
 800e1d0:	b510      	push	{r4, lr}
 800e1d2:	4604      	mov	r4, r0
 800e1d4:	f7ff fff0 	bl	800e1b8 <__sfp_lock_acquire>
 800e1d8:	6a23      	ldr	r3, [r4, #32]
 800e1da:	b11b      	cbz	r3, 800e1e4 <__sinit+0x14>
 800e1dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e1e0:	f7ff bff0 	b.w	800e1c4 <__sfp_lock_release>
 800e1e4:	4b04      	ldr	r3, [pc, #16]	@ (800e1f8 <__sinit+0x28>)
 800e1e6:	6223      	str	r3, [r4, #32]
 800e1e8:	4b04      	ldr	r3, [pc, #16]	@ (800e1fc <__sinit+0x2c>)
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d1f5      	bne.n	800e1dc <__sinit+0xc>
 800e1f0:	f7ff ffc4 	bl	800e17c <global_stdio_init.part.0>
 800e1f4:	e7f2      	b.n	800e1dc <__sinit+0xc>
 800e1f6:	bf00      	nop
 800e1f8:	0800e13d 	.word	0x0800e13d
 800e1fc:	240009a4 	.word	0x240009a4

0800e200 <_fwalk_sglue>:
 800e200:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e204:	4607      	mov	r7, r0
 800e206:	4688      	mov	r8, r1
 800e208:	4614      	mov	r4, r2
 800e20a:	2600      	movs	r6, #0
 800e20c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e210:	f1b9 0901 	subs.w	r9, r9, #1
 800e214:	d505      	bpl.n	800e222 <_fwalk_sglue+0x22>
 800e216:	6824      	ldr	r4, [r4, #0]
 800e218:	2c00      	cmp	r4, #0
 800e21a:	d1f7      	bne.n	800e20c <_fwalk_sglue+0xc>
 800e21c:	4630      	mov	r0, r6
 800e21e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e222:	89ab      	ldrh	r3, [r5, #12]
 800e224:	2b01      	cmp	r3, #1
 800e226:	d907      	bls.n	800e238 <_fwalk_sglue+0x38>
 800e228:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e22c:	3301      	adds	r3, #1
 800e22e:	d003      	beq.n	800e238 <_fwalk_sglue+0x38>
 800e230:	4629      	mov	r1, r5
 800e232:	4638      	mov	r0, r7
 800e234:	47c0      	blx	r8
 800e236:	4306      	orrs	r6, r0
 800e238:	3568      	adds	r5, #104	@ 0x68
 800e23a:	e7e9      	b.n	800e210 <_fwalk_sglue+0x10>

0800e23c <sniprintf>:
 800e23c:	b40c      	push	{r2, r3}
 800e23e:	b530      	push	{r4, r5, lr}
 800e240:	4b17      	ldr	r3, [pc, #92]	@ (800e2a0 <sniprintf+0x64>)
 800e242:	1e0c      	subs	r4, r1, #0
 800e244:	681d      	ldr	r5, [r3, #0]
 800e246:	b09d      	sub	sp, #116	@ 0x74
 800e248:	da08      	bge.n	800e25c <sniprintf+0x20>
 800e24a:	238b      	movs	r3, #139	@ 0x8b
 800e24c:	602b      	str	r3, [r5, #0]
 800e24e:	f04f 30ff 	mov.w	r0, #4294967295
 800e252:	b01d      	add	sp, #116	@ 0x74
 800e254:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e258:	b002      	add	sp, #8
 800e25a:	4770      	bx	lr
 800e25c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800e260:	f8ad 3014 	strh.w	r3, [sp, #20]
 800e264:	bf14      	ite	ne
 800e266:	f104 33ff 	addne.w	r3, r4, #4294967295
 800e26a:	4623      	moveq	r3, r4
 800e26c:	9304      	str	r3, [sp, #16]
 800e26e:	9307      	str	r3, [sp, #28]
 800e270:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e274:	9002      	str	r0, [sp, #8]
 800e276:	9006      	str	r0, [sp, #24]
 800e278:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e27c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800e27e:	ab21      	add	r3, sp, #132	@ 0x84
 800e280:	a902      	add	r1, sp, #8
 800e282:	4628      	mov	r0, r5
 800e284:	9301      	str	r3, [sp, #4]
 800e286:	f001 fb8f 	bl	800f9a8 <_svfiprintf_r>
 800e28a:	1c43      	adds	r3, r0, #1
 800e28c:	bfbc      	itt	lt
 800e28e:	238b      	movlt	r3, #139	@ 0x8b
 800e290:	602b      	strlt	r3, [r5, #0]
 800e292:	2c00      	cmp	r4, #0
 800e294:	d0dd      	beq.n	800e252 <sniprintf+0x16>
 800e296:	9b02      	ldr	r3, [sp, #8]
 800e298:	2200      	movs	r2, #0
 800e29a:	701a      	strb	r2, [r3, #0]
 800e29c:	e7d9      	b.n	800e252 <sniprintf+0x16>
 800e29e:	bf00      	nop
 800e2a0:	2400001c 	.word	0x2400001c

0800e2a4 <__sread>:
 800e2a4:	b510      	push	{r4, lr}
 800e2a6:	460c      	mov	r4, r1
 800e2a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e2ac:	f000 f86c 	bl	800e388 <_read_r>
 800e2b0:	2800      	cmp	r0, #0
 800e2b2:	bfab      	itete	ge
 800e2b4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e2b6:	89a3      	ldrhlt	r3, [r4, #12]
 800e2b8:	181b      	addge	r3, r3, r0
 800e2ba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e2be:	bfac      	ite	ge
 800e2c0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e2c2:	81a3      	strhlt	r3, [r4, #12]
 800e2c4:	bd10      	pop	{r4, pc}

0800e2c6 <__swrite>:
 800e2c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2ca:	461f      	mov	r7, r3
 800e2cc:	898b      	ldrh	r3, [r1, #12]
 800e2ce:	05db      	lsls	r3, r3, #23
 800e2d0:	4605      	mov	r5, r0
 800e2d2:	460c      	mov	r4, r1
 800e2d4:	4616      	mov	r6, r2
 800e2d6:	d505      	bpl.n	800e2e4 <__swrite+0x1e>
 800e2d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e2dc:	2302      	movs	r3, #2
 800e2de:	2200      	movs	r2, #0
 800e2e0:	f000 f840 	bl	800e364 <_lseek_r>
 800e2e4:	89a3      	ldrh	r3, [r4, #12]
 800e2e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e2ea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e2ee:	81a3      	strh	r3, [r4, #12]
 800e2f0:	4632      	mov	r2, r6
 800e2f2:	463b      	mov	r3, r7
 800e2f4:	4628      	mov	r0, r5
 800e2f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e2fa:	f000 b857 	b.w	800e3ac <_write_r>

0800e2fe <__sseek>:
 800e2fe:	b510      	push	{r4, lr}
 800e300:	460c      	mov	r4, r1
 800e302:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e306:	f000 f82d 	bl	800e364 <_lseek_r>
 800e30a:	1c43      	adds	r3, r0, #1
 800e30c:	89a3      	ldrh	r3, [r4, #12]
 800e30e:	bf15      	itete	ne
 800e310:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e312:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e316:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e31a:	81a3      	strheq	r3, [r4, #12]
 800e31c:	bf18      	it	ne
 800e31e:	81a3      	strhne	r3, [r4, #12]
 800e320:	bd10      	pop	{r4, pc}

0800e322 <__sclose>:
 800e322:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e326:	f000 b80d 	b.w	800e344 <_close_r>

0800e32a <memset>:
 800e32a:	4402      	add	r2, r0
 800e32c:	4603      	mov	r3, r0
 800e32e:	4293      	cmp	r3, r2
 800e330:	d100      	bne.n	800e334 <memset+0xa>
 800e332:	4770      	bx	lr
 800e334:	f803 1b01 	strb.w	r1, [r3], #1
 800e338:	e7f9      	b.n	800e32e <memset+0x4>
	...

0800e33c <_localeconv_r>:
 800e33c:	4800      	ldr	r0, [pc, #0]	@ (800e340 <_localeconv_r+0x4>)
 800e33e:	4770      	bx	lr
 800e340:	2400015c 	.word	0x2400015c

0800e344 <_close_r>:
 800e344:	b538      	push	{r3, r4, r5, lr}
 800e346:	4d06      	ldr	r5, [pc, #24]	@ (800e360 <_close_r+0x1c>)
 800e348:	2300      	movs	r3, #0
 800e34a:	4604      	mov	r4, r0
 800e34c:	4608      	mov	r0, r1
 800e34e:	602b      	str	r3, [r5, #0]
 800e350:	f7f3 fe06 	bl	8001f60 <_close>
 800e354:	1c43      	adds	r3, r0, #1
 800e356:	d102      	bne.n	800e35e <_close_r+0x1a>
 800e358:	682b      	ldr	r3, [r5, #0]
 800e35a:	b103      	cbz	r3, 800e35e <_close_r+0x1a>
 800e35c:	6023      	str	r3, [r4, #0]
 800e35e:	bd38      	pop	{r3, r4, r5, pc}
 800e360:	240009a8 	.word	0x240009a8

0800e364 <_lseek_r>:
 800e364:	b538      	push	{r3, r4, r5, lr}
 800e366:	4d07      	ldr	r5, [pc, #28]	@ (800e384 <_lseek_r+0x20>)
 800e368:	4604      	mov	r4, r0
 800e36a:	4608      	mov	r0, r1
 800e36c:	4611      	mov	r1, r2
 800e36e:	2200      	movs	r2, #0
 800e370:	602a      	str	r2, [r5, #0]
 800e372:	461a      	mov	r2, r3
 800e374:	f7f3 fe1b 	bl	8001fae <_lseek>
 800e378:	1c43      	adds	r3, r0, #1
 800e37a:	d102      	bne.n	800e382 <_lseek_r+0x1e>
 800e37c:	682b      	ldr	r3, [r5, #0]
 800e37e:	b103      	cbz	r3, 800e382 <_lseek_r+0x1e>
 800e380:	6023      	str	r3, [r4, #0]
 800e382:	bd38      	pop	{r3, r4, r5, pc}
 800e384:	240009a8 	.word	0x240009a8

0800e388 <_read_r>:
 800e388:	b538      	push	{r3, r4, r5, lr}
 800e38a:	4d07      	ldr	r5, [pc, #28]	@ (800e3a8 <_read_r+0x20>)
 800e38c:	4604      	mov	r4, r0
 800e38e:	4608      	mov	r0, r1
 800e390:	4611      	mov	r1, r2
 800e392:	2200      	movs	r2, #0
 800e394:	602a      	str	r2, [r5, #0]
 800e396:	461a      	mov	r2, r3
 800e398:	f7f3 fda9 	bl	8001eee <_read>
 800e39c:	1c43      	adds	r3, r0, #1
 800e39e:	d102      	bne.n	800e3a6 <_read_r+0x1e>
 800e3a0:	682b      	ldr	r3, [r5, #0]
 800e3a2:	b103      	cbz	r3, 800e3a6 <_read_r+0x1e>
 800e3a4:	6023      	str	r3, [r4, #0]
 800e3a6:	bd38      	pop	{r3, r4, r5, pc}
 800e3a8:	240009a8 	.word	0x240009a8

0800e3ac <_write_r>:
 800e3ac:	b538      	push	{r3, r4, r5, lr}
 800e3ae:	4d07      	ldr	r5, [pc, #28]	@ (800e3cc <_write_r+0x20>)
 800e3b0:	4604      	mov	r4, r0
 800e3b2:	4608      	mov	r0, r1
 800e3b4:	4611      	mov	r1, r2
 800e3b6:	2200      	movs	r2, #0
 800e3b8:	602a      	str	r2, [r5, #0]
 800e3ba:	461a      	mov	r2, r3
 800e3bc:	f7f3 fdb4 	bl	8001f28 <_write>
 800e3c0:	1c43      	adds	r3, r0, #1
 800e3c2:	d102      	bne.n	800e3ca <_write_r+0x1e>
 800e3c4:	682b      	ldr	r3, [r5, #0]
 800e3c6:	b103      	cbz	r3, 800e3ca <_write_r+0x1e>
 800e3c8:	6023      	str	r3, [r4, #0]
 800e3ca:	bd38      	pop	{r3, r4, r5, pc}
 800e3cc:	240009a8 	.word	0x240009a8

0800e3d0 <__errno>:
 800e3d0:	4b01      	ldr	r3, [pc, #4]	@ (800e3d8 <__errno+0x8>)
 800e3d2:	6818      	ldr	r0, [r3, #0]
 800e3d4:	4770      	bx	lr
 800e3d6:	bf00      	nop
 800e3d8:	2400001c 	.word	0x2400001c

0800e3dc <__libc_init_array>:
 800e3dc:	b570      	push	{r4, r5, r6, lr}
 800e3de:	4d0d      	ldr	r5, [pc, #52]	@ (800e414 <__libc_init_array+0x38>)
 800e3e0:	4c0d      	ldr	r4, [pc, #52]	@ (800e418 <__libc_init_array+0x3c>)
 800e3e2:	1b64      	subs	r4, r4, r5
 800e3e4:	10a4      	asrs	r4, r4, #2
 800e3e6:	2600      	movs	r6, #0
 800e3e8:	42a6      	cmp	r6, r4
 800e3ea:	d109      	bne.n	800e400 <__libc_init_array+0x24>
 800e3ec:	4d0b      	ldr	r5, [pc, #44]	@ (800e41c <__libc_init_array+0x40>)
 800e3ee:	4c0c      	ldr	r4, [pc, #48]	@ (800e420 <__libc_init_array+0x44>)
 800e3f0:	f001 fff8 	bl	80103e4 <_init>
 800e3f4:	1b64      	subs	r4, r4, r5
 800e3f6:	10a4      	asrs	r4, r4, #2
 800e3f8:	2600      	movs	r6, #0
 800e3fa:	42a6      	cmp	r6, r4
 800e3fc:	d105      	bne.n	800e40a <__libc_init_array+0x2e>
 800e3fe:	bd70      	pop	{r4, r5, r6, pc}
 800e400:	f855 3b04 	ldr.w	r3, [r5], #4
 800e404:	4798      	blx	r3
 800e406:	3601      	adds	r6, #1
 800e408:	e7ee      	b.n	800e3e8 <__libc_init_array+0xc>
 800e40a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e40e:	4798      	blx	r3
 800e410:	3601      	adds	r6, #1
 800e412:	e7f2      	b.n	800e3fa <__libc_init_array+0x1e>
 800e414:	08010a00 	.word	0x08010a00
 800e418:	08010a00 	.word	0x08010a00
 800e41c:	08010a00 	.word	0x08010a00
 800e420:	08010a04 	.word	0x08010a04

0800e424 <__retarget_lock_init_recursive>:
 800e424:	4770      	bx	lr

0800e426 <__retarget_lock_acquire_recursive>:
 800e426:	4770      	bx	lr

0800e428 <__retarget_lock_release_recursive>:
 800e428:	4770      	bx	lr

0800e42a <quorem>:
 800e42a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e42e:	6903      	ldr	r3, [r0, #16]
 800e430:	690c      	ldr	r4, [r1, #16]
 800e432:	42a3      	cmp	r3, r4
 800e434:	4607      	mov	r7, r0
 800e436:	db7e      	blt.n	800e536 <quorem+0x10c>
 800e438:	3c01      	subs	r4, #1
 800e43a:	f101 0814 	add.w	r8, r1, #20
 800e43e:	00a3      	lsls	r3, r4, #2
 800e440:	f100 0514 	add.w	r5, r0, #20
 800e444:	9300      	str	r3, [sp, #0]
 800e446:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e44a:	9301      	str	r3, [sp, #4]
 800e44c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e450:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e454:	3301      	adds	r3, #1
 800e456:	429a      	cmp	r2, r3
 800e458:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e45c:	fbb2 f6f3 	udiv	r6, r2, r3
 800e460:	d32e      	bcc.n	800e4c0 <quorem+0x96>
 800e462:	f04f 0a00 	mov.w	sl, #0
 800e466:	46c4      	mov	ip, r8
 800e468:	46ae      	mov	lr, r5
 800e46a:	46d3      	mov	fp, sl
 800e46c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e470:	b298      	uxth	r0, r3
 800e472:	fb06 a000 	mla	r0, r6, r0, sl
 800e476:	0c02      	lsrs	r2, r0, #16
 800e478:	0c1b      	lsrs	r3, r3, #16
 800e47a:	fb06 2303 	mla	r3, r6, r3, r2
 800e47e:	f8de 2000 	ldr.w	r2, [lr]
 800e482:	b280      	uxth	r0, r0
 800e484:	b292      	uxth	r2, r2
 800e486:	1a12      	subs	r2, r2, r0
 800e488:	445a      	add	r2, fp
 800e48a:	f8de 0000 	ldr.w	r0, [lr]
 800e48e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e492:	b29b      	uxth	r3, r3
 800e494:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800e498:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800e49c:	b292      	uxth	r2, r2
 800e49e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800e4a2:	45e1      	cmp	r9, ip
 800e4a4:	f84e 2b04 	str.w	r2, [lr], #4
 800e4a8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800e4ac:	d2de      	bcs.n	800e46c <quorem+0x42>
 800e4ae:	9b00      	ldr	r3, [sp, #0]
 800e4b0:	58eb      	ldr	r3, [r5, r3]
 800e4b2:	b92b      	cbnz	r3, 800e4c0 <quorem+0x96>
 800e4b4:	9b01      	ldr	r3, [sp, #4]
 800e4b6:	3b04      	subs	r3, #4
 800e4b8:	429d      	cmp	r5, r3
 800e4ba:	461a      	mov	r2, r3
 800e4bc:	d32f      	bcc.n	800e51e <quorem+0xf4>
 800e4be:	613c      	str	r4, [r7, #16]
 800e4c0:	4638      	mov	r0, r7
 800e4c2:	f001 f90d 	bl	800f6e0 <__mcmp>
 800e4c6:	2800      	cmp	r0, #0
 800e4c8:	db25      	blt.n	800e516 <quorem+0xec>
 800e4ca:	4629      	mov	r1, r5
 800e4cc:	2000      	movs	r0, #0
 800e4ce:	f858 2b04 	ldr.w	r2, [r8], #4
 800e4d2:	f8d1 c000 	ldr.w	ip, [r1]
 800e4d6:	fa1f fe82 	uxth.w	lr, r2
 800e4da:	fa1f f38c 	uxth.w	r3, ip
 800e4de:	eba3 030e 	sub.w	r3, r3, lr
 800e4e2:	4403      	add	r3, r0
 800e4e4:	0c12      	lsrs	r2, r2, #16
 800e4e6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800e4ea:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800e4ee:	b29b      	uxth	r3, r3
 800e4f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e4f4:	45c1      	cmp	r9, r8
 800e4f6:	f841 3b04 	str.w	r3, [r1], #4
 800e4fa:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e4fe:	d2e6      	bcs.n	800e4ce <quorem+0xa4>
 800e500:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e504:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e508:	b922      	cbnz	r2, 800e514 <quorem+0xea>
 800e50a:	3b04      	subs	r3, #4
 800e50c:	429d      	cmp	r5, r3
 800e50e:	461a      	mov	r2, r3
 800e510:	d30b      	bcc.n	800e52a <quorem+0x100>
 800e512:	613c      	str	r4, [r7, #16]
 800e514:	3601      	adds	r6, #1
 800e516:	4630      	mov	r0, r6
 800e518:	b003      	add	sp, #12
 800e51a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e51e:	6812      	ldr	r2, [r2, #0]
 800e520:	3b04      	subs	r3, #4
 800e522:	2a00      	cmp	r2, #0
 800e524:	d1cb      	bne.n	800e4be <quorem+0x94>
 800e526:	3c01      	subs	r4, #1
 800e528:	e7c6      	b.n	800e4b8 <quorem+0x8e>
 800e52a:	6812      	ldr	r2, [r2, #0]
 800e52c:	3b04      	subs	r3, #4
 800e52e:	2a00      	cmp	r2, #0
 800e530:	d1ef      	bne.n	800e512 <quorem+0xe8>
 800e532:	3c01      	subs	r4, #1
 800e534:	e7ea      	b.n	800e50c <quorem+0xe2>
 800e536:	2000      	movs	r0, #0
 800e538:	e7ee      	b.n	800e518 <quorem+0xee>
 800e53a:	0000      	movs	r0, r0
 800e53c:	0000      	movs	r0, r0
	...

0800e540 <_dtoa_r>:
 800e540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e544:	ed2d 8b02 	vpush	{d8}
 800e548:	69c7      	ldr	r7, [r0, #28]
 800e54a:	b091      	sub	sp, #68	@ 0x44
 800e54c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800e550:	ec55 4b10 	vmov	r4, r5, d0
 800e554:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800e556:	9107      	str	r1, [sp, #28]
 800e558:	4681      	mov	r9, r0
 800e55a:	9209      	str	r2, [sp, #36]	@ 0x24
 800e55c:	930d      	str	r3, [sp, #52]	@ 0x34
 800e55e:	b97f      	cbnz	r7, 800e580 <_dtoa_r+0x40>
 800e560:	2010      	movs	r0, #16
 800e562:	f000 fd8d 	bl	800f080 <malloc>
 800e566:	4602      	mov	r2, r0
 800e568:	f8c9 001c 	str.w	r0, [r9, #28]
 800e56c:	b920      	cbnz	r0, 800e578 <_dtoa_r+0x38>
 800e56e:	4ba0      	ldr	r3, [pc, #640]	@ (800e7f0 <_dtoa_r+0x2b0>)
 800e570:	21ef      	movs	r1, #239	@ 0xef
 800e572:	48a0      	ldr	r0, [pc, #640]	@ (800e7f4 <_dtoa_r+0x2b4>)
 800e574:	f001 fbf8 	bl	800fd68 <__assert_func>
 800e578:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800e57c:	6007      	str	r7, [r0, #0]
 800e57e:	60c7      	str	r7, [r0, #12]
 800e580:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800e584:	6819      	ldr	r1, [r3, #0]
 800e586:	b159      	cbz	r1, 800e5a0 <_dtoa_r+0x60>
 800e588:	685a      	ldr	r2, [r3, #4]
 800e58a:	604a      	str	r2, [r1, #4]
 800e58c:	2301      	movs	r3, #1
 800e58e:	4093      	lsls	r3, r2
 800e590:	608b      	str	r3, [r1, #8]
 800e592:	4648      	mov	r0, r9
 800e594:	f000 fe6a 	bl	800f26c <_Bfree>
 800e598:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800e59c:	2200      	movs	r2, #0
 800e59e:	601a      	str	r2, [r3, #0]
 800e5a0:	1e2b      	subs	r3, r5, #0
 800e5a2:	bfbb      	ittet	lt
 800e5a4:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800e5a8:	9303      	strlt	r3, [sp, #12]
 800e5aa:	2300      	movge	r3, #0
 800e5ac:	2201      	movlt	r2, #1
 800e5ae:	bfac      	ite	ge
 800e5b0:	6033      	strge	r3, [r6, #0]
 800e5b2:	6032      	strlt	r2, [r6, #0]
 800e5b4:	4b90      	ldr	r3, [pc, #576]	@ (800e7f8 <_dtoa_r+0x2b8>)
 800e5b6:	9e03      	ldr	r6, [sp, #12]
 800e5b8:	43b3      	bics	r3, r6
 800e5ba:	d110      	bne.n	800e5de <_dtoa_r+0x9e>
 800e5bc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e5be:	f242 730f 	movw	r3, #9999	@ 0x270f
 800e5c2:	6013      	str	r3, [r2, #0]
 800e5c4:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800e5c8:	4323      	orrs	r3, r4
 800e5ca:	f000 84de 	beq.w	800ef8a <_dtoa_r+0xa4a>
 800e5ce:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e5d0:	4f8a      	ldr	r7, [pc, #552]	@ (800e7fc <_dtoa_r+0x2bc>)
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	f000 84e0 	beq.w	800ef98 <_dtoa_r+0xa58>
 800e5d8:	1cfb      	adds	r3, r7, #3
 800e5da:	f000 bcdb 	b.w	800ef94 <_dtoa_r+0xa54>
 800e5de:	ed9d 8b02 	vldr	d8, [sp, #8]
 800e5e2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800e5e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5ea:	d10a      	bne.n	800e602 <_dtoa_r+0xc2>
 800e5ec:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e5ee:	2301      	movs	r3, #1
 800e5f0:	6013      	str	r3, [r2, #0]
 800e5f2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e5f4:	b113      	cbz	r3, 800e5fc <_dtoa_r+0xbc>
 800e5f6:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800e5f8:	4b81      	ldr	r3, [pc, #516]	@ (800e800 <_dtoa_r+0x2c0>)
 800e5fa:	6013      	str	r3, [r2, #0]
 800e5fc:	4f81      	ldr	r7, [pc, #516]	@ (800e804 <_dtoa_r+0x2c4>)
 800e5fe:	f000 bccb 	b.w	800ef98 <_dtoa_r+0xa58>
 800e602:	aa0e      	add	r2, sp, #56	@ 0x38
 800e604:	a90f      	add	r1, sp, #60	@ 0x3c
 800e606:	4648      	mov	r0, r9
 800e608:	eeb0 0b48 	vmov.f64	d0, d8
 800e60c:	f001 f918 	bl	800f840 <__d2b>
 800e610:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800e614:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e616:	9001      	str	r0, [sp, #4]
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d045      	beq.n	800e6a8 <_dtoa_r+0x168>
 800e61c:	eeb0 7b48 	vmov.f64	d7, d8
 800e620:	ee18 1a90 	vmov	r1, s17
 800e624:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800e628:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800e62c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800e630:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800e634:	2500      	movs	r5, #0
 800e636:	ee07 1a90 	vmov	s15, r1
 800e63a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800e63e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800e7d8 <_dtoa_r+0x298>
 800e642:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e646:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800e7e0 <_dtoa_r+0x2a0>
 800e64a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800e64e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800e7e8 <_dtoa_r+0x2a8>
 800e652:	ee07 3a90 	vmov	s15, r3
 800e656:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800e65a:	eeb0 7b46 	vmov.f64	d7, d6
 800e65e:	eea4 7b05 	vfma.f64	d7, d4, d5
 800e662:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800e666:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800e66a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e66e:	ee16 8a90 	vmov	r8, s13
 800e672:	d508      	bpl.n	800e686 <_dtoa_r+0x146>
 800e674:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800e678:	eeb4 6b47 	vcmp.f64	d6, d7
 800e67c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e680:	bf18      	it	ne
 800e682:	f108 38ff 	addne.w	r8, r8, #4294967295
 800e686:	f1b8 0f16 	cmp.w	r8, #22
 800e68a:	d82b      	bhi.n	800e6e4 <_dtoa_r+0x1a4>
 800e68c:	495e      	ldr	r1, [pc, #376]	@ (800e808 <_dtoa_r+0x2c8>)
 800e68e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800e692:	ed91 7b00 	vldr	d7, [r1]
 800e696:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800e69a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e69e:	d501      	bpl.n	800e6a4 <_dtoa_r+0x164>
 800e6a0:	f108 38ff 	add.w	r8, r8, #4294967295
 800e6a4:	2100      	movs	r1, #0
 800e6a6:	e01e      	b.n	800e6e6 <_dtoa_r+0x1a6>
 800e6a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e6aa:	4413      	add	r3, r2
 800e6ac:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800e6b0:	2920      	cmp	r1, #32
 800e6b2:	bfc1      	itttt	gt
 800e6b4:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800e6b8:	408e      	lslgt	r6, r1
 800e6ba:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800e6be:	fa24 f101 	lsrgt.w	r1, r4, r1
 800e6c2:	bfd6      	itet	le
 800e6c4:	f1c1 0120 	rsble	r1, r1, #32
 800e6c8:	4331      	orrgt	r1, r6
 800e6ca:	fa04 f101 	lslle.w	r1, r4, r1
 800e6ce:	ee07 1a90 	vmov	s15, r1
 800e6d2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800e6d6:	3b01      	subs	r3, #1
 800e6d8:	ee17 1a90 	vmov	r1, s15
 800e6dc:	2501      	movs	r5, #1
 800e6de:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800e6e2:	e7a8      	b.n	800e636 <_dtoa_r+0xf6>
 800e6e4:	2101      	movs	r1, #1
 800e6e6:	1ad2      	subs	r2, r2, r3
 800e6e8:	1e53      	subs	r3, r2, #1
 800e6ea:	9306      	str	r3, [sp, #24]
 800e6ec:	bf45      	ittet	mi
 800e6ee:	f1c2 0301 	rsbmi	r3, r2, #1
 800e6f2:	9305      	strmi	r3, [sp, #20]
 800e6f4:	2300      	movpl	r3, #0
 800e6f6:	2300      	movmi	r3, #0
 800e6f8:	bf4c      	ite	mi
 800e6fa:	9306      	strmi	r3, [sp, #24]
 800e6fc:	9305      	strpl	r3, [sp, #20]
 800e6fe:	f1b8 0f00 	cmp.w	r8, #0
 800e702:	910c      	str	r1, [sp, #48]	@ 0x30
 800e704:	db18      	blt.n	800e738 <_dtoa_r+0x1f8>
 800e706:	9b06      	ldr	r3, [sp, #24]
 800e708:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800e70c:	4443      	add	r3, r8
 800e70e:	9306      	str	r3, [sp, #24]
 800e710:	2300      	movs	r3, #0
 800e712:	9a07      	ldr	r2, [sp, #28]
 800e714:	2a09      	cmp	r2, #9
 800e716:	d849      	bhi.n	800e7ac <_dtoa_r+0x26c>
 800e718:	2a05      	cmp	r2, #5
 800e71a:	bfc4      	itt	gt
 800e71c:	3a04      	subgt	r2, #4
 800e71e:	9207      	strgt	r2, [sp, #28]
 800e720:	9a07      	ldr	r2, [sp, #28]
 800e722:	f1a2 0202 	sub.w	r2, r2, #2
 800e726:	bfcc      	ite	gt
 800e728:	2400      	movgt	r4, #0
 800e72a:	2401      	movle	r4, #1
 800e72c:	2a03      	cmp	r2, #3
 800e72e:	d848      	bhi.n	800e7c2 <_dtoa_r+0x282>
 800e730:	e8df f002 	tbb	[pc, r2]
 800e734:	3a2c2e0b 	.word	0x3a2c2e0b
 800e738:	9b05      	ldr	r3, [sp, #20]
 800e73a:	2200      	movs	r2, #0
 800e73c:	eba3 0308 	sub.w	r3, r3, r8
 800e740:	9305      	str	r3, [sp, #20]
 800e742:	920a      	str	r2, [sp, #40]	@ 0x28
 800e744:	f1c8 0300 	rsb	r3, r8, #0
 800e748:	e7e3      	b.n	800e712 <_dtoa_r+0x1d2>
 800e74a:	2200      	movs	r2, #0
 800e74c:	9208      	str	r2, [sp, #32]
 800e74e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e750:	2a00      	cmp	r2, #0
 800e752:	dc39      	bgt.n	800e7c8 <_dtoa_r+0x288>
 800e754:	f04f 0b01 	mov.w	fp, #1
 800e758:	46da      	mov	sl, fp
 800e75a:	465a      	mov	r2, fp
 800e75c:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800e760:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800e764:	2100      	movs	r1, #0
 800e766:	2004      	movs	r0, #4
 800e768:	f100 0614 	add.w	r6, r0, #20
 800e76c:	4296      	cmp	r6, r2
 800e76e:	d930      	bls.n	800e7d2 <_dtoa_r+0x292>
 800e770:	6079      	str	r1, [r7, #4]
 800e772:	4648      	mov	r0, r9
 800e774:	9304      	str	r3, [sp, #16]
 800e776:	f000 fd39 	bl	800f1ec <_Balloc>
 800e77a:	9b04      	ldr	r3, [sp, #16]
 800e77c:	4607      	mov	r7, r0
 800e77e:	2800      	cmp	r0, #0
 800e780:	d146      	bne.n	800e810 <_dtoa_r+0x2d0>
 800e782:	4b22      	ldr	r3, [pc, #136]	@ (800e80c <_dtoa_r+0x2cc>)
 800e784:	4602      	mov	r2, r0
 800e786:	f240 11af 	movw	r1, #431	@ 0x1af
 800e78a:	e6f2      	b.n	800e572 <_dtoa_r+0x32>
 800e78c:	2201      	movs	r2, #1
 800e78e:	e7dd      	b.n	800e74c <_dtoa_r+0x20c>
 800e790:	2200      	movs	r2, #0
 800e792:	9208      	str	r2, [sp, #32]
 800e794:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e796:	eb08 0b02 	add.w	fp, r8, r2
 800e79a:	f10b 0a01 	add.w	sl, fp, #1
 800e79e:	4652      	mov	r2, sl
 800e7a0:	2a01      	cmp	r2, #1
 800e7a2:	bfb8      	it	lt
 800e7a4:	2201      	movlt	r2, #1
 800e7a6:	e7db      	b.n	800e760 <_dtoa_r+0x220>
 800e7a8:	2201      	movs	r2, #1
 800e7aa:	e7f2      	b.n	800e792 <_dtoa_r+0x252>
 800e7ac:	2401      	movs	r4, #1
 800e7ae:	2200      	movs	r2, #0
 800e7b0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800e7b4:	f04f 3bff 	mov.w	fp, #4294967295
 800e7b8:	2100      	movs	r1, #0
 800e7ba:	46da      	mov	sl, fp
 800e7bc:	2212      	movs	r2, #18
 800e7be:	9109      	str	r1, [sp, #36]	@ 0x24
 800e7c0:	e7ce      	b.n	800e760 <_dtoa_r+0x220>
 800e7c2:	2201      	movs	r2, #1
 800e7c4:	9208      	str	r2, [sp, #32]
 800e7c6:	e7f5      	b.n	800e7b4 <_dtoa_r+0x274>
 800e7c8:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800e7cc:	46da      	mov	sl, fp
 800e7ce:	465a      	mov	r2, fp
 800e7d0:	e7c6      	b.n	800e760 <_dtoa_r+0x220>
 800e7d2:	3101      	adds	r1, #1
 800e7d4:	0040      	lsls	r0, r0, #1
 800e7d6:	e7c7      	b.n	800e768 <_dtoa_r+0x228>
 800e7d8:	636f4361 	.word	0x636f4361
 800e7dc:	3fd287a7 	.word	0x3fd287a7
 800e7e0:	8b60c8b3 	.word	0x8b60c8b3
 800e7e4:	3fc68a28 	.word	0x3fc68a28
 800e7e8:	509f79fb 	.word	0x509f79fb
 800e7ec:	3fd34413 	.word	0x3fd34413
 800e7f0:	080106c9 	.word	0x080106c9
 800e7f4:	080106e0 	.word	0x080106e0
 800e7f8:	7ff00000 	.word	0x7ff00000
 800e7fc:	080106c5 	.word	0x080106c5
 800e800:	08010699 	.word	0x08010699
 800e804:	08010698 	.word	0x08010698
 800e808:	080107d8 	.word	0x080107d8
 800e80c:	08010738 	.word	0x08010738
 800e810:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800e814:	f1ba 0f0e 	cmp.w	sl, #14
 800e818:	6010      	str	r0, [r2, #0]
 800e81a:	d86f      	bhi.n	800e8fc <_dtoa_r+0x3bc>
 800e81c:	2c00      	cmp	r4, #0
 800e81e:	d06d      	beq.n	800e8fc <_dtoa_r+0x3bc>
 800e820:	f1b8 0f00 	cmp.w	r8, #0
 800e824:	f340 80c2 	ble.w	800e9ac <_dtoa_r+0x46c>
 800e828:	4aca      	ldr	r2, [pc, #808]	@ (800eb54 <_dtoa_r+0x614>)
 800e82a:	f008 010f 	and.w	r1, r8, #15
 800e82e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800e832:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800e836:	ed92 7b00 	vldr	d7, [r2]
 800e83a:	ea4f 1128 	mov.w	r1, r8, asr #4
 800e83e:	f000 80a9 	beq.w	800e994 <_dtoa_r+0x454>
 800e842:	4ac5      	ldr	r2, [pc, #788]	@ (800eb58 <_dtoa_r+0x618>)
 800e844:	ed92 6b08 	vldr	d6, [r2, #32]
 800e848:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800e84c:	ed8d 6b02 	vstr	d6, [sp, #8]
 800e850:	f001 010f 	and.w	r1, r1, #15
 800e854:	2203      	movs	r2, #3
 800e856:	48c0      	ldr	r0, [pc, #768]	@ (800eb58 <_dtoa_r+0x618>)
 800e858:	2900      	cmp	r1, #0
 800e85a:	f040 809d 	bne.w	800e998 <_dtoa_r+0x458>
 800e85e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800e862:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800e866:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e86a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800e86c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e870:	2900      	cmp	r1, #0
 800e872:	f000 80c1 	beq.w	800e9f8 <_dtoa_r+0x4b8>
 800e876:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800e87a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800e87e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e882:	f140 80b9 	bpl.w	800e9f8 <_dtoa_r+0x4b8>
 800e886:	f1ba 0f00 	cmp.w	sl, #0
 800e88a:	f000 80b5 	beq.w	800e9f8 <_dtoa_r+0x4b8>
 800e88e:	f1bb 0f00 	cmp.w	fp, #0
 800e892:	dd31      	ble.n	800e8f8 <_dtoa_r+0x3b8>
 800e894:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800e898:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e89c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e8a0:	f108 31ff 	add.w	r1, r8, #4294967295
 800e8a4:	9104      	str	r1, [sp, #16]
 800e8a6:	3201      	adds	r2, #1
 800e8a8:	465c      	mov	r4, fp
 800e8aa:	ed9d 6b02 	vldr	d6, [sp, #8]
 800e8ae:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800e8b2:	ee07 2a90 	vmov	s15, r2
 800e8b6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e8ba:	eea7 5b06 	vfma.f64	d5, d7, d6
 800e8be:	ee15 2a90 	vmov	r2, s11
 800e8c2:	ec51 0b15 	vmov	r0, r1, d5
 800e8c6:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800e8ca:	2c00      	cmp	r4, #0
 800e8cc:	f040 8098 	bne.w	800ea00 <_dtoa_r+0x4c0>
 800e8d0:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800e8d4:	ee36 6b47 	vsub.f64	d6, d6, d7
 800e8d8:	ec41 0b17 	vmov	d7, r0, r1
 800e8dc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e8e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8e4:	f300 8261 	bgt.w	800edaa <_dtoa_r+0x86a>
 800e8e8:	eeb1 7b47 	vneg.f64	d7, d7
 800e8ec:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e8f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8f4:	f100 80f5 	bmi.w	800eae2 <_dtoa_r+0x5a2>
 800e8f8:	ed8d 8b02 	vstr	d8, [sp, #8]
 800e8fc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800e8fe:	2a00      	cmp	r2, #0
 800e900:	f2c0 812c 	blt.w	800eb5c <_dtoa_r+0x61c>
 800e904:	f1b8 0f0e 	cmp.w	r8, #14
 800e908:	f300 8128 	bgt.w	800eb5c <_dtoa_r+0x61c>
 800e90c:	4b91      	ldr	r3, [pc, #580]	@ (800eb54 <_dtoa_r+0x614>)
 800e90e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800e912:	ed93 6b00 	vldr	d6, [r3]
 800e916:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e918:	2b00      	cmp	r3, #0
 800e91a:	da03      	bge.n	800e924 <_dtoa_r+0x3e4>
 800e91c:	f1ba 0f00 	cmp.w	sl, #0
 800e920:	f340 80d2 	ble.w	800eac8 <_dtoa_r+0x588>
 800e924:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800e928:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e92c:	463e      	mov	r6, r7
 800e92e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800e932:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800e936:	ee15 3a10 	vmov	r3, s10
 800e93a:	3330      	adds	r3, #48	@ 0x30
 800e93c:	f806 3b01 	strb.w	r3, [r6], #1
 800e940:	1bf3      	subs	r3, r6, r7
 800e942:	459a      	cmp	sl, r3
 800e944:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800e948:	eea3 7b46 	vfms.f64	d7, d3, d6
 800e94c:	f040 80f8 	bne.w	800eb40 <_dtoa_r+0x600>
 800e950:	ee37 7b07 	vadd.f64	d7, d7, d7
 800e954:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800e958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e95c:	f300 80dd 	bgt.w	800eb1a <_dtoa_r+0x5da>
 800e960:	eeb4 7b46 	vcmp.f64	d7, d6
 800e964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e968:	d104      	bne.n	800e974 <_dtoa_r+0x434>
 800e96a:	ee15 3a10 	vmov	r3, s10
 800e96e:	07db      	lsls	r3, r3, #31
 800e970:	f100 80d3 	bmi.w	800eb1a <_dtoa_r+0x5da>
 800e974:	9901      	ldr	r1, [sp, #4]
 800e976:	4648      	mov	r0, r9
 800e978:	f000 fc78 	bl	800f26c <_Bfree>
 800e97c:	2300      	movs	r3, #0
 800e97e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e980:	7033      	strb	r3, [r6, #0]
 800e982:	f108 0301 	add.w	r3, r8, #1
 800e986:	6013      	str	r3, [r2, #0]
 800e988:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	f000 8304 	beq.w	800ef98 <_dtoa_r+0xa58>
 800e990:	601e      	str	r6, [r3, #0]
 800e992:	e301      	b.n	800ef98 <_dtoa_r+0xa58>
 800e994:	2202      	movs	r2, #2
 800e996:	e75e      	b.n	800e856 <_dtoa_r+0x316>
 800e998:	07cc      	lsls	r4, r1, #31
 800e99a:	d504      	bpl.n	800e9a6 <_dtoa_r+0x466>
 800e99c:	ed90 6b00 	vldr	d6, [r0]
 800e9a0:	3201      	adds	r2, #1
 800e9a2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e9a6:	1049      	asrs	r1, r1, #1
 800e9a8:	3008      	adds	r0, #8
 800e9aa:	e755      	b.n	800e858 <_dtoa_r+0x318>
 800e9ac:	d022      	beq.n	800e9f4 <_dtoa_r+0x4b4>
 800e9ae:	f1c8 0100 	rsb	r1, r8, #0
 800e9b2:	4a68      	ldr	r2, [pc, #416]	@ (800eb54 <_dtoa_r+0x614>)
 800e9b4:	f001 000f 	and.w	r0, r1, #15
 800e9b8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800e9bc:	ed92 7b00 	vldr	d7, [r2]
 800e9c0:	ee28 7b07 	vmul.f64	d7, d8, d7
 800e9c4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e9c8:	4863      	ldr	r0, [pc, #396]	@ (800eb58 <_dtoa_r+0x618>)
 800e9ca:	1109      	asrs	r1, r1, #4
 800e9cc:	2400      	movs	r4, #0
 800e9ce:	2202      	movs	r2, #2
 800e9d0:	b929      	cbnz	r1, 800e9de <_dtoa_r+0x49e>
 800e9d2:	2c00      	cmp	r4, #0
 800e9d4:	f43f af49 	beq.w	800e86a <_dtoa_r+0x32a>
 800e9d8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e9dc:	e745      	b.n	800e86a <_dtoa_r+0x32a>
 800e9de:	07ce      	lsls	r6, r1, #31
 800e9e0:	d505      	bpl.n	800e9ee <_dtoa_r+0x4ae>
 800e9e2:	ed90 6b00 	vldr	d6, [r0]
 800e9e6:	3201      	adds	r2, #1
 800e9e8:	2401      	movs	r4, #1
 800e9ea:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e9ee:	1049      	asrs	r1, r1, #1
 800e9f0:	3008      	adds	r0, #8
 800e9f2:	e7ed      	b.n	800e9d0 <_dtoa_r+0x490>
 800e9f4:	2202      	movs	r2, #2
 800e9f6:	e738      	b.n	800e86a <_dtoa_r+0x32a>
 800e9f8:	f8cd 8010 	str.w	r8, [sp, #16]
 800e9fc:	4654      	mov	r4, sl
 800e9fe:	e754      	b.n	800e8aa <_dtoa_r+0x36a>
 800ea00:	4a54      	ldr	r2, [pc, #336]	@ (800eb54 <_dtoa_r+0x614>)
 800ea02:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800ea06:	ed12 4b02 	vldr	d4, [r2, #-8]
 800ea0a:	9a08      	ldr	r2, [sp, #32]
 800ea0c:	ec41 0b17 	vmov	d7, r0, r1
 800ea10:	443c      	add	r4, r7
 800ea12:	b34a      	cbz	r2, 800ea68 <_dtoa_r+0x528>
 800ea14:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800ea18:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800ea1c:	463e      	mov	r6, r7
 800ea1e:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800ea22:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800ea26:	ee35 7b47 	vsub.f64	d7, d5, d7
 800ea2a:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800ea2e:	ee14 2a90 	vmov	r2, s9
 800ea32:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800ea36:	3230      	adds	r2, #48	@ 0x30
 800ea38:	ee36 6b45 	vsub.f64	d6, d6, d5
 800ea3c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ea40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea44:	f806 2b01 	strb.w	r2, [r6], #1
 800ea48:	d438      	bmi.n	800eabc <_dtoa_r+0x57c>
 800ea4a:	ee32 5b46 	vsub.f64	d5, d2, d6
 800ea4e:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800ea52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea56:	d462      	bmi.n	800eb1e <_dtoa_r+0x5de>
 800ea58:	42a6      	cmp	r6, r4
 800ea5a:	f43f af4d 	beq.w	800e8f8 <_dtoa_r+0x3b8>
 800ea5e:	ee27 7b03 	vmul.f64	d7, d7, d3
 800ea62:	ee26 6b03 	vmul.f64	d6, d6, d3
 800ea66:	e7e0      	b.n	800ea2a <_dtoa_r+0x4ea>
 800ea68:	4621      	mov	r1, r4
 800ea6a:	463e      	mov	r6, r7
 800ea6c:	ee27 7b04 	vmul.f64	d7, d7, d4
 800ea70:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800ea74:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800ea78:	ee14 2a90 	vmov	r2, s9
 800ea7c:	3230      	adds	r2, #48	@ 0x30
 800ea7e:	f806 2b01 	strb.w	r2, [r6], #1
 800ea82:	42a6      	cmp	r6, r4
 800ea84:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800ea88:	ee36 6b45 	vsub.f64	d6, d6, d5
 800ea8c:	d119      	bne.n	800eac2 <_dtoa_r+0x582>
 800ea8e:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800ea92:	ee37 4b05 	vadd.f64	d4, d7, d5
 800ea96:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800ea9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea9e:	dc3e      	bgt.n	800eb1e <_dtoa_r+0x5de>
 800eaa0:	ee35 5b47 	vsub.f64	d5, d5, d7
 800eaa4:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800eaa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eaac:	f57f af24 	bpl.w	800e8f8 <_dtoa_r+0x3b8>
 800eab0:	460e      	mov	r6, r1
 800eab2:	3901      	subs	r1, #1
 800eab4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800eab8:	2b30      	cmp	r3, #48	@ 0x30
 800eaba:	d0f9      	beq.n	800eab0 <_dtoa_r+0x570>
 800eabc:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800eac0:	e758      	b.n	800e974 <_dtoa_r+0x434>
 800eac2:	ee26 6b03 	vmul.f64	d6, d6, d3
 800eac6:	e7d5      	b.n	800ea74 <_dtoa_r+0x534>
 800eac8:	d10b      	bne.n	800eae2 <_dtoa_r+0x5a2>
 800eaca:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800eace:	ee26 6b07 	vmul.f64	d6, d6, d7
 800ead2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ead6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800eada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eade:	f2c0 8161 	blt.w	800eda4 <_dtoa_r+0x864>
 800eae2:	2400      	movs	r4, #0
 800eae4:	4625      	mov	r5, r4
 800eae6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eae8:	43db      	mvns	r3, r3
 800eaea:	9304      	str	r3, [sp, #16]
 800eaec:	463e      	mov	r6, r7
 800eaee:	f04f 0800 	mov.w	r8, #0
 800eaf2:	4621      	mov	r1, r4
 800eaf4:	4648      	mov	r0, r9
 800eaf6:	f000 fbb9 	bl	800f26c <_Bfree>
 800eafa:	2d00      	cmp	r5, #0
 800eafc:	d0de      	beq.n	800eabc <_dtoa_r+0x57c>
 800eafe:	f1b8 0f00 	cmp.w	r8, #0
 800eb02:	d005      	beq.n	800eb10 <_dtoa_r+0x5d0>
 800eb04:	45a8      	cmp	r8, r5
 800eb06:	d003      	beq.n	800eb10 <_dtoa_r+0x5d0>
 800eb08:	4641      	mov	r1, r8
 800eb0a:	4648      	mov	r0, r9
 800eb0c:	f000 fbae 	bl	800f26c <_Bfree>
 800eb10:	4629      	mov	r1, r5
 800eb12:	4648      	mov	r0, r9
 800eb14:	f000 fbaa 	bl	800f26c <_Bfree>
 800eb18:	e7d0      	b.n	800eabc <_dtoa_r+0x57c>
 800eb1a:	f8cd 8010 	str.w	r8, [sp, #16]
 800eb1e:	4633      	mov	r3, r6
 800eb20:	461e      	mov	r6, r3
 800eb22:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800eb26:	2a39      	cmp	r2, #57	@ 0x39
 800eb28:	d106      	bne.n	800eb38 <_dtoa_r+0x5f8>
 800eb2a:	429f      	cmp	r7, r3
 800eb2c:	d1f8      	bne.n	800eb20 <_dtoa_r+0x5e0>
 800eb2e:	9a04      	ldr	r2, [sp, #16]
 800eb30:	3201      	adds	r2, #1
 800eb32:	9204      	str	r2, [sp, #16]
 800eb34:	2230      	movs	r2, #48	@ 0x30
 800eb36:	703a      	strb	r2, [r7, #0]
 800eb38:	781a      	ldrb	r2, [r3, #0]
 800eb3a:	3201      	adds	r2, #1
 800eb3c:	701a      	strb	r2, [r3, #0]
 800eb3e:	e7bd      	b.n	800eabc <_dtoa_r+0x57c>
 800eb40:	ee27 7b04 	vmul.f64	d7, d7, d4
 800eb44:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800eb48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb4c:	f47f aeef 	bne.w	800e92e <_dtoa_r+0x3ee>
 800eb50:	e710      	b.n	800e974 <_dtoa_r+0x434>
 800eb52:	bf00      	nop
 800eb54:	080107d8 	.word	0x080107d8
 800eb58:	080107b0 	.word	0x080107b0
 800eb5c:	9908      	ldr	r1, [sp, #32]
 800eb5e:	2900      	cmp	r1, #0
 800eb60:	f000 80e3 	beq.w	800ed2a <_dtoa_r+0x7ea>
 800eb64:	9907      	ldr	r1, [sp, #28]
 800eb66:	2901      	cmp	r1, #1
 800eb68:	f300 80c8 	bgt.w	800ecfc <_dtoa_r+0x7bc>
 800eb6c:	2d00      	cmp	r5, #0
 800eb6e:	f000 80c1 	beq.w	800ecf4 <_dtoa_r+0x7b4>
 800eb72:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800eb76:	9e05      	ldr	r6, [sp, #20]
 800eb78:	461c      	mov	r4, r3
 800eb7a:	9304      	str	r3, [sp, #16]
 800eb7c:	9b05      	ldr	r3, [sp, #20]
 800eb7e:	4413      	add	r3, r2
 800eb80:	9305      	str	r3, [sp, #20]
 800eb82:	9b06      	ldr	r3, [sp, #24]
 800eb84:	2101      	movs	r1, #1
 800eb86:	4413      	add	r3, r2
 800eb88:	4648      	mov	r0, r9
 800eb8a:	9306      	str	r3, [sp, #24]
 800eb8c:	f000 fc22 	bl	800f3d4 <__i2b>
 800eb90:	9b04      	ldr	r3, [sp, #16]
 800eb92:	4605      	mov	r5, r0
 800eb94:	b166      	cbz	r6, 800ebb0 <_dtoa_r+0x670>
 800eb96:	9a06      	ldr	r2, [sp, #24]
 800eb98:	2a00      	cmp	r2, #0
 800eb9a:	dd09      	ble.n	800ebb0 <_dtoa_r+0x670>
 800eb9c:	42b2      	cmp	r2, r6
 800eb9e:	9905      	ldr	r1, [sp, #20]
 800eba0:	bfa8      	it	ge
 800eba2:	4632      	movge	r2, r6
 800eba4:	1a89      	subs	r1, r1, r2
 800eba6:	9105      	str	r1, [sp, #20]
 800eba8:	9906      	ldr	r1, [sp, #24]
 800ebaa:	1ab6      	subs	r6, r6, r2
 800ebac:	1a8a      	subs	r2, r1, r2
 800ebae:	9206      	str	r2, [sp, #24]
 800ebb0:	b1fb      	cbz	r3, 800ebf2 <_dtoa_r+0x6b2>
 800ebb2:	9a08      	ldr	r2, [sp, #32]
 800ebb4:	2a00      	cmp	r2, #0
 800ebb6:	f000 80bc 	beq.w	800ed32 <_dtoa_r+0x7f2>
 800ebba:	b19c      	cbz	r4, 800ebe4 <_dtoa_r+0x6a4>
 800ebbc:	4629      	mov	r1, r5
 800ebbe:	4622      	mov	r2, r4
 800ebc0:	4648      	mov	r0, r9
 800ebc2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ebc4:	f000 fcc6 	bl	800f554 <__pow5mult>
 800ebc8:	9a01      	ldr	r2, [sp, #4]
 800ebca:	4601      	mov	r1, r0
 800ebcc:	4605      	mov	r5, r0
 800ebce:	4648      	mov	r0, r9
 800ebd0:	f000 fc16 	bl	800f400 <__multiply>
 800ebd4:	9901      	ldr	r1, [sp, #4]
 800ebd6:	9004      	str	r0, [sp, #16]
 800ebd8:	4648      	mov	r0, r9
 800ebda:	f000 fb47 	bl	800f26c <_Bfree>
 800ebde:	9a04      	ldr	r2, [sp, #16]
 800ebe0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ebe2:	9201      	str	r2, [sp, #4]
 800ebe4:	1b1a      	subs	r2, r3, r4
 800ebe6:	d004      	beq.n	800ebf2 <_dtoa_r+0x6b2>
 800ebe8:	9901      	ldr	r1, [sp, #4]
 800ebea:	4648      	mov	r0, r9
 800ebec:	f000 fcb2 	bl	800f554 <__pow5mult>
 800ebf0:	9001      	str	r0, [sp, #4]
 800ebf2:	2101      	movs	r1, #1
 800ebf4:	4648      	mov	r0, r9
 800ebf6:	f000 fbed 	bl	800f3d4 <__i2b>
 800ebfa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ebfc:	4604      	mov	r4, r0
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	f000 81d0 	beq.w	800efa4 <_dtoa_r+0xa64>
 800ec04:	461a      	mov	r2, r3
 800ec06:	4601      	mov	r1, r0
 800ec08:	4648      	mov	r0, r9
 800ec0a:	f000 fca3 	bl	800f554 <__pow5mult>
 800ec0e:	9b07      	ldr	r3, [sp, #28]
 800ec10:	2b01      	cmp	r3, #1
 800ec12:	4604      	mov	r4, r0
 800ec14:	f300 8095 	bgt.w	800ed42 <_dtoa_r+0x802>
 800ec18:	9b02      	ldr	r3, [sp, #8]
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	f040 808b 	bne.w	800ed36 <_dtoa_r+0x7f6>
 800ec20:	9b03      	ldr	r3, [sp, #12]
 800ec22:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800ec26:	2a00      	cmp	r2, #0
 800ec28:	f040 8087 	bne.w	800ed3a <_dtoa_r+0x7fa>
 800ec2c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800ec30:	0d12      	lsrs	r2, r2, #20
 800ec32:	0512      	lsls	r2, r2, #20
 800ec34:	2a00      	cmp	r2, #0
 800ec36:	f000 8082 	beq.w	800ed3e <_dtoa_r+0x7fe>
 800ec3a:	9b05      	ldr	r3, [sp, #20]
 800ec3c:	3301      	adds	r3, #1
 800ec3e:	9305      	str	r3, [sp, #20]
 800ec40:	9b06      	ldr	r3, [sp, #24]
 800ec42:	3301      	adds	r3, #1
 800ec44:	9306      	str	r3, [sp, #24]
 800ec46:	2301      	movs	r3, #1
 800ec48:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ec4a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	f000 81af 	beq.w	800efb0 <_dtoa_r+0xa70>
 800ec52:	6922      	ldr	r2, [r4, #16]
 800ec54:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800ec58:	6910      	ldr	r0, [r2, #16]
 800ec5a:	f000 fb6f 	bl	800f33c <__hi0bits>
 800ec5e:	f1c0 0020 	rsb	r0, r0, #32
 800ec62:	9b06      	ldr	r3, [sp, #24]
 800ec64:	4418      	add	r0, r3
 800ec66:	f010 001f 	ands.w	r0, r0, #31
 800ec6a:	d076      	beq.n	800ed5a <_dtoa_r+0x81a>
 800ec6c:	f1c0 0220 	rsb	r2, r0, #32
 800ec70:	2a04      	cmp	r2, #4
 800ec72:	dd69      	ble.n	800ed48 <_dtoa_r+0x808>
 800ec74:	9b05      	ldr	r3, [sp, #20]
 800ec76:	f1c0 001c 	rsb	r0, r0, #28
 800ec7a:	4403      	add	r3, r0
 800ec7c:	9305      	str	r3, [sp, #20]
 800ec7e:	9b06      	ldr	r3, [sp, #24]
 800ec80:	4406      	add	r6, r0
 800ec82:	4403      	add	r3, r0
 800ec84:	9306      	str	r3, [sp, #24]
 800ec86:	9b05      	ldr	r3, [sp, #20]
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	dd05      	ble.n	800ec98 <_dtoa_r+0x758>
 800ec8c:	9901      	ldr	r1, [sp, #4]
 800ec8e:	461a      	mov	r2, r3
 800ec90:	4648      	mov	r0, r9
 800ec92:	f000 fcb9 	bl	800f608 <__lshift>
 800ec96:	9001      	str	r0, [sp, #4]
 800ec98:	9b06      	ldr	r3, [sp, #24]
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	dd05      	ble.n	800ecaa <_dtoa_r+0x76a>
 800ec9e:	4621      	mov	r1, r4
 800eca0:	461a      	mov	r2, r3
 800eca2:	4648      	mov	r0, r9
 800eca4:	f000 fcb0 	bl	800f608 <__lshift>
 800eca8:	4604      	mov	r4, r0
 800ecaa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d056      	beq.n	800ed5e <_dtoa_r+0x81e>
 800ecb0:	9801      	ldr	r0, [sp, #4]
 800ecb2:	4621      	mov	r1, r4
 800ecb4:	f000 fd14 	bl	800f6e0 <__mcmp>
 800ecb8:	2800      	cmp	r0, #0
 800ecba:	da50      	bge.n	800ed5e <_dtoa_r+0x81e>
 800ecbc:	f108 33ff 	add.w	r3, r8, #4294967295
 800ecc0:	9304      	str	r3, [sp, #16]
 800ecc2:	9901      	ldr	r1, [sp, #4]
 800ecc4:	2300      	movs	r3, #0
 800ecc6:	220a      	movs	r2, #10
 800ecc8:	4648      	mov	r0, r9
 800ecca:	f000 faf1 	bl	800f2b0 <__multadd>
 800ecce:	9b08      	ldr	r3, [sp, #32]
 800ecd0:	9001      	str	r0, [sp, #4]
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	f000 816e 	beq.w	800efb4 <_dtoa_r+0xa74>
 800ecd8:	4629      	mov	r1, r5
 800ecda:	2300      	movs	r3, #0
 800ecdc:	220a      	movs	r2, #10
 800ecde:	4648      	mov	r0, r9
 800ece0:	f000 fae6 	bl	800f2b0 <__multadd>
 800ece4:	f1bb 0f00 	cmp.w	fp, #0
 800ece8:	4605      	mov	r5, r0
 800ecea:	dc64      	bgt.n	800edb6 <_dtoa_r+0x876>
 800ecec:	9b07      	ldr	r3, [sp, #28]
 800ecee:	2b02      	cmp	r3, #2
 800ecf0:	dc3e      	bgt.n	800ed70 <_dtoa_r+0x830>
 800ecf2:	e060      	b.n	800edb6 <_dtoa_r+0x876>
 800ecf4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ecf6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800ecfa:	e73c      	b.n	800eb76 <_dtoa_r+0x636>
 800ecfc:	f10a 34ff 	add.w	r4, sl, #4294967295
 800ed00:	42a3      	cmp	r3, r4
 800ed02:	bfbf      	itttt	lt
 800ed04:	1ae2      	sublt	r2, r4, r3
 800ed06:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800ed08:	189b      	addlt	r3, r3, r2
 800ed0a:	930a      	strlt	r3, [sp, #40]	@ 0x28
 800ed0c:	bfae      	itee	ge
 800ed0e:	1b1c      	subge	r4, r3, r4
 800ed10:	4623      	movlt	r3, r4
 800ed12:	2400      	movlt	r4, #0
 800ed14:	f1ba 0f00 	cmp.w	sl, #0
 800ed18:	bfb5      	itete	lt
 800ed1a:	9a05      	ldrlt	r2, [sp, #20]
 800ed1c:	9e05      	ldrge	r6, [sp, #20]
 800ed1e:	eba2 060a 	sublt.w	r6, r2, sl
 800ed22:	4652      	movge	r2, sl
 800ed24:	bfb8      	it	lt
 800ed26:	2200      	movlt	r2, #0
 800ed28:	e727      	b.n	800eb7a <_dtoa_r+0x63a>
 800ed2a:	9e05      	ldr	r6, [sp, #20]
 800ed2c:	9d08      	ldr	r5, [sp, #32]
 800ed2e:	461c      	mov	r4, r3
 800ed30:	e730      	b.n	800eb94 <_dtoa_r+0x654>
 800ed32:	461a      	mov	r2, r3
 800ed34:	e758      	b.n	800ebe8 <_dtoa_r+0x6a8>
 800ed36:	2300      	movs	r3, #0
 800ed38:	e786      	b.n	800ec48 <_dtoa_r+0x708>
 800ed3a:	9b02      	ldr	r3, [sp, #8]
 800ed3c:	e784      	b.n	800ec48 <_dtoa_r+0x708>
 800ed3e:	920b      	str	r2, [sp, #44]	@ 0x2c
 800ed40:	e783      	b.n	800ec4a <_dtoa_r+0x70a>
 800ed42:	2300      	movs	r3, #0
 800ed44:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ed46:	e784      	b.n	800ec52 <_dtoa_r+0x712>
 800ed48:	d09d      	beq.n	800ec86 <_dtoa_r+0x746>
 800ed4a:	9b05      	ldr	r3, [sp, #20]
 800ed4c:	321c      	adds	r2, #28
 800ed4e:	4413      	add	r3, r2
 800ed50:	9305      	str	r3, [sp, #20]
 800ed52:	9b06      	ldr	r3, [sp, #24]
 800ed54:	4416      	add	r6, r2
 800ed56:	4413      	add	r3, r2
 800ed58:	e794      	b.n	800ec84 <_dtoa_r+0x744>
 800ed5a:	4602      	mov	r2, r0
 800ed5c:	e7f5      	b.n	800ed4a <_dtoa_r+0x80a>
 800ed5e:	f1ba 0f00 	cmp.w	sl, #0
 800ed62:	f8cd 8010 	str.w	r8, [sp, #16]
 800ed66:	46d3      	mov	fp, sl
 800ed68:	dc21      	bgt.n	800edae <_dtoa_r+0x86e>
 800ed6a:	9b07      	ldr	r3, [sp, #28]
 800ed6c:	2b02      	cmp	r3, #2
 800ed6e:	dd1e      	ble.n	800edae <_dtoa_r+0x86e>
 800ed70:	f1bb 0f00 	cmp.w	fp, #0
 800ed74:	f47f aeb7 	bne.w	800eae6 <_dtoa_r+0x5a6>
 800ed78:	4621      	mov	r1, r4
 800ed7a:	465b      	mov	r3, fp
 800ed7c:	2205      	movs	r2, #5
 800ed7e:	4648      	mov	r0, r9
 800ed80:	f000 fa96 	bl	800f2b0 <__multadd>
 800ed84:	4601      	mov	r1, r0
 800ed86:	4604      	mov	r4, r0
 800ed88:	9801      	ldr	r0, [sp, #4]
 800ed8a:	f000 fca9 	bl	800f6e0 <__mcmp>
 800ed8e:	2800      	cmp	r0, #0
 800ed90:	f77f aea9 	ble.w	800eae6 <_dtoa_r+0x5a6>
 800ed94:	463e      	mov	r6, r7
 800ed96:	2331      	movs	r3, #49	@ 0x31
 800ed98:	f806 3b01 	strb.w	r3, [r6], #1
 800ed9c:	9b04      	ldr	r3, [sp, #16]
 800ed9e:	3301      	adds	r3, #1
 800eda0:	9304      	str	r3, [sp, #16]
 800eda2:	e6a4      	b.n	800eaee <_dtoa_r+0x5ae>
 800eda4:	f8cd 8010 	str.w	r8, [sp, #16]
 800eda8:	4654      	mov	r4, sl
 800edaa:	4625      	mov	r5, r4
 800edac:	e7f2      	b.n	800ed94 <_dtoa_r+0x854>
 800edae:	9b08      	ldr	r3, [sp, #32]
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	f000 8103 	beq.w	800efbc <_dtoa_r+0xa7c>
 800edb6:	2e00      	cmp	r6, #0
 800edb8:	dd05      	ble.n	800edc6 <_dtoa_r+0x886>
 800edba:	4629      	mov	r1, r5
 800edbc:	4632      	mov	r2, r6
 800edbe:	4648      	mov	r0, r9
 800edc0:	f000 fc22 	bl	800f608 <__lshift>
 800edc4:	4605      	mov	r5, r0
 800edc6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d058      	beq.n	800ee7e <_dtoa_r+0x93e>
 800edcc:	6869      	ldr	r1, [r5, #4]
 800edce:	4648      	mov	r0, r9
 800edd0:	f000 fa0c 	bl	800f1ec <_Balloc>
 800edd4:	4606      	mov	r6, r0
 800edd6:	b928      	cbnz	r0, 800ede4 <_dtoa_r+0x8a4>
 800edd8:	4b82      	ldr	r3, [pc, #520]	@ (800efe4 <_dtoa_r+0xaa4>)
 800edda:	4602      	mov	r2, r0
 800eddc:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ede0:	f7ff bbc7 	b.w	800e572 <_dtoa_r+0x32>
 800ede4:	692a      	ldr	r2, [r5, #16]
 800ede6:	3202      	adds	r2, #2
 800ede8:	0092      	lsls	r2, r2, #2
 800edea:	f105 010c 	add.w	r1, r5, #12
 800edee:	300c      	adds	r0, #12
 800edf0:	f000 ffac 	bl	800fd4c <memcpy>
 800edf4:	2201      	movs	r2, #1
 800edf6:	4631      	mov	r1, r6
 800edf8:	4648      	mov	r0, r9
 800edfa:	f000 fc05 	bl	800f608 <__lshift>
 800edfe:	1c7b      	adds	r3, r7, #1
 800ee00:	9305      	str	r3, [sp, #20]
 800ee02:	eb07 030b 	add.w	r3, r7, fp
 800ee06:	9309      	str	r3, [sp, #36]	@ 0x24
 800ee08:	9b02      	ldr	r3, [sp, #8]
 800ee0a:	f003 0301 	and.w	r3, r3, #1
 800ee0e:	46a8      	mov	r8, r5
 800ee10:	9308      	str	r3, [sp, #32]
 800ee12:	4605      	mov	r5, r0
 800ee14:	9b05      	ldr	r3, [sp, #20]
 800ee16:	9801      	ldr	r0, [sp, #4]
 800ee18:	4621      	mov	r1, r4
 800ee1a:	f103 3bff 	add.w	fp, r3, #4294967295
 800ee1e:	f7ff fb04 	bl	800e42a <quorem>
 800ee22:	4641      	mov	r1, r8
 800ee24:	9002      	str	r0, [sp, #8]
 800ee26:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800ee2a:	9801      	ldr	r0, [sp, #4]
 800ee2c:	f000 fc58 	bl	800f6e0 <__mcmp>
 800ee30:	462a      	mov	r2, r5
 800ee32:	9006      	str	r0, [sp, #24]
 800ee34:	4621      	mov	r1, r4
 800ee36:	4648      	mov	r0, r9
 800ee38:	f000 fc6e 	bl	800f718 <__mdiff>
 800ee3c:	68c2      	ldr	r2, [r0, #12]
 800ee3e:	4606      	mov	r6, r0
 800ee40:	b9fa      	cbnz	r2, 800ee82 <_dtoa_r+0x942>
 800ee42:	4601      	mov	r1, r0
 800ee44:	9801      	ldr	r0, [sp, #4]
 800ee46:	f000 fc4b 	bl	800f6e0 <__mcmp>
 800ee4a:	4602      	mov	r2, r0
 800ee4c:	4631      	mov	r1, r6
 800ee4e:	4648      	mov	r0, r9
 800ee50:	920a      	str	r2, [sp, #40]	@ 0x28
 800ee52:	f000 fa0b 	bl	800f26c <_Bfree>
 800ee56:	9b07      	ldr	r3, [sp, #28]
 800ee58:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ee5a:	9e05      	ldr	r6, [sp, #20]
 800ee5c:	ea43 0102 	orr.w	r1, r3, r2
 800ee60:	9b08      	ldr	r3, [sp, #32]
 800ee62:	4319      	orrs	r1, r3
 800ee64:	d10f      	bne.n	800ee86 <_dtoa_r+0x946>
 800ee66:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800ee6a:	d028      	beq.n	800eebe <_dtoa_r+0x97e>
 800ee6c:	9b06      	ldr	r3, [sp, #24]
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	dd02      	ble.n	800ee78 <_dtoa_r+0x938>
 800ee72:	9b02      	ldr	r3, [sp, #8]
 800ee74:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800ee78:	f88b a000 	strb.w	sl, [fp]
 800ee7c:	e639      	b.n	800eaf2 <_dtoa_r+0x5b2>
 800ee7e:	4628      	mov	r0, r5
 800ee80:	e7bd      	b.n	800edfe <_dtoa_r+0x8be>
 800ee82:	2201      	movs	r2, #1
 800ee84:	e7e2      	b.n	800ee4c <_dtoa_r+0x90c>
 800ee86:	9b06      	ldr	r3, [sp, #24]
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	db04      	blt.n	800ee96 <_dtoa_r+0x956>
 800ee8c:	9907      	ldr	r1, [sp, #28]
 800ee8e:	430b      	orrs	r3, r1
 800ee90:	9908      	ldr	r1, [sp, #32]
 800ee92:	430b      	orrs	r3, r1
 800ee94:	d120      	bne.n	800eed8 <_dtoa_r+0x998>
 800ee96:	2a00      	cmp	r2, #0
 800ee98:	ddee      	ble.n	800ee78 <_dtoa_r+0x938>
 800ee9a:	9901      	ldr	r1, [sp, #4]
 800ee9c:	2201      	movs	r2, #1
 800ee9e:	4648      	mov	r0, r9
 800eea0:	f000 fbb2 	bl	800f608 <__lshift>
 800eea4:	4621      	mov	r1, r4
 800eea6:	9001      	str	r0, [sp, #4]
 800eea8:	f000 fc1a 	bl	800f6e0 <__mcmp>
 800eeac:	2800      	cmp	r0, #0
 800eeae:	dc03      	bgt.n	800eeb8 <_dtoa_r+0x978>
 800eeb0:	d1e2      	bne.n	800ee78 <_dtoa_r+0x938>
 800eeb2:	f01a 0f01 	tst.w	sl, #1
 800eeb6:	d0df      	beq.n	800ee78 <_dtoa_r+0x938>
 800eeb8:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800eebc:	d1d9      	bne.n	800ee72 <_dtoa_r+0x932>
 800eebe:	2339      	movs	r3, #57	@ 0x39
 800eec0:	f88b 3000 	strb.w	r3, [fp]
 800eec4:	4633      	mov	r3, r6
 800eec6:	461e      	mov	r6, r3
 800eec8:	3b01      	subs	r3, #1
 800eeca:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800eece:	2a39      	cmp	r2, #57	@ 0x39
 800eed0:	d053      	beq.n	800ef7a <_dtoa_r+0xa3a>
 800eed2:	3201      	adds	r2, #1
 800eed4:	701a      	strb	r2, [r3, #0]
 800eed6:	e60c      	b.n	800eaf2 <_dtoa_r+0x5b2>
 800eed8:	2a00      	cmp	r2, #0
 800eeda:	dd07      	ble.n	800eeec <_dtoa_r+0x9ac>
 800eedc:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800eee0:	d0ed      	beq.n	800eebe <_dtoa_r+0x97e>
 800eee2:	f10a 0301 	add.w	r3, sl, #1
 800eee6:	f88b 3000 	strb.w	r3, [fp]
 800eeea:	e602      	b.n	800eaf2 <_dtoa_r+0x5b2>
 800eeec:	9b05      	ldr	r3, [sp, #20]
 800eeee:	9a05      	ldr	r2, [sp, #20]
 800eef0:	f803 ac01 	strb.w	sl, [r3, #-1]
 800eef4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eef6:	4293      	cmp	r3, r2
 800eef8:	d029      	beq.n	800ef4e <_dtoa_r+0xa0e>
 800eefa:	9901      	ldr	r1, [sp, #4]
 800eefc:	2300      	movs	r3, #0
 800eefe:	220a      	movs	r2, #10
 800ef00:	4648      	mov	r0, r9
 800ef02:	f000 f9d5 	bl	800f2b0 <__multadd>
 800ef06:	45a8      	cmp	r8, r5
 800ef08:	9001      	str	r0, [sp, #4]
 800ef0a:	f04f 0300 	mov.w	r3, #0
 800ef0e:	f04f 020a 	mov.w	r2, #10
 800ef12:	4641      	mov	r1, r8
 800ef14:	4648      	mov	r0, r9
 800ef16:	d107      	bne.n	800ef28 <_dtoa_r+0x9e8>
 800ef18:	f000 f9ca 	bl	800f2b0 <__multadd>
 800ef1c:	4680      	mov	r8, r0
 800ef1e:	4605      	mov	r5, r0
 800ef20:	9b05      	ldr	r3, [sp, #20]
 800ef22:	3301      	adds	r3, #1
 800ef24:	9305      	str	r3, [sp, #20]
 800ef26:	e775      	b.n	800ee14 <_dtoa_r+0x8d4>
 800ef28:	f000 f9c2 	bl	800f2b0 <__multadd>
 800ef2c:	4629      	mov	r1, r5
 800ef2e:	4680      	mov	r8, r0
 800ef30:	2300      	movs	r3, #0
 800ef32:	220a      	movs	r2, #10
 800ef34:	4648      	mov	r0, r9
 800ef36:	f000 f9bb 	bl	800f2b0 <__multadd>
 800ef3a:	4605      	mov	r5, r0
 800ef3c:	e7f0      	b.n	800ef20 <_dtoa_r+0x9e0>
 800ef3e:	f1bb 0f00 	cmp.w	fp, #0
 800ef42:	bfcc      	ite	gt
 800ef44:	465e      	movgt	r6, fp
 800ef46:	2601      	movle	r6, #1
 800ef48:	443e      	add	r6, r7
 800ef4a:	f04f 0800 	mov.w	r8, #0
 800ef4e:	9901      	ldr	r1, [sp, #4]
 800ef50:	2201      	movs	r2, #1
 800ef52:	4648      	mov	r0, r9
 800ef54:	f000 fb58 	bl	800f608 <__lshift>
 800ef58:	4621      	mov	r1, r4
 800ef5a:	9001      	str	r0, [sp, #4]
 800ef5c:	f000 fbc0 	bl	800f6e0 <__mcmp>
 800ef60:	2800      	cmp	r0, #0
 800ef62:	dcaf      	bgt.n	800eec4 <_dtoa_r+0x984>
 800ef64:	d102      	bne.n	800ef6c <_dtoa_r+0xa2c>
 800ef66:	f01a 0f01 	tst.w	sl, #1
 800ef6a:	d1ab      	bne.n	800eec4 <_dtoa_r+0x984>
 800ef6c:	4633      	mov	r3, r6
 800ef6e:	461e      	mov	r6, r3
 800ef70:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ef74:	2a30      	cmp	r2, #48	@ 0x30
 800ef76:	d0fa      	beq.n	800ef6e <_dtoa_r+0xa2e>
 800ef78:	e5bb      	b.n	800eaf2 <_dtoa_r+0x5b2>
 800ef7a:	429f      	cmp	r7, r3
 800ef7c:	d1a3      	bne.n	800eec6 <_dtoa_r+0x986>
 800ef7e:	9b04      	ldr	r3, [sp, #16]
 800ef80:	3301      	adds	r3, #1
 800ef82:	9304      	str	r3, [sp, #16]
 800ef84:	2331      	movs	r3, #49	@ 0x31
 800ef86:	703b      	strb	r3, [r7, #0]
 800ef88:	e5b3      	b.n	800eaf2 <_dtoa_r+0x5b2>
 800ef8a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ef8c:	4f16      	ldr	r7, [pc, #88]	@ (800efe8 <_dtoa_r+0xaa8>)
 800ef8e:	b11b      	cbz	r3, 800ef98 <_dtoa_r+0xa58>
 800ef90:	f107 0308 	add.w	r3, r7, #8
 800ef94:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800ef96:	6013      	str	r3, [r2, #0]
 800ef98:	4638      	mov	r0, r7
 800ef9a:	b011      	add	sp, #68	@ 0x44
 800ef9c:	ecbd 8b02 	vpop	{d8}
 800efa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efa4:	9b07      	ldr	r3, [sp, #28]
 800efa6:	2b01      	cmp	r3, #1
 800efa8:	f77f ae36 	ble.w	800ec18 <_dtoa_r+0x6d8>
 800efac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800efae:	930b      	str	r3, [sp, #44]	@ 0x2c
 800efb0:	2001      	movs	r0, #1
 800efb2:	e656      	b.n	800ec62 <_dtoa_r+0x722>
 800efb4:	f1bb 0f00 	cmp.w	fp, #0
 800efb8:	f77f aed7 	ble.w	800ed6a <_dtoa_r+0x82a>
 800efbc:	463e      	mov	r6, r7
 800efbe:	9801      	ldr	r0, [sp, #4]
 800efc0:	4621      	mov	r1, r4
 800efc2:	f7ff fa32 	bl	800e42a <quorem>
 800efc6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800efca:	f806 ab01 	strb.w	sl, [r6], #1
 800efce:	1bf2      	subs	r2, r6, r7
 800efd0:	4593      	cmp	fp, r2
 800efd2:	ddb4      	ble.n	800ef3e <_dtoa_r+0x9fe>
 800efd4:	9901      	ldr	r1, [sp, #4]
 800efd6:	2300      	movs	r3, #0
 800efd8:	220a      	movs	r2, #10
 800efda:	4648      	mov	r0, r9
 800efdc:	f000 f968 	bl	800f2b0 <__multadd>
 800efe0:	9001      	str	r0, [sp, #4]
 800efe2:	e7ec      	b.n	800efbe <_dtoa_r+0xa7e>
 800efe4:	08010738 	.word	0x08010738
 800efe8:	080106bc 	.word	0x080106bc

0800efec <_free_r>:
 800efec:	b538      	push	{r3, r4, r5, lr}
 800efee:	4605      	mov	r5, r0
 800eff0:	2900      	cmp	r1, #0
 800eff2:	d041      	beq.n	800f078 <_free_r+0x8c>
 800eff4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eff8:	1f0c      	subs	r4, r1, #4
 800effa:	2b00      	cmp	r3, #0
 800effc:	bfb8      	it	lt
 800effe:	18e4      	addlt	r4, r4, r3
 800f000:	f000 f8e8 	bl	800f1d4 <__malloc_lock>
 800f004:	4a1d      	ldr	r2, [pc, #116]	@ (800f07c <_free_r+0x90>)
 800f006:	6813      	ldr	r3, [r2, #0]
 800f008:	b933      	cbnz	r3, 800f018 <_free_r+0x2c>
 800f00a:	6063      	str	r3, [r4, #4]
 800f00c:	6014      	str	r4, [r2, #0]
 800f00e:	4628      	mov	r0, r5
 800f010:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f014:	f000 b8e4 	b.w	800f1e0 <__malloc_unlock>
 800f018:	42a3      	cmp	r3, r4
 800f01a:	d908      	bls.n	800f02e <_free_r+0x42>
 800f01c:	6820      	ldr	r0, [r4, #0]
 800f01e:	1821      	adds	r1, r4, r0
 800f020:	428b      	cmp	r3, r1
 800f022:	bf01      	itttt	eq
 800f024:	6819      	ldreq	r1, [r3, #0]
 800f026:	685b      	ldreq	r3, [r3, #4]
 800f028:	1809      	addeq	r1, r1, r0
 800f02a:	6021      	streq	r1, [r4, #0]
 800f02c:	e7ed      	b.n	800f00a <_free_r+0x1e>
 800f02e:	461a      	mov	r2, r3
 800f030:	685b      	ldr	r3, [r3, #4]
 800f032:	b10b      	cbz	r3, 800f038 <_free_r+0x4c>
 800f034:	42a3      	cmp	r3, r4
 800f036:	d9fa      	bls.n	800f02e <_free_r+0x42>
 800f038:	6811      	ldr	r1, [r2, #0]
 800f03a:	1850      	adds	r0, r2, r1
 800f03c:	42a0      	cmp	r0, r4
 800f03e:	d10b      	bne.n	800f058 <_free_r+0x6c>
 800f040:	6820      	ldr	r0, [r4, #0]
 800f042:	4401      	add	r1, r0
 800f044:	1850      	adds	r0, r2, r1
 800f046:	4283      	cmp	r3, r0
 800f048:	6011      	str	r1, [r2, #0]
 800f04a:	d1e0      	bne.n	800f00e <_free_r+0x22>
 800f04c:	6818      	ldr	r0, [r3, #0]
 800f04e:	685b      	ldr	r3, [r3, #4]
 800f050:	6053      	str	r3, [r2, #4]
 800f052:	4408      	add	r0, r1
 800f054:	6010      	str	r0, [r2, #0]
 800f056:	e7da      	b.n	800f00e <_free_r+0x22>
 800f058:	d902      	bls.n	800f060 <_free_r+0x74>
 800f05a:	230c      	movs	r3, #12
 800f05c:	602b      	str	r3, [r5, #0]
 800f05e:	e7d6      	b.n	800f00e <_free_r+0x22>
 800f060:	6820      	ldr	r0, [r4, #0]
 800f062:	1821      	adds	r1, r4, r0
 800f064:	428b      	cmp	r3, r1
 800f066:	bf04      	itt	eq
 800f068:	6819      	ldreq	r1, [r3, #0]
 800f06a:	685b      	ldreq	r3, [r3, #4]
 800f06c:	6063      	str	r3, [r4, #4]
 800f06e:	bf04      	itt	eq
 800f070:	1809      	addeq	r1, r1, r0
 800f072:	6021      	streq	r1, [r4, #0]
 800f074:	6054      	str	r4, [r2, #4]
 800f076:	e7ca      	b.n	800f00e <_free_r+0x22>
 800f078:	bd38      	pop	{r3, r4, r5, pc}
 800f07a:	bf00      	nop
 800f07c:	240009b4 	.word	0x240009b4

0800f080 <malloc>:
 800f080:	4b02      	ldr	r3, [pc, #8]	@ (800f08c <malloc+0xc>)
 800f082:	4601      	mov	r1, r0
 800f084:	6818      	ldr	r0, [r3, #0]
 800f086:	f000 b825 	b.w	800f0d4 <_malloc_r>
 800f08a:	bf00      	nop
 800f08c:	2400001c 	.word	0x2400001c

0800f090 <sbrk_aligned>:
 800f090:	b570      	push	{r4, r5, r6, lr}
 800f092:	4e0f      	ldr	r6, [pc, #60]	@ (800f0d0 <sbrk_aligned+0x40>)
 800f094:	460c      	mov	r4, r1
 800f096:	6831      	ldr	r1, [r6, #0]
 800f098:	4605      	mov	r5, r0
 800f09a:	b911      	cbnz	r1, 800f0a2 <sbrk_aligned+0x12>
 800f09c:	f000 fe46 	bl	800fd2c <_sbrk_r>
 800f0a0:	6030      	str	r0, [r6, #0]
 800f0a2:	4621      	mov	r1, r4
 800f0a4:	4628      	mov	r0, r5
 800f0a6:	f000 fe41 	bl	800fd2c <_sbrk_r>
 800f0aa:	1c43      	adds	r3, r0, #1
 800f0ac:	d103      	bne.n	800f0b6 <sbrk_aligned+0x26>
 800f0ae:	f04f 34ff 	mov.w	r4, #4294967295
 800f0b2:	4620      	mov	r0, r4
 800f0b4:	bd70      	pop	{r4, r5, r6, pc}
 800f0b6:	1cc4      	adds	r4, r0, #3
 800f0b8:	f024 0403 	bic.w	r4, r4, #3
 800f0bc:	42a0      	cmp	r0, r4
 800f0be:	d0f8      	beq.n	800f0b2 <sbrk_aligned+0x22>
 800f0c0:	1a21      	subs	r1, r4, r0
 800f0c2:	4628      	mov	r0, r5
 800f0c4:	f000 fe32 	bl	800fd2c <_sbrk_r>
 800f0c8:	3001      	adds	r0, #1
 800f0ca:	d1f2      	bne.n	800f0b2 <sbrk_aligned+0x22>
 800f0cc:	e7ef      	b.n	800f0ae <sbrk_aligned+0x1e>
 800f0ce:	bf00      	nop
 800f0d0:	240009b0 	.word	0x240009b0

0800f0d4 <_malloc_r>:
 800f0d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f0d8:	1ccd      	adds	r5, r1, #3
 800f0da:	f025 0503 	bic.w	r5, r5, #3
 800f0de:	3508      	adds	r5, #8
 800f0e0:	2d0c      	cmp	r5, #12
 800f0e2:	bf38      	it	cc
 800f0e4:	250c      	movcc	r5, #12
 800f0e6:	2d00      	cmp	r5, #0
 800f0e8:	4606      	mov	r6, r0
 800f0ea:	db01      	blt.n	800f0f0 <_malloc_r+0x1c>
 800f0ec:	42a9      	cmp	r1, r5
 800f0ee:	d904      	bls.n	800f0fa <_malloc_r+0x26>
 800f0f0:	230c      	movs	r3, #12
 800f0f2:	6033      	str	r3, [r6, #0]
 800f0f4:	2000      	movs	r0, #0
 800f0f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f0fa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f1d0 <_malloc_r+0xfc>
 800f0fe:	f000 f869 	bl	800f1d4 <__malloc_lock>
 800f102:	f8d8 3000 	ldr.w	r3, [r8]
 800f106:	461c      	mov	r4, r3
 800f108:	bb44      	cbnz	r4, 800f15c <_malloc_r+0x88>
 800f10a:	4629      	mov	r1, r5
 800f10c:	4630      	mov	r0, r6
 800f10e:	f7ff ffbf 	bl	800f090 <sbrk_aligned>
 800f112:	1c43      	adds	r3, r0, #1
 800f114:	4604      	mov	r4, r0
 800f116:	d158      	bne.n	800f1ca <_malloc_r+0xf6>
 800f118:	f8d8 4000 	ldr.w	r4, [r8]
 800f11c:	4627      	mov	r7, r4
 800f11e:	2f00      	cmp	r7, #0
 800f120:	d143      	bne.n	800f1aa <_malloc_r+0xd6>
 800f122:	2c00      	cmp	r4, #0
 800f124:	d04b      	beq.n	800f1be <_malloc_r+0xea>
 800f126:	6823      	ldr	r3, [r4, #0]
 800f128:	4639      	mov	r1, r7
 800f12a:	4630      	mov	r0, r6
 800f12c:	eb04 0903 	add.w	r9, r4, r3
 800f130:	f000 fdfc 	bl	800fd2c <_sbrk_r>
 800f134:	4581      	cmp	r9, r0
 800f136:	d142      	bne.n	800f1be <_malloc_r+0xea>
 800f138:	6821      	ldr	r1, [r4, #0]
 800f13a:	1a6d      	subs	r5, r5, r1
 800f13c:	4629      	mov	r1, r5
 800f13e:	4630      	mov	r0, r6
 800f140:	f7ff ffa6 	bl	800f090 <sbrk_aligned>
 800f144:	3001      	adds	r0, #1
 800f146:	d03a      	beq.n	800f1be <_malloc_r+0xea>
 800f148:	6823      	ldr	r3, [r4, #0]
 800f14a:	442b      	add	r3, r5
 800f14c:	6023      	str	r3, [r4, #0]
 800f14e:	f8d8 3000 	ldr.w	r3, [r8]
 800f152:	685a      	ldr	r2, [r3, #4]
 800f154:	bb62      	cbnz	r2, 800f1b0 <_malloc_r+0xdc>
 800f156:	f8c8 7000 	str.w	r7, [r8]
 800f15a:	e00f      	b.n	800f17c <_malloc_r+0xa8>
 800f15c:	6822      	ldr	r2, [r4, #0]
 800f15e:	1b52      	subs	r2, r2, r5
 800f160:	d420      	bmi.n	800f1a4 <_malloc_r+0xd0>
 800f162:	2a0b      	cmp	r2, #11
 800f164:	d917      	bls.n	800f196 <_malloc_r+0xc2>
 800f166:	1961      	adds	r1, r4, r5
 800f168:	42a3      	cmp	r3, r4
 800f16a:	6025      	str	r5, [r4, #0]
 800f16c:	bf18      	it	ne
 800f16e:	6059      	strne	r1, [r3, #4]
 800f170:	6863      	ldr	r3, [r4, #4]
 800f172:	bf08      	it	eq
 800f174:	f8c8 1000 	streq.w	r1, [r8]
 800f178:	5162      	str	r2, [r4, r5]
 800f17a:	604b      	str	r3, [r1, #4]
 800f17c:	4630      	mov	r0, r6
 800f17e:	f000 f82f 	bl	800f1e0 <__malloc_unlock>
 800f182:	f104 000b 	add.w	r0, r4, #11
 800f186:	1d23      	adds	r3, r4, #4
 800f188:	f020 0007 	bic.w	r0, r0, #7
 800f18c:	1ac2      	subs	r2, r0, r3
 800f18e:	bf1c      	itt	ne
 800f190:	1a1b      	subne	r3, r3, r0
 800f192:	50a3      	strne	r3, [r4, r2]
 800f194:	e7af      	b.n	800f0f6 <_malloc_r+0x22>
 800f196:	6862      	ldr	r2, [r4, #4]
 800f198:	42a3      	cmp	r3, r4
 800f19a:	bf0c      	ite	eq
 800f19c:	f8c8 2000 	streq.w	r2, [r8]
 800f1a0:	605a      	strne	r2, [r3, #4]
 800f1a2:	e7eb      	b.n	800f17c <_malloc_r+0xa8>
 800f1a4:	4623      	mov	r3, r4
 800f1a6:	6864      	ldr	r4, [r4, #4]
 800f1a8:	e7ae      	b.n	800f108 <_malloc_r+0x34>
 800f1aa:	463c      	mov	r4, r7
 800f1ac:	687f      	ldr	r7, [r7, #4]
 800f1ae:	e7b6      	b.n	800f11e <_malloc_r+0x4a>
 800f1b0:	461a      	mov	r2, r3
 800f1b2:	685b      	ldr	r3, [r3, #4]
 800f1b4:	42a3      	cmp	r3, r4
 800f1b6:	d1fb      	bne.n	800f1b0 <_malloc_r+0xdc>
 800f1b8:	2300      	movs	r3, #0
 800f1ba:	6053      	str	r3, [r2, #4]
 800f1bc:	e7de      	b.n	800f17c <_malloc_r+0xa8>
 800f1be:	230c      	movs	r3, #12
 800f1c0:	6033      	str	r3, [r6, #0]
 800f1c2:	4630      	mov	r0, r6
 800f1c4:	f000 f80c 	bl	800f1e0 <__malloc_unlock>
 800f1c8:	e794      	b.n	800f0f4 <_malloc_r+0x20>
 800f1ca:	6005      	str	r5, [r0, #0]
 800f1cc:	e7d6      	b.n	800f17c <_malloc_r+0xa8>
 800f1ce:	bf00      	nop
 800f1d0:	240009b4 	.word	0x240009b4

0800f1d4 <__malloc_lock>:
 800f1d4:	4801      	ldr	r0, [pc, #4]	@ (800f1dc <__malloc_lock+0x8>)
 800f1d6:	f7ff b926 	b.w	800e426 <__retarget_lock_acquire_recursive>
 800f1da:	bf00      	nop
 800f1dc:	240009ac 	.word	0x240009ac

0800f1e0 <__malloc_unlock>:
 800f1e0:	4801      	ldr	r0, [pc, #4]	@ (800f1e8 <__malloc_unlock+0x8>)
 800f1e2:	f7ff b921 	b.w	800e428 <__retarget_lock_release_recursive>
 800f1e6:	bf00      	nop
 800f1e8:	240009ac 	.word	0x240009ac

0800f1ec <_Balloc>:
 800f1ec:	b570      	push	{r4, r5, r6, lr}
 800f1ee:	69c6      	ldr	r6, [r0, #28]
 800f1f0:	4604      	mov	r4, r0
 800f1f2:	460d      	mov	r5, r1
 800f1f4:	b976      	cbnz	r6, 800f214 <_Balloc+0x28>
 800f1f6:	2010      	movs	r0, #16
 800f1f8:	f7ff ff42 	bl	800f080 <malloc>
 800f1fc:	4602      	mov	r2, r0
 800f1fe:	61e0      	str	r0, [r4, #28]
 800f200:	b920      	cbnz	r0, 800f20c <_Balloc+0x20>
 800f202:	4b18      	ldr	r3, [pc, #96]	@ (800f264 <_Balloc+0x78>)
 800f204:	4818      	ldr	r0, [pc, #96]	@ (800f268 <_Balloc+0x7c>)
 800f206:	216b      	movs	r1, #107	@ 0x6b
 800f208:	f000 fdae 	bl	800fd68 <__assert_func>
 800f20c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f210:	6006      	str	r6, [r0, #0]
 800f212:	60c6      	str	r6, [r0, #12]
 800f214:	69e6      	ldr	r6, [r4, #28]
 800f216:	68f3      	ldr	r3, [r6, #12]
 800f218:	b183      	cbz	r3, 800f23c <_Balloc+0x50>
 800f21a:	69e3      	ldr	r3, [r4, #28]
 800f21c:	68db      	ldr	r3, [r3, #12]
 800f21e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f222:	b9b8      	cbnz	r0, 800f254 <_Balloc+0x68>
 800f224:	2101      	movs	r1, #1
 800f226:	fa01 f605 	lsl.w	r6, r1, r5
 800f22a:	1d72      	adds	r2, r6, #5
 800f22c:	0092      	lsls	r2, r2, #2
 800f22e:	4620      	mov	r0, r4
 800f230:	f000 fdb8 	bl	800fda4 <_calloc_r>
 800f234:	b160      	cbz	r0, 800f250 <_Balloc+0x64>
 800f236:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f23a:	e00e      	b.n	800f25a <_Balloc+0x6e>
 800f23c:	2221      	movs	r2, #33	@ 0x21
 800f23e:	2104      	movs	r1, #4
 800f240:	4620      	mov	r0, r4
 800f242:	f000 fdaf 	bl	800fda4 <_calloc_r>
 800f246:	69e3      	ldr	r3, [r4, #28]
 800f248:	60f0      	str	r0, [r6, #12]
 800f24a:	68db      	ldr	r3, [r3, #12]
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d1e4      	bne.n	800f21a <_Balloc+0x2e>
 800f250:	2000      	movs	r0, #0
 800f252:	bd70      	pop	{r4, r5, r6, pc}
 800f254:	6802      	ldr	r2, [r0, #0]
 800f256:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f25a:	2300      	movs	r3, #0
 800f25c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f260:	e7f7      	b.n	800f252 <_Balloc+0x66>
 800f262:	bf00      	nop
 800f264:	080106c9 	.word	0x080106c9
 800f268:	08010749 	.word	0x08010749

0800f26c <_Bfree>:
 800f26c:	b570      	push	{r4, r5, r6, lr}
 800f26e:	69c6      	ldr	r6, [r0, #28]
 800f270:	4605      	mov	r5, r0
 800f272:	460c      	mov	r4, r1
 800f274:	b976      	cbnz	r6, 800f294 <_Bfree+0x28>
 800f276:	2010      	movs	r0, #16
 800f278:	f7ff ff02 	bl	800f080 <malloc>
 800f27c:	4602      	mov	r2, r0
 800f27e:	61e8      	str	r0, [r5, #28]
 800f280:	b920      	cbnz	r0, 800f28c <_Bfree+0x20>
 800f282:	4b09      	ldr	r3, [pc, #36]	@ (800f2a8 <_Bfree+0x3c>)
 800f284:	4809      	ldr	r0, [pc, #36]	@ (800f2ac <_Bfree+0x40>)
 800f286:	218f      	movs	r1, #143	@ 0x8f
 800f288:	f000 fd6e 	bl	800fd68 <__assert_func>
 800f28c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f290:	6006      	str	r6, [r0, #0]
 800f292:	60c6      	str	r6, [r0, #12]
 800f294:	b13c      	cbz	r4, 800f2a6 <_Bfree+0x3a>
 800f296:	69eb      	ldr	r3, [r5, #28]
 800f298:	6862      	ldr	r2, [r4, #4]
 800f29a:	68db      	ldr	r3, [r3, #12]
 800f29c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f2a0:	6021      	str	r1, [r4, #0]
 800f2a2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f2a6:	bd70      	pop	{r4, r5, r6, pc}
 800f2a8:	080106c9 	.word	0x080106c9
 800f2ac:	08010749 	.word	0x08010749

0800f2b0 <__multadd>:
 800f2b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2b4:	690d      	ldr	r5, [r1, #16]
 800f2b6:	4607      	mov	r7, r0
 800f2b8:	460c      	mov	r4, r1
 800f2ba:	461e      	mov	r6, r3
 800f2bc:	f101 0c14 	add.w	ip, r1, #20
 800f2c0:	2000      	movs	r0, #0
 800f2c2:	f8dc 3000 	ldr.w	r3, [ip]
 800f2c6:	b299      	uxth	r1, r3
 800f2c8:	fb02 6101 	mla	r1, r2, r1, r6
 800f2cc:	0c1e      	lsrs	r6, r3, #16
 800f2ce:	0c0b      	lsrs	r3, r1, #16
 800f2d0:	fb02 3306 	mla	r3, r2, r6, r3
 800f2d4:	b289      	uxth	r1, r1
 800f2d6:	3001      	adds	r0, #1
 800f2d8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f2dc:	4285      	cmp	r5, r0
 800f2de:	f84c 1b04 	str.w	r1, [ip], #4
 800f2e2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f2e6:	dcec      	bgt.n	800f2c2 <__multadd+0x12>
 800f2e8:	b30e      	cbz	r6, 800f32e <__multadd+0x7e>
 800f2ea:	68a3      	ldr	r3, [r4, #8]
 800f2ec:	42ab      	cmp	r3, r5
 800f2ee:	dc19      	bgt.n	800f324 <__multadd+0x74>
 800f2f0:	6861      	ldr	r1, [r4, #4]
 800f2f2:	4638      	mov	r0, r7
 800f2f4:	3101      	adds	r1, #1
 800f2f6:	f7ff ff79 	bl	800f1ec <_Balloc>
 800f2fa:	4680      	mov	r8, r0
 800f2fc:	b928      	cbnz	r0, 800f30a <__multadd+0x5a>
 800f2fe:	4602      	mov	r2, r0
 800f300:	4b0c      	ldr	r3, [pc, #48]	@ (800f334 <__multadd+0x84>)
 800f302:	480d      	ldr	r0, [pc, #52]	@ (800f338 <__multadd+0x88>)
 800f304:	21ba      	movs	r1, #186	@ 0xba
 800f306:	f000 fd2f 	bl	800fd68 <__assert_func>
 800f30a:	6922      	ldr	r2, [r4, #16]
 800f30c:	3202      	adds	r2, #2
 800f30e:	f104 010c 	add.w	r1, r4, #12
 800f312:	0092      	lsls	r2, r2, #2
 800f314:	300c      	adds	r0, #12
 800f316:	f000 fd19 	bl	800fd4c <memcpy>
 800f31a:	4621      	mov	r1, r4
 800f31c:	4638      	mov	r0, r7
 800f31e:	f7ff ffa5 	bl	800f26c <_Bfree>
 800f322:	4644      	mov	r4, r8
 800f324:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f328:	3501      	adds	r5, #1
 800f32a:	615e      	str	r6, [r3, #20]
 800f32c:	6125      	str	r5, [r4, #16]
 800f32e:	4620      	mov	r0, r4
 800f330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f334:	08010738 	.word	0x08010738
 800f338:	08010749 	.word	0x08010749

0800f33c <__hi0bits>:
 800f33c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800f340:	4603      	mov	r3, r0
 800f342:	bf36      	itet	cc
 800f344:	0403      	lslcc	r3, r0, #16
 800f346:	2000      	movcs	r0, #0
 800f348:	2010      	movcc	r0, #16
 800f34a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f34e:	bf3c      	itt	cc
 800f350:	021b      	lslcc	r3, r3, #8
 800f352:	3008      	addcc	r0, #8
 800f354:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f358:	bf3c      	itt	cc
 800f35a:	011b      	lslcc	r3, r3, #4
 800f35c:	3004      	addcc	r0, #4
 800f35e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f362:	bf3c      	itt	cc
 800f364:	009b      	lslcc	r3, r3, #2
 800f366:	3002      	addcc	r0, #2
 800f368:	2b00      	cmp	r3, #0
 800f36a:	db05      	blt.n	800f378 <__hi0bits+0x3c>
 800f36c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800f370:	f100 0001 	add.w	r0, r0, #1
 800f374:	bf08      	it	eq
 800f376:	2020      	moveq	r0, #32
 800f378:	4770      	bx	lr

0800f37a <__lo0bits>:
 800f37a:	6803      	ldr	r3, [r0, #0]
 800f37c:	4602      	mov	r2, r0
 800f37e:	f013 0007 	ands.w	r0, r3, #7
 800f382:	d00b      	beq.n	800f39c <__lo0bits+0x22>
 800f384:	07d9      	lsls	r1, r3, #31
 800f386:	d421      	bmi.n	800f3cc <__lo0bits+0x52>
 800f388:	0798      	lsls	r0, r3, #30
 800f38a:	bf49      	itett	mi
 800f38c:	085b      	lsrmi	r3, r3, #1
 800f38e:	089b      	lsrpl	r3, r3, #2
 800f390:	2001      	movmi	r0, #1
 800f392:	6013      	strmi	r3, [r2, #0]
 800f394:	bf5c      	itt	pl
 800f396:	6013      	strpl	r3, [r2, #0]
 800f398:	2002      	movpl	r0, #2
 800f39a:	4770      	bx	lr
 800f39c:	b299      	uxth	r1, r3
 800f39e:	b909      	cbnz	r1, 800f3a4 <__lo0bits+0x2a>
 800f3a0:	0c1b      	lsrs	r3, r3, #16
 800f3a2:	2010      	movs	r0, #16
 800f3a4:	b2d9      	uxtb	r1, r3
 800f3a6:	b909      	cbnz	r1, 800f3ac <__lo0bits+0x32>
 800f3a8:	3008      	adds	r0, #8
 800f3aa:	0a1b      	lsrs	r3, r3, #8
 800f3ac:	0719      	lsls	r1, r3, #28
 800f3ae:	bf04      	itt	eq
 800f3b0:	091b      	lsreq	r3, r3, #4
 800f3b2:	3004      	addeq	r0, #4
 800f3b4:	0799      	lsls	r1, r3, #30
 800f3b6:	bf04      	itt	eq
 800f3b8:	089b      	lsreq	r3, r3, #2
 800f3ba:	3002      	addeq	r0, #2
 800f3bc:	07d9      	lsls	r1, r3, #31
 800f3be:	d403      	bmi.n	800f3c8 <__lo0bits+0x4e>
 800f3c0:	085b      	lsrs	r3, r3, #1
 800f3c2:	f100 0001 	add.w	r0, r0, #1
 800f3c6:	d003      	beq.n	800f3d0 <__lo0bits+0x56>
 800f3c8:	6013      	str	r3, [r2, #0]
 800f3ca:	4770      	bx	lr
 800f3cc:	2000      	movs	r0, #0
 800f3ce:	4770      	bx	lr
 800f3d0:	2020      	movs	r0, #32
 800f3d2:	4770      	bx	lr

0800f3d4 <__i2b>:
 800f3d4:	b510      	push	{r4, lr}
 800f3d6:	460c      	mov	r4, r1
 800f3d8:	2101      	movs	r1, #1
 800f3da:	f7ff ff07 	bl	800f1ec <_Balloc>
 800f3de:	4602      	mov	r2, r0
 800f3e0:	b928      	cbnz	r0, 800f3ee <__i2b+0x1a>
 800f3e2:	4b05      	ldr	r3, [pc, #20]	@ (800f3f8 <__i2b+0x24>)
 800f3e4:	4805      	ldr	r0, [pc, #20]	@ (800f3fc <__i2b+0x28>)
 800f3e6:	f240 1145 	movw	r1, #325	@ 0x145
 800f3ea:	f000 fcbd 	bl	800fd68 <__assert_func>
 800f3ee:	2301      	movs	r3, #1
 800f3f0:	6144      	str	r4, [r0, #20]
 800f3f2:	6103      	str	r3, [r0, #16]
 800f3f4:	bd10      	pop	{r4, pc}
 800f3f6:	bf00      	nop
 800f3f8:	08010738 	.word	0x08010738
 800f3fc:	08010749 	.word	0x08010749

0800f400 <__multiply>:
 800f400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f404:	4614      	mov	r4, r2
 800f406:	690a      	ldr	r2, [r1, #16]
 800f408:	6923      	ldr	r3, [r4, #16]
 800f40a:	429a      	cmp	r2, r3
 800f40c:	bfa8      	it	ge
 800f40e:	4623      	movge	r3, r4
 800f410:	460f      	mov	r7, r1
 800f412:	bfa4      	itt	ge
 800f414:	460c      	movge	r4, r1
 800f416:	461f      	movge	r7, r3
 800f418:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800f41c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800f420:	68a3      	ldr	r3, [r4, #8]
 800f422:	6861      	ldr	r1, [r4, #4]
 800f424:	eb0a 0609 	add.w	r6, sl, r9
 800f428:	42b3      	cmp	r3, r6
 800f42a:	b085      	sub	sp, #20
 800f42c:	bfb8      	it	lt
 800f42e:	3101      	addlt	r1, #1
 800f430:	f7ff fedc 	bl	800f1ec <_Balloc>
 800f434:	b930      	cbnz	r0, 800f444 <__multiply+0x44>
 800f436:	4602      	mov	r2, r0
 800f438:	4b44      	ldr	r3, [pc, #272]	@ (800f54c <__multiply+0x14c>)
 800f43a:	4845      	ldr	r0, [pc, #276]	@ (800f550 <__multiply+0x150>)
 800f43c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800f440:	f000 fc92 	bl	800fd68 <__assert_func>
 800f444:	f100 0514 	add.w	r5, r0, #20
 800f448:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f44c:	462b      	mov	r3, r5
 800f44e:	2200      	movs	r2, #0
 800f450:	4543      	cmp	r3, r8
 800f452:	d321      	bcc.n	800f498 <__multiply+0x98>
 800f454:	f107 0114 	add.w	r1, r7, #20
 800f458:	f104 0214 	add.w	r2, r4, #20
 800f45c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800f460:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800f464:	9302      	str	r3, [sp, #8]
 800f466:	1b13      	subs	r3, r2, r4
 800f468:	3b15      	subs	r3, #21
 800f46a:	f023 0303 	bic.w	r3, r3, #3
 800f46e:	3304      	adds	r3, #4
 800f470:	f104 0715 	add.w	r7, r4, #21
 800f474:	42ba      	cmp	r2, r7
 800f476:	bf38      	it	cc
 800f478:	2304      	movcc	r3, #4
 800f47a:	9301      	str	r3, [sp, #4]
 800f47c:	9b02      	ldr	r3, [sp, #8]
 800f47e:	9103      	str	r1, [sp, #12]
 800f480:	428b      	cmp	r3, r1
 800f482:	d80c      	bhi.n	800f49e <__multiply+0x9e>
 800f484:	2e00      	cmp	r6, #0
 800f486:	dd03      	ble.n	800f490 <__multiply+0x90>
 800f488:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d05b      	beq.n	800f548 <__multiply+0x148>
 800f490:	6106      	str	r6, [r0, #16]
 800f492:	b005      	add	sp, #20
 800f494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f498:	f843 2b04 	str.w	r2, [r3], #4
 800f49c:	e7d8      	b.n	800f450 <__multiply+0x50>
 800f49e:	f8b1 a000 	ldrh.w	sl, [r1]
 800f4a2:	f1ba 0f00 	cmp.w	sl, #0
 800f4a6:	d024      	beq.n	800f4f2 <__multiply+0xf2>
 800f4a8:	f104 0e14 	add.w	lr, r4, #20
 800f4ac:	46a9      	mov	r9, r5
 800f4ae:	f04f 0c00 	mov.w	ip, #0
 800f4b2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f4b6:	f8d9 3000 	ldr.w	r3, [r9]
 800f4ba:	fa1f fb87 	uxth.w	fp, r7
 800f4be:	b29b      	uxth	r3, r3
 800f4c0:	fb0a 330b 	mla	r3, sl, fp, r3
 800f4c4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800f4c8:	f8d9 7000 	ldr.w	r7, [r9]
 800f4cc:	4463      	add	r3, ip
 800f4ce:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800f4d2:	fb0a c70b 	mla	r7, sl, fp, ip
 800f4d6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800f4da:	b29b      	uxth	r3, r3
 800f4dc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800f4e0:	4572      	cmp	r2, lr
 800f4e2:	f849 3b04 	str.w	r3, [r9], #4
 800f4e6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800f4ea:	d8e2      	bhi.n	800f4b2 <__multiply+0xb2>
 800f4ec:	9b01      	ldr	r3, [sp, #4]
 800f4ee:	f845 c003 	str.w	ip, [r5, r3]
 800f4f2:	9b03      	ldr	r3, [sp, #12]
 800f4f4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800f4f8:	3104      	adds	r1, #4
 800f4fa:	f1b9 0f00 	cmp.w	r9, #0
 800f4fe:	d021      	beq.n	800f544 <__multiply+0x144>
 800f500:	682b      	ldr	r3, [r5, #0]
 800f502:	f104 0c14 	add.w	ip, r4, #20
 800f506:	46ae      	mov	lr, r5
 800f508:	f04f 0a00 	mov.w	sl, #0
 800f50c:	f8bc b000 	ldrh.w	fp, [ip]
 800f510:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800f514:	fb09 770b 	mla	r7, r9, fp, r7
 800f518:	4457      	add	r7, sl
 800f51a:	b29b      	uxth	r3, r3
 800f51c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800f520:	f84e 3b04 	str.w	r3, [lr], #4
 800f524:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f528:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f52c:	f8be 3000 	ldrh.w	r3, [lr]
 800f530:	fb09 330a 	mla	r3, r9, sl, r3
 800f534:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800f538:	4562      	cmp	r2, ip
 800f53a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f53e:	d8e5      	bhi.n	800f50c <__multiply+0x10c>
 800f540:	9f01      	ldr	r7, [sp, #4]
 800f542:	51eb      	str	r3, [r5, r7]
 800f544:	3504      	adds	r5, #4
 800f546:	e799      	b.n	800f47c <__multiply+0x7c>
 800f548:	3e01      	subs	r6, #1
 800f54a:	e79b      	b.n	800f484 <__multiply+0x84>
 800f54c:	08010738 	.word	0x08010738
 800f550:	08010749 	.word	0x08010749

0800f554 <__pow5mult>:
 800f554:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f558:	4615      	mov	r5, r2
 800f55a:	f012 0203 	ands.w	r2, r2, #3
 800f55e:	4607      	mov	r7, r0
 800f560:	460e      	mov	r6, r1
 800f562:	d007      	beq.n	800f574 <__pow5mult+0x20>
 800f564:	4c25      	ldr	r4, [pc, #148]	@ (800f5fc <__pow5mult+0xa8>)
 800f566:	3a01      	subs	r2, #1
 800f568:	2300      	movs	r3, #0
 800f56a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f56e:	f7ff fe9f 	bl	800f2b0 <__multadd>
 800f572:	4606      	mov	r6, r0
 800f574:	10ad      	asrs	r5, r5, #2
 800f576:	d03d      	beq.n	800f5f4 <__pow5mult+0xa0>
 800f578:	69fc      	ldr	r4, [r7, #28]
 800f57a:	b97c      	cbnz	r4, 800f59c <__pow5mult+0x48>
 800f57c:	2010      	movs	r0, #16
 800f57e:	f7ff fd7f 	bl	800f080 <malloc>
 800f582:	4602      	mov	r2, r0
 800f584:	61f8      	str	r0, [r7, #28]
 800f586:	b928      	cbnz	r0, 800f594 <__pow5mult+0x40>
 800f588:	4b1d      	ldr	r3, [pc, #116]	@ (800f600 <__pow5mult+0xac>)
 800f58a:	481e      	ldr	r0, [pc, #120]	@ (800f604 <__pow5mult+0xb0>)
 800f58c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800f590:	f000 fbea 	bl	800fd68 <__assert_func>
 800f594:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f598:	6004      	str	r4, [r0, #0]
 800f59a:	60c4      	str	r4, [r0, #12]
 800f59c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800f5a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f5a4:	b94c      	cbnz	r4, 800f5ba <__pow5mult+0x66>
 800f5a6:	f240 2171 	movw	r1, #625	@ 0x271
 800f5aa:	4638      	mov	r0, r7
 800f5ac:	f7ff ff12 	bl	800f3d4 <__i2b>
 800f5b0:	2300      	movs	r3, #0
 800f5b2:	f8c8 0008 	str.w	r0, [r8, #8]
 800f5b6:	4604      	mov	r4, r0
 800f5b8:	6003      	str	r3, [r0, #0]
 800f5ba:	f04f 0900 	mov.w	r9, #0
 800f5be:	07eb      	lsls	r3, r5, #31
 800f5c0:	d50a      	bpl.n	800f5d8 <__pow5mult+0x84>
 800f5c2:	4631      	mov	r1, r6
 800f5c4:	4622      	mov	r2, r4
 800f5c6:	4638      	mov	r0, r7
 800f5c8:	f7ff ff1a 	bl	800f400 <__multiply>
 800f5cc:	4631      	mov	r1, r6
 800f5ce:	4680      	mov	r8, r0
 800f5d0:	4638      	mov	r0, r7
 800f5d2:	f7ff fe4b 	bl	800f26c <_Bfree>
 800f5d6:	4646      	mov	r6, r8
 800f5d8:	106d      	asrs	r5, r5, #1
 800f5da:	d00b      	beq.n	800f5f4 <__pow5mult+0xa0>
 800f5dc:	6820      	ldr	r0, [r4, #0]
 800f5de:	b938      	cbnz	r0, 800f5f0 <__pow5mult+0x9c>
 800f5e0:	4622      	mov	r2, r4
 800f5e2:	4621      	mov	r1, r4
 800f5e4:	4638      	mov	r0, r7
 800f5e6:	f7ff ff0b 	bl	800f400 <__multiply>
 800f5ea:	6020      	str	r0, [r4, #0]
 800f5ec:	f8c0 9000 	str.w	r9, [r0]
 800f5f0:	4604      	mov	r4, r0
 800f5f2:	e7e4      	b.n	800f5be <__pow5mult+0x6a>
 800f5f4:	4630      	mov	r0, r6
 800f5f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f5fa:	bf00      	nop
 800f5fc:	080107a4 	.word	0x080107a4
 800f600:	080106c9 	.word	0x080106c9
 800f604:	08010749 	.word	0x08010749

0800f608 <__lshift>:
 800f608:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f60c:	460c      	mov	r4, r1
 800f60e:	6849      	ldr	r1, [r1, #4]
 800f610:	6923      	ldr	r3, [r4, #16]
 800f612:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f616:	68a3      	ldr	r3, [r4, #8]
 800f618:	4607      	mov	r7, r0
 800f61a:	4691      	mov	r9, r2
 800f61c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f620:	f108 0601 	add.w	r6, r8, #1
 800f624:	42b3      	cmp	r3, r6
 800f626:	db0b      	blt.n	800f640 <__lshift+0x38>
 800f628:	4638      	mov	r0, r7
 800f62a:	f7ff fddf 	bl	800f1ec <_Balloc>
 800f62e:	4605      	mov	r5, r0
 800f630:	b948      	cbnz	r0, 800f646 <__lshift+0x3e>
 800f632:	4602      	mov	r2, r0
 800f634:	4b28      	ldr	r3, [pc, #160]	@ (800f6d8 <__lshift+0xd0>)
 800f636:	4829      	ldr	r0, [pc, #164]	@ (800f6dc <__lshift+0xd4>)
 800f638:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800f63c:	f000 fb94 	bl	800fd68 <__assert_func>
 800f640:	3101      	adds	r1, #1
 800f642:	005b      	lsls	r3, r3, #1
 800f644:	e7ee      	b.n	800f624 <__lshift+0x1c>
 800f646:	2300      	movs	r3, #0
 800f648:	f100 0114 	add.w	r1, r0, #20
 800f64c:	f100 0210 	add.w	r2, r0, #16
 800f650:	4618      	mov	r0, r3
 800f652:	4553      	cmp	r3, sl
 800f654:	db33      	blt.n	800f6be <__lshift+0xb6>
 800f656:	6920      	ldr	r0, [r4, #16]
 800f658:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f65c:	f104 0314 	add.w	r3, r4, #20
 800f660:	f019 091f 	ands.w	r9, r9, #31
 800f664:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f668:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f66c:	d02b      	beq.n	800f6c6 <__lshift+0xbe>
 800f66e:	f1c9 0e20 	rsb	lr, r9, #32
 800f672:	468a      	mov	sl, r1
 800f674:	2200      	movs	r2, #0
 800f676:	6818      	ldr	r0, [r3, #0]
 800f678:	fa00 f009 	lsl.w	r0, r0, r9
 800f67c:	4310      	orrs	r0, r2
 800f67e:	f84a 0b04 	str.w	r0, [sl], #4
 800f682:	f853 2b04 	ldr.w	r2, [r3], #4
 800f686:	459c      	cmp	ip, r3
 800f688:	fa22 f20e 	lsr.w	r2, r2, lr
 800f68c:	d8f3      	bhi.n	800f676 <__lshift+0x6e>
 800f68e:	ebac 0304 	sub.w	r3, ip, r4
 800f692:	3b15      	subs	r3, #21
 800f694:	f023 0303 	bic.w	r3, r3, #3
 800f698:	3304      	adds	r3, #4
 800f69a:	f104 0015 	add.w	r0, r4, #21
 800f69e:	4584      	cmp	ip, r0
 800f6a0:	bf38      	it	cc
 800f6a2:	2304      	movcc	r3, #4
 800f6a4:	50ca      	str	r2, [r1, r3]
 800f6a6:	b10a      	cbz	r2, 800f6ac <__lshift+0xa4>
 800f6a8:	f108 0602 	add.w	r6, r8, #2
 800f6ac:	3e01      	subs	r6, #1
 800f6ae:	4638      	mov	r0, r7
 800f6b0:	612e      	str	r6, [r5, #16]
 800f6b2:	4621      	mov	r1, r4
 800f6b4:	f7ff fdda 	bl	800f26c <_Bfree>
 800f6b8:	4628      	mov	r0, r5
 800f6ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f6be:	f842 0f04 	str.w	r0, [r2, #4]!
 800f6c2:	3301      	adds	r3, #1
 800f6c4:	e7c5      	b.n	800f652 <__lshift+0x4a>
 800f6c6:	3904      	subs	r1, #4
 800f6c8:	f853 2b04 	ldr.w	r2, [r3], #4
 800f6cc:	f841 2f04 	str.w	r2, [r1, #4]!
 800f6d0:	459c      	cmp	ip, r3
 800f6d2:	d8f9      	bhi.n	800f6c8 <__lshift+0xc0>
 800f6d4:	e7ea      	b.n	800f6ac <__lshift+0xa4>
 800f6d6:	bf00      	nop
 800f6d8:	08010738 	.word	0x08010738
 800f6dc:	08010749 	.word	0x08010749

0800f6e0 <__mcmp>:
 800f6e0:	690a      	ldr	r2, [r1, #16]
 800f6e2:	4603      	mov	r3, r0
 800f6e4:	6900      	ldr	r0, [r0, #16]
 800f6e6:	1a80      	subs	r0, r0, r2
 800f6e8:	b530      	push	{r4, r5, lr}
 800f6ea:	d10e      	bne.n	800f70a <__mcmp+0x2a>
 800f6ec:	3314      	adds	r3, #20
 800f6ee:	3114      	adds	r1, #20
 800f6f0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800f6f4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800f6f8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f6fc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f700:	4295      	cmp	r5, r2
 800f702:	d003      	beq.n	800f70c <__mcmp+0x2c>
 800f704:	d205      	bcs.n	800f712 <__mcmp+0x32>
 800f706:	f04f 30ff 	mov.w	r0, #4294967295
 800f70a:	bd30      	pop	{r4, r5, pc}
 800f70c:	42a3      	cmp	r3, r4
 800f70e:	d3f3      	bcc.n	800f6f8 <__mcmp+0x18>
 800f710:	e7fb      	b.n	800f70a <__mcmp+0x2a>
 800f712:	2001      	movs	r0, #1
 800f714:	e7f9      	b.n	800f70a <__mcmp+0x2a>
	...

0800f718 <__mdiff>:
 800f718:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f71c:	4689      	mov	r9, r1
 800f71e:	4606      	mov	r6, r0
 800f720:	4611      	mov	r1, r2
 800f722:	4648      	mov	r0, r9
 800f724:	4614      	mov	r4, r2
 800f726:	f7ff ffdb 	bl	800f6e0 <__mcmp>
 800f72a:	1e05      	subs	r5, r0, #0
 800f72c:	d112      	bne.n	800f754 <__mdiff+0x3c>
 800f72e:	4629      	mov	r1, r5
 800f730:	4630      	mov	r0, r6
 800f732:	f7ff fd5b 	bl	800f1ec <_Balloc>
 800f736:	4602      	mov	r2, r0
 800f738:	b928      	cbnz	r0, 800f746 <__mdiff+0x2e>
 800f73a:	4b3f      	ldr	r3, [pc, #252]	@ (800f838 <__mdiff+0x120>)
 800f73c:	f240 2137 	movw	r1, #567	@ 0x237
 800f740:	483e      	ldr	r0, [pc, #248]	@ (800f83c <__mdiff+0x124>)
 800f742:	f000 fb11 	bl	800fd68 <__assert_func>
 800f746:	2301      	movs	r3, #1
 800f748:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f74c:	4610      	mov	r0, r2
 800f74e:	b003      	add	sp, #12
 800f750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f754:	bfbc      	itt	lt
 800f756:	464b      	movlt	r3, r9
 800f758:	46a1      	movlt	r9, r4
 800f75a:	4630      	mov	r0, r6
 800f75c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800f760:	bfba      	itte	lt
 800f762:	461c      	movlt	r4, r3
 800f764:	2501      	movlt	r5, #1
 800f766:	2500      	movge	r5, #0
 800f768:	f7ff fd40 	bl	800f1ec <_Balloc>
 800f76c:	4602      	mov	r2, r0
 800f76e:	b918      	cbnz	r0, 800f778 <__mdiff+0x60>
 800f770:	4b31      	ldr	r3, [pc, #196]	@ (800f838 <__mdiff+0x120>)
 800f772:	f240 2145 	movw	r1, #581	@ 0x245
 800f776:	e7e3      	b.n	800f740 <__mdiff+0x28>
 800f778:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800f77c:	6926      	ldr	r6, [r4, #16]
 800f77e:	60c5      	str	r5, [r0, #12]
 800f780:	f109 0310 	add.w	r3, r9, #16
 800f784:	f109 0514 	add.w	r5, r9, #20
 800f788:	f104 0e14 	add.w	lr, r4, #20
 800f78c:	f100 0b14 	add.w	fp, r0, #20
 800f790:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800f794:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800f798:	9301      	str	r3, [sp, #4]
 800f79a:	46d9      	mov	r9, fp
 800f79c:	f04f 0c00 	mov.w	ip, #0
 800f7a0:	9b01      	ldr	r3, [sp, #4]
 800f7a2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800f7a6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800f7aa:	9301      	str	r3, [sp, #4]
 800f7ac:	fa1f f38a 	uxth.w	r3, sl
 800f7b0:	4619      	mov	r1, r3
 800f7b2:	b283      	uxth	r3, r0
 800f7b4:	1acb      	subs	r3, r1, r3
 800f7b6:	0c00      	lsrs	r0, r0, #16
 800f7b8:	4463      	add	r3, ip
 800f7ba:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800f7be:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800f7c2:	b29b      	uxth	r3, r3
 800f7c4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800f7c8:	4576      	cmp	r6, lr
 800f7ca:	f849 3b04 	str.w	r3, [r9], #4
 800f7ce:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f7d2:	d8e5      	bhi.n	800f7a0 <__mdiff+0x88>
 800f7d4:	1b33      	subs	r3, r6, r4
 800f7d6:	3b15      	subs	r3, #21
 800f7d8:	f023 0303 	bic.w	r3, r3, #3
 800f7dc:	3415      	adds	r4, #21
 800f7de:	3304      	adds	r3, #4
 800f7e0:	42a6      	cmp	r6, r4
 800f7e2:	bf38      	it	cc
 800f7e4:	2304      	movcc	r3, #4
 800f7e6:	441d      	add	r5, r3
 800f7e8:	445b      	add	r3, fp
 800f7ea:	461e      	mov	r6, r3
 800f7ec:	462c      	mov	r4, r5
 800f7ee:	4544      	cmp	r4, r8
 800f7f0:	d30e      	bcc.n	800f810 <__mdiff+0xf8>
 800f7f2:	f108 0103 	add.w	r1, r8, #3
 800f7f6:	1b49      	subs	r1, r1, r5
 800f7f8:	f021 0103 	bic.w	r1, r1, #3
 800f7fc:	3d03      	subs	r5, #3
 800f7fe:	45a8      	cmp	r8, r5
 800f800:	bf38      	it	cc
 800f802:	2100      	movcc	r1, #0
 800f804:	440b      	add	r3, r1
 800f806:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f80a:	b191      	cbz	r1, 800f832 <__mdiff+0x11a>
 800f80c:	6117      	str	r7, [r2, #16]
 800f80e:	e79d      	b.n	800f74c <__mdiff+0x34>
 800f810:	f854 1b04 	ldr.w	r1, [r4], #4
 800f814:	46e6      	mov	lr, ip
 800f816:	0c08      	lsrs	r0, r1, #16
 800f818:	fa1c fc81 	uxtah	ip, ip, r1
 800f81c:	4471      	add	r1, lr
 800f81e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800f822:	b289      	uxth	r1, r1
 800f824:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800f828:	f846 1b04 	str.w	r1, [r6], #4
 800f82c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f830:	e7dd      	b.n	800f7ee <__mdiff+0xd6>
 800f832:	3f01      	subs	r7, #1
 800f834:	e7e7      	b.n	800f806 <__mdiff+0xee>
 800f836:	bf00      	nop
 800f838:	08010738 	.word	0x08010738
 800f83c:	08010749 	.word	0x08010749

0800f840 <__d2b>:
 800f840:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f844:	460f      	mov	r7, r1
 800f846:	2101      	movs	r1, #1
 800f848:	ec59 8b10 	vmov	r8, r9, d0
 800f84c:	4616      	mov	r6, r2
 800f84e:	f7ff fccd 	bl	800f1ec <_Balloc>
 800f852:	4604      	mov	r4, r0
 800f854:	b930      	cbnz	r0, 800f864 <__d2b+0x24>
 800f856:	4602      	mov	r2, r0
 800f858:	4b23      	ldr	r3, [pc, #140]	@ (800f8e8 <__d2b+0xa8>)
 800f85a:	4824      	ldr	r0, [pc, #144]	@ (800f8ec <__d2b+0xac>)
 800f85c:	f240 310f 	movw	r1, #783	@ 0x30f
 800f860:	f000 fa82 	bl	800fd68 <__assert_func>
 800f864:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f868:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f86c:	b10d      	cbz	r5, 800f872 <__d2b+0x32>
 800f86e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f872:	9301      	str	r3, [sp, #4]
 800f874:	f1b8 0300 	subs.w	r3, r8, #0
 800f878:	d023      	beq.n	800f8c2 <__d2b+0x82>
 800f87a:	4668      	mov	r0, sp
 800f87c:	9300      	str	r3, [sp, #0]
 800f87e:	f7ff fd7c 	bl	800f37a <__lo0bits>
 800f882:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f886:	b1d0      	cbz	r0, 800f8be <__d2b+0x7e>
 800f888:	f1c0 0320 	rsb	r3, r0, #32
 800f88c:	fa02 f303 	lsl.w	r3, r2, r3
 800f890:	430b      	orrs	r3, r1
 800f892:	40c2      	lsrs	r2, r0
 800f894:	6163      	str	r3, [r4, #20]
 800f896:	9201      	str	r2, [sp, #4]
 800f898:	9b01      	ldr	r3, [sp, #4]
 800f89a:	61a3      	str	r3, [r4, #24]
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	bf0c      	ite	eq
 800f8a0:	2201      	moveq	r2, #1
 800f8a2:	2202      	movne	r2, #2
 800f8a4:	6122      	str	r2, [r4, #16]
 800f8a6:	b1a5      	cbz	r5, 800f8d2 <__d2b+0x92>
 800f8a8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800f8ac:	4405      	add	r5, r0
 800f8ae:	603d      	str	r5, [r7, #0]
 800f8b0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800f8b4:	6030      	str	r0, [r6, #0]
 800f8b6:	4620      	mov	r0, r4
 800f8b8:	b003      	add	sp, #12
 800f8ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f8be:	6161      	str	r1, [r4, #20]
 800f8c0:	e7ea      	b.n	800f898 <__d2b+0x58>
 800f8c2:	a801      	add	r0, sp, #4
 800f8c4:	f7ff fd59 	bl	800f37a <__lo0bits>
 800f8c8:	9b01      	ldr	r3, [sp, #4]
 800f8ca:	6163      	str	r3, [r4, #20]
 800f8cc:	3020      	adds	r0, #32
 800f8ce:	2201      	movs	r2, #1
 800f8d0:	e7e8      	b.n	800f8a4 <__d2b+0x64>
 800f8d2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f8d6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800f8da:	6038      	str	r0, [r7, #0]
 800f8dc:	6918      	ldr	r0, [r3, #16]
 800f8de:	f7ff fd2d 	bl	800f33c <__hi0bits>
 800f8e2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f8e6:	e7e5      	b.n	800f8b4 <__d2b+0x74>
 800f8e8:	08010738 	.word	0x08010738
 800f8ec:	08010749 	.word	0x08010749

0800f8f0 <__ssputs_r>:
 800f8f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f8f4:	688e      	ldr	r6, [r1, #8]
 800f8f6:	461f      	mov	r7, r3
 800f8f8:	42be      	cmp	r6, r7
 800f8fa:	680b      	ldr	r3, [r1, #0]
 800f8fc:	4682      	mov	sl, r0
 800f8fe:	460c      	mov	r4, r1
 800f900:	4690      	mov	r8, r2
 800f902:	d82d      	bhi.n	800f960 <__ssputs_r+0x70>
 800f904:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f908:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f90c:	d026      	beq.n	800f95c <__ssputs_r+0x6c>
 800f90e:	6965      	ldr	r5, [r4, #20]
 800f910:	6909      	ldr	r1, [r1, #16]
 800f912:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f916:	eba3 0901 	sub.w	r9, r3, r1
 800f91a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f91e:	1c7b      	adds	r3, r7, #1
 800f920:	444b      	add	r3, r9
 800f922:	106d      	asrs	r5, r5, #1
 800f924:	429d      	cmp	r5, r3
 800f926:	bf38      	it	cc
 800f928:	461d      	movcc	r5, r3
 800f92a:	0553      	lsls	r3, r2, #21
 800f92c:	d527      	bpl.n	800f97e <__ssputs_r+0x8e>
 800f92e:	4629      	mov	r1, r5
 800f930:	f7ff fbd0 	bl	800f0d4 <_malloc_r>
 800f934:	4606      	mov	r6, r0
 800f936:	b360      	cbz	r0, 800f992 <__ssputs_r+0xa2>
 800f938:	6921      	ldr	r1, [r4, #16]
 800f93a:	464a      	mov	r2, r9
 800f93c:	f000 fa06 	bl	800fd4c <memcpy>
 800f940:	89a3      	ldrh	r3, [r4, #12]
 800f942:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f946:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f94a:	81a3      	strh	r3, [r4, #12]
 800f94c:	6126      	str	r6, [r4, #16]
 800f94e:	6165      	str	r5, [r4, #20]
 800f950:	444e      	add	r6, r9
 800f952:	eba5 0509 	sub.w	r5, r5, r9
 800f956:	6026      	str	r6, [r4, #0]
 800f958:	60a5      	str	r5, [r4, #8]
 800f95a:	463e      	mov	r6, r7
 800f95c:	42be      	cmp	r6, r7
 800f95e:	d900      	bls.n	800f962 <__ssputs_r+0x72>
 800f960:	463e      	mov	r6, r7
 800f962:	6820      	ldr	r0, [r4, #0]
 800f964:	4632      	mov	r2, r6
 800f966:	4641      	mov	r1, r8
 800f968:	f000 f9c6 	bl	800fcf8 <memmove>
 800f96c:	68a3      	ldr	r3, [r4, #8]
 800f96e:	1b9b      	subs	r3, r3, r6
 800f970:	60a3      	str	r3, [r4, #8]
 800f972:	6823      	ldr	r3, [r4, #0]
 800f974:	4433      	add	r3, r6
 800f976:	6023      	str	r3, [r4, #0]
 800f978:	2000      	movs	r0, #0
 800f97a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f97e:	462a      	mov	r2, r5
 800f980:	f000 fa36 	bl	800fdf0 <_realloc_r>
 800f984:	4606      	mov	r6, r0
 800f986:	2800      	cmp	r0, #0
 800f988:	d1e0      	bne.n	800f94c <__ssputs_r+0x5c>
 800f98a:	6921      	ldr	r1, [r4, #16]
 800f98c:	4650      	mov	r0, sl
 800f98e:	f7ff fb2d 	bl	800efec <_free_r>
 800f992:	230c      	movs	r3, #12
 800f994:	f8ca 3000 	str.w	r3, [sl]
 800f998:	89a3      	ldrh	r3, [r4, #12]
 800f99a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f99e:	81a3      	strh	r3, [r4, #12]
 800f9a0:	f04f 30ff 	mov.w	r0, #4294967295
 800f9a4:	e7e9      	b.n	800f97a <__ssputs_r+0x8a>
	...

0800f9a8 <_svfiprintf_r>:
 800f9a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9ac:	4698      	mov	r8, r3
 800f9ae:	898b      	ldrh	r3, [r1, #12]
 800f9b0:	061b      	lsls	r3, r3, #24
 800f9b2:	b09d      	sub	sp, #116	@ 0x74
 800f9b4:	4607      	mov	r7, r0
 800f9b6:	460d      	mov	r5, r1
 800f9b8:	4614      	mov	r4, r2
 800f9ba:	d510      	bpl.n	800f9de <_svfiprintf_r+0x36>
 800f9bc:	690b      	ldr	r3, [r1, #16]
 800f9be:	b973      	cbnz	r3, 800f9de <_svfiprintf_r+0x36>
 800f9c0:	2140      	movs	r1, #64	@ 0x40
 800f9c2:	f7ff fb87 	bl	800f0d4 <_malloc_r>
 800f9c6:	6028      	str	r0, [r5, #0]
 800f9c8:	6128      	str	r0, [r5, #16]
 800f9ca:	b930      	cbnz	r0, 800f9da <_svfiprintf_r+0x32>
 800f9cc:	230c      	movs	r3, #12
 800f9ce:	603b      	str	r3, [r7, #0]
 800f9d0:	f04f 30ff 	mov.w	r0, #4294967295
 800f9d4:	b01d      	add	sp, #116	@ 0x74
 800f9d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9da:	2340      	movs	r3, #64	@ 0x40
 800f9dc:	616b      	str	r3, [r5, #20]
 800f9de:	2300      	movs	r3, #0
 800f9e0:	9309      	str	r3, [sp, #36]	@ 0x24
 800f9e2:	2320      	movs	r3, #32
 800f9e4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f9e8:	f8cd 800c 	str.w	r8, [sp, #12]
 800f9ec:	2330      	movs	r3, #48	@ 0x30
 800f9ee:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800fb8c <_svfiprintf_r+0x1e4>
 800f9f2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f9f6:	f04f 0901 	mov.w	r9, #1
 800f9fa:	4623      	mov	r3, r4
 800f9fc:	469a      	mov	sl, r3
 800f9fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fa02:	b10a      	cbz	r2, 800fa08 <_svfiprintf_r+0x60>
 800fa04:	2a25      	cmp	r2, #37	@ 0x25
 800fa06:	d1f9      	bne.n	800f9fc <_svfiprintf_r+0x54>
 800fa08:	ebba 0b04 	subs.w	fp, sl, r4
 800fa0c:	d00b      	beq.n	800fa26 <_svfiprintf_r+0x7e>
 800fa0e:	465b      	mov	r3, fp
 800fa10:	4622      	mov	r2, r4
 800fa12:	4629      	mov	r1, r5
 800fa14:	4638      	mov	r0, r7
 800fa16:	f7ff ff6b 	bl	800f8f0 <__ssputs_r>
 800fa1a:	3001      	adds	r0, #1
 800fa1c:	f000 80a7 	beq.w	800fb6e <_svfiprintf_r+0x1c6>
 800fa20:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fa22:	445a      	add	r2, fp
 800fa24:	9209      	str	r2, [sp, #36]	@ 0x24
 800fa26:	f89a 3000 	ldrb.w	r3, [sl]
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	f000 809f 	beq.w	800fb6e <_svfiprintf_r+0x1c6>
 800fa30:	2300      	movs	r3, #0
 800fa32:	f04f 32ff 	mov.w	r2, #4294967295
 800fa36:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fa3a:	f10a 0a01 	add.w	sl, sl, #1
 800fa3e:	9304      	str	r3, [sp, #16]
 800fa40:	9307      	str	r3, [sp, #28]
 800fa42:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800fa46:	931a      	str	r3, [sp, #104]	@ 0x68
 800fa48:	4654      	mov	r4, sl
 800fa4a:	2205      	movs	r2, #5
 800fa4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa50:	484e      	ldr	r0, [pc, #312]	@ (800fb8c <_svfiprintf_r+0x1e4>)
 800fa52:	f7f0 fc45 	bl	80002e0 <memchr>
 800fa56:	9a04      	ldr	r2, [sp, #16]
 800fa58:	b9d8      	cbnz	r0, 800fa92 <_svfiprintf_r+0xea>
 800fa5a:	06d0      	lsls	r0, r2, #27
 800fa5c:	bf44      	itt	mi
 800fa5e:	2320      	movmi	r3, #32
 800fa60:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fa64:	0711      	lsls	r1, r2, #28
 800fa66:	bf44      	itt	mi
 800fa68:	232b      	movmi	r3, #43	@ 0x2b
 800fa6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fa6e:	f89a 3000 	ldrb.w	r3, [sl]
 800fa72:	2b2a      	cmp	r3, #42	@ 0x2a
 800fa74:	d015      	beq.n	800faa2 <_svfiprintf_r+0xfa>
 800fa76:	9a07      	ldr	r2, [sp, #28]
 800fa78:	4654      	mov	r4, sl
 800fa7a:	2000      	movs	r0, #0
 800fa7c:	f04f 0c0a 	mov.w	ip, #10
 800fa80:	4621      	mov	r1, r4
 800fa82:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fa86:	3b30      	subs	r3, #48	@ 0x30
 800fa88:	2b09      	cmp	r3, #9
 800fa8a:	d94b      	bls.n	800fb24 <_svfiprintf_r+0x17c>
 800fa8c:	b1b0      	cbz	r0, 800fabc <_svfiprintf_r+0x114>
 800fa8e:	9207      	str	r2, [sp, #28]
 800fa90:	e014      	b.n	800fabc <_svfiprintf_r+0x114>
 800fa92:	eba0 0308 	sub.w	r3, r0, r8
 800fa96:	fa09 f303 	lsl.w	r3, r9, r3
 800fa9a:	4313      	orrs	r3, r2
 800fa9c:	9304      	str	r3, [sp, #16]
 800fa9e:	46a2      	mov	sl, r4
 800faa0:	e7d2      	b.n	800fa48 <_svfiprintf_r+0xa0>
 800faa2:	9b03      	ldr	r3, [sp, #12]
 800faa4:	1d19      	adds	r1, r3, #4
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	9103      	str	r1, [sp, #12]
 800faaa:	2b00      	cmp	r3, #0
 800faac:	bfbb      	ittet	lt
 800faae:	425b      	neglt	r3, r3
 800fab0:	f042 0202 	orrlt.w	r2, r2, #2
 800fab4:	9307      	strge	r3, [sp, #28]
 800fab6:	9307      	strlt	r3, [sp, #28]
 800fab8:	bfb8      	it	lt
 800faba:	9204      	strlt	r2, [sp, #16]
 800fabc:	7823      	ldrb	r3, [r4, #0]
 800fabe:	2b2e      	cmp	r3, #46	@ 0x2e
 800fac0:	d10a      	bne.n	800fad8 <_svfiprintf_r+0x130>
 800fac2:	7863      	ldrb	r3, [r4, #1]
 800fac4:	2b2a      	cmp	r3, #42	@ 0x2a
 800fac6:	d132      	bne.n	800fb2e <_svfiprintf_r+0x186>
 800fac8:	9b03      	ldr	r3, [sp, #12]
 800faca:	1d1a      	adds	r2, r3, #4
 800facc:	681b      	ldr	r3, [r3, #0]
 800face:	9203      	str	r2, [sp, #12]
 800fad0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800fad4:	3402      	adds	r4, #2
 800fad6:	9305      	str	r3, [sp, #20]
 800fad8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800fb9c <_svfiprintf_r+0x1f4>
 800fadc:	7821      	ldrb	r1, [r4, #0]
 800fade:	2203      	movs	r2, #3
 800fae0:	4650      	mov	r0, sl
 800fae2:	f7f0 fbfd 	bl	80002e0 <memchr>
 800fae6:	b138      	cbz	r0, 800faf8 <_svfiprintf_r+0x150>
 800fae8:	9b04      	ldr	r3, [sp, #16]
 800faea:	eba0 000a 	sub.w	r0, r0, sl
 800faee:	2240      	movs	r2, #64	@ 0x40
 800faf0:	4082      	lsls	r2, r0
 800faf2:	4313      	orrs	r3, r2
 800faf4:	3401      	adds	r4, #1
 800faf6:	9304      	str	r3, [sp, #16]
 800faf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fafc:	4824      	ldr	r0, [pc, #144]	@ (800fb90 <_svfiprintf_r+0x1e8>)
 800fafe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fb02:	2206      	movs	r2, #6
 800fb04:	f7f0 fbec 	bl	80002e0 <memchr>
 800fb08:	2800      	cmp	r0, #0
 800fb0a:	d036      	beq.n	800fb7a <_svfiprintf_r+0x1d2>
 800fb0c:	4b21      	ldr	r3, [pc, #132]	@ (800fb94 <_svfiprintf_r+0x1ec>)
 800fb0e:	bb1b      	cbnz	r3, 800fb58 <_svfiprintf_r+0x1b0>
 800fb10:	9b03      	ldr	r3, [sp, #12]
 800fb12:	3307      	adds	r3, #7
 800fb14:	f023 0307 	bic.w	r3, r3, #7
 800fb18:	3308      	adds	r3, #8
 800fb1a:	9303      	str	r3, [sp, #12]
 800fb1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fb1e:	4433      	add	r3, r6
 800fb20:	9309      	str	r3, [sp, #36]	@ 0x24
 800fb22:	e76a      	b.n	800f9fa <_svfiprintf_r+0x52>
 800fb24:	fb0c 3202 	mla	r2, ip, r2, r3
 800fb28:	460c      	mov	r4, r1
 800fb2a:	2001      	movs	r0, #1
 800fb2c:	e7a8      	b.n	800fa80 <_svfiprintf_r+0xd8>
 800fb2e:	2300      	movs	r3, #0
 800fb30:	3401      	adds	r4, #1
 800fb32:	9305      	str	r3, [sp, #20]
 800fb34:	4619      	mov	r1, r3
 800fb36:	f04f 0c0a 	mov.w	ip, #10
 800fb3a:	4620      	mov	r0, r4
 800fb3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fb40:	3a30      	subs	r2, #48	@ 0x30
 800fb42:	2a09      	cmp	r2, #9
 800fb44:	d903      	bls.n	800fb4e <_svfiprintf_r+0x1a6>
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d0c6      	beq.n	800fad8 <_svfiprintf_r+0x130>
 800fb4a:	9105      	str	r1, [sp, #20]
 800fb4c:	e7c4      	b.n	800fad8 <_svfiprintf_r+0x130>
 800fb4e:	fb0c 2101 	mla	r1, ip, r1, r2
 800fb52:	4604      	mov	r4, r0
 800fb54:	2301      	movs	r3, #1
 800fb56:	e7f0      	b.n	800fb3a <_svfiprintf_r+0x192>
 800fb58:	ab03      	add	r3, sp, #12
 800fb5a:	9300      	str	r3, [sp, #0]
 800fb5c:	462a      	mov	r2, r5
 800fb5e:	4b0e      	ldr	r3, [pc, #56]	@ (800fb98 <_svfiprintf_r+0x1f0>)
 800fb60:	a904      	add	r1, sp, #16
 800fb62:	4638      	mov	r0, r7
 800fb64:	f7fd ff00 	bl	800d968 <_printf_float>
 800fb68:	1c42      	adds	r2, r0, #1
 800fb6a:	4606      	mov	r6, r0
 800fb6c:	d1d6      	bne.n	800fb1c <_svfiprintf_r+0x174>
 800fb6e:	89ab      	ldrh	r3, [r5, #12]
 800fb70:	065b      	lsls	r3, r3, #25
 800fb72:	f53f af2d 	bmi.w	800f9d0 <_svfiprintf_r+0x28>
 800fb76:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fb78:	e72c      	b.n	800f9d4 <_svfiprintf_r+0x2c>
 800fb7a:	ab03      	add	r3, sp, #12
 800fb7c:	9300      	str	r3, [sp, #0]
 800fb7e:	462a      	mov	r2, r5
 800fb80:	4b05      	ldr	r3, [pc, #20]	@ (800fb98 <_svfiprintf_r+0x1f0>)
 800fb82:	a904      	add	r1, sp, #16
 800fb84:	4638      	mov	r0, r7
 800fb86:	f7fe f977 	bl	800de78 <_printf_i>
 800fb8a:	e7ed      	b.n	800fb68 <_svfiprintf_r+0x1c0>
 800fb8c:	080108a0 	.word	0x080108a0
 800fb90:	080108aa 	.word	0x080108aa
 800fb94:	0800d969 	.word	0x0800d969
 800fb98:	0800f8f1 	.word	0x0800f8f1
 800fb9c:	080108a6 	.word	0x080108a6

0800fba0 <__sflush_r>:
 800fba0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fba8:	0716      	lsls	r6, r2, #28
 800fbaa:	4605      	mov	r5, r0
 800fbac:	460c      	mov	r4, r1
 800fbae:	d454      	bmi.n	800fc5a <__sflush_r+0xba>
 800fbb0:	684b      	ldr	r3, [r1, #4]
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	dc02      	bgt.n	800fbbc <__sflush_r+0x1c>
 800fbb6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	dd48      	ble.n	800fc4e <__sflush_r+0xae>
 800fbbc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800fbbe:	2e00      	cmp	r6, #0
 800fbc0:	d045      	beq.n	800fc4e <__sflush_r+0xae>
 800fbc2:	2300      	movs	r3, #0
 800fbc4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800fbc8:	682f      	ldr	r7, [r5, #0]
 800fbca:	6a21      	ldr	r1, [r4, #32]
 800fbcc:	602b      	str	r3, [r5, #0]
 800fbce:	d030      	beq.n	800fc32 <__sflush_r+0x92>
 800fbd0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800fbd2:	89a3      	ldrh	r3, [r4, #12]
 800fbd4:	0759      	lsls	r1, r3, #29
 800fbd6:	d505      	bpl.n	800fbe4 <__sflush_r+0x44>
 800fbd8:	6863      	ldr	r3, [r4, #4]
 800fbda:	1ad2      	subs	r2, r2, r3
 800fbdc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800fbde:	b10b      	cbz	r3, 800fbe4 <__sflush_r+0x44>
 800fbe0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800fbe2:	1ad2      	subs	r2, r2, r3
 800fbe4:	2300      	movs	r3, #0
 800fbe6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800fbe8:	6a21      	ldr	r1, [r4, #32]
 800fbea:	4628      	mov	r0, r5
 800fbec:	47b0      	blx	r6
 800fbee:	1c43      	adds	r3, r0, #1
 800fbf0:	89a3      	ldrh	r3, [r4, #12]
 800fbf2:	d106      	bne.n	800fc02 <__sflush_r+0x62>
 800fbf4:	6829      	ldr	r1, [r5, #0]
 800fbf6:	291d      	cmp	r1, #29
 800fbf8:	d82b      	bhi.n	800fc52 <__sflush_r+0xb2>
 800fbfa:	4a2a      	ldr	r2, [pc, #168]	@ (800fca4 <__sflush_r+0x104>)
 800fbfc:	410a      	asrs	r2, r1
 800fbfe:	07d6      	lsls	r6, r2, #31
 800fc00:	d427      	bmi.n	800fc52 <__sflush_r+0xb2>
 800fc02:	2200      	movs	r2, #0
 800fc04:	6062      	str	r2, [r4, #4]
 800fc06:	04d9      	lsls	r1, r3, #19
 800fc08:	6922      	ldr	r2, [r4, #16]
 800fc0a:	6022      	str	r2, [r4, #0]
 800fc0c:	d504      	bpl.n	800fc18 <__sflush_r+0x78>
 800fc0e:	1c42      	adds	r2, r0, #1
 800fc10:	d101      	bne.n	800fc16 <__sflush_r+0x76>
 800fc12:	682b      	ldr	r3, [r5, #0]
 800fc14:	b903      	cbnz	r3, 800fc18 <__sflush_r+0x78>
 800fc16:	6560      	str	r0, [r4, #84]	@ 0x54
 800fc18:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fc1a:	602f      	str	r7, [r5, #0]
 800fc1c:	b1b9      	cbz	r1, 800fc4e <__sflush_r+0xae>
 800fc1e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fc22:	4299      	cmp	r1, r3
 800fc24:	d002      	beq.n	800fc2c <__sflush_r+0x8c>
 800fc26:	4628      	mov	r0, r5
 800fc28:	f7ff f9e0 	bl	800efec <_free_r>
 800fc2c:	2300      	movs	r3, #0
 800fc2e:	6363      	str	r3, [r4, #52]	@ 0x34
 800fc30:	e00d      	b.n	800fc4e <__sflush_r+0xae>
 800fc32:	2301      	movs	r3, #1
 800fc34:	4628      	mov	r0, r5
 800fc36:	47b0      	blx	r6
 800fc38:	4602      	mov	r2, r0
 800fc3a:	1c50      	adds	r0, r2, #1
 800fc3c:	d1c9      	bne.n	800fbd2 <__sflush_r+0x32>
 800fc3e:	682b      	ldr	r3, [r5, #0]
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d0c6      	beq.n	800fbd2 <__sflush_r+0x32>
 800fc44:	2b1d      	cmp	r3, #29
 800fc46:	d001      	beq.n	800fc4c <__sflush_r+0xac>
 800fc48:	2b16      	cmp	r3, #22
 800fc4a:	d11e      	bne.n	800fc8a <__sflush_r+0xea>
 800fc4c:	602f      	str	r7, [r5, #0]
 800fc4e:	2000      	movs	r0, #0
 800fc50:	e022      	b.n	800fc98 <__sflush_r+0xf8>
 800fc52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fc56:	b21b      	sxth	r3, r3
 800fc58:	e01b      	b.n	800fc92 <__sflush_r+0xf2>
 800fc5a:	690f      	ldr	r7, [r1, #16]
 800fc5c:	2f00      	cmp	r7, #0
 800fc5e:	d0f6      	beq.n	800fc4e <__sflush_r+0xae>
 800fc60:	0793      	lsls	r3, r2, #30
 800fc62:	680e      	ldr	r6, [r1, #0]
 800fc64:	bf08      	it	eq
 800fc66:	694b      	ldreq	r3, [r1, #20]
 800fc68:	600f      	str	r7, [r1, #0]
 800fc6a:	bf18      	it	ne
 800fc6c:	2300      	movne	r3, #0
 800fc6e:	eba6 0807 	sub.w	r8, r6, r7
 800fc72:	608b      	str	r3, [r1, #8]
 800fc74:	f1b8 0f00 	cmp.w	r8, #0
 800fc78:	dde9      	ble.n	800fc4e <__sflush_r+0xae>
 800fc7a:	6a21      	ldr	r1, [r4, #32]
 800fc7c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800fc7e:	4643      	mov	r3, r8
 800fc80:	463a      	mov	r2, r7
 800fc82:	4628      	mov	r0, r5
 800fc84:	47b0      	blx	r6
 800fc86:	2800      	cmp	r0, #0
 800fc88:	dc08      	bgt.n	800fc9c <__sflush_r+0xfc>
 800fc8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fc8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fc92:	81a3      	strh	r3, [r4, #12]
 800fc94:	f04f 30ff 	mov.w	r0, #4294967295
 800fc98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc9c:	4407      	add	r7, r0
 800fc9e:	eba8 0800 	sub.w	r8, r8, r0
 800fca2:	e7e7      	b.n	800fc74 <__sflush_r+0xd4>
 800fca4:	dfbffffe 	.word	0xdfbffffe

0800fca8 <_fflush_r>:
 800fca8:	b538      	push	{r3, r4, r5, lr}
 800fcaa:	690b      	ldr	r3, [r1, #16]
 800fcac:	4605      	mov	r5, r0
 800fcae:	460c      	mov	r4, r1
 800fcb0:	b913      	cbnz	r3, 800fcb8 <_fflush_r+0x10>
 800fcb2:	2500      	movs	r5, #0
 800fcb4:	4628      	mov	r0, r5
 800fcb6:	bd38      	pop	{r3, r4, r5, pc}
 800fcb8:	b118      	cbz	r0, 800fcc2 <_fflush_r+0x1a>
 800fcba:	6a03      	ldr	r3, [r0, #32]
 800fcbc:	b90b      	cbnz	r3, 800fcc2 <_fflush_r+0x1a>
 800fcbe:	f7fe fa87 	bl	800e1d0 <__sinit>
 800fcc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d0f3      	beq.n	800fcb2 <_fflush_r+0xa>
 800fcca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800fccc:	07d0      	lsls	r0, r2, #31
 800fcce:	d404      	bmi.n	800fcda <_fflush_r+0x32>
 800fcd0:	0599      	lsls	r1, r3, #22
 800fcd2:	d402      	bmi.n	800fcda <_fflush_r+0x32>
 800fcd4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fcd6:	f7fe fba6 	bl	800e426 <__retarget_lock_acquire_recursive>
 800fcda:	4628      	mov	r0, r5
 800fcdc:	4621      	mov	r1, r4
 800fcde:	f7ff ff5f 	bl	800fba0 <__sflush_r>
 800fce2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fce4:	07da      	lsls	r2, r3, #31
 800fce6:	4605      	mov	r5, r0
 800fce8:	d4e4      	bmi.n	800fcb4 <_fflush_r+0xc>
 800fcea:	89a3      	ldrh	r3, [r4, #12]
 800fcec:	059b      	lsls	r3, r3, #22
 800fcee:	d4e1      	bmi.n	800fcb4 <_fflush_r+0xc>
 800fcf0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fcf2:	f7fe fb99 	bl	800e428 <__retarget_lock_release_recursive>
 800fcf6:	e7dd      	b.n	800fcb4 <_fflush_r+0xc>

0800fcf8 <memmove>:
 800fcf8:	4288      	cmp	r0, r1
 800fcfa:	b510      	push	{r4, lr}
 800fcfc:	eb01 0402 	add.w	r4, r1, r2
 800fd00:	d902      	bls.n	800fd08 <memmove+0x10>
 800fd02:	4284      	cmp	r4, r0
 800fd04:	4623      	mov	r3, r4
 800fd06:	d807      	bhi.n	800fd18 <memmove+0x20>
 800fd08:	1e43      	subs	r3, r0, #1
 800fd0a:	42a1      	cmp	r1, r4
 800fd0c:	d008      	beq.n	800fd20 <memmove+0x28>
 800fd0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fd12:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fd16:	e7f8      	b.n	800fd0a <memmove+0x12>
 800fd18:	4402      	add	r2, r0
 800fd1a:	4601      	mov	r1, r0
 800fd1c:	428a      	cmp	r2, r1
 800fd1e:	d100      	bne.n	800fd22 <memmove+0x2a>
 800fd20:	bd10      	pop	{r4, pc}
 800fd22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fd26:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fd2a:	e7f7      	b.n	800fd1c <memmove+0x24>

0800fd2c <_sbrk_r>:
 800fd2c:	b538      	push	{r3, r4, r5, lr}
 800fd2e:	4d06      	ldr	r5, [pc, #24]	@ (800fd48 <_sbrk_r+0x1c>)
 800fd30:	2300      	movs	r3, #0
 800fd32:	4604      	mov	r4, r0
 800fd34:	4608      	mov	r0, r1
 800fd36:	602b      	str	r3, [r5, #0]
 800fd38:	f7f2 f946 	bl	8001fc8 <_sbrk>
 800fd3c:	1c43      	adds	r3, r0, #1
 800fd3e:	d102      	bne.n	800fd46 <_sbrk_r+0x1a>
 800fd40:	682b      	ldr	r3, [r5, #0]
 800fd42:	b103      	cbz	r3, 800fd46 <_sbrk_r+0x1a>
 800fd44:	6023      	str	r3, [r4, #0]
 800fd46:	bd38      	pop	{r3, r4, r5, pc}
 800fd48:	240009a8 	.word	0x240009a8

0800fd4c <memcpy>:
 800fd4c:	440a      	add	r2, r1
 800fd4e:	4291      	cmp	r1, r2
 800fd50:	f100 33ff 	add.w	r3, r0, #4294967295
 800fd54:	d100      	bne.n	800fd58 <memcpy+0xc>
 800fd56:	4770      	bx	lr
 800fd58:	b510      	push	{r4, lr}
 800fd5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fd5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fd62:	4291      	cmp	r1, r2
 800fd64:	d1f9      	bne.n	800fd5a <memcpy+0xe>
 800fd66:	bd10      	pop	{r4, pc}

0800fd68 <__assert_func>:
 800fd68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fd6a:	4614      	mov	r4, r2
 800fd6c:	461a      	mov	r2, r3
 800fd6e:	4b09      	ldr	r3, [pc, #36]	@ (800fd94 <__assert_func+0x2c>)
 800fd70:	681b      	ldr	r3, [r3, #0]
 800fd72:	4605      	mov	r5, r0
 800fd74:	68d8      	ldr	r0, [r3, #12]
 800fd76:	b954      	cbnz	r4, 800fd8e <__assert_func+0x26>
 800fd78:	4b07      	ldr	r3, [pc, #28]	@ (800fd98 <__assert_func+0x30>)
 800fd7a:	461c      	mov	r4, r3
 800fd7c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fd80:	9100      	str	r1, [sp, #0]
 800fd82:	462b      	mov	r3, r5
 800fd84:	4905      	ldr	r1, [pc, #20]	@ (800fd9c <__assert_func+0x34>)
 800fd86:	f000 f86f 	bl	800fe68 <fiprintf>
 800fd8a:	f000 f87f 	bl	800fe8c <abort>
 800fd8e:	4b04      	ldr	r3, [pc, #16]	@ (800fda0 <__assert_func+0x38>)
 800fd90:	e7f4      	b.n	800fd7c <__assert_func+0x14>
 800fd92:	bf00      	nop
 800fd94:	2400001c 	.word	0x2400001c
 800fd98:	080108f6 	.word	0x080108f6
 800fd9c:	080108c8 	.word	0x080108c8
 800fda0:	080108bb 	.word	0x080108bb

0800fda4 <_calloc_r>:
 800fda4:	b570      	push	{r4, r5, r6, lr}
 800fda6:	fba1 5402 	umull	r5, r4, r1, r2
 800fdaa:	b93c      	cbnz	r4, 800fdbc <_calloc_r+0x18>
 800fdac:	4629      	mov	r1, r5
 800fdae:	f7ff f991 	bl	800f0d4 <_malloc_r>
 800fdb2:	4606      	mov	r6, r0
 800fdb4:	b928      	cbnz	r0, 800fdc2 <_calloc_r+0x1e>
 800fdb6:	2600      	movs	r6, #0
 800fdb8:	4630      	mov	r0, r6
 800fdba:	bd70      	pop	{r4, r5, r6, pc}
 800fdbc:	220c      	movs	r2, #12
 800fdbe:	6002      	str	r2, [r0, #0]
 800fdc0:	e7f9      	b.n	800fdb6 <_calloc_r+0x12>
 800fdc2:	462a      	mov	r2, r5
 800fdc4:	4621      	mov	r1, r4
 800fdc6:	f7fe fab0 	bl	800e32a <memset>
 800fdca:	e7f5      	b.n	800fdb8 <_calloc_r+0x14>

0800fdcc <__ascii_mbtowc>:
 800fdcc:	b082      	sub	sp, #8
 800fdce:	b901      	cbnz	r1, 800fdd2 <__ascii_mbtowc+0x6>
 800fdd0:	a901      	add	r1, sp, #4
 800fdd2:	b142      	cbz	r2, 800fde6 <__ascii_mbtowc+0x1a>
 800fdd4:	b14b      	cbz	r3, 800fdea <__ascii_mbtowc+0x1e>
 800fdd6:	7813      	ldrb	r3, [r2, #0]
 800fdd8:	600b      	str	r3, [r1, #0]
 800fdda:	7812      	ldrb	r2, [r2, #0]
 800fddc:	1e10      	subs	r0, r2, #0
 800fdde:	bf18      	it	ne
 800fde0:	2001      	movne	r0, #1
 800fde2:	b002      	add	sp, #8
 800fde4:	4770      	bx	lr
 800fde6:	4610      	mov	r0, r2
 800fde8:	e7fb      	b.n	800fde2 <__ascii_mbtowc+0x16>
 800fdea:	f06f 0001 	mvn.w	r0, #1
 800fdee:	e7f8      	b.n	800fde2 <__ascii_mbtowc+0x16>

0800fdf0 <_realloc_r>:
 800fdf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fdf4:	4680      	mov	r8, r0
 800fdf6:	4615      	mov	r5, r2
 800fdf8:	460c      	mov	r4, r1
 800fdfa:	b921      	cbnz	r1, 800fe06 <_realloc_r+0x16>
 800fdfc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fe00:	4611      	mov	r1, r2
 800fe02:	f7ff b967 	b.w	800f0d4 <_malloc_r>
 800fe06:	b92a      	cbnz	r2, 800fe14 <_realloc_r+0x24>
 800fe08:	f7ff f8f0 	bl	800efec <_free_r>
 800fe0c:	2400      	movs	r4, #0
 800fe0e:	4620      	mov	r0, r4
 800fe10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe14:	f000 f841 	bl	800fe9a <_malloc_usable_size_r>
 800fe18:	4285      	cmp	r5, r0
 800fe1a:	4606      	mov	r6, r0
 800fe1c:	d802      	bhi.n	800fe24 <_realloc_r+0x34>
 800fe1e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800fe22:	d8f4      	bhi.n	800fe0e <_realloc_r+0x1e>
 800fe24:	4629      	mov	r1, r5
 800fe26:	4640      	mov	r0, r8
 800fe28:	f7ff f954 	bl	800f0d4 <_malloc_r>
 800fe2c:	4607      	mov	r7, r0
 800fe2e:	2800      	cmp	r0, #0
 800fe30:	d0ec      	beq.n	800fe0c <_realloc_r+0x1c>
 800fe32:	42b5      	cmp	r5, r6
 800fe34:	462a      	mov	r2, r5
 800fe36:	4621      	mov	r1, r4
 800fe38:	bf28      	it	cs
 800fe3a:	4632      	movcs	r2, r6
 800fe3c:	f7ff ff86 	bl	800fd4c <memcpy>
 800fe40:	4621      	mov	r1, r4
 800fe42:	4640      	mov	r0, r8
 800fe44:	f7ff f8d2 	bl	800efec <_free_r>
 800fe48:	463c      	mov	r4, r7
 800fe4a:	e7e0      	b.n	800fe0e <_realloc_r+0x1e>

0800fe4c <__ascii_wctomb>:
 800fe4c:	4603      	mov	r3, r0
 800fe4e:	4608      	mov	r0, r1
 800fe50:	b141      	cbz	r1, 800fe64 <__ascii_wctomb+0x18>
 800fe52:	2aff      	cmp	r2, #255	@ 0xff
 800fe54:	d904      	bls.n	800fe60 <__ascii_wctomb+0x14>
 800fe56:	228a      	movs	r2, #138	@ 0x8a
 800fe58:	601a      	str	r2, [r3, #0]
 800fe5a:	f04f 30ff 	mov.w	r0, #4294967295
 800fe5e:	4770      	bx	lr
 800fe60:	700a      	strb	r2, [r1, #0]
 800fe62:	2001      	movs	r0, #1
 800fe64:	4770      	bx	lr
	...

0800fe68 <fiprintf>:
 800fe68:	b40e      	push	{r1, r2, r3}
 800fe6a:	b503      	push	{r0, r1, lr}
 800fe6c:	4601      	mov	r1, r0
 800fe6e:	ab03      	add	r3, sp, #12
 800fe70:	4805      	ldr	r0, [pc, #20]	@ (800fe88 <fiprintf+0x20>)
 800fe72:	f853 2b04 	ldr.w	r2, [r3], #4
 800fe76:	6800      	ldr	r0, [r0, #0]
 800fe78:	9301      	str	r3, [sp, #4]
 800fe7a:	f000 f83f 	bl	800fefc <_vfiprintf_r>
 800fe7e:	b002      	add	sp, #8
 800fe80:	f85d eb04 	ldr.w	lr, [sp], #4
 800fe84:	b003      	add	sp, #12
 800fe86:	4770      	bx	lr
 800fe88:	2400001c 	.word	0x2400001c

0800fe8c <abort>:
 800fe8c:	b508      	push	{r3, lr}
 800fe8e:	2006      	movs	r0, #6
 800fe90:	f000 fa08 	bl	80102a4 <raise>
 800fe94:	2001      	movs	r0, #1
 800fe96:	f7f2 f81f 	bl	8001ed8 <_exit>

0800fe9a <_malloc_usable_size_r>:
 800fe9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fe9e:	1f18      	subs	r0, r3, #4
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	bfbc      	itt	lt
 800fea4:	580b      	ldrlt	r3, [r1, r0]
 800fea6:	18c0      	addlt	r0, r0, r3
 800fea8:	4770      	bx	lr

0800feaa <__sfputc_r>:
 800feaa:	6893      	ldr	r3, [r2, #8]
 800feac:	3b01      	subs	r3, #1
 800feae:	2b00      	cmp	r3, #0
 800feb0:	b410      	push	{r4}
 800feb2:	6093      	str	r3, [r2, #8]
 800feb4:	da08      	bge.n	800fec8 <__sfputc_r+0x1e>
 800feb6:	6994      	ldr	r4, [r2, #24]
 800feb8:	42a3      	cmp	r3, r4
 800feba:	db01      	blt.n	800fec0 <__sfputc_r+0x16>
 800febc:	290a      	cmp	r1, #10
 800febe:	d103      	bne.n	800fec8 <__sfputc_r+0x1e>
 800fec0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fec4:	f000 b932 	b.w	801012c <__swbuf_r>
 800fec8:	6813      	ldr	r3, [r2, #0]
 800feca:	1c58      	adds	r0, r3, #1
 800fecc:	6010      	str	r0, [r2, #0]
 800fece:	7019      	strb	r1, [r3, #0]
 800fed0:	4608      	mov	r0, r1
 800fed2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fed6:	4770      	bx	lr

0800fed8 <__sfputs_r>:
 800fed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800feda:	4606      	mov	r6, r0
 800fedc:	460f      	mov	r7, r1
 800fede:	4614      	mov	r4, r2
 800fee0:	18d5      	adds	r5, r2, r3
 800fee2:	42ac      	cmp	r4, r5
 800fee4:	d101      	bne.n	800feea <__sfputs_r+0x12>
 800fee6:	2000      	movs	r0, #0
 800fee8:	e007      	b.n	800fefa <__sfputs_r+0x22>
 800feea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800feee:	463a      	mov	r2, r7
 800fef0:	4630      	mov	r0, r6
 800fef2:	f7ff ffda 	bl	800feaa <__sfputc_r>
 800fef6:	1c43      	adds	r3, r0, #1
 800fef8:	d1f3      	bne.n	800fee2 <__sfputs_r+0xa>
 800fefa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800fefc <_vfiprintf_r>:
 800fefc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff00:	460d      	mov	r5, r1
 800ff02:	b09d      	sub	sp, #116	@ 0x74
 800ff04:	4614      	mov	r4, r2
 800ff06:	4698      	mov	r8, r3
 800ff08:	4606      	mov	r6, r0
 800ff0a:	b118      	cbz	r0, 800ff14 <_vfiprintf_r+0x18>
 800ff0c:	6a03      	ldr	r3, [r0, #32]
 800ff0e:	b90b      	cbnz	r3, 800ff14 <_vfiprintf_r+0x18>
 800ff10:	f7fe f95e 	bl	800e1d0 <__sinit>
 800ff14:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ff16:	07d9      	lsls	r1, r3, #31
 800ff18:	d405      	bmi.n	800ff26 <_vfiprintf_r+0x2a>
 800ff1a:	89ab      	ldrh	r3, [r5, #12]
 800ff1c:	059a      	lsls	r2, r3, #22
 800ff1e:	d402      	bmi.n	800ff26 <_vfiprintf_r+0x2a>
 800ff20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ff22:	f7fe fa80 	bl	800e426 <__retarget_lock_acquire_recursive>
 800ff26:	89ab      	ldrh	r3, [r5, #12]
 800ff28:	071b      	lsls	r3, r3, #28
 800ff2a:	d501      	bpl.n	800ff30 <_vfiprintf_r+0x34>
 800ff2c:	692b      	ldr	r3, [r5, #16]
 800ff2e:	b99b      	cbnz	r3, 800ff58 <_vfiprintf_r+0x5c>
 800ff30:	4629      	mov	r1, r5
 800ff32:	4630      	mov	r0, r6
 800ff34:	f000 f938 	bl	80101a8 <__swsetup_r>
 800ff38:	b170      	cbz	r0, 800ff58 <_vfiprintf_r+0x5c>
 800ff3a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ff3c:	07dc      	lsls	r4, r3, #31
 800ff3e:	d504      	bpl.n	800ff4a <_vfiprintf_r+0x4e>
 800ff40:	f04f 30ff 	mov.w	r0, #4294967295
 800ff44:	b01d      	add	sp, #116	@ 0x74
 800ff46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff4a:	89ab      	ldrh	r3, [r5, #12]
 800ff4c:	0598      	lsls	r0, r3, #22
 800ff4e:	d4f7      	bmi.n	800ff40 <_vfiprintf_r+0x44>
 800ff50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ff52:	f7fe fa69 	bl	800e428 <__retarget_lock_release_recursive>
 800ff56:	e7f3      	b.n	800ff40 <_vfiprintf_r+0x44>
 800ff58:	2300      	movs	r3, #0
 800ff5a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ff5c:	2320      	movs	r3, #32
 800ff5e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ff62:	f8cd 800c 	str.w	r8, [sp, #12]
 800ff66:	2330      	movs	r3, #48	@ 0x30
 800ff68:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010118 <_vfiprintf_r+0x21c>
 800ff6c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ff70:	f04f 0901 	mov.w	r9, #1
 800ff74:	4623      	mov	r3, r4
 800ff76:	469a      	mov	sl, r3
 800ff78:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ff7c:	b10a      	cbz	r2, 800ff82 <_vfiprintf_r+0x86>
 800ff7e:	2a25      	cmp	r2, #37	@ 0x25
 800ff80:	d1f9      	bne.n	800ff76 <_vfiprintf_r+0x7a>
 800ff82:	ebba 0b04 	subs.w	fp, sl, r4
 800ff86:	d00b      	beq.n	800ffa0 <_vfiprintf_r+0xa4>
 800ff88:	465b      	mov	r3, fp
 800ff8a:	4622      	mov	r2, r4
 800ff8c:	4629      	mov	r1, r5
 800ff8e:	4630      	mov	r0, r6
 800ff90:	f7ff ffa2 	bl	800fed8 <__sfputs_r>
 800ff94:	3001      	adds	r0, #1
 800ff96:	f000 80a7 	beq.w	80100e8 <_vfiprintf_r+0x1ec>
 800ff9a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ff9c:	445a      	add	r2, fp
 800ff9e:	9209      	str	r2, [sp, #36]	@ 0x24
 800ffa0:	f89a 3000 	ldrb.w	r3, [sl]
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	f000 809f 	beq.w	80100e8 <_vfiprintf_r+0x1ec>
 800ffaa:	2300      	movs	r3, #0
 800ffac:	f04f 32ff 	mov.w	r2, #4294967295
 800ffb0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ffb4:	f10a 0a01 	add.w	sl, sl, #1
 800ffb8:	9304      	str	r3, [sp, #16]
 800ffba:	9307      	str	r3, [sp, #28]
 800ffbc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ffc0:	931a      	str	r3, [sp, #104]	@ 0x68
 800ffc2:	4654      	mov	r4, sl
 800ffc4:	2205      	movs	r2, #5
 800ffc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ffca:	4853      	ldr	r0, [pc, #332]	@ (8010118 <_vfiprintf_r+0x21c>)
 800ffcc:	f7f0 f988 	bl	80002e0 <memchr>
 800ffd0:	9a04      	ldr	r2, [sp, #16]
 800ffd2:	b9d8      	cbnz	r0, 801000c <_vfiprintf_r+0x110>
 800ffd4:	06d1      	lsls	r1, r2, #27
 800ffd6:	bf44      	itt	mi
 800ffd8:	2320      	movmi	r3, #32
 800ffda:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ffde:	0713      	lsls	r3, r2, #28
 800ffe0:	bf44      	itt	mi
 800ffe2:	232b      	movmi	r3, #43	@ 0x2b
 800ffe4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ffe8:	f89a 3000 	ldrb.w	r3, [sl]
 800ffec:	2b2a      	cmp	r3, #42	@ 0x2a
 800ffee:	d015      	beq.n	801001c <_vfiprintf_r+0x120>
 800fff0:	9a07      	ldr	r2, [sp, #28]
 800fff2:	4654      	mov	r4, sl
 800fff4:	2000      	movs	r0, #0
 800fff6:	f04f 0c0a 	mov.w	ip, #10
 800fffa:	4621      	mov	r1, r4
 800fffc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010000:	3b30      	subs	r3, #48	@ 0x30
 8010002:	2b09      	cmp	r3, #9
 8010004:	d94b      	bls.n	801009e <_vfiprintf_r+0x1a2>
 8010006:	b1b0      	cbz	r0, 8010036 <_vfiprintf_r+0x13a>
 8010008:	9207      	str	r2, [sp, #28]
 801000a:	e014      	b.n	8010036 <_vfiprintf_r+0x13a>
 801000c:	eba0 0308 	sub.w	r3, r0, r8
 8010010:	fa09 f303 	lsl.w	r3, r9, r3
 8010014:	4313      	orrs	r3, r2
 8010016:	9304      	str	r3, [sp, #16]
 8010018:	46a2      	mov	sl, r4
 801001a:	e7d2      	b.n	800ffc2 <_vfiprintf_r+0xc6>
 801001c:	9b03      	ldr	r3, [sp, #12]
 801001e:	1d19      	adds	r1, r3, #4
 8010020:	681b      	ldr	r3, [r3, #0]
 8010022:	9103      	str	r1, [sp, #12]
 8010024:	2b00      	cmp	r3, #0
 8010026:	bfbb      	ittet	lt
 8010028:	425b      	neglt	r3, r3
 801002a:	f042 0202 	orrlt.w	r2, r2, #2
 801002e:	9307      	strge	r3, [sp, #28]
 8010030:	9307      	strlt	r3, [sp, #28]
 8010032:	bfb8      	it	lt
 8010034:	9204      	strlt	r2, [sp, #16]
 8010036:	7823      	ldrb	r3, [r4, #0]
 8010038:	2b2e      	cmp	r3, #46	@ 0x2e
 801003a:	d10a      	bne.n	8010052 <_vfiprintf_r+0x156>
 801003c:	7863      	ldrb	r3, [r4, #1]
 801003e:	2b2a      	cmp	r3, #42	@ 0x2a
 8010040:	d132      	bne.n	80100a8 <_vfiprintf_r+0x1ac>
 8010042:	9b03      	ldr	r3, [sp, #12]
 8010044:	1d1a      	adds	r2, r3, #4
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	9203      	str	r2, [sp, #12]
 801004a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801004e:	3402      	adds	r4, #2
 8010050:	9305      	str	r3, [sp, #20]
 8010052:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010128 <_vfiprintf_r+0x22c>
 8010056:	7821      	ldrb	r1, [r4, #0]
 8010058:	2203      	movs	r2, #3
 801005a:	4650      	mov	r0, sl
 801005c:	f7f0 f940 	bl	80002e0 <memchr>
 8010060:	b138      	cbz	r0, 8010072 <_vfiprintf_r+0x176>
 8010062:	9b04      	ldr	r3, [sp, #16]
 8010064:	eba0 000a 	sub.w	r0, r0, sl
 8010068:	2240      	movs	r2, #64	@ 0x40
 801006a:	4082      	lsls	r2, r0
 801006c:	4313      	orrs	r3, r2
 801006e:	3401      	adds	r4, #1
 8010070:	9304      	str	r3, [sp, #16]
 8010072:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010076:	4829      	ldr	r0, [pc, #164]	@ (801011c <_vfiprintf_r+0x220>)
 8010078:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801007c:	2206      	movs	r2, #6
 801007e:	f7f0 f92f 	bl	80002e0 <memchr>
 8010082:	2800      	cmp	r0, #0
 8010084:	d03f      	beq.n	8010106 <_vfiprintf_r+0x20a>
 8010086:	4b26      	ldr	r3, [pc, #152]	@ (8010120 <_vfiprintf_r+0x224>)
 8010088:	bb1b      	cbnz	r3, 80100d2 <_vfiprintf_r+0x1d6>
 801008a:	9b03      	ldr	r3, [sp, #12]
 801008c:	3307      	adds	r3, #7
 801008e:	f023 0307 	bic.w	r3, r3, #7
 8010092:	3308      	adds	r3, #8
 8010094:	9303      	str	r3, [sp, #12]
 8010096:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010098:	443b      	add	r3, r7
 801009a:	9309      	str	r3, [sp, #36]	@ 0x24
 801009c:	e76a      	b.n	800ff74 <_vfiprintf_r+0x78>
 801009e:	fb0c 3202 	mla	r2, ip, r2, r3
 80100a2:	460c      	mov	r4, r1
 80100a4:	2001      	movs	r0, #1
 80100a6:	e7a8      	b.n	800fffa <_vfiprintf_r+0xfe>
 80100a8:	2300      	movs	r3, #0
 80100aa:	3401      	adds	r4, #1
 80100ac:	9305      	str	r3, [sp, #20]
 80100ae:	4619      	mov	r1, r3
 80100b0:	f04f 0c0a 	mov.w	ip, #10
 80100b4:	4620      	mov	r0, r4
 80100b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80100ba:	3a30      	subs	r2, #48	@ 0x30
 80100bc:	2a09      	cmp	r2, #9
 80100be:	d903      	bls.n	80100c8 <_vfiprintf_r+0x1cc>
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d0c6      	beq.n	8010052 <_vfiprintf_r+0x156>
 80100c4:	9105      	str	r1, [sp, #20]
 80100c6:	e7c4      	b.n	8010052 <_vfiprintf_r+0x156>
 80100c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80100cc:	4604      	mov	r4, r0
 80100ce:	2301      	movs	r3, #1
 80100d0:	e7f0      	b.n	80100b4 <_vfiprintf_r+0x1b8>
 80100d2:	ab03      	add	r3, sp, #12
 80100d4:	9300      	str	r3, [sp, #0]
 80100d6:	462a      	mov	r2, r5
 80100d8:	4b12      	ldr	r3, [pc, #72]	@ (8010124 <_vfiprintf_r+0x228>)
 80100da:	a904      	add	r1, sp, #16
 80100dc:	4630      	mov	r0, r6
 80100de:	f7fd fc43 	bl	800d968 <_printf_float>
 80100e2:	4607      	mov	r7, r0
 80100e4:	1c78      	adds	r0, r7, #1
 80100e6:	d1d6      	bne.n	8010096 <_vfiprintf_r+0x19a>
 80100e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80100ea:	07d9      	lsls	r1, r3, #31
 80100ec:	d405      	bmi.n	80100fa <_vfiprintf_r+0x1fe>
 80100ee:	89ab      	ldrh	r3, [r5, #12]
 80100f0:	059a      	lsls	r2, r3, #22
 80100f2:	d402      	bmi.n	80100fa <_vfiprintf_r+0x1fe>
 80100f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80100f6:	f7fe f997 	bl	800e428 <__retarget_lock_release_recursive>
 80100fa:	89ab      	ldrh	r3, [r5, #12]
 80100fc:	065b      	lsls	r3, r3, #25
 80100fe:	f53f af1f 	bmi.w	800ff40 <_vfiprintf_r+0x44>
 8010102:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010104:	e71e      	b.n	800ff44 <_vfiprintf_r+0x48>
 8010106:	ab03      	add	r3, sp, #12
 8010108:	9300      	str	r3, [sp, #0]
 801010a:	462a      	mov	r2, r5
 801010c:	4b05      	ldr	r3, [pc, #20]	@ (8010124 <_vfiprintf_r+0x228>)
 801010e:	a904      	add	r1, sp, #16
 8010110:	4630      	mov	r0, r6
 8010112:	f7fd feb1 	bl	800de78 <_printf_i>
 8010116:	e7e4      	b.n	80100e2 <_vfiprintf_r+0x1e6>
 8010118:	080108a0 	.word	0x080108a0
 801011c:	080108aa 	.word	0x080108aa
 8010120:	0800d969 	.word	0x0800d969
 8010124:	0800fed9 	.word	0x0800fed9
 8010128:	080108a6 	.word	0x080108a6

0801012c <__swbuf_r>:
 801012c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801012e:	460e      	mov	r6, r1
 8010130:	4614      	mov	r4, r2
 8010132:	4605      	mov	r5, r0
 8010134:	b118      	cbz	r0, 801013e <__swbuf_r+0x12>
 8010136:	6a03      	ldr	r3, [r0, #32]
 8010138:	b90b      	cbnz	r3, 801013e <__swbuf_r+0x12>
 801013a:	f7fe f849 	bl	800e1d0 <__sinit>
 801013e:	69a3      	ldr	r3, [r4, #24]
 8010140:	60a3      	str	r3, [r4, #8]
 8010142:	89a3      	ldrh	r3, [r4, #12]
 8010144:	071a      	lsls	r2, r3, #28
 8010146:	d501      	bpl.n	801014c <__swbuf_r+0x20>
 8010148:	6923      	ldr	r3, [r4, #16]
 801014a:	b943      	cbnz	r3, 801015e <__swbuf_r+0x32>
 801014c:	4621      	mov	r1, r4
 801014e:	4628      	mov	r0, r5
 8010150:	f000 f82a 	bl	80101a8 <__swsetup_r>
 8010154:	b118      	cbz	r0, 801015e <__swbuf_r+0x32>
 8010156:	f04f 37ff 	mov.w	r7, #4294967295
 801015a:	4638      	mov	r0, r7
 801015c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801015e:	6823      	ldr	r3, [r4, #0]
 8010160:	6922      	ldr	r2, [r4, #16]
 8010162:	1a98      	subs	r0, r3, r2
 8010164:	6963      	ldr	r3, [r4, #20]
 8010166:	b2f6      	uxtb	r6, r6
 8010168:	4283      	cmp	r3, r0
 801016a:	4637      	mov	r7, r6
 801016c:	dc05      	bgt.n	801017a <__swbuf_r+0x4e>
 801016e:	4621      	mov	r1, r4
 8010170:	4628      	mov	r0, r5
 8010172:	f7ff fd99 	bl	800fca8 <_fflush_r>
 8010176:	2800      	cmp	r0, #0
 8010178:	d1ed      	bne.n	8010156 <__swbuf_r+0x2a>
 801017a:	68a3      	ldr	r3, [r4, #8]
 801017c:	3b01      	subs	r3, #1
 801017e:	60a3      	str	r3, [r4, #8]
 8010180:	6823      	ldr	r3, [r4, #0]
 8010182:	1c5a      	adds	r2, r3, #1
 8010184:	6022      	str	r2, [r4, #0]
 8010186:	701e      	strb	r6, [r3, #0]
 8010188:	6962      	ldr	r2, [r4, #20]
 801018a:	1c43      	adds	r3, r0, #1
 801018c:	429a      	cmp	r2, r3
 801018e:	d004      	beq.n	801019a <__swbuf_r+0x6e>
 8010190:	89a3      	ldrh	r3, [r4, #12]
 8010192:	07db      	lsls	r3, r3, #31
 8010194:	d5e1      	bpl.n	801015a <__swbuf_r+0x2e>
 8010196:	2e0a      	cmp	r6, #10
 8010198:	d1df      	bne.n	801015a <__swbuf_r+0x2e>
 801019a:	4621      	mov	r1, r4
 801019c:	4628      	mov	r0, r5
 801019e:	f7ff fd83 	bl	800fca8 <_fflush_r>
 80101a2:	2800      	cmp	r0, #0
 80101a4:	d0d9      	beq.n	801015a <__swbuf_r+0x2e>
 80101a6:	e7d6      	b.n	8010156 <__swbuf_r+0x2a>

080101a8 <__swsetup_r>:
 80101a8:	b538      	push	{r3, r4, r5, lr}
 80101aa:	4b29      	ldr	r3, [pc, #164]	@ (8010250 <__swsetup_r+0xa8>)
 80101ac:	4605      	mov	r5, r0
 80101ae:	6818      	ldr	r0, [r3, #0]
 80101b0:	460c      	mov	r4, r1
 80101b2:	b118      	cbz	r0, 80101bc <__swsetup_r+0x14>
 80101b4:	6a03      	ldr	r3, [r0, #32]
 80101b6:	b90b      	cbnz	r3, 80101bc <__swsetup_r+0x14>
 80101b8:	f7fe f80a 	bl	800e1d0 <__sinit>
 80101bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80101c0:	0719      	lsls	r1, r3, #28
 80101c2:	d422      	bmi.n	801020a <__swsetup_r+0x62>
 80101c4:	06da      	lsls	r2, r3, #27
 80101c6:	d407      	bmi.n	80101d8 <__swsetup_r+0x30>
 80101c8:	2209      	movs	r2, #9
 80101ca:	602a      	str	r2, [r5, #0]
 80101cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80101d0:	81a3      	strh	r3, [r4, #12]
 80101d2:	f04f 30ff 	mov.w	r0, #4294967295
 80101d6:	e033      	b.n	8010240 <__swsetup_r+0x98>
 80101d8:	0758      	lsls	r0, r3, #29
 80101da:	d512      	bpl.n	8010202 <__swsetup_r+0x5a>
 80101dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80101de:	b141      	cbz	r1, 80101f2 <__swsetup_r+0x4a>
 80101e0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80101e4:	4299      	cmp	r1, r3
 80101e6:	d002      	beq.n	80101ee <__swsetup_r+0x46>
 80101e8:	4628      	mov	r0, r5
 80101ea:	f7fe feff 	bl	800efec <_free_r>
 80101ee:	2300      	movs	r3, #0
 80101f0:	6363      	str	r3, [r4, #52]	@ 0x34
 80101f2:	89a3      	ldrh	r3, [r4, #12]
 80101f4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80101f8:	81a3      	strh	r3, [r4, #12]
 80101fa:	2300      	movs	r3, #0
 80101fc:	6063      	str	r3, [r4, #4]
 80101fe:	6923      	ldr	r3, [r4, #16]
 8010200:	6023      	str	r3, [r4, #0]
 8010202:	89a3      	ldrh	r3, [r4, #12]
 8010204:	f043 0308 	orr.w	r3, r3, #8
 8010208:	81a3      	strh	r3, [r4, #12]
 801020a:	6923      	ldr	r3, [r4, #16]
 801020c:	b94b      	cbnz	r3, 8010222 <__swsetup_r+0x7a>
 801020e:	89a3      	ldrh	r3, [r4, #12]
 8010210:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010214:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010218:	d003      	beq.n	8010222 <__swsetup_r+0x7a>
 801021a:	4621      	mov	r1, r4
 801021c:	4628      	mov	r0, r5
 801021e:	f000 f883 	bl	8010328 <__smakebuf_r>
 8010222:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010226:	f013 0201 	ands.w	r2, r3, #1
 801022a:	d00a      	beq.n	8010242 <__swsetup_r+0x9a>
 801022c:	2200      	movs	r2, #0
 801022e:	60a2      	str	r2, [r4, #8]
 8010230:	6962      	ldr	r2, [r4, #20]
 8010232:	4252      	negs	r2, r2
 8010234:	61a2      	str	r2, [r4, #24]
 8010236:	6922      	ldr	r2, [r4, #16]
 8010238:	b942      	cbnz	r2, 801024c <__swsetup_r+0xa4>
 801023a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801023e:	d1c5      	bne.n	80101cc <__swsetup_r+0x24>
 8010240:	bd38      	pop	{r3, r4, r5, pc}
 8010242:	0799      	lsls	r1, r3, #30
 8010244:	bf58      	it	pl
 8010246:	6962      	ldrpl	r2, [r4, #20]
 8010248:	60a2      	str	r2, [r4, #8]
 801024a:	e7f4      	b.n	8010236 <__swsetup_r+0x8e>
 801024c:	2000      	movs	r0, #0
 801024e:	e7f7      	b.n	8010240 <__swsetup_r+0x98>
 8010250:	2400001c 	.word	0x2400001c

08010254 <_raise_r>:
 8010254:	291f      	cmp	r1, #31
 8010256:	b538      	push	{r3, r4, r5, lr}
 8010258:	4605      	mov	r5, r0
 801025a:	460c      	mov	r4, r1
 801025c:	d904      	bls.n	8010268 <_raise_r+0x14>
 801025e:	2316      	movs	r3, #22
 8010260:	6003      	str	r3, [r0, #0]
 8010262:	f04f 30ff 	mov.w	r0, #4294967295
 8010266:	bd38      	pop	{r3, r4, r5, pc}
 8010268:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801026a:	b112      	cbz	r2, 8010272 <_raise_r+0x1e>
 801026c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010270:	b94b      	cbnz	r3, 8010286 <_raise_r+0x32>
 8010272:	4628      	mov	r0, r5
 8010274:	f000 f830 	bl	80102d8 <_getpid_r>
 8010278:	4622      	mov	r2, r4
 801027a:	4601      	mov	r1, r0
 801027c:	4628      	mov	r0, r5
 801027e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010282:	f000 b817 	b.w	80102b4 <_kill_r>
 8010286:	2b01      	cmp	r3, #1
 8010288:	d00a      	beq.n	80102a0 <_raise_r+0x4c>
 801028a:	1c59      	adds	r1, r3, #1
 801028c:	d103      	bne.n	8010296 <_raise_r+0x42>
 801028e:	2316      	movs	r3, #22
 8010290:	6003      	str	r3, [r0, #0]
 8010292:	2001      	movs	r0, #1
 8010294:	e7e7      	b.n	8010266 <_raise_r+0x12>
 8010296:	2100      	movs	r1, #0
 8010298:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801029c:	4620      	mov	r0, r4
 801029e:	4798      	blx	r3
 80102a0:	2000      	movs	r0, #0
 80102a2:	e7e0      	b.n	8010266 <_raise_r+0x12>

080102a4 <raise>:
 80102a4:	4b02      	ldr	r3, [pc, #8]	@ (80102b0 <raise+0xc>)
 80102a6:	4601      	mov	r1, r0
 80102a8:	6818      	ldr	r0, [r3, #0]
 80102aa:	f7ff bfd3 	b.w	8010254 <_raise_r>
 80102ae:	bf00      	nop
 80102b0:	2400001c 	.word	0x2400001c

080102b4 <_kill_r>:
 80102b4:	b538      	push	{r3, r4, r5, lr}
 80102b6:	4d07      	ldr	r5, [pc, #28]	@ (80102d4 <_kill_r+0x20>)
 80102b8:	2300      	movs	r3, #0
 80102ba:	4604      	mov	r4, r0
 80102bc:	4608      	mov	r0, r1
 80102be:	4611      	mov	r1, r2
 80102c0:	602b      	str	r3, [r5, #0]
 80102c2:	f7f1 fdf9 	bl	8001eb8 <_kill>
 80102c6:	1c43      	adds	r3, r0, #1
 80102c8:	d102      	bne.n	80102d0 <_kill_r+0x1c>
 80102ca:	682b      	ldr	r3, [r5, #0]
 80102cc:	b103      	cbz	r3, 80102d0 <_kill_r+0x1c>
 80102ce:	6023      	str	r3, [r4, #0]
 80102d0:	bd38      	pop	{r3, r4, r5, pc}
 80102d2:	bf00      	nop
 80102d4:	240009a8 	.word	0x240009a8

080102d8 <_getpid_r>:
 80102d8:	f7f1 bde6 	b.w	8001ea8 <_getpid>

080102dc <__swhatbuf_r>:
 80102dc:	b570      	push	{r4, r5, r6, lr}
 80102de:	460c      	mov	r4, r1
 80102e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80102e4:	2900      	cmp	r1, #0
 80102e6:	b096      	sub	sp, #88	@ 0x58
 80102e8:	4615      	mov	r5, r2
 80102ea:	461e      	mov	r6, r3
 80102ec:	da0d      	bge.n	801030a <__swhatbuf_r+0x2e>
 80102ee:	89a3      	ldrh	r3, [r4, #12]
 80102f0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80102f4:	f04f 0100 	mov.w	r1, #0
 80102f8:	bf14      	ite	ne
 80102fa:	2340      	movne	r3, #64	@ 0x40
 80102fc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010300:	2000      	movs	r0, #0
 8010302:	6031      	str	r1, [r6, #0]
 8010304:	602b      	str	r3, [r5, #0]
 8010306:	b016      	add	sp, #88	@ 0x58
 8010308:	bd70      	pop	{r4, r5, r6, pc}
 801030a:	466a      	mov	r2, sp
 801030c:	f000 f848 	bl	80103a0 <_fstat_r>
 8010310:	2800      	cmp	r0, #0
 8010312:	dbec      	blt.n	80102ee <__swhatbuf_r+0x12>
 8010314:	9901      	ldr	r1, [sp, #4]
 8010316:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801031a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801031e:	4259      	negs	r1, r3
 8010320:	4159      	adcs	r1, r3
 8010322:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010326:	e7eb      	b.n	8010300 <__swhatbuf_r+0x24>

08010328 <__smakebuf_r>:
 8010328:	898b      	ldrh	r3, [r1, #12]
 801032a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801032c:	079d      	lsls	r5, r3, #30
 801032e:	4606      	mov	r6, r0
 8010330:	460c      	mov	r4, r1
 8010332:	d507      	bpl.n	8010344 <__smakebuf_r+0x1c>
 8010334:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010338:	6023      	str	r3, [r4, #0]
 801033a:	6123      	str	r3, [r4, #16]
 801033c:	2301      	movs	r3, #1
 801033e:	6163      	str	r3, [r4, #20]
 8010340:	b003      	add	sp, #12
 8010342:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010344:	ab01      	add	r3, sp, #4
 8010346:	466a      	mov	r2, sp
 8010348:	f7ff ffc8 	bl	80102dc <__swhatbuf_r>
 801034c:	9f00      	ldr	r7, [sp, #0]
 801034e:	4605      	mov	r5, r0
 8010350:	4639      	mov	r1, r7
 8010352:	4630      	mov	r0, r6
 8010354:	f7fe febe 	bl	800f0d4 <_malloc_r>
 8010358:	b948      	cbnz	r0, 801036e <__smakebuf_r+0x46>
 801035a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801035e:	059a      	lsls	r2, r3, #22
 8010360:	d4ee      	bmi.n	8010340 <__smakebuf_r+0x18>
 8010362:	f023 0303 	bic.w	r3, r3, #3
 8010366:	f043 0302 	orr.w	r3, r3, #2
 801036a:	81a3      	strh	r3, [r4, #12]
 801036c:	e7e2      	b.n	8010334 <__smakebuf_r+0xc>
 801036e:	89a3      	ldrh	r3, [r4, #12]
 8010370:	6020      	str	r0, [r4, #0]
 8010372:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010376:	81a3      	strh	r3, [r4, #12]
 8010378:	9b01      	ldr	r3, [sp, #4]
 801037a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801037e:	b15b      	cbz	r3, 8010398 <__smakebuf_r+0x70>
 8010380:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010384:	4630      	mov	r0, r6
 8010386:	f000 f81d 	bl	80103c4 <_isatty_r>
 801038a:	b128      	cbz	r0, 8010398 <__smakebuf_r+0x70>
 801038c:	89a3      	ldrh	r3, [r4, #12]
 801038e:	f023 0303 	bic.w	r3, r3, #3
 8010392:	f043 0301 	orr.w	r3, r3, #1
 8010396:	81a3      	strh	r3, [r4, #12]
 8010398:	89a3      	ldrh	r3, [r4, #12]
 801039a:	431d      	orrs	r5, r3
 801039c:	81a5      	strh	r5, [r4, #12]
 801039e:	e7cf      	b.n	8010340 <__smakebuf_r+0x18>

080103a0 <_fstat_r>:
 80103a0:	b538      	push	{r3, r4, r5, lr}
 80103a2:	4d07      	ldr	r5, [pc, #28]	@ (80103c0 <_fstat_r+0x20>)
 80103a4:	2300      	movs	r3, #0
 80103a6:	4604      	mov	r4, r0
 80103a8:	4608      	mov	r0, r1
 80103aa:	4611      	mov	r1, r2
 80103ac:	602b      	str	r3, [r5, #0]
 80103ae:	f7f1 fde3 	bl	8001f78 <_fstat>
 80103b2:	1c43      	adds	r3, r0, #1
 80103b4:	d102      	bne.n	80103bc <_fstat_r+0x1c>
 80103b6:	682b      	ldr	r3, [r5, #0]
 80103b8:	b103      	cbz	r3, 80103bc <_fstat_r+0x1c>
 80103ba:	6023      	str	r3, [r4, #0]
 80103bc:	bd38      	pop	{r3, r4, r5, pc}
 80103be:	bf00      	nop
 80103c0:	240009a8 	.word	0x240009a8

080103c4 <_isatty_r>:
 80103c4:	b538      	push	{r3, r4, r5, lr}
 80103c6:	4d06      	ldr	r5, [pc, #24]	@ (80103e0 <_isatty_r+0x1c>)
 80103c8:	2300      	movs	r3, #0
 80103ca:	4604      	mov	r4, r0
 80103cc:	4608      	mov	r0, r1
 80103ce:	602b      	str	r3, [r5, #0]
 80103d0:	f7f1 fde2 	bl	8001f98 <_isatty>
 80103d4:	1c43      	adds	r3, r0, #1
 80103d6:	d102      	bne.n	80103de <_isatty_r+0x1a>
 80103d8:	682b      	ldr	r3, [r5, #0]
 80103da:	b103      	cbz	r3, 80103de <_isatty_r+0x1a>
 80103dc:	6023      	str	r3, [r4, #0]
 80103de:	bd38      	pop	{r3, r4, r5, pc}
 80103e0:	240009a8 	.word	0x240009a8

080103e4 <_init>:
 80103e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103e6:	bf00      	nop
 80103e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80103ea:	bc08      	pop	{r3}
 80103ec:	469e      	mov	lr, r3
 80103ee:	4770      	bx	lr

080103f0 <_fini>:
 80103f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103f2:	bf00      	nop
 80103f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80103f6:	bc08      	pop	{r3}
 80103f8:	469e      	mov	lr, r3
 80103fa:	4770      	bx	lr
