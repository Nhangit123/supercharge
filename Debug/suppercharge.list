
suppercharge.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011f54  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b0  080121f8  080121f8  000131f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080127a8  080127a8  000137a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080127b0  080127b0  000137b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080127b4  080127b4  000137b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001d8  24000000  080127b8  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000924  240001d8  08012990  000141d8  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  24000afc  08012990  00014afc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000141d8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00023e76  00000000  00000000  00014206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000408e  00000000  00000000  0003807c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001b80  00000000  00000000  0003c110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001570  00000000  00000000  0003dc90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003cb0f  00000000  00000000  0003f200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000293fe  00000000  00000000  0007bd0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00180c68  00000000  00000000  000a510d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00225d75  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008380  00000000  00000000  00225db8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000004a  00000000  00000000  0022e138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001d8 	.word	0x240001d8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080121dc 	.word	0x080121dc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001dc 	.word	0x240001dc
 80002dc:	080121dc 	.word	0x080121dc

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <HAL_ADC_ConvCpltCallback>:
extern uint16_t adc_value[4];
extern double isense,voutsense,vinsense,vcbsense;


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000680:	b480      	push	{r7}
 8000682:	b08b      	sub	sp, #44	@ 0x2c
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
    double v_adc0 = ((double)adc_value[0] / ADC_RES) * VREF;
 8000688:	4b4d      	ldr	r3, [pc, #308]	@ (80007c0 <HAL_ADC_ConvCpltCallback+0x140>)
 800068a:	881b      	ldrh	r3, [r3, #0]
 800068c:	ee07 3a90 	vmov	s15, r3
 8000690:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000694:	ed9f 5b3e 	vldr	d5, [pc, #248]	@ 8000790 <HAL_ADC_ConvCpltCallback+0x110>
 8000698:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800069c:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 8000798 <HAL_ADC_ConvCpltCallback+0x118>
 80006a0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80006a4:	ed87 7b08 	vstr	d7, [r7, #32]
    double v_adc1 = ((double)adc_value[1] / ADC_RES) * VREF;
 80006a8:	4b45      	ldr	r3, [pc, #276]	@ (80007c0 <HAL_ADC_ConvCpltCallback+0x140>)
 80006aa:	885b      	ldrh	r3, [r3, #2]
 80006ac:	ee07 3a90 	vmov	s15, r3
 80006b0:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80006b4:	ed9f 5b36 	vldr	d5, [pc, #216]	@ 8000790 <HAL_ADC_ConvCpltCallback+0x110>
 80006b8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80006bc:	ed9f 6b36 	vldr	d6, [pc, #216]	@ 8000798 <HAL_ADC_ConvCpltCallback+0x118>
 80006c0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80006c4:	ed87 7b06 	vstr	d7, [r7, #24]
    double v_adc2 = ((double)adc_value[2] / ADC_RES) * VREF;
 80006c8:	4b3d      	ldr	r3, [pc, #244]	@ (80007c0 <HAL_ADC_ConvCpltCallback+0x140>)
 80006ca:	889b      	ldrh	r3, [r3, #4]
 80006cc:	ee07 3a90 	vmov	s15, r3
 80006d0:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80006d4:	ed9f 5b2e 	vldr	d5, [pc, #184]	@ 8000790 <HAL_ADC_ConvCpltCallback+0x110>
 80006d8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80006dc:	ed9f 6b2e 	vldr	d6, [pc, #184]	@ 8000798 <HAL_ADC_ConvCpltCallback+0x118>
 80006e0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80006e4:	ed87 7b04 	vstr	d7, [r7, #16]
    double v_adc3 = ((double)adc_value[3] / ADC_RES) * VREF;
 80006e8:	4b35      	ldr	r3, [pc, #212]	@ (80007c0 <HAL_ADC_ConvCpltCallback+0x140>)
 80006ea:	88db      	ldrh	r3, [r3, #6]
 80006ec:	ee07 3a90 	vmov	s15, r3
 80006f0:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80006f4:	ed9f 5b26 	vldr	d5, [pc, #152]	@ 8000790 <HAL_ADC_ConvCpltCallback+0x110>
 80006f8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80006fc:	ed9f 6b26 	vldr	d6, [pc, #152]	@ 8000798 <HAL_ADC_ConvCpltCallback+0x118>
 8000700:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000704:	ed87 7b02 	vstr	d7, [r7, #8]

    isense = (((1.38-v_adc0)/0.7+1.38)/3.3*4.3-2.5)*10 ;
 8000708:	ed9f 6b25 	vldr	d6, [pc, #148]	@ 80007a0 <HAL_ADC_ConvCpltCallback+0x120>
 800070c:	ed97 7b08 	vldr	d7, [r7, #32]
 8000710:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000714:	ed9f 5b24 	vldr	d5, [pc, #144]	@ 80007a8 <HAL_ADC_ConvCpltCallback+0x128>
 8000718:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800071c:	ed9f 6b20 	vldr	d6, [pc, #128]	@ 80007a0 <HAL_ADC_ConvCpltCallback+0x120>
 8000720:	ee37 6b06 	vadd.f64	d6, d7, d6
 8000724:	ed9f 5b22 	vldr	d5, [pc, #136]	@ 80007b0 <HAL_ADC_ConvCpltCallback+0x130>
 8000728:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800072c:	ed9f 6b22 	vldr	d6, [pc, #136]	@ 80007b8 <HAL_ADC_ConvCpltCallback+0x138>
 8000730:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000734:	eeb0 6b04 	vmov.f64	d6, #4	@ 0x40200000  2.5
 8000738:	ee37 7b46 	vsub.f64	d7, d7, d6
 800073c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8000740:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000744:	4b1f      	ldr	r3, [pc, #124]	@ (80007c4 <HAL_ADC_ConvCpltCallback+0x144>)
 8000746:	ed83 7b00 	vstr	d7, [r3]
    voutsense = v_adc1*10 ;
 800074a:	ed97 7b06 	vldr	d7, [r7, #24]
 800074e:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8000752:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000756:	4b1c      	ldr	r3, [pc, #112]	@ (80007c8 <HAL_ADC_ConvCpltCallback+0x148>)
 8000758:	ed83 7b00 	vstr	d7, [r3]
    vinsense  = v_adc2*10 ;
 800075c:	ed97 7b04 	vldr	d7, [r7, #16]
 8000760:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8000764:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000768:	4b18      	ldr	r3, [pc, #96]	@ (80007cc <HAL_ADC_ConvCpltCallback+0x14c>)
 800076a:	ed83 7b00 	vstr	d7, [r3]
    vcbsense  = v_adc3*10 ;
 800076e:	ed97 7b02 	vldr	d7, [r7, #8]
 8000772:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8000776:	ee27 7b06 	vmul.f64	d7, d7, d6
 800077a:	4b15      	ldr	r3, [pc, #84]	@ (80007d0 <HAL_ADC_ConvCpltCallback+0x150>)
 800077c:	ed83 7b00 	vstr	d7, [r3]

//    send_data_to_winform(isense, voutsense, vinsense, vcbsense);
}
 8000780:	bf00      	nop
 8000782:	372c      	adds	r7, #44	@ 0x2c
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr
 800078c:	f3af 8000 	nop.w
 8000790:	00000000 	.word	0x00000000
 8000794:	40f00000 	.word	0x40f00000
 8000798:	60000000 	.word	0x60000000
 800079c:	400a6666 	.word	0x400a6666
 80007a0:	e147ae14 	.word	0xe147ae14
 80007a4:	3ff6147a 	.word	0x3ff6147a
 80007a8:	66666666 	.word	0x66666666
 80007ac:	3fe66666 	.word	0x3fe66666
 80007b0:	66666666 	.word	0x66666666
 80007b4:	400a6666 	.word	0x400a6666
 80007b8:	33333333 	.word	0x33333333
 80007bc:	40113333 	.word	0x40113333
 80007c0:	240001f4 	.word	0x240001f4
 80007c4:	24000200 	.word	0x24000200
 80007c8:	24000208 	.word	0x24000208
 80007cc:	24000210 	.word	0x24000210
 80007d0:	24000218 	.word	0x24000218

080007d4 <adc_get_value>:

void adc_get_value()
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, adc_value, 4);
 80007d8:	2204      	movs	r2, #4
 80007da:	4903      	ldr	r1, [pc, #12]	@ (80007e8 <adc_get_value+0x14>)
 80007dc:	4803      	ldr	r0, [pc, #12]	@ (80007ec <adc_get_value+0x18>)
 80007de:	f002 fb89 	bl	8002ef4 <HAL_ADC_Start_DMA>
}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	240001f4 	.word	0x240001f4
 80007ec:	24000224 	.word	0x24000224

080007f0 <eeprom_devaddr7>:
#include "at24c08c.h"
extern I2C_HandleTypeDef hi2c1;

// Gom thành hàm nhỏ: tính addr 7-bit sau khi nhét A2, P1, P0
static inline uint8_t eeprom_devaddr7(uint16_t mem_addr_10bit)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b085      	sub	sp, #20
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	4603      	mov	r3, r0
 80007f8:	80fb      	strh	r3, [r7, #6]
    uint8_t block = (mem_addr_10bit >> 8) & 0x03;  // A9..A8 → P1,P0
 80007fa:	88fb      	ldrh	r3, [r7, #6]
 80007fc:	0a1b      	lsrs	r3, r3, #8
 80007fe:	b29b      	uxth	r3, r3
 8000800:	b2db      	uxtb	r3, r3
 8000802:	f003 0303 	and.w	r3, r3, #3
 8000806:	73fb      	strb	r3, [r7, #15]
    return (AT24C08_BASE_ADDR_7B | (AT24C08_A2 << 2) | block); // 7-bit
 8000808:	7bfb      	ldrb	r3, [r7, #15]
 800080a:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 800080e:	b2db      	uxtb	r3, r3
}
 8000810:	4618      	mov	r0, r3
 8000812:	3714      	adds	r7, #20
 8000814:	46bd      	mov	sp, r7
 8000816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081a:	4770      	bx	lr

0800081c <EEPROM_WriteByte>:

void EEPROM_WriteByte(uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b088      	sub	sp, #32
 8000820:	af02      	add	r7, sp, #8
 8000822:	60ba      	str	r2, [r7, #8]
 8000824:	461a      	mov	r2, r3
 8000826:	4603      	mov	r3, r0
 8000828:	81fb      	strh	r3, [r7, #14]
 800082a:	460b      	mov	r3, r1
 800082c:	81bb      	strh	r3, [r7, #12]
 800082e:	4613      	mov	r3, r2
 8000830:	80fb      	strh	r3, [r7, #6]
    if (page >= PAGE_NUM || offset >= PAGE_SIZE || size == 0) return;
 8000832:	89fb      	ldrh	r3, [r7, #14]
 8000834:	2b3f      	cmp	r3, #63	@ 0x3f
 8000836:	d82b      	bhi.n	8000890 <EEPROM_WriteByte+0x74>
 8000838:	89bb      	ldrh	r3, [r7, #12]
 800083a:	2b0f      	cmp	r3, #15
 800083c:	d828      	bhi.n	8000890 <EEPROM_WriteByte+0x74>
 800083e:	88fb      	ldrh	r3, [r7, #6]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d025      	beq.n	8000890 <EEPROM_WriteByte+0x74>
    if (offset + size > PAGE_SIZE) size = PAGE_SIZE - offset;
 8000844:	89ba      	ldrh	r2, [r7, #12]
 8000846:	88fb      	ldrh	r3, [r7, #6]
 8000848:	4413      	add	r3, r2
 800084a:	2b10      	cmp	r3, #16
 800084c:	dd03      	ble.n	8000856 <EEPROM_WriteByte+0x3a>
 800084e:	89bb      	ldrh	r3, [r7, #12]
 8000850:	f1c3 0310 	rsb	r3, r3, #16
 8000854:	80fb      	strh	r3, [r7, #6]

    uint16_t mem_addr = (page * PAGE_SIZE) + offset;     // 0..1023 (10-bit)
 8000856:	89fb      	ldrh	r3, [r7, #14]
 8000858:	011b      	lsls	r3, r3, #4
 800085a:	b29a      	uxth	r2, r3
 800085c:	89bb      	ldrh	r3, [r7, #12]
 800085e:	4413      	add	r3, r2
 8000860:	82fb      	strh	r3, [r7, #22]
    uint8_t  dev7     = eeprom_devaddr7(mem_addr);       // 7-bit device address
 8000862:	8afb      	ldrh	r3, [r7, #22]
 8000864:	4618      	mov	r0, r3
 8000866:	f7ff ffc3 	bl	80007f0 <eeprom_devaddr7>
 800086a:	4603      	mov	r3, r0
 800086c:	757b      	strb	r3, [r7, #21]
    uint8_t  mem8     = (uint8_t)(mem_addr & 0xFF);      // địa chỉ ô nhớ thấp 8 bit
 800086e:	8afb      	ldrh	r3, [r7, #22]
 8000870:	753b      	strb	r3, [r7, #20]

    // HAL mong DevAddress là địa chỉ 7-bit << 1
    HAL_I2C_Mem_Write_DMA(&hi2c1, (uint16_t)(dev7 << 1), mem8, I2C_MEMADD_SIZE_8BIT, data, size);
 8000872:	7d7b      	ldrb	r3, [r7, #21]
 8000874:	b29b      	uxth	r3, r3
 8000876:	005b      	lsls	r3, r3, #1
 8000878:	b299      	uxth	r1, r3
 800087a:	7d3b      	ldrb	r3, [r7, #20]
 800087c:	b29a      	uxth	r2, r3
 800087e:	88fb      	ldrh	r3, [r7, #6]
 8000880:	9301      	str	r3, [sp, #4]
 8000882:	68bb      	ldr	r3, [r7, #8]
 8000884:	9300      	str	r3, [sp, #0]
 8000886:	2301      	movs	r3, #1
 8000888:	4803      	ldr	r0, [pc, #12]	@ (8000898 <EEPROM_WriteByte+0x7c>)
 800088a:	f006 fcf3 	bl	8007274 <HAL_I2C_Mem_Write_DMA>
 800088e:	e000      	b.n	8000892 <EEPROM_WriteByte+0x76>
    if (page >= PAGE_NUM || offset >= PAGE_SIZE || size == 0) return;
 8000890:	bf00      	nop

}
 8000892:	3718      	adds	r7, #24
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	24000300 	.word	0x24000300

0800089c <enable_bypass>:
 *  Created on: Aug 3, 2025
 *      Author: Nhan
 */
#include "bypass.h"
void enable_bypass()
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 80008a0:	2201      	movs	r2, #1
 80008a2:	2140      	movs	r1, #64	@ 0x40
 80008a4:	4802      	ldr	r0, [pc, #8]	@ (80008b0 <enable_bypass+0x14>)
 80008a6:	f006 fc15 	bl	80070d4 <HAL_GPIO_WritePin>
}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	58020000 	.word	0x58020000
 80008b4:	00000000 	.word	0x00000000

080008b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b096      	sub	sp, #88	@ 0x58
 80008bc:	af08      	add	r7, sp, #32
  /* USER CODE BEGIN 1 */
//	uint8_t data_write = 0xAB;
  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80008be:	f000 fccb 	bl	8001258 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008c2:	f001 fecb 	bl	800265c <HAL_Init>
//   app_init();

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008c6:	f000 f871 	bl	80009ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008ca:	f000 fbef 	bl	80010ac <MX_GPIO_Init>
  MX_DMA_Init();
 80008ce:	f000 fbbd 	bl	800104c <MX_DMA_Init>
  MX_TIM4_Init();
 80008d2:	f000 fad5 	bl	8000e80 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 80008d6:	f000 fb6d 	bl	8000fb4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80008da:	f000 f999 	bl	8000c10 <MX_I2C1_Init>
  MX_SPI3_Init();
 80008de:	f000 f9d7 	bl	8000c90 <MX_SPI3_Init>
  MX_ADC1_Init();
 80008e2:	f000 f8e1 	bl	8000aa8 <MX_ADC1_Init>
  MX_TIM1_Init();
 80008e6:	f000 fa29 	bl	8000d3c <MX_TIM1_Init>
  MX_UART7_Init();
 80008ea:	f000 fb17 	bl	8000f1c <MX_UART7_Init>
  MX_TIM2_Init();
 80008ee:	f000 fa79 	bl	8000de4 <MX_TIM2_Init>
  Control_Init();
 80008f2:	f000 fded 	bl	80014d0 <Control_Init>

  double V_CB;
  double V_Bat;
  double Vref;
  double Ib;
  double D = 0;
 80008f6:	f04f 0200 	mov.w	r2, #0
 80008fa:	f04f 0300 	mov.w	r3, #0
 80008fe:	e9c7 2304 	strd	r2, r3, [r7, #16]
  		double uk_V, uk_Ib, I_SPb, Count, bf1, bf2, bf3;
  		HAL_TIM_Base_Start_IT(&htim2);
 8000902:	4825      	ldr	r0, [pc, #148]	@ (8000998 <main+0xe0>)
 8000904:	f00c fe54 	bl	800d5b0 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
//	    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,1);
	    	  adc_get_value();
 8000908:	f7ff ff64 	bl	80007d4 <adc_get_value>
	    	   V_CB = voutsense;
 800090c:	4b23      	ldr	r3, [pc, #140]	@ (800099c <main+0xe4>)
 800090e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000912:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	    	   V_Bat = vinsense;
 8000916:	4b22      	ldr	r3, [pc, #136]	@ (80009a0 <main+0xe8>)
 8000918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800091c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	    	  Vref = 24;  // Set your reference voltage
 8000920:	f04f 0200 	mov.w	r2, #0
 8000924:	4b1f      	ldr	r3, [pc, #124]	@ (80009a4 <main+0xec>)
 8000926:	e9c7 2308 	strd	r2, r3, [r7, #32]
	    	   Ib = isense;
 800092a:	4b1f      	ldr	r3, [pc, #124]	@ (80009a8 <main+0xf0>)
 800092c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000930:	e9c7 2306 	strd	r2, r3, [r7, #24]

	    	  // Control variables


	    	  // Update control system
	    	  Control_Update(V_CB, V_Bat, Vref, 0, 0, &D, 0, &uk_V, &uk_Ib, 0, 0, 0, 0, 0, 0, 0);
 8000934:	463b      	mov	r3, r7
 8000936:	f107 0208 	add.w	r2, r7, #8
 800093a:	f107 0010 	add.w	r0, r7, #16
 800093e:	2100      	movs	r1, #0
 8000940:	9106      	str	r1, [sp, #24]
 8000942:	2100      	movs	r1, #0
 8000944:	9105      	str	r1, [sp, #20]
 8000946:	2100      	movs	r1, #0
 8000948:	9104      	str	r1, [sp, #16]
 800094a:	2100      	movs	r1, #0
 800094c:	9103      	str	r1, [sp, #12]
 800094e:	2100      	movs	r1, #0
 8000950:	9102      	str	r1, [sp, #8]
 8000952:	2100      	movs	r1, #0
 8000954:	9101      	str	r1, [sp, #4]
 8000956:	2100      	movs	r1, #0
 8000958:	9100      	str	r1, [sp, #0]
 800095a:	2100      	movs	r1, #0
 800095c:	ed9f 4b0c 	vldr	d4, [pc, #48]	@ 8000990 <main+0xd8>
 8000960:	ed9f 3b0b 	vldr	d3, [pc, #44]	@ 8000990 <main+0xd8>
 8000964:	ed97 2b08 	vldr	d2, [r7, #32]
 8000968:	ed97 1b0a 	vldr	d1, [r7, #40]	@ 0x28
 800096c:	ed97 0b0c 	vldr	d0, [r7, #48]	@ 0x30
 8000970:	f000 fffa 	bl	8001968 <Control_Update>

	    	   //Update PWM duty cycle
	    	  mosfet(D);
 8000974:	ed97 7b04 	vldr	d7, [r7, #16]
 8000978:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800097c:	eeb0 0a67 	vmov.f32	s0, s15
 8000980:	f001 fdfa 	bl	8002578 <mosfet>

	    	   //Add delay or wait for timer interrupt
	    	  delay_ns(500);  // Adjust based on your control frequency
 8000984:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000988:	f001 fe12 	bl	80025b0 <delay_ns>
  {
 800098c:	bf00      	nop
 800098e:	e7bb      	b.n	8000908 <main+0x50>
	...
 8000998:	24000518 	.word	0x24000518
 800099c:	24000208 	.word	0x24000208
 80009a0:	24000210 	.word	0x24000210
 80009a4:	40380000 	.word	0x40380000
 80009a8:	24000200 	.word	0x24000200

080009ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b09c      	sub	sp, #112	@ 0x70
 80009b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009b6:	224c      	movs	r2, #76	@ 0x4c
 80009b8:	2100      	movs	r1, #0
 80009ba:	4618      	mov	r0, r3
 80009bc:	f00f fd59 	bl	8010472 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009c0:	1d3b      	adds	r3, r7, #4
 80009c2:	2220      	movs	r2, #32
 80009c4:	2100      	movs	r1, #0
 80009c6:	4618      	mov	r0, r3
 80009c8:	f00f fd53 	bl	8010472 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80009cc:	2002      	movs	r0, #2
 80009ce:	f008 fc11 	bl	80091f4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80009d2:	2300      	movs	r3, #0
 80009d4:	603b      	str	r3, [r7, #0]
 80009d6:	4b32      	ldr	r3, [pc, #200]	@ (8000aa0 <SystemClock_Config+0xf4>)
 80009d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009da:	4a31      	ldr	r2, [pc, #196]	@ (8000aa0 <SystemClock_Config+0xf4>)
 80009dc:	f023 0301 	bic.w	r3, r3, #1
 80009e0:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80009e2:	4b2f      	ldr	r3, [pc, #188]	@ (8000aa0 <SystemClock_Config+0xf4>)
 80009e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009e6:	f003 0301 	and.w	r3, r3, #1
 80009ea:	603b      	str	r3, [r7, #0]
 80009ec:	4b2d      	ldr	r3, [pc, #180]	@ (8000aa4 <SystemClock_Config+0xf8>)
 80009ee:	699b      	ldr	r3, [r3, #24]
 80009f0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80009f4:	4a2b      	ldr	r2, [pc, #172]	@ (8000aa4 <SystemClock_Config+0xf8>)
 80009f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009fa:	6193      	str	r3, [r2, #24]
 80009fc:	4b29      	ldr	r3, [pc, #164]	@ (8000aa4 <SystemClock_Config+0xf8>)
 80009fe:	699b      	ldr	r3, [r3, #24]
 8000a00:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a04:	603b      	str	r3, [r7, #0]
 8000a06:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a08:	bf00      	nop
 8000a0a:	4b26      	ldr	r3, [pc, #152]	@ (8000aa4 <SystemClock_Config+0xf8>)
 8000a0c:	699b      	ldr	r3, [r3, #24]
 8000a0e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000a16:	d1f8      	bne.n	8000a0a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a18:	2302      	movs	r3, #2
 8000a1a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a20:	2340      	movs	r3, #64	@ 0x40
 8000a22:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a24:	2302      	movs	r3, #2
 8000a26:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a2c:	2304      	movs	r3, #4
 8000a2e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 8000a30:	2312      	movs	r3, #18
 8000a32:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a34:	2302      	movs	r3, #2
 8000a36:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000a38:	2303      	movs	r3, #3
 8000a3a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a40:	230c      	movs	r3, #12
 8000a42:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a44:	2300      	movs	r3, #0
 8000a46:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a50:	4618      	mov	r0, r3
 8000a52:	f008 fc09 	bl	8009268 <HAL_RCC_OscConfig>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000a5c:	f000 fc28 	bl	80012b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a60:	233f      	movs	r3, #63	@ 0x3f
 8000a62:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a64:	2303      	movs	r3, #3
 8000a66:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000a70:	2340      	movs	r3, #64	@ 0x40
 8000a72:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV4;
 8000a74:	2350      	movs	r3, #80	@ 0x50
 8000a76:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV8;
 8000a78:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000a7c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000a7e:	2340      	movs	r3, #64	@ 0x40
 8000a80:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000a82:	1d3b      	adds	r3, r7, #4
 8000a84:	2103      	movs	r1, #3
 8000a86:	4618      	mov	r0, r3
 8000a88:	f009 f848 	bl	8009b1c <HAL_RCC_ClockConfig>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000a92:	f000 fc0d 	bl	80012b0 <Error_Handler>
  }
}
 8000a96:	bf00      	nop
 8000a98:	3770      	adds	r7, #112	@ 0x70
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	58000400 	.word	0x58000400
 8000aa4:	58024800 	.word	0x58024800

08000aa8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b08a      	sub	sp, #40	@ 0x28
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000aae:	f107 031c 	add.w	r3, r7, #28
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]
 8000ab6:	605a      	str	r2, [r3, #4]
 8000ab8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000aba:	463b      	mov	r3, r7
 8000abc:	2200      	movs	r2, #0
 8000abe:	601a      	str	r2, [r3, #0]
 8000ac0:	605a      	str	r2, [r3, #4]
 8000ac2:	609a      	str	r2, [r3, #8]
 8000ac4:	60da      	str	r2, [r3, #12]
 8000ac6:	611a      	str	r2, [r3, #16]
 8000ac8:	615a      	str	r2, [r3, #20]
 8000aca:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000acc:	4b4a      	ldr	r3, [pc, #296]	@ (8000bf8 <MX_ADC1_Init+0x150>)
 8000ace:	4a4b      	ldr	r2, [pc, #300]	@ (8000bfc <MX_ADC1_Init+0x154>)
 8000ad0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000ad2:	4b49      	ldr	r3, [pc, #292]	@ (8000bf8 <MX_ADC1_Init+0x150>)
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000ad8:	4b47      	ldr	r3, [pc, #284]	@ (8000bf8 <MX_ADC1_Init+0x150>)
 8000ada:	2208      	movs	r2, #8
 8000adc:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ade:	4b46      	ldr	r3, [pc, #280]	@ (8000bf8 <MX_ADC1_Init+0x150>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ae4:	4b44      	ldr	r3, [pc, #272]	@ (8000bf8 <MX_ADC1_Init+0x150>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 4;
 8000aea:	4b43      	ldr	r3, [pc, #268]	@ (8000bf8 <MX_ADC1_Init+0x150>)
 8000aec:	2204      	movs	r2, #4
 8000aee:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000af0:	4b41      	ldr	r3, [pc, #260]	@ (8000bf8 <MX_ADC1_Init+0x150>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000af6:	4b40      	ldr	r3, [pc, #256]	@ (8000bf8 <MX_ADC1_Init+0x150>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000afc:	4b3e      	ldr	r3, [pc, #248]	@ (8000bf8 <MX_ADC1_Init+0x150>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_ONESHOT;
 8000b02:	4b3d      	ldr	r3, [pc, #244]	@ (8000bf8 <MX_ADC1_Init+0x150>)
 8000b04:	2201      	movs	r2, #1
 8000b06:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b08:	4b3b      	ldr	r3, [pc, #236]	@ (8000bf8 <MX_ADC1_Init+0x150>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000b0e:	4b3a      	ldr	r3, [pc, #232]	@ (8000bf8 <MX_ADC1_Init+0x150>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000b14:	4b38      	ldr	r3, [pc, #224]	@ (8000bf8 <MX_ADC1_Init+0x150>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 1;
 8000b1c:	4b36      	ldr	r3, [pc, #216]	@ (8000bf8 <MX_ADC1_Init+0x150>)
 8000b1e:	2201      	movs	r2, #1
 8000b20:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b22:	4835      	ldr	r0, [pc, #212]	@ (8000bf8 <MX_ADC1_Init+0x150>)
 8000b24:	f002 f844 	bl	8002bb0 <HAL_ADC_Init>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000b2e:	f000 fbbf 	bl	80012b0 <Error_Handler>
  }
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000b32:	4b31      	ldr	r3, [pc, #196]	@ (8000bf8 <MX_ADC1_Init+0x150>)
 8000b34:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000b38:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000b3a:	4b2f      	ldr	r3, [pc, #188]	@ (8000bf8 <MX_ADC1_Init+0x150>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b40:	482d      	ldr	r0, [pc, #180]	@ (8000bf8 <MX_ADC1_Init+0x150>)
 8000b42:	f002 f835 	bl	8002bb0 <HAL_ADC_Init>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8000b4c:	f000 fbb0 	bl	80012b0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000b50:	2300      	movs	r3, #0
 8000b52:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000b54:	f107 031c 	add.w	r3, r7, #28
 8000b58:	4619      	mov	r1, r3
 8000b5a:	4827      	ldr	r0, [pc, #156]	@ (8000bf8 <MX_ADC1_Init+0x150>)
 8000b5c:	f003 f84e 	bl	8003bfc <HAL_ADCEx_MultiModeConfigChannel>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8000b66:	f000 fba3 	bl	80012b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000b6a:	4b25      	ldr	r3, [pc, #148]	@ (8000c00 <MX_ADC1_Init+0x158>)
 8000b6c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b6e:	2306      	movs	r3, #6
 8000b70:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b72:	2300      	movs	r3, #0
 8000b74:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b76:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000b7a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b7c:	2304      	movs	r3, #4
 8000b7e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000b80:	2300      	movs	r3, #0
 8000b82:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000b84:	2300      	movs	r3, #0
 8000b86:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b88:	463b      	mov	r3, r7
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	481a      	ldr	r0, [pc, #104]	@ (8000bf8 <MX_ADC1_Init+0x150>)
 8000b8e:	f002 fa89 	bl	80030a4 <HAL_ADC_ConfigChannel>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 8000b98:	f000 fb8a 	bl	80012b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000b9c:	4b19      	ldr	r3, [pc, #100]	@ (8000c04 <MX_ADC1_Init+0x15c>)
 8000b9e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000ba0:	230c      	movs	r3, #12
 8000ba2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ba4:	463b      	mov	r3, r7
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4813      	ldr	r0, [pc, #76]	@ (8000bf8 <MX_ADC1_Init+0x150>)
 8000baa:	f002 fa7b 	bl	80030a4 <HAL_ADC_ConfigChannel>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_ADC1_Init+0x110>
  {
    Error_Handler();
 8000bb4:	f000 fb7c 	bl	80012b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000bb8:	4b13      	ldr	r3, [pc, #76]	@ (8000c08 <MX_ADC1_Init+0x160>)
 8000bba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000bbc:	2312      	movs	r3, #18
 8000bbe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bc0:	463b      	mov	r3, r7
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	480c      	ldr	r0, [pc, #48]	@ (8000bf8 <MX_ADC1_Init+0x150>)
 8000bc6:	f002 fa6d 	bl	80030a4 <HAL_ADC_ConfigChannel>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_ADC1_Init+0x12c>
  {
    Error_Handler();
 8000bd0:	f000 fb6e 	bl	80012b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 8000bd4:	4b0d      	ldr	r3, [pc, #52]	@ (8000c0c <MX_ADC1_Init+0x164>)
 8000bd6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000bd8:	2318      	movs	r3, #24
 8000bda:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bdc:	463b      	mov	r3, r7
 8000bde:	4619      	mov	r1, r3
 8000be0:	4805      	ldr	r0, [pc, #20]	@ (8000bf8 <MX_ADC1_Init+0x150>)
 8000be2:	f002 fa5f 	bl	80030a4 <HAL_ADC_ConfigChannel>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_ADC1_Init+0x148>
  {
    Error_Handler();
 8000bec:	f000 fb60 	bl	80012b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000bf0:	bf00      	nop
 8000bf2:	3728      	adds	r7, #40	@ 0x28
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	24000224 	.word	0x24000224
 8000bfc:	40022000 	.word	0x40022000
 8000c00:	1d500080 	.word	0x1d500080
 8000c04:	10c00010 	.word	0x10c00010
 8000c08:	21800100 	.word	0x21800100
 8000c0c:	4b840000 	.word	0x4b840000

08000c10 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c14:	4b1b      	ldr	r3, [pc, #108]	@ (8000c84 <MX_I2C1_Init+0x74>)
 8000c16:	4a1c      	ldr	r2, [pc, #112]	@ (8000c88 <MX_I2C1_Init+0x78>)
 8000c18:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00305FFF;
 8000c1a:	4b1a      	ldr	r3, [pc, #104]	@ (8000c84 <MX_I2C1_Init+0x74>)
 8000c1c:	4a1b      	ldr	r2, [pc, #108]	@ (8000c8c <MX_I2C1_Init+0x7c>)
 8000c1e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000c20:	4b18      	ldr	r3, [pc, #96]	@ (8000c84 <MX_I2C1_Init+0x74>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c26:	4b17      	ldr	r3, [pc, #92]	@ (8000c84 <MX_I2C1_Init+0x74>)
 8000c28:	2201      	movs	r2, #1
 8000c2a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c2c:	4b15      	ldr	r3, [pc, #84]	@ (8000c84 <MX_I2C1_Init+0x74>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c32:	4b14      	ldr	r3, [pc, #80]	@ (8000c84 <MX_I2C1_Init+0x74>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c38:	4b12      	ldr	r3, [pc, #72]	@ (8000c84 <MX_I2C1_Init+0x74>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c3e:	4b11      	ldr	r3, [pc, #68]	@ (8000c84 <MX_I2C1_Init+0x74>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c44:	4b0f      	ldr	r3, [pc, #60]	@ (8000c84 <MX_I2C1_Init+0x74>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c4a:	480e      	ldr	r0, [pc, #56]	@ (8000c84 <MX_I2C1_Init+0x74>)
 8000c4c:	f006 fa76 	bl	800713c <HAL_I2C_Init>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000c56:	f000 fb2b 	bl	80012b0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	4809      	ldr	r0, [pc, #36]	@ (8000c84 <MX_I2C1_Init+0x74>)
 8000c5e:	f008 fa31 	bl	80090c4 <HAL_I2CEx_ConfigAnalogFilter>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000c68:	f000 fb22 	bl	80012b0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	4805      	ldr	r0, [pc, #20]	@ (8000c84 <MX_I2C1_Init+0x74>)
 8000c70:	f008 fa73 	bl	800915a <HAL_I2CEx_ConfigDigitalFilter>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000c7a:	f000 fb19 	bl	80012b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	24000300 	.word	0x24000300
 8000c88:	40005400 	.word	0x40005400
 8000c8c:	00305fff 	.word	0x00305fff

08000c90 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000c94:	4b27      	ldr	r3, [pc, #156]	@ (8000d34 <MX_SPI3_Init+0xa4>)
 8000c96:	4a28      	ldr	r2, [pc, #160]	@ (8000d38 <MX_SPI3_Init+0xa8>)
 8000c98:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000c9a:	4b26      	ldr	r3, [pc, #152]	@ (8000d34 <MX_SPI3_Init+0xa4>)
 8000c9c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000ca0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000ca2:	4b24      	ldr	r3, [pc, #144]	@ (8000d34 <MX_SPI3_Init+0xa4>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000ca8:	4b22      	ldr	r3, [pc, #136]	@ (8000d34 <MX_SPI3_Init+0xa4>)
 8000caa:	2203      	movs	r2, #3
 8000cac:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cae:	4b21      	ldr	r3, [pc, #132]	@ (8000d34 <MX_SPI3_Init+0xa4>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cb4:	4b1f      	ldr	r3, [pc, #124]	@ (8000d34 <MX_SPI3_Init+0xa4>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000cba:	4b1e      	ldr	r3, [pc, #120]	@ (8000d34 <MX_SPI3_Init+0xa4>)
 8000cbc:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000cc0:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000cc2:	4b1c      	ldr	r3, [pc, #112]	@ (8000d34 <MX_SPI3_Init+0xa4>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cc8:	4b1a      	ldr	r3, [pc, #104]	@ (8000d34 <MX_SPI3_Init+0xa4>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cce:	4b19      	ldr	r3, [pc, #100]	@ (8000d34 <MX_SPI3_Init+0xa4>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cd4:	4b17      	ldr	r3, [pc, #92]	@ (8000d34 <MX_SPI3_Init+0xa4>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8000cda:	4b16      	ldr	r3, [pc, #88]	@ (8000d34 <MX_SPI3_Init+0xa4>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ce0:	4b14      	ldr	r3, [pc, #80]	@ (8000d34 <MX_SPI3_Init+0xa4>)
 8000ce2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ce6:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000ce8:	4b12      	ldr	r3, [pc, #72]	@ (8000d34 <MX_SPI3_Init+0xa4>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000cee:	4b11      	ldr	r3, [pc, #68]	@ (8000d34 <MX_SPI3_Init+0xa4>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000cf4:	4b0f      	ldr	r3, [pc, #60]	@ (8000d34 <MX_SPI3_Init+0xa4>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000cfa:	4b0e      	ldr	r3, [pc, #56]	@ (8000d34 <MX_SPI3_Init+0xa4>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000d00:	4b0c      	ldr	r3, [pc, #48]	@ (8000d34 <MX_SPI3_Init+0xa4>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000d06:	4b0b      	ldr	r3, [pc, #44]	@ (8000d34 <MX_SPI3_Init+0xa4>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000d0c:	4b09      	ldr	r3, [pc, #36]	@ (8000d34 <MX_SPI3_Init+0xa4>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000d12:	4b08      	ldr	r3, [pc, #32]	@ (8000d34 <MX_SPI3_Init+0xa4>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000d18:	4b06      	ldr	r3, [pc, #24]	@ (8000d34 <MX_SPI3_Init+0xa4>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000d1e:	4805      	ldr	r0, [pc, #20]	@ (8000d34 <MX_SPI3_Init+0xa4>)
 8000d20:	f00b ff86 	bl	800cc30 <HAL_SPI_Init>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 8000d2a:	f000 fac1 	bl	80012b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000d2e:	bf00      	nop
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	24000444 	.word	0x24000444
 8000d38:	40003c00 	.word	0x40003c00

08000d3c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b088      	sub	sp, #32
 8000d40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d42:	f107 0310 	add.w	r3, r7, #16
 8000d46:	2200      	movs	r2, #0
 8000d48:	601a      	str	r2, [r3, #0]
 8000d4a:	605a      	str	r2, [r3, #4]
 8000d4c:	609a      	str	r2, [r3, #8]
 8000d4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d50:	1d3b      	adds	r3, r7, #4
 8000d52:	2200      	movs	r2, #0
 8000d54:	601a      	str	r2, [r3, #0]
 8000d56:	605a      	str	r2, [r3, #4]
 8000d58:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d5a:	4b20      	ldr	r3, [pc, #128]	@ (8000ddc <MX_TIM1_Init+0xa0>)
 8000d5c:	4a20      	ldr	r2, [pc, #128]	@ (8000de0 <MX_TIM1_Init+0xa4>)
 8000d5e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1-1;
 8000d60:	4b1e      	ldr	r3, [pc, #120]	@ (8000ddc <MX_TIM1_Init+0xa0>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d66:	4b1d      	ldr	r3, [pc, #116]	@ (8000ddc <MX_TIM1_Init+0xa0>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000d6c:	4b1b      	ldr	r3, [pc, #108]	@ (8000ddc <MX_TIM1_Init+0xa0>)
 8000d6e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d72:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d74:	4b19      	ldr	r3, [pc, #100]	@ (8000ddc <MX_TIM1_Init+0xa0>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d7a:	4b18      	ldr	r3, [pc, #96]	@ (8000ddc <MX_TIM1_Init+0xa0>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d80:	4b16      	ldr	r3, [pc, #88]	@ (8000ddc <MX_TIM1_Init+0xa0>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d86:	4815      	ldr	r0, [pc, #84]	@ (8000ddc <MX_TIM1_Init+0xa0>)
 8000d88:	f00c fb4b 	bl	800d422 <HAL_TIM_Base_Init>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000d92:	f000 fa8d 	bl	80012b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d96:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d9a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d9c:	f107 0310 	add.w	r3, r7, #16
 8000da0:	4619      	mov	r1, r3
 8000da2:	480e      	ldr	r0, [pc, #56]	@ (8000ddc <MX_TIM1_Init+0xa0>)
 8000da4:	f00c fd84 	bl	800d8b0 <HAL_TIM_ConfigClockSource>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000dae:	f000 fa7f 	bl	80012b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000db2:	2300      	movs	r3, #0
 8000db4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000db6:	2300      	movs	r3, #0
 8000db8:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000dbe:	1d3b      	adds	r3, r7, #4
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4806      	ldr	r0, [pc, #24]	@ (8000ddc <MX_TIM1_Init+0xa0>)
 8000dc4:	f00c ffd8 	bl	800dd78 <HAL_TIMEx_MasterConfigSynchronization>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000dce:	f000 fa6f 	bl	80012b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000dd2:	bf00      	nop
 8000dd4:	3720      	adds	r7, #32
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	240004cc 	.word	0x240004cc
 8000de0:	40010000 	.word	0x40010000

08000de4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b088      	sub	sp, #32
 8000de8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dea:	f107 0310 	add.w	r3, r7, #16
 8000dee:	2200      	movs	r2, #0
 8000df0:	601a      	str	r2, [r3, #0]
 8000df2:	605a      	str	r2, [r3, #4]
 8000df4:	609a      	str	r2, [r3, #8]
 8000df6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000df8:	1d3b      	adds	r3, r7, #4
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	601a      	str	r2, [r3, #0]
 8000dfe:	605a      	str	r2, [r3, #4]
 8000e00:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e02:	4b1e      	ldr	r3, [pc, #120]	@ (8000e7c <MX_TIM2_Init+0x98>)
 8000e04:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e08:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200-1;
 8000e0a:	4b1c      	ldr	r3, [pc, #112]	@ (8000e7c <MX_TIM2_Init+0x98>)
 8000e0c:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8000e10:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e12:	4b1a      	ldr	r3, [pc, #104]	@ (8000e7c <MX_TIM2_Init+0x98>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000e18:	4b18      	ldr	r3, [pc, #96]	@ (8000e7c <MX_TIM2_Init+0x98>)
 8000e1a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000e1e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e20:	4b16      	ldr	r3, [pc, #88]	@ (8000e7c <MX_TIM2_Init+0x98>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e26:	4b15      	ldr	r3, [pc, #84]	@ (8000e7c <MX_TIM2_Init+0x98>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e2c:	4813      	ldr	r0, [pc, #76]	@ (8000e7c <MX_TIM2_Init+0x98>)
 8000e2e:	f00c faf8 	bl	800d422 <HAL_TIM_Base_Init>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000e38:	f000 fa3a 	bl	80012b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e3c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e40:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e42:	f107 0310 	add.w	r3, r7, #16
 8000e46:	4619      	mov	r1, r3
 8000e48:	480c      	ldr	r0, [pc, #48]	@ (8000e7c <MX_TIM2_Init+0x98>)
 8000e4a:	f00c fd31 	bl	800d8b0 <HAL_TIM_ConfigClockSource>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000e54:	f000 fa2c 	bl	80012b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e60:	1d3b      	adds	r3, r7, #4
 8000e62:	4619      	mov	r1, r3
 8000e64:	4805      	ldr	r0, [pc, #20]	@ (8000e7c <MX_TIM2_Init+0x98>)
 8000e66:	f00c ff87 	bl	800dd78 <HAL_TIMEx_MasterConfigSynchronization>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000e70:	f000 fa1e 	bl	80012b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e74:	bf00      	nop
 8000e76:	3720      	adds	r7, #32
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	24000518 	.word	0x24000518

08000e80 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b088      	sub	sp, #32
 8000e84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e86:	f107 0310 	add.w	r3, r7, #16
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	601a      	str	r2, [r3, #0]
 8000e8e:	605a      	str	r2, [r3, #4]
 8000e90:	609a      	str	r2, [r3, #8]
 8000e92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e94:	1d3b      	adds	r3, r7, #4
 8000e96:	2200      	movs	r2, #0
 8000e98:	601a      	str	r2, [r3, #0]
 8000e9a:	605a      	str	r2, [r3, #4]
 8000e9c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000e9e:	4b1d      	ldr	r3, [pc, #116]	@ (8000f14 <MX_TIM4_Init+0x94>)
 8000ea0:	4a1d      	ldr	r2, [pc, #116]	@ (8000f18 <MX_TIM4_Init+0x98>)
 8000ea2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1-1;
 8000ea4:	4b1b      	ldr	r3, [pc, #108]	@ (8000f14 <MX_TIM4_Init+0x94>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eaa:	4b1a      	ldr	r3, [pc, #104]	@ (8000f14 <MX_TIM4_Init+0x94>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 179-1;
 8000eb0:	4b18      	ldr	r3, [pc, #96]	@ (8000f14 <MX_TIM4_Init+0x94>)
 8000eb2:	22b2      	movs	r2, #178	@ 0xb2
 8000eb4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eb6:	4b17      	ldr	r3, [pc, #92]	@ (8000f14 <MX_TIM4_Init+0x94>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ebc:	4b15      	ldr	r3, [pc, #84]	@ (8000f14 <MX_TIM4_Init+0x94>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000ec2:	4814      	ldr	r0, [pc, #80]	@ (8000f14 <MX_TIM4_Init+0x94>)
 8000ec4:	f00c faad 	bl	800d422 <HAL_TIM_Base_Init>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000ece:	f000 f9ef 	bl	80012b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ed2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ed6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000ed8:	f107 0310 	add.w	r3, r7, #16
 8000edc:	4619      	mov	r1, r3
 8000ede:	480d      	ldr	r0, [pc, #52]	@ (8000f14 <MX_TIM4_Init+0x94>)
 8000ee0:	f00c fce6 	bl	800d8b0 <HAL_TIM_ConfigClockSource>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000eea:	f000 f9e1 	bl	80012b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000ef6:	1d3b      	adds	r3, r7, #4
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4806      	ldr	r0, [pc, #24]	@ (8000f14 <MX_TIM4_Init+0x94>)
 8000efc:	f00c ff3c 	bl	800dd78 <HAL_TIMEx_MasterConfigSynchronization>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000f06:	f000 f9d3 	bl	80012b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000f0a:	bf00      	nop
 8000f0c:	3720      	adds	r7, #32
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	24000564 	.word	0x24000564
 8000f18:	40000800 	.word	0x40000800

08000f1c <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8000f20:	4b22      	ldr	r3, [pc, #136]	@ (8000fac <MX_UART7_Init+0x90>)
 8000f22:	4a23      	ldr	r2, [pc, #140]	@ (8000fb0 <MX_UART7_Init+0x94>)
 8000f24:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8000f26:	4b21      	ldr	r3, [pc, #132]	@ (8000fac <MX_UART7_Init+0x90>)
 8000f28:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f2c:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8000f2e:	4b1f      	ldr	r3, [pc, #124]	@ (8000fac <MX_UART7_Init+0x90>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8000f34:	4b1d      	ldr	r3, [pc, #116]	@ (8000fac <MX_UART7_Init+0x90>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8000f3a:	4b1c      	ldr	r3, [pc, #112]	@ (8000fac <MX_UART7_Init+0x90>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8000f40:	4b1a      	ldr	r3, [pc, #104]	@ (8000fac <MX_UART7_Init+0x90>)
 8000f42:	220c      	movs	r2, #12
 8000f44:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f46:	4b19      	ldr	r3, [pc, #100]	@ (8000fac <MX_UART7_Init+0x90>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f4c:	4b17      	ldr	r3, [pc, #92]	@ (8000fac <MX_UART7_Init+0x90>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f52:	4b16      	ldr	r3, [pc, #88]	@ (8000fac <MX_UART7_Init+0x90>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f58:	4b14      	ldr	r3, [pc, #80]	@ (8000fac <MX_UART7_Init+0x90>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f5e:	4b13      	ldr	r3, [pc, #76]	@ (8000fac <MX_UART7_Init+0x90>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8000f64:	4811      	ldr	r0, [pc, #68]	@ (8000fac <MX_UART7_Init+0x90>)
 8000f66:	f00c ffb3 	bl	800ded0 <HAL_UART_Init>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8000f70:	f000 f99e 	bl	80012b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f74:	2100      	movs	r1, #0
 8000f76:	480d      	ldr	r0, [pc, #52]	@ (8000fac <MX_UART7_Init+0x90>)
 8000f78:	f00e fc76 	bl	800f868 <HAL_UARTEx_SetTxFifoThreshold>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 8000f82:	f000 f995 	bl	80012b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f86:	2100      	movs	r1, #0
 8000f88:	4808      	ldr	r0, [pc, #32]	@ (8000fac <MX_UART7_Init+0x90>)
 8000f8a:	f00e fcab 	bl	800f8e4 <HAL_UARTEx_SetRxFifoThreshold>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8000f94:	f000 f98c 	bl	80012b0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8000f98:	4804      	ldr	r0, [pc, #16]	@ (8000fac <MX_UART7_Init+0x90>)
 8000f9a:	f00e fc2c 	bl	800f7f6 <HAL_UARTEx_DisableFifoMode>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 8000fa4:	f000 f984 	bl	80012b0 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8000fa8:	bf00      	nop
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	240005b0 	.word	0x240005b0
 8000fb0:	40007800 	.word	0x40007800

08000fb4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fb8:	4b22      	ldr	r3, [pc, #136]	@ (8001044 <MX_USART2_UART_Init+0x90>)
 8000fba:	4a23      	ldr	r2, [pc, #140]	@ (8001048 <MX_USART2_UART_Init+0x94>)
 8000fbc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000fbe:	4b21      	ldr	r3, [pc, #132]	@ (8001044 <MX_USART2_UART_Init+0x90>)
 8000fc0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000fc4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fc6:	4b1f      	ldr	r3, [pc, #124]	@ (8001044 <MX_USART2_UART_Init+0x90>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fcc:	4b1d      	ldr	r3, [pc, #116]	@ (8001044 <MX_USART2_UART_Init+0x90>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fd2:	4b1c      	ldr	r3, [pc, #112]	@ (8001044 <MX_USART2_UART_Init+0x90>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fd8:	4b1a      	ldr	r3, [pc, #104]	@ (8001044 <MX_USART2_UART_Init+0x90>)
 8000fda:	220c      	movs	r2, #12
 8000fdc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fde:	4b19      	ldr	r3, [pc, #100]	@ (8001044 <MX_USART2_UART_Init+0x90>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fe4:	4b17      	ldr	r3, [pc, #92]	@ (8001044 <MX_USART2_UART_Init+0x90>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fea:	4b16      	ldr	r3, [pc, #88]	@ (8001044 <MX_USART2_UART_Init+0x90>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ff0:	4b14      	ldr	r3, [pc, #80]	@ (8001044 <MX_USART2_UART_Init+0x90>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ff6:	4b13      	ldr	r3, [pc, #76]	@ (8001044 <MX_USART2_UART_Init+0x90>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ffc:	4811      	ldr	r0, [pc, #68]	@ (8001044 <MX_USART2_UART_Init+0x90>)
 8000ffe:	f00c ff67 	bl	800ded0 <HAL_UART_Init>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001008:	f000 f952 	bl	80012b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800100c:	2100      	movs	r1, #0
 800100e:	480d      	ldr	r0, [pc, #52]	@ (8001044 <MX_USART2_UART_Init+0x90>)
 8001010:	f00e fc2a 	bl	800f868 <HAL_UARTEx_SetTxFifoThreshold>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800101a:	f000 f949 	bl	80012b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800101e:	2100      	movs	r1, #0
 8001020:	4808      	ldr	r0, [pc, #32]	@ (8001044 <MX_USART2_UART_Init+0x90>)
 8001022:	f00e fc5f 	bl	800f8e4 <HAL_UARTEx_SetRxFifoThreshold>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800102c:	f000 f940 	bl	80012b0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001030:	4804      	ldr	r0, [pc, #16]	@ (8001044 <MX_USART2_UART_Init+0x90>)
 8001032:	f00e fbe0 	bl	800f7f6 <HAL_UARTEx_DisableFifoMode>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800103c:	f000 f938 	bl	80012b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001040:	bf00      	nop
 8001042:	bd80      	pop	{r7, pc}
 8001044:	24000644 	.word	0x24000644
 8001048:	40004400 	.word	0x40004400

0800104c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001052:	4b15      	ldr	r3, [pc, #84]	@ (80010a8 <MX_DMA_Init+0x5c>)
 8001054:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001058:	4a13      	ldr	r2, [pc, #76]	@ (80010a8 <MX_DMA_Init+0x5c>)
 800105a:	f043 0301 	orr.w	r3, r3, #1
 800105e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001062:	4b11      	ldr	r3, [pc, #68]	@ (80010a8 <MX_DMA_Init+0x5c>)
 8001064:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001068:	f003 0301 	and.w	r3, r3, #1
 800106c:	607b      	str	r3, [r7, #4]
 800106e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001070:	2200      	movs	r2, #0
 8001072:	2100      	movs	r1, #0
 8001074:	200b      	movs	r0, #11
 8001076:	f002 ff7a 	bl	8003f6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800107a:	200b      	movs	r0, #11
 800107c:	f002 ff91 	bl	8003fa2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001080:	2200      	movs	r2, #0
 8001082:	2100      	movs	r1, #0
 8001084:	200c      	movs	r0, #12
 8001086:	f002 ff72 	bl	8003f6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800108a:	200c      	movs	r0, #12
 800108c:	f002 ff89 	bl	8003fa2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001090:	2200      	movs	r2, #0
 8001092:	2100      	movs	r1, #0
 8001094:	200d      	movs	r0, #13
 8001096:	f002 ff6a 	bl	8003f6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800109a:	200d      	movs	r0, #13
 800109c:	f002 ff81 	bl	8003fa2 <HAL_NVIC_EnableIRQ>

}
 80010a0:	bf00      	nop
 80010a2:	3708      	adds	r7, #8
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	58024400 	.word	0x58024400

080010ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b08c      	sub	sp, #48	@ 0x30
 80010b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b2:	f107 031c 	add.w	r3, r7, #28
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	605a      	str	r2, [r3, #4]
 80010bc:	609a      	str	r2, [r3, #8]
 80010be:	60da      	str	r2, [r3, #12]
 80010c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010c2:	4b60      	ldr	r3, [pc, #384]	@ (8001244 <MX_GPIO_Init+0x198>)
 80010c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010c8:	4a5e      	ldr	r2, [pc, #376]	@ (8001244 <MX_GPIO_Init+0x198>)
 80010ca:	f043 0304 	orr.w	r3, r3, #4
 80010ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010d2:	4b5c      	ldr	r3, [pc, #368]	@ (8001244 <MX_GPIO_Init+0x198>)
 80010d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010d8:	f003 0304 	and.w	r3, r3, #4
 80010dc:	61bb      	str	r3, [r7, #24]
 80010de:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010e0:	4b58      	ldr	r3, [pc, #352]	@ (8001244 <MX_GPIO_Init+0x198>)
 80010e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010e6:	4a57      	ldr	r2, [pc, #348]	@ (8001244 <MX_GPIO_Init+0x198>)
 80010e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010f0:	4b54      	ldr	r3, [pc, #336]	@ (8001244 <MX_GPIO_Init+0x198>)
 80010f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010fa:	617b      	str	r3, [r7, #20]
 80010fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fe:	4b51      	ldr	r3, [pc, #324]	@ (8001244 <MX_GPIO_Init+0x198>)
 8001100:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001104:	4a4f      	ldr	r2, [pc, #316]	@ (8001244 <MX_GPIO_Init+0x198>)
 8001106:	f043 0301 	orr.w	r3, r3, #1
 800110a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800110e:	4b4d      	ldr	r3, [pc, #308]	@ (8001244 <MX_GPIO_Init+0x198>)
 8001110:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001114:	f003 0301 	and.w	r3, r3, #1
 8001118:	613b      	str	r3, [r7, #16]
 800111a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800111c:	4b49      	ldr	r3, [pc, #292]	@ (8001244 <MX_GPIO_Init+0x198>)
 800111e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001122:	4a48      	ldr	r2, [pc, #288]	@ (8001244 <MX_GPIO_Init+0x198>)
 8001124:	f043 0308 	orr.w	r3, r3, #8
 8001128:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800112c:	4b45      	ldr	r3, [pc, #276]	@ (8001244 <MX_GPIO_Init+0x198>)
 800112e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001132:	f003 0308 	and.w	r3, r3, #8
 8001136:	60fb      	str	r3, [r7, #12]
 8001138:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800113a:	4b42      	ldr	r3, [pc, #264]	@ (8001244 <MX_GPIO_Init+0x198>)
 800113c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001140:	4a40      	ldr	r2, [pc, #256]	@ (8001244 <MX_GPIO_Init+0x198>)
 8001142:	f043 0302 	orr.w	r3, r3, #2
 8001146:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800114a:	4b3e      	ldr	r3, [pc, #248]	@ (8001244 <MX_GPIO_Init+0x198>)
 800114c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001150:	f003 0302 	and.w	r3, r3, #2
 8001154:	60bb      	str	r3, [r7, #8]
 8001156:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001158:	4b3a      	ldr	r3, [pc, #232]	@ (8001244 <MX_GPIO_Init+0x198>)
 800115a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800115e:	4a39      	ldr	r2, [pc, #228]	@ (8001244 <MX_GPIO_Init+0x198>)
 8001160:	f043 0310 	orr.w	r3, r3, #16
 8001164:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001168:	4b36      	ldr	r3, [pc, #216]	@ (8001244 <MX_GPIO_Init+0x198>)
 800116a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800116e:	f003 0310 	and.w	r3, r3, #16
 8001172:	607b      	str	r3, [r7, #4]
 8001174:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, bypass_Pin|reset_Pin, GPIO_PIN_RESET);
 8001176:	2200      	movs	r2, #0
 8001178:	f248 0140 	movw	r1, #32832	@ 0x8040
 800117c:	4832      	ldr	r0, [pc, #200]	@ (8001248 <MX_GPIO_Init+0x19c>)
 800117e:	f005 ffa9 	bl	80070d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8001182:	2200      	movs	r2, #0
 8001184:	f24f 0111 	movw	r1, #61457	@ 0xf011
 8001188:	4830      	ldr	r0, [pc, #192]	@ (800124c <MX_GPIO_Init+0x1a0>)
 800118a:	f005 ffa3 	bl	80070d4 <HAL_GPIO_WritePin>
                          |select_Pin|MODBUS_nWR2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800118e:	2200      	movs	r2, #0
 8001190:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001194:	482e      	ldr	r0, [pc, #184]	@ (8001250 <MX_GPIO_Init+0x1a4>)
 8001196:	f005 ff9d 	bl	80070d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, GPIO_PIN_RESET);
 800119a:	2200      	movs	r2, #0
 800119c:	2101      	movs	r1, #1
 800119e:	482d      	ldr	r0, [pc, #180]	@ (8001254 <MX_GPIO_Init+0x1a8>)
 80011a0:	f005 ff98 	bl	80070d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : bypass_Pin reset_Pin */
  GPIO_InitStruct.Pin = bypass_Pin|reset_Pin;
 80011a4:	f248 0340 	movw	r3, #32832	@ 0x8040
 80011a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011aa:	2301      	movs	r3, #1
 80011ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ae:	2300      	movs	r3, #0
 80011b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b2:	2300      	movs	r3, #0
 80011b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b6:	f107 031c 	add.w	r3, r7, #28
 80011ba:	4619      	mov	r1, r3
 80011bc:	4822      	ldr	r0, [pc, #136]	@ (8001248 <MX_GPIO_Init+0x19c>)
 80011be:	f005 fdd9 	bl	8006d74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15
                           select_Pin MODBUS_nWR2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 80011c2:	f24f 0311 	movw	r3, #61457	@ 0xf011
 80011c6:	61fb      	str	r3, [r7, #28]
                          |select_Pin|MODBUS_nWR2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c8:	2301      	movs	r3, #1
 80011ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011cc:	2300      	movs	r3, #0
 80011ce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d0:	2300      	movs	r3, #0
 80011d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011d4:	f107 031c 	add.w	r3, r7, #28
 80011d8:	4619      	mov	r1, r3
 80011da:	481c      	ldr	r0, [pc, #112]	@ (800124c <MX_GPIO_Init+0x1a0>)
 80011dc:	f005 fdca 	bl	8006d74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80011e0:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80011e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e6:	2302      	movs	r3, #2
 80011e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ea:	2300      	movs	r3, #0
 80011ec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ee:	2300      	movs	r3, #0
 80011f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80011f2:	2309      	movs	r3, #9
 80011f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f6:	f107 031c 	add.w	r3, r7, #28
 80011fa:	4619      	mov	r1, r3
 80011fc:	4812      	ldr	r0, [pc, #72]	@ (8001248 <MX_GPIO_Init+0x19c>)
 80011fe:	f005 fdb9 	bl	8006d74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001202:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001206:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001208:	2301      	movs	r3, #1
 800120a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120c:	2300      	movs	r3, #0
 800120e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001210:	2300      	movs	r3, #0
 8001212:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001214:	f107 031c 	add.w	r3, r7, #28
 8001218:	4619      	mov	r1, r3
 800121a:	480d      	ldr	r0, [pc, #52]	@ (8001250 <MX_GPIO_Init+0x1a4>)
 800121c:	f005 fdaa 	bl	8006d74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001220:	2301      	movs	r3, #1
 8001222:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001224:	2301      	movs	r3, #1
 8001226:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001228:	2300      	movs	r3, #0
 800122a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122c:	2300      	movs	r3, #0
 800122e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001230:	f107 031c 	add.w	r3, r7, #28
 8001234:	4619      	mov	r1, r3
 8001236:	4807      	ldr	r0, [pc, #28]	@ (8001254 <MX_GPIO_Init+0x1a8>)
 8001238:	f005 fd9c 	bl	8006d74 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800123c:	bf00      	nop
 800123e:	3730      	adds	r7, #48	@ 0x30
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	58024400 	.word	0x58024400
 8001248:	58020000 	.word	0x58020000
 800124c:	58020c00 	.word	0x58020c00
 8001250:	58020400 	.word	0x58020400
 8001254:	58021000 	.word	0x58021000

08001258 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800125e:	463b      	mov	r3, r7
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	605a      	str	r2, [r3, #4]
 8001266:	609a      	str	r2, [r3, #8]
 8001268:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800126a:	f002 feb5 	bl	8003fd8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800126e:	2301      	movs	r3, #1
 8001270:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001272:	2300      	movs	r3, #0
 8001274:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001276:	2300      	movs	r3, #0
 8001278:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800127a:	231f      	movs	r3, #31
 800127c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800127e:	2387      	movs	r3, #135	@ 0x87
 8001280:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001282:	2300      	movs	r3, #0
 8001284:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001286:	2300      	movs	r3, #0
 8001288:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800128a:	2301      	movs	r3, #1
 800128c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800128e:	2301      	movs	r3, #1
 8001290:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001292:	2300      	movs	r3, #0
 8001294:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001296:	2300      	movs	r3, #0
 8001298:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800129a:	463b      	mov	r3, r7
 800129c:	4618      	mov	r0, r3
 800129e:	f002 fed3 	bl	8004048 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80012a2:	2004      	movs	r0, #4
 80012a4:	f002 feb0 	bl	8004008 <HAL_MPU_Enable>

}
 80012a8:	bf00      	nop
 80012aa:	3710      	adds	r7, #16
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}

080012b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012b4:	b672      	cpsid	i
}
 80012b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012b8:	bf00      	nop
 80012ba:	e7fd      	b.n	80012b8 <Error_Handler+0x8>

080012bc <modbus_send_data>:
static void resetArray(uint8_t *arr, size_t size)
{
  memset(arr, 0, size);
}
void modbus_send_data(uint8_t *data,uint8_t num)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	460b      	mov	r3, r1
 80012c6:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(MODBUS_GPIO_WRITE_PORT,MODBUS_WRITE_PORT,GPIO_PIN_SET);
 80012c8:	2201      	movs	r2, #1
 80012ca:	2110      	movs	r1, #16
 80012cc:	4809      	ldr	r0, [pc, #36]	@ (80012f4 <modbus_send_data+0x38>)
 80012ce:	f005 ff01 	bl	80070d4 <HAL_GPIO_WritePin>
	HAL_UART_Transmit(&huart2,data,num,100);
 80012d2:	78fb      	ldrb	r3, [r7, #3]
 80012d4:	b29a      	uxth	r2, r3
 80012d6:	2364      	movs	r3, #100	@ 0x64
 80012d8:	6879      	ldr	r1, [r7, #4]
 80012da:	4807      	ldr	r0, [pc, #28]	@ (80012f8 <modbus_send_data+0x3c>)
 80012dc:	f00c fe48 	bl	800df70 <HAL_UART_Transmit>
	HAL_GPIO_WritePin(MODBUS_GPIO_WRITE_PORT,MODBUS_WRITE_PORT,GPIO_PIN_RESET);
 80012e0:	2200      	movs	r2, #0
 80012e2:	2110      	movs	r1, #16
 80012e4:	4803      	ldr	r0, [pc, #12]	@ (80012f4 <modbus_send_data+0x38>)
 80012e6:	f005 fef5 	bl	80070d4 <HAL_GPIO_WritePin>
}
 80012ea:	bf00      	nop
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	58020c00 	.word	0x58020c00
 80012f8:	24000644 	.word	0x24000644

080012fc <modbus_respone_data>:
void modbus_respone_data()
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b086      	sub	sp, #24
 8001300:	af00      	add	r7, sp, #0
	uint8_t slave_id_ = 1;
 8001302:	2301      	movs	r3, #1
 8001304:	72fb      	strb	r3, [r7, #11]
	if(slave_id_ == modbus_receive[0])
 8001306:	4b31      	ldr	r3, [pc, #196]	@ (80013cc <modbus_respone_data+0xd0>)
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	7afa      	ldrb	r2, [r7, #11]
 800130c:	429a      	cmp	r2, r3
 800130e:	d159      	bne.n	80013c4 <modbus_respone_data+0xc8>
	{
		uint16_t start_addr = (modbus_receive[2] << 8) | modbus_receive[3]; // start address
 8001310:	4b2e      	ldr	r3, [pc, #184]	@ (80013cc <modbus_respone_data+0xd0>)
 8001312:	789b      	ldrb	r3, [r3, #2]
 8001314:	021b      	lsls	r3, r3, #8
 8001316:	b21a      	sxth	r2, r3
 8001318:	4b2c      	ldr	r3, [pc, #176]	@ (80013cc <modbus_respone_data+0xd0>)
 800131a:	78db      	ldrb	r3, [r3, #3]
 800131c:	b21b      	sxth	r3, r3
 800131e:	4313      	orrs	r3, r2
 8001320:	b21b      	sxth	r3, r3
 8001322:	82fb      	strh	r3, [r7, #22]
    uint16_t num_registers = (modbus_receive[4] << 8) | modbus_receive[5]; // number of registers
 8001324:	4b29      	ldr	r3, [pc, #164]	@ (80013cc <modbus_respone_data+0xd0>)
 8001326:	791b      	ldrb	r3, [r3, #4]
 8001328:	021b      	lsls	r3, r3, #8
 800132a:	b21a      	sxth	r2, r3
 800132c:	4b27      	ldr	r3, [pc, #156]	@ (80013cc <modbus_respone_data+0xd0>)
 800132e:	795b      	ldrb	r3, [r3, #5]
 8001330:	b21b      	sxth	r3, r3
 8001332:	4313      	orrs	r3, r2
 8001334:	b21b      	sxth	r3, r3
 8001336:	813b      	strh	r3, [r7, #8]
		modbus_send[0] = MODBUS_ID;  // slave ID
 8001338:	4b25      	ldr	r3, [pc, #148]	@ (80013d0 <modbus_respone_data+0xd4>)
 800133a:	2201      	movs	r2, #1
 800133c:	701a      	strb	r2, [r3, #0]
	  modbus_send[1] = HOLDING_REGISTERS_READ_FUCTION_CODE;  // function code
 800133e:	4b24      	ldr	r3, [pc, #144]	@ (80013d0 <modbus_respone_data+0xd4>)
 8001340:	2203      	movs	r2, #3
 8001342:	705a      	strb	r2, [r3, #1]
	  modbus_send[2] = num_registers*2;  // Byte count
 8001344:	893b      	ldrh	r3, [r7, #8]
 8001346:	b2db      	uxtb	r3, r3
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	b2da      	uxtb	r2, r3
 800134c:	4b20      	ldr	r3, [pc, #128]	@ (80013d0 <modbus_respone_data+0xd4>)
 800134e:	709a      	strb	r2, [r3, #2]
		int indx = 3;  // we need to keep track of how many bytes has been stored in TxData Buffer
 8001350:	2303      	movs	r3, #3
 8001352:	613b      	str	r3, [r7, #16]

		for (int i=0; i<num_registers; i++)   // Load the actual data into TxData buffer
 8001354:	2300      	movs	r3, #0
 8001356:	60fb      	str	r3, [r7, #12]
 8001358:	e013      	b.n	8001382 <modbus_respone_data+0x86>
		{
			modbus_send[indx++] = (modbus_database[start_addr]>>8)&0xFF;  // extract the higher byte
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	1c5a      	adds	r2, r3, #1
 800135e:	613a      	str	r2, [r7, #16]
 8001360:	4a1b      	ldr	r2, [pc, #108]	@ (80013d0 <modbus_respone_data+0xd4>)
 8001362:	2100      	movs	r1, #0
 8001364:	54d1      	strb	r1, [r2, r3]
			modbus_send[indx++] = (modbus_database[start_addr])&0xFF;   // extract the lower byte
 8001366:	8afa      	ldrh	r2, [r7, #22]
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	1c59      	adds	r1, r3, #1
 800136c:	6139      	str	r1, [r7, #16]
 800136e:	4919      	ldr	r1, [pc, #100]	@ (80013d4 <modbus_respone_data+0xd8>)
 8001370:	5c89      	ldrb	r1, [r1, r2]
 8001372:	4a17      	ldr	r2, [pc, #92]	@ (80013d0 <modbus_respone_data+0xd4>)
 8001374:	54d1      	strb	r1, [r2, r3]
			start_addr++;  // increment the register address
 8001376:	8afb      	ldrh	r3, [r7, #22]
 8001378:	3301      	adds	r3, #1
 800137a:	82fb      	strh	r3, [r7, #22]
		for (int i=0; i<num_registers; i++)   // Load the actual data into TxData buffer
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	3301      	adds	r3, #1
 8001380:	60fb      	str	r3, [r7, #12]
 8001382:	893b      	ldrh	r3, [r7, #8]
 8001384:	68fa      	ldr	r2, [r7, #12]
 8001386:	429a      	cmp	r2, r3
 8001388:	dbe7      	blt.n	800135a <modbus_respone_data+0x5e>
		}
	uint16_t crc = crc16(modbus_send, num_registers);
 800138a:	893b      	ldrh	r3, [r7, #8]
 800138c:	4619      	mov	r1, r3
 800138e:	4810      	ldr	r0, [pc, #64]	@ (80013d0 <modbus_respone_data+0xd4>)
 8001390:	f000 f866 	bl	8001460 <crc16>
 8001394:	4603      	mov	r3, r0
 8001396:	80fb      	strh	r3, [r7, #6]
	modbus_send[num_registers] = crc&0xFF;   // CRC LOW
 8001398:	893b      	ldrh	r3, [r7, #8]
 800139a:	88fa      	ldrh	r2, [r7, #6]
 800139c:	b2d1      	uxtb	r1, r2
 800139e:	4a0c      	ldr	r2, [pc, #48]	@ (80013d0 <modbus_respone_data+0xd4>)
 80013a0:	54d1      	strb	r1, [r2, r3]
	modbus_send[num_registers+1] = (crc>>8)&0xFF;  // CRC HIGH
 80013a2:	88fb      	ldrh	r3, [r7, #6]
 80013a4:	0a1b      	lsrs	r3, r3, #8
 80013a6:	b29a      	uxth	r2, r3
 80013a8:	893b      	ldrh	r3, [r7, #8]
 80013aa:	3301      	adds	r3, #1
 80013ac:	b2d1      	uxtb	r1, r2
 80013ae:	4a08      	ldr	r2, [pc, #32]	@ (80013d0 <modbus_respone_data+0xd4>)
 80013b0:	54d1      	strb	r1, [r2, r3]
	num_registers = num_registers+2;
 80013b2:	893b      	ldrh	r3, [r7, #8]
 80013b4:	3302      	adds	r3, #2
 80013b6:	813b      	strh	r3, [r7, #8]
	modbus_send_data(modbus_send,num_registers);  // send data... CRC will be calculated in the function itself
 80013b8:	893b      	ldrh	r3, [r7, #8]
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	4619      	mov	r1, r3
 80013be:	4804      	ldr	r0, [pc, #16]	@ (80013d0 <modbus_respone_data+0xd4>)
 80013c0:	f7ff ff7c 	bl	80012bc <modbus_send_data>
	}
}
 80013c4:	bf00      	nop
 80013c6:	3718      	adds	r7, #24
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	240006ec 	.word	0x240006ec
 80013d0:	240006d8 	.word	0x240006d8
 80013d4:	24000718 	.word	0x24000718

080013d8 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	460b      	mov	r3, r1
 80013e2:	807b      	strh	r3, [r7, #2]
		if (huart->Instance == USART1)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a19      	ldr	r2, [pc, #100]	@ (8001450 <HAL_UARTEx_RxEventCallback+0x78>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d12b      	bne.n	8001446 <HAL_UARTEx_RxEventCallback+0x6e>
    {
			  if (is_requesting)
 80013ee:	4b19      	ldr	r3, [pc, #100]	@ (8001454 <HAL_UARTEx_RxEventCallback+0x7c>)
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d025      	beq.n	8001442 <HAL_UARTEx_RxEventCallback+0x6a>
        {
           uint8_t numRegisters = modbus_receive[2] / 2;
 80013f6:	4b18      	ldr	r3, [pc, #96]	@ (8001458 <HAL_UARTEx_RxEventCallback+0x80>)
 80013f8:	789b      	ldrb	r3, [r3, #2]
 80013fa:	085b      	lsrs	r3, r3, #1
 80013fc:	73bb      	strb	r3, [r7, #14]
           for (uint8_t i = 0; i < numRegisters; i++)
 80013fe:	2300      	movs	r3, #0
 8001400:	73fb      	strb	r3, [r7, #15]
 8001402:	e016      	b.n	8001432 <HAL_UARTEx_RxEventCallback+0x5a>
           {
               final_data[i] = (modbus_receive[3 + (i * 2)] << 8) | modbus_receive[4 + (i * 2)];
 8001404:	7bfb      	ldrb	r3, [r7, #15]
 8001406:	005b      	lsls	r3, r3, #1
 8001408:	3303      	adds	r3, #3
 800140a:	4a13      	ldr	r2, [pc, #76]	@ (8001458 <HAL_UARTEx_RxEventCallback+0x80>)
 800140c:	5cd3      	ldrb	r3, [r2, r3]
 800140e:	021b      	lsls	r3, r3, #8
 8001410:	b21a      	sxth	r2, r3
 8001412:	7bfb      	ldrb	r3, [r7, #15]
 8001414:	3302      	adds	r3, #2
 8001416:	005b      	lsls	r3, r3, #1
 8001418:	490f      	ldr	r1, [pc, #60]	@ (8001458 <HAL_UARTEx_RxEventCallback+0x80>)
 800141a:	5ccb      	ldrb	r3, [r1, r3]
 800141c:	b21b      	sxth	r3, r3
 800141e:	4313      	orrs	r3, r2
 8001420:	b21a      	sxth	r2, r3
 8001422:	7bfb      	ldrb	r3, [r7, #15]
 8001424:	b291      	uxth	r1, r2
 8001426:	4a0d      	ldr	r2, [pc, #52]	@ (800145c <HAL_UARTEx_RxEventCallback+0x84>)
 8001428:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
           for (uint8_t i = 0; i < numRegisters; i++)
 800142c:	7bfb      	ldrb	r3, [r7, #15]
 800142e:	3301      	adds	r3, #1
 8001430:	73fb      	strb	r3, [r7, #15]
 8001432:	7bfa      	ldrb	r2, [r7, #15]
 8001434:	7bbb      	ldrb	r3, [r7, #14]
 8001436:	429a      	cmp	r2, r3
 8001438:	d3e4      	bcc.n	8001404 <HAL_UARTEx_RxEventCallback+0x2c>
           }
           is_requesting = 0;
 800143a:	4b06      	ldr	r3, [pc, #24]	@ (8001454 <HAL_UARTEx_RxEventCallback+0x7c>)
 800143c:	2200      	movs	r2, #0
 800143e:	701a      	strb	r2, [r3, #0]
        else
        {
           modbus_respone_data();
        }
    }
}
 8001440:	e001      	b.n	8001446 <HAL_UARTEx_RxEventCallback+0x6e>
           modbus_respone_data();
 8001442:	f7ff ff5b 	bl	80012fc <modbus_respone_data>
}
 8001446:	bf00      	nop
 8001448:	3710      	adds	r7, #16
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	40011000 	.word	0x40011000
 8001454:	24000714 	.word	0x24000714
 8001458:	240006ec 	.word	0x240006ec
 800145c:	24000700 	.word	0x24000700

08001460 <crc16>:
    0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42,
    0x43, 0x83, 0x41, 0x81, 0x80, 0x40
};

uint16_t crc16(uint8_t *buffer, uint16_t buffer_length)
{
 8001460:	b480      	push	{r7}
 8001462:	b085      	sub	sp, #20
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	460b      	mov	r3, r1
 800146a:	807b      	strh	r3, [r7, #2]
    uint8_t crc_hi = 0xFF; /* high CRC byte initialized */
 800146c:	23ff      	movs	r3, #255	@ 0xff
 800146e:	73fb      	strb	r3, [r7, #15]
    uint8_t crc_lo = 0xFF; /* low CRC byte initialized */
 8001470:	23ff      	movs	r3, #255	@ 0xff
 8001472:	73bb      	strb	r3, [r7, #14]
    unsigned int i; /* will index into CRC lookup */

    /* pass through message buffer */
    while (buffer_length--) {
 8001474:	e013      	b.n	800149e <crc16+0x3e>
        i = crc_lo ^ *buffer++; /* calculate the CRC  */
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	1c5a      	adds	r2, r3, #1
 800147a:	607a      	str	r2, [r7, #4]
 800147c:	781a      	ldrb	r2, [r3, #0]
 800147e:	7bbb      	ldrb	r3, [r7, #14]
 8001480:	4053      	eors	r3, r2
 8001482:	b2db      	uxtb	r3, r3
 8001484:	60bb      	str	r3, [r7, #8]
        crc_lo = crc_hi ^ table_crc_hi[i];
 8001486:	4a0f      	ldr	r2, [pc, #60]	@ (80014c4 <crc16+0x64>)
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	4413      	add	r3, r2
 800148c:	781a      	ldrb	r2, [r3, #0]
 800148e:	7bfb      	ldrb	r3, [r7, #15]
 8001490:	4053      	eors	r3, r2
 8001492:	73bb      	strb	r3, [r7, #14]
        crc_hi = table_crc_lo[i];
 8001494:	4a0c      	ldr	r2, [pc, #48]	@ (80014c8 <crc16+0x68>)
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	4413      	add	r3, r2
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	73fb      	strb	r3, [r7, #15]
    while (buffer_length--) {
 800149e:	887b      	ldrh	r3, [r7, #2]
 80014a0:	1e5a      	subs	r2, r3, #1
 80014a2:	807a      	strh	r2, [r7, #2]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d1e6      	bne.n	8001476 <crc16+0x16>
    }

    return (crc_hi << 8 | crc_lo);
 80014a8:	7bfb      	ldrb	r3, [r7, #15]
 80014aa:	021b      	lsls	r3, r3, #8
 80014ac:	b21a      	sxth	r2, r3
 80014ae:	7bbb      	ldrb	r3, [r7, #14]
 80014b0:	b21b      	sxth	r3, r3
 80014b2:	4313      	orrs	r3, r2
 80014b4:	b21b      	sxth	r3, r3
 80014b6:	b29b      	uxth	r3, r3
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3714      	adds	r7, #20
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr
 80014c4:	080121f8 	.word	0x080121f8
 80014c8:	080122f8 	.word	0x080122f8
 80014cc:	00000000 	.word	0x00000000

080014d0 <Control_Init>:
 PI_V PIVarV;
 PI_Ib PIVarIb;
 PI_Ic PIVarIc;
 Ratel RL;
 SystemState sysState;
void Control_Init(void) {
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
    // Initialize hardware peripherals (PWM, ADC, etc.) here

    // Initialize parameters
    iParas.count = 0;
 80014d4:	4bb8      	ldr	r3, [pc, #736]	@ (80017b8 <Control_Init+0x2e8>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	671a      	str	r2, [r3, #112]	@ 0x70
    iParas.RL = 0.1;
 80014da:	49b7      	ldr	r1, [pc, #732]	@ (80017b8 <Control_Init+0x2e8>)
 80014dc:	a39e      	add	r3, pc, #632	@ (adr r3, 8001758 <Control_Init+0x288>)
 80014de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e2:	e9c1 2300 	strd	r2, r3, [r1]
    iParas.C = 1e-3;       // Replaced pow(10,-3) with 1e-3
 80014e6:	49b4      	ldr	r1, [pc, #720]	@ (80017b8 <Control_Init+0x2e8>)
 80014e8:	a39d      	add	r3, pc, #628	@ (adr r3, 8001760 <Control_Init+0x290>)
 80014ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ee:	e9c1 2304 	strd	r2, r3, [r1, #16]
    iParas.L = 100e-6;     // Replaced 100*pow(10,-6)
 80014f2:	49b1      	ldr	r1, [pc, #708]	@ (80017b8 <Control_Init+0x2e8>)
 80014f4:	a39c      	add	r3, pc, #624	@ (adr r3, 8001768 <Control_Init+0x298>)
 80014f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014fa:	e9c1 2302 	strd	r2, r3, [r1, #8]
    iParas.r_ds = 7.5e-3;
 80014fe:	49ae      	ldr	r1, [pc, #696]	@ (80017b8 <Control_Init+0x2e8>)
 8001500:	a39b      	add	r3, pc, #620	@ (adr r3, 8001770 <Control_Init+0x2a0>)
 8001502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001506:	e9c1 2308 	strd	r2, r3, [r1, #32]
    iParas.r_f = 6.3e-3;
 800150a:	49ab      	ldr	r1, [pc, #684]	@ (80017b8 <Control_Init+0x2e8>)
 800150c:	a39a      	add	r3, pc, #616	@ (adr r3, 8001778 <Control_Init+0x2a8>)
 800150e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001512:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    iParas.V_f = 0.7;
 8001516:	49a8      	ldr	r1, [pc, #672]	@ (80017b8 <Control_Init+0x2e8>)
 8001518:	a399      	add	r3, pc, #612	@ (adr r3, 8001780 <Control_Init+0x2b0>)
 800151a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800151e:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    iParas.Imax = 2;
 8001522:	49a5      	ldr	r1, [pc, #660]	@ (80017b8 <Control_Init+0x2e8>)
 8001524:	f04f 0200 	mov.w	r2, #0
 8001528:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800152c:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    iParas.Vmax = 30;
 8001530:	49a1      	ldr	r1, [pc, #644]	@ (80017b8 <Control_Init+0x2e8>)
 8001532:	f04f 0200 	mov.w	r2, #0
 8001536:	4ba1      	ldr	r3, [pc, #644]	@ (80017bc <Control_Init+0x2ec>)
 8001538:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    // Switching frequency
    convParas.Fsw = 200000;
 800153c:	49a0      	ldr	r1, [pc, #640]	@ (80017c0 <Control_Init+0x2f0>)
 800153e:	a392      	add	r3, pc, #584	@ (adr r3, 8001788 <Control_Init+0x2b8>)
 8001540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001544:	e9c1 2300 	strd	r2, r3, [r1]
    convParas.Td = 1.0/convParas.Fsw;
 8001548:	4b9d      	ldr	r3, [pc, #628]	@ (80017c0 <Control_Init+0x2f0>)
 800154a:	ed93 6b00 	vldr	d6, [r3]
 800154e:	eeb7 5b00 	vmov.f64	d5, #112	@ 0x3f800000  1.0
 8001552:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001556:	4b9a      	ldr	r3, [pc, #616]	@ (80017c0 <Control_Init+0x2f0>)
 8001558:	ed83 7b02 	vstr	d7, [r3, #8]
    convParas.Tfi = 1.0/(5*convParas.Fsw);
 800155c:	4b98      	ldr	r3, [pc, #608]	@ (80017c0 <Control_Init+0x2f0>)
 800155e:	ed93 7b00 	vldr	d7, [r3]
 8001562:	eeb1 6b04 	vmov.f64	d6, #20	@ 0x40a00000  5.0
 8001566:	ee27 6b06 	vmul.f64	d6, d7, d6
 800156a:	eeb7 5b00 	vmov.f64	d5, #112	@ 0x3f800000  1.0
 800156e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001572:	4b93      	ldr	r3, [pc, #588]	@ (80017c0 <Control_Init+0x2f0>)
 8001574:	ed83 7b04 	vstr	d7, [r3, #16]

    // PI voltage controller
    PIVarV.Tsv = 0.1/convParas.Fsw;
 8001578:	4b91      	ldr	r3, [pc, #580]	@ (80017c0 <Control_Init+0x2f0>)
 800157a:	ed93 6b00 	vldr	d6, [r3]
 800157e:	ed9f 5b76 	vldr	d5, [pc, #472]	@ 8001758 <Control_Init+0x288>
 8001582:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001586:	4b8f      	ldr	r3, [pc, #572]	@ (80017c4 <Control_Init+0x2f4>)
 8001588:	ed83 7b1c 	vstr	d7, [r3, #112]	@ 0x70
    PIVarV.Kpv = 0.05;
 800158c:	498d      	ldr	r1, [pc, #564]	@ (80017c4 <Control_Init+0x2f4>)
 800158e:	a380      	add	r3, pc, #512	@ (adr r3, 8001790 <Control_Init+0x2c0>)
 8001590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001594:	e9c1 2300 	strd	r2, r3, [r1]
    PIVarV.Kiv = 0.14;
 8001598:	498a      	ldr	r1, [pc, #552]	@ (80017c4 <Control_Init+0x2f4>)
 800159a:	a37f      	add	r3, pc, #508	@ (adr r3, 8001798 <Control_Init+0x2c8>)
 800159c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a0:	e9c1 2304 	strd	r2, r3, [r1, #16]
    PIVarV.Tiv = 1.0/PIVarV.Kiv;
 80015a4:	4b87      	ldr	r3, [pc, #540]	@ (80017c4 <Control_Init+0x2f4>)
 80015a6:	ed93 6b04 	vldr	d6, [r3, #16]
 80015aa:	eeb7 5b00 	vmov.f64	d5, #112	@ 0x3f800000  1.0
 80015ae:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80015b2:	4b84      	ldr	r3, [pc, #528]	@ (80017c4 <Control_Init+0x2f4>)
 80015b4:	ed83 7b06 	vstr	d7, [r3, #24]
    PIVarV.Dv = 1-PIVarV.Tsv/PIVarV.Tiv;
 80015b8:	4b82      	ldr	r3, [pc, #520]	@ (80017c4 <Control_Init+0x2f4>)
 80015ba:	ed93 5b1c 	vldr	d5, [r3, #112]	@ 0x70
 80015be:	4b81      	ldr	r3, [pc, #516]	@ (80017c4 <Control_Init+0x2f4>)
 80015c0:	ed93 6b06 	vldr	d6, [r3, #24]
 80015c4:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80015c8:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80015cc:	ee36 7b47 	vsub.f64	d7, d6, d7
 80015d0:	4b7c      	ldr	r3, [pc, #496]	@ (80017c4 <Control_Init+0x2f4>)
 80015d2:	ed83 7b08 	vstr	d7, [r3, #32]
    PIVarV.uk_1_v = 0; PIVarV.uk_v = 0; PIVarV.usk_1_v = 0;
 80015d6:	497b      	ldr	r1, [pc, #492]	@ (80017c4 <Control_Init+0x2f4>)
 80015d8:	f04f 0200 	mov.w	r2, #0
 80015dc:	f04f 0300 	mov.w	r3, #0
 80015e0:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
 80015e4:	4977      	ldr	r1, [pc, #476]	@ (80017c4 <Control_Init+0x2f4>)
 80015e6:	f04f 0200 	mov.w	r2, #0
 80015ea:	f04f 0300 	mov.w	r3, #0
 80015ee:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
 80015f2:	4974      	ldr	r1, [pc, #464]	@ (80017c4 <Control_Init+0x2f4>)
 80015f4:	f04f 0200 	mov.w	r2, #0
 80015f8:	f04f 0300 	mov.w	r3, #0
 80015fc:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    PIVarV.ek_v = 0; PIVarV.ek_1_v = 0; PIVarV.esk_v = 0; PIVarV.esk_1_v = 0;
 8001600:	4970      	ldr	r1, [pc, #448]	@ (80017c4 <Control_Init+0x2f4>)
 8001602:	f04f 0200 	mov.w	r2, #0
 8001606:	f04f 0300 	mov.w	r3, #0
 800160a:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
 800160e:	496d      	ldr	r1, [pc, #436]	@ (80017c4 <Control_Init+0x2f4>)
 8001610:	f04f 0200 	mov.w	r2, #0
 8001614:	f04f 0300 	mov.w	r3, #0
 8001618:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
 800161c:	4969      	ldr	r1, [pc, #420]	@ (80017c4 <Control_Init+0x2f4>)
 800161e:	f04f 0200 	mov.w	r2, #0
 8001622:	f04f 0300 	mov.w	r3, #0
 8001626:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 800162a:	4966      	ldr	r1, [pc, #408]	@ (80017c4 <Control_Init+0x2f4>)
 800162c:	f04f 0200 	mov.w	r2, #0
 8001630:	f04f 0300 	mov.w	r3, #0
 8001634:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
    PIVarV.uMax_v = iParas.Vmax; PIVarV.uMin_v = -PIVarV.uMax_v;
 8001638:	4b5f      	ldr	r3, [pc, #380]	@ (80017b8 <Control_Init+0x2e8>)
 800163a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 800163e:	4961      	ldr	r1, [pc, #388]	@ (80017c4 <Control_Init+0x2f4>)
 8001640:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
 8001644:	4b5f      	ldr	r3, [pc, #380]	@ (80017c4 <Control_Init+0x2f4>)
 8001646:	ed93 7b18 	vldr	d7, [r3, #96]	@ 0x60
 800164a:	eeb1 7b47 	vneg.f64	d7, d7
 800164e:	4b5d      	ldr	r3, [pc, #372]	@ (80017c4 <Control_Init+0x2f4>)
 8001650:	ed83 7b1a 	vstr	d7, [r3, #104]	@ 0x68

    // PI battery current controller
    PIVarIb.Tsb = 10.0/convParas.Fsw;
 8001654:	4b5a      	ldr	r3, [pc, #360]	@ (80017c0 <Control_Init+0x2f0>)
 8001656:	ed93 6b00 	vldr	d6, [r3]
 800165a:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 800165e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001662:	4b59      	ldr	r3, [pc, #356]	@ (80017c8 <Control_Init+0x2f8>)
 8001664:	ed83 7b1c 	vstr	d7, [r3, #112]	@ 0x70
    PIVarIb.Kpb = -0.04;
 8001668:	4957      	ldr	r1, [pc, #348]	@ (80017c8 <Control_Init+0x2f8>)
 800166a:	a34d      	add	r3, pc, #308	@ (adr r3, 80017a0 <Control_Init+0x2d0>)
 800166c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001670:	e9c1 2300 	strd	r2, r3, [r1]
    PIVarIb.Kib = -0.05;
 8001674:	4954      	ldr	r1, [pc, #336]	@ (80017c8 <Control_Init+0x2f8>)
 8001676:	a34c      	add	r3, pc, #304	@ (adr r3, 80017a8 <Control_Init+0x2d8>)
 8001678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800167c:	e9c1 2304 	strd	r2, r3, [r1, #16]
    PIVarIb.Tib = 1.0/PIVarIb.Kib;
 8001680:	4b51      	ldr	r3, [pc, #324]	@ (80017c8 <Control_Init+0x2f8>)
 8001682:	ed93 6b04 	vldr	d6, [r3, #16]
 8001686:	eeb7 5b00 	vmov.f64	d5, #112	@ 0x3f800000  1.0
 800168a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800168e:	4b4e      	ldr	r3, [pc, #312]	@ (80017c8 <Control_Init+0x2f8>)
 8001690:	ed83 7b06 	vstr	d7, [r3, #24]
    PIVarIb.Db = 1-PIVarIb.Tsb/PIVarIb.Tib;
 8001694:	4b4c      	ldr	r3, [pc, #304]	@ (80017c8 <Control_Init+0x2f8>)
 8001696:	ed93 5b1c 	vldr	d5, [r3, #112]	@ 0x70
 800169a:	4b4b      	ldr	r3, [pc, #300]	@ (80017c8 <Control_Init+0x2f8>)
 800169c:	ed93 6b06 	vldr	d6, [r3, #24]
 80016a0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80016a4:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80016a8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80016ac:	4b46      	ldr	r3, [pc, #280]	@ (80017c8 <Control_Init+0x2f8>)
 80016ae:	ed83 7b08 	vstr	d7, [r3, #32]
    PIVarIb.uk_1_b = 0; PIVarIb.uk_b = 0; PIVarIb.usk_1_b = 0;
 80016b2:	4945      	ldr	r1, [pc, #276]	@ (80017c8 <Control_Init+0x2f8>)
 80016b4:	f04f 0200 	mov.w	r2, #0
 80016b8:	f04f 0300 	mov.w	r3, #0
 80016bc:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
 80016c0:	4941      	ldr	r1, [pc, #260]	@ (80017c8 <Control_Init+0x2f8>)
 80016c2:	f04f 0200 	mov.w	r2, #0
 80016c6:	f04f 0300 	mov.w	r3, #0
 80016ca:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
 80016ce:	493e      	ldr	r1, [pc, #248]	@ (80017c8 <Control_Init+0x2f8>)
 80016d0:	f04f 0200 	mov.w	r2, #0
 80016d4:	f04f 0300 	mov.w	r3, #0
 80016d8:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    PIVarIb.ek_b = 0; PIVarIb.ek_1_b = 0; PIVarIb.esk_b = 0; PIVarIb.esk_1_b = 0;
 80016dc:	493a      	ldr	r1, [pc, #232]	@ (80017c8 <Control_Init+0x2f8>)
 80016de:	f04f 0200 	mov.w	r2, #0
 80016e2:	f04f 0300 	mov.w	r3, #0
 80016e6:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
 80016ea:	4937      	ldr	r1, [pc, #220]	@ (80017c8 <Control_Init+0x2f8>)
 80016ec:	f04f 0200 	mov.w	r2, #0
 80016f0:	f04f 0300 	mov.w	r3, #0
 80016f4:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
 80016f8:	4933      	ldr	r1, [pc, #204]	@ (80017c8 <Control_Init+0x2f8>)
 80016fa:	f04f 0200 	mov.w	r2, #0
 80016fe:	f04f 0300 	mov.w	r3, #0
 8001702:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 8001706:	4930      	ldr	r1, [pc, #192]	@ (80017c8 <Control_Init+0x2f8>)
 8001708:	f04f 0200 	mov.w	r2, #0
 800170c:	f04f 0300 	mov.w	r3, #0
 8001710:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
    PIVarIb.iMax_b = iParas.Imax; PIVarIb.iMin_b = -PIVarIb.iMax_b;
 8001714:	4b28      	ldr	r3, [pc, #160]	@ (80017b8 <Control_Init+0x2e8>)
 8001716:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800171a:	492b      	ldr	r1, [pc, #172]	@ (80017c8 <Control_Init+0x2f8>)
 800171c:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
 8001720:	4b29      	ldr	r3, [pc, #164]	@ (80017c8 <Control_Init+0x2f8>)
 8001722:	ed93 7b18 	vldr	d7, [r3, #96]	@ 0x60
 8001726:	eeb1 7b47 	vneg.f64	d7, d7
 800172a:	4b27      	ldr	r3, [pc, #156]	@ (80017c8 <Control_Init+0x2f8>)
 800172c:	ed83 7b1a 	vstr	d7, [r3, #104]	@ 0x68

    // PI capacitor current controller
    PIVarIc.Tsc = 10.0/convParas.Fsw;
 8001730:	4b23      	ldr	r3, [pc, #140]	@ (80017c0 <Control_Init+0x2f0>)
 8001732:	ed93 6b00 	vldr	d6, [r3]
 8001736:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 800173a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800173e:	4b23      	ldr	r3, [pc, #140]	@ (80017cc <Control_Init+0x2fc>)
 8001740:	ed83 7b1c 	vstr	d7, [r3, #112]	@ 0x70
    PIVarIc.Kpc = 1.33;
 8001744:	4921      	ldr	r1, [pc, #132]	@ (80017cc <Control_Init+0x2fc>)
 8001746:	a31a      	add	r3, pc, #104	@ (adr r3, 80017b0 <Control_Init+0x2e0>)
 8001748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800174c:	e9c1 2300 	strd	r2, r3, [r1]
    PIVarIc.Kic = 10474;
 8001750:	491e      	ldr	r1, [pc, #120]	@ (80017cc <Control_Init+0x2fc>)
 8001752:	e03d      	b.n	80017d0 <Control_Init+0x300>
 8001754:	f3af 8000 	nop.w
 8001758:	9999999a 	.word	0x9999999a
 800175c:	3fb99999 	.word	0x3fb99999
 8001760:	d2f1a9fc 	.word	0xd2f1a9fc
 8001764:	3f50624d 	.word	0x3f50624d
 8001768:	eb1c432d 	.word	0xeb1c432d
 800176c:	3f1a36e2 	.word	0x3f1a36e2
 8001770:	eb851eb8 	.word	0xeb851eb8
 8001774:	3f7eb851 	.word	0x3f7eb851
 8001778:	5f6fd220 	.word	0x5f6fd220
 800177c:	3f79ce07 	.word	0x3f79ce07
 8001780:	66666666 	.word	0x66666666
 8001784:	3fe66666 	.word	0x3fe66666
 8001788:	00000000 	.word	0x00000000
 800178c:	41086a00 	.word	0x41086a00
 8001790:	9999999a 	.word	0x9999999a
 8001794:	3fa99999 	.word	0x3fa99999
 8001798:	1eb851ec 	.word	0x1eb851ec
 800179c:	3fc1eb85 	.word	0x3fc1eb85
 80017a0:	47ae147b 	.word	0x47ae147b
 80017a4:	bfa47ae1 	.word	0xbfa47ae1
 80017a8:	9999999a 	.word	0x9999999a
 80017ac:	bfa99999 	.word	0xbfa99999
 80017b0:	147ae148 	.word	0x147ae148
 80017b4:	3ff547ae 	.word	0x3ff547ae
 80017b8:	24000750 	.word	0x24000750
 80017bc:	403e0000 	.word	0x403e0000
 80017c0:	240007c8 	.word	0x240007c8
 80017c4:	24000810 	.word	0x24000810
 80017c8:	24000888 	.word	0x24000888
 80017cc:	24000900 	.word	0x24000900
 80017d0:	a363      	add	r3, pc, #396	@ (adr r3, 8001960 <Control_Init+0x490>)
 80017d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d6:	e9c1 2304 	strd	r2, r3, [r1, #16]
    PIVarIc.Tic = 1.0/PIVarIc.Kic;
 80017da:	4b5b      	ldr	r3, [pc, #364]	@ (8001948 <Control_Init+0x478>)
 80017dc:	ed93 6b04 	vldr	d6, [r3, #16]
 80017e0:	eeb7 5b00 	vmov.f64	d5, #112	@ 0x3f800000  1.0
 80017e4:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80017e8:	4b57      	ldr	r3, [pc, #348]	@ (8001948 <Control_Init+0x478>)
 80017ea:	ed83 7b06 	vstr	d7, [r3, #24]
    PIVarIc.Dc = 1-PIVarIc.Tsc/PIVarIc.Tic;
 80017ee:	4b56      	ldr	r3, [pc, #344]	@ (8001948 <Control_Init+0x478>)
 80017f0:	ed93 5b1c 	vldr	d5, [r3, #112]	@ 0x70
 80017f4:	4b54      	ldr	r3, [pc, #336]	@ (8001948 <Control_Init+0x478>)
 80017f6:	ed93 6b06 	vldr	d6, [r3, #24]
 80017fa:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80017fe:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8001802:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001806:	4b50      	ldr	r3, [pc, #320]	@ (8001948 <Control_Init+0x478>)
 8001808:	ed83 7b08 	vstr	d7, [r3, #32]
    PIVarIc.uk_1_c = 0; PIVarIc.uk_c = 0; PIVarIc.usk_1_c = 0;
 800180c:	494e      	ldr	r1, [pc, #312]	@ (8001948 <Control_Init+0x478>)
 800180e:	f04f 0200 	mov.w	r2, #0
 8001812:	f04f 0300 	mov.w	r3, #0
 8001816:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
 800181a:	494b      	ldr	r1, [pc, #300]	@ (8001948 <Control_Init+0x478>)
 800181c:	f04f 0200 	mov.w	r2, #0
 8001820:	f04f 0300 	mov.w	r3, #0
 8001824:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
 8001828:	4947      	ldr	r1, [pc, #284]	@ (8001948 <Control_Init+0x478>)
 800182a:	f04f 0200 	mov.w	r2, #0
 800182e:	f04f 0300 	mov.w	r3, #0
 8001832:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    PIVarIc.ek_c = 0; PIVarIc.ek_1_c = 0; PIVarIc.esk_c = 0; PIVarIc.esk_1_c = 0;
 8001836:	4944      	ldr	r1, [pc, #272]	@ (8001948 <Control_Init+0x478>)
 8001838:	f04f 0200 	mov.w	r2, #0
 800183c:	f04f 0300 	mov.w	r3, #0
 8001840:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
 8001844:	4940      	ldr	r1, [pc, #256]	@ (8001948 <Control_Init+0x478>)
 8001846:	f04f 0200 	mov.w	r2, #0
 800184a:	f04f 0300 	mov.w	r3, #0
 800184e:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
 8001852:	493d      	ldr	r1, [pc, #244]	@ (8001948 <Control_Init+0x478>)
 8001854:	f04f 0200 	mov.w	r2, #0
 8001858:	f04f 0300 	mov.w	r3, #0
 800185c:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 8001860:	4939      	ldr	r1, [pc, #228]	@ (8001948 <Control_Init+0x478>)
 8001862:	f04f 0200 	mov.w	r2, #0
 8001866:	f04f 0300 	mov.w	r3, #0
 800186a:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
    PIVarIc.iMax_c = iParas.Imax; PIVarIc.iMin_c = -PIVarIc.iMax_c;
 800186e:	4b37      	ldr	r3, [pc, #220]	@ (800194c <Control_Init+0x47c>)
 8001870:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001874:	4934      	ldr	r1, [pc, #208]	@ (8001948 <Control_Init+0x478>)
 8001876:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
 800187a:	4b33      	ldr	r3, [pc, #204]	@ (8001948 <Control_Init+0x478>)
 800187c:	ed93 7b18 	vldr	d7, [r3, #96]	@ 0x60
 8001880:	eeb1 7b47 	vneg.f64	d7, d7
 8001884:	4b30      	ldr	r3, [pc, #192]	@ (8001948 <Control_Init+0x478>)
 8001886:	ed83 7b1a 	vstr	d7, [r3, #104]	@ 0x68

    // Low pass filter
    LP.tau = 10000;
 800188a:	4931      	ldr	r1, [pc, #196]	@ (8001950 <Control_Init+0x480>)
 800188c:	a328      	add	r3, pc, #160	@ (adr r3, 8001930 <Control_Init+0x460>)
 800188e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001892:	e9c1 2300 	strd	r2, r3, [r1]
    LP.T = 10e-3;       // Replaced 10*pow(10,-3)
 8001896:	492e      	ldr	r1, [pc, #184]	@ (8001950 <Control_Init+0x480>)
 8001898:	a327      	add	r3, pc, #156	@ (adr r3, 8001938 <Control_Init+0x468>)
 800189a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800189e:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    LP.ek_lp = 0; LP.ek_1_lp = 0;
 80018a2:	492b      	ldr	r1, [pc, #172]	@ (8001950 <Control_Init+0x480>)
 80018a4:	f04f 0200 	mov.w	r2, #0
 80018a8:	f04f 0300 	mov.w	r3, #0
 80018ac:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80018b0:	4927      	ldr	r1, [pc, #156]	@ (8001950 <Control_Init+0x480>)
 80018b2:	f04f 0200 	mov.w	r2, #0
 80018b6:	f04f 0300 	mov.w	r3, #0
 80018ba:	e9c1 2304 	strd	r2, r3, [r1, #16]
    LP.uk_lp = 0; LP.uk_1_lp = 0;
 80018be:	4924      	ldr	r1, [pc, #144]	@ (8001950 <Control_Init+0x480>)
 80018c0:	f04f 0200 	mov.w	r2, #0
 80018c4:	f04f 0300 	mov.w	r3, #0
 80018c8:	e9c1 2306 	strd	r2, r3, [r1, #24]
 80018cc:	4920      	ldr	r1, [pc, #128]	@ (8001950 <Control_Init+0x480>)
 80018ce:	f04f 0200 	mov.w	r2, #0
 80018d2:	f04f 0300 	mov.w	r3, #0
 80018d6:	e9c1 2308 	strd	r2, r3, [r1, #32]

    // Rate limit
    RL.count = 200000-1;
 80018da:	4b1e      	ldr	r3, [pc, #120]	@ (8001954 <Control_Init+0x484>)
 80018dc:	4a1e      	ldr	r2, [pc, #120]	@ (8001958 <Control_Init+0x488>)
 80018de:	619a      	str	r2, [r3, #24]
    RL.v = 20000;
 80018e0:	4b1c      	ldr	r3, [pc, #112]	@ (8001954 <Control_Init+0x484>)
 80018e2:	f644 6220 	movw	r2, #20000	@ 0x4e20
 80018e6:	61da      	str	r2, [r3, #28]
    RL.bf1 = 0;
 80018e8:	491a      	ldr	r1, [pc, #104]	@ (8001954 <Control_Init+0x484>)
 80018ea:	f04f 0200 	mov.w	r2, #0
 80018ee:	f04f 0300 	mov.w	r3, #0
 80018f2:	e9c1 2300 	strd	r2, r3, [r1]
    RL.bf2 = 0;
 80018f6:	4917      	ldr	r1, [pc, #92]	@ (8001954 <Control_Init+0x484>)
 80018f8:	f04f 0200 	mov.w	r2, #0
 80018fc:	f04f 0300 	mov.w	r3, #0
 8001900:	e9c1 2302 	strd	r2, r3, [r1, #8]
    RL.bf3 = 0;
 8001904:	4913      	ldr	r1, [pc, #76]	@ (8001954 <Control_Init+0x484>)
 8001906:	f04f 0200 	mov.w	r2, #0
 800190a:	f04f 0300 	mov.w	r3, #0
 800190e:	e9c1 2304 	strd	r2, r3, [r1, #16]


    //lowpass
    LP.T = 5e-7;
 8001912:	490f      	ldr	r1, [pc, #60]	@ (8001950 <Control_Init+0x480>)
 8001914:	a30a      	add	r3, pc, #40	@ (adr r3, 8001940 <Control_Init+0x470>)
 8001916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800191a:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    //system state
    sysState = TU_0_DEN_12V;
 800191e:	4b0f      	ldr	r3, [pc, #60]	@ (800195c <Control_Init+0x48c>)
 8001920:	2200      	movs	r2, #0
 8001922:	701a      	strb	r2, [r3, #0]
}
 8001924:	bf00      	nop
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	00000000 	.word	0x00000000
 8001934:	40c38800 	.word	0x40c38800
 8001938:	47ae147b 	.word	0x47ae147b
 800193c:	3f847ae1 	.word	0x3f847ae1
 8001940:	a0b5ed8d 	.word	0xa0b5ed8d
 8001944:	3ea0c6f7 	.word	0x3ea0c6f7
 8001948:	24000900 	.word	0x24000900
 800194c:	24000750 	.word	0x24000750
 8001950:	240007e0 	.word	0x240007e0
 8001954:	24000978 	.word	0x24000978
 8001958:	00030d3f 	.word	0x00030d3f
 800195c:	24000998 	.word	0x24000998
 8001960:	00000000 	.word	0x00000000
 8001964:	40c47500 	.word	0x40c47500

08001968 <Control_Update>:

void Control_Update(double V_CB, double V_Bat, double Vref, double Ib,double Ic,
                    double* D,double* Dc, double* uk_V, double* uk_Ib,double* uk_Ic,
                   double* I_SPb,double* I_SPc, double* Count, double* bf1,
                   double* bf2, double* bf3) {
 8001968:	b580      	push	{r7, lr}
 800196a:	b08e      	sub	sp, #56	@ 0x38
 800196c:	af00      	add	r7, sp, #0
 800196e:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30
 8001972:	ed87 1b0a 	vstr	d1, [r7, #40]	@ 0x28
 8001976:	ed87 2b08 	vstr	d2, [r7, #32]
 800197a:	ed87 3b06 	vstr	d3, [r7, #24]
 800197e:	ed87 4b04 	vstr	d4, [r7, #16]
 8001982:	60f8      	str	r0, [r7, #12]
 8001984:	60b9      	str	r1, [r7, #8]
 8001986:	607a      	str	r2, [r7, #4]
 8001988:	603b      	str	r3, [r7, #0]

    switch(sysState) {
 800198a:	4b19      	ldr	r3, [pc, #100]	@ (80019f0 <Control_Update+0x88>)
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	2b02      	cmp	r3, #2
 8001990:	d023      	beq.n	80019da <Control_Update+0x72>
 8001992:	2b02      	cmp	r3, #2
 8001994:	dc24      	bgt.n	80019e0 <Control_Update+0x78>
 8001996:	2b00      	cmp	r3, #0
 8001998:	d002      	beq.n	80019a0 <Control_Update+0x38>
 800199a:	2b01      	cmp	r3, #1
 800199c:	d017      	beq.n	80019ce <Control_Update+0x66>
//
//        	break;

    }

}
 800199e:	e01f      	b.n	80019e0 <Control_Update+0x78>
            if (V_CB < 11.0) {
 80019a0:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 80019a4:	eeb2 6b06 	vmov.f64	d6, #38	@ 0x41300000  11.0
 80019a8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80019ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019b0:	d506      	bpl.n	80019c0 <Control_Update+0x58>
                *D = 0.95;  // Full duty cycle if voltage too low
 80019b2:	68f9      	ldr	r1, [r7, #12]
 80019b4:	a30c      	add	r3, pc, #48	@ (adr r3, 80019e8 <Control_Update+0x80>)
 80019b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ba:	e9c1 2300 	strd	r2, r3, [r1]
            break;
 80019be:	e00f      	b.n	80019e0 <Control_Update+0x78>
            	HAL_Delay(5);
 80019c0:	2005      	movs	r0, #5
 80019c2:	f000 fedd 	bl	8002780 <HAL_Delay>
            	sysState = TU_12_DEN_24V;
 80019c6:	4b0a      	ldr	r3, [pc, #40]	@ (80019f0 <Control_Update+0x88>)
 80019c8:	2201      	movs	r2, #1
 80019ca:	701a      	strb	r2, [r3, #0]
            break;
 80019cc:	e008      	b.n	80019e0 <Control_Update+0x78>
        	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, 1);
 80019ce:	2201      	movs	r2, #1
 80019d0:	2101      	movs	r1, #1
 80019d2:	4808      	ldr	r0, [pc, #32]	@ (80019f4 <Control_Update+0x8c>)
 80019d4:	f005 fb7e 	bl	80070d4 <HAL_GPIO_WritePin>
            break;
 80019d8:	e002      	b.n	80019e0 <Control_Update+0x78>
        	enable_bypass();
 80019da:	f7fe ff5f 	bl	800089c <enable_bypass>
}
 80019de:	e7ff      	b.n	80019e0 <Control_Update+0x78>
 80019e0:	bf00      	nop
 80019e2:	3738      	adds	r7, #56	@ 0x38
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	66666666 	.word	0x66666666
 80019ec:	3fee6666 	.word	0x3fee6666
 80019f0:	24000998 	.word	0x24000998
 80019f4:	58021000 	.word	0x58021000

080019f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001a28 <HAL_MspInit+0x30>)
 8001a00:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001a04:	4a08      	ldr	r2, [pc, #32]	@ (8001a28 <HAL_MspInit+0x30>)
 8001a06:	f043 0302 	orr.w	r3, r3, #2
 8001a0a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001a0e:	4b06      	ldr	r3, [pc, #24]	@ (8001a28 <HAL_MspInit+0x30>)
 8001a10:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001a14:	f003 0302 	and.w	r3, r3, #2
 8001a18:	607b      	str	r3, [r7, #4]
 8001a1a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a1c:	bf00      	nop
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr
 8001a28:	58024400 	.word	0x58024400

08001a2c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b0bc      	sub	sp, #240	@ 0xf0
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a34:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]
 8001a3c:	605a      	str	r2, [r3, #4]
 8001a3e:	609a      	str	r2, [r3, #8]
 8001a40:	60da      	str	r2, [r3, #12]
 8001a42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a44:	f107 0318 	add.w	r3, r7, #24
 8001a48:	22c0      	movs	r2, #192	@ 0xc0
 8001a4a:	2100      	movs	r1, #0
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f00e fd10 	bl	8010472 <memset>
  if(hadc->Instance==ADC1)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a52      	ldr	r2, [pc, #328]	@ (8001ba0 <HAL_ADC_MspInit+0x174>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	f040 809d 	bne.w	8001b98 <HAL_ADC_MspInit+0x16c>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001a5e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001a62:	f04f 0300 	mov.w	r3, #0
 8001a66:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001a6a:	2304      	movs	r3, #4
 8001a6c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 10;
 8001a6e:	230a      	movs	r3, #10
 8001a70:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001a72:	2302      	movs	r3, #2
 8001a74:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001a76:	2302      	movs	r3, #2
 8001a78:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001a7e:	23c0      	movs	r3, #192	@ 0xc0
 8001a80:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001a82:	2320      	movs	r3, #32
 8001a84:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001a86:	2300      	movs	r3, #0
 8001a88:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a90:	f107 0318 	add.w	r3, r7, #24
 8001a94:	4618      	mov	r0, r3
 8001a96:	f008 fbcd 	bl	800a234 <HAL_RCCEx_PeriphCLKConfig>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 8001aa0:	f7ff fc06 	bl	80012b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001aa4:	4b3f      	ldr	r3, [pc, #252]	@ (8001ba4 <HAL_ADC_MspInit+0x178>)
 8001aa6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001aaa:	4a3e      	ldr	r2, [pc, #248]	@ (8001ba4 <HAL_ADC_MspInit+0x178>)
 8001aac:	f043 0320 	orr.w	r3, r3, #32
 8001ab0:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001ab4:	4b3b      	ldr	r3, [pc, #236]	@ (8001ba4 <HAL_ADC_MspInit+0x178>)
 8001ab6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001aba:	f003 0320 	and.w	r3, r3, #32
 8001abe:	617b      	str	r3, [r7, #20]
 8001ac0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac2:	4b38      	ldr	r3, [pc, #224]	@ (8001ba4 <HAL_ADC_MspInit+0x178>)
 8001ac4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ac8:	4a36      	ldr	r2, [pc, #216]	@ (8001ba4 <HAL_ADC_MspInit+0x178>)
 8001aca:	f043 0301 	orr.w	r3, r3, #1
 8001ace:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ad2:	4b34      	ldr	r3, [pc, #208]	@ (8001ba4 <HAL_ADC_MspInit+0x178>)
 8001ad4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ad8:	f003 0301 	and.w	r3, r3, #1
 8001adc:	613b      	str	r3, [r7, #16]
 8001ade:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ae0:	4b30      	ldr	r3, [pc, #192]	@ (8001ba4 <HAL_ADC_MspInit+0x178>)
 8001ae2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ae6:	4a2f      	ldr	r2, [pc, #188]	@ (8001ba4 <HAL_ADC_MspInit+0x178>)
 8001ae8:	f043 0304 	orr.w	r3, r3, #4
 8001aec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001af0:	4b2c      	ldr	r3, [pc, #176]	@ (8001ba4 <HAL_ADC_MspInit+0x178>)
 8001af2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001af6:	f003 0304 	and.w	r3, r3, #4
 8001afa:	60fb      	str	r3, [r7, #12]
 8001afc:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_INP18
    PA7     ------> ADC1_INP7
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|adc1_channel_7_isense_Pin;
 8001afe:	2390      	movs	r3, #144	@ 0x90
 8001b00:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b04:	2303      	movs	r3, #3
 8001b06:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b10:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001b14:	4619      	mov	r1, r3
 8001b16:	4824      	ldr	r0, [pc, #144]	@ (8001ba8 <HAL_ADC_MspInit+0x17c>)
 8001b18:	f005 f92c 	bl	8006d74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = adc1_channel_4_voutsense_Pin|adc1_channel_8_vinsense_Pin;
 8001b1c:	2330      	movs	r3, #48	@ 0x30
 8001b1e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b22:	2303      	movs	r3, #3
 8001b24:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b2e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001b32:	4619      	mov	r1, r3
 8001b34:	481d      	ldr	r0, [pc, #116]	@ (8001bac <HAL_ADC_MspInit+0x180>)
 8001b36:	f005 f91d 	bl	8006d74 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8001b3a:	4b1d      	ldr	r3, [pc, #116]	@ (8001bb0 <HAL_ADC_MspInit+0x184>)
 8001b3c:	4a1d      	ldr	r2, [pc, #116]	@ (8001bb4 <HAL_ADC_MspInit+0x188>)
 8001b3e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001b40:	4b1b      	ldr	r3, [pc, #108]	@ (8001bb0 <HAL_ADC_MspInit+0x184>)
 8001b42:	2209      	movs	r2, #9
 8001b44:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b46:	4b1a      	ldr	r3, [pc, #104]	@ (8001bb0 <HAL_ADC_MspInit+0x184>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b4c:	4b18      	ldr	r3, [pc, #96]	@ (8001bb0 <HAL_ADC_MspInit+0x184>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001b52:	4b17      	ldr	r3, [pc, #92]	@ (8001bb0 <HAL_ADC_MspInit+0x184>)
 8001b54:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b58:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001b5a:	4b15      	ldr	r3, [pc, #84]	@ (8001bb0 <HAL_ADC_MspInit+0x184>)
 8001b5c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001b60:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001b62:	4b13      	ldr	r3, [pc, #76]	@ (8001bb0 <HAL_ADC_MspInit+0x184>)
 8001b64:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b68:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001b6a:	4b11      	ldr	r3, [pc, #68]	@ (8001bb0 <HAL_ADC_MspInit+0x184>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001b70:	4b0f      	ldr	r3, [pc, #60]	@ (8001bb0 <HAL_ADC_MspInit+0x184>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b76:	4b0e      	ldr	r3, [pc, #56]	@ (8001bb0 <HAL_ADC_MspInit+0x184>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001b7c:	480c      	ldr	r0, [pc, #48]	@ (8001bb0 <HAL_ADC_MspInit+0x184>)
 8001b7e:	f002 faa3 	bl	80040c8 <HAL_DMA_Init>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <HAL_ADC_MspInit+0x160>
    {
      Error_Handler();
 8001b88:	f7ff fb92 	bl	80012b0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	4a08      	ldr	r2, [pc, #32]	@ (8001bb0 <HAL_ADC_MspInit+0x184>)
 8001b90:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001b92:	4a07      	ldr	r2, [pc, #28]	@ (8001bb0 <HAL_ADC_MspInit+0x184>)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001b98:	bf00      	nop
 8001b9a:	37f0      	adds	r7, #240	@ 0xf0
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	40022000 	.word	0x40022000
 8001ba4:	58024400 	.word	0x58024400
 8001ba8:	58020000 	.word	0x58020000
 8001bac:	58020800 	.word	0x58020800
 8001bb0:	24000288 	.word	0x24000288
 8001bb4:	40020010 	.word	0x40020010

08001bb8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b0ba      	sub	sp, #232	@ 0xe8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]
 8001bc8:	605a      	str	r2, [r3, #4]
 8001bca:	609a      	str	r2, [r3, #8]
 8001bcc:	60da      	str	r2, [r3, #12]
 8001bce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bd0:	f107 0310 	add.w	r3, r7, #16
 8001bd4:	22c0      	movs	r2, #192	@ 0xc0
 8001bd6:	2100      	movs	r1, #0
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f00e fc4a 	bl	8010472 <memset>
  if(hi2c->Instance==I2C1)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a5c      	ldr	r2, [pc, #368]	@ (8001d54 <HAL_I2C_MspInit+0x19c>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	f040 80b0 	bne.w	8001d4a <HAL_I2C_MspInit+0x192>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001bea:	f04f 0208 	mov.w	r2, #8
 8001bee:	f04f 0300 	mov.w	r3, #0
 8001bf2:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bfc:	f107 0310 	add.w	r3, r7, #16
 8001c00:	4618      	mov	r0, r3
 8001c02:	f008 fb17 	bl	800a234 <HAL_RCCEx_PeriphCLKConfig>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <HAL_I2C_MspInit+0x58>
    {
      Error_Handler();
 8001c0c:	f7ff fb50 	bl	80012b0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c10:	4b51      	ldr	r3, [pc, #324]	@ (8001d58 <HAL_I2C_MspInit+0x1a0>)
 8001c12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c16:	4a50      	ldr	r2, [pc, #320]	@ (8001d58 <HAL_I2C_MspInit+0x1a0>)
 8001c18:	f043 0302 	orr.w	r3, r3, #2
 8001c1c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c20:	4b4d      	ldr	r3, [pc, #308]	@ (8001d58 <HAL_I2C_MspInit+0x1a0>)
 8001c22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c26:	f003 0302 	and.w	r3, r3, #2
 8001c2a:	60fb      	str	r3, [r7, #12]
 8001c2c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c2e:	23c0      	movs	r3, #192	@ 0xc0
 8001c30:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c34:	2312      	movs	r3, #18
 8001c36:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c40:	2300      	movs	r3, #0
 8001c42:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c46:	2304      	movs	r3, #4
 8001c48:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c4c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001c50:	4619      	mov	r1, r3
 8001c52:	4842      	ldr	r0, [pc, #264]	@ (8001d5c <HAL_I2C_MspInit+0x1a4>)
 8001c54:	f005 f88e 	bl	8006d74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c58:	4b3f      	ldr	r3, [pc, #252]	@ (8001d58 <HAL_I2C_MspInit+0x1a0>)
 8001c5a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c5e:	4a3e      	ldr	r2, [pc, #248]	@ (8001d58 <HAL_I2C_MspInit+0x1a0>)
 8001c60:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001c64:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001c68:	4b3b      	ldr	r3, [pc, #236]	@ (8001d58 <HAL_I2C_MspInit+0x1a0>)
 8001c6a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c6e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c72:	60bb      	str	r3, [r7, #8]
 8001c74:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 8001c76:	4b3a      	ldr	r3, [pc, #232]	@ (8001d60 <HAL_I2C_MspInit+0x1a8>)
 8001c78:	4a3a      	ldr	r2, [pc, #232]	@ (8001d64 <HAL_I2C_MspInit+0x1ac>)
 8001c7a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8001c7c:	4b38      	ldr	r3, [pc, #224]	@ (8001d60 <HAL_I2C_MspInit+0x1a8>)
 8001c7e:	2222      	movs	r2, #34	@ 0x22
 8001c80:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c82:	4b37      	ldr	r3, [pc, #220]	@ (8001d60 <HAL_I2C_MspInit+0x1a8>)
 8001c84:	2240      	movs	r2, #64	@ 0x40
 8001c86:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c88:	4b35      	ldr	r3, [pc, #212]	@ (8001d60 <HAL_I2C_MspInit+0x1a8>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c8e:	4b34      	ldr	r3, [pc, #208]	@ (8001d60 <HAL_I2C_MspInit+0x1a8>)
 8001c90:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c94:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c96:	4b32      	ldr	r3, [pc, #200]	@ (8001d60 <HAL_I2C_MspInit+0x1a8>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c9c:	4b30      	ldr	r3, [pc, #192]	@ (8001d60 <HAL_I2C_MspInit+0x1a8>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001ca2:	4b2f      	ldr	r3, [pc, #188]	@ (8001d60 <HAL_I2C_MspInit+0x1a8>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001ca8:	4b2d      	ldr	r3, [pc, #180]	@ (8001d60 <HAL_I2C_MspInit+0x1a8>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001cae:	4b2c      	ldr	r3, [pc, #176]	@ (8001d60 <HAL_I2C_MspInit+0x1a8>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001cb4:	482a      	ldr	r0, [pc, #168]	@ (8001d60 <HAL_I2C_MspInit+0x1a8>)
 8001cb6:	f002 fa07 	bl	80040c8 <HAL_DMA_Init>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <HAL_I2C_MspInit+0x10c>
    {
      Error_Handler();
 8001cc0:	f7ff faf6 	bl	80012b0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	4a26      	ldr	r2, [pc, #152]	@ (8001d60 <HAL_I2C_MspInit+0x1a8>)
 8001cc8:	639a      	str	r2, [r3, #56]	@ 0x38
 8001cca:	4a25      	ldr	r2, [pc, #148]	@ (8001d60 <HAL_I2C_MspInit+0x1a8>)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream2;
 8001cd0:	4b25      	ldr	r3, [pc, #148]	@ (8001d68 <HAL_I2C_MspInit+0x1b0>)
 8001cd2:	4a26      	ldr	r2, [pc, #152]	@ (8001d6c <HAL_I2C_MspInit+0x1b4>)
 8001cd4:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8001cd6:	4b24      	ldr	r3, [pc, #144]	@ (8001d68 <HAL_I2C_MspInit+0x1b0>)
 8001cd8:	2221      	movs	r2, #33	@ 0x21
 8001cda:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001cdc:	4b22      	ldr	r3, [pc, #136]	@ (8001d68 <HAL_I2C_MspInit+0x1b0>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ce2:	4b21      	ldr	r3, [pc, #132]	@ (8001d68 <HAL_I2C_MspInit+0x1b0>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001ce8:	4b1f      	ldr	r3, [pc, #124]	@ (8001d68 <HAL_I2C_MspInit+0x1b0>)
 8001cea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001cee:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001cf0:	4b1d      	ldr	r3, [pc, #116]	@ (8001d68 <HAL_I2C_MspInit+0x1b0>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001cf6:	4b1c      	ldr	r3, [pc, #112]	@ (8001d68 <HAL_I2C_MspInit+0x1b0>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001cfc:	4b1a      	ldr	r3, [pc, #104]	@ (8001d68 <HAL_I2C_MspInit+0x1b0>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001d02:	4b19      	ldr	r3, [pc, #100]	@ (8001d68 <HAL_I2C_MspInit+0x1b0>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d08:	4b17      	ldr	r3, [pc, #92]	@ (8001d68 <HAL_I2C_MspInit+0x1b0>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001d0e:	4816      	ldr	r0, [pc, #88]	@ (8001d68 <HAL_I2C_MspInit+0x1b0>)
 8001d10:	f002 f9da 	bl	80040c8 <HAL_DMA_Init>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <HAL_I2C_MspInit+0x166>
    {
      Error_Handler();
 8001d1a:	f7ff fac9 	bl	80012b0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4a11      	ldr	r2, [pc, #68]	@ (8001d68 <HAL_I2C_MspInit+0x1b0>)
 8001d22:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001d24:	4a10      	ldr	r2, [pc, #64]	@ (8001d68 <HAL_I2C_MspInit+0x1b0>)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	2100      	movs	r1, #0
 8001d2e:	201f      	movs	r0, #31
 8001d30:	f002 f91d 	bl	8003f6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001d34:	201f      	movs	r0, #31
 8001d36:	f002 f934 	bl	8003fa2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	2100      	movs	r1, #0
 8001d3e:	2020      	movs	r0, #32
 8001d40:	f002 f915 	bl	8003f6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001d44:	2020      	movs	r0, #32
 8001d46:	f002 f92c 	bl	8003fa2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001d4a:	bf00      	nop
 8001d4c:	37e8      	adds	r7, #232	@ 0xe8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	40005400 	.word	0x40005400
 8001d58:	58024400 	.word	0x58024400
 8001d5c:	58020400 	.word	0x58020400
 8001d60:	24000354 	.word	0x24000354
 8001d64:	40020028 	.word	0x40020028
 8001d68:	240003cc 	.word	0x240003cc
 8001d6c:	40020040 	.word	0x40020040

08001d70 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b0ba      	sub	sp, #232	@ 0xe8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d78:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]
 8001d80:	605a      	str	r2, [r3, #4]
 8001d82:	609a      	str	r2, [r3, #8]
 8001d84:	60da      	str	r2, [r3, #12]
 8001d86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d88:	f107 0310 	add.w	r3, r7, #16
 8001d8c:	22c0      	movs	r2, #192	@ 0xc0
 8001d8e:	2100      	movs	r1, #0
 8001d90:	4618      	mov	r0, r3
 8001d92:	f00e fb6e 	bl	8010472 <memset>
  if(hspi->Instance==SPI3)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a2a      	ldr	r2, [pc, #168]	@ (8001e44 <HAL_SPI_MspInit+0xd4>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d14d      	bne.n	8001e3c <HAL_SPI_MspInit+0xcc>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8001da0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001da4:	f04f 0300 	mov.w	r3, #0
 8001da8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001dac:	2300      	movs	r3, #0
 8001dae:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001db0:	f107 0310 	add.w	r3, r7, #16
 8001db4:	4618      	mov	r0, r3
 8001db6:	f008 fa3d 	bl	800a234 <HAL_RCCEx_PeriphCLKConfig>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8001dc0:	f7ff fa76 	bl	80012b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001dc4:	4b20      	ldr	r3, [pc, #128]	@ (8001e48 <HAL_SPI_MspInit+0xd8>)
 8001dc6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001dca:	4a1f      	ldr	r2, [pc, #124]	@ (8001e48 <HAL_SPI_MspInit+0xd8>)
 8001dcc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001dd0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001dd4:	4b1c      	ldr	r3, [pc, #112]	@ (8001e48 <HAL_SPI_MspInit+0xd8>)
 8001dd6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001dda:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001dde:	60fb      	str	r3, [r7, #12]
 8001de0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001de2:	4b19      	ldr	r3, [pc, #100]	@ (8001e48 <HAL_SPI_MspInit+0xd8>)
 8001de4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001de8:	4a17      	ldr	r2, [pc, #92]	@ (8001e48 <HAL_SPI_MspInit+0xd8>)
 8001dea:	f043 0304 	orr.w	r3, r3, #4
 8001dee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001df2:	4b15      	ldr	r3, [pc, #84]	@ (8001e48 <HAL_SPI_MspInit+0xd8>)
 8001df4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001df8:	f003 0304 	and.w	r3, r3, #4
 8001dfc:	60bb      	str	r3, [r7, #8]
 8001dfe:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001e00:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001e04:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e08:	2302      	movs	r3, #2
 8001e0a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e14:	2300      	movs	r3, #0
 8001e16:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001e1a:	2306      	movs	r3, #6
 8001e1c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e20:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001e24:	4619      	mov	r1, r3
 8001e26:	4809      	ldr	r0, [pc, #36]	@ (8001e4c <HAL_SPI_MspInit+0xdc>)
 8001e28:	f004 ffa4 	bl	8006d74 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	2100      	movs	r1, #0
 8001e30:	2033      	movs	r0, #51	@ 0x33
 8001e32:	f002 f89c 	bl	8003f6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8001e36:	2033      	movs	r0, #51	@ 0x33
 8001e38:	f002 f8b3 	bl	8003fa2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001e3c:	bf00      	nop
 8001e3e:	37e8      	adds	r7, #232	@ 0xe8
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	40003c00 	.word	0x40003c00
 8001e48:	58024400 	.word	0x58024400
 8001e4c:	58020800 	.word	0x58020800

08001e50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b086      	sub	sp, #24
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a27      	ldr	r2, [pc, #156]	@ (8001efc <HAL_TIM_Base_MspInit+0xac>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d10f      	bne.n	8001e82 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e62:	4b27      	ldr	r3, [pc, #156]	@ (8001f00 <HAL_TIM_Base_MspInit+0xb0>)
 8001e64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e68:	4a25      	ldr	r2, [pc, #148]	@ (8001f00 <HAL_TIM_Base_MspInit+0xb0>)
 8001e6a:	f043 0301 	orr.w	r3, r3, #1
 8001e6e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001e72:	4b23      	ldr	r3, [pc, #140]	@ (8001f00 <HAL_TIM_Base_MspInit+0xb0>)
 8001e74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e78:	f003 0301 	and.w	r3, r3, #1
 8001e7c:	617b      	str	r3, [r7, #20]
 8001e7e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001e80:	e038      	b.n	8001ef4 <HAL_TIM_Base_MspInit+0xa4>
  else if(htim_base->Instance==TIM2)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e8a:	d117      	bne.n	8001ebc <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e8c:	4b1c      	ldr	r3, [pc, #112]	@ (8001f00 <HAL_TIM_Base_MspInit+0xb0>)
 8001e8e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e92:	4a1b      	ldr	r2, [pc, #108]	@ (8001f00 <HAL_TIM_Base_MspInit+0xb0>)
 8001e94:	f043 0301 	orr.w	r3, r3, #1
 8001e98:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001e9c:	4b18      	ldr	r3, [pc, #96]	@ (8001f00 <HAL_TIM_Base_MspInit+0xb0>)
 8001e9e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	613b      	str	r3, [r7, #16]
 8001ea8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001eaa:	2200      	movs	r2, #0
 8001eac:	2100      	movs	r1, #0
 8001eae:	201c      	movs	r0, #28
 8001eb0:	f002 f85d 	bl	8003f6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001eb4:	201c      	movs	r0, #28
 8001eb6:	f002 f874 	bl	8003fa2 <HAL_NVIC_EnableIRQ>
}
 8001eba:	e01b      	b.n	8001ef4 <HAL_TIM_Base_MspInit+0xa4>
  else if(htim_base->Instance==TIM4)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a10      	ldr	r2, [pc, #64]	@ (8001f04 <HAL_TIM_Base_MspInit+0xb4>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d116      	bne.n	8001ef4 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001ec6:	4b0e      	ldr	r3, [pc, #56]	@ (8001f00 <HAL_TIM_Base_MspInit+0xb0>)
 8001ec8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ecc:	4a0c      	ldr	r2, [pc, #48]	@ (8001f00 <HAL_TIM_Base_MspInit+0xb0>)
 8001ece:	f043 0304 	orr.w	r3, r3, #4
 8001ed2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001ed6:	4b0a      	ldr	r3, [pc, #40]	@ (8001f00 <HAL_TIM_Base_MspInit+0xb0>)
 8001ed8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001edc:	f003 0304 	and.w	r3, r3, #4
 8001ee0:	60fb      	str	r3, [r7, #12]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	2100      	movs	r1, #0
 8001ee8:	201e      	movs	r0, #30
 8001eea:	f002 f840 	bl	8003f6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001eee:	201e      	movs	r0, #30
 8001ef0:	f002 f857 	bl	8003fa2 <HAL_NVIC_EnableIRQ>
}
 8001ef4:	bf00      	nop
 8001ef6:	3718      	adds	r7, #24
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	40010000 	.word	0x40010000
 8001f00:	58024400 	.word	0x58024400
 8001f04:	40000800 	.word	0x40000800

08001f08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b0bc      	sub	sp, #240	@ 0xf0
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f10:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001f14:	2200      	movs	r2, #0
 8001f16:	601a      	str	r2, [r3, #0]
 8001f18:	605a      	str	r2, [r3, #4]
 8001f1a:	609a      	str	r2, [r3, #8]
 8001f1c:	60da      	str	r2, [r3, #12]
 8001f1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f20:	f107 0318 	add.w	r3, r7, #24
 8001f24:	22c0      	movs	r2, #192	@ 0xc0
 8001f26:	2100      	movs	r1, #0
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f00e faa2 	bl	8010472 <memset>
  if(huart->Instance==UART7)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a50      	ldr	r2, [pc, #320]	@ (8002074 <HAL_UART_MspInit+0x16c>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d146      	bne.n	8001fc6 <HAL_UART_MspInit+0xbe>

  /* USER CODE END UART7_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8001f38:	f04f 0202 	mov.w	r2, #2
 8001f3c:	f04f 0300 	mov.w	r3, #0
 8001f40:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001f44:	2300      	movs	r3, #0
 8001f46:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f4a:	f107 0318 	add.w	r3, r7, #24
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f008 f970 	bl	800a234 <HAL_RCCEx_PeriphCLKConfig>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001f5a:	f7ff f9a9 	bl	80012b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8001f5e:	4b46      	ldr	r3, [pc, #280]	@ (8002078 <HAL_UART_MspInit+0x170>)
 8001f60:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001f64:	4a44      	ldr	r2, [pc, #272]	@ (8002078 <HAL_UART_MspInit+0x170>)
 8001f66:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001f6a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001f6e:	4b42      	ldr	r3, [pc, #264]	@ (8002078 <HAL_UART_MspInit+0x170>)
 8001f70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001f74:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001f78:	617b      	str	r3, [r7, #20]
 8001f7a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f7c:	4b3e      	ldr	r3, [pc, #248]	@ (8002078 <HAL_UART_MspInit+0x170>)
 8001f7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f82:	4a3d      	ldr	r2, [pc, #244]	@ (8002078 <HAL_UART_MspInit+0x170>)
 8001f84:	f043 0302 	orr.w	r3, r3, #2
 8001f88:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f8c:	4b3a      	ldr	r3, [pc, #232]	@ (8002078 <HAL_UART_MspInit+0x170>)
 8001f8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f92:	f003 0302 	and.w	r3, r3, #2
 8001f96:	613b      	str	r3, [r7, #16]
 8001f98:	693b      	ldr	r3, [r7, #16]
    /**UART7 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> UART7_RX
    PB4 (NJTRST)     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001f9a:	2318      	movs	r3, #24
 8001f9c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fac:	2300      	movs	r3, #0
 8001fae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF11_UART7;
 8001fb2:	230b      	movs	r3, #11
 8001fb4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fb8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	482f      	ldr	r0, [pc, #188]	@ (800207c <HAL_UART_MspInit+0x174>)
 8001fc0:	f004 fed8 	bl	8006d74 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001fc4:	e052      	b.n	800206c <HAL_UART_MspInit+0x164>
  else if(huart->Instance==USART2)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a2d      	ldr	r2, [pc, #180]	@ (8002080 <HAL_UART_MspInit+0x178>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d14d      	bne.n	800206c <HAL_UART_MspInit+0x164>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001fd0:	f04f 0202 	mov.w	r2, #2
 8001fd4:	f04f 0300 	mov.w	r3, #0
 8001fd8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fe2:	f107 0318 	add.w	r3, r7, #24
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f008 f924 	bl	800a234 <HAL_RCCEx_PeriphCLKConfig>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <HAL_UART_MspInit+0xee>
      Error_Handler();
 8001ff2:	f7ff f95d 	bl	80012b0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ff6:	4b20      	ldr	r3, [pc, #128]	@ (8002078 <HAL_UART_MspInit+0x170>)
 8001ff8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ffc:	4a1e      	ldr	r2, [pc, #120]	@ (8002078 <HAL_UART_MspInit+0x170>)
 8001ffe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002002:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002006:	4b1c      	ldr	r3, [pc, #112]	@ (8002078 <HAL_UART_MspInit+0x170>)
 8002008:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800200c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002010:	60fb      	str	r3, [r7, #12]
 8002012:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002014:	4b18      	ldr	r3, [pc, #96]	@ (8002078 <HAL_UART_MspInit+0x170>)
 8002016:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800201a:	4a17      	ldr	r2, [pc, #92]	@ (8002078 <HAL_UART_MspInit+0x170>)
 800201c:	f043 0308 	orr.w	r3, r3, #8
 8002020:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002024:	4b14      	ldr	r3, [pc, #80]	@ (8002078 <HAL_UART_MspInit+0x170>)
 8002026:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800202a:	f003 0308 	and.w	r3, r3, #8
 800202e:	60bb      	str	r3, [r7, #8]
 8002030:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MODBUS_TX2_Pin|MODBUS_RX2_Pin;
 8002032:	2360      	movs	r3, #96	@ 0x60
 8002034:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002038:	2302      	movs	r3, #2
 800203a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203e:	2300      	movs	r3, #0
 8002040:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002044:	2300      	movs	r3, #0
 8002046:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800204a:	2307      	movs	r3, #7
 800204c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002050:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002054:	4619      	mov	r1, r3
 8002056:	480b      	ldr	r0, [pc, #44]	@ (8002084 <HAL_UART_MspInit+0x17c>)
 8002058:	f004 fe8c 	bl	8006d74 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800205c:	2200      	movs	r2, #0
 800205e:	2100      	movs	r1, #0
 8002060:	2026      	movs	r0, #38	@ 0x26
 8002062:	f001 ff84 	bl	8003f6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002066:	2026      	movs	r0, #38	@ 0x26
 8002068:	f001 ff9b 	bl	8003fa2 <HAL_NVIC_EnableIRQ>
}
 800206c:	bf00      	nop
 800206e:	37f0      	adds	r7, #240	@ 0xf0
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	40007800 	.word	0x40007800
 8002078:	58024400 	.word	0x58024400
 800207c:	58020400 	.word	0x58020400
 8002080:	40004400 	.word	0x40004400
 8002084:	58020c00 	.word	0x58020c00

08002088 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800208c:	bf00      	nop
 800208e:	e7fd      	b.n	800208c <NMI_Handler+0x4>

08002090 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002094:	bf00      	nop
 8002096:	e7fd      	b.n	8002094 <HardFault_Handler+0x4>

08002098 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800209c:	bf00      	nop
 800209e:	e7fd      	b.n	800209c <MemManage_Handler+0x4>

080020a0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020a4:	bf00      	nop
 80020a6:	e7fd      	b.n	80020a4 <BusFault_Handler+0x4>

080020a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020ac:	bf00      	nop
 80020ae:	e7fd      	b.n	80020ac <UsageFault_Handler+0x4>

080020b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020b4:	bf00      	nop
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr

080020be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020be:	b480      	push	{r7}
 80020c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020c2:	bf00      	nop
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020d0:	bf00      	nop
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr

080020da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020da:	b580      	push	{r7, lr}
 80020dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020de:	f000 fb2f 	bl	8002740 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020e2:	bf00      	nop
 80020e4:	bd80      	pop	{r7, pc}
	...

080020e8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80020ec:	4802      	ldr	r0, [pc, #8]	@ (80020f8 <DMA1_Stream0_IRQHandler+0x10>)
 80020ee:	f003 fb15 	bl	800571c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80020f2:	bf00      	nop
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	24000288 	.word	0x24000288

080020fc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8002100:	4802      	ldr	r0, [pc, #8]	@ (800210c <DMA1_Stream1_IRQHandler+0x10>)
 8002102:	f003 fb0b 	bl	800571c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002106:	bf00      	nop
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	24000354 	.word	0x24000354

08002110 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8002114:	4802      	ldr	r0, [pc, #8]	@ (8002120 <DMA1_Stream2_IRQHandler+0x10>)
 8002116:	f003 fb01 	bl	800571c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800211a:	bf00      	nop
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	240003cc 	.word	0x240003cc

08002124 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002128:	4802      	ldr	r0, [pc, #8]	@ (8002134 <TIM2_IRQHandler+0x10>)
 800212a:	f00b fab9 	bl	800d6a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800212e:	bf00      	nop
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	24000518 	.word	0x24000518

08002138 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800213c:	4802      	ldr	r0, [pc, #8]	@ (8002148 <TIM4_IRQHandler+0x10>)
 800213e:	f00b faaf 	bl	800d6a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002142:	bf00      	nop
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	24000564 	.word	0x24000564

0800214c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002150:	4802      	ldr	r0, [pc, #8]	@ (800215c <I2C1_EV_IRQHandler+0x10>)
 8002152:	f005 f975 	bl	8007440 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002156:	bf00      	nop
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	24000300 	.word	0x24000300

08002160 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002164:	4802      	ldr	r0, [pc, #8]	@ (8002170 <I2C1_ER_IRQHandler+0x10>)
 8002166:	f005 f985 	bl	8007474 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800216a:	bf00      	nop
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	24000300 	.word	0x24000300

08002174 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002178:	4802      	ldr	r0, [pc, #8]	@ (8002184 <USART2_IRQHandler+0x10>)
 800217a:	f00b ff87 	bl	800e08c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800217e:	bf00      	nop
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	24000644 	.word	0x24000644

08002188 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 800218c:	4802      	ldr	r0, [pc, #8]	@ (8002198 <SPI3_IRQHandler+0x10>)
 800218e:	f00a fe73 	bl	800ce78 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8002192:	bf00      	nop
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	24000444 	.word	0x24000444

0800219c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
  return 1;
 80021a0:	2301      	movs	r3, #1
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <_kill>:

int _kill(int pid, int sig)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80021b6:	f00e f9af 	bl	8010518 <__errno>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2216      	movs	r2, #22
 80021be:	601a      	str	r2, [r3, #0]
  return -1;
 80021c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3708      	adds	r7, #8
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}

080021cc <_exit>:

void _exit (int status)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80021d4:	f04f 31ff 	mov.w	r1, #4294967295
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f7ff ffe7 	bl	80021ac <_kill>
  while (1) {}    /* Make sure we hang here */
 80021de:	bf00      	nop
 80021e0:	e7fd      	b.n	80021de <_exit+0x12>

080021e2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021e2:	b580      	push	{r7, lr}
 80021e4:	b086      	sub	sp, #24
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	60f8      	str	r0, [r7, #12]
 80021ea:	60b9      	str	r1, [r7, #8]
 80021ec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021ee:	2300      	movs	r3, #0
 80021f0:	617b      	str	r3, [r7, #20]
 80021f2:	e00a      	b.n	800220a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80021f4:	f3af 8000 	nop.w
 80021f8:	4601      	mov	r1, r0
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	1c5a      	adds	r2, r3, #1
 80021fe:	60ba      	str	r2, [r7, #8]
 8002200:	b2ca      	uxtb	r2, r1
 8002202:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	3301      	adds	r3, #1
 8002208:	617b      	str	r3, [r7, #20]
 800220a:	697a      	ldr	r2, [r7, #20]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	429a      	cmp	r2, r3
 8002210:	dbf0      	blt.n	80021f4 <_read+0x12>
  }

  return len;
 8002212:	687b      	ldr	r3, [r7, #4]
}
 8002214:	4618      	mov	r0, r3
 8002216:	3718      	adds	r7, #24
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}

0800221c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b086      	sub	sp, #24
 8002220:	af00      	add	r7, sp, #0
 8002222:	60f8      	str	r0, [r7, #12]
 8002224:	60b9      	str	r1, [r7, #8]
 8002226:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002228:	2300      	movs	r3, #0
 800222a:	617b      	str	r3, [r7, #20]
 800222c:	e009      	b.n	8002242 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	1c5a      	adds	r2, r3, #1
 8002232:	60ba      	str	r2, [r7, #8]
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	4618      	mov	r0, r3
 8002238:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	3301      	adds	r3, #1
 8002240:	617b      	str	r3, [r7, #20]
 8002242:	697a      	ldr	r2, [r7, #20]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	429a      	cmp	r2, r3
 8002248:	dbf1      	blt.n	800222e <_write+0x12>
  }
  return len;
 800224a:	687b      	ldr	r3, [r7, #4]
}
 800224c:	4618      	mov	r0, r3
 800224e:	3718      	adds	r7, #24
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}

08002254 <_close>:

int _close(int file)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800225c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002260:	4618      	mov	r0, r3
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800227c:	605a      	str	r2, [r3, #4]
  return 0;
 800227e:	2300      	movs	r3, #0
}
 8002280:	4618      	mov	r0, r3
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <_isatty>:

int _isatty(int file)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002294:	2301      	movs	r3, #1
}
 8002296:	4618      	mov	r0, r3
 8002298:	370c      	adds	r7, #12
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr

080022a2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022a2:	b480      	push	{r7}
 80022a4:	b085      	sub	sp, #20
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	60f8      	str	r0, [r7, #12]
 80022aa:	60b9      	str	r1, [r7, #8]
 80022ac:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80022ae:	2300      	movs	r3, #0
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3714      	adds	r7, #20
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr

080022bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b086      	sub	sp, #24
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022c4:	4a14      	ldr	r2, [pc, #80]	@ (8002318 <_sbrk+0x5c>)
 80022c6:	4b15      	ldr	r3, [pc, #84]	@ (800231c <_sbrk+0x60>)
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022d0:	4b13      	ldr	r3, [pc, #76]	@ (8002320 <_sbrk+0x64>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d102      	bne.n	80022de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022d8:	4b11      	ldr	r3, [pc, #68]	@ (8002320 <_sbrk+0x64>)
 80022da:	4a12      	ldr	r2, [pc, #72]	@ (8002324 <_sbrk+0x68>)
 80022dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022de:	4b10      	ldr	r3, [pc, #64]	@ (8002320 <_sbrk+0x64>)
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4413      	add	r3, r2
 80022e6:	693a      	ldr	r2, [r7, #16]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d207      	bcs.n	80022fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022ec:	f00e f914 	bl	8010518 <__errno>
 80022f0:	4603      	mov	r3, r0
 80022f2:	220c      	movs	r2, #12
 80022f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022f6:	f04f 33ff 	mov.w	r3, #4294967295
 80022fa:	e009      	b.n	8002310 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022fc:	4b08      	ldr	r3, [pc, #32]	@ (8002320 <_sbrk+0x64>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002302:	4b07      	ldr	r3, [pc, #28]	@ (8002320 <_sbrk+0x64>)
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4413      	add	r3, r2
 800230a:	4a05      	ldr	r2, [pc, #20]	@ (8002320 <_sbrk+0x64>)
 800230c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800230e:	68fb      	ldr	r3, [r7, #12]
}
 8002310:	4618      	mov	r0, r3
 8002312:	3718      	adds	r7, #24
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	24080000 	.word	0x24080000
 800231c:	00000400 	.word	0x00000400
 8002320:	2400099c 	.word	0x2400099c
 8002324:	24000b00 	.word	0x24000b00

08002328 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800232c:	4b37      	ldr	r3, [pc, #220]	@ (800240c <SystemInit+0xe4>)
 800232e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002332:	4a36      	ldr	r2, [pc, #216]	@ (800240c <SystemInit+0xe4>)
 8002334:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002338:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800233c:	4b34      	ldr	r3, [pc, #208]	@ (8002410 <SystemInit+0xe8>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 030f 	and.w	r3, r3, #15
 8002344:	2b06      	cmp	r3, #6
 8002346:	d807      	bhi.n	8002358 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002348:	4b31      	ldr	r3, [pc, #196]	@ (8002410 <SystemInit+0xe8>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f023 030f 	bic.w	r3, r3, #15
 8002350:	4a2f      	ldr	r2, [pc, #188]	@ (8002410 <SystemInit+0xe8>)
 8002352:	f043 0307 	orr.w	r3, r3, #7
 8002356:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
	  RCC->CR |= RCC_CR_HSION;
 8002358:	4b2e      	ldr	r3, [pc, #184]	@ (8002414 <SystemInit+0xec>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a2d      	ldr	r2, [pc, #180]	@ (8002414 <SystemInit+0xec>)
 800235e:	f043 0301 	orr.w	r3, r3, #1
 8002362:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002364:	4b2b      	ldr	r3, [pc, #172]	@ (8002414 <SystemInit+0xec>)
 8002366:	2200      	movs	r2, #0
 8002368:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800236a:	4b2a      	ldr	r3, [pc, #168]	@ (8002414 <SystemInit+0xec>)
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	4929      	ldr	r1, [pc, #164]	@ (8002414 <SystemInit+0xec>)
 8002370:	4b29      	ldr	r3, [pc, #164]	@ (8002418 <SystemInit+0xf0>)
 8002372:	4013      	ands	r3, r2
 8002374:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002376:	4b26      	ldr	r3, [pc, #152]	@ (8002410 <SystemInit+0xe8>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0308 	and.w	r3, r3, #8
 800237e:	2b00      	cmp	r3, #0
 8002380:	d007      	beq.n	8002392 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002382:	4b23      	ldr	r3, [pc, #140]	@ (8002410 <SystemInit+0xe8>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f023 030f 	bic.w	r3, r3, #15
 800238a:	4a21      	ldr	r2, [pc, #132]	@ (8002410 <SystemInit+0xe8>)
 800238c:	f043 0307 	orr.w	r3, r3, #7
 8002390:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002392:	4b20      	ldr	r3, [pc, #128]	@ (8002414 <SystemInit+0xec>)
 8002394:	2200      	movs	r2, #0
 8002396:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002398:	4b1e      	ldr	r3, [pc, #120]	@ (8002414 <SystemInit+0xec>)
 800239a:	2200      	movs	r2, #0
 800239c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800239e:	4b1d      	ldr	r3, [pc, #116]	@ (8002414 <SystemInit+0xec>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80023a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002414 <SystemInit+0xec>)
 80023a6:	4a1d      	ldr	r2, [pc, #116]	@ (800241c <SystemInit+0xf4>)
 80023a8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80023aa:	4b1a      	ldr	r3, [pc, #104]	@ (8002414 <SystemInit+0xec>)
 80023ac:	4a1c      	ldr	r2, [pc, #112]	@ (8002420 <SystemInit+0xf8>)
 80023ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80023b0:	4b18      	ldr	r3, [pc, #96]	@ (8002414 <SystemInit+0xec>)
 80023b2:	4a1c      	ldr	r2, [pc, #112]	@ (8002424 <SystemInit+0xfc>)
 80023b4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80023b6:	4b17      	ldr	r3, [pc, #92]	@ (8002414 <SystemInit+0xec>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80023bc:	4b15      	ldr	r3, [pc, #84]	@ (8002414 <SystemInit+0xec>)
 80023be:	4a19      	ldr	r2, [pc, #100]	@ (8002424 <SystemInit+0xfc>)
 80023c0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80023c2:	4b14      	ldr	r3, [pc, #80]	@ (8002414 <SystemInit+0xec>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80023c8:	4b12      	ldr	r3, [pc, #72]	@ (8002414 <SystemInit+0xec>)
 80023ca:	4a16      	ldr	r2, [pc, #88]	@ (8002424 <SystemInit+0xfc>)
 80023cc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80023ce:	4b11      	ldr	r3, [pc, #68]	@ (8002414 <SystemInit+0xec>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80023d4:	4b0f      	ldr	r3, [pc, #60]	@ (8002414 <SystemInit+0xec>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a0e      	ldr	r2, [pc, #56]	@ (8002414 <SystemInit+0xec>)
 80023da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023de:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80023e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002414 <SystemInit+0xec>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80023e6:	4b10      	ldr	r3, [pc, #64]	@ (8002428 <SystemInit+0x100>)
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	4b10      	ldr	r3, [pc, #64]	@ (800242c <SystemInit+0x104>)
 80023ec:	4013      	ands	r3, r2
 80023ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80023f2:	d202      	bcs.n	80023fa <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80023f4:	4b0e      	ldr	r3, [pc, #56]	@ (8002430 <SystemInit+0x108>)
 80023f6:	2201      	movs	r2, #1
 80023f8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80023fa:	4b0e      	ldr	r3, [pc, #56]	@ (8002434 <SystemInit+0x10c>)
 80023fc:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002400:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002402:	bf00      	nop
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr
 800240c:	e000ed00 	.word	0xe000ed00
 8002410:	52002000 	.word	0x52002000
 8002414:	58024400 	.word	0x58024400
 8002418:	eaf6ed7f 	.word	0xeaf6ed7f
 800241c:	02020200 	.word	0x02020200
 8002420:	01ff0000 	.word	0x01ff0000
 8002424:	01010280 	.word	0x01010280
 8002428:	5c001000 	.word	0x5c001000
 800242c:	ffff0000 	.word	0xffff0000
 8002430:	51008108 	.word	0x51008108
 8002434:	52004000 	.word	0x52004000

08002438 <HAL_TIM_PeriodElapsedCallback>:
// Use volatile for variables shared between ISR and main
volatile int check = 0;
volatile int a = 0;
static uint8_t eep_buf[2];
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b086      	sub	sp, #24
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM4)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a44      	ldr	r2, [pc, #272]	@ (8002558 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d144      	bne.n	80024d4 <HAL_TIM_PeriodElapsedCallback+0x9c>
    {
        if(check < a)
 800244a:	4b44      	ldr	r3, [pc, #272]	@ (800255c <HAL_TIM_PeriodElapsedCallback+0x124>)
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	4b44      	ldr	r3, [pc, #272]	@ (8002560 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	429a      	cmp	r2, r3
 8002454:	da18      	bge.n	8002488 <HAL_TIM_PeriodElapsedCallback+0x50>
        {
//
        	            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8002456:	2201      	movs	r2, #1
 8002458:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800245c:	4841      	ldr	r0, [pc, #260]	@ (8002564 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 800245e:	f004 fe39 	bl	80070d4 <HAL_GPIO_WritePin>
        	            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8002462:	2201      	movs	r2, #1
 8002464:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002468:	483e      	ldr	r0, [pc, #248]	@ (8002564 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 800246a:	f004 fe33 	bl	80070d4 <HAL_GPIO_WritePin>
        	            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 800246e:	2201      	movs	r2, #1
 8002470:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002474:	483b      	ldr	r0, [pc, #236]	@ (8002564 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8002476:	f004 fe2d 	bl	80070d4 <HAL_GPIO_WritePin>
        	            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 800247a:	2201      	movs	r2, #1
 800247c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002480:	4838      	ldr	r0, [pc, #224]	@ (8002564 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8002482:	f004 fe27 	bl	80070d4 <HAL_GPIO_WritePin>
 8002486:	e01f      	b.n	80024c8 <HAL_TIM_PeriodElapsedCallback+0x90>
//            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
//            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
//            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
//            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
        }
        else if (check < 20)  // Changed condition
 8002488:	4b34      	ldr	r3, [pc, #208]	@ (800255c <HAL_TIM_PeriodElapsedCallback+0x124>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2b13      	cmp	r3, #19
 800248e:	dc18      	bgt.n	80024c2 <HAL_TIM_PeriodElapsedCallback+0x8a>
        {

        	            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8002490:	2200      	movs	r2, #0
 8002492:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002496:	4833      	ldr	r0, [pc, #204]	@ (8002564 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8002498:	f004 fe1c 	bl	80070d4 <HAL_GPIO_WritePin>
        	            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 800249c:	2200      	movs	r2, #0
 800249e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80024a2:	4830      	ldr	r0, [pc, #192]	@ (8002564 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80024a4:	f004 fe16 	bl	80070d4 <HAL_GPIO_WritePin>
        	            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80024a8:	2200      	movs	r2, #0
 80024aa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80024ae:	482d      	ldr	r0, [pc, #180]	@ (8002564 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80024b0:	f004 fe10 	bl	80070d4 <HAL_GPIO_WritePin>
        	            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80024b4:	2200      	movs	r2, #0
 80024b6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80024ba:	482a      	ldr	r0, [pc, #168]	@ (8002564 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80024bc:	f004 fe0a 	bl	80070d4 <HAL_GPIO_WritePin>
 80024c0:	e002      	b.n	80024c8 <HAL_TIM_PeriodElapsedCallback+0x90>
//            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
//            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
        }
        else
        {
            check = 0;
 80024c2:	4b26      	ldr	r3, [pc, #152]	@ (800255c <HAL_TIM_PeriodElapsedCallback+0x124>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	601a      	str	r2, [r3, #0]
        }

        check++;
 80024c8:	4b24      	ldr	r3, [pc, #144]	@ (800255c <HAL_TIM_PeriodElapsedCallback+0x124>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	3301      	adds	r3, #1
 80024ce:	4a23      	ldr	r2, [pc, #140]	@ (800255c <HAL_TIM_PeriodElapsedCallback+0x124>)
 80024d0:	6013      	str	r3, [r2, #0]
    	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
//    	EEPROM_WriteByte(page_write_test_eeprom, 0, &data_write_test_eeprom, 1);
//    	page_write_test_eeprom++;
//    	data_write_test_eeprom++;
    }
}
 80024d2:	e039      	b.n	8002548 <HAL_TIM_PeriodElapsedCallback+0x110>
    else if(htim->Instance == TIM2)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024dc:	d134      	bne.n	8002548 <HAL_TIM_PeriodElapsedCallback+0x110>
        double is = isense;
 80024de:	4b22      	ldr	r3, [pc, #136]	@ (8002568 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80024e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024e4:	e9c7 2304 	strd	r2, r3, [r7, #16]
        int16_t q = (int16_t)(is * 100.0);      // 12.34 A -> 1234
 80024e8:	ed97 7b04 	vldr	d7, [r7, #16]
 80024ec:	ed9f 6b18 	vldr	d6, [pc, #96]	@ 8002550 <HAL_TIM_PeriodElapsedCallback+0x118>
 80024f0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80024f4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80024f8:	ee17 3a90 	vmov	r3, s15
 80024fc:	81fb      	strh	r3, [r7, #14]
        eep_buf[0] = (uint8_t)(q & 0xFF);
 80024fe:	89fb      	ldrh	r3, [r7, #14]
 8002500:	b2da      	uxtb	r2, r3
 8002502:	4b1a      	ldr	r3, [pc, #104]	@ (800256c <HAL_TIM_PeriodElapsedCallback+0x134>)
 8002504:	701a      	strb	r2, [r3, #0]
        eep_buf[1] = (uint8_t)((q >> 8) & 0xFF);
 8002506:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800250a:	121b      	asrs	r3, r3, #8
 800250c:	b21b      	sxth	r3, r3
 800250e:	b2da      	uxtb	r2, r3
 8002510:	4b16      	ldr	r3, [pc, #88]	@ (800256c <HAL_TIM_PeriodElapsedCallback+0x134>)
 8002512:	705a      	strb	r2, [r3, #1]
    	EEPROM_WriteByte(page_of_eeprom_to_write_isense, 0, eep_buf, 2);
 8002514:	4b16      	ldr	r3, [pc, #88]	@ (8002570 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	4618      	mov	r0, r3
 800251a:	2302      	movs	r3, #2
 800251c:	4a13      	ldr	r2, [pc, #76]	@ (800256c <HAL_TIM_PeriodElapsedCallback+0x134>)
 800251e:	2100      	movs	r1, #0
 8002520:	f7fe f97c 	bl	800081c <EEPROM_WriteByte>
    	if(page_of_eeprom_to_write_isense == 64)
 8002524:	4b12      	ldr	r3, [pc, #72]	@ (8002570 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	2b40      	cmp	r3, #64	@ 0x40
 800252a:	d102      	bne.n	8002532 <HAL_TIM_PeriodElapsedCallback+0xfa>
    		page_of_eeprom_to_write_isense = 0;
 800252c:	4b10      	ldr	r3, [pc, #64]	@ (8002570 <HAL_TIM_PeriodElapsedCallback+0x138>)
 800252e:	2200      	movs	r2, #0
 8002530:	701a      	strb	r2, [r3, #0]
    	page_of_eeprom_to_write_isense++;
 8002532:	4b0f      	ldr	r3, [pc, #60]	@ (8002570 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	3301      	adds	r3, #1
 8002538:	b2da      	uxtb	r2, r3
 800253a:	4b0d      	ldr	r3, [pc, #52]	@ (8002570 <HAL_TIM_PeriodElapsedCallback+0x138>)
 800253c:	701a      	strb	r2, [r3, #0]
    	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
 800253e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002542:	480c      	ldr	r0, [pc, #48]	@ (8002574 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8002544:	f004 fddf 	bl	8007106 <HAL_GPIO_TogglePin>
}
 8002548:	bf00      	nop
 800254a:	3718      	adds	r7, #24
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	00000000 	.word	0x00000000
 8002554:	40590000 	.word	0x40590000
 8002558:	40000800 	.word	0x40000800
 800255c:	240009a0 	.word	0x240009a0
 8002560:	240009a4 	.word	0x240009a4
 8002564:	58020c00 	.word	0x58020c00
 8002568:	24000200 	.word	0x24000200
 800256c:	240009a8 	.word	0x240009a8
 8002570:	24000220 	.word	0x24000220
 8002574:	58020400 	.word	0x58020400

08002578 <mosfet>:

void mosfet(float duty)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
 800257e:	ed87 0a01 	vstr	s0, [r7, #4]
    a = (int)(duty * 20);
 8002582:	edd7 7a01 	vldr	s15, [r7, #4]
 8002586:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 800258a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800258e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002592:	ee17 2a90 	vmov	r2, s15
 8002596:	4b04      	ldr	r3, [pc, #16]	@ (80025a8 <mosfet+0x30>)
 8002598:	601a      	str	r2, [r3, #0]
    HAL_TIM_Base_Start_IT(&htim4);
 800259a:	4804      	ldr	r0, [pc, #16]	@ (80025ac <mosfet+0x34>)
 800259c:	f00b f808 	bl	800d5b0 <HAL_TIM_Base_Start_IT>
}
 80025a0:	bf00      	nop
 80025a2:	3708      	adds	r7, #8
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	240009a4 	.word	0x240009a4
 80025ac:	24000564 	.word	0x24000564

080025b0 <delay_ns>:
    HAL_TIM_Base_Stop_IT(&htim4);
    check = 0;
}
// Hàm delay 100ns sử dụng TIM1
// Hàm delay 100ns sử dụng TIM1
void delay_ns(uint32_t ns) {
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
    uint32_t ticks = (uint32_t)(ns / 27.77f);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	ee07 3a90 	vmov	s15, r3
 80025be:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80025c2:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 80025fc <delay_ns+0x4c>
 80025c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80025ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025ce:	ee17 3a90 	vmov	r3, s15
 80025d2:	60fb      	str	r3, [r7, #12]
    HAL_TIM_Base_Start(&htim1);
 80025d4:	480a      	ldr	r0, [pc, #40]	@ (8002600 <delay_ns+0x50>)
 80025d6:	f00a ff7b 	bl	800d4d0 <HAL_TIM_Base_Start>
    uint32_t start = TIM1->CNT;
 80025da:	4b0a      	ldr	r3, [pc, #40]	@ (8002604 <delay_ns+0x54>)
 80025dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025de:	60bb      	str	r3, [r7, #8]
    while ((uint32_t)(TIM1->CNT - start) < ticks);
 80025e0:	bf00      	nop
 80025e2:	4b08      	ldr	r3, [pc, #32]	@ (8002604 <delay_ns+0x54>)
 80025e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	68fa      	ldr	r2, [r7, #12]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d8f8      	bhi.n	80025e2 <delay_ns+0x32>
}
 80025f0:	bf00      	nop
 80025f2:	bf00      	nop
 80025f4:	3710      	adds	r7, #16
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	41de28f6 	.word	0x41de28f6
 8002600:	240004cc 	.word	0x240004cc
 8002604:	40010000 	.word	0x40010000

08002608 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002608:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002640 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800260c:	f7ff fe8c 	bl	8002328 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002610:	480c      	ldr	r0, [pc, #48]	@ (8002644 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002612:	490d      	ldr	r1, [pc, #52]	@ (8002648 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002614:	4a0d      	ldr	r2, [pc, #52]	@ (800264c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002616:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002618:	e002      	b.n	8002620 <LoopCopyDataInit>

0800261a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800261a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800261c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800261e:	3304      	adds	r3, #4

08002620 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002620:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002622:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002624:	d3f9      	bcc.n	800261a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002626:	4a0a      	ldr	r2, [pc, #40]	@ (8002650 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002628:	4c0a      	ldr	r4, [pc, #40]	@ (8002654 <LoopFillZerobss+0x22>)
  movs r3, #0
 800262a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800262c:	e001      	b.n	8002632 <LoopFillZerobss>

0800262e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800262e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002630:	3204      	adds	r2, #4

08002632 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002632:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002634:	d3fb      	bcc.n	800262e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002636:	f00d ff75 	bl	8010524 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800263a:	f7fe f93d 	bl	80008b8 <main>
  bx  lr
 800263e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002640:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002644:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002648:	240001d8 	.word	0x240001d8
  ldr r2, =_sidata
 800264c:	080127b8 	.word	0x080127b8
  ldr r2, =_sbss
 8002650:	240001d8 	.word	0x240001d8
  ldr r4, =_ebss
 8002654:	24000afc 	.word	0x24000afc

08002658 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002658:	e7fe      	b.n	8002658 <ADC3_IRQHandler>
	...

0800265c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002662:	2003      	movs	r0, #3
 8002664:	f001 fc78 	bl	8003f58 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002668:	f007 fc0e 	bl	8009e88 <HAL_RCC_GetSysClockFreq>
 800266c:	4602      	mov	r2, r0
 800266e:	4b15      	ldr	r3, [pc, #84]	@ (80026c4 <HAL_Init+0x68>)
 8002670:	699b      	ldr	r3, [r3, #24]
 8002672:	0a1b      	lsrs	r3, r3, #8
 8002674:	f003 030f 	and.w	r3, r3, #15
 8002678:	4913      	ldr	r1, [pc, #76]	@ (80026c8 <HAL_Init+0x6c>)
 800267a:	5ccb      	ldrb	r3, [r1, r3]
 800267c:	f003 031f 	and.w	r3, r3, #31
 8002680:	fa22 f303 	lsr.w	r3, r2, r3
 8002684:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002686:	4b0f      	ldr	r3, [pc, #60]	@ (80026c4 <HAL_Init+0x68>)
 8002688:	699b      	ldr	r3, [r3, #24]
 800268a:	f003 030f 	and.w	r3, r3, #15
 800268e:	4a0e      	ldr	r2, [pc, #56]	@ (80026c8 <HAL_Init+0x6c>)
 8002690:	5cd3      	ldrb	r3, [r2, r3]
 8002692:	f003 031f 	and.w	r3, r3, #31
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	fa22 f303 	lsr.w	r3, r2, r3
 800269c:	4a0b      	ldr	r2, [pc, #44]	@ (80026cc <HAL_Init+0x70>)
 800269e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80026a0:	4a0b      	ldr	r2, [pc, #44]	@ (80026d0 <HAL_Init+0x74>)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80026a6:	200f      	movs	r0, #15
 80026a8:	f000 f814 	bl	80026d4 <HAL_InitTick>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e002      	b.n	80026bc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80026b6:	f7ff f99f 	bl	80019f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026ba:	2300      	movs	r3, #0
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3708      	adds	r7, #8
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	58024400 	.word	0x58024400
 80026c8:	080123f8 	.word	0x080123f8
 80026cc:	24000004 	.word	0x24000004
 80026d0:	24000000 	.word	0x24000000

080026d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80026dc:	4b15      	ldr	r3, [pc, #84]	@ (8002734 <HAL_InitTick+0x60>)
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d101      	bne.n	80026e8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e021      	b.n	800272c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80026e8:	4b13      	ldr	r3, [pc, #76]	@ (8002738 <HAL_InitTick+0x64>)
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	4b11      	ldr	r3, [pc, #68]	@ (8002734 <HAL_InitTick+0x60>)
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	4619      	mov	r1, r3
 80026f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80026f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80026fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80026fe:	4618      	mov	r0, r3
 8002700:	f001 fc5d 	bl	8003fbe <HAL_SYSTICK_Config>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d001      	beq.n	800270e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e00e      	b.n	800272c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2b0f      	cmp	r3, #15
 8002712:	d80a      	bhi.n	800272a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002714:	2200      	movs	r2, #0
 8002716:	6879      	ldr	r1, [r7, #4]
 8002718:	f04f 30ff 	mov.w	r0, #4294967295
 800271c:	f001 fc27 	bl	8003f6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002720:	4a06      	ldr	r2, [pc, #24]	@ (800273c <HAL_InitTick+0x68>)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002726:	2300      	movs	r3, #0
 8002728:	e000      	b.n	800272c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
}
 800272c:	4618      	mov	r0, r3
 800272e:	3708      	adds	r7, #8
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	2400000c 	.word	0x2400000c
 8002738:	24000000 	.word	0x24000000
 800273c:	24000008 	.word	0x24000008

08002740 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002740:	b480      	push	{r7}
 8002742:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002744:	4b06      	ldr	r3, [pc, #24]	@ (8002760 <HAL_IncTick+0x20>)
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	461a      	mov	r2, r3
 800274a:	4b06      	ldr	r3, [pc, #24]	@ (8002764 <HAL_IncTick+0x24>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4413      	add	r3, r2
 8002750:	4a04      	ldr	r2, [pc, #16]	@ (8002764 <HAL_IncTick+0x24>)
 8002752:	6013      	str	r3, [r2, #0]
}
 8002754:	bf00      	nop
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	2400000c 	.word	0x2400000c
 8002764:	240009ac 	.word	0x240009ac

08002768 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002768:	b480      	push	{r7}
 800276a:	af00      	add	r7, sp, #0
  return uwTick;
 800276c:	4b03      	ldr	r3, [pc, #12]	@ (800277c <HAL_GetTick+0x14>)
 800276e:	681b      	ldr	r3, [r3, #0]
}
 8002770:	4618      	mov	r0, r3
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	240009ac 	.word	0x240009ac

08002780 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002788:	f7ff ffee 	bl	8002768 <HAL_GetTick>
 800278c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002798:	d005      	beq.n	80027a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800279a:	4b0a      	ldr	r3, [pc, #40]	@ (80027c4 <HAL_Delay+0x44>)
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	461a      	mov	r2, r3
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	4413      	add	r3, r2
 80027a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80027a6:	bf00      	nop
 80027a8:	f7ff ffde 	bl	8002768 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	68fa      	ldr	r2, [r7, #12]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d8f7      	bhi.n	80027a8 <HAL_Delay+0x28>
  {
  }
}
 80027b8:	bf00      	nop
 80027ba:	bf00      	nop
 80027bc:	3710      	adds	r7, #16
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	2400000c 	.word	0x2400000c

080027c8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80027cc:	4b03      	ldr	r3, [pc, #12]	@ (80027dc <HAL_GetREVID+0x14>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	0c1b      	lsrs	r3, r3, #16
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr
 80027dc:	5c001000 	.word	0x5c001000

080027e0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	431a      	orrs	r2, r3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	609a      	str	r2, [r3, #8]
}
 80027fa:	bf00      	nop
 80027fc:	370c      	adds	r7, #12
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr

08002806 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002806:	b480      	push	{r7}
 8002808:	b083      	sub	sp, #12
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
 800280e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	431a      	orrs	r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	609a      	str	r2, [r3, #8]
}
 8002820:	bf00      	nop
 8002822:	370c      	adds	r7, #12
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr

0800282c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800283c:	4618      	mov	r0, r3
 800283e:	370c      	adds	r7, #12
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr

08002848 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002848:	b480      	push	{r7}
 800284a:	b087      	sub	sp, #28
 800284c:	af00      	add	r7, sp, #0
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	60b9      	str	r1, [r7, #8]
 8002852:	607a      	str	r2, [r7, #4]
 8002854:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	3360      	adds	r3, #96	@ 0x60
 800285a:	461a      	mov	r2, r3
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	4413      	add	r3, r2
 8002862:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	430b      	orrs	r3, r1
 8002876:	431a      	orrs	r2, r3
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800287c:	bf00      	nop
 800287e:	371c      	adds	r7, #28
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002888:	b480      	push	{r7}
 800288a:	b085      	sub	sp, #20
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	691b      	ldr	r3, [r3, #16]
 8002898:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	f003 031f 	and.w	r3, r3, #31
 80028a2:	6879      	ldr	r1, [r7, #4]
 80028a4:	fa01 f303 	lsl.w	r3, r1, r3
 80028a8:	431a      	orrs	r2, r3
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	611a      	str	r2, [r3, #16]
}
 80028ae:	bf00      	nop
 80028b0:	3714      	adds	r7, #20
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr

080028ba <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80028ba:	b480      	push	{r7}
 80028bc:	b087      	sub	sp, #28
 80028be:	af00      	add	r7, sp, #0
 80028c0:	60f8      	str	r0, [r7, #12]
 80028c2:	60b9      	str	r1, [r7, #8]
 80028c4:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	3360      	adds	r3, #96	@ 0x60
 80028ca:	461a      	mov	r2, r3
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	4413      	add	r3, r2
 80028d2:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	431a      	orrs	r2, r3
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	601a      	str	r2, [r3, #0]
  }
}
 80028e4:	bf00      	nop
 80028e6:	371c      	adds	r7, #28
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr

080028f0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002900:	2b00      	cmp	r3, #0
 8002902:	d101      	bne.n	8002908 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002904:	2301      	movs	r3, #1
 8002906:	e000      	b.n	800290a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002908:	2300      	movs	r3, #0
}
 800290a:	4618      	mov	r0, r3
 800290c:	370c      	adds	r7, #12
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr

08002916 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002916:	b480      	push	{r7}
 8002918:	b087      	sub	sp, #28
 800291a:	af00      	add	r7, sp, #0
 800291c:	60f8      	str	r0, [r7, #12]
 800291e:	60b9      	str	r1, [r7, #8]
 8002920:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	3330      	adds	r3, #48	@ 0x30
 8002926:	461a      	mov	r2, r3
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	0a1b      	lsrs	r3, r3, #8
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	f003 030c 	and.w	r3, r3, #12
 8002932:	4413      	add	r3, r2
 8002934:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	f003 031f 	and.w	r3, r3, #31
 8002940:	211f      	movs	r1, #31
 8002942:	fa01 f303 	lsl.w	r3, r1, r3
 8002946:	43db      	mvns	r3, r3
 8002948:	401a      	ands	r2, r3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	0e9b      	lsrs	r3, r3, #26
 800294e:	f003 011f 	and.w	r1, r3, #31
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	f003 031f 	and.w	r3, r3, #31
 8002958:	fa01 f303 	lsl.w	r3, r1, r3
 800295c:	431a      	orrs	r2, r3
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002962:	bf00      	nop
 8002964:	371c      	adds	r7, #28
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr

0800296e <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 800296e:	b480      	push	{r7}
 8002970:	b083      	sub	sp, #12
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
 8002976:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	f023 0203 	bic.w	r2, r3, #3
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	431a      	orrs	r2, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	60da      	str	r2, [r3, #12]
}
 8002988:	bf00      	nop
 800298a:	370c      	adds	r7, #12
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002994:	b480      	push	{r7}
 8002996:	b087      	sub	sp, #28
 8002998:	af00      	add	r7, sp, #0
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	60b9      	str	r1, [r7, #8]
 800299e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	3314      	adds	r3, #20
 80029a4:	461a      	mov	r2, r3
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	0e5b      	lsrs	r3, r3, #25
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	f003 0304 	and.w	r3, r3, #4
 80029b0:	4413      	add	r3, r2
 80029b2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	0d1b      	lsrs	r3, r3, #20
 80029bc:	f003 031f 	and.w	r3, r3, #31
 80029c0:	2107      	movs	r1, #7
 80029c2:	fa01 f303 	lsl.w	r3, r1, r3
 80029c6:	43db      	mvns	r3, r3
 80029c8:	401a      	ands	r2, r3
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	0d1b      	lsrs	r3, r3, #20
 80029ce:	f003 031f 	and.w	r3, r3, #31
 80029d2:	6879      	ldr	r1, [r7, #4]
 80029d4:	fa01 f303 	lsl.w	r3, r1, r3
 80029d8:	431a      	orrs	r2, r3
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80029de:	bf00      	nop
 80029e0:	371c      	adds	r7, #28
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
	...

080029ec <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b085      	sub	sp, #20
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a04:	43db      	mvns	r3, r3
 8002a06:	401a      	ands	r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	f003 0318 	and.w	r3, r3, #24
 8002a0e:	4908      	ldr	r1, [pc, #32]	@ (8002a30 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002a10:	40d9      	lsrs	r1, r3
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	400b      	ands	r3, r1
 8002a16:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a1a:	431a      	orrs	r2, r3
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002a22:	bf00      	nop
 8002a24:	3714      	adds	r7, #20
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr
 8002a2e:	bf00      	nop
 8002a30:	000fffff 	.word	0x000fffff

08002a34 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f003 031f 	and.w	r3, r3, #31
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	370c      	adds	r7, #12
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	689a      	ldr	r2, [r3, #8]
 8002a5c:	4b04      	ldr	r3, [pc, #16]	@ (8002a70 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002a5e:	4013      	ands	r3, r2
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	6093      	str	r3, [r2, #8]
}
 8002a64:	bf00      	nop
 8002a66:	370c      	adds	r7, #12
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr
 8002a70:	5fffffc0 	.word	0x5fffffc0

08002a74 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002a84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002a88:	d101      	bne.n	8002a8e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e000      	b.n	8002a90 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002a8e:	2300      	movs	r3, #0
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	370c      	adds	r7, #12
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr

08002a9c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	689a      	ldr	r2, [r3, #8]
 8002aa8:	4b05      	ldr	r3, [pc, #20]	@ (8002ac0 <LL_ADC_EnableInternalRegulator+0x24>)
 8002aaa:	4013      	ands	r3, r2
 8002aac:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002ab4:	bf00      	nop
 8002ab6:	370c      	adds	r7, #12
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr
 8002ac0:	6fffffc0 	.word	0x6fffffc0

08002ac4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ad4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002ad8:	d101      	bne.n	8002ade <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002ada:	2301      	movs	r3, #1
 8002adc:	e000      	b.n	8002ae0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002ade:	2300      	movs	r3, #0
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr

08002aec <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	689a      	ldr	r2, [r3, #8]
 8002af8:	4b05      	ldr	r3, [pc, #20]	@ (8002b10 <LL_ADC_Enable+0x24>)
 8002afa:	4013      	ands	r3, r2
 8002afc:	f043 0201 	orr.w	r2, r3, #1
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002b04:	bf00      	nop
 8002b06:	370c      	adds	r7, #12
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr
 8002b10:	7fffffc0 	.word	0x7fffffc0

08002b14 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	f003 0301 	and.w	r3, r3, #1
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d101      	bne.n	8002b2c <LL_ADC_IsEnabled+0x18>
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e000      	b.n	8002b2e <LL_ADC_IsEnabled+0x1a>
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	370c      	adds	r7, #12
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
	...

08002b3c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	689a      	ldr	r2, [r3, #8]
 8002b48:	4b05      	ldr	r3, [pc, #20]	@ (8002b60 <LL_ADC_REG_StartConversion+0x24>)
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	f043 0204 	orr.w	r2, r3, #4
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002b54:	bf00      	nop
 8002b56:	370c      	adds	r7, #12
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr
 8002b60:	7fffffc0 	.word	0x7fffffc0

08002b64 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	f003 0304 	and.w	r3, r3, #4
 8002b74:	2b04      	cmp	r3, #4
 8002b76:	d101      	bne.n	8002b7c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e000      	b.n	8002b7e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	370c      	adds	r7, #12
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr

08002b8a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002b8a:	b480      	push	{r7}
 8002b8c:	b083      	sub	sp, #12
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	f003 0308 	and.w	r3, r3, #8
 8002b9a:	2b08      	cmp	r3, #8
 8002b9c:	d101      	bne.n	8002ba2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e000      	b.n	8002ba4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002ba2:	2300      	movs	r3, #0
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	370c      	adds	r7, #12
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr

08002bb0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002bb0:	b590      	push	{r4, r7, lr}
 8002bb2:	b089      	sub	sp, #36	@ 0x24
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d101      	bne.n	8002bca <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e18f      	b.n	8002eea <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	68db      	ldr	r3, [r3, #12]
 8002bce:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d109      	bne.n	8002bec <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f7fe ff27 	bl	8001a2c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2200      	movs	r2, #0
 8002be2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f7ff ff3f 	bl	8002a74 <LL_ADC_IsDeepPowerDownEnabled>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d004      	beq.n	8002c06 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4618      	mov	r0, r3
 8002c02:	f7ff ff25 	bl	8002a50 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7ff ff5a 	bl	8002ac4 <LL_ADC_IsInternalRegulatorEnabled>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d114      	bne.n	8002c40 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7ff ff3e 	bl	8002a9c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c20:	4b87      	ldr	r3, [pc, #540]	@ (8002e40 <HAL_ADC_Init+0x290>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	099b      	lsrs	r3, r3, #6
 8002c26:	4a87      	ldr	r2, [pc, #540]	@ (8002e44 <HAL_ADC_Init+0x294>)
 8002c28:	fba2 2303 	umull	r2, r3, r2, r3
 8002c2c:	099b      	lsrs	r3, r3, #6
 8002c2e:	3301      	adds	r3, #1
 8002c30:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002c32:	e002      	b.n	8002c3a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	3b01      	subs	r3, #1
 8002c38:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d1f9      	bne.n	8002c34 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7ff ff3d 	bl	8002ac4 <LL_ADC_IsInternalRegulatorEnabled>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d10d      	bne.n	8002c6c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c54:	f043 0210 	orr.w	r2, r3, #16
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c60:	f043 0201 	orr.w	r2, r3, #1
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4618      	mov	r0, r3
 8002c72:	f7ff ff77 	bl	8002b64 <LL_ADC_REG_IsConversionOngoing>
 8002c76:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c7c:	f003 0310 	and.w	r3, r3, #16
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	f040 8129 	bne.w	8002ed8 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	f040 8125 	bne.w	8002ed8 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c92:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002c96:	f043 0202 	orr.w	r2, r3, #2
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f7ff ff36 	bl	8002b14 <LL_ADC_IsEnabled>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d136      	bne.n	8002d1c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a65      	ldr	r2, [pc, #404]	@ (8002e48 <HAL_ADC_Init+0x298>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d004      	beq.n	8002cc2 <HAL_ADC_Init+0x112>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a63      	ldr	r2, [pc, #396]	@ (8002e4c <HAL_ADC_Init+0x29c>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d10e      	bne.n	8002ce0 <HAL_ADC_Init+0x130>
 8002cc2:	4861      	ldr	r0, [pc, #388]	@ (8002e48 <HAL_ADC_Init+0x298>)
 8002cc4:	f7ff ff26 	bl	8002b14 <LL_ADC_IsEnabled>
 8002cc8:	4604      	mov	r4, r0
 8002cca:	4860      	ldr	r0, [pc, #384]	@ (8002e4c <HAL_ADC_Init+0x29c>)
 8002ccc:	f7ff ff22 	bl	8002b14 <LL_ADC_IsEnabled>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	4323      	orrs	r3, r4
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	bf0c      	ite	eq
 8002cd8:	2301      	moveq	r3, #1
 8002cda:	2300      	movne	r3, #0
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	e008      	b.n	8002cf2 <HAL_ADC_Init+0x142>
 8002ce0:	485b      	ldr	r0, [pc, #364]	@ (8002e50 <HAL_ADC_Init+0x2a0>)
 8002ce2:	f7ff ff17 	bl	8002b14 <LL_ADC_IsEnabled>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	bf0c      	ite	eq
 8002cec:	2301      	moveq	r3, #1
 8002cee:	2300      	movne	r3, #0
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d012      	beq.n	8002d1c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a53      	ldr	r2, [pc, #332]	@ (8002e48 <HAL_ADC_Init+0x298>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d004      	beq.n	8002d0a <HAL_ADC_Init+0x15a>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a51      	ldr	r2, [pc, #324]	@ (8002e4c <HAL_ADC_Init+0x29c>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d101      	bne.n	8002d0e <HAL_ADC_Init+0x15e>
 8002d0a:	4a52      	ldr	r2, [pc, #328]	@ (8002e54 <HAL_ADC_Init+0x2a4>)
 8002d0c:	e000      	b.n	8002d10 <HAL_ADC_Init+0x160>
 8002d0e:	4a52      	ldr	r2, [pc, #328]	@ (8002e58 <HAL_ADC_Init+0x2a8>)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	4619      	mov	r1, r3
 8002d16:	4610      	mov	r0, r2
 8002d18:	f7ff fd62 	bl	80027e0 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002d1c:	f7ff fd54 	bl	80027c8 <HAL_GetREVID>
 8002d20:	4603      	mov	r3, r0
 8002d22:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d914      	bls.n	8002d54 <HAL_ADC_Init+0x1a4>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	2b10      	cmp	r3, #16
 8002d30:	d110      	bne.n	8002d54 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	7d5b      	ldrb	r3, [r3, #21]
 8002d36:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002d3c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002d42:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	7f1b      	ldrb	r3, [r3, #28]
 8002d48:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002d4a:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002d4c:	f043 030c 	orr.w	r3, r3, #12
 8002d50:	61bb      	str	r3, [r7, #24]
 8002d52:	e00d      	b.n	8002d70 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	7d5b      	ldrb	r3, [r3, #21]
 8002d58:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002d5e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002d64:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	7f1b      	ldrb	r3, [r3, #28]
 8002d6a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	7f1b      	ldrb	r3, [r3, #28]
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d106      	bne.n	8002d86 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6a1b      	ldr	r3, [r3, #32]
 8002d7c:	3b01      	subs	r3, #1
 8002d7e:	045b      	lsls	r3, r3, #17
 8002d80:	69ba      	ldr	r2, [r7, #24]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d009      	beq.n	8002da2 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d92:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d9a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002d9c:	69ba      	ldr	r2, [r7, #24]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	68da      	ldr	r2, [r3, #12]
 8002da8:	4b2c      	ldr	r3, [pc, #176]	@ (8002e5c <HAL_ADC_Init+0x2ac>)
 8002daa:	4013      	ands	r3, r2
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	6812      	ldr	r2, [r2, #0]
 8002db0:	69b9      	ldr	r1, [r7, #24]
 8002db2:	430b      	orrs	r3, r1
 8002db4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7ff fed2 	bl	8002b64 <LL_ADC_REG_IsConversionOngoing>
 8002dc0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7ff fedf 	bl	8002b8a <LL_ADC_INJ_IsConversionOngoing>
 8002dcc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d15f      	bne.n	8002e94 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d15c      	bne.n	8002e94 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	7d1b      	ldrb	r3, [r3, #20]
 8002dde:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8002de4:	4313      	orrs	r3, r2
 8002de6:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	68da      	ldr	r2, [r3, #12]
 8002dee:	4b1c      	ldr	r3, [pc, #112]	@ (8002e60 <HAL_ADC_Init+0x2b0>)
 8002df0:	4013      	ands	r3, r2
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	6812      	ldr	r2, [r2, #0]
 8002df6:	69b9      	ldr	r1, [r7, #24]
 8002df8:	430b      	orrs	r3, r1
 8002dfa:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d130      	bne.n	8002e68 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e0a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	691a      	ldr	r2, [r3, #16]
 8002e12:	4b14      	ldr	r3, [pc, #80]	@ (8002e64 <HAL_ADC_Init+0x2b4>)
 8002e14:	4013      	ands	r3, r2
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002e1a:	3a01      	subs	r2, #1
 8002e1c:	0411      	lsls	r1, r2, #16
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002e22:	4311      	orrs	r1, r2
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002e28:	4311      	orrs	r1, r2
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002e2e:	430a      	orrs	r2, r1
 8002e30:	431a      	orrs	r2, r3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f042 0201 	orr.w	r2, r2, #1
 8002e3a:	611a      	str	r2, [r3, #16]
 8002e3c:	e01c      	b.n	8002e78 <HAL_ADC_Init+0x2c8>
 8002e3e:	bf00      	nop
 8002e40:	24000000 	.word	0x24000000
 8002e44:	053e2d63 	.word	0x053e2d63
 8002e48:	40022000 	.word	0x40022000
 8002e4c:	40022100 	.word	0x40022100
 8002e50:	58026000 	.word	0x58026000
 8002e54:	40022300 	.word	0x40022300
 8002e58:	58026300 	.word	0x58026300
 8002e5c:	fff0c003 	.word	0xfff0c003
 8002e60:	ffffbffc 	.word	0xffffbffc
 8002e64:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	691a      	ldr	r2, [r3, #16]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f022 0201 	bic.w	r2, r2, #1
 8002e76:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	691b      	ldr	r3, [r3, #16]
 8002e7e:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	430a      	orrs	r2, r1
 8002e8c:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f000 fd82 	bl	8003998 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d10c      	bne.n	8002eb6 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ea2:	f023 010f 	bic.w	r1, r3, #15
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	699b      	ldr	r3, [r3, #24]
 8002eaa:	1e5a      	subs	r2, r3, #1
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	430a      	orrs	r2, r1
 8002eb2:	631a      	str	r2, [r3, #48]	@ 0x30
 8002eb4:	e007      	b.n	8002ec6 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f022 020f 	bic.w	r2, r2, #15
 8002ec4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eca:	f023 0303 	bic.w	r3, r3, #3
 8002ece:	f043 0201 	orr.w	r2, r3, #1
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	655a      	str	r2, [r3, #84]	@ 0x54
 8002ed6:	e007      	b.n	8002ee8 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002edc:	f043 0210 	orr.w	r2, r3, #16
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002ee8:	7ffb      	ldrb	r3, [r7, #31]
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3724      	adds	r7, #36	@ 0x24
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd90      	pop	{r4, r7, pc}
 8002ef2:	bf00      	nop

08002ef4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b086      	sub	sp, #24
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	60b9      	str	r1, [r7, #8]
 8002efe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a55      	ldr	r2, [pc, #340]	@ (800305c <HAL_ADC_Start_DMA+0x168>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d004      	beq.n	8002f14 <HAL_ADC_Start_DMA+0x20>
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a54      	ldr	r2, [pc, #336]	@ (8003060 <HAL_ADC_Start_DMA+0x16c>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d101      	bne.n	8002f18 <HAL_ADC_Start_DMA+0x24>
 8002f14:	4b53      	ldr	r3, [pc, #332]	@ (8003064 <HAL_ADC_Start_DMA+0x170>)
 8002f16:	e000      	b.n	8002f1a <HAL_ADC_Start_DMA+0x26>
 8002f18:	4b53      	ldr	r3, [pc, #332]	@ (8003068 <HAL_ADC_Start_DMA+0x174>)
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f7ff fd8a 	bl	8002a34 <LL_ADC_GetMultimode>
 8002f20:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4618      	mov	r0, r3
 8002f28:	f7ff fe1c 	bl	8002b64 <LL_ADC_REG_IsConversionOngoing>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	f040 808c 	bne.w	800304c <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d101      	bne.n	8002f42 <HAL_ADC_Start_DMA+0x4e>
 8002f3e:	2302      	movs	r3, #2
 8002f40:	e087      	b.n	8003052 <HAL_ADC_Start_DMA+0x15e>
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2201      	movs	r2, #1
 8002f46:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d005      	beq.n	8002f5c <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	2b05      	cmp	r3, #5
 8002f54:	d002      	beq.n	8002f5c <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	2b09      	cmp	r3, #9
 8002f5a:	d170      	bne.n	800303e <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002f5c:	68f8      	ldr	r0, [r7, #12]
 8002f5e:	f000 fbfd 	bl	800375c <ADC_Enable>
 8002f62:	4603      	mov	r3, r0
 8002f64:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002f66:	7dfb      	ldrb	r3, [r7, #23]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d163      	bne.n	8003034 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002f70:	4b3e      	ldr	r3, [pc, #248]	@ (800306c <HAL_ADC_Start_DMA+0x178>)
 8002f72:	4013      	ands	r3, r2
 8002f74:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a37      	ldr	r2, [pc, #220]	@ (8003060 <HAL_ADC_Start_DMA+0x16c>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d002      	beq.n	8002f8c <HAL_ADC_Start_DMA+0x98>
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	e000      	b.n	8002f8e <HAL_ADC_Start_DMA+0x9a>
 8002f8c:	4b33      	ldr	r3, [pc, #204]	@ (800305c <HAL_ADC_Start_DMA+0x168>)
 8002f8e:	68fa      	ldr	r2, [r7, #12]
 8002f90:	6812      	ldr	r2, [r2, #0]
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d002      	beq.n	8002f9c <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d105      	bne.n	8002fa8 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fa0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d006      	beq.n	8002fc2 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fb8:	f023 0206 	bic.w	r2, r3, #6
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	659a      	str	r2, [r3, #88]	@ 0x58
 8002fc0:	e002      	b.n	8002fc8 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fcc:	4a28      	ldr	r2, [pc, #160]	@ (8003070 <HAL_ADC_Start_DMA+0x17c>)
 8002fce:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fd4:	4a27      	ldr	r2, [pc, #156]	@ (8003074 <HAL_ADC_Start_DMA+0x180>)
 8002fd6:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fdc:	4a26      	ldr	r2, [pc, #152]	@ (8003078 <HAL_ADC_Start_DMA+0x184>)
 8002fde:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	221c      	movs	r2, #28
 8002fe6:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	685a      	ldr	r2, [r3, #4]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f042 0210 	orr.w	r2, r2, #16
 8002ffe:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003008:	4619      	mov	r1, r3
 800300a:	4610      	mov	r0, r2
 800300c:	f7ff fcaf 	bl	800296e <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	3340      	adds	r3, #64	@ 0x40
 800301a:	4619      	mov	r1, r3
 800301c:	68ba      	ldr	r2, [r7, #8]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f001 fbae 	bl	8004780 <HAL_DMA_Start_IT>
 8003024:	4603      	mov	r3, r0
 8003026:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4618      	mov	r0, r3
 800302e:	f7ff fd85 	bl	8002b3c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003032:	e00d      	b.n	8003050 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2200      	movs	r2, #0
 8003038:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 800303c:	e008      	b.n	8003050 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2200      	movs	r2, #0
 8003046:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800304a:	e001      	b.n	8003050 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800304c:	2302      	movs	r3, #2
 800304e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003050:	7dfb      	ldrb	r3, [r7, #23]
}
 8003052:	4618      	mov	r0, r3
 8003054:	3718      	adds	r7, #24
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	40022000 	.word	0x40022000
 8003060:	40022100 	.word	0x40022100
 8003064:	40022300 	.word	0x40022300
 8003068:	58026300 	.word	0x58026300
 800306c:	fffff0fe 	.word	0xfffff0fe
 8003070:	08003871 	.word	0x08003871
 8003074:	08003949 	.word	0x08003949
 8003078:	08003965 	.word	0x08003965

0800307c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003084:	bf00      	nop
 8003086:	370c      	adds	r7, #12
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr

08003090 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003098:	bf00      	nop
 800309a:	370c      	adds	r7, #12
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr

080030a4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80030a4:	b590      	push	{r4, r7, lr}
 80030a6:	b0a1      	sub	sp, #132	@ 0x84
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030ae:	2300      	movs	r3, #0
 80030b0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80030b4:	2300      	movs	r3, #0
 80030b6:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	4a65      	ldr	r2, [pc, #404]	@ (8003254 <HAL_ADC_ConfigChannel+0x1b0>)
 80030be:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d101      	bne.n	80030ce <HAL_ADC_ConfigChannel+0x2a>
 80030ca:	2302      	movs	r3, #2
 80030cc:	e32e      	b.n	800372c <HAL_ADC_ConfigChannel+0x688>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2201      	movs	r2, #1
 80030d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4618      	mov	r0, r3
 80030dc:	f7ff fd42 	bl	8002b64 <LL_ADC_REG_IsConversionOngoing>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	f040 8313 	bne.w	800370e <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	db2c      	blt.n	800314a <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d108      	bne.n	800310e <HAL_ADC_ConfigChannel+0x6a>
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	0e9b      	lsrs	r3, r3, #26
 8003102:	f003 031f 	and.w	r3, r3, #31
 8003106:	2201      	movs	r2, #1
 8003108:	fa02 f303 	lsl.w	r3, r2, r3
 800310c:	e016      	b.n	800313c <HAL_ADC_ConfigChannel+0x98>
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003114:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003116:	fa93 f3a3 	rbit	r3, r3
 800311a:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800311c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800311e:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003120:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003122:	2b00      	cmp	r3, #0
 8003124:	d101      	bne.n	800312a <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8003126:	2320      	movs	r3, #32
 8003128:	e003      	b.n	8003132 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 800312a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800312c:	fab3 f383 	clz	r3, r3
 8003130:	b2db      	uxtb	r3, r3
 8003132:	f003 031f 	and.w	r3, r3, #31
 8003136:	2201      	movs	r2, #1
 8003138:	fa02 f303 	lsl.w	r3, r2, r3
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	6812      	ldr	r2, [r2, #0]
 8003140:	69d1      	ldr	r1, [r2, #28]
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	6812      	ldr	r2, [r2, #0]
 8003146:	430b      	orrs	r3, r1
 8003148:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6818      	ldr	r0, [r3, #0]
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	6859      	ldr	r1, [r3, #4]
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	461a      	mov	r2, r3
 8003158:	f7ff fbdd 	bl	8002916 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4618      	mov	r0, r3
 8003162:	f7ff fcff 	bl	8002b64 <LL_ADC_REG_IsConversionOngoing>
 8003166:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4618      	mov	r0, r3
 800316e:	f7ff fd0c 	bl	8002b8a <LL_ADC_INJ_IsConversionOngoing>
 8003172:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003174:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003176:	2b00      	cmp	r3, #0
 8003178:	f040 80b8 	bne.w	80032ec <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800317c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800317e:	2b00      	cmp	r3, #0
 8003180:	f040 80b4 	bne.w	80032ec <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6818      	ldr	r0, [r3, #0]
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	6819      	ldr	r1, [r3, #0]
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	461a      	mov	r2, r3
 8003192:	f7ff fbff 	bl	8002994 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003196:	4b30      	ldr	r3, [pc, #192]	@ (8003258 <HAL_ADC_ConfigChannel+0x1b4>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800319e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80031a2:	d10b      	bne.n	80031bc <HAL_ADC_ConfigChannel+0x118>
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	695a      	ldr	r2, [r3, #20]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	089b      	lsrs	r3, r3, #2
 80031b0:	f003 0307 	and.w	r3, r3, #7
 80031b4:	005b      	lsls	r3, r3, #1
 80031b6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ba:	e01d      	b.n	80031f8 <HAL_ADC_ConfigChannel+0x154>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	f003 0310 	and.w	r3, r3, #16
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d10b      	bne.n	80031e2 <HAL_ADC_ConfigChannel+0x13e>
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	695a      	ldr	r2, [r3, #20]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	089b      	lsrs	r3, r3, #2
 80031d6:	f003 0307 	and.w	r3, r3, #7
 80031da:	005b      	lsls	r3, r3, #1
 80031dc:	fa02 f303 	lsl.w	r3, r2, r3
 80031e0:	e00a      	b.n	80031f8 <HAL_ADC_ConfigChannel+0x154>
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	695a      	ldr	r2, [r3, #20]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	089b      	lsrs	r3, r3, #2
 80031ee:	f003 0304 	and.w	r3, r3, #4
 80031f2:	005b      	lsls	r3, r3, #1
 80031f4:	fa02 f303 	lsl.w	r3, r2, r3
 80031f8:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	2b04      	cmp	r3, #4
 8003200:	d02c      	beq.n	800325c <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6818      	ldr	r0, [r3, #0]
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	6919      	ldr	r1, [r3, #16]
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003210:	f7ff fb1a 	bl	8002848 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6818      	ldr	r0, [r3, #0]
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	6919      	ldr	r1, [r3, #16]
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	7e5b      	ldrb	r3, [r3, #25]
 8003220:	2b01      	cmp	r3, #1
 8003222:	d102      	bne.n	800322a <HAL_ADC_ConfigChannel+0x186>
 8003224:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003228:	e000      	b.n	800322c <HAL_ADC_ConfigChannel+0x188>
 800322a:	2300      	movs	r3, #0
 800322c:	461a      	mov	r2, r3
 800322e:	f7ff fb44 	bl	80028ba <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6818      	ldr	r0, [r3, #0]
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	6919      	ldr	r1, [r3, #16]
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	7e1b      	ldrb	r3, [r3, #24]
 800323e:	2b01      	cmp	r3, #1
 8003240:	d102      	bne.n	8003248 <HAL_ADC_ConfigChannel+0x1a4>
 8003242:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003246:	e000      	b.n	800324a <HAL_ADC_ConfigChannel+0x1a6>
 8003248:	2300      	movs	r3, #0
 800324a:	461a      	mov	r2, r3
 800324c:	f7ff fb1c 	bl	8002888 <LL_ADC_SetDataRightShift>
 8003250:	e04c      	b.n	80032ec <HAL_ADC_ConfigChannel+0x248>
 8003252:	bf00      	nop
 8003254:	47ff0000 	.word	0x47ff0000
 8003258:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003262:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	069b      	lsls	r3, r3, #26
 800326c:	429a      	cmp	r2, r3
 800326e:	d107      	bne.n	8003280 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800327e:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003286:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	069b      	lsls	r3, r3, #26
 8003290:	429a      	cmp	r2, r3
 8003292:	d107      	bne.n	80032a4 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80032a2:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80032aa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	069b      	lsls	r3, r3, #26
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d107      	bne.n	80032c8 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80032c6:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80032ce:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	069b      	lsls	r3, r3, #26
 80032d8:	429a      	cmp	r2, r3
 80032da:	d107      	bne.n	80032ec <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80032ea:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4618      	mov	r0, r3
 80032f2:	f7ff fc0f 	bl	8002b14 <LL_ADC_IsEnabled>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	f040 8211 	bne.w	8003720 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6818      	ldr	r0, [r3, #0]
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	6819      	ldr	r1, [r3, #0]
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	68db      	ldr	r3, [r3, #12]
 800330a:	461a      	mov	r2, r3
 800330c:	f7ff fb6e 	bl	80029ec <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	4aa1      	ldr	r2, [pc, #644]	@ (800359c <HAL_ADC_ConfigChannel+0x4f8>)
 8003316:	4293      	cmp	r3, r2
 8003318:	f040 812e 	bne.w	8003578 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003328:	2b00      	cmp	r3, #0
 800332a:	d10b      	bne.n	8003344 <HAL_ADC_ConfigChannel+0x2a0>
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	0e9b      	lsrs	r3, r3, #26
 8003332:	3301      	adds	r3, #1
 8003334:	f003 031f 	and.w	r3, r3, #31
 8003338:	2b09      	cmp	r3, #9
 800333a:	bf94      	ite	ls
 800333c:	2301      	movls	r3, #1
 800333e:	2300      	movhi	r3, #0
 8003340:	b2db      	uxtb	r3, r3
 8003342:	e019      	b.n	8003378 <HAL_ADC_ConfigChannel+0x2d4>
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800334a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800334c:	fa93 f3a3 	rbit	r3, r3
 8003350:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8003352:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003354:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8003356:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003358:	2b00      	cmp	r3, #0
 800335a:	d101      	bne.n	8003360 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 800335c:	2320      	movs	r3, #32
 800335e:	e003      	b.n	8003368 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8003360:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003362:	fab3 f383 	clz	r3, r3
 8003366:	b2db      	uxtb	r3, r3
 8003368:	3301      	adds	r3, #1
 800336a:	f003 031f 	and.w	r3, r3, #31
 800336e:	2b09      	cmp	r3, #9
 8003370:	bf94      	ite	ls
 8003372:	2301      	movls	r3, #1
 8003374:	2300      	movhi	r3, #0
 8003376:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003378:	2b00      	cmp	r3, #0
 800337a:	d079      	beq.n	8003470 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003384:	2b00      	cmp	r3, #0
 8003386:	d107      	bne.n	8003398 <HAL_ADC_ConfigChannel+0x2f4>
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	0e9b      	lsrs	r3, r3, #26
 800338e:	3301      	adds	r3, #1
 8003390:	069b      	lsls	r3, r3, #26
 8003392:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003396:	e015      	b.n	80033c4 <HAL_ADC_ConfigChannel+0x320>
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800339e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80033a0:	fa93 f3a3 	rbit	r3, r3
 80033a4:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80033a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80033a8:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80033aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d101      	bne.n	80033b4 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 80033b0:	2320      	movs	r3, #32
 80033b2:	e003      	b.n	80033bc <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 80033b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80033b6:	fab3 f383 	clz	r3, r3
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	3301      	adds	r3, #1
 80033be:	069b      	lsls	r3, r3, #26
 80033c0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d109      	bne.n	80033e4 <HAL_ADC_ConfigChannel+0x340>
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	0e9b      	lsrs	r3, r3, #26
 80033d6:	3301      	adds	r3, #1
 80033d8:	f003 031f 	and.w	r3, r3, #31
 80033dc:	2101      	movs	r1, #1
 80033de:	fa01 f303 	lsl.w	r3, r1, r3
 80033e2:	e017      	b.n	8003414 <HAL_ADC_ConfigChannel+0x370>
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033ec:	fa93 f3a3 	rbit	r3, r3
 80033f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80033f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033f4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80033f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d101      	bne.n	8003400 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 80033fc:	2320      	movs	r3, #32
 80033fe:	e003      	b.n	8003408 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8003400:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003402:	fab3 f383 	clz	r3, r3
 8003406:	b2db      	uxtb	r3, r3
 8003408:	3301      	adds	r3, #1
 800340a:	f003 031f 	and.w	r3, r3, #31
 800340e:	2101      	movs	r1, #1
 8003410:	fa01 f303 	lsl.w	r3, r1, r3
 8003414:	ea42 0103 	orr.w	r1, r2, r3
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003420:	2b00      	cmp	r3, #0
 8003422:	d10a      	bne.n	800343a <HAL_ADC_ConfigChannel+0x396>
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	0e9b      	lsrs	r3, r3, #26
 800342a:	3301      	adds	r3, #1
 800342c:	f003 021f 	and.w	r2, r3, #31
 8003430:	4613      	mov	r3, r2
 8003432:	005b      	lsls	r3, r3, #1
 8003434:	4413      	add	r3, r2
 8003436:	051b      	lsls	r3, r3, #20
 8003438:	e018      	b.n	800346c <HAL_ADC_ConfigChannel+0x3c8>
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003440:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003442:	fa93 f3a3 	rbit	r3, r3
 8003446:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8003448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800344a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800344c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800344e:	2b00      	cmp	r3, #0
 8003450:	d101      	bne.n	8003456 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8003452:	2320      	movs	r3, #32
 8003454:	e003      	b.n	800345e <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8003456:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003458:	fab3 f383 	clz	r3, r3
 800345c:	b2db      	uxtb	r3, r3
 800345e:	3301      	adds	r3, #1
 8003460:	f003 021f 	and.w	r2, r3, #31
 8003464:	4613      	mov	r3, r2
 8003466:	005b      	lsls	r3, r3, #1
 8003468:	4413      	add	r3, r2
 800346a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800346c:	430b      	orrs	r3, r1
 800346e:	e07e      	b.n	800356e <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003478:	2b00      	cmp	r3, #0
 800347a:	d107      	bne.n	800348c <HAL_ADC_ConfigChannel+0x3e8>
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	0e9b      	lsrs	r3, r3, #26
 8003482:	3301      	adds	r3, #1
 8003484:	069b      	lsls	r3, r3, #26
 8003486:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800348a:	e015      	b.n	80034b8 <HAL_ADC_ConfigChannel+0x414>
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003494:	fa93 f3a3 	rbit	r3, r3
 8003498:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800349a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800349c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800349e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d101      	bne.n	80034a8 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 80034a4:	2320      	movs	r3, #32
 80034a6:	e003      	b.n	80034b0 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 80034a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034aa:	fab3 f383 	clz	r3, r3
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	3301      	adds	r3, #1
 80034b2:	069b      	lsls	r3, r3, #26
 80034b4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d109      	bne.n	80034d8 <HAL_ADC_ConfigChannel+0x434>
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	0e9b      	lsrs	r3, r3, #26
 80034ca:	3301      	adds	r3, #1
 80034cc:	f003 031f 	and.w	r3, r3, #31
 80034d0:	2101      	movs	r1, #1
 80034d2:	fa01 f303 	lsl.w	r3, r1, r3
 80034d6:	e017      	b.n	8003508 <HAL_ADC_ConfigChannel+0x464>
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	fa93 f3a3 	rbit	r3, r3
 80034e4:	61bb      	str	r3, [r7, #24]
  return result;
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80034ea:	6a3b      	ldr	r3, [r7, #32]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d101      	bne.n	80034f4 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 80034f0:	2320      	movs	r3, #32
 80034f2:	e003      	b.n	80034fc <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 80034f4:	6a3b      	ldr	r3, [r7, #32]
 80034f6:	fab3 f383 	clz	r3, r3
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	3301      	adds	r3, #1
 80034fe:	f003 031f 	and.w	r3, r3, #31
 8003502:	2101      	movs	r1, #1
 8003504:	fa01 f303 	lsl.w	r3, r1, r3
 8003508:	ea42 0103 	orr.w	r1, r2, r3
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003514:	2b00      	cmp	r3, #0
 8003516:	d10d      	bne.n	8003534 <HAL_ADC_ConfigChannel+0x490>
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	0e9b      	lsrs	r3, r3, #26
 800351e:	3301      	adds	r3, #1
 8003520:	f003 021f 	and.w	r2, r3, #31
 8003524:	4613      	mov	r3, r2
 8003526:	005b      	lsls	r3, r3, #1
 8003528:	4413      	add	r3, r2
 800352a:	3b1e      	subs	r3, #30
 800352c:	051b      	lsls	r3, r3, #20
 800352e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003532:	e01b      	b.n	800356c <HAL_ADC_ConfigChannel+0x4c8>
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	fa93 f3a3 	rbit	r3, r3
 8003540:	60fb      	str	r3, [r7, #12]
  return result;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d101      	bne.n	8003550 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 800354c:	2320      	movs	r3, #32
 800354e:	e003      	b.n	8003558 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	fab3 f383 	clz	r3, r3
 8003556:	b2db      	uxtb	r3, r3
 8003558:	3301      	adds	r3, #1
 800355a:	f003 021f 	and.w	r2, r3, #31
 800355e:	4613      	mov	r3, r2
 8003560:	005b      	lsls	r3, r3, #1
 8003562:	4413      	add	r3, r2
 8003564:	3b1e      	subs	r3, #30
 8003566:	051b      	lsls	r3, r3, #20
 8003568:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800356c:	430b      	orrs	r3, r1
 800356e:	683a      	ldr	r2, [r7, #0]
 8003570:	6892      	ldr	r2, [r2, #8]
 8003572:	4619      	mov	r1, r3
 8003574:	f7ff fa0e 	bl	8002994 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	2b00      	cmp	r3, #0
 800357e:	f280 80cf 	bge.w	8003720 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a06      	ldr	r2, [pc, #24]	@ (80035a0 <HAL_ADC_ConfigChannel+0x4fc>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d004      	beq.n	8003596 <HAL_ADC_ConfigChannel+0x4f2>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a04      	ldr	r2, [pc, #16]	@ (80035a4 <HAL_ADC_ConfigChannel+0x500>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d10a      	bne.n	80035ac <HAL_ADC_ConfigChannel+0x508>
 8003596:	4b04      	ldr	r3, [pc, #16]	@ (80035a8 <HAL_ADC_ConfigChannel+0x504>)
 8003598:	e009      	b.n	80035ae <HAL_ADC_ConfigChannel+0x50a>
 800359a:	bf00      	nop
 800359c:	47ff0000 	.word	0x47ff0000
 80035a0:	40022000 	.word	0x40022000
 80035a4:	40022100 	.word	0x40022100
 80035a8:	40022300 	.word	0x40022300
 80035ac:	4b61      	ldr	r3, [pc, #388]	@ (8003734 <HAL_ADC_ConfigChannel+0x690>)
 80035ae:	4618      	mov	r0, r3
 80035b0:	f7ff f93c 	bl	800282c <LL_ADC_GetCommonPathInternalCh>
 80035b4:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a5f      	ldr	r2, [pc, #380]	@ (8003738 <HAL_ADC_ConfigChannel+0x694>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d004      	beq.n	80035ca <HAL_ADC_ConfigChannel+0x526>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a5d      	ldr	r2, [pc, #372]	@ (800373c <HAL_ADC_ConfigChannel+0x698>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d10e      	bne.n	80035e8 <HAL_ADC_ConfigChannel+0x544>
 80035ca:	485b      	ldr	r0, [pc, #364]	@ (8003738 <HAL_ADC_ConfigChannel+0x694>)
 80035cc:	f7ff faa2 	bl	8002b14 <LL_ADC_IsEnabled>
 80035d0:	4604      	mov	r4, r0
 80035d2:	485a      	ldr	r0, [pc, #360]	@ (800373c <HAL_ADC_ConfigChannel+0x698>)
 80035d4:	f7ff fa9e 	bl	8002b14 <LL_ADC_IsEnabled>
 80035d8:	4603      	mov	r3, r0
 80035da:	4323      	orrs	r3, r4
 80035dc:	2b00      	cmp	r3, #0
 80035de:	bf0c      	ite	eq
 80035e0:	2301      	moveq	r3, #1
 80035e2:	2300      	movne	r3, #0
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	e008      	b.n	80035fa <HAL_ADC_ConfigChannel+0x556>
 80035e8:	4855      	ldr	r0, [pc, #340]	@ (8003740 <HAL_ADC_ConfigChannel+0x69c>)
 80035ea:	f7ff fa93 	bl	8002b14 <LL_ADC_IsEnabled>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	bf0c      	ite	eq
 80035f4:	2301      	moveq	r3, #1
 80035f6:	2300      	movne	r3, #0
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d07d      	beq.n	80036fa <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a50      	ldr	r2, [pc, #320]	@ (8003744 <HAL_ADC_ConfigChannel+0x6a0>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d130      	bne.n	800366a <HAL_ADC_ConfigChannel+0x5c6>
 8003608:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800360a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d12b      	bne.n	800366a <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a4a      	ldr	r2, [pc, #296]	@ (8003740 <HAL_ADC_ConfigChannel+0x69c>)
 8003618:	4293      	cmp	r3, r2
 800361a:	f040 8081 	bne.w	8003720 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a45      	ldr	r2, [pc, #276]	@ (8003738 <HAL_ADC_ConfigChannel+0x694>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d004      	beq.n	8003632 <HAL_ADC_ConfigChannel+0x58e>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a43      	ldr	r2, [pc, #268]	@ (800373c <HAL_ADC_ConfigChannel+0x698>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d101      	bne.n	8003636 <HAL_ADC_ConfigChannel+0x592>
 8003632:	4a45      	ldr	r2, [pc, #276]	@ (8003748 <HAL_ADC_ConfigChannel+0x6a4>)
 8003634:	e000      	b.n	8003638 <HAL_ADC_ConfigChannel+0x594>
 8003636:	4a3f      	ldr	r2, [pc, #252]	@ (8003734 <HAL_ADC_ConfigChannel+0x690>)
 8003638:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800363a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800363e:	4619      	mov	r1, r3
 8003640:	4610      	mov	r0, r2
 8003642:	f7ff f8e0 	bl	8002806 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003646:	4b41      	ldr	r3, [pc, #260]	@ (800374c <HAL_ADC_ConfigChannel+0x6a8>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	099b      	lsrs	r3, r3, #6
 800364c:	4a40      	ldr	r2, [pc, #256]	@ (8003750 <HAL_ADC_ConfigChannel+0x6ac>)
 800364e:	fba2 2303 	umull	r2, r3, r2, r3
 8003652:	099b      	lsrs	r3, r3, #6
 8003654:	3301      	adds	r3, #1
 8003656:	005b      	lsls	r3, r3, #1
 8003658:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800365a:	e002      	b.n	8003662 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	3b01      	subs	r3, #1
 8003660:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d1f9      	bne.n	800365c <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003668:	e05a      	b.n	8003720 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a39      	ldr	r2, [pc, #228]	@ (8003754 <HAL_ADC_ConfigChannel+0x6b0>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d11e      	bne.n	80036b2 <HAL_ADC_ConfigChannel+0x60e>
 8003674:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003676:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d119      	bne.n	80036b2 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a2f      	ldr	r2, [pc, #188]	@ (8003740 <HAL_ADC_ConfigChannel+0x69c>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d14b      	bne.n	8003720 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a2a      	ldr	r2, [pc, #168]	@ (8003738 <HAL_ADC_ConfigChannel+0x694>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d004      	beq.n	800369c <HAL_ADC_ConfigChannel+0x5f8>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a29      	ldr	r2, [pc, #164]	@ (800373c <HAL_ADC_ConfigChannel+0x698>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d101      	bne.n	80036a0 <HAL_ADC_ConfigChannel+0x5fc>
 800369c:	4a2a      	ldr	r2, [pc, #168]	@ (8003748 <HAL_ADC_ConfigChannel+0x6a4>)
 800369e:	e000      	b.n	80036a2 <HAL_ADC_ConfigChannel+0x5fe>
 80036a0:	4a24      	ldr	r2, [pc, #144]	@ (8003734 <HAL_ADC_ConfigChannel+0x690>)
 80036a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80036a4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80036a8:	4619      	mov	r1, r3
 80036aa:	4610      	mov	r0, r2
 80036ac:	f7ff f8ab 	bl	8002806 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80036b0:	e036      	b.n	8003720 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a28      	ldr	r2, [pc, #160]	@ (8003758 <HAL_ADC_ConfigChannel+0x6b4>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d131      	bne.n	8003720 <HAL_ADC_ConfigChannel+0x67c>
 80036bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80036be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d12c      	bne.n	8003720 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a1d      	ldr	r2, [pc, #116]	@ (8003740 <HAL_ADC_ConfigChannel+0x69c>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d127      	bne.n	8003720 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a18      	ldr	r2, [pc, #96]	@ (8003738 <HAL_ADC_ConfigChannel+0x694>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d004      	beq.n	80036e4 <HAL_ADC_ConfigChannel+0x640>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a17      	ldr	r2, [pc, #92]	@ (800373c <HAL_ADC_ConfigChannel+0x698>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d101      	bne.n	80036e8 <HAL_ADC_ConfigChannel+0x644>
 80036e4:	4a18      	ldr	r2, [pc, #96]	@ (8003748 <HAL_ADC_ConfigChannel+0x6a4>)
 80036e6:	e000      	b.n	80036ea <HAL_ADC_ConfigChannel+0x646>
 80036e8:	4a12      	ldr	r2, [pc, #72]	@ (8003734 <HAL_ADC_ConfigChannel+0x690>)
 80036ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80036ec:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80036f0:	4619      	mov	r1, r3
 80036f2:	4610      	mov	r0, r2
 80036f4:	f7ff f887 	bl	8002806 <LL_ADC_SetCommonPathInternalCh>
 80036f8:	e012      	b.n	8003720 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036fe:	f043 0220 	orr.w	r2, r3, #32
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800370c:	e008      	b.n	8003720 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003712:	f043 0220 	orr.w	r2, r3, #32
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003728:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800372c:	4618      	mov	r0, r3
 800372e:	3784      	adds	r7, #132	@ 0x84
 8003730:	46bd      	mov	sp, r7
 8003732:	bd90      	pop	{r4, r7, pc}
 8003734:	58026300 	.word	0x58026300
 8003738:	40022000 	.word	0x40022000
 800373c:	40022100 	.word	0x40022100
 8003740:	58026000 	.word	0x58026000
 8003744:	cb840000 	.word	0xcb840000
 8003748:	40022300 	.word	0x40022300
 800374c:	24000000 	.word	0x24000000
 8003750:	053e2d63 	.word	0x053e2d63
 8003754:	c7520000 	.word	0xc7520000
 8003758:	cfb80000 	.word	0xcfb80000

0800375c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4618      	mov	r0, r3
 800376a:	f7ff f9d3 	bl	8002b14 <LL_ADC_IsEnabled>
 800376e:	4603      	mov	r3, r0
 8003770:	2b00      	cmp	r3, #0
 8003772:	d16e      	bne.n	8003852 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	689a      	ldr	r2, [r3, #8]
 800377a:	4b38      	ldr	r3, [pc, #224]	@ (800385c <ADC_Enable+0x100>)
 800377c:	4013      	ands	r3, r2
 800377e:	2b00      	cmp	r3, #0
 8003780:	d00d      	beq.n	800379e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003786:	f043 0210 	orr.w	r2, r3, #16
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003792:	f043 0201 	orr.w	r2, r3, #1
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e05a      	b.n	8003854 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4618      	mov	r0, r3
 80037a4:	f7ff f9a2 	bl	8002aec <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80037a8:	f7fe ffde 	bl	8002768 <HAL_GetTick>
 80037ac:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a2b      	ldr	r2, [pc, #172]	@ (8003860 <ADC_Enable+0x104>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d004      	beq.n	80037c2 <ADC_Enable+0x66>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a29      	ldr	r2, [pc, #164]	@ (8003864 <ADC_Enable+0x108>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d101      	bne.n	80037c6 <ADC_Enable+0x6a>
 80037c2:	4b29      	ldr	r3, [pc, #164]	@ (8003868 <ADC_Enable+0x10c>)
 80037c4:	e000      	b.n	80037c8 <ADC_Enable+0x6c>
 80037c6:	4b29      	ldr	r3, [pc, #164]	@ (800386c <ADC_Enable+0x110>)
 80037c8:	4618      	mov	r0, r3
 80037ca:	f7ff f933 	bl	8002a34 <LL_ADC_GetMultimode>
 80037ce:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a23      	ldr	r2, [pc, #140]	@ (8003864 <ADC_Enable+0x108>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d002      	beq.n	80037e0 <ADC_Enable+0x84>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	e000      	b.n	80037e2 <ADC_Enable+0x86>
 80037e0:	4b1f      	ldr	r3, [pc, #124]	@ (8003860 <ADC_Enable+0x104>)
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	6812      	ldr	r2, [r2, #0]
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d02c      	beq.n	8003844 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d130      	bne.n	8003852 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80037f0:	e028      	b.n	8003844 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4618      	mov	r0, r3
 80037f8:	f7ff f98c 	bl	8002b14 <LL_ADC_IsEnabled>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d104      	bne.n	800380c <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4618      	mov	r0, r3
 8003808:	f7ff f970 	bl	8002aec <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800380c:	f7fe ffac 	bl	8002768 <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	2b02      	cmp	r3, #2
 8003818:	d914      	bls.n	8003844 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0301 	and.w	r3, r3, #1
 8003824:	2b01      	cmp	r3, #1
 8003826:	d00d      	beq.n	8003844 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800382c:	f043 0210 	orr.w	r2, r3, #16
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003838:	f043 0201 	orr.w	r2, r3, #1
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e007      	b.n	8003854 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0301 	and.w	r3, r3, #1
 800384e:	2b01      	cmp	r3, #1
 8003850:	d1cf      	bne.n	80037f2 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003852:	2300      	movs	r3, #0
}
 8003854:	4618      	mov	r0, r3
 8003856:	3710      	adds	r7, #16
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}
 800385c:	8000003f 	.word	0x8000003f
 8003860:	40022000 	.word	0x40022000
 8003864:	40022100 	.word	0x40022100
 8003868:	40022300 	.word	0x40022300
 800386c:	58026300 	.word	0x58026300

08003870 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800387c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003882:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003886:	2b00      	cmp	r3, #0
 8003888:	d14b      	bne.n	8003922 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800388e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 0308 	and.w	r3, r3, #8
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d021      	beq.n	80038e8 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4618      	mov	r0, r3
 80038aa:	f7ff f821 	bl	80028f0 <LL_ADC_REG_IsTriggerSourceSWStart>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d032      	beq.n	800391a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	68db      	ldr	r3, [r3, #12]
 80038ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d12b      	bne.n	800391a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038c6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038d2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d11f      	bne.n	800391a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038de:	f043 0201 	orr.w	r2, r3, #1
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	655a      	str	r2, [r3, #84]	@ 0x54
 80038e6:	e018      	b.n	800391a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	f003 0303 	and.w	r3, r3, #3
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d111      	bne.n	800391a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038fa:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003906:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d105      	bne.n	800391a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003912:	f043 0201 	orr.w	r2, r3, #1
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800391a:	68f8      	ldr	r0, [r7, #12]
 800391c:	f7fc feb0 	bl	8000680 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003920:	e00e      	b.n	8003940 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003926:	f003 0310 	and.w	r3, r3, #16
 800392a:	2b00      	cmp	r3, #0
 800392c:	d003      	beq.n	8003936 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800392e:	68f8      	ldr	r0, [r7, #12]
 8003930:	f7ff fbae 	bl	8003090 <HAL_ADC_ErrorCallback>
}
 8003934:	e004      	b.n	8003940 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800393a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	4798      	blx	r3
}
 8003940:	bf00      	nop
 8003942:	3710      	adds	r7, #16
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}

08003948 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003954:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003956:	68f8      	ldr	r0, [r7, #12]
 8003958:	f7ff fb90 	bl	800307c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800395c:	bf00      	nop
 800395e:	3710      	adds	r7, #16
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}

08003964 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b084      	sub	sp, #16
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003970:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003976:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003982:	f043 0204 	orr.w	r2, r3, #4
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800398a:	68f8      	ldr	r0, [r7, #12]
 800398c:	f7ff fb80 	bl	8003090 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003990:	bf00      	nop
 8003992:	3710      	adds	r7, #16
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}

08003998 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a7a      	ldr	r2, [pc, #488]	@ (8003b90 <ADC_ConfigureBoostMode+0x1f8>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d004      	beq.n	80039b4 <ADC_ConfigureBoostMode+0x1c>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a79      	ldr	r2, [pc, #484]	@ (8003b94 <ADC_ConfigureBoostMode+0x1fc>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d109      	bne.n	80039c8 <ADC_ConfigureBoostMode+0x30>
 80039b4:	4b78      	ldr	r3, [pc, #480]	@ (8003b98 <ADC_ConfigureBoostMode+0x200>)
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	bf14      	ite	ne
 80039c0:	2301      	movne	r3, #1
 80039c2:	2300      	moveq	r3, #0
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	e008      	b.n	80039da <ADC_ConfigureBoostMode+0x42>
 80039c8:	4b74      	ldr	r3, [pc, #464]	@ (8003b9c <ADC_ConfigureBoostMode+0x204>)
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	bf14      	ite	ne
 80039d4:	2301      	movne	r3, #1
 80039d6:	2300      	moveq	r3, #0
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d01c      	beq.n	8003a18 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80039de:	f006 fbcd 	bl	800a17c <HAL_RCC_GetHCLKFreq>
 80039e2:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80039ec:	d010      	beq.n	8003a10 <ADC_ConfigureBoostMode+0x78>
 80039ee:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80039f2:	d873      	bhi.n	8003adc <ADC_ConfigureBoostMode+0x144>
 80039f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039f8:	d002      	beq.n	8003a00 <ADC_ConfigureBoostMode+0x68>
 80039fa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80039fe:	d16d      	bne.n	8003adc <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	0c1b      	lsrs	r3, r3, #16
 8003a06:	68fa      	ldr	r2, [r7, #12]
 8003a08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a0c:	60fb      	str	r3, [r7, #12]
        break;
 8003a0e:	e068      	b.n	8003ae2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	089b      	lsrs	r3, r3, #2
 8003a14:	60fb      	str	r3, [r7, #12]
        break;
 8003a16:	e064      	b.n	8003ae2 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003a18:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8003a1c:	f04f 0100 	mov.w	r1, #0
 8003a20:	f007 fe12 	bl	800b648 <HAL_RCCEx_GetPeriphCLKFreq>
 8003a24:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003a2e:	d051      	beq.n	8003ad4 <ADC_ConfigureBoostMode+0x13c>
 8003a30:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003a34:	d854      	bhi.n	8003ae0 <ADC_ConfigureBoostMode+0x148>
 8003a36:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003a3a:	d047      	beq.n	8003acc <ADC_ConfigureBoostMode+0x134>
 8003a3c:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003a40:	d84e      	bhi.n	8003ae0 <ADC_ConfigureBoostMode+0x148>
 8003a42:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003a46:	d03d      	beq.n	8003ac4 <ADC_ConfigureBoostMode+0x12c>
 8003a48:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003a4c:	d848      	bhi.n	8003ae0 <ADC_ConfigureBoostMode+0x148>
 8003a4e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003a52:	d033      	beq.n	8003abc <ADC_ConfigureBoostMode+0x124>
 8003a54:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003a58:	d842      	bhi.n	8003ae0 <ADC_ConfigureBoostMode+0x148>
 8003a5a:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003a5e:	d029      	beq.n	8003ab4 <ADC_ConfigureBoostMode+0x11c>
 8003a60:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003a64:	d83c      	bhi.n	8003ae0 <ADC_ConfigureBoostMode+0x148>
 8003a66:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003a6a:	d01a      	beq.n	8003aa2 <ADC_ConfigureBoostMode+0x10a>
 8003a6c:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003a70:	d836      	bhi.n	8003ae0 <ADC_ConfigureBoostMode+0x148>
 8003a72:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003a76:	d014      	beq.n	8003aa2 <ADC_ConfigureBoostMode+0x10a>
 8003a78:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003a7c:	d830      	bhi.n	8003ae0 <ADC_ConfigureBoostMode+0x148>
 8003a7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a82:	d00e      	beq.n	8003aa2 <ADC_ConfigureBoostMode+0x10a>
 8003a84:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a88:	d82a      	bhi.n	8003ae0 <ADC_ConfigureBoostMode+0x148>
 8003a8a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003a8e:	d008      	beq.n	8003aa2 <ADC_ConfigureBoostMode+0x10a>
 8003a90:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003a94:	d824      	bhi.n	8003ae0 <ADC_ConfigureBoostMode+0x148>
 8003a96:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003a9a:	d002      	beq.n	8003aa2 <ADC_ConfigureBoostMode+0x10a>
 8003a9c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003aa0:	d11e      	bne.n	8003ae0 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	0c9b      	lsrs	r3, r3, #18
 8003aa8:	005b      	lsls	r3, r3, #1
 8003aaa:	68fa      	ldr	r2, [r7, #12]
 8003aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ab0:	60fb      	str	r3, [r7, #12]
        break;
 8003ab2:	e016      	b.n	8003ae2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	091b      	lsrs	r3, r3, #4
 8003ab8:	60fb      	str	r3, [r7, #12]
        break;
 8003aba:	e012      	b.n	8003ae2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	095b      	lsrs	r3, r3, #5
 8003ac0:	60fb      	str	r3, [r7, #12]
        break;
 8003ac2:	e00e      	b.n	8003ae2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	099b      	lsrs	r3, r3, #6
 8003ac8:	60fb      	str	r3, [r7, #12]
        break;
 8003aca:	e00a      	b.n	8003ae2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	09db      	lsrs	r3, r3, #7
 8003ad0:	60fb      	str	r3, [r7, #12]
        break;
 8003ad2:	e006      	b.n	8003ae2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	0a1b      	lsrs	r3, r3, #8
 8003ad8:	60fb      	str	r3, [r7, #12]
        break;
 8003ada:	e002      	b.n	8003ae2 <ADC_ConfigureBoostMode+0x14a>
        break;
 8003adc:	bf00      	nop
 8003ade:	e000      	b.n	8003ae2 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003ae0:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003ae2:	f7fe fe71 	bl	80027c8 <HAL_GetREVID>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d815      	bhi.n	8003b1c <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	4a2b      	ldr	r2, [pc, #172]	@ (8003ba0 <ADC_ConfigureBoostMode+0x208>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d908      	bls.n	8003b0a <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	689a      	ldr	r2, [r3, #8]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b06:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003b08:	e03e      	b.n	8003b88 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	689a      	ldr	r2, [r3, #8]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003b18:	609a      	str	r2, [r3, #8]
}
 8003b1a:	e035      	b.n	8003b88 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	085b      	lsrs	r3, r3, #1
 8003b20:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	4a1f      	ldr	r2, [pc, #124]	@ (8003ba4 <ADC_ConfigureBoostMode+0x20c>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d808      	bhi.n	8003b3c <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	689a      	ldr	r2, [r3, #8]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003b38:	609a      	str	r2, [r3, #8]
}
 8003b3a:	e025      	b.n	8003b88 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	4a1a      	ldr	r2, [pc, #104]	@ (8003ba8 <ADC_ConfigureBoostMode+0x210>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d80a      	bhi.n	8003b5a <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b56:	609a      	str	r2, [r3, #8]
}
 8003b58:	e016      	b.n	8003b88 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	4a13      	ldr	r2, [pc, #76]	@ (8003bac <ADC_ConfigureBoostMode+0x214>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d80a      	bhi.n	8003b78 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b74:	609a      	str	r2, [r3, #8]
}
 8003b76:	e007      	b.n	8003b88 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	689a      	ldr	r2, [r3, #8]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8003b86:	609a      	str	r2, [r3, #8]
}
 8003b88:	bf00      	nop
 8003b8a:	3710      	adds	r7, #16
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	40022000 	.word	0x40022000
 8003b94:	40022100 	.word	0x40022100
 8003b98:	40022300 	.word	0x40022300
 8003b9c:	58026300 	.word	0x58026300
 8003ba0:	01312d00 	.word	0x01312d00
 8003ba4:	005f5e10 	.word	0x005f5e10
 8003ba8:	00bebc20 	.word	0x00bebc20
 8003bac:	017d7840 	.word	0x017d7840

08003bb0 <LL_ADC_IsEnabled>:
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	f003 0301 	and.w	r3, r3, #1
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d101      	bne.n	8003bc8 <LL_ADC_IsEnabled+0x18>
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e000      	b.n	8003bca <LL_ADC_IsEnabled+0x1a>
 8003bc8:	2300      	movs	r3, #0
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	370c      	adds	r7, #12
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr

08003bd6 <LL_ADC_REG_IsConversionOngoing>:
{
 8003bd6:	b480      	push	{r7}
 8003bd8:	b083      	sub	sp, #12
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	f003 0304 	and.w	r3, r3, #4
 8003be6:	2b04      	cmp	r3, #4
 8003be8:	d101      	bne.n	8003bee <LL_ADC_REG_IsConversionOngoing+0x18>
 8003bea:	2301      	movs	r3, #1
 8003bec:	e000      	b.n	8003bf0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003bee:	2300      	movs	r3, #0
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	370c      	adds	r7, #12
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr

08003bfc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003bfc:	b590      	push	{r4, r7, lr}
 8003bfe:	b09f      	sub	sp, #124	@ 0x7c
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c06:	2300      	movs	r3, #0
 8003c08:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d101      	bne.n	8003c1a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003c16:	2302      	movs	r3, #2
 8003c18:	e0be      	b.n	8003d98 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003c22:	2300      	movs	r3, #0
 8003c24:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003c26:	2300      	movs	r3, #0
 8003c28:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a5c      	ldr	r2, [pc, #368]	@ (8003da0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d102      	bne.n	8003c3a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003c34:	4b5b      	ldr	r3, [pc, #364]	@ (8003da4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003c36:	60bb      	str	r3, [r7, #8]
 8003c38:	e001      	b.n	8003c3e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d10b      	bne.n	8003c5c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c48:	f043 0220 	orr.w	r2, r3, #32
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e09d      	b.n	8003d98 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f7ff ffb9 	bl	8003bd6 <LL_ADC_REG_IsConversionOngoing>
 8003c64:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f7ff ffb3 	bl	8003bd6 <LL_ADC_REG_IsConversionOngoing>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d17f      	bne.n	8003d76 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003c76:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d17c      	bne.n	8003d76 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a47      	ldr	r2, [pc, #284]	@ (8003da0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d004      	beq.n	8003c90 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a46      	ldr	r2, [pc, #280]	@ (8003da4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d101      	bne.n	8003c94 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003c90:	4b45      	ldr	r3, [pc, #276]	@ (8003da8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003c92:	e000      	b.n	8003c96 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003c94:	4b45      	ldr	r3, [pc, #276]	@ (8003dac <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003c96:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d039      	beq.n	8003d14 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003ca0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	431a      	orrs	r2, r3
 8003cae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003cb0:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a3a      	ldr	r2, [pc, #232]	@ (8003da0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d004      	beq.n	8003cc6 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a38      	ldr	r2, [pc, #224]	@ (8003da4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d10e      	bne.n	8003ce4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003cc6:	4836      	ldr	r0, [pc, #216]	@ (8003da0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003cc8:	f7ff ff72 	bl	8003bb0 <LL_ADC_IsEnabled>
 8003ccc:	4604      	mov	r4, r0
 8003cce:	4835      	ldr	r0, [pc, #212]	@ (8003da4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003cd0:	f7ff ff6e 	bl	8003bb0 <LL_ADC_IsEnabled>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	4323      	orrs	r3, r4
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	bf0c      	ite	eq
 8003cdc:	2301      	moveq	r3, #1
 8003cde:	2300      	movne	r3, #0
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	e008      	b.n	8003cf6 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8003ce4:	4832      	ldr	r0, [pc, #200]	@ (8003db0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003ce6:	f7ff ff63 	bl	8003bb0 <LL_ADC_IsEnabled>
 8003cea:	4603      	mov	r3, r0
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	bf0c      	ite	eq
 8003cf0:	2301      	moveq	r3, #1
 8003cf2:	2300      	movne	r3, #0
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d047      	beq.n	8003d8a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003cfa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003cfc:	689a      	ldr	r2, [r3, #8]
 8003cfe:	4b2d      	ldr	r3, [pc, #180]	@ (8003db4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003d00:	4013      	ands	r3, r2
 8003d02:	683a      	ldr	r2, [r7, #0]
 8003d04:	6811      	ldr	r1, [r2, #0]
 8003d06:	683a      	ldr	r2, [r7, #0]
 8003d08:	6892      	ldr	r2, [r2, #8]
 8003d0a:	430a      	orrs	r2, r1
 8003d0c:	431a      	orrs	r2, r3
 8003d0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d10:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003d12:	e03a      	b.n	8003d8a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003d14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003d1c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d1e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a1e      	ldr	r2, [pc, #120]	@ (8003da0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d004      	beq.n	8003d34 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a1d      	ldr	r2, [pc, #116]	@ (8003da4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d10e      	bne.n	8003d52 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8003d34:	481a      	ldr	r0, [pc, #104]	@ (8003da0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003d36:	f7ff ff3b 	bl	8003bb0 <LL_ADC_IsEnabled>
 8003d3a:	4604      	mov	r4, r0
 8003d3c:	4819      	ldr	r0, [pc, #100]	@ (8003da4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003d3e:	f7ff ff37 	bl	8003bb0 <LL_ADC_IsEnabled>
 8003d42:	4603      	mov	r3, r0
 8003d44:	4323      	orrs	r3, r4
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	bf0c      	ite	eq
 8003d4a:	2301      	moveq	r3, #1
 8003d4c:	2300      	movne	r3, #0
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	e008      	b.n	8003d64 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003d52:	4817      	ldr	r0, [pc, #92]	@ (8003db0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003d54:	f7ff ff2c 	bl	8003bb0 <LL_ADC_IsEnabled>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	bf0c      	ite	eq
 8003d5e:	2301      	moveq	r3, #1
 8003d60:	2300      	movne	r3, #0
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d010      	beq.n	8003d8a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003d68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d6a:	689a      	ldr	r2, [r3, #8]
 8003d6c:	4b11      	ldr	r3, [pc, #68]	@ (8003db4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003d6e:	4013      	ands	r3, r2
 8003d70:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003d72:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003d74:	e009      	b.n	8003d8a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d7a:	f043 0220 	orr.w	r2, r3, #32
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8003d88:	e000      	b.n	8003d8c <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003d8a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003d94:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	377c      	adds	r7, #124	@ 0x7c
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd90      	pop	{r4, r7, pc}
 8003da0:	40022000 	.word	0x40022000
 8003da4:	40022100 	.word	0x40022100
 8003da8:	40022300 	.word	0x40022300
 8003dac:	58026300 	.word	0x58026300
 8003db0:	58026000 	.word	0x58026000
 8003db4:	fffff0e0 	.word	0xfffff0e0

08003db8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b085      	sub	sp, #20
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f003 0307 	and.w	r3, r3, #7
 8003dc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003dc8:	4b0b      	ldr	r3, [pc, #44]	@ (8003df8 <__NVIC_SetPriorityGrouping+0x40>)
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003dce:	68ba      	ldr	r2, [r7, #8]
 8003dd0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003de0:	4b06      	ldr	r3, [pc, #24]	@ (8003dfc <__NVIC_SetPriorityGrouping+0x44>)
 8003de2:	4313      	orrs	r3, r2
 8003de4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003de6:	4a04      	ldr	r2, [pc, #16]	@ (8003df8 <__NVIC_SetPriorityGrouping+0x40>)
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	60d3      	str	r3, [r2, #12]
}
 8003dec:	bf00      	nop
 8003dee:	3714      	adds	r7, #20
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr
 8003df8:	e000ed00 	.word	0xe000ed00
 8003dfc:	05fa0000 	.word	0x05fa0000

08003e00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e00:	b480      	push	{r7}
 8003e02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e04:	4b04      	ldr	r3, [pc, #16]	@ (8003e18 <__NVIC_GetPriorityGrouping+0x18>)
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	0a1b      	lsrs	r3, r3, #8
 8003e0a:	f003 0307 	and.w	r3, r3, #7
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr
 8003e18:	e000ed00 	.word	0xe000ed00

08003e1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	4603      	mov	r3, r0
 8003e24:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003e26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	db0b      	blt.n	8003e46 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e2e:	88fb      	ldrh	r3, [r7, #6]
 8003e30:	f003 021f 	and.w	r2, r3, #31
 8003e34:	4907      	ldr	r1, [pc, #28]	@ (8003e54 <__NVIC_EnableIRQ+0x38>)
 8003e36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e3a:	095b      	lsrs	r3, r3, #5
 8003e3c:	2001      	movs	r0, #1
 8003e3e:	fa00 f202 	lsl.w	r2, r0, r2
 8003e42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003e46:	bf00      	nop
 8003e48:	370c      	adds	r7, #12
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr
 8003e52:	bf00      	nop
 8003e54:	e000e100 	.word	0xe000e100

08003e58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b083      	sub	sp, #12
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	4603      	mov	r3, r0
 8003e60:	6039      	str	r1, [r7, #0]
 8003e62:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003e64:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	db0a      	blt.n	8003e82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	b2da      	uxtb	r2, r3
 8003e70:	490c      	ldr	r1, [pc, #48]	@ (8003ea4 <__NVIC_SetPriority+0x4c>)
 8003e72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e76:	0112      	lsls	r2, r2, #4
 8003e78:	b2d2      	uxtb	r2, r2
 8003e7a:	440b      	add	r3, r1
 8003e7c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e80:	e00a      	b.n	8003e98 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	b2da      	uxtb	r2, r3
 8003e86:	4908      	ldr	r1, [pc, #32]	@ (8003ea8 <__NVIC_SetPriority+0x50>)
 8003e88:	88fb      	ldrh	r3, [r7, #6]
 8003e8a:	f003 030f 	and.w	r3, r3, #15
 8003e8e:	3b04      	subs	r3, #4
 8003e90:	0112      	lsls	r2, r2, #4
 8003e92:	b2d2      	uxtb	r2, r2
 8003e94:	440b      	add	r3, r1
 8003e96:	761a      	strb	r2, [r3, #24]
}
 8003e98:	bf00      	nop
 8003e9a:	370c      	adds	r7, #12
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr
 8003ea4:	e000e100 	.word	0xe000e100
 8003ea8:	e000ed00 	.word	0xe000ed00

08003eac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b089      	sub	sp, #36	@ 0x24
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	60f8      	str	r0, [r7, #12]
 8003eb4:	60b9      	str	r1, [r7, #8]
 8003eb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f003 0307 	and.w	r3, r3, #7
 8003ebe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	f1c3 0307 	rsb	r3, r3, #7
 8003ec6:	2b04      	cmp	r3, #4
 8003ec8:	bf28      	it	cs
 8003eca:	2304      	movcs	r3, #4
 8003ecc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	3304      	adds	r3, #4
 8003ed2:	2b06      	cmp	r3, #6
 8003ed4:	d902      	bls.n	8003edc <NVIC_EncodePriority+0x30>
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	3b03      	subs	r3, #3
 8003eda:	e000      	b.n	8003ede <NVIC_EncodePriority+0x32>
 8003edc:	2300      	movs	r3, #0
 8003ede:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ee0:	f04f 32ff 	mov.w	r2, #4294967295
 8003ee4:	69bb      	ldr	r3, [r7, #24]
 8003ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eea:	43da      	mvns	r2, r3
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	401a      	ands	r2, r3
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ef4:	f04f 31ff 	mov.w	r1, #4294967295
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	fa01 f303 	lsl.w	r3, r1, r3
 8003efe:	43d9      	mvns	r1, r3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f04:	4313      	orrs	r3, r2
         );
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3724      	adds	r7, #36	@ 0x24
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr
	...

08003f14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b082      	sub	sp, #8
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003f24:	d301      	bcc.n	8003f2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f26:	2301      	movs	r3, #1
 8003f28:	e00f      	b.n	8003f4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f2a:	4a0a      	ldr	r2, [pc, #40]	@ (8003f54 <SysTick_Config+0x40>)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	3b01      	subs	r3, #1
 8003f30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f32:	210f      	movs	r1, #15
 8003f34:	f04f 30ff 	mov.w	r0, #4294967295
 8003f38:	f7ff ff8e 	bl	8003e58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f3c:	4b05      	ldr	r3, [pc, #20]	@ (8003f54 <SysTick_Config+0x40>)
 8003f3e:	2200      	movs	r2, #0
 8003f40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f42:	4b04      	ldr	r3, [pc, #16]	@ (8003f54 <SysTick_Config+0x40>)
 8003f44:	2207      	movs	r2, #7
 8003f46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f48:	2300      	movs	r3, #0
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3708      	adds	r7, #8
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	e000e010 	.word	0xe000e010

08003f58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b082      	sub	sp, #8
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f7ff ff29 	bl	8003db8 <__NVIC_SetPriorityGrouping>
}
 8003f66:	bf00      	nop
 8003f68:	3708      	adds	r7, #8
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}

08003f6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f6e:	b580      	push	{r7, lr}
 8003f70:	b086      	sub	sp, #24
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	4603      	mov	r3, r0
 8003f76:	60b9      	str	r1, [r7, #8]
 8003f78:	607a      	str	r2, [r7, #4]
 8003f7a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003f7c:	f7ff ff40 	bl	8003e00 <__NVIC_GetPriorityGrouping>
 8003f80:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	68b9      	ldr	r1, [r7, #8]
 8003f86:	6978      	ldr	r0, [r7, #20]
 8003f88:	f7ff ff90 	bl	8003eac <NVIC_EncodePriority>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003f92:	4611      	mov	r1, r2
 8003f94:	4618      	mov	r0, r3
 8003f96:	f7ff ff5f 	bl	8003e58 <__NVIC_SetPriority>
}
 8003f9a:	bf00      	nop
 8003f9c:	3718      	adds	r7, #24
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}

08003fa2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fa2:	b580      	push	{r7, lr}
 8003fa4:	b082      	sub	sp, #8
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	4603      	mov	r3, r0
 8003faa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003fac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f7ff ff33 	bl	8003e1c <__NVIC_EnableIRQ>
}
 8003fb6:	bf00      	nop
 8003fb8:	3708      	adds	r7, #8
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}

08003fbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003fbe:	b580      	push	{r7, lr}
 8003fc0:	b082      	sub	sp, #8
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f7ff ffa4 	bl	8003f14 <SysTick_Config>
 8003fcc:	4603      	mov	r3, r0
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3708      	adds	r7, #8
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
	...

08003fd8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8003fdc:	f3bf 8f5f 	dmb	sy
}
 8003fe0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003fe2:	4b07      	ldr	r3, [pc, #28]	@ (8004000 <HAL_MPU_Disable+0x28>)
 8003fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fe6:	4a06      	ldr	r2, [pc, #24]	@ (8004000 <HAL_MPU_Disable+0x28>)
 8003fe8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003fec:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8003fee:	4b05      	ldr	r3, [pc, #20]	@ (8004004 <HAL_MPU_Disable+0x2c>)
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	605a      	str	r2, [r3, #4]
}
 8003ff4:	bf00      	nop
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr
 8003ffe:	bf00      	nop
 8004000:	e000ed00 	.word	0xe000ed00
 8004004:	e000ed90 	.word	0xe000ed90

08004008 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8004010:	4a0b      	ldr	r2, [pc, #44]	@ (8004040 <HAL_MPU_Enable+0x38>)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f043 0301 	orr.w	r3, r3, #1
 8004018:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800401a:	4b0a      	ldr	r3, [pc, #40]	@ (8004044 <HAL_MPU_Enable+0x3c>)
 800401c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800401e:	4a09      	ldr	r2, [pc, #36]	@ (8004044 <HAL_MPU_Enable+0x3c>)
 8004020:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004024:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8004026:	f3bf 8f4f 	dsb	sy
}
 800402a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800402c:	f3bf 8f6f 	isb	sy
}
 8004030:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8004032:	bf00      	nop
 8004034:	370c      	adds	r7, #12
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr
 800403e:	bf00      	nop
 8004040:	e000ed90 	.word	0xe000ed90
 8004044:	e000ed00 	.word	0xe000ed00

08004048 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8004048:	b480      	push	{r7}
 800404a:	b083      	sub	sp, #12
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	785a      	ldrb	r2, [r3, #1]
 8004054:	4b1b      	ldr	r3, [pc, #108]	@ (80040c4 <HAL_MPU_ConfigRegion+0x7c>)
 8004056:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8004058:	4b1a      	ldr	r3, [pc, #104]	@ (80040c4 <HAL_MPU_ConfigRegion+0x7c>)
 800405a:	691b      	ldr	r3, [r3, #16]
 800405c:	4a19      	ldr	r2, [pc, #100]	@ (80040c4 <HAL_MPU_ConfigRegion+0x7c>)
 800405e:	f023 0301 	bic.w	r3, r3, #1
 8004062:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8004064:	4a17      	ldr	r2, [pc, #92]	@ (80040c4 <HAL_MPU_ConfigRegion+0x7c>)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	7b1b      	ldrb	r3, [r3, #12]
 8004070:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	7adb      	ldrb	r3, [r3, #11]
 8004076:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004078:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	7a9b      	ldrb	r3, [r3, #10]
 800407e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004080:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	7b5b      	ldrb	r3, [r3, #13]
 8004086:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004088:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	7b9b      	ldrb	r3, [r3, #14]
 800408e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004090:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	7bdb      	ldrb	r3, [r3, #15]
 8004096:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004098:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	7a5b      	ldrb	r3, [r3, #9]
 800409e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80040a0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	7a1b      	ldrb	r3, [r3, #8]
 80040a6:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80040a8:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	7812      	ldrb	r2, [r2, #0]
 80040ae:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80040b0:	4a04      	ldr	r2, [pc, #16]	@ (80040c4 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80040b2:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80040b4:	6113      	str	r3, [r2, #16]
}
 80040b6:	bf00      	nop
 80040b8:	370c      	adds	r7, #12
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr
 80040c2:	bf00      	nop
 80040c4:	e000ed90 	.word	0xe000ed90

080040c8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b086      	sub	sp, #24
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80040d0:	f7fe fb4a 	bl	8002768 <HAL_GetTick>
 80040d4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d101      	bne.n	80040e0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	e316      	b.n	800470e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a66      	ldr	r2, [pc, #408]	@ (8004280 <HAL_DMA_Init+0x1b8>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d04a      	beq.n	8004180 <HAL_DMA_Init+0xb8>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a65      	ldr	r2, [pc, #404]	@ (8004284 <HAL_DMA_Init+0x1bc>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d045      	beq.n	8004180 <HAL_DMA_Init+0xb8>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a63      	ldr	r2, [pc, #396]	@ (8004288 <HAL_DMA_Init+0x1c0>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d040      	beq.n	8004180 <HAL_DMA_Init+0xb8>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a62      	ldr	r2, [pc, #392]	@ (800428c <HAL_DMA_Init+0x1c4>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d03b      	beq.n	8004180 <HAL_DMA_Init+0xb8>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a60      	ldr	r2, [pc, #384]	@ (8004290 <HAL_DMA_Init+0x1c8>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d036      	beq.n	8004180 <HAL_DMA_Init+0xb8>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a5f      	ldr	r2, [pc, #380]	@ (8004294 <HAL_DMA_Init+0x1cc>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d031      	beq.n	8004180 <HAL_DMA_Init+0xb8>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a5d      	ldr	r2, [pc, #372]	@ (8004298 <HAL_DMA_Init+0x1d0>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d02c      	beq.n	8004180 <HAL_DMA_Init+0xb8>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a5c      	ldr	r2, [pc, #368]	@ (800429c <HAL_DMA_Init+0x1d4>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d027      	beq.n	8004180 <HAL_DMA_Init+0xb8>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a5a      	ldr	r2, [pc, #360]	@ (80042a0 <HAL_DMA_Init+0x1d8>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d022      	beq.n	8004180 <HAL_DMA_Init+0xb8>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a59      	ldr	r2, [pc, #356]	@ (80042a4 <HAL_DMA_Init+0x1dc>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d01d      	beq.n	8004180 <HAL_DMA_Init+0xb8>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a57      	ldr	r2, [pc, #348]	@ (80042a8 <HAL_DMA_Init+0x1e0>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d018      	beq.n	8004180 <HAL_DMA_Init+0xb8>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a56      	ldr	r2, [pc, #344]	@ (80042ac <HAL_DMA_Init+0x1e4>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d013      	beq.n	8004180 <HAL_DMA_Init+0xb8>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a54      	ldr	r2, [pc, #336]	@ (80042b0 <HAL_DMA_Init+0x1e8>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d00e      	beq.n	8004180 <HAL_DMA_Init+0xb8>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a53      	ldr	r2, [pc, #332]	@ (80042b4 <HAL_DMA_Init+0x1ec>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d009      	beq.n	8004180 <HAL_DMA_Init+0xb8>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a51      	ldr	r2, [pc, #324]	@ (80042b8 <HAL_DMA_Init+0x1f0>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d004      	beq.n	8004180 <HAL_DMA_Init+0xb8>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a50      	ldr	r2, [pc, #320]	@ (80042bc <HAL_DMA_Init+0x1f4>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d101      	bne.n	8004184 <HAL_DMA_Init+0xbc>
 8004180:	2301      	movs	r3, #1
 8004182:	e000      	b.n	8004186 <HAL_DMA_Init+0xbe>
 8004184:	2300      	movs	r3, #0
 8004186:	2b00      	cmp	r3, #0
 8004188:	f000 813b 	beq.w	8004402 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2202      	movs	r2, #2
 8004190:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2200      	movs	r2, #0
 8004198:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a37      	ldr	r2, [pc, #220]	@ (8004280 <HAL_DMA_Init+0x1b8>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d04a      	beq.n	800423c <HAL_DMA_Init+0x174>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a36      	ldr	r2, [pc, #216]	@ (8004284 <HAL_DMA_Init+0x1bc>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d045      	beq.n	800423c <HAL_DMA_Init+0x174>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a34      	ldr	r2, [pc, #208]	@ (8004288 <HAL_DMA_Init+0x1c0>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d040      	beq.n	800423c <HAL_DMA_Init+0x174>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a33      	ldr	r2, [pc, #204]	@ (800428c <HAL_DMA_Init+0x1c4>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d03b      	beq.n	800423c <HAL_DMA_Init+0x174>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a31      	ldr	r2, [pc, #196]	@ (8004290 <HAL_DMA_Init+0x1c8>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d036      	beq.n	800423c <HAL_DMA_Init+0x174>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a30      	ldr	r2, [pc, #192]	@ (8004294 <HAL_DMA_Init+0x1cc>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d031      	beq.n	800423c <HAL_DMA_Init+0x174>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a2e      	ldr	r2, [pc, #184]	@ (8004298 <HAL_DMA_Init+0x1d0>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d02c      	beq.n	800423c <HAL_DMA_Init+0x174>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a2d      	ldr	r2, [pc, #180]	@ (800429c <HAL_DMA_Init+0x1d4>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d027      	beq.n	800423c <HAL_DMA_Init+0x174>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a2b      	ldr	r2, [pc, #172]	@ (80042a0 <HAL_DMA_Init+0x1d8>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d022      	beq.n	800423c <HAL_DMA_Init+0x174>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a2a      	ldr	r2, [pc, #168]	@ (80042a4 <HAL_DMA_Init+0x1dc>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d01d      	beq.n	800423c <HAL_DMA_Init+0x174>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a28      	ldr	r2, [pc, #160]	@ (80042a8 <HAL_DMA_Init+0x1e0>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d018      	beq.n	800423c <HAL_DMA_Init+0x174>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a27      	ldr	r2, [pc, #156]	@ (80042ac <HAL_DMA_Init+0x1e4>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d013      	beq.n	800423c <HAL_DMA_Init+0x174>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a25      	ldr	r2, [pc, #148]	@ (80042b0 <HAL_DMA_Init+0x1e8>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d00e      	beq.n	800423c <HAL_DMA_Init+0x174>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a24      	ldr	r2, [pc, #144]	@ (80042b4 <HAL_DMA_Init+0x1ec>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d009      	beq.n	800423c <HAL_DMA_Init+0x174>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a22      	ldr	r2, [pc, #136]	@ (80042b8 <HAL_DMA_Init+0x1f0>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d004      	beq.n	800423c <HAL_DMA_Init+0x174>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a21      	ldr	r2, [pc, #132]	@ (80042bc <HAL_DMA_Init+0x1f4>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d108      	bne.n	800424e <HAL_DMA_Init+0x186>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f022 0201 	bic.w	r2, r2, #1
 800424a:	601a      	str	r2, [r3, #0]
 800424c:	e007      	b.n	800425e <HAL_DMA_Init+0x196>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f022 0201 	bic.w	r2, r2, #1
 800425c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800425e:	e02f      	b.n	80042c0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004260:	f7fe fa82 	bl	8002768 <HAL_GetTick>
 8004264:	4602      	mov	r2, r0
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	2b05      	cmp	r3, #5
 800426c:	d928      	bls.n	80042c0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2220      	movs	r2, #32
 8004272:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2203      	movs	r2, #3
 8004278:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	e246      	b.n	800470e <HAL_DMA_Init+0x646>
 8004280:	40020010 	.word	0x40020010
 8004284:	40020028 	.word	0x40020028
 8004288:	40020040 	.word	0x40020040
 800428c:	40020058 	.word	0x40020058
 8004290:	40020070 	.word	0x40020070
 8004294:	40020088 	.word	0x40020088
 8004298:	400200a0 	.word	0x400200a0
 800429c:	400200b8 	.word	0x400200b8
 80042a0:	40020410 	.word	0x40020410
 80042a4:	40020428 	.word	0x40020428
 80042a8:	40020440 	.word	0x40020440
 80042ac:	40020458 	.word	0x40020458
 80042b0:	40020470 	.word	0x40020470
 80042b4:	40020488 	.word	0x40020488
 80042b8:	400204a0 	.word	0x400204a0
 80042bc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 0301 	and.w	r3, r3, #1
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d1c8      	bne.n	8004260 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80042d6:	697a      	ldr	r2, [r7, #20]
 80042d8:	4b83      	ldr	r3, [pc, #524]	@ (80044e8 <HAL_DMA_Init+0x420>)
 80042da:	4013      	ands	r3, r2
 80042dc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80042e6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	691b      	ldr	r3, [r3, #16]
 80042ec:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042f2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	699b      	ldr	r3, [r3, #24]
 80042f8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042fe:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6a1b      	ldr	r3, [r3, #32]
 8004304:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004306:	697a      	ldr	r2, [r7, #20]
 8004308:	4313      	orrs	r3, r2
 800430a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004310:	2b04      	cmp	r3, #4
 8004312:	d107      	bne.n	8004324 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800431c:	4313      	orrs	r3, r2
 800431e:	697a      	ldr	r2, [r7, #20]
 8004320:	4313      	orrs	r3, r2
 8004322:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004324:	4b71      	ldr	r3, [pc, #452]	@ (80044ec <HAL_DMA_Init+0x424>)
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	4b71      	ldr	r3, [pc, #452]	@ (80044f0 <HAL_DMA_Init+0x428>)
 800432a:	4013      	ands	r3, r2
 800432c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004330:	d328      	bcc.n	8004384 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	2b28      	cmp	r3, #40	@ 0x28
 8004338:	d903      	bls.n	8004342 <HAL_DMA_Init+0x27a>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	2b2e      	cmp	r3, #46	@ 0x2e
 8004340:	d917      	bls.n	8004372 <HAL_DMA_Init+0x2aa>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	2b3e      	cmp	r3, #62	@ 0x3e
 8004348:	d903      	bls.n	8004352 <HAL_DMA_Init+0x28a>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	2b42      	cmp	r3, #66	@ 0x42
 8004350:	d90f      	bls.n	8004372 <HAL_DMA_Init+0x2aa>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	2b46      	cmp	r3, #70	@ 0x46
 8004358:	d903      	bls.n	8004362 <HAL_DMA_Init+0x29a>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	2b48      	cmp	r3, #72	@ 0x48
 8004360:	d907      	bls.n	8004372 <HAL_DMA_Init+0x2aa>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	2b4e      	cmp	r3, #78	@ 0x4e
 8004368:	d905      	bls.n	8004376 <HAL_DMA_Init+0x2ae>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	2b52      	cmp	r3, #82	@ 0x52
 8004370:	d801      	bhi.n	8004376 <HAL_DMA_Init+0x2ae>
 8004372:	2301      	movs	r3, #1
 8004374:	e000      	b.n	8004378 <HAL_DMA_Init+0x2b0>
 8004376:	2300      	movs	r3, #0
 8004378:	2b00      	cmp	r3, #0
 800437a:	d003      	beq.n	8004384 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004382:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	697a      	ldr	r2, [r7, #20]
 800438a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	695b      	ldr	r3, [r3, #20]
 8004392:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	f023 0307 	bic.w	r3, r3, #7
 800439a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043a0:	697a      	ldr	r2, [r7, #20]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043aa:	2b04      	cmp	r3, #4
 80043ac:	d117      	bne.n	80043de <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043b2:	697a      	ldr	r2, [r7, #20]
 80043b4:	4313      	orrs	r3, r2
 80043b6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d00e      	beq.n	80043de <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f002 fb4d 	bl	8006a60 <DMA_CheckFifoParam>
 80043c6:	4603      	mov	r3, r0
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d008      	beq.n	80043de <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2240      	movs	r2, #64	@ 0x40
 80043d0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2201      	movs	r2, #1
 80043d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e197      	b.n	800470e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	697a      	ldr	r2, [r7, #20]
 80043e4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f002 fa88 	bl	80068fc <DMA_CalcBaseAndBitshift>
 80043ec:	4603      	mov	r3, r0
 80043ee:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043f4:	f003 031f 	and.w	r3, r3, #31
 80043f8:	223f      	movs	r2, #63	@ 0x3f
 80043fa:	409a      	lsls	r2, r3
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	609a      	str	r2, [r3, #8]
 8004400:	e0cd      	b.n	800459e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a3b      	ldr	r2, [pc, #236]	@ (80044f4 <HAL_DMA_Init+0x42c>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d022      	beq.n	8004452 <HAL_DMA_Init+0x38a>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a39      	ldr	r2, [pc, #228]	@ (80044f8 <HAL_DMA_Init+0x430>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d01d      	beq.n	8004452 <HAL_DMA_Init+0x38a>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a38      	ldr	r2, [pc, #224]	@ (80044fc <HAL_DMA_Init+0x434>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d018      	beq.n	8004452 <HAL_DMA_Init+0x38a>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a36      	ldr	r2, [pc, #216]	@ (8004500 <HAL_DMA_Init+0x438>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d013      	beq.n	8004452 <HAL_DMA_Init+0x38a>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a35      	ldr	r2, [pc, #212]	@ (8004504 <HAL_DMA_Init+0x43c>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d00e      	beq.n	8004452 <HAL_DMA_Init+0x38a>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a33      	ldr	r2, [pc, #204]	@ (8004508 <HAL_DMA_Init+0x440>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d009      	beq.n	8004452 <HAL_DMA_Init+0x38a>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a32      	ldr	r2, [pc, #200]	@ (800450c <HAL_DMA_Init+0x444>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d004      	beq.n	8004452 <HAL_DMA_Init+0x38a>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a30      	ldr	r2, [pc, #192]	@ (8004510 <HAL_DMA_Init+0x448>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d101      	bne.n	8004456 <HAL_DMA_Init+0x38e>
 8004452:	2301      	movs	r3, #1
 8004454:	e000      	b.n	8004458 <HAL_DMA_Init+0x390>
 8004456:	2300      	movs	r3, #0
 8004458:	2b00      	cmp	r3, #0
 800445a:	f000 8097 	beq.w	800458c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a24      	ldr	r2, [pc, #144]	@ (80044f4 <HAL_DMA_Init+0x42c>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d021      	beq.n	80044ac <HAL_DMA_Init+0x3e4>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a22      	ldr	r2, [pc, #136]	@ (80044f8 <HAL_DMA_Init+0x430>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d01c      	beq.n	80044ac <HAL_DMA_Init+0x3e4>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a21      	ldr	r2, [pc, #132]	@ (80044fc <HAL_DMA_Init+0x434>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d017      	beq.n	80044ac <HAL_DMA_Init+0x3e4>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a1f      	ldr	r2, [pc, #124]	@ (8004500 <HAL_DMA_Init+0x438>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d012      	beq.n	80044ac <HAL_DMA_Init+0x3e4>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a1e      	ldr	r2, [pc, #120]	@ (8004504 <HAL_DMA_Init+0x43c>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d00d      	beq.n	80044ac <HAL_DMA_Init+0x3e4>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a1c      	ldr	r2, [pc, #112]	@ (8004508 <HAL_DMA_Init+0x440>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d008      	beq.n	80044ac <HAL_DMA_Init+0x3e4>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a1b      	ldr	r2, [pc, #108]	@ (800450c <HAL_DMA_Init+0x444>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d003      	beq.n	80044ac <HAL_DMA_Init+0x3e4>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a19      	ldr	r2, [pc, #100]	@ (8004510 <HAL_DMA_Init+0x448>)
 80044aa:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2202      	movs	r2, #2
 80044b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2200      	movs	r2, #0
 80044b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80044c4:	697a      	ldr	r2, [r7, #20]
 80044c6:	4b13      	ldr	r3, [pc, #76]	@ (8004514 <HAL_DMA_Init+0x44c>)
 80044c8:	4013      	ands	r3, r2
 80044ca:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	2b40      	cmp	r3, #64	@ 0x40
 80044d2:	d021      	beq.n	8004518 <HAL_DMA_Init+0x450>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	2b80      	cmp	r3, #128	@ 0x80
 80044da:	d102      	bne.n	80044e2 <HAL_DMA_Init+0x41a>
 80044dc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80044e0:	e01b      	b.n	800451a <HAL_DMA_Init+0x452>
 80044e2:	2300      	movs	r3, #0
 80044e4:	e019      	b.n	800451a <HAL_DMA_Init+0x452>
 80044e6:	bf00      	nop
 80044e8:	fe10803f 	.word	0xfe10803f
 80044ec:	5c001000 	.word	0x5c001000
 80044f0:	ffff0000 	.word	0xffff0000
 80044f4:	58025408 	.word	0x58025408
 80044f8:	5802541c 	.word	0x5802541c
 80044fc:	58025430 	.word	0x58025430
 8004500:	58025444 	.word	0x58025444
 8004504:	58025458 	.word	0x58025458
 8004508:	5802546c 	.word	0x5802546c
 800450c:	58025480 	.word	0x58025480
 8004510:	58025494 	.word	0x58025494
 8004514:	fffe000f 	.word	0xfffe000f
 8004518:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	68d2      	ldr	r2, [r2, #12]
 800451e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004520:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	691b      	ldr	r3, [r3, #16]
 8004526:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004528:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	695b      	ldr	r3, [r3, #20]
 800452e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004530:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	699b      	ldr	r3, [r3, #24]
 8004536:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004538:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	69db      	ldr	r3, [r3, #28]
 800453e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004540:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a1b      	ldr	r3, [r3, #32]
 8004546:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004548:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800454a:	697a      	ldr	r2, [r7, #20]
 800454c:	4313      	orrs	r3, r2
 800454e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	697a      	ldr	r2, [r7, #20]
 8004556:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	461a      	mov	r2, r3
 800455e:	4b6e      	ldr	r3, [pc, #440]	@ (8004718 <HAL_DMA_Init+0x650>)
 8004560:	4413      	add	r3, r2
 8004562:	4a6e      	ldr	r2, [pc, #440]	@ (800471c <HAL_DMA_Init+0x654>)
 8004564:	fba2 2303 	umull	r2, r3, r2, r3
 8004568:	091b      	lsrs	r3, r3, #4
 800456a:	009a      	lsls	r2, r3, #2
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f002 f9c3 	bl	80068fc <DMA_CalcBaseAndBitshift>
 8004576:	4603      	mov	r3, r0
 8004578:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800457e:	f003 031f 	and.w	r3, r3, #31
 8004582:	2201      	movs	r2, #1
 8004584:	409a      	lsls	r2, r3
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	605a      	str	r2, [r3, #4]
 800458a:	e008      	b.n	800459e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2240      	movs	r2, #64	@ 0x40
 8004590:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2203      	movs	r2, #3
 8004596:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e0b7      	b.n	800470e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a5f      	ldr	r2, [pc, #380]	@ (8004720 <HAL_DMA_Init+0x658>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d072      	beq.n	800468e <HAL_DMA_Init+0x5c6>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a5d      	ldr	r2, [pc, #372]	@ (8004724 <HAL_DMA_Init+0x65c>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d06d      	beq.n	800468e <HAL_DMA_Init+0x5c6>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a5c      	ldr	r2, [pc, #368]	@ (8004728 <HAL_DMA_Init+0x660>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d068      	beq.n	800468e <HAL_DMA_Init+0x5c6>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a5a      	ldr	r2, [pc, #360]	@ (800472c <HAL_DMA_Init+0x664>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d063      	beq.n	800468e <HAL_DMA_Init+0x5c6>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a59      	ldr	r2, [pc, #356]	@ (8004730 <HAL_DMA_Init+0x668>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d05e      	beq.n	800468e <HAL_DMA_Init+0x5c6>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a57      	ldr	r2, [pc, #348]	@ (8004734 <HAL_DMA_Init+0x66c>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d059      	beq.n	800468e <HAL_DMA_Init+0x5c6>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a56      	ldr	r2, [pc, #344]	@ (8004738 <HAL_DMA_Init+0x670>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d054      	beq.n	800468e <HAL_DMA_Init+0x5c6>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a54      	ldr	r2, [pc, #336]	@ (800473c <HAL_DMA_Init+0x674>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d04f      	beq.n	800468e <HAL_DMA_Init+0x5c6>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a53      	ldr	r2, [pc, #332]	@ (8004740 <HAL_DMA_Init+0x678>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d04a      	beq.n	800468e <HAL_DMA_Init+0x5c6>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a51      	ldr	r2, [pc, #324]	@ (8004744 <HAL_DMA_Init+0x67c>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d045      	beq.n	800468e <HAL_DMA_Init+0x5c6>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a50      	ldr	r2, [pc, #320]	@ (8004748 <HAL_DMA_Init+0x680>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d040      	beq.n	800468e <HAL_DMA_Init+0x5c6>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a4e      	ldr	r2, [pc, #312]	@ (800474c <HAL_DMA_Init+0x684>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d03b      	beq.n	800468e <HAL_DMA_Init+0x5c6>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a4d      	ldr	r2, [pc, #308]	@ (8004750 <HAL_DMA_Init+0x688>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d036      	beq.n	800468e <HAL_DMA_Init+0x5c6>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a4b      	ldr	r2, [pc, #300]	@ (8004754 <HAL_DMA_Init+0x68c>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d031      	beq.n	800468e <HAL_DMA_Init+0x5c6>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a4a      	ldr	r2, [pc, #296]	@ (8004758 <HAL_DMA_Init+0x690>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d02c      	beq.n	800468e <HAL_DMA_Init+0x5c6>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a48      	ldr	r2, [pc, #288]	@ (800475c <HAL_DMA_Init+0x694>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d027      	beq.n	800468e <HAL_DMA_Init+0x5c6>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a47      	ldr	r2, [pc, #284]	@ (8004760 <HAL_DMA_Init+0x698>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d022      	beq.n	800468e <HAL_DMA_Init+0x5c6>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a45      	ldr	r2, [pc, #276]	@ (8004764 <HAL_DMA_Init+0x69c>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d01d      	beq.n	800468e <HAL_DMA_Init+0x5c6>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a44      	ldr	r2, [pc, #272]	@ (8004768 <HAL_DMA_Init+0x6a0>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d018      	beq.n	800468e <HAL_DMA_Init+0x5c6>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a42      	ldr	r2, [pc, #264]	@ (800476c <HAL_DMA_Init+0x6a4>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d013      	beq.n	800468e <HAL_DMA_Init+0x5c6>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a41      	ldr	r2, [pc, #260]	@ (8004770 <HAL_DMA_Init+0x6a8>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d00e      	beq.n	800468e <HAL_DMA_Init+0x5c6>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a3f      	ldr	r2, [pc, #252]	@ (8004774 <HAL_DMA_Init+0x6ac>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d009      	beq.n	800468e <HAL_DMA_Init+0x5c6>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a3e      	ldr	r2, [pc, #248]	@ (8004778 <HAL_DMA_Init+0x6b0>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d004      	beq.n	800468e <HAL_DMA_Init+0x5c6>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a3c      	ldr	r2, [pc, #240]	@ (800477c <HAL_DMA_Init+0x6b4>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d101      	bne.n	8004692 <HAL_DMA_Init+0x5ca>
 800468e:	2301      	movs	r3, #1
 8004690:	e000      	b.n	8004694 <HAL_DMA_Init+0x5cc>
 8004692:	2300      	movs	r3, #0
 8004694:	2b00      	cmp	r3, #0
 8004696:	d032      	beq.n	80046fe <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f002 fa5d 	bl	8006b58 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	2b80      	cmp	r3, #128	@ 0x80
 80046a4:	d102      	bne.n	80046ac <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	685a      	ldr	r2, [r3, #4]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046b4:	b2d2      	uxtb	r2, r2
 80046b6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80046c0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d010      	beq.n	80046ec <HAL_DMA_Init+0x624>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	2b08      	cmp	r3, #8
 80046d0:	d80c      	bhi.n	80046ec <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f002 fada 	bl	8006c8c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046dc:	2200      	movs	r2, #0
 80046de:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046e4:	687a      	ldr	r2, [r7, #4]
 80046e6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80046e8:	605a      	str	r2, [r3, #4]
 80046ea:	e008      	b.n	80046fe <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2201      	movs	r2, #1
 8004708:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800470c:	2300      	movs	r3, #0
}
 800470e:	4618      	mov	r0, r3
 8004710:	3718      	adds	r7, #24
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	a7fdabf8 	.word	0xa7fdabf8
 800471c:	cccccccd 	.word	0xcccccccd
 8004720:	40020010 	.word	0x40020010
 8004724:	40020028 	.word	0x40020028
 8004728:	40020040 	.word	0x40020040
 800472c:	40020058 	.word	0x40020058
 8004730:	40020070 	.word	0x40020070
 8004734:	40020088 	.word	0x40020088
 8004738:	400200a0 	.word	0x400200a0
 800473c:	400200b8 	.word	0x400200b8
 8004740:	40020410 	.word	0x40020410
 8004744:	40020428 	.word	0x40020428
 8004748:	40020440 	.word	0x40020440
 800474c:	40020458 	.word	0x40020458
 8004750:	40020470 	.word	0x40020470
 8004754:	40020488 	.word	0x40020488
 8004758:	400204a0 	.word	0x400204a0
 800475c:	400204b8 	.word	0x400204b8
 8004760:	58025408 	.word	0x58025408
 8004764:	5802541c 	.word	0x5802541c
 8004768:	58025430 	.word	0x58025430
 800476c:	58025444 	.word	0x58025444
 8004770:	58025458 	.word	0x58025458
 8004774:	5802546c 	.word	0x5802546c
 8004778:	58025480 	.word	0x58025480
 800477c:	58025494 	.word	0x58025494

08004780 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b086      	sub	sp, #24
 8004784:	af00      	add	r7, sp, #0
 8004786:	60f8      	str	r0, [r7, #12]
 8004788:	60b9      	str	r1, [r7, #8]
 800478a:	607a      	str	r2, [r7, #4]
 800478c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800478e:	2300      	movs	r3, #0
 8004790:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d101      	bne.n	800479c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	e226      	b.n	8004bea <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d101      	bne.n	80047aa <HAL_DMA_Start_IT+0x2a>
 80047a6:	2302      	movs	r3, #2
 80047a8:	e21f      	b.n	8004bea <HAL_DMA_Start_IT+0x46a>
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2201      	movs	r2, #1
 80047ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	f040 820a 	bne.w	8004bd4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2202      	movs	r2, #2
 80047c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2200      	movs	r2, #0
 80047cc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a68      	ldr	r2, [pc, #416]	@ (8004974 <HAL_DMA_Start_IT+0x1f4>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d04a      	beq.n	800486e <HAL_DMA_Start_IT+0xee>
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a66      	ldr	r2, [pc, #408]	@ (8004978 <HAL_DMA_Start_IT+0x1f8>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d045      	beq.n	800486e <HAL_DMA_Start_IT+0xee>
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a65      	ldr	r2, [pc, #404]	@ (800497c <HAL_DMA_Start_IT+0x1fc>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d040      	beq.n	800486e <HAL_DMA_Start_IT+0xee>
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a63      	ldr	r2, [pc, #396]	@ (8004980 <HAL_DMA_Start_IT+0x200>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d03b      	beq.n	800486e <HAL_DMA_Start_IT+0xee>
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a62      	ldr	r2, [pc, #392]	@ (8004984 <HAL_DMA_Start_IT+0x204>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d036      	beq.n	800486e <HAL_DMA_Start_IT+0xee>
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a60      	ldr	r2, [pc, #384]	@ (8004988 <HAL_DMA_Start_IT+0x208>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d031      	beq.n	800486e <HAL_DMA_Start_IT+0xee>
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a5f      	ldr	r2, [pc, #380]	@ (800498c <HAL_DMA_Start_IT+0x20c>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d02c      	beq.n	800486e <HAL_DMA_Start_IT+0xee>
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a5d      	ldr	r2, [pc, #372]	@ (8004990 <HAL_DMA_Start_IT+0x210>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d027      	beq.n	800486e <HAL_DMA_Start_IT+0xee>
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a5c      	ldr	r2, [pc, #368]	@ (8004994 <HAL_DMA_Start_IT+0x214>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d022      	beq.n	800486e <HAL_DMA_Start_IT+0xee>
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a5a      	ldr	r2, [pc, #360]	@ (8004998 <HAL_DMA_Start_IT+0x218>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d01d      	beq.n	800486e <HAL_DMA_Start_IT+0xee>
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a59      	ldr	r2, [pc, #356]	@ (800499c <HAL_DMA_Start_IT+0x21c>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d018      	beq.n	800486e <HAL_DMA_Start_IT+0xee>
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a57      	ldr	r2, [pc, #348]	@ (80049a0 <HAL_DMA_Start_IT+0x220>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d013      	beq.n	800486e <HAL_DMA_Start_IT+0xee>
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a56      	ldr	r2, [pc, #344]	@ (80049a4 <HAL_DMA_Start_IT+0x224>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d00e      	beq.n	800486e <HAL_DMA_Start_IT+0xee>
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a54      	ldr	r2, [pc, #336]	@ (80049a8 <HAL_DMA_Start_IT+0x228>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d009      	beq.n	800486e <HAL_DMA_Start_IT+0xee>
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a53      	ldr	r2, [pc, #332]	@ (80049ac <HAL_DMA_Start_IT+0x22c>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d004      	beq.n	800486e <HAL_DMA_Start_IT+0xee>
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a51      	ldr	r2, [pc, #324]	@ (80049b0 <HAL_DMA_Start_IT+0x230>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d108      	bne.n	8004880 <HAL_DMA_Start_IT+0x100>
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f022 0201 	bic.w	r2, r2, #1
 800487c:	601a      	str	r2, [r3, #0]
 800487e:	e007      	b.n	8004890 <HAL_DMA_Start_IT+0x110>
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f022 0201 	bic.w	r2, r2, #1
 800488e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	68b9      	ldr	r1, [r7, #8]
 8004896:	68f8      	ldr	r0, [r7, #12]
 8004898:	f001 fe84 	bl	80065a4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a34      	ldr	r2, [pc, #208]	@ (8004974 <HAL_DMA_Start_IT+0x1f4>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d04a      	beq.n	800493c <HAL_DMA_Start_IT+0x1bc>
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a33      	ldr	r2, [pc, #204]	@ (8004978 <HAL_DMA_Start_IT+0x1f8>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d045      	beq.n	800493c <HAL_DMA_Start_IT+0x1bc>
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a31      	ldr	r2, [pc, #196]	@ (800497c <HAL_DMA_Start_IT+0x1fc>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d040      	beq.n	800493c <HAL_DMA_Start_IT+0x1bc>
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a30      	ldr	r2, [pc, #192]	@ (8004980 <HAL_DMA_Start_IT+0x200>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d03b      	beq.n	800493c <HAL_DMA_Start_IT+0x1bc>
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a2e      	ldr	r2, [pc, #184]	@ (8004984 <HAL_DMA_Start_IT+0x204>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d036      	beq.n	800493c <HAL_DMA_Start_IT+0x1bc>
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a2d      	ldr	r2, [pc, #180]	@ (8004988 <HAL_DMA_Start_IT+0x208>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d031      	beq.n	800493c <HAL_DMA_Start_IT+0x1bc>
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a2b      	ldr	r2, [pc, #172]	@ (800498c <HAL_DMA_Start_IT+0x20c>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d02c      	beq.n	800493c <HAL_DMA_Start_IT+0x1bc>
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a2a      	ldr	r2, [pc, #168]	@ (8004990 <HAL_DMA_Start_IT+0x210>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d027      	beq.n	800493c <HAL_DMA_Start_IT+0x1bc>
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a28      	ldr	r2, [pc, #160]	@ (8004994 <HAL_DMA_Start_IT+0x214>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d022      	beq.n	800493c <HAL_DMA_Start_IT+0x1bc>
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a27      	ldr	r2, [pc, #156]	@ (8004998 <HAL_DMA_Start_IT+0x218>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d01d      	beq.n	800493c <HAL_DMA_Start_IT+0x1bc>
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a25      	ldr	r2, [pc, #148]	@ (800499c <HAL_DMA_Start_IT+0x21c>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d018      	beq.n	800493c <HAL_DMA_Start_IT+0x1bc>
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a24      	ldr	r2, [pc, #144]	@ (80049a0 <HAL_DMA_Start_IT+0x220>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d013      	beq.n	800493c <HAL_DMA_Start_IT+0x1bc>
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a22      	ldr	r2, [pc, #136]	@ (80049a4 <HAL_DMA_Start_IT+0x224>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d00e      	beq.n	800493c <HAL_DMA_Start_IT+0x1bc>
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a21      	ldr	r2, [pc, #132]	@ (80049a8 <HAL_DMA_Start_IT+0x228>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d009      	beq.n	800493c <HAL_DMA_Start_IT+0x1bc>
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a1f      	ldr	r2, [pc, #124]	@ (80049ac <HAL_DMA_Start_IT+0x22c>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d004      	beq.n	800493c <HAL_DMA_Start_IT+0x1bc>
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a1e      	ldr	r2, [pc, #120]	@ (80049b0 <HAL_DMA_Start_IT+0x230>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d101      	bne.n	8004940 <HAL_DMA_Start_IT+0x1c0>
 800493c:	2301      	movs	r3, #1
 800493e:	e000      	b.n	8004942 <HAL_DMA_Start_IT+0x1c2>
 8004940:	2300      	movs	r3, #0
 8004942:	2b00      	cmp	r3, #0
 8004944:	d036      	beq.n	80049b4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f023 021e 	bic.w	r2, r3, #30
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f042 0216 	orr.w	r2, r2, #22
 8004958:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800495e:	2b00      	cmp	r3, #0
 8004960:	d03e      	beq.n	80049e0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f042 0208 	orr.w	r2, r2, #8
 8004970:	601a      	str	r2, [r3, #0]
 8004972:	e035      	b.n	80049e0 <HAL_DMA_Start_IT+0x260>
 8004974:	40020010 	.word	0x40020010
 8004978:	40020028 	.word	0x40020028
 800497c:	40020040 	.word	0x40020040
 8004980:	40020058 	.word	0x40020058
 8004984:	40020070 	.word	0x40020070
 8004988:	40020088 	.word	0x40020088
 800498c:	400200a0 	.word	0x400200a0
 8004990:	400200b8 	.word	0x400200b8
 8004994:	40020410 	.word	0x40020410
 8004998:	40020428 	.word	0x40020428
 800499c:	40020440 	.word	0x40020440
 80049a0:	40020458 	.word	0x40020458
 80049a4:	40020470 	.word	0x40020470
 80049a8:	40020488 	.word	0x40020488
 80049ac:	400204a0 	.word	0x400204a0
 80049b0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f023 020e 	bic.w	r2, r3, #14
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f042 020a 	orr.w	r2, r2, #10
 80049c6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d007      	beq.n	80049e0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f042 0204 	orr.w	r2, r2, #4
 80049de:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a83      	ldr	r2, [pc, #524]	@ (8004bf4 <HAL_DMA_Start_IT+0x474>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d072      	beq.n	8004ad0 <HAL_DMA_Start_IT+0x350>
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a82      	ldr	r2, [pc, #520]	@ (8004bf8 <HAL_DMA_Start_IT+0x478>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d06d      	beq.n	8004ad0 <HAL_DMA_Start_IT+0x350>
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a80      	ldr	r2, [pc, #512]	@ (8004bfc <HAL_DMA_Start_IT+0x47c>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d068      	beq.n	8004ad0 <HAL_DMA_Start_IT+0x350>
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a7f      	ldr	r2, [pc, #508]	@ (8004c00 <HAL_DMA_Start_IT+0x480>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d063      	beq.n	8004ad0 <HAL_DMA_Start_IT+0x350>
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a7d      	ldr	r2, [pc, #500]	@ (8004c04 <HAL_DMA_Start_IT+0x484>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d05e      	beq.n	8004ad0 <HAL_DMA_Start_IT+0x350>
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a7c      	ldr	r2, [pc, #496]	@ (8004c08 <HAL_DMA_Start_IT+0x488>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d059      	beq.n	8004ad0 <HAL_DMA_Start_IT+0x350>
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a7a      	ldr	r2, [pc, #488]	@ (8004c0c <HAL_DMA_Start_IT+0x48c>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d054      	beq.n	8004ad0 <HAL_DMA_Start_IT+0x350>
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a79      	ldr	r2, [pc, #484]	@ (8004c10 <HAL_DMA_Start_IT+0x490>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d04f      	beq.n	8004ad0 <HAL_DMA_Start_IT+0x350>
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a77      	ldr	r2, [pc, #476]	@ (8004c14 <HAL_DMA_Start_IT+0x494>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d04a      	beq.n	8004ad0 <HAL_DMA_Start_IT+0x350>
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a76      	ldr	r2, [pc, #472]	@ (8004c18 <HAL_DMA_Start_IT+0x498>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d045      	beq.n	8004ad0 <HAL_DMA_Start_IT+0x350>
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a74      	ldr	r2, [pc, #464]	@ (8004c1c <HAL_DMA_Start_IT+0x49c>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d040      	beq.n	8004ad0 <HAL_DMA_Start_IT+0x350>
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a73      	ldr	r2, [pc, #460]	@ (8004c20 <HAL_DMA_Start_IT+0x4a0>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d03b      	beq.n	8004ad0 <HAL_DMA_Start_IT+0x350>
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a71      	ldr	r2, [pc, #452]	@ (8004c24 <HAL_DMA_Start_IT+0x4a4>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d036      	beq.n	8004ad0 <HAL_DMA_Start_IT+0x350>
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a70      	ldr	r2, [pc, #448]	@ (8004c28 <HAL_DMA_Start_IT+0x4a8>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d031      	beq.n	8004ad0 <HAL_DMA_Start_IT+0x350>
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a6e      	ldr	r2, [pc, #440]	@ (8004c2c <HAL_DMA_Start_IT+0x4ac>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d02c      	beq.n	8004ad0 <HAL_DMA_Start_IT+0x350>
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a6d      	ldr	r2, [pc, #436]	@ (8004c30 <HAL_DMA_Start_IT+0x4b0>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d027      	beq.n	8004ad0 <HAL_DMA_Start_IT+0x350>
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a6b      	ldr	r2, [pc, #428]	@ (8004c34 <HAL_DMA_Start_IT+0x4b4>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d022      	beq.n	8004ad0 <HAL_DMA_Start_IT+0x350>
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a6a      	ldr	r2, [pc, #424]	@ (8004c38 <HAL_DMA_Start_IT+0x4b8>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d01d      	beq.n	8004ad0 <HAL_DMA_Start_IT+0x350>
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a68      	ldr	r2, [pc, #416]	@ (8004c3c <HAL_DMA_Start_IT+0x4bc>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d018      	beq.n	8004ad0 <HAL_DMA_Start_IT+0x350>
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a67      	ldr	r2, [pc, #412]	@ (8004c40 <HAL_DMA_Start_IT+0x4c0>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d013      	beq.n	8004ad0 <HAL_DMA_Start_IT+0x350>
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a65      	ldr	r2, [pc, #404]	@ (8004c44 <HAL_DMA_Start_IT+0x4c4>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d00e      	beq.n	8004ad0 <HAL_DMA_Start_IT+0x350>
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a64      	ldr	r2, [pc, #400]	@ (8004c48 <HAL_DMA_Start_IT+0x4c8>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d009      	beq.n	8004ad0 <HAL_DMA_Start_IT+0x350>
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a62      	ldr	r2, [pc, #392]	@ (8004c4c <HAL_DMA_Start_IT+0x4cc>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d004      	beq.n	8004ad0 <HAL_DMA_Start_IT+0x350>
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a61      	ldr	r2, [pc, #388]	@ (8004c50 <HAL_DMA_Start_IT+0x4d0>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d101      	bne.n	8004ad4 <HAL_DMA_Start_IT+0x354>
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e000      	b.n	8004ad6 <HAL_DMA_Start_IT+0x356>
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d01a      	beq.n	8004b10 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d007      	beq.n	8004af8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004af2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004af6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d007      	beq.n	8004b10 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b0a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b0e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a37      	ldr	r2, [pc, #220]	@ (8004bf4 <HAL_DMA_Start_IT+0x474>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d04a      	beq.n	8004bb0 <HAL_DMA_Start_IT+0x430>
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a36      	ldr	r2, [pc, #216]	@ (8004bf8 <HAL_DMA_Start_IT+0x478>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d045      	beq.n	8004bb0 <HAL_DMA_Start_IT+0x430>
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a34      	ldr	r2, [pc, #208]	@ (8004bfc <HAL_DMA_Start_IT+0x47c>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d040      	beq.n	8004bb0 <HAL_DMA_Start_IT+0x430>
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a33      	ldr	r2, [pc, #204]	@ (8004c00 <HAL_DMA_Start_IT+0x480>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d03b      	beq.n	8004bb0 <HAL_DMA_Start_IT+0x430>
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a31      	ldr	r2, [pc, #196]	@ (8004c04 <HAL_DMA_Start_IT+0x484>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d036      	beq.n	8004bb0 <HAL_DMA_Start_IT+0x430>
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a30      	ldr	r2, [pc, #192]	@ (8004c08 <HAL_DMA_Start_IT+0x488>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d031      	beq.n	8004bb0 <HAL_DMA_Start_IT+0x430>
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a2e      	ldr	r2, [pc, #184]	@ (8004c0c <HAL_DMA_Start_IT+0x48c>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d02c      	beq.n	8004bb0 <HAL_DMA_Start_IT+0x430>
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a2d      	ldr	r2, [pc, #180]	@ (8004c10 <HAL_DMA_Start_IT+0x490>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d027      	beq.n	8004bb0 <HAL_DMA_Start_IT+0x430>
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a2b      	ldr	r2, [pc, #172]	@ (8004c14 <HAL_DMA_Start_IT+0x494>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d022      	beq.n	8004bb0 <HAL_DMA_Start_IT+0x430>
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a2a      	ldr	r2, [pc, #168]	@ (8004c18 <HAL_DMA_Start_IT+0x498>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d01d      	beq.n	8004bb0 <HAL_DMA_Start_IT+0x430>
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a28      	ldr	r2, [pc, #160]	@ (8004c1c <HAL_DMA_Start_IT+0x49c>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d018      	beq.n	8004bb0 <HAL_DMA_Start_IT+0x430>
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a27      	ldr	r2, [pc, #156]	@ (8004c20 <HAL_DMA_Start_IT+0x4a0>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d013      	beq.n	8004bb0 <HAL_DMA_Start_IT+0x430>
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a25      	ldr	r2, [pc, #148]	@ (8004c24 <HAL_DMA_Start_IT+0x4a4>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d00e      	beq.n	8004bb0 <HAL_DMA_Start_IT+0x430>
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a24      	ldr	r2, [pc, #144]	@ (8004c28 <HAL_DMA_Start_IT+0x4a8>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d009      	beq.n	8004bb0 <HAL_DMA_Start_IT+0x430>
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a22      	ldr	r2, [pc, #136]	@ (8004c2c <HAL_DMA_Start_IT+0x4ac>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d004      	beq.n	8004bb0 <HAL_DMA_Start_IT+0x430>
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a21      	ldr	r2, [pc, #132]	@ (8004c30 <HAL_DMA_Start_IT+0x4b0>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d108      	bne.n	8004bc2 <HAL_DMA_Start_IT+0x442>
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f042 0201 	orr.w	r2, r2, #1
 8004bbe:	601a      	str	r2, [r3, #0]
 8004bc0:	e012      	b.n	8004be8 <HAL_DMA_Start_IT+0x468>
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f042 0201 	orr.w	r2, r2, #1
 8004bd0:	601a      	str	r2, [r3, #0]
 8004bd2:	e009      	b.n	8004be8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004bda:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2200      	movs	r2, #0
 8004be0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004be8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3718      	adds	r7, #24
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	bf00      	nop
 8004bf4:	40020010 	.word	0x40020010
 8004bf8:	40020028 	.word	0x40020028
 8004bfc:	40020040 	.word	0x40020040
 8004c00:	40020058 	.word	0x40020058
 8004c04:	40020070 	.word	0x40020070
 8004c08:	40020088 	.word	0x40020088
 8004c0c:	400200a0 	.word	0x400200a0
 8004c10:	400200b8 	.word	0x400200b8
 8004c14:	40020410 	.word	0x40020410
 8004c18:	40020428 	.word	0x40020428
 8004c1c:	40020440 	.word	0x40020440
 8004c20:	40020458 	.word	0x40020458
 8004c24:	40020470 	.word	0x40020470
 8004c28:	40020488 	.word	0x40020488
 8004c2c:	400204a0 	.word	0x400204a0
 8004c30:	400204b8 	.word	0x400204b8
 8004c34:	58025408 	.word	0x58025408
 8004c38:	5802541c 	.word	0x5802541c
 8004c3c:	58025430 	.word	0x58025430
 8004c40:	58025444 	.word	0x58025444
 8004c44:	58025458 	.word	0x58025458
 8004c48:	5802546c 	.word	0x5802546c
 8004c4c:	58025480 	.word	0x58025480
 8004c50:	58025494 	.word	0x58025494

08004c54 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b086      	sub	sp, #24
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004c5c:	f7fd fd84 	bl	8002768 <HAL_GetTick>
 8004c60:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d101      	bne.n	8004c6c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e2dc      	b.n	8005226 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	2b02      	cmp	r3, #2
 8004c76:	d008      	beq.n	8004c8a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2280      	movs	r2, #128	@ 0x80
 8004c7c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2200      	movs	r2, #0
 8004c82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e2cd      	b.n	8005226 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a76      	ldr	r2, [pc, #472]	@ (8004e68 <HAL_DMA_Abort+0x214>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d04a      	beq.n	8004d2a <HAL_DMA_Abort+0xd6>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a74      	ldr	r2, [pc, #464]	@ (8004e6c <HAL_DMA_Abort+0x218>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d045      	beq.n	8004d2a <HAL_DMA_Abort+0xd6>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a73      	ldr	r2, [pc, #460]	@ (8004e70 <HAL_DMA_Abort+0x21c>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d040      	beq.n	8004d2a <HAL_DMA_Abort+0xd6>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a71      	ldr	r2, [pc, #452]	@ (8004e74 <HAL_DMA_Abort+0x220>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d03b      	beq.n	8004d2a <HAL_DMA_Abort+0xd6>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a70      	ldr	r2, [pc, #448]	@ (8004e78 <HAL_DMA_Abort+0x224>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d036      	beq.n	8004d2a <HAL_DMA_Abort+0xd6>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a6e      	ldr	r2, [pc, #440]	@ (8004e7c <HAL_DMA_Abort+0x228>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d031      	beq.n	8004d2a <HAL_DMA_Abort+0xd6>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a6d      	ldr	r2, [pc, #436]	@ (8004e80 <HAL_DMA_Abort+0x22c>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d02c      	beq.n	8004d2a <HAL_DMA_Abort+0xd6>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a6b      	ldr	r2, [pc, #428]	@ (8004e84 <HAL_DMA_Abort+0x230>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d027      	beq.n	8004d2a <HAL_DMA_Abort+0xd6>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a6a      	ldr	r2, [pc, #424]	@ (8004e88 <HAL_DMA_Abort+0x234>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d022      	beq.n	8004d2a <HAL_DMA_Abort+0xd6>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a68      	ldr	r2, [pc, #416]	@ (8004e8c <HAL_DMA_Abort+0x238>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d01d      	beq.n	8004d2a <HAL_DMA_Abort+0xd6>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a67      	ldr	r2, [pc, #412]	@ (8004e90 <HAL_DMA_Abort+0x23c>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d018      	beq.n	8004d2a <HAL_DMA_Abort+0xd6>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a65      	ldr	r2, [pc, #404]	@ (8004e94 <HAL_DMA_Abort+0x240>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d013      	beq.n	8004d2a <HAL_DMA_Abort+0xd6>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a64      	ldr	r2, [pc, #400]	@ (8004e98 <HAL_DMA_Abort+0x244>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d00e      	beq.n	8004d2a <HAL_DMA_Abort+0xd6>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a62      	ldr	r2, [pc, #392]	@ (8004e9c <HAL_DMA_Abort+0x248>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d009      	beq.n	8004d2a <HAL_DMA_Abort+0xd6>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a61      	ldr	r2, [pc, #388]	@ (8004ea0 <HAL_DMA_Abort+0x24c>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d004      	beq.n	8004d2a <HAL_DMA_Abort+0xd6>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a5f      	ldr	r2, [pc, #380]	@ (8004ea4 <HAL_DMA_Abort+0x250>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d101      	bne.n	8004d2e <HAL_DMA_Abort+0xda>
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e000      	b.n	8004d30 <HAL_DMA_Abort+0xdc>
 8004d2e:	2300      	movs	r3, #0
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d013      	beq.n	8004d5c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f022 021e 	bic.w	r2, r2, #30
 8004d42:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	695a      	ldr	r2, [r3, #20]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004d52:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	617b      	str	r3, [r7, #20]
 8004d5a:	e00a      	b.n	8004d72 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f022 020e 	bic.w	r2, r2, #14
 8004d6a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a3c      	ldr	r2, [pc, #240]	@ (8004e68 <HAL_DMA_Abort+0x214>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d072      	beq.n	8004e62 <HAL_DMA_Abort+0x20e>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a3a      	ldr	r2, [pc, #232]	@ (8004e6c <HAL_DMA_Abort+0x218>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d06d      	beq.n	8004e62 <HAL_DMA_Abort+0x20e>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a39      	ldr	r2, [pc, #228]	@ (8004e70 <HAL_DMA_Abort+0x21c>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d068      	beq.n	8004e62 <HAL_DMA_Abort+0x20e>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a37      	ldr	r2, [pc, #220]	@ (8004e74 <HAL_DMA_Abort+0x220>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d063      	beq.n	8004e62 <HAL_DMA_Abort+0x20e>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a36      	ldr	r2, [pc, #216]	@ (8004e78 <HAL_DMA_Abort+0x224>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d05e      	beq.n	8004e62 <HAL_DMA_Abort+0x20e>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a34      	ldr	r2, [pc, #208]	@ (8004e7c <HAL_DMA_Abort+0x228>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d059      	beq.n	8004e62 <HAL_DMA_Abort+0x20e>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a33      	ldr	r2, [pc, #204]	@ (8004e80 <HAL_DMA_Abort+0x22c>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d054      	beq.n	8004e62 <HAL_DMA_Abort+0x20e>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a31      	ldr	r2, [pc, #196]	@ (8004e84 <HAL_DMA_Abort+0x230>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d04f      	beq.n	8004e62 <HAL_DMA_Abort+0x20e>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a30      	ldr	r2, [pc, #192]	@ (8004e88 <HAL_DMA_Abort+0x234>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d04a      	beq.n	8004e62 <HAL_DMA_Abort+0x20e>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a2e      	ldr	r2, [pc, #184]	@ (8004e8c <HAL_DMA_Abort+0x238>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d045      	beq.n	8004e62 <HAL_DMA_Abort+0x20e>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a2d      	ldr	r2, [pc, #180]	@ (8004e90 <HAL_DMA_Abort+0x23c>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d040      	beq.n	8004e62 <HAL_DMA_Abort+0x20e>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a2b      	ldr	r2, [pc, #172]	@ (8004e94 <HAL_DMA_Abort+0x240>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d03b      	beq.n	8004e62 <HAL_DMA_Abort+0x20e>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a2a      	ldr	r2, [pc, #168]	@ (8004e98 <HAL_DMA_Abort+0x244>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d036      	beq.n	8004e62 <HAL_DMA_Abort+0x20e>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a28      	ldr	r2, [pc, #160]	@ (8004e9c <HAL_DMA_Abort+0x248>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d031      	beq.n	8004e62 <HAL_DMA_Abort+0x20e>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a27      	ldr	r2, [pc, #156]	@ (8004ea0 <HAL_DMA_Abort+0x24c>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d02c      	beq.n	8004e62 <HAL_DMA_Abort+0x20e>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a25      	ldr	r2, [pc, #148]	@ (8004ea4 <HAL_DMA_Abort+0x250>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d027      	beq.n	8004e62 <HAL_DMA_Abort+0x20e>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a24      	ldr	r2, [pc, #144]	@ (8004ea8 <HAL_DMA_Abort+0x254>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d022      	beq.n	8004e62 <HAL_DMA_Abort+0x20e>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a22      	ldr	r2, [pc, #136]	@ (8004eac <HAL_DMA_Abort+0x258>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d01d      	beq.n	8004e62 <HAL_DMA_Abort+0x20e>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a21      	ldr	r2, [pc, #132]	@ (8004eb0 <HAL_DMA_Abort+0x25c>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d018      	beq.n	8004e62 <HAL_DMA_Abort+0x20e>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a1f      	ldr	r2, [pc, #124]	@ (8004eb4 <HAL_DMA_Abort+0x260>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d013      	beq.n	8004e62 <HAL_DMA_Abort+0x20e>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a1e      	ldr	r2, [pc, #120]	@ (8004eb8 <HAL_DMA_Abort+0x264>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d00e      	beq.n	8004e62 <HAL_DMA_Abort+0x20e>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a1c      	ldr	r2, [pc, #112]	@ (8004ebc <HAL_DMA_Abort+0x268>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d009      	beq.n	8004e62 <HAL_DMA_Abort+0x20e>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a1b      	ldr	r2, [pc, #108]	@ (8004ec0 <HAL_DMA_Abort+0x26c>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d004      	beq.n	8004e62 <HAL_DMA_Abort+0x20e>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a19      	ldr	r2, [pc, #100]	@ (8004ec4 <HAL_DMA_Abort+0x270>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d132      	bne.n	8004ec8 <HAL_DMA_Abort+0x274>
 8004e62:	2301      	movs	r3, #1
 8004e64:	e031      	b.n	8004eca <HAL_DMA_Abort+0x276>
 8004e66:	bf00      	nop
 8004e68:	40020010 	.word	0x40020010
 8004e6c:	40020028 	.word	0x40020028
 8004e70:	40020040 	.word	0x40020040
 8004e74:	40020058 	.word	0x40020058
 8004e78:	40020070 	.word	0x40020070
 8004e7c:	40020088 	.word	0x40020088
 8004e80:	400200a0 	.word	0x400200a0
 8004e84:	400200b8 	.word	0x400200b8
 8004e88:	40020410 	.word	0x40020410
 8004e8c:	40020428 	.word	0x40020428
 8004e90:	40020440 	.word	0x40020440
 8004e94:	40020458 	.word	0x40020458
 8004e98:	40020470 	.word	0x40020470
 8004e9c:	40020488 	.word	0x40020488
 8004ea0:	400204a0 	.word	0x400204a0
 8004ea4:	400204b8 	.word	0x400204b8
 8004ea8:	58025408 	.word	0x58025408
 8004eac:	5802541c 	.word	0x5802541c
 8004eb0:	58025430 	.word	0x58025430
 8004eb4:	58025444 	.word	0x58025444
 8004eb8:	58025458 	.word	0x58025458
 8004ebc:	5802546c 	.word	0x5802546c
 8004ec0:	58025480 	.word	0x58025480
 8004ec4:	58025494 	.word	0x58025494
 8004ec8:	2300      	movs	r3, #0
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d007      	beq.n	8004ede <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ed8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004edc:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a6d      	ldr	r2, [pc, #436]	@ (8005098 <HAL_DMA_Abort+0x444>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d04a      	beq.n	8004f7e <HAL_DMA_Abort+0x32a>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a6b      	ldr	r2, [pc, #428]	@ (800509c <HAL_DMA_Abort+0x448>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d045      	beq.n	8004f7e <HAL_DMA_Abort+0x32a>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a6a      	ldr	r2, [pc, #424]	@ (80050a0 <HAL_DMA_Abort+0x44c>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d040      	beq.n	8004f7e <HAL_DMA_Abort+0x32a>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a68      	ldr	r2, [pc, #416]	@ (80050a4 <HAL_DMA_Abort+0x450>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d03b      	beq.n	8004f7e <HAL_DMA_Abort+0x32a>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a67      	ldr	r2, [pc, #412]	@ (80050a8 <HAL_DMA_Abort+0x454>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d036      	beq.n	8004f7e <HAL_DMA_Abort+0x32a>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a65      	ldr	r2, [pc, #404]	@ (80050ac <HAL_DMA_Abort+0x458>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d031      	beq.n	8004f7e <HAL_DMA_Abort+0x32a>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a64      	ldr	r2, [pc, #400]	@ (80050b0 <HAL_DMA_Abort+0x45c>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d02c      	beq.n	8004f7e <HAL_DMA_Abort+0x32a>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a62      	ldr	r2, [pc, #392]	@ (80050b4 <HAL_DMA_Abort+0x460>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d027      	beq.n	8004f7e <HAL_DMA_Abort+0x32a>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a61      	ldr	r2, [pc, #388]	@ (80050b8 <HAL_DMA_Abort+0x464>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d022      	beq.n	8004f7e <HAL_DMA_Abort+0x32a>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a5f      	ldr	r2, [pc, #380]	@ (80050bc <HAL_DMA_Abort+0x468>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d01d      	beq.n	8004f7e <HAL_DMA_Abort+0x32a>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a5e      	ldr	r2, [pc, #376]	@ (80050c0 <HAL_DMA_Abort+0x46c>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d018      	beq.n	8004f7e <HAL_DMA_Abort+0x32a>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a5c      	ldr	r2, [pc, #368]	@ (80050c4 <HAL_DMA_Abort+0x470>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d013      	beq.n	8004f7e <HAL_DMA_Abort+0x32a>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a5b      	ldr	r2, [pc, #364]	@ (80050c8 <HAL_DMA_Abort+0x474>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d00e      	beq.n	8004f7e <HAL_DMA_Abort+0x32a>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a59      	ldr	r2, [pc, #356]	@ (80050cc <HAL_DMA_Abort+0x478>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d009      	beq.n	8004f7e <HAL_DMA_Abort+0x32a>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a58      	ldr	r2, [pc, #352]	@ (80050d0 <HAL_DMA_Abort+0x47c>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d004      	beq.n	8004f7e <HAL_DMA_Abort+0x32a>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a56      	ldr	r2, [pc, #344]	@ (80050d4 <HAL_DMA_Abort+0x480>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d108      	bne.n	8004f90 <HAL_DMA_Abort+0x33c>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f022 0201 	bic.w	r2, r2, #1
 8004f8c:	601a      	str	r2, [r3, #0]
 8004f8e:	e007      	b.n	8004fa0 <HAL_DMA_Abort+0x34c>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f022 0201 	bic.w	r2, r2, #1
 8004f9e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004fa0:	e013      	b.n	8004fca <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004fa2:	f7fd fbe1 	bl	8002768 <HAL_GetTick>
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	1ad3      	subs	r3, r2, r3
 8004fac:	2b05      	cmp	r3, #5
 8004fae:	d90c      	bls.n	8004fca <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2220      	movs	r2, #32
 8004fb4:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2203      	movs	r2, #3
 8004fba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e12d      	b.n	8005226 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 0301 	and.w	r3, r3, #1
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d1e5      	bne.n	8004fa2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a2f      	ldr	r2, [pc, #188]	@ (8005098 <HAL_DMA_Abort+0x444>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d04a      	beq.n	8005076 <HAL_DMA_Abort+0x422>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a2d      	ldr	r2, [pc, #180]	@ (800509c <HAL_DMA_Abort+0x448>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d045      	beq.n	8005076 <HAL_DMA_Abort+0x422>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a2c      	ldr	r2, [pc, #176]	@ (80050a0 <HAL_DMA_Abort+0x44c>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d040      	beq.n	8005076 <HAL_DMA_Abort+0x422>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a2a      	ldr	r2, [pc, #168]	@ (80050a4 <HAL_DMA_Abort+0x450>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d03b      	beq.n	8005076 <HAL_DMA_Abort+0x422>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a29      	ldr	r2, [pc, #164]	@ (80050a8 <HAL_DMA_Abort+0x454>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d036      	beq.n	8005076 <HAL_DMA_Abort+0x422>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a27      	ldr	r2, [pc, #156]	@ (80050ac <HAL_DMA_Abort+0x458>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d031      	beq.n	8005076 <HAL_DMA_Abort+0x422>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a26      	ldr	r2, [pc, #152]	@ (80050b0 <HAL_DMA_Abort+0x45c>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d02c      	beq.n	8005076 <HAL_DMA_Abort+0x422>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a24      	ldr	r2, [pc, #144]	@ (80050b4 <HAL_DMA_Abort+0x460>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d027      	beq.n	8005076 <HAL_DMA_Abort+0x422>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a23      	ldr	r2, [pc, #140]	@ (80050b8 <HAL_DMA_Abort+0x464>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d022      	beq.n	8005076 <HAL_DMA_Abort+0x422>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a21      	ldr	r2, [pc, #132]	@ (80050bc <HAL_DMA_Abort+0x468>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d01d      	beq.n	8005076 <HAL_DMA_Abort+0x422>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a20      	ldr	r2, [pc, #128]	@ (80050c0 <HAL_DMA_Abort+0x46c>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d018      	beq.n	8005076 <HAL_DMA_Abort+0x422>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a1e      	ldr	r2, [pc, #120]	@ (80050c4 <HAL_DMA_Abort+0x470>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d013      	beq.n	8005076 <HAL_DMA_Abort+0x422>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a1d      	ldr	r2, [pc, #116]	@ (80050c8 <HAL_DMA_Abort+0x474>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d00e      	beq.n	8005076 <HAL_DMA_Abort+0x422>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a1b      	ldr	r2, [pc, #108]	@ (80050cc <HAL_DMA_Abort+0x478>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d009      	beq.n	8005076 <HAL_DMA_Abort+0x422>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a1a      	ldr	r2, [pc, #104]	@ (80050d0 <HAL_DMA_Abort+0x47c>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d004      	beq.n	8005076 <HAL_DMA_Abort+0x422>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a18      	ldr	r2, [pc, #96]	@ (80050d4 <HAL_DMA_Abort+0x480>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d101      	bne.n	800507a <HAL_DMA_Abort+0x426>
 8005076:	2301      	movs	r3, #1
 8005078:	e000      	b.n	800507c <HAL_DMA_Abort+0x428>
 800507a:	2300      	movs	r3, #0
 800507c:	2b00      	cmp	r3, #0
 800507e:	d02b      	beq.n	80050d8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005084:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800508a:	f003 031f 	and.w	r3, r3, #31
 800508e:	223f      	movs	r2, #63	@ 0x3f
 8005090:	409a      	lsls	r2, r3
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	609a      	str	r2, [r3, #8]
 8005096:	e02a      	b.n	80050ee <HAL_DMA_Abort+0x49a>
 8005098:	40020010 	.word	0x40020010
 800509c:	40020028 	.word	0x40020028
 80050a0:	40020040 	.word	0x40020040
 80050a4:	40020058 	.word	0x40020058
 80050a8:	40020070 	.word	0x40020070
 80050ac:	40020088 	.word	0x40020088
 80050b0:	400200a0 	.word	0x400200a0
 80050b4:	400200b8 	.word	0x400200b8
 80050b8:	40020410 	.word	0x40020410
 80050bc:	40020428 	.word	0x40020428
 80050c0:	40020440 	.word	0x40020440
 80050c4:	40020458 	.word	0x40020458
 80050c8:	40020470 	.word	0x40020470
 80050cc:	40020488 	.word	0x40020488
 80050d0:	400204a0 	.word	0x400204a0
 80050d4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050dc:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050e2:	f003 031f 	and.w	r3, r3, #31
 80050e6:	2201      	movs	r2, #1
 80050e8:	409a      	lsls	r2, r3
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a4f      	ldr	r2, [pc, #316]	@ (8005230 <HAL_DMA_Abort+0x5dc>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d072      	beq.n	80051de <HAL_DMA_Abort+0x58a>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a4d      	ldr	r2, [pc, #308]	@ (8005234 <HAL_DMA_Abort+0x5e0>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d06d      	beq.n	80051de <HAL_DMA_Abort+0x58a>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a4c      	ldr	r2, [pc, #304]	@ (8005238 <HAL_DMA_Abort+0x5e4>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d068      	beq.n	80051de <HAL_DMA_Abort+0x58a>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a4a      	ldr	r2, [pc, #296]	@ (800523c <HAL_DMA_Abort+0x5e8>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d063      	beq.n	80051de <HAL_DMA_Abort+0x58a>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a49      	ldr	r2, [pc, #292]	@ (8005240 <HAL_DMA_Abort+0x5ec>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d05e      	beq.n	80051de <HAL_DMA_Abort+0x58a>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a47      	ldr	r2, [pc, #284]	@ (8005244 <HAL_DMA_Abort+0x5f0>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d059      	beq.n	80051de <HAL_DMA_Abort+0x58a>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a46      	ldr	r2, [pc, #280]	@ (8005248 <HAL_DMA_Abort+0x5f4>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d054      	beq.n	80051de <HAL_DMA_Abort+0x58a>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a44      	ldr	r2, [pc, #272]	@ (800524c <HAL_DMA_Abort+0x5f8>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d04f      	beq.n	80051de <HAL_DMA_Abort+0x58a>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a43      	ldr	r2, [pc, #268]	@ (8005250 <HAL_DMA_Abort+0x5fc>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d04a      	beq.n	80051de <HAL_DMA_Abort+0x58a>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a41      	ldr	r2, [pc, #260]	@ (8005254 <HAL_DMA_Abort+0x600>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d045      	beq.n	80051de <HAL_DMA_Abort+0x58a>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a40      	ldr	r2, [pc, #256]	@ (8005258 <HAL_DMA_Abort+0x604>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d040      	beq.n	80051de <HAL_DMA_Abort+0x58a>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a3e      	ldr	r2, [pc, #248]	@ (800525c <HAL_DMA_Abort+0x608>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d03b      	beq.n	80051de <HAL_DMA_Abort+0x58a>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a3d      	ldr	r2, [pc, #244]	@ (8005260 <HAL_DMA_Abort+0x60c>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d036      	beq.n	80051de <HAL_DMA_Abort+0x58a>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a3b      	ldr	r2, [pc, #236]	@ (8005264 <HAL_DMA_Abort+0x610>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d031      	beq.n	80051de <HAL_DMA_Abort+0x58a>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a3a      	ldr	r2, [pc, #232]	@ (8005268 <HAL_DMA_Abort+0x614>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d02c      	beq.n	80051de <HAL_DMA_Abort+0x58a>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a38      	ldr	r2, [pc, #224]	@ (800526c <HAL_DMA_Abort+0x618>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d027      	beq.n	80051de <HAL_DMA_Abort+0x58a>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a37      	ldr	r2, [pc, #220]	@ (8005270 <HAL_DMA_Abort+0x61c>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d022      	beq.n	80051de <HAL_DMA_Abort+0x58a>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a35      	ldr	r2, [pc, #212]	@ (8005274 <HAL_DMA_Abort+0x620>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d01d      	beq.n	80051de <HAL_DMA_Abort+0x58a>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a34      	ldr	r2, [pc, #208]	@ (8005278 <HAL_DMA_Abort+0x624>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d018      	beq.n	80051de <HAL_DMA_Abort+0x58a>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a32      	ldr	r2, [pc, #200]	@ (800527c <HAL_DMA_Abort+0x628>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d013      	beq.n	80051de <HAL_DMA_Abort+0x58a>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a31      	ldr	r2, [pc, #196]	@ (8005280 <HAL_DMA_Abort+0x62c>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d00e      	beq.n	80051de <HAL_DMA_Abort+0x58a>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a2f      	ldr	r2, [pc, #188]	@ (8005284 <HAL_DMA_Abort+0x630>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d009      	beq.n	80051de <HAL_DMA_Abort+0x58a>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a2e      	ldr	r2, [pc, #184]	@ (8005288 <HAL_DMA_Abort+0x634>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d004      	beq.n	80051de <HAL_DMA_Abort+0x58a>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a2c      	ldr	r2, [pc, #176]	@ (800528c <HAL_DMA_Abort+0x638>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d101      	bne.n	80051e2 <HAL_DMA_Abort+0x58e>
 80051de:	2301      	movs	r3, #1
 80051e0:	e000      	b.n	80051e4 <HAL_DMA_Abort+0x590>
 80051e2:	2300      	movs	r3, #0
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d015      	beq.n	8005214 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80051f0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d00c      	beq.n	8005214 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005204:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005208:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800520e:	687a      	ldr	r2, [r7, #4]
 8005210:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005212:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8005224:	2300      	movs	r3, #0
}
 8005226:	4618      	mov	r0, r3
 8005228:	3718      	adds	r7, #24
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
 800522e:	bf00      	nop
 8005230:	40020010 	.word	0x40020010
 8005234:	40020028 	.word	0x40020028
 8005238:	40020040 	.word	0x40020040
 800523c:	40020058 	.word	0x40020058
 8005240:	40020070 	.word	0x40020070
 8005244:	40020088 	.word	0x40020088
 8005248:	400200a0 	.word	0x400200a0
 800524c:	400200b8 	.word	0x400200b8
 8005250:	40020410 	.word	0x40020410
 8005254:	40020428 	.word	0x40020428
 8005258:	40020440 	.word	0x40020440
 800525c:	40020458 	.word	0x40020458
 8005260:	40020470 	.word	0x40020470
 8005264:	40020488 	.word	0x40020488
 8005268:	400204a0 	.word	0x400204a0
 800526c:	400204b8 	.word	0x400204b8
 8005270:	58025408 	.word	0x58025408
 8005274:	5802541c 	.word	0x5802541c
 8005278:	58025430 	.word	0x58025430
 800527c:	58025444 	.word	0x58025444
 8005280:	58025458 	.word	0x58025458
 8005284:	5802546c 	.word	0x5802546c
 8005288:	58025480 	.word	0x58025480
 800528c:	58025494 	.word	0x58025494

08005290 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b084      	sub	sp, #16
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d101      	bne.n	80052a2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	e237      	b.n	8005712 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	2b02      	cmp	r3, #2
 80052ac:	d004      	beq.n	80052b8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2280      	movs	r2, #128	@ 0x80
 80052b2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	e22c      	b.n	8005712 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a5c      	ldr	r2, [pc, #368]	@ (8005430 <HAL_DMA_Abort_IT+0x1a0>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d04a      	beq.n	8005358 <HAL_DMA_Abort_IT+0xc8>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a5b      	ldr	r2, [pc, #364]	@ (8005434 <HAL_DMA_Abort_IT+0x1a4>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d045      	beq.n	8005358 <HAL_DMA_Abort_IT+0xc8>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a59      	ldr	r2, [pc, #356]	@ (8005438 <HAL_DMA_Abort_IT+0x1a8>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d040      	beq.n	8005358 <HAL_DMA_Abort_IT+0xc8>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a58      	ldr	r2, [pc, #352]	@ (800543c <HAL_DMA_Abort_IT+0x1ac>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d03b      	beq.n	8005358 <HAL_DMA_Abort_IT+0xc8>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a56      	ldr	r2, [pc, #344]	@ (8005440 <HAL_DMA_Abort_IT+0x1b0>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d036      	beq.n	8005358 <HAL_DMA_Abort_IT+0xc8>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a55      	ldr	r2, [pc, #340]	@ (8005444 <HAL_DMA_Abort_IT+0x1b4>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d031      	beq.n	8005358 <HAL_DMA_Abort_IT+0xc8>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a53      	ldr	r2, [pc, #332]	@ (8005448 <HAL_DMA_Abort_IT+0x1b8>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d02c      	beq.n	8005358 <HAL_DMA_Abort_IT+0xc8>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a52      	ldr	r2, [pc, #328]	@ (800544c <HAL_DMA_Abort_IT+0x1bc>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d027      	beq.n	8005358 <HAL_DMA_Abort_IT+0xc8>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a50      	ldr	r2, [pc, #320]	@ (8005450 <HAL_DMA_Abort_IT+0x1c0>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d022      	beq.n	8005358 <HAL_DMA_Abort_IT+0xc8>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a4f      	ldr	r2, [pc, #316]	@ (8005454 <HAL_DMA_Abort_IT+0x1c4>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d01d      	beq.n	8005358 <HAL_DMA_Abort_IT+0xc8>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a4d      	ldr	r2, [pc, #308]	@ (8005458 <HAL_DMA_Abort_IT+0x1c8>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d018      	beq.n	8005358 <HAL_DMA_Abort_IT+0xc8>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a4c      	ldr	r2, [pc, #304]	@ (800545c <HAL_DMA_Abort_IT+0x1cc>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d013      	beq.n	8005358 <HAL_DMA_Abort_IT+0xc8>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a4a      	ldr	r2, [pc, #296]	@ (8005460 <HAL_DMA_Abort_IT+0x1d0>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d00e      	beq.n	8005358 <HAL_DMA_Abort_IT+0xc8>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a49      	ldr	r2, [pc, #292]	@ (8005464 <HAL_DMA_Abort_IT+0x1d4>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d009      	beq.n	8005358 <HAL_DMA_Abort_IT+0xc8>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a47      	ldr	r2, [pc, #284]	@ (8005468 <HAL_DMA_Abort_IT+0x1d8>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d004      	beq.n	8005358 <HAL_DMA_Abort_IT+0xc8>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a46      	ldr	r2, [pc, #280]	@ (800546c <HAL_DMA_Abort_IT+0x1dc>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d101      	bne.n	800535c <HAL_DMA_Abort_IT+0xcc>
 8005358:	2301      	movs	r3, #1
 800535a:	e000      	b.n	800535e <HAL_DMA_Abort_IT+0xce>
 800535c:	2300      	movs	r3, #0
 800535e:	2b00      	cmp	r3, #0
 8005360:	f000 8086 	beq.w	8005470 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2204      	movs	r2, #4
 8005368:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a2f      	ldr	r2, [pc, #188]	@ (8005430 <HAL_DMA_Abort_IT+0x1a0>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d04a      	beq.n	800540c <HAL_DMA_Abort_IT+0x17c>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a2e      	ldr	r2, [pc, #184]	@ (8005434 <HAL_DMA_Abort_IT+0x1a4>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d045      	beq.n	800540c <HAL_DMA_Abort_IT+0x17c>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a2c      	ldr	r2, [pc, #176]	@ (8005438 <HAL_DMA_Abort_IT+0x1a8>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d040      	beq.n	800540c <HAL_DMA_Abort_IT+0x17c>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a2b      	ldr	r2, [pc, #172]	@ (800543c <HAL_DMA_Abort_IT+0x1ac>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d03b      	beq.n	800540c <HAL_DMA_Abort_IT+0x17c>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a29      	ldr	r2, [pc, #164]	@ (8005440 <HAL_DMA_Abort_IT+0x1b0>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d036      	beq.n	800540c <HAL_DMA_Abort_IT+0x17c>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a28      	ldr	r2, [pc, #160]	@ (8005444 <HAL_DMA_Abort_IT+0x1b4>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d031      	beq.n	800540c <HAL_DMA_Abort_IT+0x17c>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a26      	ldr	r2, [pc, #152]	@ (8005448 <HAL_DMA_Abort_IT+0x1b8>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d02c      	beq.n	800540c <HAL_DMA_Abort_IT+0x17c>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a25      	ldr	r2, [pc, #148]	@ (800544c <HAL_DMA_Abort_IT+0x1bc>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d027      	beq.n	800540c <HAL_DMA_Abort_IT+0x17c>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a23      	ldr	r2, [pc, #140]	@ (8005450 <HAL_DMA_Abort_IT+0x1c0>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d022      	beq.n	800540c <HAL_DMA_Abort_IT+0x17c>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a22      	ldr	r2, [pc, #136]	@ (8005454 <HAL_DMA_Abort_IT+0x1c4>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d01d      	beq.n	800540c <HAL_DMA_Abort_IT+0x17c>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a20      	ldr	r2, [pc, #128]	@ (8005458 <HAL_DMA_Abort_IT+0x1c8>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d018      	beq.n	800540c <HAL_DMA_Abort_IT+0x17c>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a1f      	ldr	r2, [pc, #124]	@ (800545c <HAL_DMA_Abort_IT+0x1cc>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d013      	beq.n	800540c <HAL_DMA_Abort_IT+0x17c>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a1d      	ldr	r2, [pc, #116]	@ (8005460 <HAL_DMA_Abort_IT+0x1d0>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d00e      	beq.n	800540c <HAL_DMA_Abort_IT+0x17c>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a1c      	ldr	r2, [pc, #112]	@ (8005464 <HAL_DMA_Abort_IT+0x1d4>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d009      	beq.n	800540c <HAL_DMA_Abort_IT+0x17c>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a1a      	ldr	r2, [pc, #104]	@ (8005468 <HAL_DMA_Abort_IT+0x1d8>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d004      	beq.n	800540c <HAL_DMA_Abort_IT+0x17c>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a19      	ldr	r2, [pc, #100]	@ (800546c <HAL_DMA_Abort_IT+0x1dc>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d108      	bne.n	800541e <HAL_DMA_Abort_IT+0x18e>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f022 0201 	bic.w	r2, r2, #1
 800541a:	601a      	str	r2, [r3, #0]
 800541c:	e178      	b.n	8005710 <HAL_DMA_Abort_IT+0x480>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f022 0201 	bic.w	r2, r2, #1
 800542c:	601a      	str	r2, [r3, #0]
 800542e:	e16f      	b.n	8005710 <HAL_DMA_Abort_IT+0x480>
 8005430:	40020010 	.word	0x40020010
 8005434:	40020028 	.word	0x40020028
 8005438:	40020040 	.word	0x40020040
 800543c:	40020058 	.word	0x40020058
 8005440:	40020070 	.word	0x40020070
 8005444:	40020088 	.word	0x40020088
 8005448:	400200a0 	.word	0x400200a0
 800544c:	400200b8 	.word	0x400200b8
 8005450:	40020410 	.word	0x40020410
 8005454:	40020428 	.word	0x40020428
 8005458:	40020440 	.word	0x40020440
 800545c:	40020458 	.word	0x40020458
 8005460:	40020470 	.word	0x40020470
 8005464:	40020488 	.word	0x40020488
 8005468:	400204a0 	.word	0x400204a0
 800546c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f022 020e 	bic.w	r2, r2, #14
 800547e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a6c      	ldr	r2, [pc, #432]	@ (8005638 <HAL_DMA_Abort_IT+0x3a8>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d04a      	beq.n	8005520 <HAL_DMA_Abort_IT+0x290>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a6b      	ldr	r2, [pc, #428]	@ (800563c <HAL_DMA_Abort_IT+0x3ac>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d045      	beq.n	8005520 <HAL_DMA_Abort_IT+0x290>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a69      	ldr	r2, [pc, #420]	@ (8005640 <HAL_DMA_Abort_IT+0x3b0>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d040      	beq.n	8005520 <HAL_DMA_Abort_IT+0x290>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a68      	ldr	r2, [pc, #416]	@ (8005644 <HAL_DMA_Abort_IT+0x3b4>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d03b      	beq.n	8005520 <HAL_DMA_Abort_IT+0x290>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a66      	ldr	r2, [pc, #408]	@ (8005648 <HAL_DMA_Abort_IT+0x3b8>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d036      	beq.n	8005520 <HAL_DMA_Abort_IT+0x290>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a65      	ldr	r2, [pc, #404]	@ (800564c <HAL_DMA_Abort_IT+0x3bc>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d031      	beq.n	8005520 <HAL_DMA_Abort_IT+0x290>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a63      	ldr	r2, [pc, #396]	@ (8005650 <HAL_DMA_Abort_IT+0x3c0>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d02c      	beq.n	8005520 <HAL_DMA_Abort_IT+0x290>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a62      	ldr	r2, [pc, #392]	@ (8005654 <HAL_DMA_Abort_IT+0x3c4>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d027      	beq.n	8005520 <HAL_DMA_Abort_IT+0x290>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a60      	ldr	r2, [pc, #384]	@ (8005658 <HAL_DMA_Abort_IT+0x3c8>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d022      	beq.n	8005520 <HAL_DMA_Abort_IT+0x290>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a5f      	ldr	r2, [pc, #380]	@ (800565c <HAL_DMA_Abort_IT+0x3cc>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d01d      	beq.n	8005520 <HAL_DMA_Abort_IT+0x290>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a5d      	ldr	r2, [pc, #372]	@ (8005660 <HAL_DMA_Abort_IT+0x3d0>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d018      	beq.n	8005520 <HAL_DMA_Abort_IT+0x290>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a5c      	ldr	r2, [pc, #368]	@ (8005664 <HAL_DMA_Abort_IT+0x3d4>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d013      	beq.n	8005520 <HAL_DMA_Abort_IT+0x290>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a5a      	ldr	r2, [pc, #360]	@ (8005668 <HAL_DMA_Abort_IT+0x3d8>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d00e      	beq.n	8005520 <HAL_DMA_Abort_IT+0x290>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a59      	ldr	r2, [pc, #356]	@ (800566c <HAL_DMA_Abort_IT+0x3dc>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d009      	beq.n	8005520 <HAL_DMA_Abort_IT+0x290>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a57      	ldr	r2, [pc, #348]	@ (8005670 <HAL_DMA_Abort_IT+0x3e0>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d004      	beq.n	8005520 <HAL_DMA_Abort_IT+0x290>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a56      	ldr	r2, [pc, #344]	@ (8005674 <HAL_DMA_Abort_IT+0x3e4>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d108      	bne.n	8005532 <HAL_DMA_Abort_IT+0x2a2>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f022 0201 	bic.w	r2, r2, #1
 800552e:	601a      	str	r2, [r3, #0]
 8005530:	e007      	b.n	8005542 <HAL_DMA_Abort_IT+0x2b2>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f022 0201 	bic.w	r2, r2, #1
 8005540:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a3c      	ldr	r2, [pc, #240]	@ (8005638 <HAL_DMA_Abort_IT+0x3a8>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d072      	beq.n	8005632 <HAL_DMA_Abort_IT+0x3a2>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a3a      	ldr	r2, [pc, #232]	@ (800563c <HAL_DMA_Abort_IT+0x3ac>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d06d      	beq.n	8005632 <HAL_DMA_Abort_IT+0x3a2>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a39      	ldr	r2, [pc, #228]	@ (8005640 <HAL_DMA_Abort_IT+0x3b0>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d068      	beq.n	8005632 <HAL_DMA_Abort_IT+0x3a2>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a37      	ldr	r2, [pc, #220]	@ (8005644 <HAL_DMA_Abort_IT+0x3b4>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d063      	beq.n	8005632 <HAL_DMA_Abort_IT+0x3a2>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a36      	ldr	r2, [pc, #216]	@ (8005648 <HAL_DMA_Abort_IT+0x3b8>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d05e      	beq.n	8005632 <HAL_DMA_Abort_IT+0x3a2>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a34      	ldr	r2, [pc, #208]	@ (800564c <HAL_DMA_Abort_IT+0x3bc>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d059      	beq.n	8005632 <HAL_DMA_Abort_IT+0x3a2>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a33      	ldr	r2, [pc, #204]	@ (8005650 <HAL_DMA_Abort_IT+0x3c0>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d054      	beq.n	8005632 <HAL_DMA_Abort_IT+0x3a2>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a31      	ldr	r2, [pc, #196]	@ (8005654 <HAL_DMA_Abort_IT+0x3c4>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d04f      	beq.n	8005632 <HAL_DMA_Abort_IT+0x3a2>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a30      	ldr	r2, [pc, #192]	@ (8005658 <HAL_DMA_Abort_IT+0x3c8>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d04a      	beq.n	8005632 <HAL_DMA_Abort_IT+0x3a2>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a2e      	ldr	r2, [pc, #184]	@ (800565c <HAL_DMA_Abort_IT+0x3cc>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d045      	beq.n	8005632 <HAL_DMA_Abort_IT+0x3a2>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a2d      	ldr	r2, [pc, #180]	@ (8005660 <HAL_DMA_Abort_IT+0x3d0>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d040      	beq.n	8005632 <HAL_DMA_Abort_IT+0x3a2>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a2b      	ldr	r2, [pc, #172]	@ (8005664 <HAL_DMA_Abort_IT+0x3d4>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d03b      	beq.n	8005632 <HAL_DMA_Abort_IT+0x3a2>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a2a      	ldr	r2, [pc, #168]	@ (8005668 <HAL_DMA_Abort_IT+0x3d8>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d036      	beq.n	8005632 <HAL_DMA_Abort_IT+0x3a2>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a28      	ldr	r2, [pc, #160]	@ (800566c <HAL_DMA_Abort_IT+0x3dc>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d031      	beq.n	8005632 <HAL_DMA_Abort_IT+0x3a2>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a27      	ldr	r2, [pc, #156]	@ (8005670 <HAL_DMA_Abort_IT+0x3e0>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d02c      	beq.n	8005632 <HAL_DMA_Abort_IT+0x3a2>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a25      	ldr	r2, [pc, #148]	@ (8005674 <HAL_DMA_Abort_IT+0x3e4>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d027      	beq.n	8005632 <HAL_DMA_Abort_IT+0x3a2>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a24      	ldr	r2, [pc, #144]	@ (8005678 <HAL_DMA_Abort_IT+0x3e8>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d022      	beq.n	8005632 <HAL_DMA_Abort_IT+0x3a2>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a22      	ldr	r2, [pc, #136]	@ (800567c <HAL_DMA_Abort_IT+0x3ec>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d01d      	beq.n	8005632 <HAL_DMA_Abort_IT+0x3a2>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a21      	ldr	r2, [pc, #132]	@ (8005680 <HAL_DMA_Abort_IT+0x3f0>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d018      	beq.n	8005632 <HAL_DMA_Abort_IT+0x3a2>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a1f      	ldr	r2, [pc, #124]	@ (8005684 <HAL_DMA_Abort_IT+0x3f4>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d013      	beq.n	8005632 <HAL_DMA_Abort_IT+0x3a2>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a1e      	ldr	r2, [pc, #120]	@ (8005688 <HAL_DMA_Abort_IT+0x3f8>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d00e      	beq.n	8005632 <HAL_DMA_Abort_IT+0x3a2>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a1c      	ldr	r2, [pc, #112]	@ (800568c <HAL_DMA_Abort_IT+0x3fc>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d009      	beq.n	8005632 <HAL_DMA_Abort_IT+0x3a2>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a1b      	ldr	r2, [pc, #108]	@ (8005690 <HAL_DMA_Abort_IT+0x400>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d004      	beq.n	8005632 <HAL_DMA_Abort_IT+0x3a2>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a19      	ldr	r2, [pc, #100]	@ (8005694 <HAL_DMA_Abort_IT+0x404>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d132      	bne.n	8005698 <HAL_DMA_Abort_IT+0x408>
 8005632:	2301      	movs	r3, #1
 8005634:	e031      	b.n	800569a <HAL_DMA_Abort_IT+0x40a>
 8005636:	bf00      	nop
 8005638:	40020010 	.word	0x40020010
 800563c:	40020028 	.word	0x40020028
 8005640:	40020040 	.word	0x40020040
 8005644:	40020058 	.word	0x40020058
 8005648:	40020070 	.word	0x40020070
 800564c:	40020088 	.word	0x40020088
 8005650:	400200a0 	.word	0x400200a0
 8005654:	400200b8 	.word	0x400200b8
 8005658:	40020410 	.word	0x40020410
 800565c:	40020428 	.word	0x40020428
 8005660:	40020440 	.word	0x40020440
 8005664:	40020458 	.word	0x40020458
 8005668:	40020470 	.word	0x40020470
 800566c:	40020488 	.word	0x40020488
 8005670:	400204a0 	.word	0x400204a0
 8005674:	400204b8 	.word	0x400204b8
 8005678:	58025408 	.word	0x58025408
 800567c:	5802541c 	.word	0x5802541c
 8005680:	58025430 	.word	0x58025430
 8005684:	58025444 	.word	0x58025444
 8005688:	58025458 	.word	0x58025458
 800568c:	5802546c 	.word	0x5802546c
 8005690:	58025480 	.word	0x58025480
 8005694:	58025494 	.word	0x58025494
 8005698:	2300      	movs	r3, #0
 800569a:	2b00      	cmp	r3, #0
 800569c:	d028      	beq.n	80056f0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056a8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80056ac:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056b2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056b8:	f003 031f 	and.w	r3, r3, #31
 80056bc:	2201      	movs	r2, #1
 80056be:	409a      	lsls	r2, r3
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80056c8:	687a      	ldr	r2, [r7, #4]
 80056ca:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80056cc:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d00c      	beq.n	80056f0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056e0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80056e4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056ea:	687a      	ldr	r2, [r7, #4]
 80056ec:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80056ee:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2201      	movs	r2, #1
 80056f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2200      	movs	r2, #0
 80056fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005704:	2b00      	cmp	r3, #0
 8005706:	d003      	beq.n	8005710 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005710:	2300      	movs	r3, #0
}
 8005712:	4618      	mov	r0, r3
 8005714:	3710      	adds	r7, #16
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}
 800571a:	bf00      	nop

0800571c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b08a      	sub	sp, #40	@ 0x28
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005724:	2300      	movs	r3, #0
 8005726:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005728:	4b67      	ldr	r3, [pc, #412]	@ (80058c8 <HAL_DMA_IRQHandler+0x1ac>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a67      	ldr	r2, [pc, #412]	@ (80058cc <HAL_DMA_IRQHandler+0x1b0>)
 800572e:	fba2 2303 	umull	r2, r3, r2, r3
 8005732:	0a9b      	lsrs	r3, r3, #10
 8005734:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800573a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005740:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005742:	6a3b      	ldr	r3, [r7, #32]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005748:	69fb      	ldr	r3, [r7, #28]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a5f      	ldr	r2, [pc, #380]	@ (80058d0 <HAL_DMA_IRQHandler+0x1b4>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d04a      	beq.n	80057ee <HAL_DMA_IRQHandler+0xd2>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a5d      	ldr	r2, [pc, #372]	@ (80058d4 <HAL_DMA_IRQHandler+0x1b8>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d045      	beq.n	80057ee <HAL_DMA_IRQHandler+0xd2>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a5c      	ldr	r2, [pc, #368]	@ (80058d8 <HAL_DMA_IRQHandler+0x1bc>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d040      	beq.n	80057ee <HAL_DMA_IRQHandler+0xd2>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a5a      	ldr	r2, [pc, #360]	@ (80058dc <HAL_DMA_IRQHandler+0x1c0>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d03b      	beq.n	80057ee <HAL_DMA_IRQHandler+0xd2>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a59      	ldr	r2, [pc, #356]	@ (80058e0 <HAL_DMA_IRQHandler+0x1c4>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d036      	beq.n	80057ee <HAL_DMA_IRQHandler+0xd2>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a57      	ldr	r2, [pc, #348]	@ (80058e4 <HAL_DMA_IRQHandler+0x1c8>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d031      	beq.n	80057ee <HAL_DMA_IRQHandler+0xd2>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a56      	ldr	r2, [pc, #344]	@ (80058e8 <HAL_DMA_IRQHandler+0x1cc>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d02c      	beq.n	80057ee <HAL_DMA_IRQHandler+0xd2>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a54      	ldr	r2, [pc, #336]	@ (80058ec <HAL_DMA_IRQHandler+0x1d0>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d027      	beq.n	80057ee <HAL_DMA_IRQHandler+0xd2>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a53      	ldr	r2, [pc, #332]	@ (80058f0 <HAL_DMA_IRQHandler+0x1d4>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d022      	beq.n	80057ee <HAL_DMA_IRQHandler+0xd2>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a51      	ldr	r2, [pc, #324]	@ (80058f4 <HAL_DMA_IRQHandler+0x1d8>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d01d      	beq.n	80057ee <HAL_DMA_IRQHandler+0xd2>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a50      	ldr	r2, [pc, #320]	@ (80058f8 <HAL_DMA_IRQHandler+0x1dc>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d018      	beq.n	80057ee <HAL_DMA_IRQHandler+0xd2>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a4e      	ldr	r2, [pc, #312]	@ (80058fc <HAL_DMA_IRQHandler+0x1e0>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d013      	beq.n	80057ee <HAL_DMA_IRQHandler+0xd2>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a4d      	ldr	r2, [pc, #308]	@ (8005900 <HAL_DMA_IRQHandler+0x1e4>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d00e      	beq.n	80057ee <HAL_DMA_IRQHandler+0xd2>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a4b      	ldr	r2, [pc, #300]	@ (8005904 <HAL_DMA_IRQHandler+0x1e8>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d009      	beq.n	80057ee <HAL_DMA_IRQHandler+0xd2>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a4a      	ldr	r2, [pc, #296]	@ (8005908 <HAL_DMA_IRQHandler+0x1ec>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d004      	beq.n	80057ee <HAL_DMA_IRQHandler+0xd2>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a48      	ldr	r2, [pc, #288]	@ (800590c <HAL_DMA_IRQHandler+0x1f0>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d101      	bne.n	80057f2 <HAL_DMA_IRQHandler+0xd6>
 80057ee:	2301      	movs	r3, #1
 80057f0:	e000      	b.n	80057f4 <HAL_DMA_IRQHandler+0xd8>
 80057f2:	2300      	movs	r3, #0
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	f000 842b 	beq.w	8006050 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057fe:	f003 031f 	and.w	r3, r3, #31
 8005802:	2208      	movs	r2, #8
 8005804:	409a      	lsls	r2, r3
 8005806:	69bb      	ldr	r3, [r7, #24]
 8005808:	4013      	ands	r3, r2
 800580a:	2b00      	cmp	r3, #0
 800580c:	f000 80a2 	beq.w	8005954 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a2e      	ldr	r2, [pc, #184]	@ (80058d0 <HAL_DMA_IRQHandler+0x1b4>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d04a      	beq.n	80058b0 <HAL_DMA_IRQHandler+0x194>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a2d      	ldr	r2, [pc, #180]	@ (80058d4 <HAL_DMA_IRQHandler+0x1b8>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d045      	beq.n	80058b0 <HAL_DMA_IRQHandler+0x194>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a2b      	ldr	r2, [pc, #172]	@ (80058d8 <HAL_DMA_IRQHandler+0x1bc>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d040      	beq.n	80058b0 <HAL_DMA_IRQHandler+0x194>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a2a      	ldr	r2, [pc, #168]	@ (80058dc <HAL_DMA_IRQHandler+0x1c0>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d03b      	beq.n	80058b0 <HAL_DMA_IRQHandler+0x194>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a28      	ldr	r2, [pc, #160]	@ (80058e0 <HAL_DMA_IRQHandler+0x1c4>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d036      	beq.n	80058b0 <HAL_DMA_IRQHandler+0x194>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a27      	ldr	r2, [pc, #156]	@ (80058e4 <HAL_DMA_IRQHandler+0x1c8>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d031      	beq.n	80058b0 <HAL_DMA_IRQHandler+0x194>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a25      	ldr	r2, [pc, #148]	@ (80058e8 <HAL_DMA_IRQHandler+0x1cc>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d02c      	beq.n	80058b0 <HAL_DMA_IRQHandler+0x194>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a24      	ldr	r2, [pc, #144]	@ (80058ec <HAL_DMA_IRQHandler+0x1d0>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d027      	beq.n	80058b0 <HAL_DMA_IRQHandler+0x194>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a22      	ldr	r2, [pc, #136]	@ (80058f0 <HAL_DMA_IRQHandler+0x1d4>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d022      	beq.n	80058b0 <HAL_DMA_IRQHandler+0x194>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a21      	ldr	r2, [pc, #132]	@ (80058f4 <HAL_DMA_IRQHandler+0x1d8>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d01d      	beq.n	80058b0 <HAL_DMA_IRQHandler+0x194>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a1f      	ldr	r2, [pc, #124]	@ (80058f8 <HAL_DMA_IRQHandler+0x1dc>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d018      	beq.n	80058b0 <HAL_DMA_IRQHandler+0x194>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a1e      	ldr	r2, [pc, #120]	@ (80058fc <HAL_DMA_IRQHandler+0x1e0>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d013      	beq.n	80058b0 <HAL_DMA_IRQHandler+0x194>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a1c      	ldr	r2, [pc, #112]	@ (8005900 <HAL_DMA_IRQHandler+0x1e4>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d00e      	beq.n	80058b0 <HAL_DMA_IRQHandler+0x194>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a1b      	ldr	r2, [pc, #108]	@ (8005904 <HAL_DMA_IRQHandler+0x1e8>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d009      	beq.n	80058b0 <HAL_DMA_IRQHandler+0x194>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a19      	ldr	r2, [pc, #100]	@ (8005908 <HAL_DMA_IRQHandler+0x1ec>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d004      	beq.n	80058b0 <HAL_DMA_IRQHandler+0x194>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a18      	ldr	r2, [pc, #96]	@ (800590c <HAL_DMA_IRQHandler+0x1f0>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d12f      	bne.n	8005910 <HAL_DMA_IRQHandler+0x1f4>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f003 0304 	and.w	r3, r3, #4
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	bf14      	ite	ne
 80058be:	2301      	movne	r3, #1
 80058c0:	2300      	moveq	r3, #0
 80058c2:	b2db      	uxtb	r3, r3
 80058c4:	e02e      	b.n	8005924 <HAL_DMA_IRQHandler+0x208>
 80058c6:	bf00      	nop
 80058c8:	24000000 	.word	0x24000000
 80058cc:	1b4e81b5 	.word	0x1b4e81b5
 80058d0:	40020010 	.word	0x40020010
 80058d4:	40020028 	.word	0x40020028
 80058d8:	40020040 	.word	0x40020040
 80058dc:	40020058 	.word	0x40020058
 80058e0:	40020070 	.word	0x40020070
 80058e4:	40020088 	.word	0x40020088
 80058e8:	400200a0 	.word	0x400200a0
 80058ec:	400200b8 	.word	0x400200b8
 80058f0:	40020410 	.word	0x40020410
 80058f4:	40020428 	.word	0x40020428
 80058f8:	40020440 	.word	0x40020440
 80058fc:	40020458 	.word	0x40020458
 8005900:	40020470 	.word	0x40020470
 8005904:	40020488 	.word	0x40020488
 8005908:	400204a0 	.word	0x400204a0
 800590c:	400204b8 	.word	0x400204b8
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f003 0308 	and.w	r3, r3, #8
 800591a:	2b00      	cmp	r3, #0
 800591c:	bf14      	ite	ne
 800591e:	2301      	movne	r3, #1
 8005920:	2300      	moveq	r3, #0
 8005922:	b2db      	uxtb	r3, r3
 8005924:	2b00      	cmp	r3, #0
 8005926:	d015      	beq.n	8005954 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f022 0204 	bic.w	r2, r2, #4
 8005936:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800593c:	f003 031f 	and.w	r3, r3, #31
 8005940:	2208      	movs	r2, #8
 8005942:	409a      	lsls	r2, r3
 8005944:	6a3b      	ldr	r3, [r7, #32]
 8005946:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800594c:	f043 0201 	orr.w	r2, r3, #1
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005958:	f003 031f 	and.w	r3, r3, #31
 800595c:	69ba      	ldr	r2, [r7, #24]
 800595e:	fa22 f303 	lsr.w	r3, r2, r3
 8005962:	f003 0301 	and.w	r3, r3, #1
 8005966:	2b00      	cmp	r3, #0
 8005968:	d06e      	beq.n	8005a48 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a69      	ldr	r2, [pc, #420]	@ (8005b14 <HAL_DMA_IRQHandler+0x3f8>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d04a      	beq.n	8005a0a <HAL_DMA_IRQHandler+0x2ee>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a67      	ldr	r2, [pc, #412]	@ (8005b18 <HAL_DMA_IRQHandler+0x3fc>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d045      	beq.n	8005a0a <HAL_DMA_IRQHandler+0x2ee>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a66      	ldr	r2, [pc, #408]	@ (8005b1c <HAL_DMA_IRQHandler+0x400>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d040      	beq.n	8005a0a <HAL_DMA_IRQHandler+0x2ee>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a64      	ldr	r2, [pc, #400]	@ (8005b20 <HAL_DMA_IRQHandler+0x404>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d03b      	beq.n	8005a0a <HAL_DMA_IRQHandler+0x2ee>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a63      	ldr	r2, [pc, #396]	@ (8005b24 <HAL_DMA_IRQHandler+0x408>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d036      	beq.n	8005a0a <HAL_DMA_IRQHandler+0x2ee>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a61      	ldr	r2, [pc, #388]	@ (8005b28 <HAL_DMA_IRQHandler+0x40c>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d031      	beq.n	8005a0a <HAL_DMA_IRQHandler+0x2ee>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a60      	ldr	r2, [pc, #384]	@ (8005b2c <HAL_DMA_IRQHandler+0x410>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d02c      	beq.n	8005a0a <HAL_DMA_IRQHandler+0x2ee>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a5e      	ldr	r2, [pc, #376]	@ (8005b30 <HAL_DMA_IRQHandler+0x414>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d027      	beq.n	8005a0a <HAL_DMA_IRQHandler+0x2ee>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a5d      	ldr	r2, [pc, #372]	@ (8005b34 <HAL_DMA_IRQHandler+0x418>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d022      	beq.n	8005a0a <HAL_DMA_IRQHandler+0x2ee>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a5b      	ldr	r2, [pc, #364]	@ (8005b38 <HAL_DMA_IRQHandler+0x41c>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d01d      	beq.n	8005a0a <HAL_DMA_IRQHandler+0x2ee>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a5a      	ldr	r2, [pc, #360]	@ (8005b3c <HAL_DMA_IRQHandler+0x420>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d018      	beq.n	8005a0a <HAL_DMA_IRQHandler+0x2ee>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a58      	ldr	r2, [pc, #352]	@ (8005b40 <HAL_DMA_IRQHandler+0x424>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d013      	beq.n	8005a0a <HAL_DMA_IRQHandler+0x2ee>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a57      	ldr	r2, [pc, #348]	@ (8005b44 <HAL_DMA_IRQHandler+0x428>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d00e      	beq.n	8005a0a <HAL_DMA_IRQHandler+0x2ee>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a55      	ldr	r2, [pc, #340]	@ (8005b48 <HAL_DMA_IRQHandler+0x42c>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d009      	beq.n	8005a0a <HAL_DMA_IRQHandler+0x2ee>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a54      	ldr	r2, [pc, #336]	@ (8005b4c <HAL_DMA_IRQHandler+0x430>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d004      	beq.n	8005a0a <HAL_DMA_IRQHandler+0x2ee>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a52      	ldr	r2, [pc, #328]	@ (8005b50 <HAL_DMA_IRQHandler+0x434>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d10a      	bne.n	8005a20 <HAL_DMA_IRQHandler+0x304>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	695b      	ldr	r3, [r3, #20]
 8005a10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	bf14      	ite	ne
 8005a18:	2301      	movne	r3, #1
 8005a1a:	2300      	moveq	r3, #0
 8005a1c:	b2db      	uxtb	r3, r3
 8005a1e:	e003      	b.n	8005a28 <HAL_DMA_IRQHandler+0x30c>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	2300      	movs	r3, #0
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d00d      	beq.n	8005a48 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a30:	f003 031f 	and.w	r3, r3, #31
 8005a34:	2201      	movs	r2, #1
 8005a36:	409a      	lsls	r2, r3
 8005a38:	6a3b      	ldr	r3, [r7, #32]
 8005a3a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a40:	f043 0202 	orr.w	r2, r3, #2
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a4c:	f003 031f 	and.w	r3, r3, #31
 8005a50:	2204      	movs	r2, #4
 8005a52:	409a      	lsls	r2, r3
 8005a54:	69bb      	ldr	r3, [r7, #24]
 8005a56:	4013      	ands	r3, r2
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	f000 808f 	beq.w	8005b7c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a2c      	ldr	r2, [pc, #176]	@ (8005b14 <HAL_DMA_IRQHandler+0x3f8>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d04a      	beq.n	8005afe <HAL_DMA_IRQHandler+0x3e2>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a2a      	ldr	r2, [pc, #168]	@ (8005b18 <HAL_DMA_IRQHandler+0x3fc>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d045      	beq.n	8005afe <HAL_DMA_IRQHandler+0x3e2>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a29      	ldr	r2, [pc, #164]	@ (8005b1c <HAL_DMA_IRQHandler+0x400>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d040      	beq.n	8005afe <HAL_DMA_IRQHandler+0x3e2>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a27      	ldr	r2, [pc, #156]	@ (8005b20 <HAL_DMA_IRQHandler+0x404>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d03b      	beq.n	8005afe <HAL_DMA_IRQHandler+0x3e2>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a26      	ldr	r2, [pc, #152]	@ (8005b24 <HAL_DMA_IRQHandler+0x408>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d036      	beq.n	8005afe <HAL_DMA_IRQHandler+0x3e2>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a24      	ldr	r2, [pc, #144]	@ (8005b28 <HAL_DMA_IRQHandler+0x40c>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d031      	beq.n	8005afe <HAL_DMA_IRQHandler+0x3e2>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a23      	ldr	r2, [pc, #140]	@ (8005b2c <HAL_DMA_IRQHandler+0x410>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d02c      	beq.n	8005afe <HAL_DMA_IRQHandler+0x3e2>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a21      	ldr	r2, [pc, #132]	@ (8005b30 <HAL_DMA_IRQHandler+0x414>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d027      	beq.n	8005afe <HAL_DMA_IRQHandler+0x3e2>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a20      	ldr	r2, [pc, #128]	@ (8005b34 <HAL_DMA_IRQHandler+0x418>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d022      	beq.n	8005afe <HAL_DMA_IRQHandler+0x3e2>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a1e      	ldr	r2, [pc, #120]	@ (8005b38 <HAL_DMA_IRQHandler+0x41c>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d01d      	beq.n	8005afe <HAL_DMA_IRQHandler+0x3e2>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a1d      	ldr	r2, [pc, #116]	@ (8005b3c <HAL_DMA_IRQHandler+0x420>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d018      	beq.n	8005afe <HAL_DMA_IRQHandler+0x3e2>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a1b      	ldr	r2, [pc, #108]	@ (8005b40 <HAL_DMA_IRQHandler+0x424>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d013      	beq.n	8005afe <HAL_DMA_IRQHandler+0x3e2>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a1a      	ldr	r2, [pc, #104]	@ (8005b44 <HAL_DMA_IRQHandler+0x428>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d00e      	beq.n	8005afe <HAL_DMA_IRQHandler+0x3e2>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a18      	ldr	r2, [pc, #96]	@ (8005b48 <HAL_DMA_IRQHandler+0x42c>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d009      	beq.n	8005afe <HAL_DMA_IRQHandler+0x3e2>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a17      	ldr	r2, [pc, #92]	@ (8005b4c <HAL_DMA_IRQHandler+0x430>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d004      	beq.n	8005afe <HAL_DMA_IRQHandler+0x3e2>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a15      	ldr	r2, [pc, #84]	@ (8005b50 <HAL_DMA_IRQHandler+0x434>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d12a      	bne.n	8005b54 <HAL_DMA_IRQHandler+0x438>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f003 0302 	and.w	r3, r3, #2
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	bf14      	ite	ne
 8005b0c:	2301      	movne	r3, #1
 8005b0e:	2300      	moveq	r3, #0
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	e023      	b.n	8005b5c <HAL_DMA_IRQHandler+0x440>
 8005b14:	40020010 	.word	0x40020010
 8005b18:	40020028 	.word	0x40020028
 8005b1c:	40020040 	.word	0x40020040
 8005b20:	40020058 	.word	0x40020058
 8005b24:	40020070 	.word	0x40020070
 8005b28:	40020088 	.word	0x40020088
 8005b2c:	400200a0 	.word	0x400200a0
 8005b30:	400200b8 	.word	0x400200b8
 8005b34:	40020410 	.word	0x40020410
 8005b38:	40020428 	.word	0x40020428
 8005b3c:	40020440 	.word	0x40020440
 8005b40:	40020458 	.word	0x40020458
 8005b44:	40020470 	.word	0x40020470
 8005b48:	40020488 	.word	0x40020488
 8005b4c:	400204a0 	.word	0x400204a0
 8005b50:	400204b8 	.word	0x400204b8
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d00d      	beq.n	8005b7c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b64:	f003 031f 	and.w	r3, r3, #31
 8005b68:	2204      	movs	r2, #4
 8005b6a:	409a      	lsls	r2, r3
 8005b6c:	6a3b      	ldr	r3, [r7, #32]
 8005b6e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b74:	f043 0204 	orr.w	r2, r3, #4
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b80:	f003 031f 	and.w	r3, r3, #31
 8005b84:	2210      	movs	r2, #16
 8005b86:	409a      	lsls	r2, r3
 8005b88:	69bb      	ldr	r3, [r7, #24]
 8005b8a:	4013      	ands	r3, r2
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	f000 80a6 	beq.w	8005cde <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a85      	ldr	r2, [pc, #532]	@ (8005dac <HAL_DMA_IRQHandler+0x690>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d04a      	beq.n	8005c32 <HAL_DMA_IRQHandler+0x516>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a83      	ldr	r2, [pc, #524]	@ (8005db0 <HAL_DMA_IRQHandler+0x694>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d045      	beq.n	8005c32 <HAL_DMA_IRQHandler+0x516>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a82      	ldr	r2, [pc, #520]	@ (8005db4 <HAL_DMA_IRQHandler+0x698>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d040      	beq.n	8005c32 <HAL_DMA_IRQHandler+0x516>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a80      	ldr	r2, [pc, #512]	@ (8005db8 <HAL_DMA_IRQHandler+0x69c>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d03b      	beq.n	8005c32 <HAL_DMA_IRQHandler+0x516>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a7f      	ldr	r2, [pc, #508]	@ (8005dbc <HAL_DMA_IRQHandler+0x6a0>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d036      	beq.n	8005c32 <HAL_DMA_IRQHandler+0x516>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a7d      	ldr	r2, [pc, #500]	@ (8005dc0 <HAL_DMA_IRQHandler+0x6a4>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d031      	beq.n	8005c32 <HAL_DMA_IRQHandler+0x516>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a7c      	ldr	r2, [pc, #496]	@ (8005dc4 <HAL_DMA_IRQHandler+0x6a8>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d02c      	beq.n	8005c32 <HAL_DMA_IRQHandler+0x516>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a7a      	ldr	r2, [pc, #488]	@ (8005dc8 <HAL_DMA_IRQHandler+0x6ac>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d027      	beq.n	8005c32 <HAL_DMA_IRQHandler+0x516>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a79      	ldr	r2, [pc, #484]	@ (8005dcc <HAL_DMA_IRQHandler+0x6b0>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d022      	beq.n	8005c32 <HAL_DMA_IRQHandler+0x516>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a77      	ldr	r2, [pc, #476]	@ (8005dd0 <HAL_DMA_IRQHandler+0x6b4>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d01d      	beq.n	8005c32 <HAL_DMA_IRQHandler+0x516>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a76      	ldr	r2, [pc, #472]	@ (8005dd4 <HAL_DMA_IRQHandler+0x6b8>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d018      	beq.n	8005c32 <HAL_DMA_IRQHandler+0x516>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a74      	ldr	r2, [pc, #464]	@ (8005dd8 <HAL_DMA_IRQHandler+0x6bc>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d013      	beq.n	8005c32 <HAL_DMA_IRQHandler+0x516>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a73      	ldr	r2, [pc, #460]	@ (8005ddc <HAL_DMA_IRQHandler+0x6c0>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d00e      	beq.n	8005c32 <HAL_DMA_IRQHandler+0x516>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a71      	ldr	r2, [pc, #452]	@ (8005de0 <HAL_DMA_IRQHandler+0x6c4>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d009      	beq.n	8005c32 <HAL_DMA_IRQHandler+0x516>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a70      	ldr	r2, [pc, #448]	@ (8005de4 <HAL_DMA_IRQHandler+0x6c8>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d004      	beq.n	8005c32 <HAL_DMA_IRQHandler+0x516>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a6e      	ldr	r2, [pc, #440]	@ (8005de8 <HAL_DMA_IRQHandler+0x6cc>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d10a      	bne.n	8005c48 <HAL_DMA_IRQHandler+0x52c>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f003 0308 	and.w	r3, r3, #8
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	bf14      	ite	ne
 8005c40:	2301      	movne	r3, #1
 8005c42:	2300      	moveq	r3, #0
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	e009      	b.n	8005c5c <HAL_DMA_IRQHandler+0x540>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f003 0304 	and.w	r3, r3, #4
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	bf14      	ite	ne
 8005c56:	2301      	movne	r3, #1
 8005c58:	2300      	moveq	r3, #0
 8005c5a:	b2db      	uxtb	r3, r3
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d03e      	beq.n	8005cde <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c64:	f003 031f 	and.w	r3, r3, #31
 8005c68:	2210      	movs	r2, #16
 8005c6a:	409a      	lsls	r2, r3
 8005c6c:	6a3b      	ldr	r3, [r7, #32]
 8005c6e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d018      	beq.n	8005cb0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d108      	bne.n	8005c9e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d024      	beq.n	8005cde <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	4798      	blx	r3
 8005c9c:	e01f      	b.n	8005cde <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d01b      	beq.n	8005cde <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	4798      	blx	r3
 8005cae:	e016      	b.n	8005cde <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d107      	bne.n	8005cce <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	681a      	ldr	r2, [r3, #0]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f022 0208 	bic.w	r2, r2, #8
 8005ccc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d003      	beq.n	8005cde <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ce2:	f003 031f 	and.w	r3, r3, #31
 8005ce6:	2220      	movs	r2, #32
 8005ce8:	409a      	lsls	r2, r3
 8005cea:	69bb      	ldr	r3, [r7, #24]
 8005cec:	4013      	ands	r3, r2
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	f000 8110 	beq.w	8005f14 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a2c      	ldr	r2, [pc, #176]	@ (8005dac <HAL_DMA_IRQHandler+0x690>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d04a      	beq.n	8005d94 <HAL_DMA_IRQHandler+0x678>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a2b      	ldr	r2, [pc, #172]	@ (8005db0 <HAL_DMA_IRQHandler+0x694>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d045      	beq.n	8005d94 <HAL_DMA_IRQHandler+0x678>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a29      	ldr	r2, [pc, #164]	@ (8005db4 <HAL_DMA_IRQHandler+0x698>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d040      	beq.n	8005d94 <HAL_DMA_IRQHandler+0x678>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a28      	ldr	r2, [pc, #160]	@ (8005db8 <HAL_DMA_IRQHandler+0x69c>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d03b      	beq.n	8005d94 <HAL_DMA_IRQHandler+0x678>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a26      	ldr	r2, [pc, #152]	@ (8005dbc <HAL_DMA_IRQHandler+0x6a0>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d036      	beq.n	8005d94 <HAL_DMA_IRQHandler+0x678>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a25      	ldr	r2, [pc, #148]	@ (8005dc0 <HAL_DMA_IRQHandler+0x6a4>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d031      	beq.n	8005d94 <HAL_DMA_IRQHandler+0x678>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a23      	ldr	r2, [pc, #140]	@ (8005dc4 <HAL_DMA_IRQHandler+0x6a8>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d02c      	beq.n	8005d94 <HAL_DMA_IRQHandler+0x678>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a22      	ldr	r2, [pc, #136]	@ (8005dc8 <HAL_DMA_IRQHandler+0x6ac>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d027      	beq.n	8005d94 <HAL_DMA_IRQHandler+0x678>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a20      	ldr	r2, [pc, #128]	@ (8005dcc <HAL_DMA_IRQHandler+0x6b0>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d022      	beq.n	8005d94 <HAL_DMA_IRQHandler+0x678>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a1f      	ldr	r2, [pc, #124]	@ (8005dd0 <HAL_DMA_IRQHandler+0x6b4>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d01d      	beq.n	8005d94 <HAL_DMA_IRQHandler+0x678>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a1d      	ldr	r2, [pc, #116]	@ (8005dd4 <HAL_DMA_IRQHandler+0x6b8>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d018      	beq.n	8005d94 <HAL_DMA_IRQHandler+0x678>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a1c      	ldr	r2, [pc, #112]	@ (8005dd8 <HAL_DMA_IRQHandler+0x6bc>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d013      	beq.n	8005d94 <HAL_DMA_IRQHandler+0x678>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a1a      	ldr	r2, [pc, #104]	@ (8005ddc <HAL_DMA_IRQHandler+0x6c0>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d00e      	beq.n	8005d94 <HAL_DMA_IRQHandler+0x678>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a19      	ldr	r2, [pc, #100]	@ (8005de0 <HAL_DMA_IRQHandler+0x6c4>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d009      	beq.n	8005d94 <HAL_DMA_IRQHandler+0x678>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a17      	ldr	r2, [pc, #92]	@ (8005de4 <HAL_DMA_IRQHandler+0x6c8>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d004      	beq.n	8005d94 <HAL_DMA_IRQHandler+0x678>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a16      	ldr	r2, [pc, #88]	@ (8005de8 <HAL_DMA_IRQHandler+0x6cc>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d12b      	bne.n	8005dec <HAL_DMA_IRQHandler+0x6d0>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f003 0310 	and.w	r3, r3, #16
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	bf14      	ite	ne
 8005da2:	2301      	movne	r3, #1
 8005da4:	2300      	moveq	r3, #0
 8005da6:	b2db      	uxtb	r3, r3
 8005da8:	e02a      	b.n	8005e00 <HAL_DMA_IRQHandler+0x6e4>
 8005daa:	bf00      	nop
 8005dac:	40020010 	.word	0x40020010
 8005db0:	40020028 	.word	0x40020028
 8005db4:	40020040 	.word	0x40020040
 8005db8:	40020058 	.word	0x40020058
 8005dbc:	40020070 	.word	0x40020070
 8005dc0:	40020088 	.word	0x40020088
 8005dc4:	400200a0 	.word	0x400200a0
 8005dc8:	400200b8 	.word	0x400200b8
 8005dcc:	40020410 	.word	0x40020410
 8005dd0:	40020428 	.word	0x40020428
 8005dd4:	40020440 	.word	0x40020440
 8005dd8:	40020458 	.word	0x40020458
 8005ddc:	40020470 	.word	0x40020470
 8005de0:	40020488 	.word	0x40020488
 8005de4:	400204a0 	.word	0x400204a0
 8005de8:	400204b8 	.word	0x400204b8
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f003 0302 	and.w	r3, r3, #2
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	bf14      	ite	ne
 8005dfa:	2301      	movne	r3, #1
 8005dfc:	2300      	moveq	r3, #0
 8005dfe:	b2db      	uxtb	r3, r3
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	f000 8087 	beq.w	8005f14 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e0a:	f003 031f 	and.w	r3, r3, #31
 8005e0e:	2220      	movs	r2, #32
 8005e10:	409a      	lsls	r2, r3
 8005e12:	6a3b      	ldr	r3, [r7, #32]
 8005e14:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005e1c:	b2db      	uxtb	r3, r3
 8005e1e:	2b04      	cmp	r3, #4
 8005e20:	d139      	bne.n	8005e96 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f022 0216 	bic.w	r2, r2, #22
 8005e30:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	695a      	ldr	r2, [r3, #20]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005e40:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d103      	bne.n	8005e52 <HAL_DMA_IRQHandler+0x736>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d007      	beq.n	8005e62 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	681a      	ldr	r2, [r3, #0]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f022 0208 	bic.w	r2, r2, #8
 8005e60:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e66:	f003 031f 	and.w	r3, r3, #31
 8005e6a:	223f      	movs	r2, #63	@ 0x3f
 8005e6c:	409a      	lsls	r2, r3
 8005e6e:	6a3b      	ldr	r3, [r7, #32]
 8005e70:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2201      	movs	r2, #1
 8005e76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	f000 834a 	beq.w	8006520 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	4798      	blx	r3
          }
          return;
 8005e94:	e344      	b.n	8006520 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d018      	beq.n	8005ed6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d108      	bne.n	8005ec4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d02c      	beq.n	8005f14 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	4798      	blx	r3
 8005ec2:	e027      	b.n	8005f14 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d023      	beq.n	8005f14 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	4798      	blx	r3
 8005ed4:	e01e      	b.n	8005f14 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d10f      	bne.n	8005f04 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	681a      	ldr	r2, [r3, #0]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f022 0210 	bic.w	r2, r2, #16
 8005ef2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2200      	movs	r2, #0
 8005f00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d003      	beq.n	8005f14 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	f000 8306 	beq.w	800652a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f22:	f003 0301 	and.w	r3, r3, #1
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	f000 8088 	beq.w	800603c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2204      	movs	r2, #4
 8005f30:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a7a      	ldr	r2, [pc, #488]	@ (8006124 <HAL_DMA_IRQHandler+0xa08>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d04a      	beq.n	8005fd4 <HAL_DMA_IRQHandler+0x8b8>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a79      	ldr	r2, [pc, #484]	@ (8006128 <HAL_DMA_IRQHandler+0xa0c>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d045      	beq.n	8005fd4 <HAL_DMA_IRQHandler+0x8b8>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a77      	ldr	r2, [pc, #476]	@ (800612c <HAL_DMA_IRQHandler+0xa10>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d040      	beq.n	8005fd4 <HAL_DMA_IRQHandler+0x8b8>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a76      	ldr	r2, [pc, #472]	@ (8006130 <HAL_DMA_IRQHandler+0xa14>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d03b      	beq.n	8005fd4 <HAL_DMA_IRQHandler+0x8b8>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a74      	ldr	r2, [pc, #464]	@ (8006134 <HAL_DMA_IRQHandler+0xa18>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d036      	beq.n	8005fd4 <HAL_DMA_IRQHandler+0x8b8>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a73      	ldr	r2, [pc, #460]	@ (8006138 <HAL_DMA_IRQHandler+0xa1c>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d031      	beq.n	8005fd4 <HAL_DMA_IRQHandler+0x8b8>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a71      	ldr	r2, [pc, #452]	@ (800613c <HAL_DMA_IRQHandler+0xa20>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d02c      	beq.n	8005fd4 <HAL_DMA_IRQHandler+0x8b8>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a70      	ldr	r2, [pc, #448]	@ (8006140 <HAL_DMA_IRQHandler+0xa24>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d027      	beq.n	8005fd4 <HAL_DMA_IRQHandler+0x8b8>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a6e      	ldr	r2, [pc, #440]	@ (8006144 <HAL_DMA_IRQHandler+0xa28>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d022      	beq.n	8005fd4 <HAL_DMA_IRQHandler+0x8b8>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a6d      	ldr	r2, [pc, #436]	@ (8006148 <HAL_DMA_IRQHandler+0xa2c>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d01d      	beq.n	8005fd4 <HAL_DMA_IRQHandler+0x8b8>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a6b      	ldr	r2, [pc, #428]	@ (800614c <HAL_DMA_IRQHandler+0xa30>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d018      	beq.n	8005fd4 <HAL_DMA_IRQHandler+0x8b8>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a6a      	ldr	r2, [pc, #424]	@ (8006150 <HAL_DMA_IRQHandler+0xa34>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d013      	beq.n	8005fd4 <HAL_DMA_IRQHandler+0x8b8>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a68      	ldr	r2, [pc, #416]	@ (8006154 <HAL_DMA_IRQHandler+0xa38>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d00e      	beq.n	8005fd4 <HAL_DMA_IRQHandler+0x8b8>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a67      	ldr	r2, [pc, #412]	@ (8006158 <HAL_DMA_IRQHandler+0xa3c>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d009      	beq.n	8005fd4 <HAL_DMA_IRQHandler+0x8b8>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a65      	ldr	r2, [pc, #404]	@ (800615c <HAL_DMA_IRQHandler+0xa40>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d004      	beq.n	8005fd4 <HAL_DMA_IRQHandler+0x8b8>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a64      	ldr	r2, [pc, #400]	@ (8006160 <HAL_DMA_IRQHandler+0xa44>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d108      	bne.n	8005fe6 <HAL_DMA_IRQHandler+0x8ca>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	681a      	ldr	r2, [r3, #0]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f022 0201 	bic.w	r2, r2, #1
 8005fe2:	601a      	str	r2, [r3, #0]
 8005fe4:	e007      	b.n	8005ff6 <HAL_DMA_IRQHandler+0x8da>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	681a      	ldr	r2, [r3, #0]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f022 0201 	bic.w	r2, r2, #1
 8005ff4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	3301      	adds	r3, #1
 8005ffa:	60fb      	str	r3, [r7, #12]
 8005ffc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ffe:	429a      	cmp	r2, r3
 8006000:	d307      	bcc.n	8006012 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f003 0301 	and.w	r3, r3, #1
 800600c:	2b00      	cmp	r3, #0
 800600e:	d1f2      	bne.n	8005ff6 <HAL_DMA_IRQHandler+0x8da>
 8006010:	e000      	b.n	8006014 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006012:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f003 0301 	and.w	r3, r3, #1
 800601e:	2b00      	cmp	r3, #0
 8006020:	d004      	beq.n	800602c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2203      	movs	r2, #3
 8006026:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800602a:	e003      	b.n	8006034 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2201      	movs	r2, #1
 8006030:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2200      	movs	r2, #0
 8006038:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006040:	2b00      	cmp	r3, #0
 8006042:	f000 8272 	beq.w	800652a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	4798      	blx	r3
 800604e:	e26c      	b.n	800652a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a43      	ldr	r2, [pc, #268]	@ (8006164 <HAL_DMA_IRQHandler+0xa48>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d022      	beq.n	80060a0 <HAL_DMA_IRQHandler+0x984>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a42      	ldr	r2, [pc, #264]	@ (8006168 <HAL_DMA_IRQHandler+0xa4c>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d01d      	beq.n	80060a0 <HAL_DMA_IRQHandler+0x984>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a40      	ldr	r2, [pc, #256]	@ (800616c <HAL_DMA_IRQHandler+0xa50>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d018      	beq.n	80060a0 <HAL_DMA_IRQHandler+0x984>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a3f      	ldr	r2, [pc, #252]	@ (8006170 <HAL_DMA_IRQHandler+0xa54>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d013      	beq.n	80060a0 <HAL_DMA_IRQHandler+0x984>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a3d      	ldr	r2, [pc, #244]	@ (8006174 <HAL_DMA_IRQHandler+0xa58>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d00e      	beq.n	80060a0 <HAL_DMA_IRQHandler+0x984>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a3c      	ldr	r2, [pc, #240]	@ (8006178 <HAL_DMA_IRQHandler+0xa5c>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d009      	beq.n	80060a0 <HAL_DMA_IRQHandler+0x984>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a3a      	ldr	r2, [pc, #232]	@ (800617c <HAL_DMA_IRQHandler+0xa60>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d004      	beq.n	80060a0 <HAL_DMA_IRQHandler+0x984>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a39      	ldr	r2, [pc, #228]	@ (8006180 <HAL_DMA_IRQHandler+0xa64>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d101      	bne.n	80060a4 <HAL_DMA_IRQHandler+0x988>
 80060a0:	2301      	movs	r3, #1
 80060a2:	e000      	b.n	80060a6 <HAL_DMA_IRQHandler+0x98a>
 80060a4:	2300      	movs	r3, #0
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	f000 823f 	beq.w	800652a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060b8:	f003 031f 	and.w	r3, r3, #31
 80060bc:	2204      	movs	r2, #4
 80060be:	409a      	lsls	r2, r3
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	4013      	ands	r3, r2
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	f000 80cd 	beq.w	8006264 <HAL_DMA_IRQHandler+0xb48>
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	f003 0304 	and.w	r3, r3, #4
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	f000 80c7 	beq.w	8006264 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060da:	f003 031f 	and.w	r3, r3, #31
 80060de:	2204      	movs	r2, #4
 80060e0:	409a      	lsls	r2, r3
 80060e2:	69fb      	ldr	r3, [r7, #28]
 80060e4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d049      	beq.n	8006184 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d109      	bne.n	800610e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060fe:	2b00      	cmp	r3, #0
 8006100:	f000 8210 	beq.w	8006524 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800610c:	e20a      	b.n	8006524 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006112:	2b00      	cmp	r3, #0
 8006114:	f000 8206 	beq.w	8006524 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006120:	e200      	b.n	8006524 <HAL_DMA_IRQHandler+0xe08>
 8006122:	bf00      	nop
 8006124:	40020010 	.word	0x40020010
 8006128:	40020028 	.word	0x40020028
 800612c:	40020040 	.word	0x40020040
 8006130:	40020058 	.word	0x40020058
 8006134:	40020070 	.word	0x40020070
 8006138:	40020088 	.word	0x40020088
 800613c:	400200a0 	.word	0x400200a0
 8006140:	400200b8 	.word	0x400200b8
 8006144:	40020410 	.word	0x40020410
 8006148:	40020428 	.word	0x40020428
 800614c:	40020440 	.word	0x40020440
 8006150:	40020458 	.word	0x40020458
 8006154:	40020470 	.word	0x40020470
 8006158:	40020488 	.word	0x40020488
 800615c:	400204a0 	.word	0x400204a0
 8006160:	400204b8 	.word	0x400204b8
 8006164:	58025408 	.word	0x58025408
 8006168:	5802541c 	.word	0x5802541c
 800616c:	58025430 	.word	0x58025430
 8006170:	58025444 	.word	0x58025444
 8006174:	58025458 	.word	0x58025458
 8006178:	5802546c 	.word	0x5802546c
 800617c:	58025480 	.word	0x58025480
 8006180:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	f003 0320 	and.w	r3, r3, #32
 800618a:	2b00      	cmp	r3, #0
 800618c:	d160      	bne.n	8006250 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a7f      	ldr	r2, [pc, #508]	@ (8006390 <HAL_DMA_IRQHandler+0xc74>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d04a      	beq.n	800622e <HAL_DMA_IRQHandler+0xb12>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a7d      	ldr	r2, [pc, #500]	@ (8006394 <HAL_DMA_IRQHandler+0xc78>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d045      	beq.n	800622e <HAL_DMA_IRQHandler+0xb12>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a7c      	ldr	r2, [pc, #496]	@ (8006398 <HAL_DMA_IRQHandler+0xc7c>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d040      	beq.n	800622e <HAL_DMA_IRQHandler+0xb12>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a7a      	ldr	r2, [pc, #488]	@ (800639c <HAL_DMA_IRQHandler+0xc80>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d03b      	beq.n	800622e <HAL_DMA_IRQHandler+0xb12>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a79      	ldr	r2, [pc, #484]	@ (80063a0 <HAL_DMA_IRQHandler+0xc84>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d036      	beq.n	800622e <HAL_DMA_IRQHandler+0xb12>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a77      	ldr	r2, [pc, #476]	@ (80063a4 <HAL_DMA_IRQHandler+0xc88>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d031      	beq.n	800622e <HAL_DMA_IRQHandler+0xb12>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a76      	ldr	r2, [pc, #472]	@ (80063a8 <HAL_DMA_IRQHandler+0xc8c>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d02c      	beq.n	800622e <HAL_DMA_IRQHandler+0xb12>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a74      	ldr	r2, [pc, #464]	@ (80063ac <HAL_DMA_IRQHandler+0xc90>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d027      	beq.n	800622e <HAL_DMA_IRQHandler+0xb12>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a73      	ldr	r2, [pc, #460]	@ (80063b0 <HAL_DMA_IRQHandler+0xc94>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d022      	beq.n	800622e <HAL_DMA_IRQHandler+0xb12>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a71      	ldr	r2, [pc, #452]	@ (80063b4 <HAL_DMA_IRQHandler+0xc98>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d01d      	beq.n	800622e <HAL_DMA_IRQHandler+0xb12>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a70      	ldr	r2, [pc, #448]	@ (80063b8 <HAL_DMA_IRQHandler+0xc9c>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d018      	beq.n	800622e <HAL_DMA_IRQHandler+0xb12>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a6e      	ldr	r2, [pc, #440]	@ (80063bc <HAL_DMA_IRQHandler+0xca0>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d013      	beq.n	800622e <HAL_DMA_IRQHandler+0xb12>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a6d      	ldr	r2, [pc, #436]	@ (80063c0 <HAL_DMA_IRQHandler+0xca4>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d00e      	beq.n	800622e <HAL_DMA_IRQHandler+0xb12>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a6b      	ldr	r2, [pc, #428]	@ (80063c4 <HAL_DMA_IRQHandler+0xca8>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d009      	beq.n	800622e <HAL_DMA_IRQHandler+0xb12>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a6a      	ldr	r2, [pc, #424]	@ (80063c8 <HAL_DMA_IRQHandler+0xcac>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d004      	beq.n	800622e <HAL_DMA_IRQHandler+0xb12>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a68      	ldr	r2, [pc, #416]	@ (80063cc <HAL_DMA_IRQHandler+0xcb0>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d108      	bne.n	8006240 <HAL_DMA_IRQHandler+0xb24>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	681a      	ldr	r2, [r3, #0]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f022 0208 	bic.w	r2, r2, #8
 800623c:	601a      	str	r2, [r3, #0]
 800623e:	e007      	b.n	8006250 <HAL_DMA_IRQHandler+0xb34>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	681a      	ldr	r2, [r3, #0]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f022 0204 	bic.w	r2, r2, #4
 800624e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006254:	2b00      	cmp	r3, #0
 8006256:	f000 8165 	beq.w	8006524 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006262:	e15f      	b.n	8006524 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006268:	f003 031f 	and.w	r3, r3, #31
 800626c:	2202      	movs	r2, #2
 800626e:	409a      	lsls	r2, r3
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	4013      	ands	r3, r2
 8006274:	2b00      	cmp	r3, #0
 8006276:	f000 80c5 	beq.w	8006404 <HAL_DMA_IRQHandler+0xce8>
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	f003 0302 	and.w	r3, r3, #2
 8006280:	2b00      	cmp	r3, #0
 8006282:	f000 80bf 	beq.w	8006404 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800628a:	f003 031f 	and.w	r3, r3, #31
 800628e:	2202      	movs	r2, #2
 8006290:	409a      	lsls	r2, r3
 8006292:	69fb      	ldr	r3, [r7, #28]
 8006294:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800629c:	2b00      	cmp	r3, #0
 800629e:	d018      	beq.n	80062d2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d109      	bne.n	80062be <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	f000 813a 	beq.w	8006528 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80062bc:	e134      	b.n	8006528 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	f000 8130 	beq.w	8006528 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80062d0:	e12a      	b.n	8006528 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	f003 0320 	and.w	r3, r3, #32
 80062d8:	2b00      	cmp	r3, #0
 80062da:	f040 8089 	bne.w	80063f0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a2b      	ldr	r2, [pc, #172]	@ (8006390 <HAL_DMA_IRQHandler+0xc74>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d04a      	beq.n	800637e <HAL_DMA_IRQHandler+0xc62>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a29      	ldr	r2, [pc, #164]	@ (8006394 <HAL_DMA_IRQHandler+0xc78>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d045      	beq.n	800637e <HAL_DMA_IRQHandler+0xc62>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a28      	ldr	r2, [pc, #160]	@ (8006398 <HAL_DMA_IRQHandler+0xc7c>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d040      	beq.n	800637e <HAL_DMA_IRQHandler+0xc62>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a26      	ldr	r2, [pc, #152]	@ (800639c <HAL_DMA_IRQHandler+0xc80>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d03b      	beq.n	800637e <HAL_DMA_IRQHandler+0xc62>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a25      	ldr	r2, [pc, #148]	@ (80063a0 <HAL_DMA_IRQHandler+0xc84>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d036      	beq.n	800637e <HAL_DMA_IRQHandler+0xc62>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a23      	ldr	r2, [pc, #140]	@ (80063a4 <HAL_DMA_IRQHandler+0xc88>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d031      	beq.n	800637e <HAL_DMA_IRQHandler+0xc62>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a22      	ldr	r2, [pc, #136]	@ (80063a8 <HAL_DMA_IRQHandler+0xc8c>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d02c      	beq.n	800637e <HAL_DMA_IRQHandler+0xc62>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a20      	ldr	r2, [pc, #128]	@ (80063ac <HAL_DMA_IRQHandler+0xc90>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d027      	beq.n	800637e <HAL_DMA_IRQHandler+0xc62>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a1f      	ldr	r2, [pc, #124]	@ (80063b0 <HAL_DMA_IRQHandler+0xc94>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d022      	beq.n	800637e <HAL_DMA_IRQHandler+0xc62>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a1d      	ldr	r2, [pc, #116]	@ (80063b4 <HAL_DMA_IRQHandler+0xc98>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d01d      	beq.n	800637e <HAL_DMA_IRQHandler+0xc62>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a1c      	ldr	r2, [pc, #112]	@ (80063b8 <HAL_DMA_IRQHandler+0xc9c>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d018      	beq.n	800637e <HAL_DMA_IRQHandler+0xc62>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a1a      	ldr	r2, [pc, #104]	@ (80063bc <HAL_DMA_IRQHandler+0xca0>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d013      	beq.n	800637e <HAL_DMA_IRQHandler+0xc62>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a19      	ldr	r2, [pc, #100]	@ (80063c0 <HAL_DMA_IRQHandler+0xca4>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d00e      	beq.n	800637e <HAL_DMA_IRQHandler+0xc62>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a17      	ldr	r2, [pc, #92]	@ (80063c4 <HAL_DMA_IRQHandler+0xca8>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d009      	beq.n	800637e <HAL_DMA_IRQHandler+0xc62>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a16      	ldr	r2, [pc, #88]	@ (80063c8 <HAL_DMA_IRQHandler+0xcac>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d004      	beq.n	800637e <HAL_DMA_IRQHandler+0xc62>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a14      	ldr	r2, [pc, #80]	@ (80063cc <HAL_DMA_IRQHandler+0xcb0>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d128      	bne.n	80063d0 <HAL_DMA_IRQHandler+0xcb4>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	681a      	ldr	r2, [r3, #0]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f022 0214 	bic.w	r2, r2, #20
 800638c:	601a      	str	r2, [r3, #0]
 800638e:	e027      	b.n	80063e0 <HAL_DMA_IRQHandler+0xcc4>
 8006390:	40020010 	.word	0x40020010
 8006394:	40020028 	.word	0x40020028
 8006398:	40020040 	.word	0x40020040
 800639c:	40020058 	.word	0x40020058
 80063a0:	40020070 	.word	0x40020070
 80063a4:	40020088 	.word	0x40020088
 80063a8:	400200a0 	.word	0x400200a0
 80063ac:	400200b8 	.word	0x400200b8
 80063b0:	40020410 	.word	0x40020410
 80063b4:	40020428 	.word	0x40020428
 80063b8:	40020440 	.word	0x40020440
 80063bc:	40020458 	.word	0x40020458
 80063c0:	40020470 	.word	0x40020470
 80063c4:	40020488 	.word	0x40020488
 80063c8:	400204a0 	.word	0x400204a0
 80063cc:	400204b8 	.word	0x400204b8
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	681a      	ldr	r2, [r3, #0]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f022 020a 	bic.w	r2, r2, #10
 80063de:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2201      	movs	r2, #1
 80063e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2200      	movs	r2, #0
 80063ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	f000 8097 	beq.w	8006528 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006402:	e091      	b.n	8006528 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006408:	f003 031f 	and.w	r3, r3, #31
 800640c:	2208      	movs	r2, #8
 800640e:	409a      	lsls	r2, r3
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	4013      	ands	r3, r2
 8006414:	2b00      	cmp	r3, #0
 8006416:	f000 8088 	beq.w	800652a <HAL_DMA_IRQHandler+0xe0e>
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	f003 0308 	and.w	r3, r3, #8
 8006420:	2b00      	cmp	r3, #0
 8006422:	f000 8082 	beq.w	800652a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a41      	ldr	r2, [pc, #260]	@ (8006530 <HAL_DMA_IRQHandler+0xe14>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d04a      	beq.n	80064c6 <HAL_DMA_IRQHandler+0xdaa>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a3f      	ldr	r2, [pc, #252]	@ (8006534 <HAL_DMA_IRQHandler+0xe18>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d045      	beq.n	80064c6 <HAL_DMA_IRQHandler+0xdaa>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a3e      	ldr	r2, [pc, #248]	@ (8006538 <HAL_DMA_IRQHandler+0xe1c>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d040      	beq.n	80064c6 <HAL_DMA_IRQHandler+0xdaa>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a3c      	ldr	r2, [pc, #240]	@ (800653c <HAL_DMA_IRQHandler+0xe20>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d03b      	beq.n	80064c6 <HAL_DMA_IRQHandler+0xdaa>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4a3b      	ldr	r2, [pc, #236]	@ (8006540 <HAL_DMA_IRQHandler+0xe24>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d036      	beq.n	80064c6 <HAL_DMA_IRQHandler+0xdaa>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a39      	ldr	r2, [pc, #228]	@ (8006544 <HAL_DMA_IRQHandler+0xe28>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d031      	beq.n	80064c6 <HAL_DMA_IRQHandler+0xdaa>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a38      	ldr	r2, [pc, #224]	@ (8006548 <HAL_DMA_IRQHandler+0xe2c>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d02c      	beq.n	80064c6 <HAL_DMA_IRQHandler+0xdaa>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a36      	ldr	r2, [pc, #216]	@ (800654c <HAL_DMA_IRQHandler+0xe30>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d027      	beq.n	80064c6 <HAL_DMA_IRQHandler+0xdaa>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a35      	ldr	r2, [pc, #212]	@ (8006550 <HAL_DMA_IRQHandler+0xe34>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d022      	beq.n	80064c6 <HAL_DMA_IRQHandler+0xdaa>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a33      	ldr	r2, [pc, #204]	@ (8006554 <HAL_DMA_IRQHandler+0xe38>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d01d      	beq.n	80064c6 <HAL_DMA_IRQHandler+0xdaa>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a32      	ldr	r2, [pc, #200]	@ (8006558 <HAL_DMA_IRQHandler+0xe3c>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d018      	beq.n	80064c6 <HAL_DMA_IRQHandler+0xdaa>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a30      	ldr	r2, [pc, #192]	@ (800655c <HAL_DMA_IRQHandler+0xe40>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d013      	beq.n	80064c6 <HAL_DMA_IRQHandler+0xdaa>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a2f      	ldr	r2, [pc, #188]	@ (8006560 <HAL_DMA_IRQHandler+0xe44>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d00e      	beq.n	80064c6 <HAL_DMA_IRQHandler+0xdaa>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a2d      	ldr	r2, [pc, #180]	@ (8006564 <HAL_DMA_IRQHandler+0xe48>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d009      	beq.n	80064c6 <HAL_DMA_IRQHandler+0xdaa>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a2c      	ldr	r2, [pc, #176]	@ (8006568 <HAL_DMA_IRQHandler+0xe4c>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d004      	beq.n	80064c6 <HAL_DMA_IRQHandler+0xdaa>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a2a      	ldr	r2, [pc, #168]	@ (800656c <HAL_DMA_IRQHandler+0xe50>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d108      	bne.n	80064d8 <HAL_DMA_IRQHandler+0xdbc>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f022 021c 	bic.w	r2, r2, #28
 80064d4:	601a      	str	r2, [r3, #0]
 80064d6:	e007      	b.n	80064e8 <HAL_DMA_IRQHandler+0xdcc>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f022 020e 	bic.w	r2, r2, #14
 80064e6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064ec:	f003 031f 	and.w	r3, r3, #31
 80064f0:	2201      	movs	r2, #1
 80064f2:	409a      	lsls	r2, r3
 80064f4:	69fb      	ldr	r3, [r7, #28]
 80064f6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2201      	movs	r2, #1
 80064fc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2201      	movs	r2, #1
 8006502:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2200      	movs	r2, #0
 800650a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006512:	2b00      	cmp	r3, #0
 8006514:	d009      	beq.n	800652a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	4798      	blx	r3
 800651e:	e004      	b.n	800652a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006520:	bf00      	nop
 8006522:	e002      	b.n	800652a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006524:	bf00      	nop
 8006526:	e000      	b.n	800652a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006528:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800652a:	3728      	adds	r7, #40	@ 0x28
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}
 8006530:	40020010 	.word	0x40020010
 8006534:	40020028 	.word	0x40020028
 8006538:	40020040 	.word	0x40020040
 800653c:	40020058 	.word	0x40020058
 8006540:	40020070 	.word	0x40020070
 8006544:	40020088 	.word	0x40020088
 8006548:	400200a0 	.word	0x400200a0
 800654c:	400200b8 	.word	0x400200b8
 8006550:	40020410 	.word	0x40020410
 8006554:	40020428 	.word	0x40020428
 8006558:	40020440 	.word	0x40020440
 800655c:	40020458 	.word	0x40020458
 8006560:	40020470 	.word	0x40020470
 8006564:	40020488 	.word	0x40020488
 8006568:	400204a0 	.word	0x400204a0
 800656c:	400204b8 	.word	0x400204b8

08006570 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8006570:	b480      	push	{r7}
 8006572:	b083      	sub	sp, #12
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800657e:	b2db      	uxtb	r3, r3
}
 8006580:	4618      	mov	r0, r3
 8006582:	370c      	adds	r7, #12
 8006584:	46bd      	mov	sp, r7
 8006586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658a:	4770      	bx	lr

0800658c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800658c:	b480      	push	{r7}
 800658e:	b083      	sub	sp, #12
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8006598:	4618      	mov	r0, r3
 800659a:	370c      	adds	r7, #12
 800659c:	46bd      	mov	sp, r7
 800659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a2:	4770      	bx	lr

080065a4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b087      	sub	sp, #28
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	60f8      	str	r0, [r7, #12]
 80065ac:	60b9      	str	r1, [r7, #8]
 80065ae:	607a      	str	r2, [r7, #4]
 80065b0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065b6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065bc:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a7f      	ldr	r2, [pc, #508]	@ (80067c0 <DMA_SetConfig+0x21c>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d072      	beq.n	80066ae <DMA_SetConfig+0x10a>
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a7d      	ldr	r2, [pc, #500]	@ (80067c4 <DMA_SetConfig+0x220>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d06d      	beq.n	80066ae <DMA_SetConfig+0x10a>
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a7c      	ldr	r2, [pc, #496]	@ (80067c8 <DMA_SetConfig+0x224>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d068      	beq.n	80066ae <DMA_SetConfig+0x10a>
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a7a      	ldr	r2, [pc, #488]	@ (80067cc <DMA_SetConfig+0x228>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d063      	beq.n	80066ae <DMA_SetConfig+0x10a>
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a79      	ldr	r2, [pc, #484]	@ (80067d0 <DMA_SetConfig+0x22c>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d05e      	beq.n	80066ae <DMA_SetConfig+0x10a>
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a77      	ldr	r2, [pc, #476]	@ (80067d4 <DMA_SetConfig+0x230>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d059      	beq.n	80066ae <DMA_SetConfig+0x10a>
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a76      	ldr	r2, [pc, #472]	@ (80067d8 <DMA_SetConfig+0x234>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d054      	beq.n	80066ae <DMA_SetConfig+0x10a>
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a74      	ldr	r2, [pc, #464]	@ (80067dc <DMA_SetConfig+0x238>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d04f      	beq.n	80066ae <DMA_SetConfig+0x10a>
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a73      	ldr	r2, [pc, #460]	@ (80067e0 <DMA_SetConfig+0x23c>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d04a      	beq.n	80066ae <DMA_SetConfig+0x10a>
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a71      	ldr	r2, [pc, #452]	@ (80067e4 <DMA_SetConfig+0x240>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d045      	beq.n	80066ae <DMA_SetConfig+0x10a>
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a70      	ldr	r2, [pc, #448]	@ (80067e8 <DMA_SetConfig+0x244>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d040      	beq.n	80066ae <DMA_SetConfig+0x10a>
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a6e      	ldr	r2, [pc, #440]	@ (80067ec <DMA_SetConfig+0x248>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d03b      	beq.n	80066ae <DMA_SetConfig+0x10a>
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a6d      	ldr	r2, [pc, #436]	@ (80067f0 <DMA_SetConfig+0x24c>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d036      	beq.n	80066ae <DMA_SetConfig+0x10a>
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a6b      	ldr	r2, [pc, #428]	@ (80067f4 <DMA_SetConfig+0x250>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d031      	beq.n	80066ae <DMA_SetConfig+0x10a>
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a6a      	ldr	r2, [pc, #424]	@ (80067f8 <DMA_SetConfig+0x254>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d02c      	beq.n	80066ae <DMA_SetConfig+0x10a>
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a68      	ldr	r2, [pc, #416]	@ (80067fc <DMA_SetConfig+0x258>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d027      	beq.n	80066ae <DMA_SetConfig+0x10a>
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a67      	ldr	r2, [pc, #412]	@ (8006800 <DMA_SetConfig+0x25c>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d022      	beq.n	80066ae <DMA_SetConfig+0x10a>
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a65      	ldr	r2, [pc, #404]	@ (8006804 <DMA_SetConfig+0x260>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d01d      	beq.n	80066ae <DMA_SetConfig+0x10a>
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a64      	ldr	r2, [pc, #400]	@ (8006808 <DMA_SetConfig+0x264>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d018      	beq.n	80066ae <DMA_SetConfig+0x10a>
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a62      	ldr	r2, [pc, #392]	@ (800680c <DMA_SetConfig+0x268>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d013      	beq.n	80066ae <DMA_SetConfig+0x10a>
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a61      	ldr	r2, [pc, #388]	@ (8006810 <DMA_SetConfig+0x26c>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d00e      	beq.n	80066ae <DMA_SetConfig+0x10a>
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a5f      	ldr	r2, [pc, #380]	@ (8006814 <DMA_SetConfig+0x270>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d009      	beq.n	80066ae <DMA_SetConfig+0x10a>
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a5e      	ldr	r2, [pc, #376]	@ (8006818 <DMA_SetConfig+0x274>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d004      	beq.n	80066ae <DMA_SetConfig+0x10a>
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a5c      	ldr	r2, [pc, #368]	@ (800681c <DMA_SetConfig+0x278>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d101      	bne.n	80066b2 <DMA_SetConfig+0x10e>
 80066ae:	2301      	movs	r3, #1
 80066b0:	e000      	b.n	80066b4 <DMA_SetConfig+0x110>
 80066b2:	2300      	movs	r3, #0
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d00d      	beq.n	80066d4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80066bc:	68fa      	ldr	r2, [r7, #12]
 80066be:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80066c0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d004      	beq.n	80066d4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066ce:	68fa      	ldr	r2, [r7, #12]
 80066d0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80066d2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a39      	ldr	r2, [pc, #228]	@ (80067c0 <DMA_SetConfig+0x21c>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d04a      	beq.n	8006774 <DMA_SetConfig+0x1d0>
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a38      	ldr	r2, [pc, #224]	@ (80067c4 <DMA_SetConfig+0x220>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d045      	beq.n	8006774 <DMA_SetConfig+0x1d0>
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a36      	ldr	r2, [pc, #216]	@ (80067c8 <DMA_SetConfig+0x224>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d040      	beq.n	8006774 <DMA_SetConfig+0x1d0>
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a35      	ldr	r2, [pc, #212]	@ (80067cc <DMA_SetConfig+0x228>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d03b      	beq.n	8006774 <DMA_SetConfig+0x1d0>
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a33      	ldr	r2, [pc, #204]	@ (80067d0 <DMA_SetConfig+0x22c>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d036      	beq.n	8006774 <DMA_SetConfig+0x1d0>
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4a32      	ldr	r2, [pc, #200]	@ (80067d4 <DMA_SetConfig+0x230>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d031      	beq.n	8006774 <DMA_SetConfig+0x1d0>
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a30      	ldr	r2, [pc, #192]	@ (80067d8 <DMA_SetConfig+0x234>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d02c      	beq.n	8006774 <DMA_SetConfig+0x1d0>
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4a2f      	ldr	r2, [pc, #188]	@ (80067dc <DMA_SetConfig+0x238>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d027      	beq.n	8006774 <DMA_SetConfig+0x1d0>
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a2d      	ldr	r2, [pc, #180]	@ (80067e0 <DMA_SetConfig+0x23c>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d022      	beq.n	8006774 <DMA_SetConfig+0x1d0>
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a2c      	ldr	r2, [pc, #176]	@ (80067e4 <DMA_SetConfig+0x240>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d01d      	beq.n	8006774 <DMA_SetConfig+0x1d0>
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4a2a      	ldr	r2, [pc, #168]	@ (80067e8 <DMA_SetConfig+0x244>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d018      	beq.n	8006774 <DMA_SetConfig+0x1d0>
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a29      	ldr	r2, [pc, #164]	@ (80067ec <DMA_SetConfig+0x248>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d013      	beq.n	8006774 <DMA_SetConfig+0x1d0>
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a27      	ldr	r2, [pc, #156]	@ (80067f0 <DMA_SetConfig+0x24c>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d00e      	beq.n	8006774 <DMA_SetConfig+0x1d0>
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a26      	ldr	r2, [pc, #152]	@ (80067f4 <DMA_SetConfig+0x250>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d009      	beq.n	8006774 <DMA_SetConfig+0x1d0>
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a24      	ldr	r2, [pc, #144]	@ (80067f8 <DMA_SetConfig+0x254>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d004      	beq.n	8006774 <DMA_SetConfig+0x1d0>
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a23      	ldr	r2, [pc, #140]	@ (80067fc <DMA_SetConfig+0x258>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d101      	bne.n	8006778 <DMA_SetConfig+0x1d4>
 8006774:	2301      	movs	r3, #1
 8006776:	e000      	b.n	800677a <DMA_SetConfig+0x1d6>
 8006778:	2300      	movs	r3, #0
 800677a:	2b00      	cmp	r3, #0
 800677c:	d059      	beq.n	8006832 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006782:	f003 031f 	and.w	r3, r3, #31
 8006786:	223f      	movs	r2, #63	@ 0x3f
 8006788:	409a      	lsls	r2, r3
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800679c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	683a      	ldr	r2, [r7, #0]
 80067a4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	689b      	ldr	r3, [r3, #8]
 80067aa:	2b40      	cmp	r3, #64	@ 0x40
 80067ac:	d138      	bne.n	8006820 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	687a      	ldr	r2, [r7, #4]
 80067b4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	68ba      	ldr	r2, [r7, #8]
 80067bc:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80067be:	e086      	b.n	80068ce <DMA_SetConfig+0x32a>
 80067c0:	40020010 	.word	0x40020010
 80067c4:	40020028 	.word	0x40020028
 80067c8:	40020040 	.word	0x40020040
 80067cc:	40020058 	.word	0x40020058
 80067d0:	40020070 	.word	0x40020070
 80067d4:	40020088 	.word	0x40020088
 80067d8:	400200a0 	.word	0x400200a0
 80067dc:	400200b8 	.word	0x400200b8
 80067e0:	40020410 	.word	0x40020410
 80067e4:	40020428 	.word	0x40020428
 80067e8:	40020440 	.word	0x40020440
 80067ec:	40020458 	.word	0x40020458
 80067f0:	40020470 	.word	0x40020470
 80067f4:	40020488 	.word	0x40020488
 80067f8:	400204a0 	.word	0x400204a0
 80067fc:	400204b8 	.word	0x400204b8
 8006800:	58025408 	.word	0x58025408
 8006804:	5802541c 	.word	0x5802541c
 8006808:	58025430 	.word	0x58025430
 800680c:	58025444 	.word	0x58025444
 8006810:	58025458 	.word	0x58025458
 8006814:	5802546c 	.word	0x5802546c
 8006818:	58025480 	.word	0x58025480
 800681c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	68ba      	ldr	r2, [r7, #8]
 8006826:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	687a      	ldr	r2, [r7, #4]
 800682e:	60da      	str	r2, [r3, #12]
}
 8006830:	e04d      	b.n	80068ce <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a29      	ldr	r2, [pc, #164]	@ (80068dc <DMA_SetConfig+0x338>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d022      	beq.n	8006882 <DMA_SetConfig+0x2de>
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a27      	ldr	r2, [pc, #156]	@ (80068e0 <DMA_SetConfig+0x33c>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d01d      	beq.n	8006882 <DMA_SetConfig+0x2de>
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a26      	ldr	r2, [pc, #152]	@ (80068e4 <DMA_SetConfig+0x340>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d018      	beq.n	8006882 <DMA_SetConfig+0x2de>
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a24      	ldr	r2, [pc, #144]	@ (80068e8 <DMA_SetConfig+0x344>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d013      	beq.n	8006882 <DMA_SetConfig+0x2de>
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a23      	ldr	r2, [pc, #140]	@ (80068ec <DMA_SetConfig+0x348>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d00e      	beq.n	8006882 <DMA_SetConfig+0x2de>
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a21      	ldr	r2, [pc, #132]	@ (80068f0 <DMA_SetConfig+0x34c>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d009      	beq.n	8006882 <DMA_SetConfig+0x2de>
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a20      	ldr	r2, [pc, #128]	@ (80068f4 <DMA_SetConfig+0x350>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d004      	beq.n	8006882 <DMA_SetConfig+0x2de>
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a1e      	ldr	r2, [pc, #120]	@ (80068f8 <DMA_SetConfig+0x354>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d101      	bne.n	8006886 <DMA_SetConfig+0x2e2>
 8006882:	2301      	movs	r3, #1
 8006884:	e000      	b.n	8006888 <DMA_SetConfig+0x2e4>
 8006886:	2300      	movs	r3, #0
 8006888:	2b00      	cmp	r3, #0
 800688a:	d020      	beq.n	80068ce <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006890:	f003 031f 	and.w	r3, r3, #31
 8006894:	2201      	movs	r2, #1
 8006896:	409a      	lsls	r2, r3
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	683a      	ldr	r2, [r7, #0]
 80068a2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	689b      	ldr	r3, [r3, #8]
 80068a8:	2b40      	cmp	r3, #64	@ 0x40
 80068aa:	d108      	bne.n	80068be <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	687a      	ldr	r2, [r7, #4]
 80068b2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	68ba      	ldr	r2, [r7, #8]
 80068ba:	60da      	str	r2, [r3, #12]
}
 80068bc:	e007      	b.n	80068ce <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	68ba      	ldr	r2, [r7, #8]
 80068c4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	687a      	ldr	r2, [r7, #4]
 80068cc:	60da      	str	r2, [r3, #12]
}
 80068ce:	bf00      	nop
 80068d0:	371c      	adds	r7, #28
 80068d2:	46bd      	mov	sp, r7
 80068d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d8:	4770      	bx	lr
 80068da:	bf00      	nop
 80068dc:	58025408 	.word	0x58025408
 80068e0:	5802541c 	.word	0x5802541c
 80068e4:	58025430 	.word	0x58025430
 80068e8:	58025444 	.word	0x58025444
 80068ec:	58025458 	.word	0x58025458
 80068f0:	5802546c 	.word	0x5802546c
 80068f4:	58025480 	.word	0x58025480
 80068f8:	58025494 	.word	0x58025494

080068fc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b085      	sub	sp, #20
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a42      	ldr	r2, [pc, #264]	@ (8006a14 <DMA_CalcBaseAndBitshift+0x118>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d04a      	beq.n	80069a4 <DMA_CalcBaseAndBitshift+0xa8>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a41      	ldr	r2, [pc, #260]	@ (8006a18 <DMA_CalcBaseAndBitshift+0x11c>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d045      	beq.n	80069a4 <DMA_CalcBaseAndBitshift+0xa8>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a3f      	ldr	r2, [pc, #252]	@ (8006a1c <DMA_CalcBaseAndBitshift+0x120>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d040      	beq.n	80069a4 <DMA_CalcBaseAndBitshift+0xa8>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a3e      	ldr	r2, [pc, #248]	@ (8006a20 <DMA_CalcBaseAndBitshift+0x124>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d03b      	beq.n	80069a4 <DMA_CalcBaseAndBitshift+0xa8>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a3c      	ldr	r2, [pc, #240]	@ (8006a24 <DMA_CalcBaseAndBitshift+0x128>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d036      	beq.n	80069a4 <DMA_CalcBaseAndBitshift+0xa8>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a3b      	ldr	r2, [pc, #236]	@ (8006a28 <DMA_CalcBaseAndBitshift+0x12c>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d031      	beq.n	80069a4 <DMA_CalcBaseAndBitshift+0xa8>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a39      	ldr	r2, [pc, #228]	@ (8006a2c <DMA_CalcBaseAndBitshift+0x130>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d02c      	beq.n	80069a4 <DMA_CalcBaseAndBitshift+0xa8>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a38      	ldr	r2, [pc, #224]	@ (8006a30 <DMA_CalcBaseAndBitshift+0x134>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d027      	beq.n	80069a4 <DMA_CalcBaseAndBitshift+0xa8>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a36      	ldr	r2, [pc, #216]	@ (8006a34 <DMA_CalcBaseAndBitshift+0x138>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d022      	beq.n	80069a4 <DMA_CalcBaseAndBitshift+0xa8>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a35      	ldr	r2, [pc, #212]	@ (8006a38 <DMA_CalcBaseAndBitshift+0x13c>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d01d      	beq.n	80069a4 <DMA_CalcBaseAndBitshift+0xa8>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a33      	ldr	r2, [pc, #204]	@ (8006a3c <DMA_CalcBaseAndBitshift+0x140>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d018      	beq.n	80069a4 <DMA_CalcBaseAndBitshift+0xa8>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a32      	ldr	r2, [pc, #200]	@ (8006a40 <DMA_CalcBaseAndBitshift+0x144>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d013      	beq.n	80069a4 <DMA_CalcBaseAndBitshift+0xa8>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a30      	ldr	r2, [pc, #192]	@ (8006a44 <DMA_CalcBaseAndBitshift+0x148>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d00e      	beq.n	80069a4 <DMA_CalcBaseAndBitshift+0xa8>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a2f      	ldr	r2, [pc, #188]	@ (8006a48 <DMA_CalcBaseAndBitshift+0x14c>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d009      	beq.n	80069a4 <DMA_CalcBaseAndBitshift+0xa8>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a2d      	ldr	r2, [pc, #180]	@ (8006a4c <DMA_CalcBaseAndBitshift+0x150>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d004      	beq.n	80069a4 <DMA_CalcBaseAndBitshift+0xa8>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a2c      	ldr	r2, [pc, #176]	@ (8006a50 <DMA_CalcBaseAndBitshift+0x154>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d101      	bne.n	80069a8 <DMA_CalcBaseAndBitshift+0xac>
 80069a4:	2301      	movs	r3, #1
 80069a6:	e000      	b.n	80069aa <DMA_CalcBaseAndBitshift+0xae>
 80069a8:	2300      	movs	r3, #0
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d024      	beq.n	80069f8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	b2db      	uxtb	r3, r3
 80069b4:	3b10      	subs	r3, #16
 80069b6:	4a27      	ldr	r2, [pc, #156]	@ (8006a54 <DMA_CalcBaseAndBitshift+0x158>)
 80069b8:	fba2 2303 	umull	r2, r3, r2, r3
 80069bc:	091b      	lsrs	r3, r3, #4
 80069be:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	f003 0307 	and.w	r3, r3, #7
 80069c6:	4a24      	ldr	r2, [pc, #144]	@ (8006a58 <DMA_CalcBaseAndBitshift+0x15c>)
 80069c8:	5cd3      	ldrb	r3, [r2, r3]
 80069ca:	461a      	mov	r2, r3
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2b03      	cmp	r3, #3
 80069d4:	d908      	bls.n	80069e8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	461a      	mov	r2, r3
 80069dc:	4b1f      	ldr	r3, [pc, #124]	@ (8006a5c <DMA_CalcBaseAndBitshift+0x160>)
 80069de:	4013      	ands	r3, r2
 80069e0:	1d1a      	adds	r2, r3, #4
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	659a      	str	r2, [r3, #88]	@ 0x58
 80069e6:	e00d      	b.n	8006a04 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	461a      	mov	r2, r3
 80069ee:	4b1b      	ldr	r3, [pc, #108]	@ (8006a5c <DMA_CalcBaseAndBitshift+0x160>)
 80069f0:	4013      	ands	r3, r2
 80069f2:	687a      	ldr	r2, [r7, #4]
 80069f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80069f6:	e005      	b.n	8006a04 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	3714      	adds	r7, #20
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a12:	4770      	bx	lr
 8006a14:	40020010 	.word	0x40020010
 8006a18:	40020028 	.word	0x40020028
 8006a1c:	40020040 	.word	0x40020040
 8006a20:	40020058 	.word	0x40020058
 8006a24:	40020070 	.word	0x40020070
 8006a28:	40020088 	.word	0x40020088
 8006a2c:	400200a0 	.word	0x400200a0
 8006a30:	400200b8 	.word	0x400200b8
 8006a34:	40020410 	.word	0x40020410
 8006a38:	40020428 	.word	0x40020428
 8006a3c:	40020440 	.word	0x40020440
 8006a40:	40020458 	.word	0x40020458
 8006a44:	40020470 	.word	0x40020470
 8006a48:	40020488 	.word	0x40020488
 8006a4c:	400204a0 	.word	0x400204a0
 8006a50:	400204b8 	.word	0x400204b8
 8006a54:	aaaaaaab 	.word	0xaaaaaaab
 8006a58:	08012408 	.word	0x08012408
 8006a5c:	fffffc00 	.word	0xfffffc00

08006a60 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b085      	sub	sp, #20
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a68:	2300      	movs	r3, #0
 8006a6a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	699b      	ldr	r3, [r3, #24]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d120      	bne.n	8006ab6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a78:	2b03      	cmp	r3, #3
 8006a7a:	d858      	bhi.n	8006b2e <DMA_CheckFifoParam+0xce>
 8006a7c:	a201      	add	r2, pc, #4	@ (adr r2, 8006a84 <DMA_CheckFifoParam+0x24>)
 8006a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a82:	bf00      	nop
 8006a84:	08006a95 	.word	0x08006a95
 8006a88:	08006aa7 	.word	0x08006aa7
 8006a8c:	08006a95 	.word	0x08006a95
 8006a90:	08006b2f 	.word	0x08006b2f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a98:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d048      	beq.n	8006b32 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006aa4:	e045      	b.n	8006b32 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aaa:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006aae:	d142      	bne.n	8006b36 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006ab4:	e03f      	b.n	8006b36 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	699b      	ldr	r3, [r3, #24]
 8006aba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006abe:	d123      	bne.n	8006b08 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ac4:	2b03      	cmp	r3, #3
 8006ac6:	d838      	bhi.n	8006b3a <DMA_CheckFifoParam+0xda>
 8006ac8:	a201      	add	r2, pc, #4	@ (adr r2, 8006ad0 <DMA_CheckFifoParam+0x70>)
 8006aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ace:	bf00      	nop
 8006ad0:	08006ae1 	.word	0x08006ae1
 8006ad4:	08006ae7 	.word	0x08006ae7
 8006ad8:	08006ae1 	.word	0x08006ae1
 8006adc:	08006af9 	.word	0x08006af9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	73fb      	strb	r3, [r7, #15]
        break;
 8006ae4:	e030      	b.n	8006b48 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d025      	beq.n	8006b3e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006af2:	2301      	movs	r3, #1
 8006af4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006af6:	e022      	b.n	8006b3e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006afc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006b00:	d11f      	bne.n	8006b42 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006b02:	2301      	movs	r3, #1
 8006b04:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006b06:	e01c      	b.n	8006b42 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b0c:	2b02      	cmp	r3, #2
 8006b0e:	d902      	bls.n	8006b16 <DMA_CheckFifoParam+0xb6>
 8006b10:	2b03      	cmp	r3, #3
 8006b12:	d003      	beq.n	8006b1c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006b14:	e018      	b.n	8006b48 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8006b16:	2301      	movs	r3, #1
 8006b18:	73fb      	strb	r3, [r7, #15]
        break;
 8006b1a:	e015      	b.n	8006b48 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b20:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d00e      	beq.n	8006b46 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	73fb      	strb	r3, [r7, #15]
    break;
 8006b2c:	e00b      	b.n	8006b46 <DMA_CheckFifoParam+0xe6>
        break;
 8006b2e:	bf00      	nop
 8006b30:	e00a      	b.n	8006b48 <DMA_CheckFifoParam+0xe8>
        break;
 8006b32:	bf00      	nop
 8006b34:	e008      	b.n	8006b48 <DMA_CheckFifoParam+0xe8>
        break;
 8006b36:	bf00      	nop
 8006b38:	e006      	b.n	8006b48 <DMA_CheckFifoParam+0xe8>
        break;
 8006b3a:	bf00      	nop
 8006b3c:	e004      	b.n	8006b48 <DMA_CheckFifoParam+0xe8>
        break;
 8006b3e:	bf00      	nop
 8006b40:	e002      	b.n	8006b48 <DMA_CheckFifoParam+0xe8>
        break;
 8006b42:	bf00      	nop
 8006b44:	e000      	b.n	8006b48 <DMA_CheckFifoParam+0xe8>
    break;
 8006b46:	bf00      	nop
    }
  }

  return status;
 8006b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3714      	adds	r7, #20
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b54:	4770      	bx	lr
 8006b56:	bf00      	nop

08006b58 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b085      	sub	sp, #20
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a38      	ldr	r2, [pc, #224]	@ (8006c4c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d022      	beq.n	8006bb6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a36      	ldr	r2, [pc, #216]	@ (8006c50 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d01d      	beq.n	8006bb6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a35      	ldr	r2, [pc, #212]	@ (8006c54 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d018      	beq.n	8006bb6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a33      	ldr	r2, [pc, #204]	@ (8006c58 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d013      	beq.n	8006bb6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a32      	ldr	r2, [pc, #200]	@ (8006c5c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d00e      	beq.n	8006bb6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a30      	ldr	r2, [pc, #192]	@ (8006c60 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d009      	beq.n	8006bb6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a2f      	ldr	r2, [pc, #188]	@ (8006c64 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d004      	beq.n	8006bb6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a2d      	ldr	r2, [pc, #180]	@ (8006c68 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d101      	bne.n	8006bba <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	e000      	b.n	8006bbc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8006bba:	2300      	movs	r3, #0
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d01a      	beq.n	8006bf6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	b2db      	uxtb	r3, r3
 8006bc6:	3b08      	subs	r3, #8
 8006bc8:	4a28      	ldr	r2, [pc, #160]	@ (8006c6c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8006bca:	fba2 2303 	umull	r2, r3, r2, r3
 8006bce:	091b      	lsrs	r3, r3, #4
 8006bd0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006bd2:	68fa      	ldr	r2, [r7, #12]
 8006bd4:	4b26      	ldr	r3, [pc, #152]	@ (8006c70 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8006bd6:	4413      	add	r3, r2
 8006bd8:	009b      	lsls	r3, r3, #2
 8006bda:	461a      	mov	r2, r3
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	4a24      	ldr	r2, [pc, #144]	@ (8006c74 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006be4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	f003 031f 	and.w	r3, r3, #31
 8006bec:	2201      	movs	r2, #1
 8006bee:	409a      	lsls	r2, r3
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006bf4:	e024      	b.n	8006c40 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	b2db      	uxtb	r3, r3
 8006bfc:	3b10      	subs	r3, #16
 8006bfe:	4a1e      	ldr	r2, [pc, #120]	@ (8006c78 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006c00:	fba2 2303 	umull	r2, r3, r2, r3
 8006c04:	091b      	lsrs	r3, r3, #4
 8006c06:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	4a1c      	ldr	r2, [pc, #112]	@ (8006c7c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d806      	bhi.n	8006c1e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	4a1b      	ldr	r2, [pc, #108]	@ (8006c80 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d902      	bls.n	8006c1e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	3308      	adds	r3, #8
 8006c1c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006c1e:	68fa      	ldr	r2, [r7, #12]
 8006c20:	4b18      	ldr	r3, [pc, #96]	@ (8006c84 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006c22:	4413      	add	r3, r2
 8006c24:	009b      	lsls	r3, r3, #2
 8006c26:	461a      	mov	r2, r3
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	4a16      	ldr	r2, [pc, #88]	@ (8006c88 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006c30:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	f003 031f 	and.w	r3, r3, #31
 8006c38:	2201      	movs	r2, #1
 8006c3a:	409a      	lsls	r2, r3
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006c40:	bf00      	nop
 8006c42:	3714      	adds	r7, #20
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr
 8006c4c:	58025408 	.word	0x58025408
 8006c50:	5802541c 	.word	0x5802541c
 8006c54:	58025430 	.word	0x58025430
 8006c58:	58025444 	.word	0x58025444
 8006c5c:	58025458 	.word	0x58025458
 8006c60:	5802546c 	.word	0x5802546c
 8006c64:	58025480 	.word	0x58025480
 8006c68:	58025494 	.word	0x58025494
 8006c6c:	cccccccd 	.word	0xcccccccd
 8006c70:	16009600 	.word	0x16009600
 8006c74:	58025880 	.word	0x58025880
 8006c78:	aaaaaaab 	.word	0xaaaaaaab
 8006c7c:	400204b8 	.word	0x400204b8
 8006c80:	4002040f 	.word	0x4002040f
 8006c84:	10008200 	.word	0x10008200
 8006c88:	40020880 	.word	0x40020880

08006c8c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b085      	sub	sp, #20
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	b2db      	uxtb	r3, r3
 8006c9a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d04a      	beq.n	8006d38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2b08      	cmp	r3, #8
 8006ca6:	d847      	bhi.n	8006d38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a25      	ldr	r2, [pc, #148]	@ (8006d44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d022      	beq.n	8006cf8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a24      	ldr	r2, [pc, #144]	@ (8006d48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d01d      	beq.n	8006cf8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a22      	ldr	r2, [pc, #136]	@ (8006d4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d018      	beq.n	8006cf8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a21      	ldr	r2, [pc, #132]	@ (8006d50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d013      	beq.n	8006cf8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a1f      	ldr	r2, [pc, #124]	@ (8006d54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d00e      	beq.n	8006cf8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a1e      	ldr	r2, [pc, #120]	@ (8006d58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d009      	beq.n	8006cf8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a1c      	ldr	r2, [pc, #112]	@ (8006d5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d004      	beq.n	8006cf8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a1b      	ldr	r2, [pc, #108]	@ (8006d60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d101      	bne.n	8006cfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	e000      	b.n	8006cfe <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d00a      	beq.n	8006d18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006d02:	68fa      	ldr	r2, [r7, #12]
 8006d04:	4b17      	ldr	r3, [pc, #92]	@ (8006d64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006d06:	4413      	add	r3, r2
 8006d08:	009b      	lsls	r3, r3, #2
 8006d0a:	461a      	mov	r2, r3
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	4a15      	ldr	r2, [pc, #84]	@ (8006d68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006d14:	671a      	str	r2, [r3, #112]	@ 0x70
 8006d16:	e009      	b.n	8006d2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006d18:	68fa      	ldr	r2, [r7, #12]
 8006d1a:	4b14      	ldr	r3, [pc, #80]	@ (8006d6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006d1c:	4413      	add	r3, r2
 8006d1e:	009b      	lsls	r3, r3, #2
 8006d20:	461a      	mov	r2, r3
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	4a11      	ldr	r2, [pc, #68]	@ (8006d70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006d2a:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	3b01      	subs	r3, #1
 8006d30:	2201      	movs	r2, #1
 8006d32:	409a      	lsls	r2, r3
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8006d38:	bf00      	nop
 8006d3a:	3714      	adds	r7, #20
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d42:	4770      	bx	lr
 8006d44:	58025408 	.word	0x58025408
 8006d48:	5802541c 	.word	0x5802541c
 8006d4c:	58025430 	.word	0x58025430
 8006d50:	58025444 	.word	0x58025444
 8006d54:	58025458 	.word	0x58025458
 8006d58:	5802546c 	.word	0x5802546c
 8006d5c:	58025480 	.word	0x58025480
 8006d60:	58025494 	.word	0x58025494
 8006d64:	1600963f 	.word	0x1600963f
 8006d68:	58025940 	.word	0x58025940
 8006d6c:	1000823f 	.word	0x1000823f
 8006d70:	40020940 	.word	0x40020940

08006d74 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b089      	sub	sp, #36	@ 0x24
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
 8006d7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006d7e:	2300      	movs	r3, #0
 8006d80:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006d82:	4b89      	ldr	r3, [pc, #548]	@ (8006fa8 <HAL_GPIO_Init+0x234>)
 8006d84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006d86:	e194      	b.n	80070b2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	681a      	ldr	r2, [r3, #0]
 8006d8c:	2101      	movs	r1, #1
 8006d8e:	69fb      	ldr	r3, [r7, #28]
 8006d90:	fa01 f303 	lsl.w	r3, r1, r3
 8006d94:	4013      	ands	r3, r2
 8006d96:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	f000 8186 	beq.w	80070ac <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	f003 0303 	and.w	r3, r3, #3
 8006da8:	2b01      	cmp	r3, #1
 8006daa:	d005      	beq.n	8006db8 <HAL_GPIO_Init+0x44>
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	f003 0303 	and.w	r3, r3, #3
 8006db4:	2b02      	cmp	r3, #2
 8006db6:	d130      	bne.n	8006e1a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	689b      	ldr	r3, [r3, #8]
 8006dbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006dbe:	69fb      	ldr	r3, [r7, #28]
 8006dc0:	005b      	lsls	r3, r3, #1
 8006dc2:	2203      	movs	r2, #3
 8006dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8006dc8:	43db      	mvns	r3, r3
 8006dca:	69ba      	ldr	r2, [r7, #24]
 8006dcc:	4013      	ands	r3, r2
 8006dce:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	68da      	ldr	r2, [r3, #12]
 8006dd4:	69fb      	ldr	r3, [r7, #28]
 8006dd6:	005b      	lsls	r3, r3, #1
 8006dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8006ddc:	69ba      	ldr	r2, [r7, #24]
 8006dde:	4313      	orrs	r3, r2
 8006de0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	69ba      	ldr	r2, [r7, #24]
 8006de6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006dee:	2201      	movs	r2, #1
 8006df0:	69fb      	ldr	r3, [r7, #28]
 8006df2:	fa02 f303 	lsl.w	r3, r2, r3
 8006df6:	43db      	mvns	r3, r3
 8006df8:	69ba      	ldr	r2, [r7, #24]
 8006dfa:	4013      	ands	r3, r2
 8006dfc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	091b      	lsrs	r3, r3, #4
 8006e04:	f003 0201 	and.w	r2, r3, #1
 8006e08:	69fb      	ldr	r3, [r7, #28]
 8006e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8006e0e:	69ba      	ldr	r2, [r7, #24]
 8006e10:	4313      	orrs	r3, r2
 8006e12:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	69ba      	ldr	r2, [r7, #24]
 8006e18:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	f003 0303 	and.w	r3, r3, #3
 8006e22:	2b03      	cmp	r3, #3
 8006e24:	d017      	beq.n	8006e56 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	68db      	ldr	r3, [r3, #12]
 8006e2a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006e2c:	69fb      	ldr	r3, [r7, #28]
 8006e2e:	005b      	lsls	r3, r3, #1
 8006e30:	2203      	movs	r2, #3
 8006e32:	fa02 f303 	lsl.w	r3, r2, r3
 8006e36:	43db      	mvns	r3, r3
 8006e38:	69ba      	ldr	r2, [r7, #24]
 8006e3a:	4013      	ands	r3, r2
 8006e3c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	689a      	ldr	r2, [r3, #8]
 8006e42:	69fb      	ldr	r3, [r7, #28]
 8006e44:	005b      	lsls	r3, r3, #1
 8006e46:	fa02 f303 	lsl.w	r3, r2, r3
 8006e4a:	69ba      	ldr	r2, [r7, #24]
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	69ba      	ldr	r2, [r7, #24]
 8006e54:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	f003 0303 	and.w	r3, r3, #3
 8006e5e:	2b02      	cmp	r3, #2
 8006e60:	d123      	bne.n	8006eaa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006e62:	69fb      	ldr	r3, [r7, #28]
 8006e64:	08da      	lsrs	r2, r3, #3
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	3208      	adds	r2, #8
 8006e6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006e70:	69fb      	ldr	r3, [r7, #28]
 8006e72:	f003 0307 	and.w	r3, r3, #7
 8006e76:	009b      	lsls	r3, r3, #2
 8006e78:	220f      	movs	r2, #15
 8006e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8006e7e:	43db      	mvns	r3, r3
 8006e80:	69ba      	ldr	r2, [r7, #24]
 8006e82:	4013      	ands	r3, r2
 8006e84:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	691a      	ldr	r2, [r3, #16]
 8006e8a:	69fb      	ldr	r3, [r7, #28]
 8006e8c:	f003 0307 	and.w	r3, r3, #7
 8006e90:	009b      	lsls	r3, r3, #2
 8006e92:	fa02 f303 	lsl.w	r3, r2, r3
 8006e96:	69ba      	ldr	r2, [r7, #24]
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006e9c:	69fb      	ldr	r3, [r7, #28]
 8006e9e:	08da      	lsrs	r2, r3, #3
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	3208      	adds	r2, #8
 8006ea4:	69b9      	ldr	r1, [r7, #24]
 8006ea6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006eb0:	69fb      	ldr	r3, [r7, #28]
 8006eb2:	005b      	lsls	r3, r3, #1
 8006eb4:	2203      	movs	r2, #3
 8006eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8006eba:	43db      	mvns	r3, r3
 8006ebc:	69ba      	ldr	r2, [r7, #24]
 8006ebe:	4013      	ands	r3, r2
 8006ec0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	f003 0203 	and.w	r2, r3, #3
 8006eca:	69fb      	ldr	r3, [r7, #28]
 8006ecc:	005b      	lsls	r3, r3, #1
 8006ece:	fa02 f303 	lsl.w	r3, r2, r3
 8006ed2:	69ba      	ldr	r2, [r7, #24]
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	69ba      	ldr	r2, [r7, #24]
 8006edc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	f000 80e0 	beq.w	80070ac <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006eec:	4b2f      	ldr	r3, [pc, #188]	@ (8006fac <HAL_GPIO_Init+0x238>)
 8006eee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006ef2:	4a2e      	ldr	r2, [pc, #184]	@ (8006fac <HAL_GPIO_Init+0x238>)
 8006ef4:	f043 0302 	orr.w	r3, r3, #2
 8006ef8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8006efc:	4b2b      	ldr	r3, [pc, #172]	@ (8006fac <HAL_GPIO_Init+0x238>)
 8006efe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006f02:	f003 0302 	and.w	r3, r3, #2
 8006f06:	60fb      	str	r3, [r7, #12]
 8006f08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006f0a:	4a29      	ldr	r2, [pc, #164]	@ (8006fb0 <HAL_GPIO_Init+0x23c>)
 8006f0c:	69fb      	ldr	r3, [r7, #28]
 8006f0e:	089b      	lsrs	r3, r3, #2
 8006f10:	3302      	adds	r3, #2
 8006f12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006f18:	69fb      	ldr	r3, [r7, #28]
 8006f1a:	f003 0303 	and.w	r3, r3, #3
 8006f1e:	009b      	lsls	r3, r3, #2
 8006f20:	220f      	movs	r2, #15
 8006f22:	fa02 f303 	lsl.w	r3, r2, r3
 8006f26:	43db      	mvns	r3, r3
 8006f28:	69ba      	ldr	r2, [r7, #24]
 8006f2a:	4013      	ands	r3, r2
 8006f2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	4a20      	ldr	r2, [pc, #128]	@ (8006fb4 <HAL_GPIO_Init+0x240>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d052      	beq.n	8006fdc <HAL_GPIO_Init+0x268>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	4a1f      	ldr	r2, [pc, #124]	@ (8006fb8 <HAL_GPIO_Init+0x244>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d031      	beq.n	8006fa2 <HAL_GPIO_Init+0x22e>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	4a1e      	ldr	r2, [pc, #120]	@ (8006fbc <HAL_GPIO_Init+0x248>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d02b      	beq.n	8006f9e <HAL_GPIO_Init+0x22a>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	4a1d      	ldr	r2, [pc, #116]	@ (8006fc0 <HAL_GPIO_Init+0x24c>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d025      	beq.n	8006f9a <HAL_GPIO_Init+0x226>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	4a1c      	ldr	r2, [pc, #112]	@ (8006fc4 <HAL_GPIO_Init+0x250>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d01f      	beq.n	8006f96 <HAL_GPIO_Init+0x222>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	4a1b      	ldr	r2, [pc, #108]	@ (8006fc8 <HAL_GPIO_Init+0x254>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d019      	beq.n	8006f92 <HAL_GPIO_Init+0x21e>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	4a1a      	ldr	r2, [pc, #104]	@ (8006fcc <HAL_GPIO_Init+0x258>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d013      	beq.n	8006f8e <HAL_GPIO_Init+0x21a>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	4a19      	ldr	r2, [pc, #100]	@ (8006fd0 <HAL_GPIO_Init+0x25c>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d00d      	beq.n	8006f8a <HAL_GPIO_Init+0x216>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	4a18      	ldr	r2, [pc, #96]	@ (8006fd4 <HAL_GPIO_Init+0x260>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d007      	beq.n	8006f86 <HAL_GPIO_Init+0x212>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	4a17      	ldr	r2, [pc, #92]	@ (8006fd8 <HAL_GPIO_Init+0x264>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d101      	bne.n	8006f82 <HAL_GPIO_Init+0x20e>
 8006f7e:	2309      	movs	r3, #9
 8006f80:	e02d      	b.n	8006fde <HAL_GPIO_Init+0x26a>
 8006f82:	230a      	movs	r3, #10
 8006f84:	e02b      	b.n	8006fde <HAL_GPIO_Init+0x26a>
 8006f86:	2308      	movs	r3, #8
 8006f88:	e029      	b.n	8006fde <HAL_GPIO_Init+0x26a>
 8006f8a:	2307      	movs	r3, #7
 8006f8c:	e027      	b.n	8006fde <HAL_GPIO_Init+0x26a>
 8006f8e:	2306      	movs	r3, #6
 8006f90:	e025      	b.n	8006fde <HAL_GPIO_Init+0x26a>
 8006f92:	2305      	movs	r3, #5
 8006f94:	e023      	b.n	8006fde <HAL_GPIO_Init+0x26a>
 8006f96:	2304      	movs	r3, #4
 8006f98:	e021      	b.n	8006fde <HAL_GPIO_Init+0x26a>
 8006f9a:	2303      	movs	r3, #3
 8006f9c:	e01f      	b.n	8006fde <HAL_GPIO_Init+0x26a>
 8006f9e:	2302      	movs	r3, #2
 8006fa0:	e01d      	b.n	8006fde <HAL_GPIO_Init+0x26a>
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	e01b      	b.n	8006fde <HAL_GPIO_Init+0x26a>
 8006fa6:	bf00      	nop
 8006fa8:	58000080 	.word	0x58000080
 8006fac:	58024400 	.word	0x58024400
 8006fb0:	58000400 	.word	0x58000400
 8006fb4:	58020000 	.word	0x58020000
 8006fb8:	58020400 	.word	0x58020400
 8006fbc:	58020800 	.word	0x58020800
 8006fc0:	58020c00 	.word	0x58020c00
 8006fc4:	58021000 	.word	0x58021000
 8006fc8:	58021400 	.word	0x58021400
 8006fcc:	58021800 	.word	0x58021800
 8006fd0:	58021c00 	.word	0x58021c00
 8006fd4:	58022000 	.word	0x58022000
 8006fd8:	58022400 	.word	0x58022400
 8006fdc:	2300      	movs	r3, #0
 8006fde:	69fa      	ldr	r2, [r7, #28]
 8006fe0:	f002 0203 	and.w	r2, r2, #3
 8006fe4:	0092      	lsls	r2, r2, #2
 8006fe6:	4093      	lsls	r3, r2
 8006fe8:	69ba      	ldr	r2, [r7, #24]
 8006fea:	4313      	orrs	r3, r2
 8006fec:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006fee:	4938      	ldr	r1, [pc, #224]	@ (80070d0 <HAL_GPIO_Init+0x35c>)
 8006ff0:	69fb      	ldr	r3, [r7, #28]
 8006ff2:	089b      	lsrs	r3, r3, #2
 8006ff4:	3302      	adds	r3, #2
 8006ff6:	69ba      	ldr	r2, [r7, #24]
 8006ff8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006ffc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007004:	693b      	ldr	r3, [r7, #16]
 8007006:	43db      	mvns	r3, r3
 8007008:	69ba      	ldr	r2, [r7, #24]
 800700a:	4013      	ands	r3, r2
 800700c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007016:	2b00      	cmp	r3, #0
 8007018:	d003      	beq.n	8007022 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800701a:	69ba      	ldr	r2, [r7, #24]
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	4313      	orrs	r3, r2
 8007020:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007022:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007026:	69bb      	ldr	r3, [r7, #24]
 8007028:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800702a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800702e:	685b      	ldr	r3, [r3, #4]
 8007030:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	43db      	mvns	r3, r3
 8007036:	69ba      	ldr	r2, [r7, #24]
 8007038:	4013      	ands	r3, r2
 800703a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	685b      	ldr	r3, [r3, #4]
 8007040:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007044:	2b00      	cmp	r3, #0
 8007046:	d003      	beq.n	8007050 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007048:	69ba      	ldr	r2, [r7, #24]
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	4313      	orrs	r3, r2
 800704e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007050:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007054:	69bb      	ldr	r3, [r7, #24]
 8007056:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	43db      	mvns	r3, r3
 8007062:	69ba      	ldr	r2, [r7, #24]
 8007064:	4013      	ands	r3, r2
 8007066:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007070:	2b00      	cmp	r3, #0
 8007072:	d003      	beq.n	800707c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8007074:	69ba      	ldr	r2, [r7, #24]
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	4313      	orrs	r3, r2
 800707a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	69ba      	ldr	r2, [r7, #24]
 8007080:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	43db      	mvns	r3, r3
 800708c:	69ba      	ldr	r2, [r7, #24]
 800708e:	4013      	ands	r3, r2
 8007090:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800709a:	2b00      	cmp	r3, #0
 800709c:	d003      	beq.n	80070a6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800709e:	69ba      	ldr	r2, [r7, #24]
 80070a0:	693b      	ldr	r3, [r7, #16]
 80070a2:	4313      	orrs	r3, r2
 80070a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	69ba      	ldr	r2, [r7, #24]
 80070aa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80070ac:	69fb      	ldr	r3, [r7, #28]
 80070ae:	3301      	adds	r3, #1
 80070b0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	681a      	ldr	r2, [r3, #0]
 80070b6:	69fb      	ldr	r3, [r7, #28]
 80070b8:	fa22 f303 	lsr.w	r3, r2, r3
 80070bc:	2b00      	cmp	r3, #0
 80070be:	f47f ae63 	bne.w	8006d88 <HAL_GPIO_Init+0x14>
  }
}
 80070c2:	bf00      	nop
 80070c4:	bf00      	nop
 80070c6:	3724      	adds	r7, #36	@ 0x24
 80070c8:	46bd      	mov	sp, r7
 80070ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ce:	4770      	bx	lr
 80070d0:	58000400 	.word	0x58000400

080070d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b083      	sub	sp, #12
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	460b      	mov	r3, r1
 80070de:	807b      	strh	r3, [r7, #2]
 80070e0:	4613      	mov	r3, r2
 80070e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80070e4:	787b      	ldrb	r3, [r7, #1]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d003      	beq.n	80070f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80070ea:	887a      	ldrh	r2, [r7, #2]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80070f0:	e003      	b.n	80070fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80070f2:	887b      	ldrh	r3, [r7, #2]
 80070f4:	041a      	lsls	r2, r3, #16
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	619a      	str	r2, [r3, #24]
}
 80070fa:	bf00      	nop
 80070fc:	370c      	adds	r7, #12
 80070fe:	46bd      	mov	sp, r7
 8007100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007104:	4770      	bx	lr

08007106 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007106:	b480      	push	{r7}
 8007108:	b085      	sub	sp, #20
 800710a:	af00      	add	r7, sp, #0
 800710c:	6078      	str	r0, [r7, #4]
 800710e:	460b      	mov	r3, r1
 8007110:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	695b      	ldr	r3, [r3, #20]
 8007116:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007118:	887a      	ldrh	r2, [r7, #2]
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	4013      	ands	r3, r2
 800711e:	041a      	lsls	r2, r3, #16
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	43d9      	mvns	r1, r3
 8007124:	887b      	ldrh	r3, [r7, #2]
 8007126:	400b      	ands	r3, r1
 8007128:	431a      	orrs	r2, r3
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	619a      	str	r2, [r3, #24]
}
 800712e:	bf00      	nop
 8007130:	3714      	adds	r7, #20
 8007132:	46bd      	mov	sp, r7
 8007134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007138:	4770      	bx	lr
	...

0800713c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b082      	sub	sp, #8
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d101      	bne.n	800714e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800714a:	2301      	movs	r3, #1
 800714c:	e08b      	b.n	8007266 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007154:	b2db      	uxtb	r3, r3
 8007156:	2b00      	cmp	r3, #0
 8007158:	d106      	bne.n	8007168 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2200      	movs	r2, #0
 800715e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f7fa fd28 	bl	8001bb8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2224      	movs	r2, #36	@ 0x24
 800716c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	681a      	ldr	r2, [r3, #0]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f022 0201 	bic.w	r2, r2, #1
 800717e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	685a      	ldr	r2, [r3, #4]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800718c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	689a      	ldr	r2, [r3, #8]
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800719c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	68db      	ldr	r3, [r3, #12]
 80071a2:	2b01      	cmp	r3, #1
 80071a4:	d107      	bne.n	80071b6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	689a      	ldr	r2, [r3, #8]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80071b2:	609a      	str	r2, [r3, #8]
 80071b4:	e006      	b.n	80071c4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	689a      	ldr	r2, [r3, #8]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80071c2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	68db      	ldr	r3, [r3, #12]
 80071c8:	2b02      	cmp	r3, #2
 80071ca:	d108      	bne.n	80071de <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	685a      	ldr	r2, [r3, #4]
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80071da:	605a      	str	r2, [r3, #4]
 80071dc:	e007      	b.n	80071ee <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	685a      	ldr	r2, [r3, #4]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80071ec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	6859      	ldr	r1, [r3, #4]
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681a      	ldr	r2, [r3, #0]
 80071f8:	4b1d      	ldr	r3, [pc, #116]	@ (8007270 <HAL_I2C_Init+0x134>)
 80071fa:	430b      	orrs	r3, r1
 80071fc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	68da      	ldr	r2, [r3, #12]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800720c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	691a      	ldr	r2, [r3, #16]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	695b      	ldr	r3, [r3, #20]
 8007216:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	699b      	ldr	r3, [r3, #24]
 800721e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	430a      	orrs	r2, r1
 8007226:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	69d9      	ldr	r1, [r3, #28]
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6a1a      	ldr	r2, [r3, #32]
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	430a      	orrs	r2, r1
 8007236:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	681a      	ldr	r2, [r3, #0]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f042 0201 	orr.w	r2, r2, #1
 8007246:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2200      	movs	r2, #0
 800724c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2220      	movs	r2, #32
 8007252:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2200      	movs	r2, #0
 800725a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2200      	movs	r2, #0
 8007260:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8007264:	2300      	movs	r3, #0
}
 8007266:	4618      	mov	r0, r3
 8007268:	3708      	adds	r7, #8
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}
 800726e:	bf00      	nop
 8007270:	02008000 	.word	0x02008000

08007274 <HAL_I2C_Mem_Write_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                        uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b088      	sub	sp, #32
 8007278:	af02      	add	r7, sp, #8
 800727a:	60f8      	str	r0, [r7, #12]
 800727c:	4608      	mov	r0, r1
 800727e:	4611      	mov	r1, r2
 8007280:	461a      	mov	r2, r3
 8007282:	4603      	mov	r3, r0
 8007284:	817b      	strh	r3, [r7, #10]
 8007286:	460b      	mov	r3, r1
 8007288:	813b      	strh	r3, [r7, #8]
 800728a:	4613      	mov	r3, r2
 800728c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007294:	b2db      	uxtb	r3, r3
 8007296:	2b20      	cmp	r3, #32
 8007298:	f040 80c3 	bne.w	8007422 <HAL_I2C_Mem_Write_DMA+0x1ae>
  {
    if ((pData == NULL) || (Size == 0U))
 800729c:	6a3b      	ldr	r3, [r7, #32]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d002      	beq.n	80072a8 <HAL_I2C_Mem_Write_DMA+0x34>
 80072a2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d105      	bne.n	80072b4 <HAL_I2C_Mem_Write_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80072ae:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80072b0:	2301      	movs	r3, #1
 80072b2:	e0b7      	b.n	8007424 <HAL_I2C_Mem_Write_DMA+0x1b0>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	699b      	ldr	r3, [r3, #24]
 80072ba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80072be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80072c2:	d101      	bne.n	80072c8 <HAL_I2C_Mem_Write_DMA+0x54>
    {
      return HAL_BUSY;
 80072c4:	2302      	movs	r3, #2
 80072c6:	e0ad      	b.n	8007424 <HAL_I2C_Mem_Write_DMA+0x1b0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80072ce:	2b01      	cmp	r3, #1
 80072d0:	d101      	bne.n	80072d6 <HAL_I2C_Mem_Write_DMA+0x62>
 80072d2:	2302      	movs	r3, #2
 80072d4:	e0a6      	b.n	8007424 <HAL_I2C_Mem_Write_DMA+0x1b0>
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	2201      	movs	r2, #1
 80072da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2221      	movs	r2, #33	@ 0x21
 80072e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2240      	movs	r2, #64	@ 0x40
 80072ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	2200      	movs	r2, #0
 80072f2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	6a3a      	ldr	r2, [r7, #32]
 80072f8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80072fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	4a4a      	ldr	r2, [pc, #296]	@ (800742c <HAL_I2C_Mem_Write_DMA+0x1b8>)
 8007304:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_DMA;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	4a49      	ldr	r2, [pc, #292]	@ (8007430 <HAL_I2C_Mem_Write_DMA+0x1bc>)
 800730a:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 800730c:	897a      	ldrh	r2, [r7, #10]
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	64da      	str	r2, [r3, #76]	@ 0x4c

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007316:	b29b      	uxth	r3, r3
 8007318:	2bff      	cmp	r3, #255	@ 0xff
 800731a:	d903      	bls.n	8007324 <HAL_I2C_Mem_Write_DMA+0xb0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	22ff      	movs	r2, #255	@ 0xff
 8007320:	851a      	strh	r2, [r3, #40]	@ 0x28
 8007322:	e004      	b.n	800732e <HAL_I2C_Mem_Write_DMA+0xba>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007328:	b29a      	uxth	r2, r3
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800732e:	88fb      	ldrh	r3, [r7, #6]
 8007330:	2b01      	cmp	r3, #1
 8007332:	d109      	bne.n	8007348 <HAL_I2C_Mem_Write_DMA+0xd4>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007334:	893b      	ldrh	r3, [r7, #8]
 8007336:	b2da      	uxtb	r2, r3
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	f04f 32ff 	mov.w	r2, #4294967295
 8007344:	651a      	str	r2, [r3, #80]	@ 0x50
 8007346:	e00b      	b.n	8007360 <HAL_I2C_Mem_Write_DMA+0xec>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007348:	893b      	ldrh	r3, [r7, #8]
 800734a:	0a1b      	lsrs	r3, r3, #8
 800734c:	b29b      	uxth	r3, r3
 800734e:	b2da      	uxtb	r2, r3
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 8007356:	893b      	ldrh	r3, [r7, #8]
 8007358:	b2db      	uxtb	r3, r3
 800735a:	461a      	mov	r2, r3
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if (hi2c->hdmatx != NULL)
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007364:	2b00      	cmp	r3, #0
 8007366:	d020      	beq.n	80073aa <HAL_I2C_Mem_Write_DMA+0x136>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800736c:	4a31      	ldr	r2, [pc, #196]	@ (8007434 <HAL_I2C_Mem_Write_DMA+0x1c0>)
 800736e:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007374:	4a30      	ldr	r2, [pc, #192]	@ (8007438 <HAL_I2C_Mem_Write_DMA+0x1c4>)
 8007376:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800737c:	2200      	movs	r2, #0
 800737e:	641a      	str	r2, [r3, #64]	@ 0x40
      hi2c->hdmatx->XferAbortCallback = NULL;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007384:	2200      	movs	r2, #0
 8007386:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the DMA stream or channel depends on Instance */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800738c:	6a39      	ldr	r1, [r7, #32]
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	3328      	adds	r3, #40	@ 0x28
 8007394:	461a      	mov	r2, r3
                                       hi2c->XferSize);
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 800739a:	f7fd f9f1 	bl	8004780 <HAL_DMA_Start_IT>
 800739e:	4603      	mov	r3, r0
 80073a0:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 80073a2:	7dfb      	ldrb	r3, [r7, #23]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d128      	bne.n	80073fa <HAL_I2C_Mem_Write_DMA+0x186>
 80073a8:	e013      	b.n	80073d2 <HAL_I2C_Mem_Write_DMA+0x15e>
      hi2c->State     = HAL_I2C_STATE_READY;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	2220      	movs	r2, #32
 80073ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	2200      	movs	r2, #0
 80073b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073be:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	2200      	movs	r2, #0
 80073ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80073ce:	2301      	movs	r3, #1
 80073d0:	e028      	b.n	8007424 <HAL_I2C_Mem_Write_DMA+0x1b0>
    {
      /* Send Slave Address and Memory Address */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80073d2:	88fb      	ldrh	r3, [r7, #6]
 80073d4:	b2da      	uxtb	r2, r3
 80073d6:	8979      	ldrh	r1, [r7, #10]
 80073d8:	4b18      	ldr	r3, [pc, #96]	@ (800743c <HAL_I2C_Mem_Write_DMA+0x1c8>)
 80073da:	9300      	str	r3, [sp, #0]
 80073dc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80073e0:	68f8      	ldr	r0, [r7, #12]
 80073e2:	f001 fd5b 	bl	8008e9c <I2C_TransferConfig>

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	2200      	movs	r2, #0
 80073ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80073ee:	2101      	movs	r1, #1
 80073f0:	68f8      	ldr	r0, [r7, #12]
 80073f2:	f001 fd85 	bl	8008f00 <I2C_Enable_IRQ>
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 80073f6:	2300      	movs	r3, #0
 80073f8:	e014      	b.n	8007424 <HAL_I2C_Mem_Write_DMA+0x1b0>
      hi2c->State     = HAL_I2C_STATE_READY;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	2220      	movs	r2, #32
 80073fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	2200      	movs	r2, #0
 8007406:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800740e:	f043 0210 	orr.w	r2, r3, #16
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	2200      	movs	r2, #0
 800741a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800741e:	2301      	movs	r3, #1
 8007420:	e000      	b.n	8007424 <HAL_I2C_Mem_Write_DMA+0x1b0>
  }
  else
  {
    return HAL_BUSY;
 8007422:	2302      	movs	r3, #2
  }
}
 8007424:	4618      	mov	r0, r3
 8007426:	3718      	adds	r7, #24
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}
 800742c:	ffff0000 	.word	0xffff0000
 8007430:	080079c5 	.word	0x080079c5
 8007434:	08008b57 	.word	0x08008b57
 8007438:	08008bed 	.word	0x08008bed
 800743c:	80002000 	.word	0x80002000

08007440 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b084      	sub	sp, #16
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	699b      	ldr	r3, [r3, #24]
 800744e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800745c:	2b00      	cmp	r3, #0
 800745e:	d005      	beq.n	800746c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007464:	68ba      	ldr	r2, [r7, #8]
 8007466:	68f9      	ldr	r1, [r7, #12]
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	4798      	blx	r3
  }
}
 800746c:	bf00      	nop
 800746e:	3710      	adds	r7, #16
 8007470:	46bd      	mov	sp, r7
 8007472:	bd80      	pop	{r7, pc}

08007474 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b086      	sub	sp, #24
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	699b      	ldr	r3, [r3, #24]
 8007482:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007492:	2b00      	cmp	r3, #0
 8007494:	d00f      	beq.n	80074b6 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007496:	693b      	ldr	r3, [r7, #16]
 8007498:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800749c:	2b00      	cmp	r3, #0
 800749e:	d00a      	beq.n	80074b6 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074a4:	f043 0201 	orr.w	r2, r3, #1
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80074b4:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d00f      	beq.n	80074e0 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80074c0:	693b      	ldr	r3, [r7, #16]
 80074c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d00a      	beq.n	80074e0 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074ce:	f043 0208 	orr.w	r2, r3, #8
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80074de:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80074e0:	697b      	ldr	r3, [r7, #20]
 80074e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d00f      	beq.n	800750a <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80074ea:	693b      	ldr	r3, [r7, #16]
 80074ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d00a      	beq.n	800750a <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074f8:	f043 0202 	orr.w	r2, r3, #2
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007508:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800750e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	f003 030b 	and.w	r3, r3, #11
 8007516:	2b00      	cmp	r3, #0
 8007518:	d003      	beq.n	8007522 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 800751a:	68f9      	ldr	r1, [r7, #12]
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f001 f9df 	bl	80088e0 <I2C_ITError>
  }
}
 8007522:	bf00      	nop
 8007524:	3718      	adds	r7, #24
 8007526:	46bd      	mov	sp, r7
 8007528:	bd80      	pop	{r7, pc}

0800752a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800752a:	b480      	push	{r7}
 800752c:	b083      	sub	sp, #12
 800752e:	af00      	add	r7, sp, #0
 8007530:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8007532:	bf00      	nop
 8007534:	370c      	adds	r7, #12
 8007536:	46bd      	mov	sp, r7
 8007538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753c:	4770      	bx	lr

0800753e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800753e:	b480      	push	{r7}
 8007540:	b083      	sub	sp, #12
 8007542:	af00      	add	r7, sp, #0
 8007544:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8007546:	bf00      	nop
 8007548:	370c      	adds	r7, #12
 800754a:	46bd      	mov	sp, r7
 800754c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007550:	4770      	bx	lr

08007552 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007552:	b480      	push	{r7}
 8007554:	b083      	sub	sp, #12
 8007556:	af00      	add	r7, sp, #0
 8007558:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800755a:	bf00      	nop
 800755c:	370c      	adds	r7, #12
 800755e:	46bd      	mov	sp, r7
 8007560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007564:	4770      	bx	lr

08007566 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007566:	b480      	push	{r7}
 8007568:	b083      	sub	sp, #12
 800756a:	af00      	add	r7, sp, #0
 800756c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800756e:	bf00      	nop
 8007570:	370c      	adds	r7, #12
 8007572:	46bd      	mov	sp, r7
 8007574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007578:	4770      	bx	lr

0800757a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800757a:	b480      	push	{r7}
 800757c:	b083      	sub	sp, #12
 800757e:	af00      	add	r7, sp, #0
 8007580:	6078      	str	r0, [r7, #4]
 8007582:	460b      	mov	r3, r1
 8007584:	70fb      	strb	r3, [r7, #3]
 8007586:	4613      	mov	r3, r2
 8007588:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800758a:	bf00      	nop
 800758c:	370c      	adds	r7, #12
 800758e:	46bd      	mov	sp, r7
 8007590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007594:	4770      	bx	lr

08007596 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007596:	b480      	push	{r7}
 8007598:	b083      	sub	sp, #12
 800759a:	af00      	add	r7, sp, #0
 800759c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800759e:	bf00      	nop
 80075a0:	370c      	adds	r7, #12
 80075a2:	46bd      	mov	sp, r7
 80075a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a8:	4770      	bx	lr

080075aa <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80075aa:	b480      	push	{r7}
 80075ac:	b083      	sub	sp, #12
 80075ae:	af00      	add	r7, sp, #0
 80075b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80075b2:	bf00      	nop
 80075b4:	370c      	adds	r7, #12
 80075b6:	46bd      	mov	sp, r7
 80075b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075bc:	4770      	bx	lr

080075be <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80075be:	b480      	push	{r7}
 80075c0:	b083      	sub	sp, #12
 80075c2:	af00      	add	r7, sp, #0
 80075c4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80075c6:	bf00      	nop
 80075c8:	370c      	adds	r7, #12
 80075ca:	46bd      	mov	sp, r7
 80075cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d0:	4770      	bx	lr

080075d2 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80075d2:	b480      	push	{r7}
 80075d4:	b083      	sub	sp, #12
 80075d6:	af00      	add	r7, sp, #0
 80075d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80075da:	bf00      	nop
 80075dc:	370c      	adds	r7, #12
 80075de:	46bd      	mov	sp, r7
 80075e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e4:	4770      	bx	lr

080075e6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80075e6:	b480      	push	{r7}
 80075e8:	b083      	sub	sp, #12
 80075ea:	af00      	add	r7, sp, #0
 80075ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80075ee:	bf00      	nop
 80075f0:	370c      	adds	r7, #12
 80075f2:	46bd      	mov	sp, r7
 80075f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f8:	4770      	bx	lr

080075fa <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80075fa:	b580      	push	{r7, lr}
 80075fc:	b086      	sub	sp, #24
 80075fe:	af00      	add	r7, sp, #0
 8007600:	60f8      	str	r0, [r7, #12]
 8007602:	60b9      	str	r1, [r7, #8]
 8007604:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800760a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007616:	2b01      	cmp	r3, #1
 8007618:	d101      	bne.n	800761e <I2C_Slave_ISR_IT+0x24>
 800761a:	2302      	movs	r3, #2
 800761c:	e0e2      	b.n	80077e4 <I2C_Slave_ISR_IT+0x1ea>
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	2201      	movs	r2, #1
 8007622:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007626:	693b      	ldr	r3, [r7, #16]
 8007628:	f003 0320 	and.w	r3, r3, #32
 800762c:	2b00      	cmp	r3, #0
 800762e:	d009      	beq.n	8007644 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007636:	2b00      	cmp	r3, #0
 8007638:	d004      	beq.n	8007644 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800763a:	6939      	ldr	r1, [r7, #16]
 800763c:	68f8      	ldr	r0, [r7, #12]
 800763e:	f000 fea7 	bl	8008390 <I2C_ITSlaveCplt>
 8007642:	e0ca      	b.n	80077da <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007644:	693b      	ldr	r3, [r7, #16]
 8007646:	f003 0310 	and.w	r3, r3, #16
 800764a:	2b00      	cmp	r3, #0
 800764c:	d04b      	beq.n	80076e6 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007654:	2b00      	cmp	r3, #0
 8007656:	d046      	beq.n	80076e6 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800765c:	b29b      	uxth	r3, r3
 800765e:	2b00      	cmp	r3, #0
 8007660:	d128      	bne.n	80076b4 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007668:	b2db      	uxtb	r3, r3
 800766a:	2b28      	cmp	r3, #40	@ 0x28
 800766c:	d108      	bne.n	8007680 <I2C_Slave_ISR_IT+0x86>
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007674:	d104      	bne.n	8007680 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8007676:	6939      	ldr	r1, [r7, #16]
 8007678:	68f8      	ldr	r0, [r7, #12]
 800767a:	f001 f8dd 	bl	8008838 <I2C_ITListenCplt>
 800767e:	e031      	b.n	80076e4 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007686:	b2db      	uxtb	r3, r3
 8007688:	2b29      	cmp	r3, #41	@ 0x29
 800768a:	d10e      	bne.n	80076aa <I2C_Slave_ISR_IT+0xb0>
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007692:	d00a      	beq.n	80076aa <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	2210      	movs	r2, #16
 800769a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800769c:	68f8      	ldr	r0, [r7, #12]
 800769e:	f001 fa36 	bl	8008b0e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80076a2:	68f8      	ldr	r0, [r7, #12]
 80076a4:	f000 fd4f 	bl	8008146 <I2C_ITSlaveSeqCplt>
 80076a8:	e01c      	b.n	80076e4 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	2210      	movs	r2, #16
 80076b0:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80076b2:	e08f      	b.n	80077d4 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	2210      	movs	r2, #16
 80076ba:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076c0:	f043 0204 	orr.w	r2, r3, #4
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d003      	beq.n	80076d6 <I2C_Slave_ISR_IT+0xdc>
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80076d4:	d17e      	bne.n	80077d4 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076da:	4619      	mov	r1, r3
 80076dc:	68f8      	ldr	r0, [r7, #12]
 80076de:	f001 f8ff 	bl	80088e0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80076e2:	e077      	b.n	80077d4 <I2C_Slave_ISR_IT+0x1da>
 80076e4:	e076      	b.n	80077d4 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	f003 0304 	and.w	r3, r3, #4
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d02f      	beq.n	8007750 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d02a      	beq.n	8007750 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076fe:	b29b      	uxth	r3, r3
 8007700:	2b00      	cmp	r3, #0
 8007702:	d018      	beq.n	8007736 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800770e:	b2d2      	uxtb	r2, r2
 8007710:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007716:	1c5a      	adds	r2, r3, #1
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007720:	3b01      	subs	r3, #1
 8007722:	b29a      	uxth	r2, r3
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800772c:	b29b      	uxth	r3, r3
 800772e:	3b01      	subs	r3, #1
 8007730:	b29a      	uxth	r2, r3
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800773a:	b29b      	uxth	r3, r3
 800773c:	2b00      	cmp	r3, #0
 800773e:	d14b      	bne.n	80077d8 <I2C_Slave_ISR_IT+0x1de>
 8007740:	697b      	ldr	r3, [r7, #20]
 8007742:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007746:	d047      	beq.n	80077d8 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8007748:	68f8      	ldr	r0, [r7, #12]
 800774a:	f000 fcfc 	bl	8008146 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800774e:	e043      	b.n	80077d8 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	f003 0308 	and.w	r3, r3, #8
 8007756:	2b00      	cmp	r3, #0
 8007758:	d009      	beq.n	800776e <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007760:	2b00      	cmp	r3, #0
 8007762:	d004      	beq.n	800776e <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8007764:	6939      	ldr	r1, [r7, #16]
 8007766:	68f8      	ldr	r0, [r7, #12]
 8007768:	f000 fc2c 	bl	8007fc4 <I2C_ITAddrCplt>
 800776c:	e035      	b.n	80077da <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800776e:	693b      	ldr	r3, [r7, #16]
 8007770:	f003 0302 	and.w	r3, r3, #2
 8007774:	2b00      	cmp	r3, #0
 8007776:	d030      	beq.n	80077da <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800777e:	2b00      	cmp	r3, #0
 8007780:	d02b      	beq.n	80077da <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007786:	b29b      	uxth	r3, r3
 8007788:	2b00      	cmp	r3, #0
 800778a:	d018      	beq.n	80077be <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007790:	781a      	ldrb	r2, [r3, #0]
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800779c:	1c5a      	adds	r2, r3, #1
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80077a6:	b29b      	uxth	r3, r3
 80077a8:	3b01      	subs	r3, #1
 80077aa:	b29a      	uxth	r2, r3
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80077b4:	3b01      	subs	r3, #1
 80077b6:	b29a      	uxth	r2, r3
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	851a      	strh	r2, [r3, #40]	@ 0x28
 80077bc:	e00d      	b.n	80077da <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80077c4:	d002      	beq.n	80077cc <I2C_Slave_ISR_IT+0x1d2>
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d106      	bne.n	80077da <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80077cc:	68f8      	ldr	r0, [r7, #12]
 80077ce:	f000 fcba 	bl	8008146 <I2C_ITSlaveSeqCplt>
 80077d2:	e002      	b.n	80077da <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 80077d4:	bf00      	nop
 80077d6:	e000      	b.n	80077da <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 80077d8:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	2200      	movs	r2, #0
 80077de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80077e2:	2300      	movs	r3, #0
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	3718      	adds	r7, #24
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}

080077ec <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b088      	sub	sp, #32
 80077f0:	af02      	add	r7, sp, #8
 80077f2:	60f8      	str	r0, [r7, #12]
 80077f4:	60b9      	str	r1, [r7, #8]
 80077f6:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80077fe:	2b01      	cmp	r3, #1
 8007800:	d101      	bne.n	8007806 <I2C_Master_ISR_DMA+0x1a>
 8007802:	2302      	movs	r3, #2
 8007804:	e0d9      	b.n	80079ba <I2C_Master_ISR_DMA+0x1ce>
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	2201      	movs	r2, #1
 800780a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	f003 0310 	and.w	r3, r3, #16
 8007814:	2b00      	cmp	r3, #0
 8007816:	d016      	beq.n	8007846 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800781e:	2b00      	cmp	r3, #0
 8007820:	d011      	beq.n	8007846 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	2210      	movs	r2, #16
 8007828:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800782e:	f043 0204 	orr.w	r2, r3, #4
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8007836:	2120      	movs	r1, #32
 8007838:	68f8      	ldr	r0, [r7, #12]
 800783a:	f001 fb61 	bl	8008f00 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800783e:	68f8      	ldr	r0, [r7, #12]
 8007840:	f001 f965 	bl	8008b0e <I2C_Flush_TXDR>
 8007844:	e0b4      	b.n	80079b0 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800784c:	2b00      	cmp	r3, #0
 800784e:	d071      	beq.n	8007934 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8007856:	2b00      	cmp	r3, #0
 8007858:	d06c      	beq.n	8007934 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	681a      	ldr	r2, [r3, #0]
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007868:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800786e:	b29b      	uxth	r3, r3
 8007870:	2b00      	cmp	r3, #0
 8007872:	d04e      	beq.n	8007912 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	685b      	ldr	r3, [r3, #4]
 800787a:	b29b      	uxth	r3, r3
 800787c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007880:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007886:	b29b      	uxth	r3, r3
 8007888:	2bff      	cmp	r3, #255	@ 0xff
 800788a:	d906      	bls.n	800789a <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	22ff      	movs	r2, #255	@ 0xff
 8007890:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8007892:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007896:	617b      	str	r3, [r7, #20]
 8007898:	e010      	b.n	80078bc <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800789e:	b29a      	uxth	r2, r3
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078a8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80078ac:	d003      	beq.n	80078b6 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078b2:	617b      	str	r3, [r7, #20]
 80078b4:	e002      	b.n	80078bc <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80078b6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80078ba:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80078c0:	b2da      	uxtb	r2, r3
 80078c2:	8a79      	ldrh	r1, [r7, #18]
 80078c4:	2300      	movs	r3, #0
 80078c6:	9300      	str	r3, [sp, #0]
 80078c8:	697b      	ldr	r3, [r7, #20]
 80078ca:	68f8      	ldr	r0, [r7, #12]
 80078cc:	f001 fae6 	bl	8008e9c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80078d4:	b29a      	uxth	r2, r3
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80078da:	1ad3      	subs	r3, r2, r3
 80078dc:	b29a      	uxth	r2, r3
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80078e8:	b2db      	uxtb	r3, r3
 80078ea:	2b22      	cmp	r3, #34	@ 0x22
 80078ec:	d108      	bne.n	8007900 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	681a      	ldr	r2, [r3, #0]
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80078fc:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80078fe:	e057      	b.n	80079b0 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	681a      	ldr	r2, [r3, #0]
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800790e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8007910:	e04e      	b.n	80079b0 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	685b      	ldr	r3, [r3, #4]
 8007918:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800791c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007920:	d003      	beq.n	800792a <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8007922:	68f8      	ldr	r0, [r7, #12]
 8007924:	f000 fbd2 	bl	80080cc <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8007928:	e042      	b.n	80079b0 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800792a:	2140      	movs	r1, #64	@ 0x40
 800792c:	68f8      	ldr	r0, [r7, #12]
 800792e:	f000 ffd7 	bl	80088e0 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8007932:	e03d      	b.n	80079b0 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800793a:	2b00      	cmp	r3, #0
 800793c:	d028      	beq.n	8007990 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8007944:	2b00      	cmp	r3, #0
 8007946:	d023      	beq.n	8007990 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800794c:	b29b      	uxth	r3, r3
 800794e:	2b00      	cmp	r3, #0
 8007950:	d119      	bne.n	8007986 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	685b      	ldr	r3, [r3, #4]
 8007958:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800795c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007960:	d025      	beq.n	80079ae <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007966:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800796a:	d108      	bne.n	800797e <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	685a      	ldr	r2, [r3, #4]
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800797a:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800797c:	e017      	b.n	80079ae <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800797e:	68f8      	ldr	r0, [r7, #12]
 8007980:	f000 fba4 	bl	80080cc <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8007984:	e013      	b.n	80079ae <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8007986:	2140      	movs	r1, #64	@ 0x40
 8007988:	68f8      	ldr	r0, [r7, #12]
 800798a:	f000 ffa9 	bl	80088e0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800798e:	e00e      	b.n	80079ae <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	f003 0320 	and.w	r3, r3, #32
 8007996:	2b00      	cmp	r3, #0
 8007998:	d00a      	beq.n	80079b0 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d005      	beq.n	80079b0 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80079a4:	68b9      	ldr	r1, [r7, #8]
 80079a6:	68f8      	ldr	r0, [r7, #12]
 80079a8:	f000 fc2a 	bl	8008200 <I2C_ITMasterCplt>
 80079ac:	e000      	b.n	80079b0 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 80079ae:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	2200      	movs	r2, #0
 80079b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80079b8:	2300      	movs	r3, #0
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	3718      	adds	r7, #24
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}
	...

080079c4 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b088      	sub	sp, #32
 80079c8:	af02      	add	r7, sp, #8
 80079ca:	60f8      	str	r0, [r7, #12]
 80079cc:	60b9      	str	r1, [r7, #8]
 80079ce:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80079d0:	4b8d      	ldr	r3, [pc, #564]	@ (8007c08 <I2C_Mem_ISR_DMA+0x244>)
 80079d2:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80079da:	2b01      	cmp	r3, #1
 80079dc:	d101      	bne.n	80079e2 <I2C_Mem_ISR_DMA+0x1e>
 80079de:	2302      	movs	r3, #2
 80079e0:	e10e      	b.n	8007c00 <I2C_Mem_ISR_DMA+0x23c>
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	2201      	movs	r2, #1
 80079e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	f003 0310 	and.w	r3, r3, #16
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d016      	beq.n	8007a22 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d011      	beq.n	8007a22 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	2210      	movs	r2, #16
 8007a04:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a0a:	f043 0204 	orr.w	r2, r3, #4
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8007a12:	2120      	movs	r1, #32
 8007a14:	68f8      	ldr	r0, [r7, #12]
 8007a16:	f001 fa73 	bl	8008f00 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007a1a:	68f8      	ldr	r0, [r7, #12]
 8007a1c:	f001 f877 	bl	8008b0e <I2C_Flush_TXDR>
 8007a20:	e0e9      	b.n	8007bf6 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	f003 0302 	and.w	r3, r3, #2
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d00e      	beq.n	8007a4a <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d009      	beq.n	8007a4a <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	68fa      	ldr	r2, [r7, #12]
 8007a3c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007a3e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	f04f 32ff 	mov.w	r2, #4294967295
 8007a46:	651a      	str	r2, [r3, #80]	@ 0x50
 8007a48:	e0d5      	b.n	8007bf6 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8007a4a:	68bb      	ldr	r3, [r7, #8]
 8007a4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d05f      	beq.n	8007b14 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d05a      	beq.n	8007b14 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007a5e:	2101      	movs	r1, #1
 8007a60:	68f8      	ldr	r0, [r7, #12]
 8007a62:	f001 fad1 	bl	8009008 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8007a66:	2110      	movs	r1, #16
 8007a68:	68f8      	ldr	r0, [r7, #12]
 8007a6a:	f001 fa49 	bl	8008f00 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a72:	b29b      	uxth	r3, r3
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d048      	beq.n	8007b0a <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a7c:	b29b      	uxth	r3, r3
 8007a7e:	2bff      	cmp	r3, #255	@ 0xff
 8007a80:	d910      	bls.n	8007aa4 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	22ff      	movs	r2, #255	@ 0xff
 8007a86:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a8c:	b299      	uxth	r1, r3
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a92:	b2da      	uxtb	r2, r3
 8007a94:	2300      	movs	r3, #0
 8007a96:	9300      	str	r3, [sp, #0]
 8007a98:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007a9c:	68f8      	ldr	r0, [r7, #12]
 8007a9e:	f001 f9fd 	bl	8008e9c <I2C_TransferConfig>
 8007aa2:	e011      	b.n	8007ac8 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007aa8:	b29a      	uxth	r2, r3
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ab2:	b299      	uxth	r1, r3
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ab8:	b2da      	uxtb	r2, r3
 8007aba:	2300      	movs	r3, #0
 8007abc:	9300      	str	r3, [sp, #0]
 8007abe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007ac2:	68f8      	ldr	r0, [r7, #12]
 8007ac4:	f001 f9ea 	bl	8008e9c <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007acc:	b29a      	uxth	r2, r3
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ad2:	1ad3      	subs	r3, r2, r3
 8007ad4:	b29a      	uxth	r2, r3
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ae0:	b2db      	uxtb	r3, r3
 8007ae2:	2b22      	cmp	r3, #34	@ 0x22
 8007ae4:	d108      	bne.n	8007af8 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	681a      	ldr	r2, [r3, #0]
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007af4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8007af6:	e07e      	b.n	8007bf6 <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	681a      	ldr	r2, [r3, #0]
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007b06:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8007b08:	e075      	b.n	8007bf6 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8007b0a:	2140      	movs	r1, #64	@ 0x40
 8007b0c:	68f8      	ldr	r0, [r7, #12]
 8007b0e:	f000 fee7 	bl	80088e0 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8007b12:	e070      	b.n	8007bf6 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d05d      	beq.n	8007bda <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d058      	beq.n	8007bda <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007b28:	2101      	movs	r1, #1
 8007b2a:	68f8      	ldr	r0, [r7, #12]
 8007b2c:	f001 fa6c 	bl	8009008 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8007b30:	2110      	movs	r1, #16
 8007b32:	68f8      	ldr	r0, [r7, #12]
 8007b34:	f001 f9e4 	bl	8008f00 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007b3e:	b2db      	uxtb	r3, r3
 8007b40:	2b22      	cmp	r3, #34	@ 0x22
 8007b42:	d101      	bne.n	8007b48 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 8007b44:	4b31      	ldr	r3, [pc, #196]	@ (8007c0c <I2C_Mem_ISR_DMA+0x248>)
 8007b46:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b4c:	b29b      	uxth	r3, r3
 8007b4e:	2bff      	cmp	r3, #255	@ 0xff
 8007b50:	d910      	bls.n	8007b74 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	22ff      	movs	r2, #255	@ 0xff
 8007b56:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b5c:	b299      	uxth	r1, r3
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b62:	b2da      	uxtb	r2, r3
 8007b64:	697b      	ldr	r3, [r7, #20]
 8007b66:	9300      	str	r3, [sp, #0]
 8007b68:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007b6c:	68f8      	ldr	r0, [r7, #12]
 8007b6e:	f001 f995 	bl	8008e9c <I2C_TransferConfig>
 8007b72:	e011      	b.n	8007b98 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b78:	b29a      	uxth	r2, r3
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b82:	b299      	uxth	r1, r3
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b88:	b2da      	uxtb	r2, r3
 8007b8a:	697b      	ldr	r3, [r7, #20]
 8007b8c:	9300      	str	r3, [sp, #0]
 8007b8e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007b92:	68f8      	ldr	r0, [r7, #12]
 8007b94:	f001 f982 	bl	8008e9c <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b9c:	b29a      	uxth	r2, r3
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ba2:	1ad3      	subs	r3, r2, r3
 8007ba4:	b29a      	uxth	r2, r3
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007bb0:	b2db      	uxtb	r3, r3
 8007bb2:	2b22      	cmp	r3, #34	@ 0x22
 8007bb4:	d108      	bne.n	8007bc8 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	681a      	ldr	r2, [r3, #0]
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007bc4:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007bc6:	e016      	b.n	8007bf6 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	681a      	ldr	r2, [r3, #0]
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007bd6:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007bd8:	e00d      	b.n	8007bf6 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	f003 0320 	and.w	r3, r3, #32
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d008      	beq.n	8007bf6 <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d003      	beq.n	8007bf6 <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8007bee:	68b9      	ldr	r1, [r7, #8]
 8007bf0:	68f8      	ldr	r0, [r7, #12]
 8007bf2:	f000 fb05 	bl	8008200 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007bfe:	2300      	movs	r3, #0
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	3718      	adds	r7, #24
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}
 8007c08:	80002000 	.word	0x80002000
 8007c0c:	80002400 	.word	0x80002400

08007c10 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b088      	sub	sp, #32
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	60f8      	str	r0, [r7, #12]
 8007c18:	60b9      	str	r1, [r7, #8]
 8007c1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c20:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8007c22:	2300      	movs	r3, #0
 8007c24:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007c2c:	2b01      	cmp	r3, #1
 8007c2e:	d101      	bne.n	8007c34 <I2C_Slave_ISR_DMA+0x24>
 8007c30:	2302      	movs	r3, #2
 8007c32:	e1c2      	b.n	8007fba <I2C_Slave_ISR_DMA+0x3aa>
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	2201      	movs	r2, #1
 8007c38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	f003 0320 	and.w	r3, r3, #32
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d009      	beq.n	8007c5a <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d004      	beq.n	8007c5a <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8007c50:	68b9      	ldr	r1, [r7, #8]
 8007c52:	68f8      	ldr	r0, [r7, #12]
 8007c54:	f000 fb9c 	bl	8008390 <I2C_ITSlaveCplt>
 8007c58:	e1aa      	b.n	8007fb0 <I2C_Slave_ISR_DMA+0x3a0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	f003 0310 	and.w	r3, r3, #16
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	f000 8197 	beq.w	8007f94 <I2C_Slave_ISR_DMA+0x384>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	f000 8191 	beq.w	8007f94 <I2C_Slave_ISR_DMA+0x384>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d105      	bne.n	8007c88 <I2C_Slave_ISR_DMA+0x78>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	f000 817f 	beq.w	8007f86 <I2C_Slave_ISR_DMA+0x376>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d07b      	beq.n	8007d88 <I2C_Slave_ISR_DMA+0x178>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d076      	beq.n	8007d88 <I2C_Slave_ISR_DMA+0x178>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	4a74      	ldr	r2, [pc, #464]	@ (8007e74 <I2C_Slave_ISR_DMA+0x264>)
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d059      	beq.n	8007d5a <I2C_Slave_ISR_DMA+0x14a>
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4a72      	ldr	r2, [pc, #456]	@ (8007e78 <I2C_Slave_ISR_DMA+0x268>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d053      	beq.n	8007d5a <I2C_Slave_ISR_DMA+0x14a>
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	4a70      	ldr	r2, [pc, #448]	@ (8007e7c <I2C_Slave_ISR_DMA+0x26c>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d04d      	beq.n	8007d5a <I2C_Slave_ISR_DMA+0x14a>
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	4a6e      	ldr	r2, [pc, #440]	@ (8007e80 <I2C_Slave_ISR_DMA+0x270>)
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d047      	beq.n	8007d5a <I2C_Slave_ISR_DMA+0x14a>
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4a6c      	ldr	r2, [pc, #432]	@ (8007e84 <I2C_Slave_ISR_DMA+0x274>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d041      	beq.n	8007d5a <I2C_Slave_ISR_DMA+0x14a>
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4a6a      	ldr	r2, [pc, #424]	@ (8007e88 <I2C_Slave_ISR_DMA+0x278>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d03b      	beq.n	8007d5a <I2C_Slave_ISR_DMA+0x14a>
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4a68      	ldr	r2, [pc, #416]	@ (8007e8c <I2C_Slave_ISR_DMA+0x27c>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d035      	beq.n	8007d5a <I2C_Slave_ISR_DMA+0x14a>
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	4a66      	ldr	r2, [pc, #408]	@ (8007e90 <I2C_Slave_ISR_DMA+0x280>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d02f      	beq.n	8007d5a <I2C_Slave_ISR_DMA+0x14a>
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	4a64      	ldr	r2, [pc, #400]	@ (8007e94 <I2C_Slave_ISR_DMA+0x284>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d029      	beq.n	8007d5a <I2C_Slave_ISR_DMA+0x14a>
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	4a62      	ldr	r2, [pc, #392]	@ (8007e98 <I2C_Slave_ISR_DMA+0x288>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d023      	beq.n	8007d5a <I2C_Slave_ISR_DMA+0x14a>
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	4a60      	ldr	r2, [pc, #384]	@ (8007e9c <I2C_Slave_ISR_DMA+0x28c>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d01d      	beq.n	8007d5a <I2C_Slave_ISR_DMA+0x14a>
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	4a5e      	ldr	r2, [pc, #376]	@ (8007ea0 <I2C_Slave_ISR_DMA+0x290>)
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d017      	beq.n	8007d5a <I2C_Slave_ISR_DMA+0x14a>
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4a5c      	ldr	r2, [pc, #368]	@ (8007ea4 <I2C_Slave_ISR_DMA+0x294>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d011      	beq.n	8007d5a <I2C_Slave_ISR_DMA+0x14a>
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	4a5a      	ldr	r2, [pc, #360]	@ (8007ea8 <I2C_Slave_ISR_DMA+0x298>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d00b      	beq.n	8007d5a <I2C_Slave_ISR_DMA+0x14a>
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4a58      	ldr	r2, [pc, #352]	@ (8007eac <I2C_Slave_ISR_DMA+0x29c>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d005      	beq.n	8007d5a <I2C_Slave_ISR_DMA+0x14a>
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	4a56      	ldr	r2, [pc, #344]	@ (8007eb0 <I2C_Slave_ISR_DMA+0x2a0>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d109      	bne.n	8007d6e <I2C_Slave_ISR_DMA+0x15e>
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	685b      	ldr	r3, [r3, #4]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	bf0c      	ite	eq
 8007d66:	2301      	moveq	r3, #1
 8007d68:	2300      	movne	r3, #0
 8007d6a:	b2db      	uxtb	r3, r3
 8007d6c:	e008      	b.n	8007d80 <I2C_Slave_ISR_DMA+0x170>
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	bf0c      	ite	eq
 8007d7a:	2301      	moveq	r3, #1
 8007d7c:	2300      	movne	r3, #0
 8007d7e:	b2db      	uxtb	r3, r3
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d001      	beq.n	8007d88 <I2C_Slave_ISR_DMA+0x178>
          {
            treatdmanack = 1U;
 8007d84:	2301      	movs	r3, #1
 8007d86:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	f000 809e 	beq.w	8007ece <I2C_Slave_ISR_DMA+0x2be>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	f000 8098 	beq.w	8007ece <I2C_Slave_ISR_DMA+0x2be>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	4a33      	ldr	r2, [pc, #204]	@ (8007e74 <I2C_Slave_ISR_DMA+0x264>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d059      	beq.n	8007e5e <I2C_Slave_ISR_DMA+0x24e>
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	4a31      	ldr	r2, [pc, #196]	@ (8007e78 <I2C_Slave_ISR_DMA+0x268>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d053      	beq.n	8007e5e <I2C_Slave_ISR_DMA+0x24e>
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	4a2f      	ldr	r2, [pc, #188]	@ (8007e7c <I2C_Slave_ISR_DMA+0x26c>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d04d      	beq.n	8007e5e <I2C_Slave_ISR_DMA+0x24e>
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4a2d      	ldr	r2, [pc, #180]	@ (8007e80 <I2C_Slave_ISR_DMA+0x270>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d047      	beq.n	8007e5e <I2C_Slave_ISR_DMA+0x24e>
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	4a2b      	ldr	r2, [pc, #172]	@ (8007e84 <I2C_Slave_ISR_DMA+0x274>)
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	d041      	beq.n	8007e5e <I2C_Slave_ISR_DMA+0x24e>
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	4a29      	ldr	r2, [pc, #164]	@ (8007e88 <I2C_Slave_ISR_DMA+0x278>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d03b      	beq.n	8007e5e <I2C_Slave_ISR_DMA+0x24e>
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	4a27      	ldr	r2, [pc, #156]	@ (8007e8c <I2C_Slave_ISR_DMA+0x27c>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d035      	beq.n	8007e5e <I2C_Slave_ISR_DMA+0x24e>
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	4a25      	ldr	r2, [pc, #148]	@ (8007e90 <I2C_Slave_ISR_DMA+0x280>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d02f      	beq.n	8007e5e <I2C_Slave_ISR_DMA+0x24e>
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4a23      	ldr	r2, [pc, #140]	@ (8007e94 <I2C_Slave_ISR_DMA+0x284>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d029      	beq.n	8007e5e <I2C_Slave_ISR_DMA+0x24e>
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4a21      	ldr	r2, [pc, #132]	@ (8007e98 <I2C_Slave_ISR_DMA+0x288>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d023      	beq.n	8007e5e <I2C_Slave_ISR_DMA+0x24e>
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	4a1f      	ldr	r2, [pc, #124]	@ (8007e9c <I2C_Slave_ISR_DMA+0x28c>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d01d      	beq.n	8007e5e <I2C_Slave_ISR_DMA+0x24e>
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4a1d      	ldr	r2, [pc, #116]	@ (8007ea0 <I2C_Slave_ISR_DMA+0x290>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d017      	beq.n	8007e5e <I2C_Slave_ISR_DMA+0x24e>
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	4a1b      	ldr	r2, [pc, #108]	@ (8007ea4 <I2C_Slave_ISR_DMA+0x294>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d011      	beq.n	8007e5e <I2C_Slave_ISR_DMA+0x24e>
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	4a19      	ldr	r2, [pc, #100]	@ (8007ea8 <I2C_Slave_ISR_DMA+0x298>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d00b      	beq.n	8007e5e <I2C_Slave_ISR_DMA+0x24e>
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	4a17      	ldr	r2, [pc, #92]	@ (8007eac <I2C_Slave_ISR_DMA+0x29c>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d005      	beq.n	8007e5e <I2C_Slave_ISR_DMA+0x24e>
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	4a15      	ldr	r2, [pc, #84]	@ (8007eb0 <I2C_Slave_ISR_DMA+0x2a0>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d12a      	bne.n	8007eb4 <I2C_Slave_ISR_DMA+0x2a4>
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	685b      	ldr	r3, [r3, #4]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	bf0c      	ite	eq
 8007e6a:	2301      	moveq	r3, #1
 8007e6c:	2300      	movne	r3, #0
 8007e6e:	b2db      	uxtb	r3, r3
 8007e70:	e029      	b.n	8007ec6 <I2C_Slave_ISR_DMA+0x2b6>
 8007e72:	bf00      	nop
 8007e74:	40020010 	.word	0x40020010
 8007e78:	40020028 	.word	0x40020028
 8007e7c:	40020040 	.word	0x40020040
 8007e80:	40020058 	.word	0x40020058
 8007e84:	40020070 	.word	0x40020070
 8007e88:	40020088 	.word	0x40020088
 8007e8c:	400200a0 	.word	0x400200a0
 8007e90:	400200b8 	.word	0x400200b8
 8007e94:	40020410 	.word	0x40020410
 8007e98:	40020428 	.word	0x40020428
 8007e9c:	40020440 	.word	0x40020440
 8007ea0:	40020458 	.word	0x40020458
 8007ea4:	40020470 	.word	0x40020470
 8007ea8:	40020488 	.word	0x40020488
 8007eac:	400204a0 	.word	0x400204a0
 8007eb0:	400204b8 	.word	0x400204b8
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	685b      	ldr	r3, [r3, #4]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	bf0c      	ite	eq
 8007ec0:	2301      	moveq	r3, #1
 8007ec2:	2300      	movne	r3, #0
 8007ec4:	b2db      	uxtb	r3, r3
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d001      	beq.n	8007ece <I2C_Slave_ISR_DMA+0x2be>
          {
            treatdmanack = 1U;
 8007eca:	2301      	movs	r3, #1
 8007ecc:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8007ece:	69fb      	ldr	r3, [r7, #28]
 8007ed0:	2b01      	cmp	r3, #1
 8007ed2:	d128      	bne.n	8007f26 <I2C_Slave_ISR_DMA+0x316>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007eda:	b2db      	uxtb	r3, r3
 8007edc:	2b28      	cmp	r3, #40	@ 0x28
 8007ede:	d108      	bne.n	8007ef2 <I2C_Slave_ISR_DMA+0x2e2>
 8007ee0:	69bb      	ldr	r3, [r7, #24]
 8007ee2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007ee6:	d104      	bne.n	8007ef2 <I2C_Slave_ISR_DMA+0x2e2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8007ee8:	68b9      	ldr	r1, [r7, #8]
 8007eea:	68f8      	ldr	r0, [r7, #12]
 8007eec:	f000 fca4 	bl	8008838 <I2C_ITListenCplt>
 8007ef0:	e048      	b.n	8007f84 <I2C_Slave_ISR_DMA+0x374>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ef8:	b2db      	uxtb	r3, r3
 8007efa:	2b29      	cmp	r3, #41	@ 0x29
 8007efc:	d10e      	bne.n	8007f1c <I2C_Slave_ISR_DMA+0x30c>
 8007efe:	69bb      	ldr	r3, [r7, #24]
 8007f00:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007f04:	d00a      	beq.n	8007f1c <I2C_Slave_ISR_DMA+0x30c>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	2210      	movs	r2, #16
 8007f0c:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8007f0e:	68f8      	ldr	r0, [r7, #12]
 8007f10:	f000 fdfd 	bl	8008b0e <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8007f14:	68f8      	ldr	r0, [r7, #12]
 8007f16:	f000 f916 	bl	8008146 <I2C_ITSlaveSeqCplt>
 8007f1a:	e033      	b.n	8007f84 <I2C_Slave_ISR_DMA+0x374>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	2210      	movs	r2, #16
 8007f22:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8007f24:	e034      	b.n	8007f90 <I2C_Slave_ISR_DMA+0x380>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	2210      	movs	r2, #16
 8007f2c:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f32:	f043 0204 	orr.w	r2, r3, #4
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007f40:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007f42:	69bb      	ldr	r3, [r7, #24]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d003      	beq.n	8007f50 <I2C_Slave_ISR_DMA+0x340>
 8007f48:	69bb      	ldr	r3, [r7, #24]
 8007f4a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007f4e:	d11f      	bne.n	8007f90 <I2C_Slave_ISR_DMA+0x380>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007f50:	7dfb      	ldrb	r3, [r7, #23]
 8007f52:	2b21      	cmp	r3, #33	@ 0x21
 8007f54:	d002      	beq.n	8007f5c <I2C_Slave_ISR_DMA+0x34c>
 8007f56:	7dfb      	ldrb	r3, [r7, #23]
 8007f58:	2b29      	cmp	r3, #41	@ 0x29
 8007f5a:	d103      	bne.n	8007f64 <I2C_Slave_ISR_DMA+0x354>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	2221      	movs	r2, #33	@ 0x21
 8007f60:	631a      	str	r2, [r3, #48]	@ 0x30
 8007f62:	e008      	b.n	8007f76 <I2C_Slave_ISR_DMA+0x366>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007f64:	7dfb      	ldrb	r3, [r7, #23]
 8007f66:	2b22      	cmp	r3, #34	@ 0x22
 8007f68:	d002      	beq.n	8007f70 <I2C_Slave_ISR_DMA+0x360>
 8007f6a:	7dfb      	ldrb	r3, [r7, #23]
 8007f6c:	2b2a      	cmp	r3, #42	@ 0x2a
 8007f6e:	d102      	bne.n	8007f76 <I2C_Slave_ISR_DMA+0x366>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	2222      	movs	r2, #34	@ 0x22
 8007f74:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f7a:	4619      	mov	r1, r3
 8007f7c:	68f8      	ldr	r0, [r7, #12]
 8007f7e:	f000 fcaf 	bl	80088e0 <I2C_ITError>
      if (treatdmanack == 1U)
 8007f82:	e005      	b.n	8007f90 <I2C_Slave_ISR_DMA+0x380>
 8007f84:	e004      	b.n	8007f90 <I2C_Slave_ISR_DMA+0x380>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	2210      	movs	r2, #16
 8007f8c:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8007f8e:	e00f      	b.n	8007fb0 <I2C_Slave_ISR_DMA+0x3a0>
      if (treatdmanack == 1U)
 8007f90:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8007f92:	e00d      	b.n	8007fb0 <I2C_Slave_ISR_DMA+0x3a0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	f003 0308 	and.w	r3, r3, #8
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d008      	beq.n	8007fb0 <I2C_Slave_ISR_DMA+0x3a0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d003      	beq.n	8007fb0 <I2C_Slave_ISR_DMA+0x3a0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8007fa8:	68b9      	ldr	r1, [r7, #8]
 8007faa:	68f8      	ldr	r0, [r7, #12]
 8007fac:	f000 f80a 	bl	8007fc4 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007fb8:	2300      	movs	r3, #0
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	3720      	adds	r7, #32
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}
 8007fc2:	bf00      	nop

08007fc4 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b084      	sub	sp, #16
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
 8007fcc:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007fd4:	b2db      	uxtb	r3, r3
 8007fd6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007fda:	2b28      	cmp	r3, #40	@ 0x28
 8007fdc:	d16a      	bne.n	80080b4 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	699b      	ldr	r3, [r3, #24]
 8007fe4:	0c1b      	lsrs	r3, r3, #16
 8007fe6:	b2db      	uxtb	r3, r3
 8007fe8:	f003 0301 	and.w	r3, r3, #1
 8007fec:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	699b      	ldr	r3, [r3, #24]
 8007ff4:	0c1b      	lsrs	r3, r3, #16
 8007ff6:	b29b      	uxth	r3, r3
 8007ff8:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8007ffc:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	689b      	ldr	r3, [r3, #8]
 8008004:	b29b      	uxth	r3, r3
 8008006:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800800a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	68db      	ldr	r3, [r3, #12]
 8008012:	b29b      	uxth	r3, r3
 8008014:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8008018:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	68db      	ldr	r3, [r3, #12]
 800801e:	2b02      	cmp	r3, #2
 8008020:	d138      	bne.n	8008094 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8008022:	897b      	ldrh	r3, [r7, #10]
 8008024:	09db      	lsrs	r3, r3, #7
 8008026:	b29a      	uxth	r2, r3
 8008028:	89bb      	ldrh	r3, [r7, #12]
 800802a:	4053      	eors	r3, r2
 800802c:	b29b      	uxth	r3, r3
 800802e:	f003 0306 	and.w	r3, r3, #6
 8008032:	2b00      	cmp	r3, #0
 8008034:	d11c      	bne.n	8008070 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8008036:	897b      	ldrh	r3, [r7, #10]
 8008038:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800803e:	1c5a      	adds	r2, r3, #1
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008048:	2b02      	cmp	r3, #2
 800804a:	d13b      	bne.n	80080c4 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2200      	movs	r2, #0
 8008050:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	2208      	movs	r2, #8
 8008058:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2200      	movs	r2, #0
 800805e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008062:	89ba      	ldrh	r2, [r7, #12]
 8008064:	7bfb      	ldrb	r3, [r7, #15]
 8008066:	4619      	mov	r1, r3
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f7ff fa86 	bl	800757a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800806e:	e029      	b.n	80080c4 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8008070:	893b      	ldrh	r3, [r7, #8]
 8008072:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008074:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f000 ffc5 	bl	8009008 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2200      	movs	r2, #0
 8008082:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008086:	89ba      	ldrh	r2, [r7, #12]
 8008088:	7bfb      	ldrb	r3, [r7, #15]
 800808a:	4619      	mov	r1, r3
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f7ff fa74 	bl	800757a <HAL_I2C_AddrCallback>
}
 8008092:	e017      	b.n	80080c4 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008094:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f000 ffb5 	bl	8009008 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2200      	movs	r2, #0
 80080a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80080a6:	89ba      	ldrh	r2, [r7, #12]
 80080a8:	7bfb      	ldrb	r3, [r7, #15]
 80080aa:	4619      	mov	r1, r3
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f7ff fa64 	bl	800757a <HAL_I2C_AddrCallback>
}
 80080b2:	e007      	b.n	80080c4 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	2208      	movs	r2, #8
 80080ba:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2200      	movs	r2, #0
 80080c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 80080c4:	bf00      	nop
 80080c6:	3710      	adds	r7, #16
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}

080080cc <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b082      	sub	sp, #8
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2200      	movs	r2, #0
 80080d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80080e2:	b2db      	uxtb	r3, r3
 80080e4:	2b21      	cmp	r3, #33	@ 0x21
 80080e6:	d115      	bne.n	8008114 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2220      	movs	r2, #32
 80080ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2211      	movs	r2, #17
 80080f4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2200      	movs	r2, #0
 80080fa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80080fc:	2101      	movs	r1, #1
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f000 ff82 	bl	8009008 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2200      	movs	r2, #0
 8008108:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f7ff fa0c 	bl	800752a <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008112:	e014      	b.n	800813e <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2220      	movs	r2, #32
 8008118:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2212      	movs	r2, #18
 8008120:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2200      	movs	r2, #0
 8008126:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008128:	2102      	movs	r1, #2
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f000 ff6c 	bl	8009008 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2200      	movs	r2, #0
 8008134:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f7ff fa00 	bl	800753e <HAL_I2C_MasterRxCpltCallback>
}
 800813e:	bf00      	nop
 8008140:	3708      	adds	r7, #8
 8008142:	46bd      	mov	sp, r7
 8008144:	bd80      	pop	{r7, pc}

08008146 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8008146:	b580      	push	{r7, lr}
 8008148:	b084      	sub	sp, #16
 800814a:	af00      	add	r7, sp, #0
 800814c:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2200      	movs	r2, #0
 800815a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008164:	2b00      	cmp	r3, #0
 8008166:	d008      	beq.n	800817a <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	681a      	ldr	r2, [r3, #0]
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008176:	601a      	str	r2, [r3, #0]
 8008178:	e00c      	b.n	8008194 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008180:	2b00      	cmp	r3, #0
 8008182:	d007      	beq.n	8008194 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	681a      	ldr	r2, [r3, #0]
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008192:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800819a:	b2db      	uxtb	r3, r3
 800819c:	2b29      	cmp	r3, #41	@ 0x29
 800819e:	d112      	bne.n	80081c6 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2228      	movs	r2, #40	@ 0x28
 80081a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2221      	movs	r2, #33	@ 0x21
 80081ac:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80081ae:	2101      	movs	r1, #1
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f000 ff29 	bl	8009008 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2200      	movs	r2, #0
 80081ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f7ff f9c7 	bl	8007552 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80081c4:	e017      	b.n	80081f6 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80081cc:	b2db      	uxtb	r3, r3
 80081ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80081d0:	d111      	bne.n	80081f6 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2228      	movs	r2, #40	@ 0x28
 80081d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2222      	movs	r2, #34	@ 0x22
 80081de:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80081e0:	2102      	movs	r1, #2
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f000 ff10 	bl	8009008 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2200      	movs	r2, #0
 80081ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	f7ff f9b8 	bl	8007566 <HAL_I2C_SlaveRxCpltCallback>
}
 80081f6:	bf00      	nop
 80081f8:	3710      	adds	r7, #16
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}
	...

08008200 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b086      	sub	sp, #24
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
 8008208:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	2220      	movs	r2, #32
 8008214:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800821c:	b2db      	uxtb	r3, r3
 800821e:	2b21      	cmp	r3, #33	@ 0x21
 8008220:	d107      	bne.n	8008232 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008222:	2101      	movs	r1, #1
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	f000 feef 	bl	8009008 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2211      	movs	r2, #17
 800822e:	631a      	str	r2, [r3, #48]	@ 0x30
 8008230:	e00c      	b.n	800824c <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008238:	b2db      	uxtb	r3, r3
 800823a:	2b22      	cmp	r3, #34	@ 0x22
 800823c:	d106      	bne.n	800824c <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800823e:	2102      	movs	r1, #2
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f000 fee1 	bl	8009008 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2212      	movs	r2, #18
 800824a:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	6859      	ldr	r1, [r3, #4]
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681a      	ldr	r2, [r3, #0]
 8008256:	4b4c      	ldr	r3, [pc, #304]	@ (8008388 <I2C_ITMasterCplt+0x188>)
 8008258:	400b      	ands	r3, r1
 800825a:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2200      	movs	r2, #0
 8008260:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	4a49      	ldr	r2, [pc, #292]	@ (800838c <I2C_ITMasterCplt+0x18c>)
 8008266:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8008268:	697b      	ldr	r3, [r7, #20]
 800826a:	f003 0310 	and.w	r3, r3, #16
 800826e:	2b00      	cmp	r3, #0
 8008270:	d009      	beq.n	8008286 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	2210      	movs	r2, #16
 8008278:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800827e:	f043 0204 	orr.w	r2, r3, #4
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800828c:	b2db      	uxtb	r3, r3
 800828e:	2b60      	cmp	r3, #96	@ 0x60
 8008290:	d10a      	bne.n	80082a8 <I2C_ITMasterCplt+0xa8>
 8008292:	697b      	ldr	r3, [r7, #20]
 8008294:	f003 0304 	and.w	r3, r3, #4
 8008298:	2b00      	cmp	r3, #0
 800829a:	d005      	beq.n	80082a8 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082a2:	b2db      	uxtb	r3, r3
 80082a4:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80082a6:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f000 fc30 	bl	8008b0e <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082b2:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80082ba:	b2db      	uxtb	r3, r3
 80082bc:	2b60      	cmp	r3, #96	@ 0x60
 80082be:	d002      	beq.n	80082c6 <I2C_ITMasterCplt+0xc6>
 80082c0:	693b      	ldr	r3, [r7, #16]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d006      	beq.n	80082d4 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082ca:	4619      	mov	r1, r3
 80082cc:	6878      	ldr	r0, [r7, #4]
 80082ce:	f000 fb07 	bl	80088e0 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80082d2:	e054      	b.n	800837e <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80082da:	b2db      	uxtb	r3, r3
 80082dc:	2b21      	cmp	r3, #33	@ 0x21
 80082de:	d124      	bne.n	800832a <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2220      	movs	r2, #32
 80082e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2200      	movs	r2, #0
 80082ec:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80082f4:	b2db      	uxtb	r3, r3
 80082f6:	2b40      	cmp	r3, #64	@ 0x40
 80082f8:	d10b      	bne.n	8008312 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2200      	movs	r2, #0
 80082fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2200      	movs	r2, #0
 8008306:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f7ff f94d 	bl	80075aa <HAL_I2C_MemTxCpltCallback>
}
 8008310:	e035      	b.n	800837e <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2200      	movs	r2, #0
 8008316:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2200      	movs	r2, #0
 800831e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f7ff f901 	bl	800752a <HAL_I2C_MasterTxCpltCallback>
}
 8008328:	e029      	b.n	800837e <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008330:	b2db      	uxtb	r3, r3
 8008332:	2b22      	cmp	r3, #34	@ 0x22
 8008334:	d123      	bne.n	800837e <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2220      	movs	r2, #32
 800833a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2200      	movs	r2, #0
 8008342:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800834a:	b2db      	uxtb	r3, r3
 800834c:	2b40      	cmp	r3, #64	@ 0x40
 800834e:	d10b      	bne.n	8008368 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2200      	movs	r2, #0
 8008354:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2200      	movs	r2, #0
 800835c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f7ff f92c 	bl	80075be <HAL_I2C_MemRxCpltCallback>
}
 8008366:	e00a      	b.n	800837e <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2200      	movs	r2, #0
 800836c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2200      	movs	r2, #0
 8008374:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	f7ff f8e0 	bl	800753e <HAL_I2C_MasterRxCpltCallback>
}
 800837e:	bf00      	nop
 8008380:	3718      	adds	r7, #24
 8008382:	46bd      	mov	sp, r7
 8008384:	bd80      	pop	{r7, pc}
 8008386:	bf00      	nop
 8008388:	fe00e800 	.word	0xfe00e800
 800838c:	ffff0000 	.word	0xffff0000

08008390 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b086      	sub	sp, #24
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
 8008398:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083aa:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80083b2:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	2220      	movs	r2, #32
 80083ba:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80083bc:	7afb      	ldrb	r3, [r7, #11]
 80083be:	2b21      	cmp	r3, #33	@ 0x21
 80083c0:	d002      	beq.n	80083c8 <I2C_ITSlaveCplt+0x38>
 80083c2:	7afb      	ldrb	r3, [r7, #11]
 80083c4:	2b29      	cmp	r3, #41	@ 0x29
 80083c6:	d108      	bne.n	80083da <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80083c8:	f248 0101 	movw	r1, #32769	@ 0x8001
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f000 fe1b 	bl	8009008 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2221      	movs	r2, #33	@ 0x21
 80083d6:	631a      	str	r2, [r3, #48]	@ 0x30
 80083d8:	e019      	b.n	800840e <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80083da:	7afb      	ldrb	r3, [r7, #11]
 80083dc:	2b22      	cmp	r3, #34	@ 0x22
 80083de:	d002      	beq.n	80083e6 <I2C_ITSlaveCplt+0x56>
 80083e0:	7afb      	ldrb	r3, [r7, #11]
 80083e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80083e4:	d108      	bne.n	80083f8 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80083e6:	f248 0102 	movw	r1, #32770	@ 0x8002
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f000 fe0c 	bl	8009008 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2222      	movs	r2, #34	@ 0x22
 80083f4:	631a      	str	r2, [r3, #48]	@ 0x30
 80083f6:	e00a      	b.n	800840e <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80083f8:	7afb      	ldrb	r3, [r7, #11]
 80083fa:	2b28      	cmp	r3, #40	@ 0x28
 80083fc:	d107      	bne.n	800840e <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80083fe:	f248 0103 	movw	r1, #32771	@ 0x8003
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f000 fe00 	bl	8009008 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2200      	movs	r2, #0
 800840c:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	685a      	ldr	r2, [r3, #4]
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800841c:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	6859      	ldr	r1, [r3, #4]
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681a      	ldr	r2, [r3, #0]
 8008428:	4b7f      	ldr	r3, [pc, #508]	@ (8008628 <I2C_ITSlaveCplt+0x298>)
 800842a:	400b      	ands	r3, r1
 800842c:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	f000 fb6d 	bl	8008b0e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8008434:	693b      	ldr	r3, [r7, #16]
 8008436:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800843a:	2b00      	cmp	r3, #0
 800843c:	d07a      	beq.n	8008534 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	681a      	ldr	r2, [r3, #0]
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800844c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008452:	2b00      	cmp	r3, #0
 8008454:	f000 8111 	beq.w	800867a <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	4a73      	ldr	r2, [pc, #460]	@ (800862c <I2C_ITSlaveCplt+0x29c>)
 8008460:	4293      	cmp	r3, r2
 8008462:	d059      	beq.n	8008518 <I2C_ITSlaveCplt+0x188>
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	4a71      	ldr	r2, [pc, #452]	@ (8008630 <I2C_ITSlaveCplt+0x2a0>)
 800846c:	4293      	cmp	r3, r2
 800846e:	d053      	beq.n	8008518 <I2C_ITSlaveCplt+0x188>
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	4a6f      	ldr	r2, [pc, #444]	@ (8008634 <I2C_ITSlaveCplt+0x2a4>)
 8008478:	4293      	cmp	r3, r2
 800847a:	d04d      	beq.n	8008518 <I2C_ITSlaveCplt+0x188>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	4a6d      	ldr	r2, [pc, #436]	@ (8008638 <I2C_ITSlaveCplt+0x2a8>)
 8008484:	4293      	cmp	r3, r2
 8008486:	d047      	beq.n	8008518 <I2C_ITSlaveCplt+0x188>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	4a6b      	ldr	r2, [pc, #428]	@ (800863c <I2C_ITSlaveCplt+0x2ac>)
 8008490:	4293      	cmp	r3, r2
 8008492:	d041      	beq.n	8008518 <I2C_ITSlaveCplt+0x188>
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	4a69      	ldr	r2, [pc, #420]	@ (8008640 <I2C_ITSlaveCplt+0x2b0>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d03b      	beq.n	8008518 <I2C_ITSlaveCplt+0x188>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	4a67      	ldr	r2, [pc, #412]	@ (8008644 <I2C_ITSlaveCplt+0x2b4>)
 80084a8:	4293      	cmp	r3, r2
 80084aa:	d035      	beq.n	8008518 <I2C_ITSlaveCplt+0x188>
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	4a65      	ldr	r2, [pc, #404]	@ (8008648 <I2C_ITSlaveCplt+0x2b8>)
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d02f      	beq.n	8008518 <I2C_ITSlaveCplt+0x188>
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	4a63      	ldr	r2, [pc, #396]	@ (800864c <I2C_ITSlaveCplt+0x2bc>)
 80084c0:	4293      	cmp	r3, r2
 80084c2:	d029      	beq.n	8008518 <I2C_ITSlaveCplt+0x188>
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	4a61      	ldr	r2, [pc, #388]	@ (8008650 <I2C_ITSlaveCplt+0x2c0>)
 80084cc:	4293      	cmp	r3, r2
 80084ce:	d023      	beq.n	8008518 <I2C_ITSlaveCplt+0x188>
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	4a5f      	ldr	r2, [pc, #380]	@ (8008654 <I2C_ITSlaveCplt+0x2c4>)
 80084d8:	4293      	cmp	r3, r2
 80084da:	d01d      	beq.n	8008518 <I2C_ITSlaveCplt+0x188>
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	4a5d      	ldr	r2, [pc, #372]	@ (8008658 <I2C_ITSlaveCplt+0x2c8>)
 80084e4:	4293      	cmp	r3, r2
 80084e6:	d017      	beq.n	8008518 <I2C_ITSlaveCplt+0x188>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	4a5b      	ldr	r2, [pc, #364]	@ (800865c <I2C_ITSlaveCplt+0x2cc>)
 80084f0:	4293      	cmp	r3, r2
 80084f2:	d011      	beq.n	8008518 <I2C_ITSlaveCplt+0x188>
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	4a59      	ldr	r2, [pc, #356]	@ (8008660 <I2C_ITSlaveCplt+0x2d0>)
 80084fc:	4293      	cmp	r3, r2
 80084fe:	d00b      	beq.n	8008518 <I2C_ITSlaveCplt+0x188>
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	4a57      	ldr	r2, [pc, #348]	@ (8008664 <I2C_ITSlaveCplt+0x2d4>)
 8008508:	4293      	cmp	r3, r2
 800850a:	d005      	beq.n	8008518 <I2C_ITSlaveCplt+0x188>
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	4a55      	ldr	r2, [pc, #340]	@ (8008668 <I2C_ITSlaveCplt+0x2d8>)
 8008514:	4293      	cmp	r3, r2
 8008516:	d105      	bne.n	8008524 <I2C_ITSlaveCplt+0x194>
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	685b      	ldr	r3, [r3, #4]
 8008520:	b29b      	uxth	r3, r3
 8008522:	e004      	b.n	800852e <I2C_ITSlaveCplt+0x19e>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	685b      	ldr	r3, [r3, #4]
 800852c:	b29b      	uxth	r3, r3
 800852e:	687a      	ldr	r2, [r7, #4]
 8008530:	8553      	strh	r3, [r2, #42]	@ 0x2a
 8008532:	e0a2      	b.n	800867a <I2C_ITSlaveCplt+0x2ea>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8008534:	693b      	ldr	r3, [r7, #16]
 8008536:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800853a:	2b00      	cmp	r3, #0
 800853c:	f000 809d 	beq.w	800867a <I2C_ITSlaveCplt+0x2ea>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	681a      	ldr	r2, [r3, #0]
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800854e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008554:	2b00      	cmp	r3, #0
 8008556:	f000 8090 	beq.w	800867a <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	4a32      	ldr	r2, [pc, #200]	@ (800862c <I2C_ITSlaveCplt+0x29c>)
 8008562:	4293      	cmp	r3, r2
 8008564:	d059      	beq.n	800861a <I2C_ITSlaveCplt+0x28a>
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	4a30      	ldr	r2, [pc, #192]	@ (8008630 <I2C_ITSlaveCplt+0x2a0>)
 800856e:	4293      	cmp	r3, r2
 8008570:	d053      	beq.n	800861a <I2C_ITSlaveCplt+0x28a>
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	4a2e      	ldr	r2, [pc, #184]	@ (8008634 <I2C_ITSlaveCplt+0x2a4>)
 800857a:	4293      	cmp	r3, r2
 800857c:	d04d      	beq.n	800861a <I2C_ITSlaveCplt+0x28a>
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4a2c      	ldr	r2, [pc, #176]	@ (8008638 <I2C_ITSlaveCplt+0x2a8>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d047      	beq.n	800861a <I2C_ITSlaveCplt+0x28a>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4a2a      	ldr	r2, [pc, #168]	@ (800863c <I2C_ITSlaveCplt+0x2ac>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d041      	beq.n	800861a <I2C_ITSlaveCplt+0x28a>
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	4a28      	ldr	r2, [pc, #160]	@ (8008640 <I2C_ITSlaveCplt+0x2b0>)
 800859e:	4293      	cmp	r3, r2
 80085a0:	d03b      	beq.n	800861a <I2C_ITSlaveCplt+0x28a>
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	4a26      	ldr	r2, [pc, #152]	@ (8008644 <I2C_ITSlaveCplt+0x2b4>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d035      	beq.n	800861a <I2C_ITSlaveCplt+0x28a>
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4a24      	ldr	r2, [pc, #144]	@ (8008648 <I2C_ITSlaveCplt+0x2b8>)
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d02f      	beq.n	800861a <I2C_ITSlaveCplt+0x28a>
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	4a22      	ldr	r2, [pc, #136]	@ (800864c <I2C_ITSlaveCplt+0x2bc>)
 80085c2:	4293      	cmp	r3, r2
 80085c4:	d029      	beq.n	800861a <I2C_ITSlaveCplt+0x28a>
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	4a20      	ldr	r2, [pc, #128]	@ (8008650 <I2C_ITSlaveCplt+0x2c0>)
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d023      	beq.n	800861a <I2C_ITSlaveCplt+0x28a>
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	4a1e      	ldr	r2, [pc, #120]	@ (8008654 <I2C_ITSlaveCplt+0x2c4>)
 80085da:	4293      	cmp	r3, r2
 80085dc:	d01d      	beq.n	800861a <I2C_ITSlaveCplt+0x28a>
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	4a1c      	ldr	r2, [pc, #112]	@ (8008658 <I2C_ITSlaveCplt+0x2c8>)
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d017      	beq.n	800861a <I2C_ITSlaveCplt+0x28a>
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	4a1a      	ldr	r2, [pc, #104]	@ (800865c <I2C_ITSlaveCplt+0x2cc>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d011      	beq.n	800861a <I2C_ITSlaveCplt+0x28a>
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	4a18      	ldr	r2, [pc, #96]	@ (8008660 <I2C_ITSlaveCplt+0x2d0>)
 80085fe:	4293      	cmp	r3, r2
 8008600:	d00b      	beq.n	800861a <I2C_ITSlaveCplt+0x28a>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	4a16      	ldr	r2, [pc, #88]	@ (8008664 <I2C_ITSlaveCplt+0x2d4>)
 800860a:	4293      	cmp	r3, r2
 800860c:	d005      	beq.n	800861a <I2C_ITSlaveCplt+0x28a>
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	4a14      	ldr	r2, [pc, #80]	@ (8008668 <I2C_ITSlaveCplt+0x2d8>)
 8008616:	4293      	cmp	r3, r2
 8008618:	d128      	bne.n	800866c <I2C_ITSlaveCplt+0x2dc>
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	685b      	ldr	r3, [r3, #4]
 8008622:	b29b      	uxth	r3, r3
 8008624:	e027      	b.n	8008676 <I2C_ITSlaveCplt+0x2e6>
 8008626:	bf00      	nop
 8008628:	fe00e800 	.word	0xfe00e800
 800862c:	40020010 	.word	0x40020010
 8008630:	40020028 	.word	0x40020028
 8008634:	40020040 	.word	0x40020040
 8008638:	40020058 	.word	0x40020058
 800863c:	40020070 	.word	0x40020070
 8008640:	40020088 	.word	0x40020088
 8008644:	400200a0 	.word	0x400200a0
 8008648:	400200b8 	.word	0x400200b8
 800864c:	40020410 	.word	0x40020410
 8008650:	40020428 	.word	0x40020428
 8008654:	40020440 	.word	0x40020440
 8008658:	40020458 	.word	0x40020458
 800865c:	40020470 	.word	0x40020470
 8008660:	40020488 	.word	0x40020488
 8008664:	400204a0 	.word	0x400204a0
 8008668:	400204b8 	.word	0x400204b8
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	685b      	ldr	r3, [r3, #4]
 8008674:	b29b      	uxth	r3, r3
 8008676:	687a      	ldr	r2, [r7, #4]
 8008678:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800867a:	697b      	ldr	r3, [r7, #20]
 800867c:	f003 0304 	and.w	r3, r3, #4
 8008680:	2b00      	cmp	r3, #0
 8008682:	d020      	beq.n	80086c6 <I2C_ITSlaveCplt+0x336>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8008684:	697b      	ldr	r3, [r7, #20]
 8008686:	f023 0304 	bic.w	r3, r3, #4
 800868a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008696:	b2d2      	uxtb	r2, r2
 8008698:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800869e:	1c5a      	adds	r2, r3, #1
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d00c      	beq.n	80086c6 <I2C_ITSlaveCplt+0x336>
    {
      hi2c->XferSize--;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80086b0:	3b01      	subs	r3, #1
 80086b2:	b29a      	uxth	r2, r3
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80086bc:	b29b      	uxth	r3, r3
 80086be:	3b01      	subs	r3, #1
 80086c0:	b29a      	uxth	r2, r3
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80086ca:	b29b      	uxth	r3, r3
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d005      	beq.n	80086dc <I2C_ITSlaveCplt+0x34c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086d4:	f043 0204 	orr.w	r2, r3, #4
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80086dc:	697b      	ldr	r3, [r7, #20]
 80086de:	f003 0310 	and.w	r3, r3, #16
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d049      	beq.n	800877a <I2C_ITSlaveCplt+0x3ea>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80086e6:	693b      	ldr	r3, [r7, #16]
 80086e8:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d044      	beq.n	800877a <I2C_ITSlaveCplt+0x3ea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80086f4:	b29b      	uxth	r3, r3
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d128      	bne.n	800874c <I2C_ITSlaveCplt+0x3bc>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008700:	b2db      	uxtb	r3, r3
 8008702:	2b28      	cmp	r3, #40	@ 0x28
 8008704:	d108      	bne.n	8008718 <I2C_ITSlaveCplt+0x388>
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800870c:	d104      	bne.n	8008718 <I2C_ITSlaveCplt+0x388>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800870e:	6979      	ldr	r1, [r7, #20]
 8008710:	6878      	ldr	r0, [r7, #4]
 8008712:	f000 f891 	bl	8008838 <I2C_ITListenCplt>
 8008716:	e030      	b.n	800877a <I2C_ITSlaveCplt+0x3ea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800871e:	b2db      	uxtb	r3, r3
 8008720:	2b29      	cmp	r3, #41	@ 0x29
 8008722:	d10e      	bne.n	8008742 <I2C_ITSlaveCplt+0x3b2>
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800872a:	d00a      	beq.n	8008742 <I2C_ITSlaveCplt+0x3b2>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	2210      	movs	r2, #16
 8008732:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f000 f9ea 	bl	8008b0e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f7ff fd03 	bl	8008146 <I2C_ITSlaveSeqCplt>
 8008740:	e01b      	b.n	800877a <I2C_ITSlaveCplt+0x3ea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	2210      	movs	r2, #16
 8008748:	61da      	str	r2, [r3, #28]
 800874a:	e016      	b.n	800877a <I2C_ITSlaveCplt+0x3ea>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	2210      	movs	r2, #16
 8008752:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008758:	f043 0204 	orr.w	r2, r3, #4
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d003      	beq.n	800876e <I2C_ITSlaveCplt+0x3de>
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800876c:	d105      	bne.n	800877a <I2C_ITSlaveCplt+0x3ea>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008772:	4619      	mov	r1, r3
 8008774:	6878      	ldr	r0, [r7, #4]
 8008776:	f000 f8b3 	bl	80088e0 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2200      	movs	r2, #0
 800877e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2200      	movs	r2, #0
 8008786:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800878c:	2b00      	cmp	r3, #0
 800878e:	d010      	beq.n	80087b2 <I2C_ITSlaveCplt+0x422>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008794:	4619      	mov	r1, r3
 8008796:	6878      	ldr	r0, [r7, #4]
 8008798:	f000 f8a2 	bl	80088e0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80087a2:	b2db      	uxtb	r3, r3
 80087a4:	2b28      	cmp	r3, #40	@ 0x28
 80087a6:	d141      	bne.n	800882c <I2C_ITSlaveCplt+0x49c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80087a8:	6979      	ldr	r1, [r7, #20]
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f000 f844 	bl	8008838 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80087b0:	e03c      	b.n	800882c <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087b6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80087ba:	d014      	beq.n	80087e6 <I2C_ITSlaveCplt+0x456>
    I2C_ITSlaveSeqCplt(hi2c);
 80087bc:	6878      	ldr	r0, [r7, #4]
 80087be:	f7ff fcc2 	bl	8008146 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	4a1b      	ldr	r2, [pc, #108]	@ (8008834 <I2C_ITSlaveCplt+0x4a4>)
 80087c6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2220      	movs	r2, #32
 80087cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2200      	movs	r2, #0
 80087d4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2200      	movs	r2, #0
 80087da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f7fe fed9 	bl	8007596 <HAL_I2C_ListenCpltCallback>
}
 80087e4:	e022      	b.n	800882c <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80087ec:	b2db      	uxtb	r3, r3
 80087ee:	2b22      	cmp	r3, #34	@ 0x22
 80087f0:	d10e      	bne.n	8008810 <I2C_ITSlaveCplt+0x480>
    hi2c->State = HAL_I2C_STATE_READY;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2220      	movs	r2, #32
 80087f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2200      	movs	r2, #0
 80087fe:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2200      	movs	r2, #0
 8008804:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f7fe feac 	bl	8007566 <HAL_I2C_SlaveRxCpltCallback>
}
 800880e:	e00d      	b.n	800882c <I2C_ITSlaveCplt+0x49c>
    hi2c->State = HAL_I2C_STATE_READY;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2220      	movs	r2, #32
 8008814:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2200      	movs	r2, #0
 800881c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2200      	movs	r2, #0
 8008822:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f7fe fe93 	bl	8007552 <HAL_I2C_SlaveTxCpltCallback>
}
 800882c:	bf00      	nop
 800882e:	3718      	adds	r7, #24
 8008830:	46bd      	mov	sp, r7
 8008832:	bd80      	pop	{r7, pc}
 8008834:	ffff0000 	.word	0xffff0000

08008838 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b082      	sub	sp, #8
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
 8008840:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	4a25      	ldr	r2, [pc, #148]	@ (80088dc <I2C_ITListenCplt+0xa4>)
 8008846:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2200      	movs	r2, #0
 800884c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2220      	movs	r2, #32
 8008852:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2200      	movs	r2, #0
 800885a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2200      	movs	r2, #0
 8008862:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	f003 0304 	and.w	r3, r3, #4
 800886a:	2b00      	cmp	r3, #0
 800886c:	d022      	beq.n	80088b4 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008878:	b2d2      	uxtb	r2, r2
 800887a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008880:	1c5a      	adds	r2, r3, #1
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800888a:	2b00      	cmp	r3, #0
 800888c:	d012      	beq.n	80088b4 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008892:	3b01      	subs	r3, #1
 8008894:	b29a      	uxth	r2, r3
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800889e:	b29b      	uxth	r3, r3
 80088a0:	3b01      	subs	r3, #1
 80088a2:	b29a      	uxth	r2, r3
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80088ac:	f043 0204 	orr.w	r2, r3, #4
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80088b4:	f248 0103 	movw	r1, #32771	@ 0x8003
 80088b8:	6878      	ldr	r0, [r7, #4]
 80088ba:	f000 fba5 	bl	8009008 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	2210      	movs	r2, #16
 80088c4:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2200      	movs	r2, #0
 80088ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f7fe fe61 	bl	8007596 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80088d4:	bf00      	nop
 80088d6:	3708      	adds	r7, #8
 80088d8:	46bd      	mov	sp, r7
 80088da:	bd80      	pop	{r7, pc}
 80088dc:	ffff0000 	.word	0xffff0000

080088e0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b084      	sub	sp, #16
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
 80088e8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80088f0:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2200      	movs	r2, #0
 80088f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	4a6d      	ldr	r2, [pc, #436]	@ (8008ab4 <I2C_ITError+0x1d4>)
 80088fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2200      	movs	r2, #0
 8008904:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	431a      	orrs	r2, r3
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8008912:	7bfb      	ldrb	r3, [r7, #15]
 8008914:	2b28      	cmp	r3, #40	@ 0x28
 8008916:	d005      	beq.n	8008924 <I2C_ITError+0x44>
 8008918:	7bfb      	ldrb	r3, [r7, #15]
 800891a:	2b29      	cmp	r3, #41	@ 0x29
 800891c:	d002      	beq.n	8008924 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800891e:	7bfb      	ldrb	r3, [r7, #15]
 8008920:	2b2a      	cmp	r3, #42	@ 0x2a
 8008922:	d10b      	bne.n	800893c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008924:	2103      	movs	r1, #3
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f000 fb6e 	bl	8009008 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2228      	movs	r2, #40	@ 0x28
 8008930:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	4a60      	ldr	r2, [pc, #384]	@ (8008ab8 <I2C_ITError+0x1d8>)
 8008938:	635a      	str	r2, [r3, #52]	@ 0x34
 800893a:	e030      	b.n	800899e <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800893c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	f000 fb61 	bl	8009008 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	f000 f8e1 	bl	8008b0e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008952:	b2db      	uxtb	r3, r3
 8008954:	2b60      	cmp	r3, #96	@ 0x60
 8008956:	d01f      	beq.n	8008998 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2220      	movs	r2, #32
 800895c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	699b      	ldr	r3, [r3, #24]
 8008966:	f003 0320 	and.w	r3, r3, #32
 800896a:	2b20      	cmp	r3, #32
 800896c:	d114      	bne.n	8008998 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	699b      	ldr	r3, [r3, #24]
 8008974:	f003 0310 	and.w	r3, r3, #16
 8008978:	2b10      	cmp	r3, #16
 800897a:	d109      	bne.n	8008990 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	2210      	movs	r2, #16
 8008982:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008988:	f043 0204 	orr.w	r2, r3, #4
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	2220      	movs	r2, #32
 8008996:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2200      	movs	r2, #0
 800899c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089a2:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d039      	beq.n	8008a20 <I2C_ITError+0x140>
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	2b11      	cmp	r3, #17
 80089b0:	d002      	beq.n	80089b8 <I2C_ITError+0xd8>
 80089b2:	68bb      	ldr	r3, [r7, #8]
 80089b4:	2b21      	cmp	r3, #33	@ 0x21
 80089b6:	d133      	bne.n	8008a20 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80089c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80089c6:	d107      	bne.n	80089d8 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	681a      	ldr	r2, [r3, #0]
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80089d6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089dc:	4618      	mov	r0, r3
 80089de:	f7fd fdc7 	bl	8006570 <HAL_DMA_GetState>
 80089e2:	4603      	mov	r3, r0
 80089e4:	2b01      	cmp	r3, #1
 80089e6:	d017      	beq.n	8008a18 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089ec:	4a33      	ldr	r2, [pc, #204]	@ (8008abc <I2C_ITError+0x1dc>)
 80089ee:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2200      	movs	r2, #0
 80089f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089fc:	4618      	mov	r0, r3
 80089fe:	f7fc fc47 	bl	8005290 <HAL_DMA_Abort_IT>
 8008a02:	4603      	mov	r3, r0
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d04d      	beq.n	8008aa4 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a0e:	687a      	ldr	r2, [r7, #4]
 8008a10:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8008a12:	4610      	mov	r0, r2
 8008a14:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008a16:	e045      	b.n	8008aa4 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	f000 f851 	bl	8008ac0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008a1e:	e041      	b.n	8008aa4 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d039      	beq.n	8008a9c <I2C_ITError+0x1bc>
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	2b12      	cmp	r3, #18
 8008a2c:	d002      	beq.n	8008a34 <I2C_ITError+0x154>
 8008a2e:	68bb      	ldr	r3, [r7, #8]
 8008a30:	2b22      	cmp	r3, #34	@ 0x22
 8008a32:	d133      	bne.n	8008a9c <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008a3e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008a42:	d107      	bne.n	8008a54 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	681a      	ldr	r2, [r3, #0]
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008a52:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a58:	4618      	mov	r0, r3
 8008a5a:	f7fd fd89 	bl	8006570 <HAL_DMA_GetState>
 8008a5e:	4603      	mov	r3, r0
 8008a60:	2b01      	cmp	r3, #1
 8008a62:	d017      	beq.n	8008a94 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a68:	4a14      	ldr	r2, [pc, #80]	@ (8008abc <I2C_ITError+0x1dc>)
 8008a6a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2200      	movs	r2, #0
 8008a70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a78:	4618      	mov	r0, r3
 8008a7a:	f7fc fc09 	bl	8005290 <HAL_DMA_Abort_IT>
 8008a7e:	4603      	mov	r3, r0
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d011      	beq.n	8008aa8 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a8a:	687a      	ldr	r2, [r7, #4]
 8008a8c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008a8e:	4610      	mov	r0, r2
 8008a90:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008a92:	e009      	b.n	8008aa8 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f000 f813 	bl	8008ac0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008a9a:	e005      	b.n	8008aa8 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8008a9c:	6878      	ldr	r0, [r7, #4]
 8008a9e:	f000 f80f 	bl	8008ac0 <I2C_TreatErrorCallback>
  }
}
 8008aa2:	e002      	b.n	8008aaa <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008aa4:	bf00      	nop
 8008aa6:	e000      	b.n	8008aaa <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008aa8:	bf00      	nop
}
 8008aaa:	bf00      	nop
 8008aac:	3710      	adds	r7, #16
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}
 8008ab2:	bf00      	nop
 8008ab4:	ffff0000 	.word	0xffff0000
 8008ab8:	080075fb 	.word	0x080075fb
 8008abc:	08008e61 	.word	0x08008e61

08008ac0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b082      	sub	sp, #8
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008ace:	b2db      	uxtb	r3, r3
 8008ad0:	2b60      	cmp	r3, #96	@ 0x60
 8008ad2:	d10e      	bne.n	8008af2 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2220      	movs	r2, #32
 8008ad8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2200      	movs	r2, #0
 8008ae0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	f7fe fd7b 	bl	80075e6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008af0:	e009      	b.n	8008b06 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2200      	movs	r2, #0
 8008af6:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2200      	movs	r2, #0
 8008afc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f7fe fd66 	bl	80075d2 <HAL_I2C_ErrorCallback>
}
 8008b06:	bf00      	nop
 8008b08:	3708      	adds	r7, #8
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	bd80      	pop	{r7, pc}

08008b0e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008b0e:	b480      	push	{r7}
 8008b10:	b083      	sub	sp, #12
 8008b12:	af00      	add	r7, sp, #0
 8008b14:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	699b      	ldr	r3, [r3, #24]
 8008b1c:	f003 0302 	and.w	r3, r3, #2
 8008b20:	2b02      	cmp	r3, #2
 8008b22:	d103      	bne.n	8008b2c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	2200      	movs	r2, #0
 8008b2a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	699b      	ldr	r3, [r3, #24]
 8008b32:	f003 0301 	and.w	r3, r3, #1
 8008b36:	2b01      	cmp	r3, #1
 8008b38:	d007      	beq.n	8008b4a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	699a      	ldr	r2, [r3, #24]
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	f042 0201 	orr.w	r2, r2, #1
 8008b48:	619a      	str	r2, [r3, #24]
  }
}
 8008b4a:	bf00      	nop
 8008b4c:	370c      	adds	r7, #12
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b54:	4770      	bx	lr

08008b56 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008b56:	b580      	push	{r7, lr}
 8008b58:	b084      	sub	sp, #16
 8008b5a:	af00      	add	r7, sp, #0
 8008b5c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b62:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	681a      	ldr	r2, [r3, #0]
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008b72:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b78:	b29b      	uxth	r3, r3
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d104      	bne.n	8008b88 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8008b7e:	2120      	movs	r1, #32
 8008b80:	68f8      	ldr	r0, [r7, #12]
 8008b82:	f000 f9bd 	bl	8008f00 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8008b86:	e02d      	b.n	8008be4 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b8c:	68fa      	ldr	r2, [r7, #12]
 8008b8e:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8008b90:	441a      	add	r2, r3
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b9a:	b29b      	uxth	r3, r3
 8008b9c:	2bff      	cmp	r3, #255	@ 0xff
 8008b9e:	d903      	bls.n	8008ba8 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	22ff      	movs	r2, #255	@ 0xff
 8008ba4:	851a      	strh	r2, [r3, #40]	@ 0x28
 8008ba6:	e004      	b.n	8008bb2 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008bac:	b29a      	uxth	r2, r3
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bba:	4619      	mov	r1, r3
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	3328      	adds	r3, #40	@ 0x28
 8008bc2:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8008bc8:	f7fb fdda 	bl	8004780 <HAL_DMA_Start_IT>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d004      	beq.n	8008bdc <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8008bd2:	2110      	movs	r1, #16
 8008bd4:	68f8      	ldr	r0, [r7, #12]
 8008bd6:	f7ff fe83 	bl	80088e0 <I2C_ITError>
}
 8008bda:	e003      	b.n	8008be4 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8008bdc:	2140      	movs	r1, #64	@ 0x40
 8008bde:	68f8      	ldr	r0, [r7, #12]
 8008be0:	f000 f98e 	bl	8008f00 <I2C_Enable_IRQ>
}
 8008be4:	bf00      	nop
 8008be6:	3710      	adds	r7, #16
 8008be8:	46bd      	mov	sp, r7
 8008bea:	bd80      	pop	{r7, pc}

08008bec <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b084      	sub	sp, #16
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bfc:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 8008bfe:	68bb      	ldr	r3, [r7, #8]
 8008c00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d076      	beq.n	8008cf4 <I2C_DMAError+0x108>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	4a71      	ldr	r2, [pc, #452]	@ (8008dd4 <I2C_DMAError+0x1e8>)
 8008c0e:	4293      	cmp	r3, r2
 8008c10:	d059      	beq.n	8008cc6 <I2C_DMAError+0xda>
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	4a6f      	ldr	r2, [pc, #444]	@ (8008dd8 <I2C_DMAError+0x1ec>)
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	d053      	beq.n	8008cc6 <I2C_DMAError+0xda>
 8008c1e:	68bb      	ldr	r3, [r7, #8]
 8008c20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	4a6d      	ldr	r2, [pc, #436]	@ (8008ddc <I2C_DMAError+0x1f0>)
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d04d      	beq.n	8008cc6 <I2C_DMAError+0xda>
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	4a6b      	ldr	r2, [pc, #428]	@ (8008de0 <I2C_DMAError+0x1f4>)
 8008c32:	4293      	cmp	r3, r2
 8008c34:	d047      	beq.n	8008cc6 <I2C_DMAError+0xda>
 8008c36:	68bb      	ldr	r3, [r7, #8]
 8008c38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	4a69      	ldr	r2, [pc, #420]	@ (8008de4 <I2C_DMAError+0x1f8>)
 8008c3e:	4293      	cmp	r3, r2
 8008c40:	d041      	beq.n	8008cc6 <I2C_DMAError+0xda>
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	4a67      	ldr	r2, [pc, #412]	@ (8008de8 <I2C_DMAError+0x1fc>)
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	d03b      	beq.n	8008cc6 <I2C_DMAError+0xda>
 8008c4e:	68bb      	ldr	r3, [r7, #8]
 8008c50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	4a65      	ldr	r2, [pc, #404]	@ (8008dec <I2C_DMAError+0x200>)
 8008c56:	4293      	cmp	r3, r2
 8008c58:	d035      	beq.n	8008cc6 <I2C_DMAError+0xda>
 8008c5a:	68bb      	ldr	r3, [r7, #8]
 8008c5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	4a63      	ldr	r2, [pc, #396]	@ (8008df0 <I2C_DMAError+0x204>)
 8008c62:	4293      	cmp	r3, r2
 8008c64:	d02f      	beq.n	8008cc6 <I2C_DMAError+0xda>
 8008c66:	68bb      	ldr	r3, [r7, #8]
 8008c68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	4a61      	ldr	r2, [pc, #388]	@ (8008df4 <I2C_DMAError+0x208>)
 8008c6e:	4293      	cmp	r3, r2
 8008c70:	d029      	beq.n	8008cc6 <I2C_DMAError+0xda>
 8008c72:	68bb      	ldr	r3, [r7, #8]
 8008c74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	4a5f      	ldr	r2, [pc, #380]	@ (8008df8 <I2C_DMAError+0x20c>)
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d023      	beq.n	8008cc6 <I2C_DMAError+0xda>
 8008c7e:	68bb      	ldr	r3, [r7, #8]
 8008c80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	4a5d      	ldr	r2, [pc, #372]	@ (8008dfc <I2C_DMAError+0x210>)
 8008c86:	4293      	cmp	r3, r2
 8008c88:	d01d      	beq.n	8008cc6 <I2C_DMAError+0xda>
 8008c8a:	68bb      	ldr	r3, [r7, #8]
 8008c8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	4a5b      	ldr	r2, [pc, #364]	@ (8008e00 <I2C_DMAError+0x214>)
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d017      	beq.n	8008cc6 <I2C_DMAError+0xda>
 8008c96:	68bb      	ldr	r3, [r7, #8]
 8008c98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	4a59      	ldr	r2, [pc, #356]	@ (8008e04 <I2C_DMAError+0x218>)
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	d011      	beq.n	8008cc6 <I2C_DMAError+0xda>
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	4a57      	ldr	r2, [pc, #348]	@ (8008e08 <I2C_DMAError+0x21c>)
 8008caa:	4293      	cmp	r3, r2
 8008cac:	d00b      	beq.n	8008cc6 <I2C_DMAError+0xda>
 8008cae:	68bb      	ldr	r3, [r7, #8]
 8008cb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	4a55      	ldr	r2, [pc, #340]	@ (8008e0c <I2C_DMAError+0x220>)
 8008cb6:	4293      	cmp	r3, r2
 8008cb8:	d005      	beq.n	8008cc6 <I2C_DMAError+0xda>
 8008cba:	68bb      	ldr	r3, [r7, #8]
 8008cbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	4a53      	ldr	r2, [pc, #332]	@ (8008e10 <I2C_DMAError+0x224>)
 8008cc2:	4293      	cmp	r3, r2
 8008cc4:	d109      	bne.n	8008cda <I2C_DMAError+0xee>
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	685b      	ldr	r3, [r3, #4]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	bf0c      	ite	eq
 8008cd2:	2301      	moveq	r3, #1
 8008cd4:	2300      	movne	r3, #0
 8008cd6:	b2db      	uxtb	r3, r3
 8008cd8:	e008      	b.n	8008cec <I2C_DMAError+0x100>
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	685b      	ldr	r3, [r3, #4]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	bf0c      	ite	eq
 8008ce6:	2301      	moveq	r3, #1
 8008ce8:	2300      	movne	r3, #0
 8008cea:	b2db      	uxtb	r3, r3
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d001      	beq.n	8008cf4 <I2C_DMAError+0x108>
    {
      treatdmaerror = 1U;
 8008cf0:	2301      	movs	r3, #1
 8008cf2:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	f000 8098 	beq.w	8008e2e <I2C_DMAError+0x242>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8008cfe:	68bb      	ldr	r3, [r7, #8]
 8008d00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	4a33      	ldr	r2, [pc, #204]	@ (8008dd4 <I2C_DMAError+0x1e8>)
 8008d06:	4293      	cmp	r3, r2
 8008d08:	d059      	beq.n	8008dbe <I2C_DMAError+0x1d2>
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	4a31      	ldr	r2, [pc, #196]	@ (8008dd8 <I2C_DMAError+0x1ec>)
 8008d12:	4293      	cmp	r3, r2
 8008d14:	d053      	beq.n	8008dbe <I2C_DMAError+0x1d2>
 8008d16:	68bb      	ldr	r3, [r7, #8]
 8008d18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	4a2f      	ldr	r2, [pc, #188]	@ (8008ddc <I2C_DMAError+0x1f0>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d04d      	beq.n	8008dbe <I2C_DMAError+0x1d2>
 8008d22:	68bb      	ldr	r3, [r7, #8]
 8008d24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	4a2d      	ldr	r2, [pc, #180]	@ (8008de0 <I2C_DMAError+0x1f4>)
 8008d2a:	4293      	cmp	r3, r2
 8008d2c:	d047      	beq.n	8008dbe <I2C_DMAError+0x1d2>
 8008d2e:	68bb      	ldr	r3, [r7, #8]
 8008d30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	4a2b      	ldr	r2, [pc, #172]	@ (8008de4 <I2C_DMAError+0x1f8>)
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d041      	beq.n	8008dbe <I2C_DMAError+0x1d2>
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	4a29      	ldr	r2, [pc, #164]	@ (8008de8 <I2C_DMAError+0x1fc>)
 8008d42:	4293      	cmp	r3, r2
 8008d44:	d03b      	beq.n	8008dbe <I2C_DMAError+0x1d2>
 8008d46:	68bb      	ldr	r3, [r7, #8]
 8008d48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	4a27      	ldr	r2, [pc, #156]	@ (8008dec <I2C_DMAError+0x200>)
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d035      	beq.n	8008dbe <I2C_DMAError+0x1d2>
 8008d52:	68bb      	ldr	r3, [r7, #8]
 8008d54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	4a25      	ldr	r2, [pc, #148]	@ (8008df0 <I2C_DMAError+0x204>)
 8008d5a:	4293      	cmp	r3, r2
 8008d5c:	d02f      	beq.n	8008dbe <I2C_DMAError+0x1d2>
 8008d5e:	68bb      	ldr	r3, [r7, #8]
 8008d60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	4a23      	ldr	r2, [pc, #140]	@ (8008df4 <I2C_DMAError+0x208>)
 8008d66:	4293      	cmp	r3, r2
 8008d68:	d029      	beq.n	8008dbe <I2C_DMAError+0x1d2>
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	4a21      	ldr	r2, [pc, #132]	@ (8008df8 <I2C_DMAError+0x20c>)
 8008d72:	4293      	cmp	r3, r2
 8008d74:	d023      	beq.n	8008dbe <I2C_DMAError+0x1d2>
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	4a1f      	ldr	r2, [pc, #124]	@ (8008dfc <I2C_DMAError+0x210>)
 8008d7e:	4293      	cmp	r3, r2
 8008d80:	d01d      	beq.n	8008dbe <I2C_DMAError+0x1d2>
 8008d82:	68bb      	ldr	r3, [r7, #8]
 8008d84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	4a1d      	ldr	r2, [pc, #116]	@ (8008e00 <I2C_DMAError+0x214>)
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	d017      	beq.n	8008dbe <I2C_DMAError+0x1d2>
 8008d8e:	68bb      	ldr	r3, [r7, #8]
 8008d90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	4a1b      	ldr	r2, [pc, #108]	@ (8008e04 <I2C_DMAError+0x218>)
 8008d96:	4293      	cmp	r3, r2
 8008d98:	d011      	beq.n	8008dbe <I2C_DMAError+0x1d2>
 8008d9a:	68bb      	ldr	r3, [r7, #8]
 8008d9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	4a19      	ldr	r2, [pc, #100]	@ (8008e08 <I2C_DMAError+0x21c>)
 8008da2:	4293      	cmp	r3, r2
 8008da4:	d00b      	beq.n	8008dbe <I2C_DMAError+0x1d2>
 8008da6:	68bb      	ldr	r3, [r7, #8]
 8008da8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	4a17      	ldr	r2, [pc, #92]	@ (8008e0c <I2C_DMAError+0x220>)
 8008dae:	4293      	cmp	r3, r2
 8008db0:	d005      	beq.n	8008dbe <I2C_DMAError+0x1d2>
 8008db2:	68bb      	ldr	r3, [r7, #8]
 8008db4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	4a15      	ldr	r2, [pc, #84]	@ (8008e10 <I2C_DMAError+0x224>)
 8008dba:	4293      	cmp	r3, r2
 8008dbc:	d12a      	bne.n	8008e14 <I2C_DMAError+0x228>
 8008dbe:	68bb      	ldr	r3, [r7, #8]
 8008dc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	685b      	ldr	r3, [r3, #4]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	bf0c      	ite	eq
 8008dca:	2301      	moveq	r3, #1
 8008dcc:	2300      	movne	r3, #0
 8008dce:	b2db      	uxtb	r3, r3
 8008dd0:	e029      	b.n	8008e26 <I2C_DMAError+0x23a>
 8008dd2:	bf00      	nop
 8008dd4:	40020010 	.word	0x40020010
 8008dd8:	40020028 	.word	0x40020028
 8008ddc:	40020040 	.word	0x40020040
 8008de0:	40020058 	.word	0x40020058
 8008de4:	40020070 	.word	0x40020070
 8008de8:	40020088 	.word	0x40020088
 8008dec:	400200a0 	.word	0x400200a0
 8008df0:	400200b8 	.word	0x400200b8
 8008df4:	40020410 	.word	0x40020410
 8008df8:	40020428 	.word	0x40020428
 8008dfc:	40020440 	.word	0x40020440
 8008e00:	40020458 	.word	0x40020458
 8008e04:	40020470 	.word	0x40020470
 8008e08:	40020488 	.word	0x40020488
 8008e0c:	400204a0 	.word	0x400204a0
 8008e10:	400204b8 	.word	0x400204b8
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	685b      	ldr	r3, [r3, #4]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	bf0c      	ite	eq
 8008e20:	2301      	moveq	r3, #1
 8008e22:	2300      	movne	r3, #0
 8008e24:	b2db      	uxtb	r3, r3
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d001      	beq.n	8008e2e <I2C_DMAError+0x242>
    {
      treatdmaerror = 1U;
 8008e2a:	2301      	movs	r3, #1
 8008e2c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f7fd fbac 	bl	800658c <HAL_DMA_GetError>
 8008e34:	4603      	mov	r3, r0
 8008e36:	2b02      	cmp	r3, #2
 8008e38:	d00e      	beq.n	8008e58 <I2C_DMAError+0x26c>
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d00b      	beq.n	8008e58 <I2C_DMAError+0x26c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	685a      	ldr	r2, [r3, #4]
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008e4e:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8008e50:	2110      	movs	r1, #16
 8008e52:	68b8      	ldr	r0, [r7, #8]
 8008e54:	f7ff fd44 	bl	80088e0 <I2C_ITError>
  }
}
 8008e58:	bf00      	nop
 8008e5a:	3710      	adds	r7, #16
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bd80      	pop	{r7, pc}

08008e60 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b084      	sub	sp, #16
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e6c:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d003      	beq.n	8008e7e <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d003      	beq.n	8008e8e <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8008e8e:	68f8      	ldr	r0, [r7, #12]
 8008e90:	f7ff fe16 	bl	8008ac0 <I2C_TreatErrorCallback>
}
 8008e94:	bf00      	nop
 8008e96:	3710      	adds	r7, #16
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	bd80      	pop	{r7, pc}

08008e9c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008e9c:	b480      	push	{r7}
 8008e9e:	b087      	sub	sp, #28
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	60f8      	str	r0, [r7, #12]
 8008ea4:	607b      	str	r3, [r7, #4]
 8008ea6:	460b      	mov	r3, r1
 8008ea8:	817b      	strh	r3, [r7, #10]
 8008eaa:	4613      	mov	r3, r2
 8008eac:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008eae:	897b      	ldrh	r3, [r7, #10]
 8008eb0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008eb4:	7a7b      	ldrb	r3, [r7, #9]
 8008eb6:	041b      	lsls	r3, r3, #16
 8008eb8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008ebc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008ec2:	6a3b      	ldr	r3, [r7, #32]
 8008ec4:	4313      	orrs	r3, r2
 8008ec6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008eca:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	685a      	ldr	r2, [r3, #4]
 8008ed2:	6a3b      	ldr	r3, [r7, #32]
 8008ed4:	0d5b      	lsrs	r3, r3, #21
 8008ed6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8008eda:	4b08      	ldr	r3, [pc, #32]	@ (8008efc <I2C_TransferConfig+0x60>)
 8008edc:	430b      	orrs	r3, r1
 8008ede:	43db      	mvns	r3, r3
 8008ee0:	ea02 0103 	and.w	r1, r2, r3
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	697a      	ldr	r2, [r7, #20]
 8008eea:	430a      	orrs	r2, r1
 8008eec:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008eee:	bf00      	nop
 8008ef0:	371c      	adds	r7, #28
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef8:	4770      	bx	lr
 8008efa:	bf00      	nop
 8008efc:	03ff63ff 	.word	0x03ff63ff

08008f00 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8008f00:	b480      	push	{r7}
 8008f02:	b085      	sub	sp, #20
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
 8008f08:	460b      	mov	r3, r1
 8008f0a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f14:	4a39      	ldr	r2, [pc, #228]	@ (8008ffc <I2C_Enable_IRQ+0xfc>)
 8008f16:	4293      	cmp	r3, r2
 8008f18:	d032      	beq.n	8008f80 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8008f1e:	4a38      	ldr	r2, [pc, #224]	@ (8009000 <I2C_Enable_IRQ+0x100>)
 8008f20:	4293      	cmp	r3, r2
 8008f22:	d02d      	beq.n	8008f80 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8008f28:	4a36      	ldr	r2, [pc, #216]	@ (8009004 <I2C_Enable_IRQ+0x104>)
 8008f2a:	4293      	cmp	r3, r2
 8008f2c:	d028      	beq.n	8008f80 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8008f2e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	da03      	bge.n	8008f3e <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8008f3c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8008f3e:	887b      	ldrh	r3, [r7, #2]
 8008f40:	f003 0301 	and.w	r3, r3, #1
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d003      	beq.n	8008f50 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8008f4e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8008f50:	887b      	ldrh	r3, [r7, #2]
 8008f52:	f003 0302 	and.w	r3, r3, #2
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d003      	beq.n	8008f62 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8008f60:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8008f62:	887b      	ldrh	r3, [r7, #2]
 8008f64:	2b10      	cmp	r3, #16
 8008f66:	d103      	bne.n	8008f70 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8008f6e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008f70:	887b      	ldrh	r3, [r7, #2]
 8008f72:	2b20      	cmp	r3, #32
 8008f74:	d133      	bne.n	8008fde <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	f043 0320 	orr.w	r3, r3, #32
 8008f7c:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008f7e:	e02e      	b.n	8008fde <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8008f80:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	da03      	bge.n	8008f90 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8008f8e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8008f90:	887b      	ldrh	r3, [r7, #2]
 8008f92:	f003 0301 	and.w	r3, r3, #1
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d003      	beq.n	8008fa2 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8008fa0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8008fa2:	887b      	ldrh	r3, [r7, #2]
 8008fa4:	f003 0302 	and.w	r3, r3, #2
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d003      	beq.n	8008fb4 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8008fb2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8008fb4:	887b      	ldrh	r3, [r7, #2]
 8008fb6:	2b10      	cmp	r3, #16
 8008fb8:	d103      	bne.n	8008fc2 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8008fc0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008fc2:	887b      	ldrh	r3, [r7, #2]
 8008fc4:	2b20      	cmp	r3, #32
 8008fc6:	d103      	bne.n	8008fd0 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8008fce:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8008fd0:	887b      	ldrh	r3, [r7, #2]
 8008fd2:	2b40      	cmp	r3, #64	@ 0x40
 8008fd4:	d103      	bne.n	8008fde <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008fdc:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	6819      	ldr	r1, [r3, #0]
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	68fa      	ldr	r2, [r7, #12]
 8008fea:	430a      	orrs	r2, r1
 8008fec:	601a      	str	r2, [r3, #0]
}
 8008fee:	bf00      	nop
 8008ff0:	3714      	adds	r7, #20
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff8:	4770      	bx	lr
 8008ffa:	bf00      	nop
 8008ffc:	080077ed 	.word	0x080077ed
 8009000:	08007c11 	.word	0x08007c11
 8009004:	080079c5 	.word	0x080079c5

08009008 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8009008:	b480      	push	{r7}
 800900a:	b085      	sub	sp, #20
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
 8009010:	460b      	mov	r3, r1
 8009012:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8009014:	2300      	movs	r3, #0
 8009016:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8009018:	887b      	ldrh	r3, [r7, #2]
 800901a:	f003 0301 	and.w	r3, r3, #1
 800901e:	2b00      	cmp	r3, #0
 8009020:	d00f      	beq.n	8009042 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8009028:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009030:	b2db      	uxtb	r3, r3
 8009032:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8009036:	2b28      	cmp	r3, #40	@ 0x28
 8009038:	d003      	beq.n	8009042 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8009040:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8009042:	887b      	ldrh	r3, [r7, #2]
 8009044:	f003 0302 	and.w	r3, r3, #2
 8009048:	2b00      	cmp	r3, #0
 800904a:	d00f      	beq.n	800906c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8009052:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800905a:	b2db      	uxtb	r3, r3
 800905c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8009060:	2b28      	cmp	r3, #40	@ 0x28
 8009062:	d003      	beq.n	800906c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800906a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800906c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009070:	2b00      	cmp	r3, #0
 8009072:	da03      	bge.n	800907c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800907a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800907c:	887b      	ldrh	r3, [r7, #2]
 800907e:	2b10      	cmp	r3, #16
 8009080:	d103      	bne.n	800908a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8009088:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800908a:	887b      	ldrh	r3, [r7, #2]
 800908c:	2b20      	cmp	r3, #32
 800908e:	d103      	bne.n	8009098 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	f043 0320 	orr.w	r3, r3, #32
 8009096:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8009098:	887b      	ldrh	r3, [r7, #2]
 800909a:	2b40      	cmp	r3, #64	@ 0x40
 800909c:	d103      	bne.n	80090a6 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80090a4:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	6819      	ldr	r1, [r3, #0]
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	43da      	mvns	r2, r3
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	400a      	ands	r2, r1
 80090b6:	601a      	str	r2, [r3, #0]
}
 80090b8:	bf00      	nop
 80090ba:	3714      	adds	r7, #20
 80090bc:	46bd      	mov	sp, r7
 80090be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c2:	4770      	bx	lr

080090c4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80090c4:	b480      	push	{r7}
 80090c6:	b083      	sub	sp, #12
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
 80090cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80090d4:	b2db      	uxtb	r3, r3
 80090d6:	2b20      	cmp	r3, #32
 80090d8:	d138      	bne.n	800914c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80090e0:	2b01      	cmp	r3, #1
 80090e2:	d101      	bne.n	80090e8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80090e4:	2302      	movs	r3, #2
 80090e6:	e032      	b.n	800914e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2201      	movs	r2, #1
 80090ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2224      	movs	r2, #36	@ 0x24
 80090f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	681a      	ldr	r2, [r3, #0]
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f022 0201 	bic.w	r2, r2, #1
 8009106:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	681a      	ldr	r2, [r3, #0]
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009116:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	6819      	ldr	r1, [r3, #0]
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	683a      	ldr	r2, [r7, #0]
 8009124:	430a      	orrs	r2, r1
 8009126:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	681a      	ldr	r2, [r3, #0]
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f042 0201 	orr.w	r2, r2, #1
 8009136:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2220      	movs	r2, #32
 800913c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2200      	movs	r2, #0
 8009144:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009148:	2300      	movs	r3, #0
 800914a:	e000      	b.n	800914e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800914c:	2302      	movs	r3, #2
  }
}
 800914e:	4618      	mov	r0, r3
 8009150:	370c      	adds	r7, #12
 8009152:	46bd      	mov	sp, r7
 8009154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009158:	4770      	bx	lr

0800915a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800915a:	b480      	push	{r7}
 800915c:	b085      	sub	sp, #20
 800915e:	af00      	add	r7, sp, #0
 8009160:	6078      	str	r0, [r7, #4]
 8009162:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800916a:	b2db      	uxtb	r3, r3
 800916c:	2b20      	cmp	r3, #32
 800916e:	d139      	bne.n	80091e4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009176:	2b01      	cmp	r3, #1
 8009178:	d101      	bne.n	800917e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800917a:	2302      	movs	r3, #2
 800917c:	e033      	b.n	80091e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	2201      	movs	r2, #1
 8009182:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2224      	movs	r2, #36	@ 0x24
 800918a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	681a      	ldr	r2, [r3, #0]
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	f022 0201 	bic.w	r2, r2, #1
 800919c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80091ac:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	021b      	lsls	r3, r3, #8
 80091b2:	68fa      	ldr	r2, [r7, #12]
 80091b4:	4313      	orrs	r3, r2
 80091b6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	68fa      	ldr	r2, [r7, #12]
 80091be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	681a      	ldr	r2, [r3, #0]
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	f042 0201 	orr.w	r2, r2, #1
 80091ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2220      	movs	r2, #32
 80091d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2200      	movs	r2, #0
 80091dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80091e0:	2300      	movs	r3, #0
 80091e2:	e000      	b.n	80091e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80091e4:	2302      	movs	r3, #2
  }
}
 80091e6:	4618      	mov	r0, r3
 80091e8:	3714      	adds	r7, #20
 80091ea:	46bd      	mov	sp, r7
 80091ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f0:	4770      	bx	lr
	...

080091f4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b084      	sub	sp, #16
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80091fc:	4b19      	ldr	r3, [pc, #100]	@ (8009264 <HAL_PWREx_ConfigSupply+0x70>)
 80091fe:	68db      	ldr	r3, [r3, #12]
 8009200:	f003 0304 	and.w	r3, r3, #4
 8009204:	2b04      	cmp	r3, #4
 8009206:	d00a      	beq.n	800921e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009208:	4b16      	ldr	r3, [pc, #88]	@ (8009264 <HAL_PWREx_ConfigSupply+0x70>)
 800920a:	68db      	ldr	r3, [r3, #12]
 800920c:	f003 0307 	and.w	r3, r3, #7
 8009210:	687a      	ldr	r2, [r7, #4]
 8009212:	429a      	cmp	r2, r3
 8009214:	d001      	beq.n	800921a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009216:	2301      	movs	r3, #1
 8009218:	e01f      	b.n	800925a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800921a:	2300      	movs	r3, #0
 800921c:	e01d      	b.n	800925a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800921e:	4b11      	ldr	r3, [pc, #68]	@ (8009264 <HAL_PWREx_ConfigSupply+0x70>)
 8009220:	68db      	ldr	r3, [r3, #12]
 8009222:	f023 0207 	bic.w	r2, r3, #7
 8009226:	490f      	ldr	r1, [pc, #60]	@ (8009264 <HAL_PWREx_ConfigSupply+0x70>)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	4313      	orrs	r3, r2
 800922c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800922e:	f7f9 fa9b 	bl	8002768 <HAL_GetTick>
 8009232:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009234:	e009      	b.n	800924a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009236:	f7f9 fa97 	bl	8002768 <HAL_GetTick>
 800923a:	4602      	mov	r2, r0
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	1ad3      	subs	r3, r2, r3
 8009240:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009244:	d901      	bls.n	800924a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009246:	2301      	movs	r3, #1
 8009248:	e007      	b.n	800925a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800924a:	4b06      	ldr	r3, [pc, #24]	@ (8009264 <HAL_PWREx_ConfigSupply+0x70>)
 800924c:	685b      	ldr	r3, [r3, #4]
 800924e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009252:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009256:	d1ee      	bne.n	8009236 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009258:	2300      	movs	r3, #0
}
 800925a:	4618      	mov	r0, r3
 800925c:	3710      	adds	r7, #16
 800925e:	46bd      	mov	sp, r7
 8009260:	bd80      	pop	{r7, pc}
 8009262:	bf00      	nop
 8009264:	58024800 	.word	0x58024800

08009268 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b08c      	sub	sp, #48	@ 0x30
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d102      	bne.n	800927c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8009276:	2301      	movs	r3, #1
 8009278:	f000 bc48 	b.w	8009b0c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f003 0301 	and.w	r3, r3, #1
 8009284:	2b00      	cmp	r3, #0
 8009286:	f000 8088 	beq.w	800939a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800928a:	4b99      	ldr	r3, [pc, #612]	@ (80094f0 <HAL_RCC_OscConfig+0x288>)
 800928c:	691b      	ldr	r3, [r3, #16]
 800928e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009292:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009294:	4b96      	ldr	r3, [pc, #600]	@ (80094f0 <HAL_RCC_OscConfig+0x288>)
 8009296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009298:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800929a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800929c:	2b10      	cmp	r3, #16
 800929e:	d007      	beq.n	80092b0 <HAL_RCC_OscConfig+0x48>
 80092a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092a2:	2b18      	cmp	r3, #24
 80092a4:	d111      	bne.n	80092ca <HAL_RCC_OscConfig+0x62>
 80092a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092a8:	f003 0303 	and.w	r3, r3, #3
 80092ac:	2b02      	cmp	r3, #2
 80092ae:	d10c      	bne.n	80092ca <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80092b0:	4b8f      	ldr	r3, [pc, #572]	@ (80094f0 <HAL_RCC_OscConfig+0x288>)
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d06d      	beq.n	8009398 <HAL_RCC_OscConfig+0x130>
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	685b      	ldr	r3, [r3, #4]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d169      	bne.n	8009398 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80092c4:	2301      	movs	r3, #1
 80092c6:	f000 bc21 	b.w	8009b0c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	685b      	ldr	r3, [r3, #4]
 80092ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80092d2:	d106      	bne.n	80092e2 <HAL_RCC_OscConfig+0x7a>
 80092d4:	4b86      	ldr	r3, [pc, #536]	@ (80094f0 <HAL_RCC_OscConfig+0x288>)
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	4a85      	ldr	r2, [pc, #532]	@ (80094f0 <HAL_RCC_OscConfig+0x288>)
 80092da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80092de:	6013      	str	r3, [r2, #0]
 80092e0:	e02e      	b.n	8009340 <HAL_RCC_OscConfig+0xd8>
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	685b      	ldr	r3, [r3, #4]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d10c      	bne.n	8009304 <HAL_RCC_OscConfig+0x9c>
 80092ea:	4b81      	ldr	r3, [pc, #516]	@ (80094f0 <HAL_RCC_OscConfig+0x288>)
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	4a80      	ldr	r2, [pc, #512]	@ (80094f0 <HAL_RCC_OscConfig+0x288>)
 80092f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80092f4:	6013      	str	r3, [r2, #0]
 80092f6:	4b7e      	ldr	r3, [pc, #504]	@ (80094f0 <HAL_RCC_OscConfig+0x288>)
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	4a7d      	ldr	r2, [pc, #500]	@ (80094f0 <HAL_RCC_OscConfig+0x288>)
 80092fc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009300:	6013      	str	r3, [r2, #0]
 8009302:	e01d      	b.n	8009340 <HAL_RCC_OscConfig+0xd8>
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	685b      	ldr	r3, [r3, #4]
 8009308:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800930c:	d10c      	bne.n	8009328 <HAL_RCC_OscConfig+0xc0>
 800930e:	4b78      	ldr	r3, [pc, #480]	@ (80094f0 <HAL_RCC_OscConfig+0x288>)
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	4a77      	ldr	r2, [pc, #476]	@ (80094f0 <HAL_RCC_OscConfig+0x288>)
 8009314:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009318:	6013      	str	r3, [r2, #0]
 800931a:	4b75      	ldr	r3, [pc, #468]	@ (80094f0 <HAL_RCC_OscConfig+0x288>)
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	4a74      	ldr	r2, [pc, #464]	@ (80094f0 <HAL_RCC_OscConfig+0x288>)
 8009320:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009324:	6013      	str	r3, [r2, #0]
 8009326:	e00b      	b.n	8009340 <HAL_RCC_OscConfig+0xd8>
 8009328:	4b71      	ldr	r3, [pc, #452]	@ (80094f0 <HAL_RCC_OscConfig+0x288>)
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	4a70      	ldr	r2, [pc, #448]	@ (80094f0 <HAL_RCC_OscConfig+0x288>)
 800932e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009332:	6013      	str	r3, [r2, #0]
 8009334:	4b6e      	ldr	r3, [pc, #440]	@ (80094f0 <HAL_RCC_OscConfig+0x288>)
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	4a6d      	ldr	r2, [pc, #436]	@ (80094f0 <HAL_RCC_OscConfig+0x288>)
 800933a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800933e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	685b      	ldr	r3, [r3, #4]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d013      	beq.n	8009370 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009348:	f7f9 fa0e 	bl	8002768 <HAL_GetTick>
 800934c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800934e:	e008      	b.n	8009362 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009350:	f7f9 fa0a 	bl	8002768 <HAL_GetTick>
 8009354:	4602      	mov	r2, r0
 8009356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009358:	1ad3      	subs	r3, r2, r3
 800935a:	2b64      	cmp	r3, #100	@ 0x64
 800935c:	d901      	bls.n	8009362 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800935e:	2303      	movs	r3, #3
 8009360:	e3d4      	b.n	8009b0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009362:	4b63      	ldr	r3, [pc, #396]	@ (80094f0 <HAL_RCC_OscConfig+0x288>)
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800936a:	2b00      	cmp	r3, #0
 800936c:	d0f0      	beq.n	8009350 <HAL_RCC_OscConfig+0xe8>
 800936e:	e014      	b.n	800939a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009370:	f7f9 f9fa 	bl	8002768 <HAL_GetTick>
 8009374:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009376:	e008      	b.n	800938a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009378:	f7f9 f9f6 	bl	8002768 <HAL_GetTick>
 800937c:	4602      	mov	r2, r0
 800937e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009380:	1ad3      	subs	r3, r2, r3
 8009382:	2b64      	cmp	r3, #100	@ 0x64
 8009384:	d901      	bls.n	800938a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8009386:	2303      	movs	r3, #3
 8009388:	e3c0      	b.n	8009b0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800938a:	4b59      	ldr	r3, [pc, #356]	@ (80094f0 <HAL_RCC_OscConfig+0x288>)
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009392:	2b00      	cmp	r3, #0
 8009394:	d1f0      	bne.n	8009378 <HAL_RCC_OscConfig+0x110>
 8009396:	e000      	b.n	800939a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009398:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	f003 0302 	and.w	r3, r3, #2
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	f000 80ca 	beq.w	800953c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80093a8:	4b51      	ldr	r3, [pc, #324]	@ (80094f0 <HAL_RCC_OscConfig+0x288>)
 80093aa:	691b      	ldr	r3, [r3, #16]
 80093ac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80093b0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80093b2:	4b4f      	ldr	r3, [pc, #316]	@ (80094f0 <HAL_RCC_OscConfig+0x288>)
 80093b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093b6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80093b8:	6a3b      	ldr	r3, [r7, #32]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d007      	beq.n	80093ce <HAL_RCC_OscConfig+0x166>
 80093be:	6a3b      	ldr	r3, [r7, #32]
 80093c0:	2b18      	cmp	r3, #24
 80093c2:	d156      	bne.n	8009472 <HAL_RCC_OscConfig+0x20a>
 80093c4:	69fb      	ldr	r3, [r7, #28]
 80093c6:	f003 0303 	and.w	r3, r3, #3
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d151      	bne.n	8009472 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80093ce:	4b48      	ldr	r3, [pc, #288]	@ (80094f0 <HAL_RCC_OscConfig+0x288>)
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	f003 0304 	and.w	r3, r3, #4
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d005      	beq.n	80093e6 <HAL_RCC_OscConfig+0x17e>
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	68db      	ldr	r3, [r3, #12]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d101      	bne.n	80093e6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80093e2:	2301      	movs	r3, #1
 80093e4:	e392      	b.n	8009b0c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80093e6:	4b42      	ldr	r3, [pc, #264]	@ (80094f0 <HAL_RCC_OscConfig+0x288>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	f023 0219 	bic.w	r2, r3, #25
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	68db      	ldr	r3, [r3, #12]
 80093f2:	493f      	ldr	r1, [pc, #252]	@ (80094f0 <HAL_RCC_OscConfig+0x288>)
 80093f4:	4313      	orrs	r3, r2
 80093f6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093f8:	f7f9 f9b6 	bl	8002768 <HAL_GetTick>
 80093fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80093fe:	e008      	b.n	8009412 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009400:	f7f9 f9b2 	bl	8002768 <HAL_GetTick>
 8009404:	4602      	mov	r2, r0
 8009406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009408:	1ad3      	subs	r3, r2, r3
 800940a:	2b02      	cmp	r3, #2
 800940c:	d901      	bls.n	8009412 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800940e:	2303      	movs	r3, #3
 8009410:	e37c      	b.n	8009b0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009412:	4b37      	ldr	r3, [pc, #220]	@ (80094f0 <HAL_RCC_OscConfig+0x288>)
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f003 0304 	and.w	r3, r3, #4
 800941a:	2b00      	cmp	r3, #0
 800941c:	d0f0      	beq.n	8009400 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800941e:	f7f9 f9d3 	bl	80027c8 <HAL_GetREVID>
 8009422:	4603      	mov	r3, r0
 8009424:	f241 0203 	movw	r2, #4099	@ 0x1003
 8009428:	4293      	cmp	r3, r2
 800942a:	d817      	bhi.n	800945c <HAL_RCC_OscConfig+0x1f4>
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	691b      	ldr	r3, [r3, #16]
 8009430:	2b40      	cmp	r3, #64	@ 0x40
 8009432:	d108      	bne.n	8009446 <HAL_RCC_OscConfig+0x1de>
 8009434:	4b2e      	ldr	r3, [pc, #184]	@ (80094f0 <HAL_RCC_OscConfig+0x288>)
 8009436:	685b      	ldr	r3, [r3, #4]
 8009438:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800943c:	4a2c      	ldr	r2, [pc, #176]	@ (80094f0 <HAL_RCC_OscConfig+0x288>)
 800943e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009442:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009444:	e07a      	b.n	800953c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009446:	4b2a      	ldr	r3, [pc, #168]	@ (80094f0 <HAL_RCC_OscConfig+0x288>)
 8009448:	685b      	ldr	r3, [r3, #4]
 800944a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	691b      	ldr	r3, [r3, #16]
 8009452:	031b      	lsls	r3, r3, #12
 8009454:	4926      	ldr	r1, [pc, #152]	@ (80094f0 <HAL_RCC_OscConfig+0x288>)
 8009456:	4313      	orrs	r3, r2
 8009458:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800945a:	e06f      	b.n	800953c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800945c:	4b24      	ldr	r3, [pc, #144]	@ (80094f0 <HAL_RCC_OscConfig+0x288>)
 800945e:	685b      	ldr	r3, [r3, #4]
 8009460:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	691b      	ldr	r3, [r3, #16]
 8009468:	061b      	lsls	r3, r3, #24
 800946a:	4921      	ldr	r1, [pc, #132]	@ (80094f0 <HAL_RCC_OscConfig+0x288>)
 800946c:	4313      	orrs	r3, r2
 800946e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009470:	e064      	b.n	800953c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	68db      	ldr	r3, [r3, #12]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d047      	beq.n	800950a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800947a:	4b1d      	ldr	r3, [pc, #116]	@ (80094f0 <HAL_RCC_OscConfig+0x288>)
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	f023 0219 	bic.w	r2, r3, #25
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	68db      	ldr	r3, [r3, #12]
 8009486:	491a      	ldr	r1, [pc, #104]	@ (80094f0 <HAL_RCC_OscConfig+0x288>)
 8009488:	4313      	orrs	r3, r2
 800948a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800948c:	f7f9 f96c 	bl	8002768 <HAL_GetTick>
 8009490:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009492:	e008      	b.n	80094a6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009494:	f7f9 f968 	bl	8002768 <HAL_GetTick>
 8009498:	4602      	mov	r2, r0
 800949a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800949c:	1ad3      	subs	r3, r2, r3
 800949e:	2b02      	cmp	r3, #2
 80094a0:	d901      	bls.n	80094a6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80094a2:	2303      	movs	r3, #3
 80094a4:	e332      	b.n	8009b0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80094a6:	4b12      	ldr	r3, [pc, #72]	@ (80094f0 <HAL_RCC_OscConfig+0x288>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f003 0304 	and.w	r3, r3, #4
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d0f0      	beq.n	8009494 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80094b2:	f7f9 f989 	bl	80027c8 <HAL_GetREVID>
 80094b6:	4603      	mov	r3, r0
 80094b8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80094bc:	4293      	cmp	r3, r2
 80094be:	d819      	bhi.n	80094f4 <HAL_RCC_OscConfig+0x28c>
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	691b      	ldr	r3, [r3, #16]
 80094c4:	2b40      	cmp	r3, #64	@ 0x40
 80094c6:	d108      	bne.n	80094da <HAL_RCC_OscConfig+0x272>
 80094c8:	4b09      	ldr	r3, [pc, #36]	@ (80094f0 <HAL_RCC_OscConfig+0x288>)
 80094ca:	685b      	ldr	r3, [r3, #4]
 80094cc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80094d0:	4a07      	ldr	r2, [pc, #28]	@ (80094f0 <HAL_RCC_OscConfig+0x288>)
 80094d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80094d6:	6053      	str	r3, [r2, #4]
 80094d8:	e030      	b.n	800953c <HAL_RCC_OscConfig+0x2d4>
 80094da:	4b05      	ldr	r3, [pc, #20]	@ (80094f0 <HAL_RCC_OscConfig+0x288>)
 80094dc:	685b      	ldr	r3, [r3, #4]
 80094de:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	691b      	ldr	r3, [r3, #16]
 80094e6:	031b      	lsls	r3, r3, #12
 80094e8:	4901      	ldr	r1, [pc, #4]	@ (80094f0 <HAL_RCC_OscConfig+0x288>)
 80094ea:	4313      	orrs	r3, r2
 80094ec:	604b      	str	r3, [r1, #4]
 80094ee:	e025      	b.n	800953c <HAL_RCC_OscConfig+0x2d4>
 80094f0:	58024400 	.word	0x58024400
 80094f4:	4b9a      	ldr	r3, [pc, #616]	@ (8009760 <HAL_RCC_OscConfig+0x4f8>)
 80094f6:	685b      	ldr	r3, [r3, #4]
 80094f8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	691b      	ldr	r3, [r3, #16]
 8009500:	061b      	lsls	r3, r3, #24
 8009502:	4997      	ldr	r1, [pc, #604]	@ (8009760 <HAL_RCC_OscConfig+0x4f8>)
 8009504:	4313      	orrs	r3, r2
 8009506:	604b      	str	r3, [r1, #4]
 8009508:	e018      	b.n	800953c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800950a:	4b95      	ldr	r3, [pc, #596]	@ (8009760 <HAL_RCC_OscConfig+0x4f8>)
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	4a94      	ldr	r2, [pc, #592]	@ (8009760 <HAL_RCC_OscConfig+0x4f8>)
 8009510:	f023 0301 	bic.w	r3, r3, #1
 8009514:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009516:	f7f9 f927 	bl	8002768 <HAL_GetTick>
 800951a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800951c:	e008      	b.n	8009530 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800951e:	f7f9 f923 	bl	8002768 <HAL_GetTick>
 8009522:	4602      	mov	r2, r0
 8009524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009526:	1ad3      	subs	r3, r2, r3
 8009528:	2b02      	cmp	r3, #2
 800952a:	d901      	bls.n	8009530 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800952c:	2303      	movs	r3, #3
 800952e:	e2ed      	b.n	8009b0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009530:	4b8b      	ldr	r3, [pc, #556]	@ (8009760 <HAL_RCC_OscConfig+0x4f8>)
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	f003 0304 	and.w	r3, r3, #4
 8009538:	2b00      	cmp	r3, #0
 800953a:	d1f0      	bne.n	800951e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	f003 0310 	and.w	r3, r3, #16
 8009544:	2b00      	cmp	r3, #0
 8009546:	f000 80a9 	beq.w	800969c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800954a:	4b85      	ldr	r3, [pc, #532]	@ (8009760 <HAL_RCC_OscConfig+0x4f8>)
 800954c:	691b      	ldr	r3, [r3, #16]
 800954e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009552:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009554:	4b82      	ldr	r3, [pc, #520]	@ (8009760 <HAL_RCC_OscConfig+0x4f8>)
 8009556:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009558:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800955a:	69bb      	ldr	r3, [r7, #24]
 800955c:	2b08      	cmp	r3, #8
 800955e:	d007      	beq.n	8009570 <HAL_RCC_OscConfig+0x308>
 8009560:	69bb      	ldr	r3, [r7, #24]
 8009562:	2b18      	cmp	r3, #24
 8009564:	d13a      	bne.n	80095dc <HAL_RCC_OscConfig+0x374>
 8009566:	697b      	ldr	r3, [r7, #20]
 8009568:	f003 0303 	and.w	r3, r3, #3
 800956c:	2b01      	cmp	r3, #1
 800956e:	d135      	bne.n	80095dc <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009570:	4b7b      	ldr	r3, [pc, #492]	@ (8009760 <HAL_RCC_OscConfig+0x4f8>)
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009578:	2b00      	cmp	r3, #0
 800957a:	d005      	beq.n	8009588 <HAL_RCC_OscConfig+0x320>
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	69db      	ldr	r3, [r3, #28]
 8009580:	2b80      	cmp	r3, #128	@ 0x80
 8009582:	d001      	beq.n	8009588 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8009584:	2301      	movs	r3, #1
 8009586:	e2c1      	b.n	8009b0c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009588:	f7f9 f91e 	bl	80027c8 <HAL_GetREVID>
 800958c:	4603      	mov	r3, r0
 800958e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8009592:	4293      	cmp	r3, r2
 8009594:	d817      	bhi.n	80095c6 <HAL_RCC_OscConfig+0x35e>
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	6a1b      	ldr	r3, [r3, #32]
 800959a:	2b20      	cmp	r3, #32
 800959c:	d108      	bne.n	80095b0 <HAL_RCC_OscConfig+0x348>
 800959e:	4b70      	ldr	r3, [pc, #448]	@ (8009760 <HAL_RCC_OscConfig+0x4f8>)
 80095a0:	685b      	ldr	r3, [r3, #4]
 80095a2:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80095a6:	4a6e      	ldr	r2, [pc, #440]	@ (8009760 <HAL_RCC_OscConfig+0x4f8>)
 80095a8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80095ac:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80095ae:	e075      	b.n	800969c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80095b0:	4b6b      	ldr	r3, [pc, #428]	@ (8009760 <HAL_RCC_OscConfig+0x4f8>)
 80095b2:	685b      	ldr	r3, [r3, #4]
 80095b4:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	6a1b      	ldr	r3, [r3, #32]
 80095bc:	069b      	lsls	r3, r3, #26
 80095be:	4968      	ldr	r1, [pc, #416]	@ (8009760 <HAL_RCC_OscConfig+0x4f8>)
 80095c0:	4313      	orrs	r3, r2
 80095c2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80095c4:	e06a      	b.n	800969c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80095c6:	4b66      	ldr	r3, [pc, #408]	@ (8009760 <HAL_RCC_OscConfig+0x4f8>)
 80095c8:	68db      	ldr	r3, [r3, #12]
 80095ca:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6a1b      	ldr	r3, [r3, #32]
 80095d2:	061b      	lsls	r3, r3, #24
 80095d4:	4962      	ldr	r1, [pc, #392]	@ (8009760 <HAL_RCC_OscConfig+0x4f8>)
 80095d6:	4313      	orrs	r3, r2
 80095d8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80095da:	e05f      	b.n	800969c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	69db      	ldr	r3, [r3, #28]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d042      	beq.n	800966a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80095e4:	4b5e      	ldr	r3, [pc, #376]	@ (8009760 <HAL_RCC_OscConfig+0x4f8>)
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	4a5d      	ldr	r2, [pc, #372]	@ (8009760 <HAL_RCC_OscConfig+0x4f8>)
 80095ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80095ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095f0:	f7f9 f8ba 	bl	8002768 <HAL_GetTick>
 80095f4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80095f6:	e008      	b.n	800960a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80095f8:	f7f9 f8b6 	bl	8002768 <HAL_GetTick>
 80095fc:	4602      	mov	r2, r0
 80095fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009600:	1ad3      	subs	r3, r2, r3
 8009602:	2b02      	cmp	r3, #2
 8009604:	d901      	bls.n	800960a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8009606:	2303      	movs	r3, #3
 8009608:	e280      	b.n	8009b0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800960a:	4b55      	ldr	r3, [pc, #340]	@ (8009760 <HAL_RCC_OscConfig+0x4f8>)
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009612:	2b00      	cmp	r3, #0
 8009614:	d0f0      	beq.n	80095f8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009616:	f7f9 f8d7 	bl	80027c8 <HAL_GetREVID>
 800961a:	4603      	mov	r3, r0
 800961c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8009620:	4293      	cmp	r3, r2
 8009622:	d817      	bhi.n	8009654 <HAL_RCC_OscConfig+0x3ec>
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	6a1b      	ldr	r3, [r3, #32]
 8009628:	2b20      	cmp	r3, #32
 800962a:	d108      	bne.n	800963e <HAL_RCC_OscConfig+0x3d6>
 800962c:	4b4c      	ldr	r3, [pc, #304]	@ (8009760 <HAL_RCC_OscConfig+0x4f8>)
 800962e:	685b      	ldr	r3, [r3, #4]
 8009630:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8009634:	4a4a      	ldr	r2, [pc, #296]	@ (8009760 <HAL_RCC_OscConfig+0x4f8>)
 8009636:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800963a:	6053      	str	r3, [r2, #4]
 800963c:	e02e      	b.n	800969c <HAL_RCC_OscConfig+0x434>
 800963e:	4b48      	ldr	r3, [pc, #288]	@ (8009760 <HAL_RCC_OscConfig+0x4f8>)
 8009640:	685b      	ldr	r3, [r3, #4]
 8009642:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	6a1b      	ldr	r3, [r3, #32]
 800964a:	069b      	lsls	r3, r3, #26
 800964c:	4944      	ldr	r1, [pc, #272]	@ (8009760 <HAL_RCC_OscConfig+0x4f8>)
 800964e:	4313      	orrs	r3, r2
 8009650:	604b      	str	r3, [r1, #4]
 8009652:	e023      	b.n	800969c <HAL_RCC_OscConfig+0x434>
 8009654:	4b42      	ldr	r3, [pc, #264]	@ (8009760 <HAL_RCC_OscConfig+0x4f8>)
 8009656:	68db      	ldr	r3, [r3, #12]
 8009658:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	6a1b      	ldr	r3, [r3, #32]
 8009660:	061b      	lsls	r3, r3, #24
 8009662:	493f      	ldr	r1, [pc, #252]	@ (8009760 <HAL_RCC_OscConfig+0x4f8>)
 8009664:	4313      	orrs	r3, r2
 8009666:	60cb      	str	r3, [r1, #12]
 8009668:	e018      	b.n	800969c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800966a:	4b3d      	ldr	r3, [pc, #244]	@ (8009760 <HAL_RCC_OscConfig+0x4f8>)
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	4a3c      	ldr	r2, [pc, #240]	@ (8009760 <HAL_RCC_OscConfig+0x4f8>)
 8009670:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009674:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009676:	f7f9 f877 	bl	8002768 <HAL_GetTick>
 800967a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800967c:	e008      	b.n	8009690 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800967e:	f7f9 f873 	bl	8002768 <HAL_GetTick>
 8009682:	4602      	mov	r2, r0
 8009684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009686:	1ad3      	subs	r3, r2, r3
 8009688:	2b02      	cmp	r3, #2
 800968a:	d901      	bls.n	8009690 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800968c:	2303      	movs	r3, #3
 800968e:	e23d      	b.n	8009b0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009690:	4b33      	ldr	r3, [pc, #204]	@ (8009760 <HAL_RCC_OscConfig+0x4f8>)
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009698:	2b00      	cmp	r3, #0
 800969a:	d1f0      	bne.n	800967e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	f003 0308 	and.w	r3, r3, #8
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d036      	beq.n	8009716 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	695b      	ldr	r3, [r3, #20]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d019      	beq.n	80096e4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80096b0:	4b2b      	ldr	r3, [pc, #172]	@ (8009760 <HAL_RCC_OscConfig+0x4f8>)
 80096b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80096b4:	4a2a      	ldr	r2, [pc, #168]	@ (8009760 <HAL_RCC_OscConfig+0x4f8>)
 80096b6:	f043 0301 	orr.w	r3, r3, #1
 80096ba:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80096bc:	f7f9 f854 	bl	8002768 <HAL_GetTick>
 80096c0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80096c2:	e008      	b.n	80096d6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80096c4:	f7f9 f850 	bl	8002768 <HAL_GetTick>
 80096c8:	4602      	mov	r2, r0
 80096ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096cc:	1ad3      	subs	r3, r2, r3
 80096ce:	2b02      	cmp	r3, #2
 80096d0:	d901      	bls.n	80096d6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80096d2:	2303      	movs	r3, #3
 80096d4:	e21a      	b.n	8009b0c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80096d6:	4b22      	ldr	r3, [pc, #136]	@ (8009760 <HAL_RCC_OscConfig+0x4f8>)
 80096d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80096da:	f003 0302 	and.w	r3, r3, #2
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d0f0      	beq.n	80096c4 <HAL_RCC_OscConfig+0x45c>
 80096e2:	e018      	b.n	8009716 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80096e4:	4b1e      	ldr	r3, [pc, #120]	@ (8009760 <HAL_RCC_OscConfig+0x4f8>)
 80096e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80096e8:	4a1d      	ldr	r2, [pc, #116]	@ (8009760 <HAL_RCC_OscConfig+0x4f8>)
 80096ea:	f023 0301 	bic.w	r3, r3, #1
 80096ee:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80096f0:	f7f9 f83a 	bl	8002768 <HAL_GetTick>
 80096f4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80096f6:	e008      	b.n	800970a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80096f8:	f7f9 f836 	bl	8002768 <HAL_GetTick>
 80096fc:	4602      	mov	r2, r0
 80096fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009700:	1ad3      	subs	r3, r2, r3
 8009702:	2b02      	cmp	r3, #2
 8009704:	d901      	bls.n	800970a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8009706:	2303      	movs	r3, #3
 8009708:	e200      	b.n	8009b0c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800970a:	4b15      	ldr	r3, [pc, #84]	@ (8009760 <HAL_RCC_OscConfig+0x4f8>)
 800970c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800970e:	f003 0302 	and.w	r3, r3, #2
 8009712:	2b00      	cmp	r3, #0
 8009714:	d1f0      	bne.n	80096f8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	f003 0320 	and.w	r3, r3, #32
 800971e:	2b00      	cmp	r3, #0
 8009720:	d039      	beq.n	8009796 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	699b      	ldr	r3, [r3, #24]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d01c      	beq.n	8009764 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800972a:	4b0d      	ldr	r3, [pc, #52]	@ (8009760 <HAL_RCC_OscConfig+0x4f8>)
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	4a0c      	ldr	r2, [pc, #48]	@ (8009760 <HAL_RCC_OscConfig+0x4f8>)
 8009730:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8009734:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009736:	f7f9 f817 	bl	8002768 <HAL_GetTick>
 800973a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800973c:	e008      	b.n	8009750 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800973e:	f7f9 f813 	bl	8002768 <HAL_GetTick>
 8009742:	4602      	mov	r2, r0
 8009744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009746:	1ad3      	subs	r3, r2, r3
 8009748:	2b02      	cmp	r3, #2
 800974a:	d901      	bls.n	8009750 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800974c:	2303      	movs	r3, #3
 800974e:	e1dd      	b.n	8009b0c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009750:	4b03      	ldr	r3, [pc, #12]	@ (8009760 <HAL_RCC_OscConfig+0x4f8>)
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009758:	2b00      	cmp	r3, #0
 800975a:	d0f0      	beq.n	800973e <HAL_RCC_OscConfig+0x4d6>
 800975c:	e01b      	b.n	8009796 <HAL_RCC_OscConfig+0x52e>
 800975e:	bf00      	nop
 8009760:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009764:	4b9b      	ldr	r3, [pc, #620]	@ (80099d4 <HAL_RCC_OscConfig+0x76c>)
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	4a9a      	ldr	r2, [pc, #616]	@ (80099d4 <HAL_RCC_OscConfig+0x76c>)
 800976a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800976e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009770:	f7f8 fffa 	bl	8002768 <HAL_GetTick>
 8009774:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009776:	e008      	b.n	800978a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009778:	f7f8 fff6 	bl	8002768 <HAL_GetTick>
 800977c:	4602      	mov	r2, r0
 800977e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009780:	1ad3      	subs	r3, r2, r3
 8009782:	2b02      	cmp	r3, #2
 8009784:	d901      	bls.n	800978a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8009786:	2303      	movs	r3, #3
 8009788:	e1c0      	b.n	8009b0c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800978a:	4b92      	ldr	r3, [pc, #584]	@ (80099d4 <HAL_RCC_OscConfig+0x76c>)
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009792:	2b00      	cmp	r3, #0
 8009794:	d1f0      	bne.n	8009778 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	f003 0304 	and.w	r3, r3, #4
 800979e:	2b00      	cmp	r3, #0
 80097a0:	f000 8081 	beq.w	80098a6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80097a4:	4b8c      	ldr	r3, [pc, #560]	@ (80099d8 <HAL_RCC_OscConfig+0x770>)
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	4a8b      	ldr	r2, [pc, #556]	@ (80099d8 <HAL_RCC_OscConfig+0x770>)
 80097aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80097ae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80097b0:	f7f8 ffda 	bl	8002768 <HAL_GetTick>
 80097b4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80097b6:	e008      	b.n	80097ca <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80097b8:	f7f8 ffd6 	bl	8002768 <HAL_GetTick>
 80097bc:	4602      	mov	r2, r0
 80097be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097c0:	1ad3      	subs	r3, r2, r3
 80097c2:	2b64      	cmp	r3, #100	@ 0x64
 80097c4:	d901      	bls.n	80097ca <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80097c6:	2303      	movs	r3, #3
 80097c8:	e1a0      	b.n	8009b0c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80097ca:	4b83      	ldr	r3, [pc, #524]	@ (80099d8 <HAL_RCC_OscConfig+0x770>)
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d0f0      	beq.n	80097b8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	689b      	ldr	r3, [r3, #8]
 80097da:	2b01      	cmp	r3, #1
 80097dc:	d106      	bne.n	80097ec <HAL_RCC_OscConfig+0x584>
 80097de:	4b7d      	ldr	r3, [pc, #500]	@ (80099d4 <HAL_RCC_OscConfig+0x76c>)
 80097e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80097e2:	4a7c      	ldr	r2, [pc, #496]	@ (80099d4 <HAL_RCC_OscConfig+0x76c>)
 80097e4:	f043 0301 	orr.w	r3, r3, #1
 80097e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80097ea:	e02d      	b.n	8009848 <HAL_RCC_OscConfig+0x5e0>
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	689b      	ldr	r3, [r3, #8]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d10c      	bne.n	800980e <HAL_RCC_OscConfig+0x5a6>
 80097f4:	4b77      	ldr	r3, [pc, #476]	@ (80099d4 <HAL_RCC_OscConfig+0x76c>)
 80097f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80097f8:	4a76      	ldr	r2, [pc, #472]	@ (80099d4 <HAL_RCC_OscConfig+0x76c>)
 80097fa:	f023 0301 	bic.w	r3, r3, #1
 80097fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8009800:	4b74      	ldr	r3, [pc, #464]	@ (80099d4 <HAL_RCC_OscConfig+0x76c>)
 8009802:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009804:	4a73      	ldr	r2, [pc, #460]	@ (80099d4 <HAL_RCC_OscConfig+0x76c>)
 8009806:	f023 0304 	bic.w	r3, r3, #4
 800980a:	6713      	str	r3, [r2, #112]	@ 0x70
 800980c:	e01c      	b.n	8009848 <HAL_RCC_OscConfig+0x5e0>
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	689b      	ldr	r3, [r3, #8]
 8009812:	2b05      	cmp	r3, #5
 8009814:	d10c      	bne.n	8009830 <HAL_RCC_OscConfig+0x5c8>
 8009816:	4b6f      	ldr	r3, [pc, #444]	@ (80099d4 <HAL_RCC_OscConfig+0x76c>)
 8009818:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800981a:	4a6e      	ldr	r2, [pc, #440]	@ (80099d4 <HAL_RCC_OscConfig+0x76c>)
 800981c:	f043 0304 	orr.w	r3, r3, #4
 8009820:	6713      	str	r3, [r2, #112]	@ 0x70
 8009822:	4b6c      	ldr	r3, [pc, #432]	@ (80099d4 <HAL_RCC_OscConfig+0x76c>)
 8009824:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009826:	4a6b      	ldr	r2, [pc, #428]	@ (80099d4 <HAL_RCC_OscConfig+0x76c>)
 8009828:	f043 0301 	orr.w	r3, r3, #1
 800982c:	6713      	str	r3, [r2, #112]	@ 0x70
 800982e:	e00b      	b.n	8009848 <HAL_RCC_OscConfig+0x5e0>
 8009830:	4b68      	ldr	r3, [pc, #416]	@ (80099d4 <HAL_RCC_OscConfig+0x76c>)
 8009832:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009834:	4a67      	ldr	r2, [pc, #412]	@ (80099d4 <HAL_RCC_OscConfig+0x76c>)
 8009836:	f023 0301 	bic.w	r3, r3, #1
 800983a:	6713      	str	r3, [r2, #112]	@ 0x70
 800983c:	4b65      	ldr	r3, [pc, #404]	@ (80099d4 <HAL_RCC_OscConfig+0x76c>)
 800983e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009840:	4a64      	ldr	r2, [pc, #400]	@ (80099d4 <HAL_RCC_OscConfig+0x76c>)
 8009842:	f023 0304 	bic.w	r3, r3, #4
 8009846:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	689b      	ldr	r3, [r3, #8]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d015      	beq.n	800987c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009850:	f7f8 ff8a 	bl	8002768 <HAL_GetTick>
 8009854:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009856:	e00a      	b.n	800986e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009858:	f7f8 ff86 	bl	8002768 <HAL_GetTick>
 800985c:	4602      	mov	r2, r0
 800985e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009860:	1ad3      	subs	r3, r2, r3
 8009862:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009866:	4293      	cmp	r3, r2
 8009868:	d901      	bls.n	800986e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800986a:	2303      	movs	r3, #3
 800986c:	e14e      	b.n	8009b0c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800986e:	4b59      	ldr	r3, [pc, #356]	@ (80099d4 <HAL_RCC_OscConfig+0x76c>)
 8009870:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009872:	f003 0302 	and.w	r3, r3, #2
 8009876:	2b00      	cmp	r3, #0
 8009878:	d0ee      	beq.n	8009858 <HAL_RCC_OscConfig+0x5f0>
 800987a:	e014      	b.n	80098a6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800987c:	f7f8 ff74 	bl	8002768 <HAL_GetTick>
 8009880:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009882:	e00a      	b.n	800989a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009884:	f7f8 ff70 	bl	8002768 <HAL_GetTick>
 8009888:	4602      	mov	r2, r0
 800988a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800988c:	1ad3      	subs	r3, r2, r3
 800988e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009892:	4293      	cmp	r3, r2
 8009894:	d901      	bls.n	800989a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8009896:	2303      	movs	r3, #3
 8009898:	e138      	b.n	8009b0c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800989a:	4b4e      	ldr	r3, [pc, #312]	@ (80099d4 <HAL_RCC_OscConfig+0x76c>)
 800989c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800989e:	f003 0302 	and.w	r3, r3, #2
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d1ee      	bne.n	8009884 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	f000 812d 	beq.w	8009b0a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80098b0:	4b48      	ldr	r3, [pc, #288]	@ (80099d4 <HAL_RCC_OscConfig+0x76c>)
 80098b2:	691b      	ldr	r3, [r3, #16]
 80098b4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80098b8:	2b18      	cmp	r3, #24
 80098ba:	f000 80bd 	beq.w	8009a38 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098c2:	2b02      	cmp	r3, #2
 80098c4:	f040 809e 	bne.w	8009a04 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80098c8:	4b42      	ldr	r3, [pc, #264]	@ (80099d4 <HAL_RCC_OscConfig+0x76c>)
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	4a41      	ldr	r2, [pc, #260]	@ (80099d4 <HAL_RCC_OscConfig+0x76c>)
 80098ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80098d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098d4:	f7f8 ff48 	bl	8002768 <HAL_GetTick>
 80098d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80098da:	e008      	b.n	80098ee <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80098dc:	f7f8 ff44 	bl	8002768 <HAL_GetTick>
 80098e0:	4602      	mov	r2, r0
 80098e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098e4:	1ad3      	subs	r3, r2, r3
 80098e6:	2b02      	cmp	r3, #2
 80098e8:	d901      	bls.n	80098ee <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80098ea:	2303      	movs	r3, #3
 80098ec:	e10e      	b.n	8009b0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80098ee:	4b39      	ldr	r3, [pc, #228]	@ (80099d4 <HAL_RCC_OscConfig+0x76c>)
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d1f0      	bne.n	80098dc <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80098fa:	4b36      	ldr	r3, [pc, #216]	@ (80099d4 <HAL_RCC_OscConfig+0x76c>)
 80098fc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80098fe:	4b37      	ldr	r3, [pc, #220]	@ (80099dc <HAL_RCC_OscConfig+0x774>)
 8009900:	4013      	ands	r3, r2
 8009902:	687a      	ldr	r2, [r7, #4]
 8009904:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8009906:	687a      	ldr	r2, [r7, #4]
 8009908:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800990a:	0112      	lsls	r2, r2, #4
 800990c:	430a      	orrs	r2, r1
 800990e:	4931      	ldr	r1, [pc, #196]	@ (80099d4 <HAL_RCC_OscConfig+0x76c>)
 8009910:	4313      	orrs	r3, r2
 8009912:	628b      	str	r3, [r1, #40]	@ 0x28
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009918:	3b01      	subs	r3, #1
 800991a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009922:	3b01      	subs	r3, #1
 8009924:	025b      	lsls	r3, r3, #9
 8009926:	b29b      	uxth	r3, r3
 8009928:	431a      	orrs	r2, r3
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800992e:	3b01      	subs	r3, #1
 8009930:	041b      	lsls	r3, r3, #16
 8009932:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009936:	431a      	orrs	r2, r3
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800993c:	3b01      	subs	r3, #1
 800993e:	061b      	lsls	r3, r3, #24
 8009940:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009944:	4923      	ldr	r1, [pc, #140]	@ (80099d4 <HAL_RCC_OscConfig+0x76c>)
 8009946:	4313      	orrs	r3, r2
 8009948:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800994a:	4b22      	ldr	r3, [pc, #136]	@ (80099d4 <HAL_RCC_OscConfig+0x76c>)
 800994c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800994e:	4a21      	ldr	r2, [pc, #132]	@ (80099d4 <HAL_RCC_OscConfig+0x76c>)
 8009950:	f023 0301 	bic.w	r3, r3, #1
 8009954:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009956:	4b1f      	ldr	r3, [pc, #124]	@ (80099d4 <HAL_RCC_OscConfig+0x76c>)
 8009958:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800995a:	4b21      	ldr	r3, [pc, #132]	@ (80099e0 <HAL_RCC_OscConfig+0x778>)
 800995c:	4013      	ands	r3, r2
 800995e:	687a      	ldr	r2, [r7, #4]
 8009960:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009962:	00d2      	lsls	r2, r2, #3
 8009964:	491b      	ldr	r1, [pc, #108]	@ (80099d4 <HAL_RCC_OscConfig+0x76c>)
 8009966:	4313      	orrs	r3, r2
 8009968:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800996a:	4b1a      	ldr	r3, [pc, #104]	@ (80099d4 <HAL_RCC_OscConfig+0x76c>)
 800996c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800996e:	f023 020c 	bic.w	r2, r3, #12
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009976:	4917      	ldr	r1, [pc, #92]	@ (80099d4 <HAL_RCC_OscConfig+0x76c>)
 8009978:	4313      	orrs	r3, r2
 800997a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800997c:	4b15      	ldr	r3, [pc, #84]	@ (80099d4 <HAL_RCC_OscConfig+0x76c>)
 800997e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009980:	f023 0202 	bic.w	r2, r3, #2
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009988:	4912      	ldr	r1, [pc, #72]	@ (80099d4 <HAL_RCC_OscConfig+0x76c>)
 800998a:	4313      	orrs	r3, r2
 800998c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800998e:	4b11      	ldr	r3, [pc, #68]	@ (80099d4 <HAL_RCC_OscConfig+0x76c>)
 8009990:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009992:	4a10      	ldr	r2, [pc, #64]	@ (80099d4 <HAL_RCC_OscConfig+0x76c>)
 8009994:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009998:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800999a:	4b0e      	ldr	r3, [pc, #56]	@ (80099d4 <HAL_RCC_OscConfig+0x76c>)
 800999c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800999e:	4a0d      	ldr	r2, [pc, #52]	@ (80099d4 <HAL_RCC_OscConfig+0x76c>)
 80099a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80099a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80099a6:	4b0b      	ldr	r3, [pc, #44]	@ (80099d4 <HAL_RCC_OscConfig+0x76c>)
 80099a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099aa:	4a0a      	ldr	r2, [pc, #40]	@ (80099d4 <HAL_RCC_OscConfig+0x76c>)
 80099ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80099b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80099b2:	4b08      	ldr	r3, [pc, #32]	@ (80099d4 <HAL_RCC_OscConfig+0x76c>)
 80099b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099b6:	4a07      	ldr	r2, [pc, #28]	@ (80099d4 <HAL_RCC_OscConfig+0x76c>)
 80099b8:	f043 0301 	orr.w	r3, r3, #1
 80099bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80099be:	4b05      	ldr	r3, [pc, #20]	@ (80099d4 <HAL_RCC_OscConfig+0x76c>)
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	4a04      	ldr	r2, [pc, #16]	@ (80099d4 <HAL_RCC_OscConfig+0x76c>)
 80099c4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80099c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099ca:	f7f8 fecd 	bl	8002768 <HAL_GetTick>
 80099ce:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80099d0:	e011      	b.n	80099f6 <HAL_RCC_OscConfig+0x78e>
 80099d2:	bf00      	nop
 80099d4:	58024400 	.word	0x58024400
 80099d8:	58024800 	.word	0x58024800
 80099dc:	fffffc0c 	.word	0xfffffc0c
 80099e0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80099e4:	f7f8 fec0 	bl	8002768 <HAL_GetTick>
 80099e8:	4602      	mov	r2, r0
 80099ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099ec:	1ad3      	subs	r3, r2, r3
 80099ee:	2b02      	cmp	r3, #2
 80099f0:	d901      	bls.n	80099f6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80099f2:	2303      	movs	r3, #3
 80099f4:	e08a      	b.n	8009b0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80099f6:	4b47      	ldr	r3, [pc, #284]	@ (8009b14 <HAL_RCC_OscConfig+0x8ac>)
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d0f0      	beq.n	80099e4 <HAL_RCC_OscConfig+0x77c>
 8009a02:	e082      	b.n	8009b0a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009a04:	4b43      	ldr	r3, [pc, #268]	@ (8009b14 <HAL_RCC_OscConfig+0x8ac>)
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	4a42      	ldr	r2, [pc, #264]	@ (8009b14 <HAL_RCC_OscConfig+0x8ac>)
 8009a0a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009a0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a10:	f7f8 feaa 	bl	8002768 <HAL_GetTick>
 8009a14:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009a16:	e008      	b.n	8009a2a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009a18:	f7f8 fea6 	bl	8002768 <HAL_GetTick>
 8009a1c:	4602      	mov	r2, r0
 8009a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a20:	1ad3      	subs	r3, r2, r3
 8009a22:	2b02      	cmp	r3, #2
 8009a24:	d901      	bls.n	8009a2a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8009a26:	2303      	movs	r3, #3
 8009a28:	e070      	b.n	8009b0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009a2a:	4b3a      	ldr	r3, [pc, #232]	@ (8009b14 <HAL_RCC_OscConfig+0x8ac>)
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d1f0      	bne.n	8009a18 <HAL_RCC_OscConfig+0x7b0>
 8009a36:	e068      	b.n	8009b0a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009a38:	4b36      	ldr	r3, [pc, #216]	@ (8009b14 <HAL_RCC_OscConfig+0x8ac>)
 8009a3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a3c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009a3e:	4b35      	ldr	r3, [pc, #212]	@ (8009b14 <HAL_RCC_OscConfig+0x8ac>)
 8009a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a42:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a48:	2b01      	cmp	r3, #1
 8009a4a:	d031      	beq.n	8009ab0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009a4c:	693b      	ldr	r3, [r7, #16]
 8009a4e:	f003 0203 	and.w	r2, r3, #3
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009a56:	429a      	cmp	r2, r3
 8009a58:	d12a      	bne.n	8009ab0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009a5a:	693b      	ldr	r3, [r7, #16]
 8009a5c:	091b      	lsrs	r3, r3, #4
 8009a5e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009a66:	429a      	cmp	r2, r3
 8009a68:	d122      	bne.n	8009ab0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a74:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009a76:	429a      	cmp	r2, r3
 8009a78:	d11a      	bne.n	8009ab0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	0a5b      	lsrs	r3, r3, #9
 8009a7e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a86:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009a88:	429a      	cmp	r2, r3
 8009a8a:	d111      	bne.n	8009ab0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	0c1b      	lsrs	r3, r3, #16
 8009a90:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a98:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009a9a:	429a      	cmp	r2, r3
 8009a9c:	d108      	bne.n	8009ab0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	0e1b      	lsrs	r3, r3, #24
 8009aa2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009aaa:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009aac:	429a      	cmp	r2, r3
 8009aae:	d001      	beq.n	8009ab4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8009ab0:	2301      	movs	r3, #1
 8009ab2:	e02b      	b.n	8009b0c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8009ab4:	4b17      	ldr	r3, [pc, #92]	@ (8009b14 <HAL_RCC_OscConfig+0x8ac>)
 8009ab6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ab8:	08db      	lsrs	r3, r3, #3
 8009aba:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009abe:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009ac4:	693a      	ldr	r2, [r7, #16]
 8009ac6:	429a      	cmp	r2, r3
 8009ac8:	d01f      	beq.n	8009b0a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8009aca:	4b12      	ldr	r3, [pc, #72]	@ (8009b14 <HAL_RCC_OscConfig+0x8ac>)
 8009acc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ace:	4a11      	ldr	r2, [pc, #68]	@ (8009b14 <HAL_RCC_OscConfig+0x8ac>)
 8009ad0:	f023 0301 	bic.w	r3, r3, #1
 8009ad4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009ad6:	f7f8 fe47 	bl	8002768 <HAL_GetTick>
 8009ada:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8009adc:	bf00      	nop
 8009ade:	f7f8 fe43 	bl	8002768 <HAL_GetTick>
 8009ae2:	4602      	mov	r2, r0
 8009ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ae6:	4293      	cmp	r3, r2
 8009ae8:	d0f9      	beq.n	8009ade <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009aea:	4b0a      	ldr	r3, [pc, #40]	@ (8009b14 <HAL_RCC_OscConfig+0x8ac>)
 8009aec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009aee:	4b0a      	ldr	r3, [pc, #40]	@ (8009b18 <HAL_RCC_OscConfig+0x8b0>)
 8009af0:	4013      	ands	r3, r2
 8009af2:	687a      	ldr	r2, [r7, #4]
 8009af4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009af6:	00d2      	lsls	r2, r2, #3
 8009af8:	4906      	ldr	r1, [pc, #24]	@ (8009b14 <HAL_RCC_OscConfig+0x8ac>)
 8009afa:	4313      	orrs	r3, r2
 8009afc:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8009afe:	4b05      	ldr	r3, [pc, #20]	@ (8009b14 <HAL_RCC_OscConfig+0x8ac>)
 8009b00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b02:	4a04      	ldr	r2, [pc, #16]	@ (8009b14 <HAL_RCC_OscConfig+0x8ac>)
 8009b04:	f043 0301 	orr.w	r3, r3, #1
 8009b08:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8009b0a:	2300      	movs	r3, #0
}
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	3730      	adds	r7, #48	@ 0x30
 8009b10:	46bd      	mov	sp, r7
 8009b12:	bd80      	pop	{r7, pc}
 8009b14:	58024400 	.word	0x58024400
 8009b18:	ffff0007 	.word	0xffff0007

08009b1c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b086      	sub	sp, #24
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
 8009b24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d101      	bne.n	8009b30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009b2c:	2301      	movs	r3, #1
 8009b2e:	e19c      	b.n	8009e6a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009b30:	4b8a      	ldr	r3, [pc, #552]	@ (8009d5c <HAL_RCC_ClockConfig+0x240>)
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	f003 030f 	and.w	r3, r3, #15
 8009b38:	683a      	ldr	r2, [r7, #0]
 8009b3a:	429a      	cmp	r2, r3
 8009b3c:	d910      	bls.n	8009b60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009b3e:	4b87      	ldr	r3, [pc, #540]	@ (8009d5c <HAL_RCC_ClockConfig+0x240>)
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	f023 020f 	bic.w	r2, r3, #15
 8009b46:	4985      	ldr	r1, [pc, #532]	@ (8009d5c <HAL_RCC_ClockConfig+0x240>)
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	4313      	orrs	r3, r2
 8009b4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009b4e:	4b83      	ldr	r3, [pc, #524]	@ (8009d5c <HAL_RCC_ClockConfig+0x240>)
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	f003 030f 	and.w	r3, r3, #15
 8009b56:	683a      	ldr	r2, [r7, #0]
 8009b58:	429a      	cmp	r2, r3
 8009b5a:	d001      	beq.n	8009b60 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009b5c:	2301      	movs	r3, #1
 8009b5e:	e184      	b.n	8009e6a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	f003 0304 	and.w	r3, r3, #4
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d010      	beq.n	8009b8e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	691a      	ldr	r2, [r3, #16]
 8009b70:	4b7b      	ldr	r3, [pc, #492]	@ (8009d60 <HAL_RCC_ClockConfig+0x244>)
 8009b72:	699b      	ldr	r3, [r3, #24]
 8009b74:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009b78:	429a      	cmp	r2, r3
 8009b7a:	d908      	bls.n	8009b8e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009b7c:	4b78      	ldr	r3, [pc, #480]	@ (8009d60 <HAL_RCC_ClockConfig+0x244>)
 8009b7e:	699b      	ldr	r3, [r3, #24]
 8009b80:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	691b      	ldr	r3, [r3, #16]
 8009b88:	4975      	ldr	r1, [pc, #468]	@ (8009d60 <HAL_RCC_ClockConfig+0x244>)
 8009b8a:	4313      	orrs	r3, r2
 8009b8c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	f003 0308 	and.w	r3, r3, #8
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d010      	beq.n	8009bbc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	695a      	ldr	r2, [r3, #20]
 8009b9e:	4b70      	ldr	r3, [pc, #448]	@ (8009d60 <HAL_RCC_ClockConfig+0x244>)
 8009ba0:	69db      	ldr	r3, [r3, #28]
 8009ba2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009ba6:	429a      	cmp	r2, r3
 8009ba8:	d908      	bls.n	8009bbc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009baa:	4b6d      	ldr	r3, [pc, #436]	@ (8009d60 <HAL_RCC_ClockConfig+0x244>)
 8009bac:	69db      	ldr	r3, [r3, #28]
 8009bae:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	695b      	ldr	r3, [r3, #20]
 8009bb6:	496a      	ldr	r1, [pc, #424]	@ (8009d60 <HAL_RCC_ClockConfig+0x244>)
 8009bb8:	4313      	orrs	r3, r2
 8009bba:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	f003 0310 	and.w	r3, r3, #16
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d010      	beq.n	8009bea <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	699a      	ldr	r2, [r3, #24]
 8009bcc:	4b64      	ldr	r3, [pc, #400]	@ (8009d60 <HAL_RCC_ClockConfig+0x244>)
 8009bce:	69db      	ldr	r3, [r3, #28]
 8009bd0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009bd4:	429a      	cmp	r2, r3
 8009bd6:	d908      	bls.n	8009bea <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009bd8:	4b61      	ldr	r3, [pc, #388]	@ (8009d60 <HAL_RCC_ClockConfig+0x244>)
 8009bda:	69db      	ldr	r3, [r3, #28]
 8009bdc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	699b      	ldr	r3, [r3, #24]
 8009be4:	495e      	ldr	r1, [pc, #376]	@ (8009d60 <HAL_RCC_ClockConfig+0x244>)
 8009be6:	4313      	orrs	r3, r2
 8009be8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	f003 0320 	and.w	r3, r3, #32
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d010      	beq.n	8009c18 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	69da      	ldr	r2, [r3, #28]
 8009bfa:	4b59      	ldr	r3, [pc, #356]	@ (8009d60 <HAL_RCC_ClockConfig+0x244>)
 8009bfc:	6a1b      	ldr	r3, [r3, #32]
 8009bfe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009c02:	429a      	cmp	r2, r3
 8009c04:	d908      	bls.n	8009c18 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009c06:	4b56      	ldr	r3, [pc, #344]	@ (8009d60 <HAL_RCC_ClockConfig+0x244>)
 8009c08:	6a1b      	ldr	r3, [r3, #32]
 8009c0a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	69db      	ldr	r3, [r3, #28]
 8009c12:	4953      	ldr	r1, [pc, #332]	@ (8009d60 <HAL_RCC_ClockConfig+0x244>)
 8009c14:	4313      	orrs	r3, r2
 8009c16:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	f003 0302 	and.w	r3, r3, #2
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d010      	beq.n	8009c46 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	68da      	ldr	r2, [r3, #12]
 8009c28:	4b4d      	ldr	r3, [pc, #308]	@ (8009d60 <HAL_RCC_ClockConfig+0x244>)
 8009c2a:	699b      	ldr	r3, [r3, #24]
 8009c2c:	f003 030f 	and.w	r3, r3, #15
 8009c30:	429a      	cmp	r2, r3
 8009c32:	d908      	bls.n	8009c46 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009c34:	4b4a      	ldr	r3, [pc, #296]	@ (8009d60 <HAL_RCC_ClockConfig+0x244>)
 8009c36:	699b      	ldr	r3, [r3, #24]
 8009c38:	f023 020f 	bic.w	r2, r3, #15
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	68db      	ldr	r3, [r3, #12]
 8009c40:	4947      	ldr	r1, [pc, #284]	@ (8009d60 <HAL_RCC_ClockConfig+0x244>)
 8009c42:	4313      	orrs	r3, r2
 8009c44:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	f003 0301 	and.w	r3, r3, #1
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d055      	beq.n	8009cfe <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009c52:	4b43      	ldr	r3, [pc, #268]	@ (8009d60 <HAL_RCC_ClockConfig+0x244>)
 8009c54:	699b      	ldr	r3, [r3, #24]
 8009c56:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	689b      	ldr	r3, [r3, #8]
 8009c5e:	4940      	ldr	r1, [pc, #256]	@ (8009d60 <HAL_RCC_ClockConfig+0x244>)
 8009c60:	4313      	orrs	r3, r2
 8009c62:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	685b      	ldr	r3, [r3, #4]
 8009c68:	2b02      	cmp	r3, #2
 8009c6a:	d107      	bne.n	8009c7c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009c6c:	4b3c      	ldr	r3, [pc, #240]	@ (8009d60 <HAL_RCC_ClockConfig+0x244>)
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d121      	bne.n	8009cbc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009c78:	2301      	movs	r3, #1
 8009c7a:	e0f6      	b.n	8009e6a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	685b      	ldr	r3, [r3, #4]
 8009c80:	2b03      	cmp	r3, #3
 8009c82:	d107      	bne.n	8009c94 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009c84:	4b36      	ldr	r3, [pc, #216]	@ (8009d60 <HAL_RCC_ClockConfig+0x244>)
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d115      	bne.n	8009cbc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009c90:	2301      	movs	r3, #1
 8009c92:	e0ea      	b.n	8009e6a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	685b      	ldr	r3, [r3, #4]
 8009c98:	2b01      	cmp	r3, #1
 8009c9a:	d107      	bne.n	8009cac <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009c9c:	4b30      	ldr	r3, [pc, #192]	@ (8009d60 <HAL_RCC_ClockConfig+0x244>)
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d109      	bne.n	8009cbc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009ca8:	2301      	movs	r3, #1
 8009caa:	e0de      	b.n	8009e6a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009cac:	4b2c      	ldr	r3, [pc, #176]	@ (8009d60 <HAL_RCC_ClockConfig+0x244>)
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	f003 0304 	and.w	r3, r3, #4
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d101      	bne.n	8009cbc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009cb8:	2301      	movs	r3, #1
 8009cba:	e0d6      	b.n	8009e6a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009cbc:	4b28      	ldr	r3, [pc, #160]	@ (8009d60 <HAL_RCC_ClockConfig+0x244>)
 8009cbe:	691b      	ldr	r3, [r3, #16]
 8009cc0:	f023 0207 	bic.w	r2, r3, #7
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	685b      	ldr	r3, [r3, #4]
 8009cc8:	4925      	ldr	r1, [pc, #148]	@ (8009d60 <HAL_RCC_ClockConfig+0x244>)
 8009cca:	4313      	orrs	r3, r2
 8009ccc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009cce:	f7f8 fd4b 	bl	8002768 <HAL_GetTick>
 8009cd2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009cd4:	e00a      	b.n	8009cec <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009cd6:	f7f8 fd47 	bl	8002768 <HAL_GetTick>
 8009cda:	4602      	mov	r2, r0
 8009cdc:	697b      	ldr	r3, [r7, #20]
 8009cde:	1ad3      	subs	r3, r2, r3
 8009ce0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009ce4:	4293      	cmp	r3, r2
 8009ce6:	d901      	bls.n	8009cec <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8009ce8:	2303      	movs	r3, #3
 8009cea:	e0be      	b.n	8009e6a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009cec:	4b1c      	ldr	r3, [pc, #112]	@ (8009d60 <HAL_RCC_ClockConfig+0x244>)
 8009cee:	691b      	ldr	r3, [r3, #16]
 8009cf0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	685b      	ldr	r3, [r3, #4]
 8009cf8:	00db      	lsls	r3, r3, #3
 8009cfa:	429a      	cmp	r2, r3
 8009cfc:	d1eb      	bne.n	8009cd6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	f003 0302 	and.w	r3, r3, #2
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d010      	beq.n	8009d2c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	68da      	ldr	r2, [r3, #12]
 8009d0e:	4b14      	ldr	r3, [pc, #80]	@ (8009d60 <HAL_RCC_ClockConfig+0x244>)
 8009d10:	699b      	ldr	r3, [r3, #24]
 8009d12:	f003 030f 	and.w	r3, r3, #15
 8009d16:	429a      	cmp	r2, r3
 8009d18:	d208      	bcs.n	8009d2c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009d1a:	4b11      	ldr	r3, [pc, #68]	@ (8009d60 <HAL_RCC_ClockConfig+0x244>)
 8009d1c:	699b      	ldr	r3, [r3, #24]
 8009d1e:	f023 020f 	bic.w	r2, r3, #15
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	68db      	ldr	r3, [r3, #12]
 8009d26:	490e      	ldr	r1, [pc, #56]	@ (8009d60 <HAL_RCC_ClockConfig+0x244>)
 8009d28:	4313      	orrs	r3, r2
 8009d2a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009d2c:	4b0b      	ldr	r3, [pc, #44]	@ (8009d5c <HAL_RCC_ClockConfig+0x240>)
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	f003 030f 	and.w	r3, r3, #15
 8009d34:	683a      	ldr	r2, [r7, #0]
 8009d36:	429a      	cmp	r2, r3
 8009d38:	d214      	bcs.n	8009d64 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009d3a:	4b08      	ldr	r3, [pc, #32]	@ (8009d5c <HAL_RCC_ClockConfig+0x240>)
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	f023 020f 	bic.w	r2, r3, #15
 8009d42:	4906      	ldr	r1, [pc, #24]	@ (8009d5c <HAL_RCC_ClockConfig+0x240>)
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	4313      	orrs	r3, r2
 8009d48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009d4a:	4b04      	ldr	r3, [pc, #16]	@ (8009d5c <HAL_RCC_ClockConfig+0x240>)
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	f003 030f 	and.w	r3, r3, #15
 8009d52:	683a      	ldr	r2, [r7, #0]
 8009d54:	429a      	cmp	r2, r3
 8009d56:	d005      	beq.n	8009d64 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009d58:	2301      	movs	r3, #1
 8009d5a:	e086      	b.n	8009e6a <HAL_RCC_ClockConfig+0x34e>
 8009d5c:	52002000 	.word	0x52002000
 8009d60:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	f003 0304 	and.w	r3, r3, #4
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d010      	beq.n	8009d92 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	691a      	ldr	r2, [r3, #16]
 8009d74:	4b3f      	ldr	r3, [pc, #252]	@ (8009e74 <HAL_RCC_ClockConfig+0x358>)
 8009d76:	699b      	ldr	r3, [r3, #24]
 8009d78:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009d7c:	429a      	cmp	r2, r3
 8009d7e:	d208      	bcs.n	8009d92 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009d80:	4b3c      	ldr	r3, [pc, #240]	@ (8009e74 <HAL_RCC_ClockConfig+0x358>)
 8009d82:	699b      	ldr	r3, [r3, #24]
 8009d84:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	691b      	ldr	r3, [r3, #16]
 8009d8c:	4939      	ldr	r1, [pc, #228]	@ (8009e74 <HAL_RCC_ClockConfig+0x358>)
 8009d8e:	4313      	orrs	r3, r2
 8009d90:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	f003 0308 	and.w	r3, r3, #8
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d010      	beq.n	8009dc0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	695a      	ldr	r2, [r3, #20]
 8009da2:	4b34      	ldr	r3, [pc, #208]	@ (8009e74 <HAL_RCC_ClockConfig+0x358>)
 8009da4:	69db      	ldr	r3, [r3, #28]
 8009da6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009daa:	429a      	cmp	r2, r3
 8009dac:	d208      	bcs.n	8009dc0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009dae:	4b31      	ldr	r3, [pc, #196]	@ (8009e74 <HAL_RCC_ClockConfig+0x358>)
 8009db0:	69db      	ldr	r3, [r3, #28]
 8009db2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	695b      	ldr	r3, [r3, #20]
 8009dba:	492e      	ldr	r1, [pc, #184]	@ (8009e74 <HAL_RCC_ClockConfig+0x358>)
 8009dbc:	4313      	orrs	r3, r2
 8009dbe:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	f003 0310 	and.w	r3, r3, #16
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d010      	beq.n	8009dee <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	699a      	ldr	r2, [r3, #24]
 8009dd0:	4b28      	ldr	r3, [pc, #160]	@ (8009e74 <HAL_RCC_ClockConfig+0x358>)
 8009dd2:	69db      	ldr	r3, [r3, #28]
 8009dd4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009dd8:	429a      	cmp	r2, r3
 8009dda:	d208      	bcs.n	8009dee <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009ddc:	4b25      	ldr	r3, [pc, #148]	@ (8009e74 <HAL_RCC_ClockConfig+0x358>)
 8009dde:	69db      	ldr	r3, [r3, #28]
 8009de0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	699b      	ldr	r3, [r3, #24]
 8009de8:	4922      	ldr	r1, [pc, #136]	@ (8009e74 <HAL_RCC_ClockConfig+0x358>)
 8009dea:	4313      	orrs	r3, r2
 8009dec:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	f003 0320 	and.w	r3, r3, #32
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d010      	beq.n	8009e1c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	69da      	ldr	r2, [r3, #28]
 8009dfe:	4b1d      	ldr	r3, [pc, #116]	@ (8009e74 <HAL_RCC_ClockConfig+0x358>)
 8009e00:	6a1b      	ldr	r3, [r3, #32]
 8009e02:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009e06:	429a      	cmp	r2, r3
 8009e08:	d208      	bcs.n	8009e1c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009e0a:	4b1a      	ldr	r3, [pc, #104]	@ (8009e74 <HAL_RCC_ClockConfig+0x358>)
 8009e0c:	6a1b      	ldr	r3, [r3, #32]
 8009e0e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	69db      	ldr	r3, [r3, #28]
 8009e16:	4917      	ldr	r1, [pc, #92]	@ (8009e74 <HAL_RCC_ClockConfig+0x358>)
 8009e18:	4313      	orrs	r3, r2
 8009e1a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009e1c:	f000 f834 	bl	8009e88 <HAL_RCC_GetSysClockFreq>
 8009e20:	4602      	mov	r2, r0
 8009e22:	4b14      	ldr	r3, [pc, #80]	@ (8009e74 <HAL_RCC_ClockConfig+0x358>)
 8009e24:	699b      	ldr	r3, [r3, #24]
 8009e26:	0a1b      	lsrs	r3, r3, #8
 8009e28:	f003 030f 	and.w	r3, r3, #15
 8009e2c:	4912      	ldr	r1, [pc, #72]	@ (8009e78 <HAL_RCC_ClockConfig+0x35c>)
 8009e2e:	5ccb      	ldrb	r3, [r1, r3]
 8009e30:	f003 031f 	and.w	r3, r3, #31
 8009e34:	fa22 f303 	lsr.w	r3, r2, r3
 8009e38:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009e3a:	4b0e      	ldr	r3, [pc, #56]	@ (8009e74 <HAL_RCC_ClockConfig+0x358>)
 8009e3c:	699b      	ldr	r3, [r3, #24]
 8009e3e:	f003 030f 	and.w	r3, r3, #15
 8009e42:	4a0d      	ldr	r2, [pc, #52]	@ (8009e78 <HAL_RCC_ClockConfig+0x35c>)
 8009e44:	5cd3      	ldrb	r3, [r2, r3]
 8009e46:	f003 031f 	and.w	r3, r3, #31
 8009e4a:	693a      	ldr	r2, [r7, #16]
 8009e4c:	fa22 f303 	lsr.w	r3, r2, r3
 8009e50:	4a0a      	ldr	r2, [pc, #40]	@ (8009e7c <HAL_RCC_ClockConfig+0x360>)
 8009e52:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009e54:	4a0a      	ldr	r2, [pc, #40]	@ (8009e80 <HAL_RCC_ClockConfig+0x364>)
 8009e56:	693b      	ldr	r3, [r7, #16]
 8009e58:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8009e5a:	4b0a      	ldr	r3, [pc, #40]	@ (8009e84 <HAL_RCC_ClockConfig+0x368>)
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	4618      	mov	r0, r3
 8009e60:	f7f8 fc38 	bl	80026d4 <HAL_InitTick>
 8009e64:	4603      	mov	r3, r0
 8009e66:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	3718      	adds	r7, #24
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	bd80      	pop	{r7, pc}
 8009e72:	bf00      	nop
 8009e74:	58024400 	.word	0x58024400
 8009e78:	080123f8 	.word	0x080123f8
 8009e7c:	24000004 	.word	0x24000004
 8009e80:	24000000 	.word	0x24000000
 8009e84:	24000008 	.word	0x24000008

08009e88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009e88:	b480      	push	{r7}
 8009e8a:	b089      	sub	sp, #36	@ 0x24
 8009e8c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009e8e:	4bb3      	ldr	r3, [pc, #716]	@ (800a15c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009e90:	691b      	ldr	r3, [r3, #16]
 8009e92:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009e96:	2b18      	cmp	r3, #24
 8009e98:	f200 8155 	bhi.w	800a146 <HAL_RCC_GetSysClockFreq+0x2be>
 8009e9c:	a201      	add	r2, pc, #4	@ (adr r2, 8009ea4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8009e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ea2:	bf00      	nop
 8009ea4:	08009f09 	.word	0x08009f09
 8009ea8:	0800a147 	.word	0x0800a147
 8009eac:	0800a147 	.word	0x0800a147
 8009eb0:	0800a147 	.word	0x0800a147
 8009eb4:	0800a147 	.word	0x0800a147
 8009eb8:	0800a147 	.word	0x0800a147
 8009ebc:	0800a147 	.word	0x0800a147
 8009ec0:	0800a147 	.word	0x0800a147
 8009ec4:	08009f2f 	.word	0x08009f2f
 8009ec8:	0800a147 	.word	0x0800a147
 8009ecc:	0800a147 	.word	0x0800a147
 8009ed0:	0800a147 	.word	0x0800a147
 8009ed4:	0800a147 	.word	0x0800a147
 8009ed8:	0800a147 	.word	0x0800a147
 8009edc:	0800a147 	.word	0x0800a147
 8009ee0:	0800a147 	.word	0x0800a147
 8009ee4:	08009f35 	.word	0x08009f35
 8009ee8:	0800a147 	.word	0x0800a147
 8009eec:	0800a147 	.word	0x0800a147
 8009ef0:	0800a147 	.word	0x0800a147
 8009ef4:	0800a147 	.word	0x0800a147
 8009ef8:	0800a147 	.word	0x0800a147
 8009efc:	0800a147 	.word	0x0800a147
 8009f00:	0800a147 	.word	0x0800a147
 8009f04:	08009f3b 	.word	0x08009f3b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f08:	4b94      	ldr	r3, [pc, #592]	@ (800a15c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	f003 0320 	and.w	r3, r3, #32
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d009      	beq.n	8009f28 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009f14:	4b91      	ldr	r3, [pc, #580]	@ (800a15c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	08db      	lsrs	r3, r3, #3
 8009f1a:	f003 0303 	and.w	r3, r3, #3
 8009f1e:	4a90      	ldr	r2, [pc, #576]	@ (800a160 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009f20:	fa22 f303 	lsr.w	r3, r2, r3
 8009f24:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8009f26:	e111      	b.n	800a14c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009f28:	4b8d      	ldr	r3, [pc, #564]	@ (800a160 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009f2a:	61bb      	str	r3, [r7, #24]
      break;
 8009f2c:	e10e      	b.n	800a14c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8009f2e:	4b8d      	ldr	r3, [pc, #564]	@ (800a164 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009f30:	61bb      	str	r3, [r7, #24]
      break;
 8009f32:	e10b      	b.n	800a14c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8009f34:	4b8c      	ldr	r3, [pc, #560]	@ (800a168 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8009f36:	61bb      	str	r3, [r7, #24]
      break;
 8009f38:	e108      	b.n	800a14c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009f3a:	4b88      	ldr	r3, [pc, #544]	@ (800a15c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009f3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f3e:	f003 0303 	and.w	r3, r3, #3
 8009f42:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8009f44:	4b85      	ldr	r3, [pc, #532]	@ (800a15c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009f46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f48:	091b      	lsrs	r3, r3, #4
 8009f4a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009f4e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009f50:	4b82      	ldr	r3, [pc, #520]	@ (800a15c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009f52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f54:	f003 0301 	and.w	r3, r3, #1
 8009f58:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009f5a:	4b80      	ldr	r3, [pc, #512]	@ (800a15c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009f5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f5e:	08db      	lsrs	r3, r3, #3
 8009f60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009f64:	68fa      	ldr	r2, [r7, #12]
 8009f66:	fb02 f303 	mul.w	r3, r2, r3
 8009f6a:	ee07 3a90 	vmov	s15, r3
 8009f6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f72:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8009f76:	693b      	ldr	r3, [r7, #16]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	f000 80e1 	beq.w	800a140 <HAL_RCC_GetSysClockFreq+0x2b8>
 8009f7e:	697b      	ldr	r3, [r7, #20]
 8009f80:	2b02      	cmp	r3, #2
 8009f82:	f000 8083 	beq.w	800a08c <HAL_RCC_GetSysClockFreq+0x204>
 8009f86:	697b      	ldr	r3, [r7, #20]
 8009f88:	2b02      	cmp	r3, #2
 8009f8a:	f200 80a1 	bhi.w	800a0d0 <HAL_RCC_GetSysClockFreq+0x248>
 8009f8e:	697b      	ldr	r3, [r7, #20]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d003      	beq.n	8009f9c <HAL_RCC_GetSysClockFreq+0x114>
 8009f94:	697b      	ldr	r3, [r7, #20]
 8009f96:	2b01      	cmp	r3, #1
 8009f98:	d056      	beq.n	800a048 <HAL_RCC_GetSysClockFreq+0x1c0>
 8009f9a:	e099      	b.n	800a0d0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f9c:	4b6f      	ldr	r3, [pc, #444]	@ (800a15c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	f003 0320 	and.w	r3, r3, #32
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d02d      	beq.n	800a004 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009fa8:	4b6c      	ldr	r3, [pc, #432]	@ (800a15c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	08db      	lsrs	r3, r3, #3
 8009fae:	f003 0303 	and.w	r3, r3, #3
 8009fb2:	4a6b      	ldr	r2, [pc, #428]	@ (800a160 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009fb4:	fa22 f303 	lsr.w	r3, r2, r3
 8009fb8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	ee07 3a90 	vmov	s15, r3
 8009fc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fc4:	693b      	ldr	r3, [r7, #16]
 8009fc6:	ee07 3a90 	vmov	s15, r3
 8009fca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009fd2:	4b62      	ldr	r3, [pc, #392]	@ (800a15c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009fd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fda:	ee07 3a90 	vmov	s15, r3
 8009fde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fe2:	ed97 6a02 	vldr	s12, [r7, #8]
 8009fe6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800a16c <HAL_RCC_GetSysClockFreq+0x2e4>
 8009fea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009fee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ff2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009ff6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ffa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ffe:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800a002:	e087      	b.n	800a114 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a004:	693b      	ldr	r3, [r7, #16]
 800a006:	ee07 3a90 	vmov	s15, r3
 800a00a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a00e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800a170 <HAL_RCC_GetSysClockFreq+0x2e8>
 800a012:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a016:	4b51      	ldr	r3, [pc, #324]	@ (800a15c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a01a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a01e:	ee07 3a90 	vmov	s15, r3
 800a022:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a026:	ed97 6a02 	vldr	s12, [r7, #8]
 800a02a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800a16c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a02e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a032:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a036:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a03a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a03e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a042:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a046:	e065      	b.n	800a114 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a048:	693b      	ldr	r3, [r7, #16]
 800a04a:	ee07 3a90 	vmov	s15, r3
 800a04e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a052:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800a174 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a056:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a05a:	4b40      	ldr	r3, [pc, #256]	@ (800a15c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a05c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a05e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a062:	ee07 3a90 	vmov	s15, r3
 800a066:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a06a:	ed97 6a02 	vldr	s12, [r7, #8]
 800a06e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800a16c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a072:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a076:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a07a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a07e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a082:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a086:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a08a:	e043      	b.n	800a114 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a08c:	693b      	ldr	r3, [r7, #16]
 800a08e:	ee07 3a90 	vmov	s15, r3
 800a092:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a096:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800a178 <HAL_RCC_GetSysClockFreq+0x2f0>
 800a09a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a09e:	4b2f      	ldr	r3, [pc, #188]	@ (800a15c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a0a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a0a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0a6:	ee07 3a90 	vmov	s15, r3
 800a0aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0ae:	ed97 6a02 	vldr	s12, [r7, #8]
 800a0b2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800a16c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a0b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a0c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0ca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a0ce:	e021      	b.n	800a114 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a0d0:	693b      	ldr	r3, [r7, #16]
 800a0d2:	ee07 3a90 	vmov	s15, r3
 800a0d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0da:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800a174 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a0de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0e2:	4b1e      	ldr	r3, [pc, #120]	@ (800a15c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a0e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a0e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0ea:	ee07 3a90 	vmov	s15, r3
 800a0ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0f2:	ed97 6a02 	vldr	s12, [r7, #8]
 800a0f6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800a16c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a0fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a102:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a106:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a10a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a10e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a112:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800a114:	4b11      	ldr	r3, [pc, #68]	@ (800a15c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a116:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a118:	0a5b      	lsrs	r3, r3, #9
 800a11a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a11e:	3301      	adds	r3, #1
 800a120:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	ee07 3a90 	vmov	s15, r3
 800a128:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a12c:	edd7 6a07 	vldr	s13, [r7, #28]
 800a130:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a134:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a138:	ee17 3a90 	vmov	r3, s15
 800a13c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800a13e:	e005      	b.n	800a14c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800a140:	2300      	movs	r3, #0
 800a142:	61bb      	str	r3, [r7, #24]
      break;
 800a144:	e002      	b.n	800a14c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800a146:	4b07      	ldr	r3, [pc, #28]	@ (800a164 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a148:	61bb      	str	r3, [r7, #24]
      break;
 800a14a:	bf00      	nop
  }

  return sysclockfreq;
 800a14c:	69bb      	ldr	r3, [r7, #24]
}
 800a14e:	4618      	mov	r0, r3
 800a150:	3724      	adds	r7, #36	@ 0x24
 800a152:	46bd      	mov	sp, r7
 800a154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a158:	4770      	bx	lr
 800a15a:	bf00      	nop
 800a15c:	58024400 	.word	0x58024400
 800a160:	03d09000 	.word	0x03d09000
 800a164:	003d0900 	.word	0x003d0900
 800a168:	007a1200 	.word	0x007a1200
 800a16c:	46000000 	.word	0x46000000
 800a170:	4c742400 	.word	0x4c742400
 800a174:	4a742400 	.word	0x4a742400
 800a178:	4af42400 	.word	0x4af42400

0800a17c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b082      	sub	sp, #8
 800a180:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a182:	f7ff fe81 	bl	8009e88 <HAL_RCC_GetSysClockFreq>
 800a186:	4602      	mov	r2, r0
 800a188:	4b10      	ldr	r3, [pc, #64]	@ (800a1cc <HAL_RCC_GetHCLKFreq+0x50>)
 800a18a:	699b      	ldr	r3, [r3, #24]
 800a18c:	0a1b      	lsrs	r3, r3, #8
 800a18e:	f003 030f 	and.w	r3, r3, #15
 800a192:	490f      	ldr	r1, [pc, #60]	@ (800a1d0 <HAL_RCC_GetHCLKFreq+0x54>)
 800a194:	5ccb      	ldrb	r3, [r1, r3]
 800a196:	f003 031f 	and.w	r3, r3, #31
 800a19a:	fa22 f303 	lsr.w	r3, r2, r3
 800a19e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a1a0:	4b0a      	ldr	r3, [pc, #40]	@ (800a1cc <HAL_RCC_GetHCLKFreq+0x50>)
 800a1a2:	699b      	ldr	r3, [r3, #24]
 800a1a4:	f003 030f 	and.w	r3, r3, #15
 800a1a8:	4a09      	ldr	r2, [pc, #36]	@ (800a1d0 <HAL_RCC_GetHCLKFreq+0x54>)
 800a1aa:	5cd3      	ldrb	r3, [r2, r3]
 800a1ac:	f003 031f 	and.w	r3, r3, #31
 800a1b0:	687a      	ldr	r2, [r7, #4]
 800a1b2:	fa22 f303 	lsr.w	r3, r2, r3
 800a1b6:	4a07      	ldr	r2, [pc, #28]	@ (800a1d4 <HAL_RCC_GetHCLKFreq+0x58>)
 800a1b8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a1ba:	4a07      	ldr	r2, [pc, #28]	@ (800a1d8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a1c0:	4b04      	ldr	r3, [pc, #16]	@ (800a1d4 <HAL_RCC_GetHCLKFreq+0x58>)
 800a1c2:	681b      	ldr	r3, [r3, #0]
}
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	3708      	adds	r7, #8
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	bd80      	pop	{r7, pc}
 800a1cc:	58024400 	.word	0x58024400
 800a1d0:	080123f8 	.word	0x080123f8
 800a1d4:	24000004 	.word	0x24000004
 800a1d8:	24000000 	.word	0x24000000

0800a1dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a1e0:	f7ff ffcc 	bl	800a17c <HAL_RCC_GetHCLKFreq>
 800a1e4:	4602      	mov	r2, r0
 800a1e6:	4b06      	ldr	r3, [pc, #24]	@ (800a200 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a1e8:	69db      	ldr	r3, [r3, #28]
 800a1ea:	091b      	lsrs	r3, r3, #4
 800a1ec:	f003 0307 	and.w	r3, r3, #7
 800a1f0:	4904      	ldr	r1, [pc, #16]	@ (800a204 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a1f2:	5ccb      	ldrb	r3, [r1, r3]
 800a1f4:	f003 031f 	and.w	r3, r3, #31
 800a1f8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	bd80      	pop	{r7, pc}
 800a200:	58024400 	.word	0x58024400
 800a204:	080123f8 	.word	0x080123f8

0800a208 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800a20c:	f7ff ffb6 	bl	800a17c <HAL_RCC_GetHCLKFreq>
 800a210:	4602      	mov	r2, r0
 800a212:	4b06      	ldr	r3, [pc, #24]	@ (800a22c <HAL_RCC_GetPCLK2Freq+0x24>)
 800a214:	69db      	ldr	r3, [r3, #28]
 800a216:	0a1b      	lsrs	r3, r3, #8
 800a218:	f003 0307 	and.w	r3, r3, #7
 800a21c:	4904      	ldr	r1, [pc, #16]	@ (800a230 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a21e:	5ccb      	ldrb	r3, [r1, r3]
 800a220:	f003 031f 	and.w	r3, r3, #31
 800a224:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800a228:	4618      	mov	r0, r3
 800a22a:	bd80      	pop	{r7, pc}
 800a22c:	58024400 	.word	0x58024400
 800a230:	080123f8 	.word	0x080123f8

0800a234 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a234:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a238:	b0ca      	sub	sp, #296	@ 0x128
 800a23a:	af00      	add	r7, sp, #0
 800a23c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a240:	2300      	movs	r3, #0
 800a242:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a246:	2300      	movs	r3, #0
 800a248:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a24c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a250:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a254:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800a258:	2500      	movs	r5, #0
 800a25a:	ea54 0305 	orrs.w	r3, r4, r5
 800a25e:	d049      	beq.n	800a2f4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800a260:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a264:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a266:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a26a:	d02f      	beq.n	800a2cc <HAL_RCCEx_PeriphCLKConfig+0x98>
 800a26c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a270:	d828      	bhi.n	800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a272:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a276:	d01a      	beq.n	800a2ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800a278:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a27c:	d822      	bhi.n	800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d003      	beq.n	800a28a <HAL_RCCEx_PeriphCLKConfig+0x56>
 800a282:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a286:	d007      	beq.n	800a298 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a288:	e01c      	b.n	800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a28a:	4bb8      	ldr	r3, [pc, #736]	@ (800a56c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a28c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a28e:	4ab7      	ldr	r2, [pc, #732]	@ (800a56c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a290:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a294:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a296:	e01a      	b.n	800a2ce <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a298:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a29c:	3308      	adds	r3, #8
 800a29e:	2102      	movs	r1, #2
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	f002 fb61 	bl	800c968 <RCCEx_PLL2_Config>
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a2ac:	e00f      	b.n	800a2ce <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a2ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2b2:	3328      	adds	r3, #40	@ 0x28
 800a2b4:	2102      	movs	r1, #2
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	f002 fc08 	bl	800cacc <RCCEx_PLL3_Config>
 800a2bc:	4603      	mov	r3, r0
 800a2be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a2c2:	e004      	b.n	800a2ce <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a2c4:	2301      	movs	r3, #1
 800a2c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a2ca:	e000      	b.n	800a2ce <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800a2cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a2ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d10a      	bne.n	800a2ec <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a2d6:	4ba5      	ldr	r3, [pc, #660]	@ (800a56c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a2d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a2da:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800a2de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2e2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a2e4:	4aa1      	ldr	r2, [pc, #644]	@ (800a56c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a2e6:	430b      	orrs	r3, r1
 800a2e8:	6513      	str	r3, [r2, #80]	@ 0x50
 800a2ea:	e003      	b.n	800a2f4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a2f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a2f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2fc:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800a300:	f04f 0900 	mov.w	r9, #0
 800a304:	ea58 0309 	orrs.w	r3, r8, r9
 800a308:	d047      	beq.n	800a39a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800a30a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a30e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a310:	2b04      	cmp	r3, #4
 800a312:	d82a      	bhi.n	800a36a <HAL_RCCEx_PeriphCLKConfig+0x136>
 800a314:	a201      	add	r2, pc, #4	@ (adr r2, 800a31c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800a316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a31a:	bf00      	nop
 800a31c:	0800a331 	.word	0x0800a331
 800a320:	0800a33f 	.word	0x0800a33f
 800a324:	0800a355 	.word	0x0800a355
 800a328:	0800a373 	.word	0x0800a373
 800a32c:	0800a373 	.word	0x0800a373
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a330:	4b8e      	ldr	r3, [pc, #568]	@ (800a56c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a334:	4a8d      	ldr	r2, [pc, #564]	@ (800a56c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a336:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a33a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a33c:	e01a      	b.n	800a374 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a33e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a342:	3308      	adds	r3, #8
 800a344:	2100      	movs	r1, #0
 800a346:	4618      	mov	r0, r3
 800a348:	f002 fb0e 	bl	800c968 <RCCEx_PLL2_Config>
 800a34c:	4603      	mov	r3, r0
 800a34e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a352:	e00f      	b.n	800a374 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a354:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a358:	3328      	adds	r3, #40	@ 0x28
 800a35a:	2100      	movs	r1, #0
 800a35c:	4618      	mov	r0, r3
 800a35e:	f002 fbb5 	bl	800cacc <RCCEx_PLL3_Config>
 800a362:	4603      	mov	r3, r0
 800a364:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a368:	e004      	b.n	800a374 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a36a:	2301      	movs	r3, #1
 800a36c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a370:	e000      	b.n	800a374 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800a372:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a374:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d10a      	bne.n	800a392 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a37c:	4b7b      	ldr	r3, [pc, #492]	@ (800a56c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a37e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a380:	f023 0107 	bic.w	r1, r3, #7
 800a384:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a388:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a38a:	4a78      	ldr	r2, [pc, #480]	@ (800a56c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a38c:	430b      	orrs	r3, r1
 800a38e:	6513      	str	r3, [r2, #80]	@ 0x50
 800a390:	e003      	b.n	800a39a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a392:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a396:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800a39a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a39e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3a2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800a3a6:	f04f 0b00 	mov.w	fp, #0
 800a3aa:	ea5a 030b 	orrs.w	r3, sl, fp
 800a3ae:	d04c      	beq.n	800a44a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800a3b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a3b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a3b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a3ba:	d030      	beq.n	800a41e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800a3bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a3c0:	d829      	bhi.n	800a416 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800a3c2:	2bc0      	cmp	r3, #192	@ 0xc0
 800a3c4:	d02d      	beq.n	800a422 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800a3c6:	2bc0      	cmp	r3, #192	@ 0xc0
 800a3c8:	d825      	bhi.n	800a416 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800a3ca:	2b80      	cmp	r3, #128	@ 0x80
 800a3cc:	d018      	beq.n	800a400 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800a3ce:	2b80      	cmp	r3, #128	@ 0x80
 800a3d0:	d821      	bhi.n	800a416 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d002      	beq.n	800a3dc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800a3d6:	2b40      	cmp	r3, #64	@ 0x40
 800a3d8:	d007      	beq.n	800a3ea <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800a3da:	e01c      	b.n	800a416 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a3dc:	4b63      	ldr	r3, [pc, #396]	@ (800a56c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a3de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3e0:	4a62      	ldr	r2, [pc, #392]	@ (800a56c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a3e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a3e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800a3e8:	e01c      	b.n	800a424 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a3ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a3ee:	3308      	adds	r3, #8
 800a3f0:	2100      	movs	r1, #0
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	f002 fab8 	bl	800c968 <RCCEx_PLL2_Config>
 800a3f8:	4603      	mov	r3, r0
 800a3fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800a3fe:	e011      	b.n	800a424 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a400:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a404:	3328      	adds	r3, #40	@ 0x28
 800a406:	2100      	movs	r1, #0
 800a408:	4618      	mov	r0, r3
 800a40a:	f002 fb5f 	bl	800cacc <RCCEx_PLL3_Config>
 800a40e:	4603      	mov	r3, r0
 800a410:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800a414:	e006      	b.n	800a424 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a416:	2301      	movs	r3, #1
 800a418:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a41c:	e002      	b.n	800a424 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800a41e:	bf00      	nop
 800a420:	e000      	b.n	800a424 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800a422:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a424:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d10a      	bne.n	800a442 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800a42c:	4b4f      	ldr	r3, [pc, #316]	@ (800a56c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a42e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a430:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800a434:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a438:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a43a:	4a4c      	ldr	r2, [pc, #304]	@ (800a56c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a43c:	430b      	orrs	r3, r1
 800a43e:	6513      	str	r3, [r2, #80]	@ 0x50
 800a440:	e003      	b.n	800a44a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a442:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a446:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800a44a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a44e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a452:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800a456:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800a45a:	2300      	movs	r3, #0
 800a45c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800a460:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800a464:	460b      	mov	r3, r1
 800a466:	4313      	orrs	r3, r2
 800a468:	d053      	beq.n	800a512 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800a46a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a46e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800a472:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a476:	d035      	beq.n	800a4e4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800a478:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a47c:	d82e      	bhi.n	800a4dc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800a47e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a482:	d031      	beq.n	800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800a484:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a488:	d828      	bhi.n	800a4dc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800a48a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a48e:	d01a      	beq.n	800a4c6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800a490:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a494:	d822      	bhi.n	800a4dc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800a496:	2b00      	cmp	r3, #0
 800a498:	d003      	beq.n	800a4a2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800a49a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a49e:	d007      	beq.n	800a4b0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800a4a0:	e01c      	b.n	800a4dc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a4a2:	4b32      	ldr	r3, [pc, #200]	@ (800a56c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a4a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4a6:	4a31      	ldr	r2, [pc, #196]	@ (800a56c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a4a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a4ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a4ae:	e01c      	b.n	800a4ea <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a4b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a4b4:	3308      	adds	r3, #8
 800a4b6:	2100      	movs	r1, #0
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	f002 fa55 	bl	800c968 <RCCEx_PLL2_Config>
 800a4be:	4603      	mov	r3, r0
 800a4c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800a4c4:	e011      	b.n	800a4ea <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a4c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a4ca:	3328      	adds	r3, #40	@ 0x28
 800a4cc:	2100      	movs	r1, #0
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	f002 fafc 	bl	800cacc <RCCEx_PLL3_Config>
 800a4d4:	4603      	mov	r3, r0
 800a4d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a4da:	e006      	b.n	800a4ea <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800a4dc:	2301      	movs	r3, #1
 800a4de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a4e2:	e002      	b.n	800a4ea <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800a4e4:	bf00      	nop
 800a4e6:	e000      	b.n	800a4ea <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800a4e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a4ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d10b      	bne.n	800a50a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800a4f2:	4b1e      	ldr	r3, [pc, #120]	@ (800a56c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a4f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a4f6:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800a4fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a4fe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800a502:	4a1a      	ldr	r2, [pc, #104]	@ (800a56c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a504:	430b      	orrs	r3, r1
 800a506:	6593      	str	r3, [r2, #88]	@ 0x58
 800a508:	e003      	b.n	800a512 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a50a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a50e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800a512:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a51a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800a51e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800a522:	2300      	movs	r3, #0
 800a524:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800a528:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800a52c:	460b      	mov	r3, r1
 800a52e:	4313      	orrs	r3, r2
 800a530:	d056      	beq.n	800a5e0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800a532:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a536:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a53a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a53e:	d038      	beq.n	800a5b2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800a540:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a544:	d831      	bhi.n	800a5aa <HAL_RCCEx_PeriphCLKConfig+0x376>
 800a546:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a54a:	d034      	beq.n	800a5b6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800a54c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a550:	d82b      	bhi.n	800a5aa <HAL_RCCEx_PeriphCLKConfig+0x376>
 800a552:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a556:	d01d      	beq.n	800a594 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800a558:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a55c:	d825      	bhi.n	800a5aa <HAL_RCCEx_PeriphCLKConfig+0x376>
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d006      	beq.n	800a570 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800a562:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a566:	d00a      	beq.n	800a57e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800a568:	e01f      	b.n	800a5aa <HAL_RCCEx_PeriphCLKConfig+0x376>
 800a56a:	bf00      	nop
 800a56c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a570:	4ba2      	ldr	r3, [pc, #648]	@ (800a7fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a574:	4aa1      	ldr	r2, [pc, #644]	@ (800a7fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a576:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a57a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a57c:	e01c      	b.n	800a5b8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a57e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a582:	3308      	adds	r3, #8
 800a584:	2100      	movs	r1, #0
 800a586:	4618      	mov	r0, r3
 800a588:	f002 f9ee 	bl	800c968 <RCCEx_PLL2_Config>
 800a58c:	4603      	mov	r3, r0
 800a58e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800a592:	e011      	b.n	800a5b8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a594:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a598:	3328      	adds	r3, #40	@ 0x28
 800a59a:	2100      	movs	r1, #0
 800a59c:	4618      	mov	r0, r3
 800a59e:	f002 fa95 	bl	800cacc <RCCEx_PLL3_Config>
 800a5a2:	4603      	mov	r3, r0
 800a5a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a5a8:	e006      	b.n	800a5b8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800a5aa:	2301      	movs	r3, #1
 800a5ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a5b0:	e002      	b.n	800a5b8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800a5b2:	bf00      	nop
 800a5b4:	e000      	b.n	800a5b8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800a5b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a5b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d10b      	bne.n	800a5d8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800a5c0:	4b8e      	ldr	r3, [pc, #568]	@ (800a7fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a5c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a5c4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800a5c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a5cc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a5d0:	4a8a      	ldr	r2, [pc, #552]	@ (800a7fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a5d2:	430b      	orrs	r3, r1
 800a5d4:	6593      	str	r3, [r2, #88]	@ 0x58
 800a5d6:	e003      	b.n	800a5e0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a5dc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800a5e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a5e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5e8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800a5ec:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800a5f6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800a5fa:	460b      	mov	r3, r1
 800a5fc:	4313      	orrs	r3, r2
 800a5fe:	d03a      	beq.n	800a676 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800a600:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a604:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a606:	2b30      	cmp	r3, #48	@ 0x30
 800a608:	d01f      	beq.n	800a64a <HAL_RCCEx_PeriphCLKConfig+0x416>
 800a60a:	2b30      	cmp	r3, #48	@ 0x30
 800a60c:	d819      	bhi.n	800a642 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800a60e:	2b20      	cmp	r3, #32
 800a610:	d00c      	beq.n	800a62c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800a612:	2b20      	cmp	r3, #32
 800a614:	d815      	bhi.n	800a642 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800a616:	2b00      	cmp	r3, #0
 800a618:	d019      	beq.n	800a64e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800a61a:	2b10      	cmp	r3, #16
 800a61c:	d111      	bne.n	800a642 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a61e:	4b77      	ldr	r3, [pc, #476]	@ (800a7fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a622:	4a76      	ldr	r2, [pc, #472]	@ (800a7fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a624:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a628:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800a62a:	e011      	b.n	800a650 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a62c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a630:	3308      	adds	r3, #8
 800a632:	2102      	movs	r1, #2
 800a634:	4618      	mov	r0, r3
 800a636:	f002 f997 	bl	800c968 <RCCEx_PLL2_Config>
 800a63a:	4603      	mov	r3, r0
 800a63c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800a640:	e006      	b.n	800a650 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a642:	2301      	movs	r3, #1
 800a644:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a648:	e002      	b.n	800a650 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800a64a:	bf00      	nop
 800a64c:	e000      	b.n	800a650 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800a64e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a650:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a654:	2b00      	cmp	r3, #0
 800a656:	d10a      	bne.n	800a66e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800a658:	4b68      	ldr	r3, [pc, #416]	@ (800a7fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a65a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a65c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800a660:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a664:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a666:	4a65      	ldr	r2, [pc, #404]	@ (800a7fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a668:	430b      	orrs	r3, r1
 800a66a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a66c:	e003      	b.n	800a676 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a66e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a672:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a676:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a67a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a67e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800a682:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a686:	2300      	movs	r3, #0
 800a688:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800a68c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800a690:	460b      	mov	r3, r1
 800a692:	4313      	orrs	r3, r2
 800a694:	d051      	beq.n	800a73a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800a696:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a69a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a69c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a6a0:	d035      	beq.n	800a70e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800a6a2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a6a6:	d82e      	bhi.n	800a706 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800a6a8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a6ac:	d031      	beq.n	800a712 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800a6ae:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a6b2:	d828      	bhi.n	800a706 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800a6b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a6b8:	d01a      	beq.n	800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800a6ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a6be:	d822      	bhi.n	800a706 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d003      	beq.n	800a6cc <HAL_RCCEx_PeriphCLKConfig+0x498>
 800a6c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a6c8:	d007      	beq.n	800a6da <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800a6ca:	e01c      	b.n	800a706 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a6cc:	4b4b      	ldr	r3, [pc, #300]	@ (800a7fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a6ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6d0:	4a4a      	ldr	r2, [pc, #296]	@ (800a7fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a6d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a6d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a6d8:	e01c      	b.n	800a714 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a6da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a6de:	3308      	adds	r3, #8
 800a6e0:	2100      	movs	r1, #0
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	f002 f940 	bl	800c968 <RCCEx_PLL2_Config>
 800a6e8:	4603      	mov	r3, r0
 800a6ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a6ee:	e011      	b.n	800a714 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a6f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a6f4:	3328      	adds	r3, #40	@ 0x28
 800a6f6:	2100      	movs	r1, #0
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	f002 f9e7 	bl	800cacc <RCCEx_PLL3_Config>
 800a6fe:	4603      	mov	r3, r0
 800a700:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a704:	e006      	b.n	800a714 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a706:	2301      	movs	r3, #1
 800a708:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a70c:	e002      	b.n	800a714 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800a70e:	bf00      	nop
 800a710:	e000      	b.n	800a714 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800a712:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a714:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d10a      	bne.n	800a732 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a71c:	4b37      	ldr	r3, [pc, #220]	@ (800a7fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a71e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a720:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800a724:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a728:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a72a:	4a34      	ldr	r2, [pc, #208]	@ (800a7fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a72c:	430b      	orrs	r3, r1
 800a72e:	6513      	str	r3, [r2, #80]	@ 0x50
 800a730:	e003      	b.n	800a73a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a732:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a736:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a73a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a73e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a742:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800a746:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a74a:	2300      	movs	r3, #0
 800a74c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a750:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800a754:	460b      	mov	r3, r1
 800a756:	4313      	orrs	r3, r2
 800a758:	d056      	beq.n	800a808 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800a75a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a75e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a760:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a764:	d033      	beq.n	800a7ce <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800a766:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a76a:	d82c      	bhi.n	800a7c6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a76c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a770:	d02f      	beq.n	800a7d2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800a772:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a776:	d826      	bhi.n	800a7c6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a778:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a77c:	d02b      	beq.n	800a7d6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800a77e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a782:	d820      	bhi.n	800a7c6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a784:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a788:	d012      	beq.n	800a7b0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800a78a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a78e:	d81a      	bhi.n	800a7c6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a790:	2b00      	cmp	r3, #0
 800a792:	d022      	beq.n	800a7da <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800a794:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a798:	d115      	bne.n	800a7c6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a79a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a79e:	3308      	adds	r3, #8
 800a7a0:	2101      	movs	r1, #1
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	f002 f8e0 	bl	800c968 <RCCEx_PLL2_Config>
 800a7a8:	4603      	mov	r3, r0
 800a7aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a7ae:	e015      	b.n	800a7dc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a7b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a7b4:	3328      	adds	r3, #40	@ 0x28
 800a7b6:	2101      	movs	r1, #1
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	f002 f987 	bl	800cacc <RCCEx_PLL3_Config>
 800a7be:	4603      	mov	r3, r0
 800a7c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a7c4:	e00a      	b.n	800a7dc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a7c6:	2301      	movs	r3, #1
 800a7c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a7cc:	e006      	b.n	800a7dc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a7ce:	bf00      	nop
 800a7d0:	e004      	b.n	800a7dc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a7d2:	bf00      	nop
 800a7d4:	e002      	b.n	800a7dc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a7d6:	bf00      	nop
 800a7d8:	e000      	b.n	800a7dc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a7da:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a7dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d10d      	bne.n	800a800 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a7e4:	4b05      	ldr	r3, [pc, #20]	@ (800a7fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a7e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a7e8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800a7ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a7f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a7f2:	4a02      	ldr	r2, [pc, #8]	@ (800a7fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a7f4:	430b      	orrs	r3, r1
 800a7f6:	6513      	str	r3, [r2, #80]	@ 0x50
 800a7f8:	e006      	b.n	800a808 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800a7fa:	bf00      	nop
 800a7fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a800:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a804:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a808:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a80c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a810:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800a814:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a818:	2300      	movs	r3, #0
 800a81a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a81e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800a822:	460b      	mov	r3, r1
 800a824:	4313      	orrs	r3, r2
 800a826:	d055      	beq.n	800a8d4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800a828:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a82c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a830:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a834:	d033      	beq.n	800a89e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800a836:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a83a:	d82c      	bhi.n	800a896 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a83c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a840:	d02f      	beq.n	800a8a2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800a842:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a846:	d826      	bhi.n	800a896 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a848:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a84c:	d02b      	beq.n	800a8a6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800a84e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a852:	d820      	bhi.n	800a896 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a854:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a858:	d012      	beq.n	800a880 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800a85a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a85e:	d81a      	bhi.n	800a896 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a860:	2b00      	cmp	r3, #0
 800a862:	d022      	beq.n	800a8aa <HAL_RCCEx_PeriphCLKConfig+0x676>
 800a864:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a868:	d115      	bne.n	800a896 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a86a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a86e:	3308      	adds	r3, #8
 800a870:	2101      	movs	r1, #1
 800a872:	4618      	mov	r0, r3
 800a874:	f002 f878 	bl	800c968 <RCCEx_PLL2_Config>
 800a878:	4603      	mov	r3, r0
 800a87a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a87e:	e015      	b.n	800a8ac <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a880:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a884:	3328      	adds	r3, #40	@ 0x28
 800a886:	2101      	movs	r1, #1
 800a888:	4618      	mov	r0, r3
 800a88a:	f002 f91f 	bl	800cacc <RCCEx_PLL3_Config>
 800a88e:	4603      	mov	r3, r0
 800a890:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a894:	e00a      	b.n	800a8ac <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800a896:	2301      	movs	r3, #1
 800a898:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a89c:	e006      	b.n	800a8ac <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a89e:	bf00      	nop
 800a8a0:	e004      	b.n	800a8ac <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a8a2:	bf00      	nop
 800a8a4:	e002      	b.n	800a8ac <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a8a6:	bf00      	nop
 800a8a8:	e000      	b.n	800a8ac <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a8aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a8ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d10b      	bne.n	800a8cc <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a8b4:	4ba3      	ldr	r3, [pc, #652]	@ (800ab44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a8b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a8b8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800a8bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a8c0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a8c4:	4a9f      	ldr	r2, [pc, #636]	@ (800ab44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a8c6:	430b      	orrs	r3, r1
 800a8c8:	6593      	str	r3, [r2, #88]	@ 0x58
 800a8ca:	e003      	b.n	800a8d4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a8d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a8d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a8d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8dc:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800a8e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a8ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a8ee:	460b      	mov	r3, r1
 800a8f0:	4313      	orrs	r3, r2
 800a8f2:	d037      	beq.n	800a964 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800a8f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a8f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a8fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a8fe:	d00e      	beq.n	800a91e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800a900:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a904:	d816      	bhi.n	800a934 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800a906:	2b00      	cmp	r3, #0
 800a908:	d018      	beq.n	800a93c <HAL_RCCEx_PeriphCLKConfig+0x708>
 800a90a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a90e:	d111      	bne.n	800a934 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a910:	4b8c      	ldr	r3, [pc, #560]	@ (800ab44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a914:	4a8b      	ldr	r2, [pc, #556]	@ (800ab44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a916:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a91a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a91c:	e00f      	b.n	800a93e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a91e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a922:	3308      	adds	r3, #8
 800a924:	2101      	movs	r1, #1
 800a926:	4618      	mov	r0, r3
 800a928:	f002 f81e 	bl	800c968 <RCCEx_PLL2_Config>
 800a92c:	4603      	mov	r3, r0
 800a92e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a932:	e004      	b.n	800a93e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a934:	2301      	movs	r3, #1
 800a936:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a93a:	e000      	b.n	800a93e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800a93c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a93e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a942:	2b00      	cmp	r3, #0
 800a944:	d10a      	bne.n	800a95c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a946:	4b7f      	ldr	r3, [pc, #508]	@ (800ab44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a948:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a94a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800a94e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a952:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a954:	4a7b      	ldr	r2, [pc, #492]	@ (800ab44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a956:	430b      	orrs	r3, r1
 800a958:	6513      	str	r3, [r2, #80]	@ 0x50
 800a95a:	e003      	b.n	800a964 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a95c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a960:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a964:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a96c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800a970:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a974:	2300      	movs	r3, #0
 800a976:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800a97a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800a97e:	460b      	mov	r3, r1
 800a980:	4313      	orrs	r3, r2
 800a982:	d039      	beq.n	800a9f8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800a984:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a988:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a98a:	2b03      	cmp	r3, #3
 800a98c:	d81c      	bhi.n	800a9c8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800a98e:	a201      	add	r2, pc, #4	@ (adr r2, 800a994 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800a990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a994:	0800a9d1 	.word	0x0800a9d1
 800a998:	0800a9a5 	.word	0x0800a9a5
 800a99c:	0800a9b3 	.word	0x0800a9b3
 800a9a0:	0800a9d1 	.word	0x0800a9d1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a9a4:	4b67      	ldr	r3, [pc, #412]	@ (800ab44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a9a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9a8:	4a66      	ldr	r2, [pc, #408]	@ (800ab44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a9aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a9ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a9b0:	e00f      	b.n	800a9d2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a9b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a9b6:	3308      	adds	r3, #8
 800a9b8:	2102      	movs	r1, #2
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	f001 ffd4 	bl	800c968 <RCCEx_PLL2_Config>
 800a9c0:	4603      	mov	r3, r0
 800a9c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a9c6:	e004      	b.n	800a9d2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a9c8:	2301      	movs	r3, #1
 800a9ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a9ce:	e000      	b.n	800a9d2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800a9d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a9d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d10a      	bne.n	800a9f0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a9da:	4b5a      	ldr	r3, [pc, #360]	@ (800ab44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a9dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a9de:	f023 0103 	bic.w	r1, r3, #3
 800a9e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a9e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a9e8:	4a56      	ldr	r2, [pc, #344]	@ (800ab44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a9ea:	430b      	orrs	r3, r1
 800a9ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a9ee:	e003      	b.n	800a9f8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a9f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a9f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a9fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa00:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800aa04:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800aa08:	2300      	movs	r3, #0
 800aa0a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800aa0e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800aa12:	460b      	mov	r3, r1
 800aa14:	4313      	orrs	r3, r2
 800aa16:	f000 809f 	beq.w	800ab58 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800aa1a:	4b4b      	ldr	r3, [pc, #300]	@ (800ab48 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	4a4a      	ldr	r2, [pc, #296]	@ (800ab48 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800aa20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800aa24:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800aa26:	f7f7 fe9f 	bl	8002768 <HAL_GetTick>
 800aa2a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800aa2e:	e00b      	b.n	800aa48 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aa30:	f7f7 fe9a 	bl	8002768 <HAL_GetTick>
 800aa34:	4602      	mov	r2, r0
 800aa36:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800aa3a:	1ad3      	subs	r3, r2, r3
 800aa3c:	2b64      	cmp	r3, #100	@ 0x64
 800aa3e:	d903      	bls.n	800aa48 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800aa40:	2303      	movs	r3, #3
 800aa42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800aa46:	e005      	b.n	800aa54 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800aa48:	4b3f      	ldr	r3, [pc, #252]	@ (800ab48 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d0ed      	beq.n	800aa30 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800aa54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d179      	bne.n	800ab50 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800aa5c:	4b39      	ldr	r3, [pc, #228]	@ (800ab44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800aa5e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800aa60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa64:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800aa68:	4053      	eors	r3, r2
 800aa6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d015      	beq.n	800aa9e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800aa72:	4b34      	ldr	r3, [pc, #208]	@ (800ab44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800aa74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aa76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800aa7a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800aa7e:	4b31      	ldr	r3, [pc, #196]	@ (800ab44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800aa80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aa82:	4a30      	ldr	r2, [pc, #192]	@ (800ab44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800aa84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800aa88:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800aa8a:	4b2e      	ldr	r3, [pc, #184]	@ (800ab44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800aa8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aa8e:	4a2d      	ldr	r2, [pc, #180]	@ (800ab44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800aa90:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800aa94:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800aa96:	4a2b      	ldr	r2, [pc, #172]	@ (800ab44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800aa98:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800aa9c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800aa9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aaa2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800aaa6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aaaa:	d118      	bne.n	800aade <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aaac:	f7f7 fe5c 	bl	8002768 <HAL_GetTick>
 800aab0:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800aab4:	e00d      	b.n	800aad2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aab6:	f7f7 fe57 	bl	8002768 <HAL_GetTick>
 800aaba:	4602      	mov	r2, r0
 800aabc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800aac0:	1ad2      	subs	r2, r2, r3
 800aac2:	f241 3388 	movw	r3, #5000	@ 0x1388
 800aac6:	429a      	cmp	r2, r3
 800aac8:	d903      	bls.n	800aad2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800aaca:	2303      	movs	r3, #3
 800aacc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800aad0:	e005      	b.n	800aade <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800aad2:	4b1c      	ldr	r3, [pc, #112]	@ (800ab44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800aad4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aad6:	f003 0302 	and.w	r3, r3, #2
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d0eb      	beq.n	800aab6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800aade:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d129      	bne.n	800ab3a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800aae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aaea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800aaee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800aaf2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800aaf6:	d10e      	bne.n	800ab16 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800aaf8:	4b12      	ldr	r3, [pc, #72]	@ (800ab44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800aafa:	691b      	ldr	r3, [r3, #16]
 800aafc:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800ab00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab04:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ab08:	091a      	lsrs	r2, r3, #4
 800ab0a:	4b10      	ldr	r3, [pc, #64]	@ (800ab4c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800ab0c:	4013      	ands	r3, r2
 800ab0e:	4a0d      	ldr	r2, [pc, #52]	@ (800ab44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ab10:	430b      	orrs	r3, r1
 800ab12:	6113      	str	r3, [r2, #16]
 800ab14:	e005      	b.n	800ab22 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800ab16:	4b0b      	ldr	r3, [pc, #44]	@ (800ab44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ab18:	691b      	ldr	r3, [r3, #16]
 800ab1a:	4a0a      	ldr	r2, [pc, #40]	@ (800ab44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ab1c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800ab20:	6113      	str	r3, [r2, #16]
 800ab22:	4b08      	ldr	r3, [pc, #32]	@ (800ab44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ab24:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800ab26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab2a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ab2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ab32:	4a04      	ldr	r2, [pc, #16]	@ (800ab44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ab34:	430b      	orrs	r3, r1
 800ab36:	6713      	str	r3, [r2, #112]	@ 0x70
 800ab38:	e00e      	b.n	800ab58 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800ab3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ab3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800ab42:	e009      	b.n	800ab58 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800ab44:	58024400 	.word	0x58024400
 800ab48:	58024800 	.word	0x58024800
 800ab4c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ab54:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800ab58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab60:	f002 0301 	and.w	r3, r2, #1
 800ab64:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ab68:	2300      	movs	r3, #0
 800ab6a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ab6e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800ab72:	460b      	mov	r3, r1
 800ab74:	4313      	orrs	r3, r2
 800ab76:	f000 8089 	beq.w	800ac8c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800ab7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab7e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ab80:	2b28      	cmp	r3, #40	@ 0x28
 800ab82:	d86b      	bhi.n	800ac5c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800ab84:	a201      	add	r2, pc, #4	@ (adr r2, 800ab8c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800ab86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab8a:	bf00      	nop
 800ab8c:	0800ac65 	.word	0x0800ac65
 800ab90:	0800ac5d 	.word	0x0800ac5d
 800ab94:	0800ac5d 	.word	0x0800ac5d
 800ab98:	0800ac5d 	.word	0x0800ac5d
 800ab9c:	0800ac5d 	.word	0x0800ac5d
 800aba0:	0800ac5d 	.word	0x0800ac5d
 800aba4:	0800ac5d 	.word	0x0800ac5d
 800aba8:	0800ac5d 	.word	0x0800ac5d
 800abac:	0800ac31 	.word	0x0800ac31
 800abb0:	0800ac5d 	.word	0x0800ac5d
 800abb4:	0800ac5d 	.word	0x0800ac5d
 800abb8:	0800ac5d 	.word	0x0800ac5d
 800abbc:	0800ac5d 	.word	0x0800ac5d
 800abc0:	0800ac5d 	.word	0x0800ac5d
 800abc4:	0800ac5d 	.word	0x0800ac5d
 800abc8:	0800ac5d 	.word	0x0800ac5d
 800abcc:	0800ac47 	.word	0x0800ac47
 800abd0:	0800ac5d 	.word	0x0800ac5d
 800abd4:	0800ac5d 	.word	0x0800ac5d
 800abd8:	0800ac5d 	.word	0x0800ac5d
 800abdc:	0800ac5d 	.word	0x0800ac5d
 800abe0:	0800ac5d 	.word	0x0800ac5d
 800abe4:	0800ac5d 	.word	0x0800ac5d
 800abe8:	0800ac5d 	.word	0x0800ac5d
 800abec:	0800ac65 	.word	0x0800ac65
 800abf0:	0800ac5d 	.word	0x0800ac5d
 800abf4:	0800ac5d 	.word	0x0800ac5d
 800abf8:	0800ac5d 	.word	0x0800ac5d
 800abfc:	0800ac5d 	.word	0x0800ac5d
 800ac00:	0800ac5d 	.word	0x0800ac5d
 800ac04:	0800ac5d 	.word	0x0800ac5d
 800ac08:	0800ac5d 	.word	0x0800ac5d
 800ac0c:	0800ac65 	.word	0x0800ac65
 800ac10:	0800ac5d 	.word	0x0800ac5d
 800ac14:	0800ac5d 	.word	0x0800ac5d
 800ac18:	0800ac5d 	.word	0x0800ac5d
 800ac1c:	0800ac5d 	.word	0x0800ac5d
 800ac20:	0800ac5d 	.word	0x0800ac5d
 800ac24:	0800ac5d 	.word	0x0800ac5d
 800ac28:	0800ac5d 	.word	0x0800ac5d
 800ac2c:	0800ac65 	.word	0x0800ac65
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ac30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac34:	3308      	adds	r3, #8
 800ac36:	2101      	movs	r1, #1
 800ac38:	4618      	mov	r0, r3
 800ac3a:	f001 fe95 	bl	800c968 <RCCEx_PLL2_Config>
 800ac3e:	4603      	mov	r3, r0
 800ac40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800ac44:	e00f      	b.n	800ac66 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ac46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac4a:	3328      	adds	r3, #40	@ 0x28
 800ac4c:	2101      	movs	r1, #1
 800ac4e:	4618      	mov	r0, r3
 800ac50:	f001 ff3c 	bl	800cacc <RCCEx_PLL3_Config>
 800ac54:	4603      	mov	r3, r0
 800ac56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800ac5a:	e004      	b.n	800ac66 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ac5c:	2301      	movs	r3, #1
 800ac5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ac62:	e000      	b.n	800ac66 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800ac64:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d10a      	bne.n	800ac84 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800ac6e:	4bbf      	ldr	r3, [pc, #764]	@ (800af6c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ac70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac72:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800ac76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac7a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ac7c:	4abb      	ldr	r2, [pc, #748]	@ (800af6c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ac7e:	430b      	orrs	r3, r1
 800ac80:	6553      	str	r3, [r2, #84]	@ 0x54
 800ac82:	e003      	b.n	800ac8c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ac88:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800ac8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac94:	f002 0302 	and.w	r3, r2, #2
 800ac98:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800aca2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800aca6:	460b      	mov	r3, r1
 800aca8:	4313      	orrs	r3, r2
 800acaa:	d041      	beq.n	800ad30 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800acac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800acb0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800acb2:	2b05      	cmp	r3, #5
 800acb4:	d824      	bhi.n	800ad00 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800acb6:	a201      	add	r2, pc, #4	@ (adr r2, 800acbc <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800acb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acbc:	0800ad09 	.word	0x0800ad09
 800acc0:	0800acd5 	.word	0x0800acd5
 800acc4:	0800aceb 	.word	0x0800aceb
 800acc8:	0800ad09 	.word	0x0800ad09
 800accc:	0800ad09 	.word	0x0800ad09
 800acd0:	0800ad09 	.word	0x0800ad09
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800acd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800acd8:	3308      	adds	r3, #8
 800acda:	2101      	movs	r1, #1
 800acdc:	4618      	mov	r0, r3
 800acde:	f001 fe43 	bl	800c968 <RCCEx_PLL2_Config>
 800ace2:	4603      	mov	r3, r0
 800ace4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800ace8:	e00f      	b.n	800ad0a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800acea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800acee:	3328      	adds	r3, #40	@ 0x28
 800acf0:	2101      	movs	r1, #1
 800acf2:	4618      	mov	r0, r3
 800acf4:	f001 feea 	bl	800cacc <RCCEx_PLL3_Config>
 800acf8:	4603      	mov	r3, r0
 800acfa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800acfe:	e004      	b.n	800ad0a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ad00:	2301      	movs	r3, #1
 800ad02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ad06:	e000      	b.n	800ad0a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800ad08:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d10a      	bne.n	800ad28 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800ad12:	4b96      	ldr	r3, [pc, #600]	@ (800af6c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ad14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad16:	f023 0107 	bic.w	r1, r3, #7
 800ad1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad1e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ad20:	4a92      	ldr	r2, [pc, #584]	@ (800af6c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ad22:	430b      	orrs	r3, r1
 800ad24:	6553      	str	r3, [r2, #84]	@ 0x54
 800ad26:	e003      	b.n	800ad30 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ad2c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800ad30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad38:	f002 0304 	and.w	r3, r2, #4
 800ad3c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ad40:	2300      	movs	r3, #0
 800ad42:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ad46:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800ad4a:	460b      	mov	r3, r1
 800ad4c:	4313      	orrs	r3, r2
 800ad4e:	d044      	beq.n	800adda <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800ad50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad54:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ad58:	2b05      	cmp	r3, #5
 800ad5a:	d825      	bhi.n	800ada8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800ad5c:	a201      	add	r2, pc, #4	@ (adr r2, 800ad64 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800ad5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad62:	bf00      	nop
 800ad64:	0800adb1 	.word	0x0800adb1
 800ad68:	0800ad7d 	.word	0x0800ad7d
 800ad6c:	0800ad93 	.word	0x0800ad93
 800ad70:	0800adb1 	.word	0x0800adb1
 800ad74:	0800adb1 	.word	0x0800adb1
 800ad78:	0800adb1 	.word	0x0800adb1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ad7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad80:	3308      	adds	r3, #8
 800ad82:	2101      	movs	r1, #1
 800ad84:	4618      	mov	r0, r3
 800ad86:	f001 fdef 	bl	800c968 <RCCEx_PLL2_Config>
 800ad8a:	4603      	mov	r3, r0
 800ad8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800ad90:	e00f      	b.n	800adb2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ad92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad96:	3328      	adds	r3, #40	@ 0x28
 800ad98:	2101      	movs	r1, #1
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	f001 fe96 	bl	800cacc <RCCEx_PLL3_Config>
 800ada0:	4603      	mov	r3, r0
 800ada2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800ada6:	e004      	b.n	800adb2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ada8:	2301      	movs	r3, #1
 800adaa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800adae:	e000      	b.n	800adb2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800adb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800adb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d10b      	bne.n	800add2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800adba:	4b6c      	ldr	r3, [pc, #432]	@ (800af6c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800adbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800adbe:	f023 0107 	bic.w	r1, r3, #7
 800adc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800adc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800adca:	4a68      	ldr	r2, [pc, #416]	@ (800af6c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800adcc:	430b      	orrs	r3, r1
 800adce:	6593      	str	r3, [r2, #88]	@ 0x58
 800add0:	e003      	b.n	800adda <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800add2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800add6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800adda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800adde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ade2:	f002 0320 	and.w	r3, r2, #32
 800ade6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800adea:	2300      	movs	r3, #0
 800adec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800adf0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800adf4:	460b      	mov	r3, r1
 800adf6:	4313      	orrs	r3, r2
 800adf8:	d055      	beq.n	800aea6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800adfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800adfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ae02:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ae06:	d033      	beq.n	800ae70 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800ae08:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ae0c:	d82c      	bhi.n	800ae68 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800ae0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ae12:	d02f      	beq.n	800ae74 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800ae14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ae18:	d826      	bhi.n	800ae68 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800ae1a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ae1e:	d02b      	beq.n	800ae78 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800ae20:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ae24:	d820      	bhi.n	800ae68 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800ae26:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ae2a:	d012      	beq.n	800ae52 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800ae2c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ae30:	d81a      	bhi.n	800ae68 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d022      	beq.n	800ae7c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800ae36:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ae3a:	d115      	bne.n	800ae68 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ae3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ae40:	3308      	adds	r3, #8
 800ae42:	2100      	movs	r1, #0
 800ae44:	4618      	mov	r0, r3
 800ae46:	f001 fd8f 	bl	800c968 <RCCEx_PLL2_Config>
 800ae4a:	4603      	mov	r3, r0
 800ae4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800ae50:	e015      	b.n	800ae7e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ae52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ae56:	3328      	adds	r3, #40	@ 0x28
 800ae58:	2102      	movs	r1, #2
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	f001 fe36 	bl	800cacc <RCCEx_PLL3_Config>
 800ae60:	4603      	mov	r3, r0
 800ae62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800ae66:	e00a      	b.n	800ae7e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ae68:	2301      	movs	r3, #1
 800ae6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ae6e:	e006      	b.n	800ae7e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800ae70:	bf00      	nop
 800ae72:	e004      	b.n	800ae7e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800ae74:	bf00      	nop
 800ae76:	e002      	b.n	800ae7e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800ae78:	bf00      	nop
 800ae7a:	e000      	b.n	800ae7e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800ae7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d10b      	bne.n	800ae9e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800ae86:	4b39      	ldr	r3, [pc, #228]	@ (800af6c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ae88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae8a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800ae8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ae92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ae96:	4a35      	ldr	r2, [pc, #212]	@ (800af6c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ae98:	430b      	orrs	r3, r1
 800ae9a:	6553      	str	r3, [r2, #84]	@ 0x54
 800ae9c:	e003      	b.n	800aea6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aea2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800aea6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aeaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeae:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800aeb2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800aebc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800aec0:	460b      	mov	r3, r1
 800aec2:	4313      	orrs	r3, r2
 800aec4:	d058      	beq.n	800af78 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800aec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aeca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800aece:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800aed2:	d033      	beq.n	800af3c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800aed4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800aed8:	d82c      	bhi.n	800af34 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800aeda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aede:	d02f      	beq.n	800af40 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800aee0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aee4:	d826      	bhi.n	800af34 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800aee6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800aeea:	d02b      	beq.n	800af44 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800aeec:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800aef0:	d820      	bhi.n	800af34 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800aef2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800aef6:	d012      	beq.n	800af1e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800aef8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800aefc:	d81a      	bhi.n	800af34 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d022      	beq.n	800af48 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800af02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800af06:	d115      	bne.n	800af34 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800af08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800af0c:	3308      	adds	r3, #8
 800af0e:	2100      	movs	r1, #0
 800af10:	4618      	mov	r0, r3
 800af12:	f001 fd29 	bl	800c968 <RCCEx_PLL2_Config>
 800af16:	4603      	mov	r3, r0
 800af18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800af1c:	e015      	b.n	800af4a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800af1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800af22:	3328      	adds	r3, #40	@ 0x28
 800af24:	2102      	movs	r1, #2
 800af26:	4618      	mov	r0, r3
 800af28:	f001 fdd0 	bl	800cacc <RCCEx_PLL3_Config>
 800af2c:	4603      	mov	r3, r0
 800af2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800af32:	e00a      	b.n	800af4a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800af34:	2301      	movs	r3, #1
 800af36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800af3a:	e006      	b.n	800af4a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800af3c:	bf00      	nop
 800af3e:	e004      	b.n	800af4a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800af40:	bf00      	nop
 800af42:	e002      	b.n	800af4a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800af44:	bf00      	nop
 800af46:	e000      	b.n	800af4a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800af48:	bf00      	nop
    }

    if (ret == HAL_OK)
 800af4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d10e      	bne.n	800af70 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800af52:	4b06      	ldr	r3, [pc, #24]	@ (800af6c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800af54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800af56:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800af5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800af5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800af62:	4a02      	ldr	r2, [pc, #8]	@ (800af6c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800af64:	430b      	orrs	r3, r1
 800af66:	6593      	str	r3, [r2, #88]	@ 0x58
 800af68:	e006      	b.n	800af78 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800af6a:	bf00      	nop
 800af6c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800af74:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800af78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800af7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af80:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800af84:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800af88:	2300      	movs	r3, #0
 800af8a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800af8e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800af92:	460b      	mov	r3, r1
 800af94:	4313      	orrs	r3, r2
 800af96:	d055      	beq.n	800b044 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800af98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800af9c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800afa0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800afa4:	d033      	beq.n	800b00e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800afa6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800afaa:	d82c      	bhi.n	800b006 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800afac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800afb0:	d02f      	beq.n	800b012 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800afb2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800afb6:	d826      	bhi.n	800b006 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800afb8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800afbc:	d02b      	beq.n	800b016 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800afbe:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800afc2:	d820      	bhi.n	800b006 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800afc4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800afc8:	d012      	beq.n	800aff0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800afca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800afce:	d81a      	bhi.n	800b006 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d022      	beq.n	800b01a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800afd4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800afd8:	d115      	bne.n	800b006 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800afda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800afde:	3308      	adds	r3, #8
 800afe0:	2100      	movs	r1, #0
 800afe2:	4618      	mov	r0, r3
 800afe4:	f001 fcc0 	bl	800c968 <RCCEx_PLL2_Config>
 800afe8:	4603      	mov	r3, r0
 800afea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800afee:	e015      	b.n	800b01c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800aff0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aff4:	3328      	adds	r3, #40	@ 0x28
 800aff6:	2102      	movs	r1, #2
 800aff8:	4618      	mov	r0, r3
 800affa:	f001 fd67 	bl	800cacc <RCCEx_PLL3_Config>
 800affe:	4603      	mov	r3, r0
 800b000:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b004:	e00a      	b.n	800b01c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b006:	2301      	movs	r3, #1
 800b008:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800b00c:	e006      	b.n	800b01c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b00e:	bf00      	nop
 800b010:	e004      	b.n	800b01c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b012:	bf00      	nop
 800b014:	e002      	b.n	800b01c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b016:	bf00      	nop
 800b018:	e000      	b.n	800b01c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b01a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b01c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b020:	2b00      	cmp	r3, #0
 800b022:	d10b      	bne.n	800b03c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b024:	4ba1      	ldr	r3, [pc, #644]	@ (800b2ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b026:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b028:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800b02c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b030:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b034:	4a9d      	ldr	r2, [pc, #628]	@ (800b2ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b036:	430b      	orrs	r3, r1
 800b038:	6593      	str	r3, [r2, #88]	@ 0x58
 800b03a:	e003      	b.n	800b044 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b03c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b040:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800b044:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b04c:	f002 0308 	and.w	r3, r2, #8
 800b050:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b054:	2300      	movs	r3, #0
 800b056:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b05a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800b05e:	460b      	mov	r3, r1
 800b060:	4313      	orrs	r3, r2
 800b062:	d01e      	beq.n	800b0a2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800b064:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b068:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b06c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b070:	d10c      	bne.n	800b08c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b072:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b076:	3328      	adds	r3, #40	@ 0x28
 800b078:	2102      	movs	r1, #2
 800b07a:	4618      	mov	r0, r3
 800b07c:	f001 fd26 	bl	800cacc <RCCEx_PLL3_Config>
 800b080:	4603      	mov	r3, r0
 800b082:	2b00      	cmp	r3, #0
 800b084:	d002      	beq.n	800b08c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800b086:	2301      	movs	r3, #1
 800b088:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800b08c:	4b87      	ldr	r3, [pc, #540]	@ (800b2ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b08e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b090:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b094:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b098:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b09c:	4a83      	ldr	r2, [pc, #524]	@ (800b2ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b09e:	430b      	orrs	r3, r1
 800b0a0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b0a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b0a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0aa:	f002 0310 	and.w	r3, r2, #16
 800b0ae:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b0b8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800b0bc:	460b      	mov	r3, r1
 800b0be:	4313      	orrs	r3, r2
 800b0c0:	d01e      	beq.n	800b100 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800b0c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b0c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b0ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b0ce:	d10c      	bne.n	800b0ea <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b0d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b0d4:	3328      	adds	r3, #40	@ 0x28
 800b0d6:	2102      	movs	r1, #2
 800b0d8:	4618      	mov	r0, r3
 800b0da:	f001 fcf7 	bl	800cacc <RCCEx_PLL3_Config>
 800b0de:	4603      	mov	r3, r0
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d002      	beq.n	800b0ea <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800b0e4:	2301      	movs	r3, #1
 800b0e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b0ea:	4b70      	ldr	r3, [pc, #448]	@ (800b2ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b0ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b0ee:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800b0f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b0f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b0fa:	4a6c      	ldr	r2, [pc, #432]	@ (800b2ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b0fc:	430b      	orrs	r3, r1
 800b0fe:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b100:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b104:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b108:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800b10c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b110:	2300      	movs	r3, #0
 800b112:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b116:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800b11a:	460b      	mov	r3, r1
 800b11c:	4313      	orrs	r3, r2
 800b11e:	d03e      	beq.n	800b19e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800b120:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b124:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b128:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b12c:	d022      	beq.n	800b174 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800b12e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b132:	d81b      	bhi.n	800b16c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800b134:	2b00      	cmp	r3, #0
 800b136:	d003      	beq.n	800b140 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800b138:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b13c:	d00b      	beq.n	800b156 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800b13e:	e015      	b.n	800b16c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b140:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b144:	3308      	adds	r3, #8
 800b146:	2100      	movs	r1, #0
 800b148:	4618      	mov	r0, r3
 800b14a:	f001 fc0d 	bl	800c968 <RCCEx_PLL2_Config>
 800b14e:	4603      	mov	r3, r0
 800b150:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b154:	e00f      	b.n	800b176 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b156:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b15a:	3328      	adds	r3, #40	@ 0x28
 800b15c:	2102      	movs	r1, #2
 800b15e:	4618      	mov	r0, r3
 800b160:	f001 fcb4 	bl	800cacc <RCCEx_PLL3_Config>
 800b164:	4603      	mov	r3, r0
 800b166:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b16a:	e004      	b.n	800b176 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b16c:	2301      	movs	r3, #1
 800b16e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800b172:	e000      	b.n	800b176 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800b174:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b176:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d10b      	bne.n	800b196 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b17e:	4b4b      	ldr	r3, [pc, #300]	@ (800b2ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b180:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b182:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800b186:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b18a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b18e:	4a47      	ldr	r2, [pc, #284]	@ (800b2ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b190:	430b      	orrs	r3, r1
 800b192:	6593      	str	r3, [r2, #88]	@ 0x58
 800b194:	e003      	b.n	800b19e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b196:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b19a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b19e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b1a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1a6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800b1aa:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b1b0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800b1b4:	460b      	mov	r3, r1
 800b1b6:	4313      	orrs	r3, r2
 800b1b8:	d03b      	beq.n	800b232 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800b1ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b1be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b1c2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b1c6:	d01f      	beq.n	800b208 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800b1c8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b1cc:	d818      	bhi.n	800b200 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800b1ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b1d2:	d003      	beq.n	800b1dc <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800b1d4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b1d8:	d007      	beq.n	800b1ea <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800b1da:	e011      	b.n	800b200 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b1dc:	4b33      	ldr	r3, [pc, #204]	@ (800b2ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b1de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1e0:	4a32      	ldr	r2, [pc, #200]	@ (800b2ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b1e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b1e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800b1e8:	e00f      	b.n	800b20a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b1ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b1ee:	3328      	adds	r3, #40	@ 0x28
 800b1f0:	2101      	movs	r1, #1
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	f001 fc6a 	bl	800cacc <RCCEx_PLL3_Config>
 800b1f8:	4603      	mov	r3, r0
 800b1fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800b1fe:	e004      	b.n	800b20a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b200:	2301      	movs	r3, #1
 800b202:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800b206:	e000      	b.n	800b20a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800b208:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b20a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d10b      	bne.n	800b22a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b212:	4b26      	ldr	r3, [pc, #152]	@ (800b2ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b214:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b216:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800b21a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b21e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b222:	4a22      	ldr	r2, [pc, #136]	@ (800b2ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b224:	430b      	orrs	r3, r1
 800b226:	6553      	str	r3, [r2, #84]	@ 0x54
 800b228:	e003      	b.n	800b232 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b22a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b22e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b232:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b23a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800b23e:	673b      	str	r3, [r7, #112]	@ 0x70
 800b240:	2300      	movs	r3, #0
 800b242:	677b      	str	r3, [r7, #116]	@ 0x74
 800b244:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800b248:	460b      	mov	r3, r1
 800b24a:	4313      	orrs	r3, r2
 800b24c:	d034      	beq.n	800b2b8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800b24e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b252:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b254:	2b00      	cmp	r3, #0
 800b256:	d003      	beq.n	800b260 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800b258:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b25c:	d007      	beq.n	800b26e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800b25e:	e011      	b.n	800b284 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b260:	4b12      	ldr	r3, [pc, #72]	@ (800b2ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b262:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b264:	4a11      	ldr	r2, [pc, #68]	@ (800b2ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b266:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b26a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b26c:	e00e      	b.n	800b28c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b26e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b272:	3308      	adds	r3, #8
 800b274:	2102      	movs	r1, #2
 800b276:	4618      	mov	r0, r3
 800b278:	f001 fb76 	bl	800c968 <RCCEx_PLL2_Config>
 800b27c:	4603      	mov	r3, r0
 800b27e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b282:	e003      	b.n	800b28c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800b284:	2301      	movs	r3, #1
 800b286:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800b28a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b28c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b290:	2b00      	cmp	r3, #0
 800b292:	d10d      	bne.n	800b2b0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b294:	4b05      	ldr	r3, [pc, #20]	@ (800b2ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b296:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b298:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b29c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b2a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b2a2:	4a02      	ldr	r2, [pc, #8]	@ (800b2ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b2a4:	430b      	orrs	r3, r1
 800b2a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800b2a8:	e006      	b.n	800b2b8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800b2aa:	bf00      	nop
 800b2ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b2b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b2b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b2bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2c0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800b2c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b2ca:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800b2ce:	460b      	mov	r3, r1
 800b2d0:	4313      	orrs	r3, r2
 800b2d2:	d00c      	beq.n	800b2ee <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b2d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b2d8:	3328      	adds	r3, #40	@ 0x28
 800b2da:	2102      	movs	r1, #2
 800b2dc:	4618      	mov	r0, r3
 800b2de:	f001 fbf5 	bl	800cacc <RCCEx_PLL3_Config>
 800b2e2:	4603      	mov	r3, r0
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d002      	beq.n	800b2ee <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800b2e8:	2301      	movs	r3, #1
 800b2ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b2ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b2f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2f6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800b2fa:	663b      	str	r3, [r7, #96]	@ 0x60
 800b2fc:	2300      	movs	r3, #0
 800b2fe:	667b      	str	r3, [r7, #100]	@ 0x64
 800b300:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800b304:	460b      	mov	r3, r1
 800b306:	4313      	orrs	r3, r2
 800b308:	d038      	beq.n	800b37c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800b30a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b30e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b312:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b316:	d018      	beq.n	800b34a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800b318:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b31c:	d811      	bhi.n	800b342 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800b31e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b322:	d014      	beq.n	800b34e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800b324:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b328:	d80b      	bhi.n	800b342 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d011      	beq.n	800b352 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800b32e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b332:	d106      	bne.n	800b342 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b334:	4bc3      	ldr	r3, [pc, #780]	@ (800b644 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b336:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b338:	4ac2      	ldr	r2, [pc, #776]	@ (800b644 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b33a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b33e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800b340:	e008      	b.n	800b354 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b342:	2301      	movs	r3, #1
 800b344:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800b348:	e004      	b.n	800b354 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800b34a:	bf00      	nop
 800b34c:	e002      	b.n	800b354 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800b34e:	bf00      	nop
 800b350:	e000      	b.n	800b354 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800b352:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b354:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d10b      	bne.n	800b374 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b35c:	4bb9      	ldr	r3, [pc, #740]	@ (800b644 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b35e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b360:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800b364:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b368:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b36c:	4ab5      	ldr	r2, [pc, #724]	@ (800b644 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b36e:	430b      	orrs	r3, r1
 800b370:	6553      	str	r3, [r2, #84]	@ 0x54
 800b372:	e003      	b.n	800b37c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b374:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b378:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b37c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b380:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b384:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800b388:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b38a:	2300      	movs	r3, #0
 800b38c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b38e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800b392:	460b      	mov	r3, r1
 800b394:	4313      	orrs	r3, r2
 800b396:	d009      	beq.n	800b3ac <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b398:	4baa      	ldr	r3, [pc, #680]	@ (800b644 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b39a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b39c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800b3a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b3a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b3a6:	4aa7      	ldr	r2, [pc, #668]	@ (800b644 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b3a8:	430b      	orrs	r3, r1
 800b3aa:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800b3ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b3b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3b4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800b3b8:	653b      	str	r3, [r7, #80]	@ 0x50
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	657b      	str	r3, [r7, #84]	@ 0x54
 800b3be:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800b3c2:	460b      	mov	r3, r1
 800b3c4:	4313      	orrs	r3, r2
 800b3c6:	d00a      	beq.n	800b3de <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800b3c8:	4b9e      	ldr	r3, [pc, #632]	@ (800b644 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b3ca:	691b      	ldr	r3, [r3, #16]
 800b3cc:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800b3d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b3d4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800b3d8:	4a9a      	ldr	r2, [pc, #616]	@ (800b644 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b3da:	430b      	orrs	r3, r1
 800b3dc:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b3de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b3e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3e6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800b3ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b3f0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800b3f4:	460b      	mov	r3, r1
 800b3f6:	4313      	orrs	r3, r2
 800b3f8:	d009      	beq.n	800b40e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b3fa:	4b92      	ldr	r3, [pc, #584]	@ (800b644 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b3fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b3fe:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800b402:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b406:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b408:	4a8e      	ldr	r2, [pc, #568]	@ (800b644 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b40a:	430b      	orrs	r3, r1
 800b40c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b40e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b412:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b416:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800b41a:	643b      	str	r3, [r7, #64]	@ 0x40
 800b41c:	2300      	movs	r3, #0
 800b41e:	647b      	str	r3, [r7, #68]	@ 0x44
 800b420:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800b424:	460b      	mov	r3, r1
 800b426:	4313      	orrs	r3, r2
 800b428:	d00e      	beq.n	800b448 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b42a:	4b86      	ldr	r3, [pc, #536]	@ (800b644 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b42c:	691b      	ldr	r3, [r3, #16]
 800b42e:	4a85      	ldr	r2, [pc, #532]	@ (800b644 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b430:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b434:	6113      	str	r3, [r2, #16]
 800b436:	4b83      	ldr	r3, [pc, #524]	@ (800b644 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b438:	6919      	ldr	r1, [r3, #16]
 800b43a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b43e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800b442:	4a80      	ldr	r2, [pc, #512]	@ (800b644 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b444:	430b      	orrs	r3, r1
 800b446:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b448:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b44c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b450:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800b454:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b456:	2300      	movs	r3, #0
 800b458:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b45a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800b45e:	460b      	mov	r3, r1
 800b460:	4313      	orrs	r3, r2
 800b462:	d009      	beq.n	800b478 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b464:	4b77      	ldr	r3, [pc, #476]	@ (800b644 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b466:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b468:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800b46c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b470:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b472:	4a74      	ldr	r2, [pc, #464]	@ (800b644 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b474:	430b      	orrs	r3, r1
 800b476:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b478:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b47c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b480:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800b484:	633b      	str	r3, [r7, #48]	@ 0x30
 800b486:	2300      	movs	r3, #0
 800b488:	637b      	str	r3, [r7, #52]	@ 0x34
 800b48a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800b48e:	460b      	mov	r3, r1
 800b490:	4313      	orrs	r3, r2
 800b492:	d00a      	beq.n	800b4aa <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b494:	4b6b      	ldr	r3, [pc, #428]	@ (800b644 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b496:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b498:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800b49c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b4a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b4a4:	4a67      	ldr	r2, [pc, #412]	@ (800b644 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b4a6:	430b      	orrs	r3, r1
 800b4a8:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800b4aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b4ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4b2:	2100      	movs	r1, #0
 800b4b4:	62b9      	str	r1, [r7, #40]	@ 0x28
 800b4b6:	f003 0301 	and.w	r3, r3, #1
 800b4ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b4bc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800b4c0:	460b      	mov	r3, r1
 800b4c2:	4313      	orrs	r3, r2
 800b4c4:	d011      	beq.n	800b4ea <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b4c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b4ca:	3308      	adds	r3, #8
 800b4cc:	2100      	movs	r1, #0
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	f001 fa4a 	bl	800c968 <RCCEx_PLL2_Config>
 800b4d4:	4603      	mov	r3, r0
 800b4d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800b4da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d003      	beq.n	800b4ea <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b4e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800b4ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b4ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4f2:	2100      	movs	r1, #0
 800b4f4:	6239      	str	r1, [r7, #32]
 800b4f6:	f003 0302 	and.w	r3, r3, #2
 800b4fa:	627b      	str	r3, [r7, #36]	@ 0x24
 800b4fc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800b500:	460b      	mov	r3, r1
 800b502:	4313      	orrs	r3, r2
 800b504:	d011      	beq.n	800b52a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b506:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b50a:	3308      	adds	r3, #8
 800b50c:	2101      	movs	r1, #1
 800b50e:	4618      	mov	r0, r3
 800b510:	f001 fa2a 	bl	800c968 <RCCEx_PLL2_Config>
 800b514:	4603      	mov	r3, r0
 800b516:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800b51a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d003      	beq.n	800b52a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b522:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b526:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800b52a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b52e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b532:	2100      	movs	r1, #0
 800b534:	61b9      	str	r1, [r7, #24]
 800b536:	f003 0304 	and.w	r3, r3, #4
 800b53a:	61fb      	str	r3, [r7, #28]
 800b53c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800b540:	460b      	mov	r3, r1
 800b542:	4313      	orrs	r3, r2
 800b544:	d011      	beq.n	800b56a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b546:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b54a:	3308      	adds	r3, #8
 800b54c:	2102      	movs	r1, #2
 800b54e:	4618      	mov	r0, r3
 800b550:	f001 fa0a 	bl	800c968 <RCCEx_PLL2_Config>
 800b554:	4603      	mov	r3, r0
 800b556:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800b55a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d003      	beq.n	800b56a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b562:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b566:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800b56a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b56e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b572:	2100      	movs	r1, #0
 800b574:	6139      	str	r1, [r7, #16]
 800b576:	f003 0308 	and.w	r3, r3, #8
 800b57a:	617b      	str	r3, [r7, #20]
 800b57c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800b580:	460b      	mov	r3, r1
 800b582:	4313      	orrs	r3, r2
 800b584:	d011      	beq.n	800b5aa <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b586:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b58a:	3328      	adds	r3, #40	@ 0x28
 800b58c:	2100      	movs	r1, #0
 800b58e:	4618      	mov	r0, r3
 800b590:	f001 fa9c 	bl	800cacc <RCCEx_PLL3_Config>
 800b594:	4603      	mov	r3, r0
 800b596:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800b59a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d003      	beq.n	800b5aa <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b5a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800b5aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b5ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5b2:	2100      	movs	r1, #0
 800b5b4:	60b9      	str	r1, [r7, #8]
 800b5b6:	f003 0310 	and.w	r3, r3, #16
 800b5ba:	60fb      	str	r3, [r7, #12]
 800b5bc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800b5c0:	460b      	mov	r3, r1
 800b5c2:	4313      	orrs	r3, r2
 800b5c4:	d011      	beq.n	800b5ea <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b5c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b5ca:	3328      	adds	r3, #40	@ 0x28
 800b5cc:	2101      	movs	r1, #1
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	f001 fa7c 	bl	800cacc <RCCEx_PLL3_Config>
 800b5d4:	4603      	mov	r3, r0
 800b5d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800b5da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d003      	beq.n	800b5ea <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b5e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800b5ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b5ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5f2:	2100      	movs	r1, #0
 800b5f4:	6039      	str	r1, [r7, #0]
 800b5f6:	f003 0320 	and.w	r3, r3, #32
 800b5fa:	607b      	str	r3, [r7, #4]
 800b5fc:	e9d7 1200 	ldrd	r1, r2, [r7]
 800b600:	460b      	mov	r3, r1
 800b602:	4313      	orrs	r3, r2
 800b604:	d011      	beq.n	800b62a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b606:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b60a:	3328      	adds	r3, #40	@ 0x28
 800b60c:	2102      	movs	r1, #2
 800b60e:	4618      	mov	r0, r3
 800b610:	f001 fa5c 	bl	800cacc <RCCEx_PLL3_Config>
 800b614:	4603      	mov	r3, r0
 800b616:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800b61a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d003      	beq.n	800b62a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b622:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b626:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800b62a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d101      	bne.n	800b636 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800b632:	2300      	movs	r3, #0
 800b634:	e000      	b.n	800b638 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800b636:	2301      	movs	r3, #1
}
 800b638:	4618      	mov	r0, r3
 800b63a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800b63e:	46bd      	mov	sp, r7
 800b640:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b644:	58024400 	.word	0x58024400

0800b648 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	b090      	sub	sp, #64	@ 0x40
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800b652:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b656:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800b65a:	430b      	orrs	r3, r1
 800b65c:	f040 8094 	bne.w	800b788 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800b660:	4b9e      	ldr	r3, [pc, #632]	@ (800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b662:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b664:	f003 0307 	and.w	r3, r3, #7
 800b668:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800b66a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b66c:	2b04      	cmp	r3, #4
 800b66e:	f200 8087 	bhi.w	800b780 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800b672:	a201      	add	r2, pc, #4	@ (adr r2, 800b678 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800b674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b678:	0800b68d 	.word	0x0800b68d
 800b67c:	0800b6b5 	.word	0x0800b6b5
 800b680:	0800b6dd 	.word	0x0800b6dd
 800b684:	0800b779 	.word	0x0800b779
 800b688:	0800b705 	.word	0x0800b705
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b68c:	4b93      	ldr	r3, [pc, #588]	@ (800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b694:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b698:	d108      	bne.n	800b6ac <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b69a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b69e:	4618      	mov	r0, r3
 800b6a0:	f001 f810 	bl	800c6c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b6a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b6a8:	f000 bd45 	b.w	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b6b0:	f000 bd41 	b.w	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b6b4:	4b89      	ldr	r3, [pc, #548]	@ (800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b6bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b6c0:	d108      	bne.n	800b6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b6c2:	f107 0318 	add.w	r3, r7, #24
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	f000 fd54 	bl	800c174 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b6cc:	69bb      	ldr	r3, [r7, #24]
 800b6ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b6d0:	f000 bd31 	b.w	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b6d8:	f000 bd2d 	b.w	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b6dc:	4b7f      	ldr	r3, [pc, #508]	@ (800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b6e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b6e8:	d108      	bne.n	800b6fc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b6ea:	f107 030c 	add.w	r3, r7, #12
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	f000 fe94 	bl	800c41c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b6f8:	f000 bd1d 	b.w	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b700:	f000 bd19 	b.w	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b704:	4b75      	ldr	r3, [pc, #468]	@ (800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b706:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b708:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b70c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b70e:	4b73      	ldr	r3, [pc, #460]	@ (800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	f003 0304 	and.w	r3, r3, #4
 800b716:	2b04      	cmp	r3, #4
 800b718:	d10c      	bne.n	800b734 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800b71a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d109      	bne.n	800b734 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b720:	4b6e      	ldr	r3, [pc, #440]	@ (800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	08db      	lsrs	r3, r3, #3
 800b726:	f003 0303 	and.w	r3, r3, #3
 800b72a:	4a6d      	ldr	r2, [pc, #436]	@ (800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b72c:	fa22 f303 	lsr.w	r3, r2, r3
 800b730:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b732:	e01f      	b.n	800b774 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b734:	4b69      	ldr	r3, [pc, #420]	@ (800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b73c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b740:	d106      	bne.n	800b750 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800b742:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b744:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b748:	d102      	bne.n	800b750 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b74a:	4b66      	ldr	r3, [pc, #408]	@ (800b8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800b74c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b74e:	e011      	b.n	800b774 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b750:	4b62      	ldr	r3, [pc, #392]	@ (800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b758:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b75c:	d106      	bne.n	800b76c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800b75e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b760:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b764:	d102      	bne.n	800b76c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b766:	4b60      	ldr	r3, [pc, #384]	@ (800b8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800b768:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b76a:	e003      	b.n	800b774 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b76c:	2300      	movs	r3, #0
 800b76e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b770:	f000 bce1 	b.w	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b774:	f000 bcdf 	b.w	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b778:	4b5c      	ldr	r3, [pc, #368]	@ (800b8ec <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800b77a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b77c:	f000 bcdb 	b.w	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b780:	2300      	movs	r3, #0
 800b782:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b784:	f000 bcd7 	b.w	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800b788:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b78c:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800b790:	430b      	orrs	r3, r1
 800b792:	f040 80ad 	bne.w	800b8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800b796:	4b51      	ldr	r3, [pc, #324]	@ (800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b798:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b79a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800b79e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800b7a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b7a6:	d056      	beq.n	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800b7a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b7ae:	f200 8090 	bhi.w	800b8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800b7b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7b4:	2bc0      	cmp	r3, #192	@ 0xc0
 800b7b6:	f000 8088 	beq.w	800b8ca <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800b7ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7bc:	2bc0      	cmp	r3, #192	@ 0xc0
 800b7be:	f200 8088 	bhi.w	800b8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800b7c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7c4:	2b80      	cmp	r3, #128	@ 0x80
 800b7c6:	d032      	beq.n	800b82e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800b7c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7ca:	2b80      	cmp	r3, #128	@ 0x80
 800b7cc:	f200 8081 	bhi.w	800b8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800b7d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d003      	beq.n	800b7de <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800b7d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7d8:	2b40      	cmp	r3, #64	@ 0x40
 800b7da:	d014      	beq.n	800b806 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800b7dc:	e079      	b.n	800b8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b7de:	4b3f      	ldr	r3, [pc, #252]	@ (800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b7e6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b7ea:	d108      	bne.n	800b7fe <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b7ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b7f0:	4618      	mov	r0, r3
 800b7f2:	f000 ff67 	bl	800c6c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b7f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b7fa:	f000 bc9c 	b.w	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b7fe:	2300      	movs	r3, #0
 800b800:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b802:	f000 bc98 	b.w	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b806:	4b35      	ldr	r3, [pc, #212]	@ (800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b80e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b812:	d108      	bne.n	800b826 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b814:	f107 0318 	add.w	r3, r7, #24
 800b818:	4618      	mov	r0, r3
 800b81a:	f000 fcab 	bl	800c174 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b81e:	69bb      	ldr	r3, [r7, #24]
 800b820:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b822:	f000 bc88 	b.w	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b826:	2300      	movs	r3, #0
 800b828:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b82a:	f000 bc84 	b.w	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b82e:	4b2b      	ldr	r3, [pc, #172]	@ (800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b836:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b83a:	d108      	bne.n	800b84e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b83c:	f107 030c 	add.w	r3, r7, #12
 800b840:	4618      	mov	r0, r3
 800b842:	f000 fdeb 	bl	800c41c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b84a:	f000 bc74 	b.w	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b84e:	2300      	movs	r3, #0
 800b850:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b852:	f000 bc70 	b.w	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b856:	4b21      	ldr	r3, [pc, #132]	@ (800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b858:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b85a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b85e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b860:	4b1e      	ldr	r3, [pc, #120]	@ (800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	f003 0304 	and.w	r3, r3, #4
 800b868:	2b04      	cmp	r3, #4
 800b86a:	d10c      	bne.n	800b886 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800b86c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d109      	bne.n	800b886 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b872:	4b1a      	ldr	r3, [pc, #104]	@ (800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	08db      	lsrs	r3, r3, #3
 800b878:	f003 0303 	and.w	r3, r3, #3
 800b87c:	4a18      	ldr	r2, [pc, #96]	@ (800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b87e:	fa22 f303 	lsr.w	r3, r2, r3
 800b882:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b884:	e01f      	b.n	800b8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b886:	4b15      	ldr	r3, [pc, #84]	@ (800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b88e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b892:	d106      	bne.n	800b8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800b894:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b896:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b89a:	d102      	bne.n	800b8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b89c:	4b11      	ldr	r3, [pc, #68]	@ (800b8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800b89e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b8a0:	e011      	b.n	800b8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b8a2:	4b0e      	ldr	r3, [pc, #56]	@ (800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b8aa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b8ae:	d106      	bne.n	800b8be <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800b8b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b8b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b8b6:	d102      	bne.n	800b8be <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b8b8:	4b0b      	ldr	r3, [pc, #44]	@ (800b8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800b8ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b8bc:	e003      	b.n	800b8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b8be:	2300      	movs	r3, #0
 800b8c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b8c2:	f000 bc38 	b.w	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b8c6:	f000 bc36 	b.w	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b8ca:	4b08      	ldr	r3, [pc, #32]	@ (800b8ec <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800b8cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b8ce:	f000 bc32 	b.w	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b8d6:	f000 bc2e 	b.w	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b8da:	bf00      	nop
 800b8dc:	58024400 	.word	0x58024400
 800b8e0:	03d09000 	.word	0x03d09000
 800b8e4:	003d0900 	.word	0x003d0900
 800b8e8:	007a1200 	.word	0x007a1200
 800b8ec:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800b8f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b8f4:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800b8f8:	430b      	orrs	r3, r1
 800b8fa:	f040 809c 	bne.w	800ba36 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800b8fe:	4b9e      	ldr	r3, [pc, #632]	@ (800bb78 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b900:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b902:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800b906:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800b908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b90a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b90e:	d054      	beq.n	800b9ba <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800b910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b912:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b916:	f200 808b 	bhi.w	800ba30 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800b91a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b91c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800b920:	f000 8083 	beq.w	800ba2a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800b924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b926:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800b92a:	f200 8081 	bhi.w	800ba30 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800b92e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b930:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b934:	d02f      	beq.n	800b996 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800b936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b938:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b93c:	d878      	bhi.n	800ba30 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800b93e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b940:	2b00      	cmp	r3, #0
 800b942:	d004      	beq.n	800b94e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800b944:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b946:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b94a:	d012      	beq.n	800b972 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800b94c:	e070      	b.n	800ba30 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b94e:	4b8a      	ldr	r3, [pc, #552]	@ (800bb78 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b956:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b95a:	d107      	bne.n	800b96c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b95c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b960:	4618      	mov	r0, r3
 800b962:	f000 feaf 	bl	800c6c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b966:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b968:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b96a:	e3e4      	b.n	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b96c:	2300      	movs	r3, #0
 800b96e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b970:	e3e1      	b.n	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b972:	4b81      	ldr	r3, [pc, #516]	@ (800bb78 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b97a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b97e:	d107      	bne.n	800b990 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b980:	f107 0318 	add.w	r3, r7, #24
 800b984:	4618      	mov	r0, r3
 800b986:	f000 fbf5 	bl	800c174 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b98a:	69bb      	ldr	r3, [r7, #24]
 800b98c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b98e:	e3d2      	b.n	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b990:	2300      	movs	r3, #0
 800b992:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b994:	e3cf      	b.n	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b996:	4b78      	ldr	r3, [pc, #480]	@ (800bb78 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b99e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b9a2:	d107      	bne.n	800b9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b9a4:	f107 030c 	add.w	r3, r7, #12
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	f000 fd37 	bl	800c41c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b9b2:	e3c0      	b.n	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b9b8:	e3bd      	b.n	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b9ba:	4b6f      	ldr	r3, [pc, #444]	@ (800bb78 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b9bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b9be:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b9c2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b9c4:	4b6c      	ldr	r3, [pc, #432]	@ (800bb78 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	f003 0304 	and.w	r3, r3, #4
 800b9cc:	2b04      	cmp	r3, #4
 800b9ce:	d10c      	bne.n	800b9ea <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800b9d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d109      	bne.n	800b9ea <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b9d6:	4b68      	ldr	r3, [pc, #416]	@ (800bb78 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	08db      	lsrs	r3, r3, #3
 800b9dc:	f003 0303 	and.w	r3, r3, #3
 800b9e0:	4a66      	ldr	r2, [pc, #408]	@ (800bb7c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b9e2:	fa22 f303 	lsr.w	r3, r2, r3
 800b9e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b9e8:	e01e      	b.n	800ba28 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b9ea:	4b63      	ldr	r3, [pc, #396]	@ (800bb78 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b9f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b9f6:	d106      	bne.n	800ba06 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800b9f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b9fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b9fe:	d102      	bne.n	800ba06 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ba00:	4b5f      	ldr	r3, [pc, #380]	@ (800bb80 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800ba02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ba04:	e010      	b.n	800ba28 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ba06:	4b5c      	ldr	r3, [pc, #368]	@ (800bb78 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ba0e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ba12:	d106      	bne.n	800ba22 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800ba14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba16:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ba1a:	d102      	bne.n	800ba22 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ba1c:	4b59      	ldr	r3, [pc, #356]	@ (800bb84 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800ba1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ba20:	e002      	b.n	800ba28 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ba22:	2300      	movs	r3, #0
 800ba24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800ba26:	e386      	b.n	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ba28:	e385      	b.n	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ba2a:	4b57      	ldr	r3, [pc, #348]	@ (800bb88 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800ba2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba2e:	e382      	b.n	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800ba30:	2300      	movs	r3, #0
 800ba32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba34:	e37f      	b.n	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800ba36:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba3a:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800ba3e:	430b      	orrs	r3, r1
 800ba40:	f040 80a7 	bne.w	800bb92 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800ba44:	4b4c      	ldr	r3, [pc, #304]	@ (800bb78 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ba46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ba48:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800ba4c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800ba4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba50:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ba54:	d055      	beq.n	800bb02 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800ba56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba58:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ba5c:	f200 8096 	bhi.w	800bb8c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800ba60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba62:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800ba66:	f000 8084 	beq.w	800bb72 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800ba6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba6c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800ba70:	f200 808c 	bhi.w	800bb8c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800ba74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba76:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ba7a:	d030      	beq.n	800bade <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800ba7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba7e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ba82:	f200 8083 	bhi.w	800bb8c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800ba86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d004      	beq.n	800ba96 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800ba8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba8e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ba92:	d012      	beq.n	800baba <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800ba94:	e07a      	b.n	800bb8c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ba96:	4b38      	ldr	r3, [pc, #224]	@ (800bb78 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ba9e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800baa2:	d107      	bne.n	800bab4 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800baa4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800baa8:	4618      	mov	r0, r3
 800baaa:	f000 fe0b 	bl	800c6c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800baae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bab0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bab2:	e340      	b.n	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bab4:	2300      	movs	r3, #0
 800bab6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bab8:	e33d      	b.n	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800baba:	4b2f      	ldr	r3, [pc, #188]	@ (800bb78 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bac2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bac6:	d107      	bne.n	800bad8 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bac8:	f107 0318 	add.w	r3, r7, #24
 800bacc:	4618      	mov	r0, r3
 800bace:	f000 fb51 	bl	800c174 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bad2:	69bb      	ldr	r3, [r7, #24]
 800bad4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bad6:	e32e      	b.n	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bad8:	2300      	movs	r3, #0
 800bada:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800badc:	e32b      	b.n	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bade:	4b26      	ldr	r3, [pc, #152]	@ (800bb78 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bae6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800baea:	d107      	bne.n	800bafc <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800baec:	f107 030c 	add.w	r3, r7, #12
 800baf0:	4618      	mov	r0, r3
 800baf2:	f000 fc93 	bl	800c41c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bafa:	e31c      	b.n	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bafc:	2300      	movs	r3, #0
 800bafe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb00:	e319      	b.n	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bb02:	4b1d      	ldr	r3, [pc, #116]	@ (800bb78 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bb04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bb06:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800bb0a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bb0c:	4b1a      	ldr	r3, [pc, #104]	@ (800bb78 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	f003 0304 	and.w	r3, r3, #4
 800bb14:	2b04      	cmp	r3, #4
 800bb16:	d10c      	bne.n	800bb32 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800bb18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d109      	bne.n	800bb32 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bb1e:	4b16      	ldr	r3, [pc, #88]	@ (800bb78 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	08db      	lsrs	r3, r3, #3
 800bb24:	f003 0303 	and.w	r3, r3, #3
 800bb28:	4a14      	ldr	r2, [pc, #80]	@ (800bb7c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800bb2a:	fa22 f303 	lsr.w	r3, r2, r3
 800bb2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bb30:	e01e      	b.n	800bb70 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bb32:	4b11      	ldr	r3, [pc, #68]	@ (800bb78 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bb3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bb3e:	d106      	bne.n	800bb4e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800bb40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb42:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bb46:	d102      	bne.n	800bb4e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bb48:	4b0d      	ldr	r3, [pc, #52]	@ (800bb80 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800bb4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bb4c:	e010      	b.n	800bb70 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bb4e:	4b0a      	ldr	r3, [pc, #40]	@ (800bb78 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bb56:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bb5a:	d106      	bne.n	800bb6a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800bb5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb5e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bb62:	d102      	bne.n	800bb6a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bb64:	4b07      	ldr	r3, [pc, #28]	@ (800bb84 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800bb66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bb68:	e002      	b.n	800bb70 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800bb6e:	e2e2      	b.n	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800bb70:	e2e1      	b.n	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bb72:	4b05      	ldr	r3, [pc, #20]	@ (800bb88 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800bb74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb76:	e2de      	b.n	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800bb78:	58024400 	.word	0x58024400
 800bb7c:	03d09000 	.word	0x03d09000
 800bb80:	003d0900 	.word	0x003d0900
 800bb84:	007a1200 	.word	0x007a1200
 800bb88:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb90:	e2d1      	b.n	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800bb92:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bb96:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800bb9a:	430b      	orrs	r3, r1
 800bb9c:	f040 809c 	bne.w	800bcd8 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800bba0:	4b93      	ldr	r3, [pc, #588]	@ (800bdf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800bba2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bba4:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800bba8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800bbaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bbb0:	d054      	beq.n	800bc5c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800bbb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbb4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bbb8:	f200 808b 	bhi.w	800bcd2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800bbbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbbe:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800bbc2:	f000 8083 	beq.w	800bccc <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800bbc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbc8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800bbcc:	f200 8081 	bhi.w	800bcd2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800bbd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbd2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bbd6:	d02f      	beq.n	800bc38 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800bbd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbda:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bbde:	d878      	bhi.n	800bcd2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800bbe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d004      	beq.n	800bbf0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800bbe6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbe8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bbec:	d012      	beq.n	800bc14 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800bbee:	e070      	b.n	800bcd2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bbf0:	4b7f      	ldr	r3, [pc, #508]	@ (800bdf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bbf8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bbfc:	d107      	bne.n	800bc0e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bbfe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bc02:	4618      	mov	r0, r3
 800bc04:	f000 fd5e 	bl	800c6c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bc08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc0c:	e293      	b.n	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bc0e:	2300      	movs	r3, #0
 800bc10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc12:	e290      	b.n	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bc14:	4b76      	ldr	r3, [pc, #472]	@ (800bdf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bc1c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bc20:	d107      	bne.n	800bc32 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bc22:	f107 0318 	add.w	r3, r7, #24
 800bc26:	4618      	mov	r0, r3
 800bc28:	f000 faa4 	bl	800c174 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bc2c:	69bb      	ldr	r3, [r7, #24]
 800bc2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc30:	e281      	b.n	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bc32:	2300      	movs	r3, #0
 800bc34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc36:	e27e      	b.n	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bc38:	4b6d      	ldr	r3, [pc, #436]	@ (800bdf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bc40:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bc44:	d107      	bne.n	800bc56 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bc46:	f107 030c 	add.w	r3, r7, #12
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	f000 fbe6 	bl	800c41c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc54:	e26f      	b.n	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bc56:	2300      	movs	r3, #0
 800bc58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc5a:	e26c      	b.n	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bc5c:	4b64      	ldr	r3, [pc, #400]	@ (800bdf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800bc5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bc60:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800bc64:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bc66:	4b62      	ldr	r3, [pc, #392]	@ (800bdf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	f003 0304 	and.w	r3, r3, #4
 800bc6e:	2b04      	cmp	r3, #4
 800bc70:	d10c      	bne.n	800bc8c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800bc72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d109      	bne.n	800bc8c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bc78:	4b5d      	ldr	r3, [pc, #372]	@ (800bdf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	08db      	lsrs	r3, r3, #3
 800bc7e:	f003 0303 	and.w	r3, r3, #3
 800bc82:	4a5c      	ldr	r2, [pc, #368]	@ (800bdf4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800bc84:	fa22 f303 	lsr.w	r3, r2, r3
 800bc88:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bc8a:	e01e      	b.n	800bcca <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bc8c:	4b58      	ldr	r3, [pc, #352]	@ (800bdf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bc94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bc98:	d106      	bne.n	800bca8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800bc9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc9c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bca0:	d102      	bne.n	800bca8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bca2:	4b55      	ldr	r3, [pc, #340]	@ (800bdf8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800bca4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bca6:	e010      	b.n	800bcca <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bca8:	4b51      	ldr	r3, [pc, #324]	@ (800bdf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bcb0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bcb4:	d106      	bne.n	800bcc4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800bcb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bcb8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bcbc:	d102      	bne.n	800bcc4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bcbe:	4b4f      	ldr	r3, [pc, #316]	@ (800bdfc <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800bcc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bcc2:	e002      	b.n	800bcca <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800bcc8:	e235      	b.n	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800bcca:	e234      	b.n	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bccc:	4b4c      	ldr	r3, [pc, #304]	@ (800be00 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800bcce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bcd0:	e231      	b.n	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bcd6:	e22e      	b.n	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800bcd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bcdc:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800bce0:	430b      	orrs	r3, r1
 800bce2:	f040 808f 	bne.w	800be04 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800bce6:	4b42      	ldr	r3, [pc, #264]	@ (800bdf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800bce8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bcea:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800bcee:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800bcf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcf2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800bcf6:	d06b      	beq.n	800bdd0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800bcf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcfa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800bcfe:	d874      	bhi.n	800bdea <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800bd00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd02:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800bd06:	d056      	beq.n	800bdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800bd08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd0a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800bd0e:	d86c      	bhi.n	800bdea <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800bd10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd12:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800bd16:	d03b      	beq.n	800bd90 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800bd18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd1a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800bd1e:	d864      	bhi.n	800bdea <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800bd20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd22:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bd26:	d021      	beq.n	800bd6c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800bd28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd2a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bd2e:	d85c      	bhi.n	800bdea <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800bd30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d004      	beq.n	800bd40 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800bd36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bd3c:	d004      	beq.n	800bd48 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800bd3e:	e054      	b.n	800bdea <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800bd40:	f7fe fa4c 	bl	800a1dc <HAL_RCC_GetPCLK1Freq>
 800bd44:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bd46:	e1f6      	b.n	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bd48:	4b29      	ldr	r3, [pc, #164]	@ (800bdf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bd50:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bd54:	d107      	bne.n	800bd66 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bd56:	f107 0318 	add.w	r3, r7, #24
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	f000 fa0a 	bl	800c174 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bd60:	69fb      	ldr	r3, [r7, #28]
 800bd62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd64:	e1e7      	b.n	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bd66:	2300      	movs	r3, #0
 800bd68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bd6a:	e1e4      	b.n	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bd6c:	4b20      	ldr	r3, [pc, #128]	@ (800bdf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bd74:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bd78:	d107      	bne.n	800bd8a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bd7a:	f107 030c 	add.w	r3, r7, #12
 800bd7e:	4618      	mov	r0, r3
 800bd80:	f000 fb4c 	bl	800c41c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800bd84:	693b      	ldr	r3, [r7, #16]
 800bd86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd88:	e1d5      	b.n	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bd8e:	e1d2      	b.n	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800bd90:	4b17      	ldr	r3, [pc, #92]	@ (800bdf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	f003 0304 	and.w	r3, r3, #4
 800bd98:	2b04      	cmp	r3, #4
 800bd9a:	d109      	bne.n	800bdb0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bd9c:	4b14      	ldr	r3, [pc, #80]	@ (800bdf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	08db      	lsrs	r3, r3, #3
 800bda2:	f003 0303 	and.w	r3, r3, #3
 800bda6:	4a13      	ldr	r2, [pc, #76]	@ (800bdf4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800bda8:	fa22 f303 	lsr.w	r3, r2, r3
 800bdac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bdae:	e1c2      	b.n	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bdb0:	2300      	movs	r3, #0
 800bdb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bdb4:	e1bf      	b.n	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800bdb6:	4b0e      	ldr	r3, [pc, #56]	@ (800bdf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bdbe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bdc2:	d102      	bne.n	800bdca <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800bdc4:	4b0c      	ldr	r3, [pc, #48]	@ (800bdf8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800bdc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bdc8:	e1b5      	b.n	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bdca:	2300      	movs	r3, #0
 800bdcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bdce:	e1b2      	b.n	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800bdd0:	4b07      	ldr	r3, [pc, #28]	@ (800bdf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bdd8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bddc:	d102      	bne.n	800bde4 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800bdde:	4b07      	ldr	r3, [pc, #28]	@ (800bdfc <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800bde0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bde2:	e1a8      	b.n	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bde4:	2300      	movs	r3, #0
 800bde6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bde8:	e1a5      	b.n	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800bdea:	2300      	movs	r3, #0
 800bdec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bdee:	e1a2      	b.n	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800bdf0:	58024400 	.word	0x58024400
 800bdf4:	03d09000 	.word	0x03d09000
 800bdf8:	003d0900 	.word	0x003d0900
 800bdfc:	007a1200 	.word	0x007a1200
 800be00:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800be04:	e9d7 2300 	ldrd	r2, r3, [r7]
 800be08:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800be0c:	430b      	orrs	r3, r1
 800be0e:	d173      	bne.n	800bef8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800be10:	4b9c      	ldr	r3, [pc, #624]	@ (800c084 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800be12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800be14:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800be18:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800be1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be1c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800be20:	d02f      	beq.n	800be82 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800be22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be24:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800be28:	d863      	bhi.n	800bef2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800be2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d004      	beq.n	800be3a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800be30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800be36:	d012      	beq.n	800be5e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800be38:	e05b      	b.n	800bef2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800be3a:	4b92      	ldr	r3, [pc, #584]	@ (800c084 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800be42:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800be46:	d107      	bne.n	800be58 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800be48:	f107 0318 	add.w	r3, r7, #24
 800be4c:	4618      	mov	r0, r3
 800be4e:	f000 f991 	bl	800c174 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800be52:	69bb      	ldr	r3, [r7, #24]
 800be54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800be56:	e16e      	b.n	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800be58:	2300      	movs	r3, #0
 800be5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800be5c:	e16b      	b.n	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800be5e:	4b89      	ldr	r3, [pc, #548]	@ (800c084 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800be66:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800be6a:	d107      	bne.n	800be7c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800be6c:	f107 030c 	add.w	r3, r7, #12
 800be70:	4618      	mov	r0, r3
 800be72:	f000 fad3 	bl	800c41c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800be76:	697b      	ldr	r3, [r7, #20]
 800be78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800be7a:	e15c      	b.n	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800be7c:	2300      	movs	r3, #0
 800be7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800be80:	e159      	b.n	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800be82:	4b80      	ldr	r3, [pc, #512]	@ (800c084 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800be84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800be86:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800be8a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800be8c:	4b7d      	ldr	r3, [pc, #500]	@ (800c084 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	f003 0304 	and.w	r3, r3, #4
 800be94:	2b04      	cmp	r3, #4
 800be96:	d10c      	bne.n	800beb2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800be98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d109      	bne.n	800beb2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800be9e:	4b79      	ldr	r3, [pc, #484]	@ (800c084 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	08db      	lsrs	r3, r3, #3
 800bea4:	f003 0303 	and.w	r3, r3, #3
 800bea8:	4a77      	ldr	r2, [pc, #476]	@ (800c088 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800beaa:	fa22 f303 	lsr.w	r3, r2, r3
 800beae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800beb0:	e01e      	b.n	800bef0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800beb2:	4b74      	ldr	r3, [pc, #464]	@ (800c084 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800beba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bebe:	d106      	bne.n	800bece <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800bec0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bec2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bec6:	d102      	bne.n	800bece <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bec8:	4b70      	ldr	r3, [pc, #448]	@ (800c08c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800beca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800becc:	e010      	b.n	800bef0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bece:	4b6d      	ldr	r3, [pc, #436]	@ (800c084 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bed6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800beda:	d106      	bne.n	800beea <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800bedc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bede:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bee2:	d102      	bne.n	800beea <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bee4:	4b6a      	ldr	r3, [pc, #424]	@ (800c090 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800bee6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bee8:	e002      	b.n	800bef0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800beea:	2300      	movs	r3, #0
 800beec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800beee:	e122      	b.n	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800bef0:	e121      	b.n	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800bef2:	2300      	movs	r3, #0
 800bef4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bef6:	e11e      	b.n	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800bef8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800befc:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800bf00:	430b      	orrs	r3, r1
 800bf02:	d133      	bne.n	800bf6c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800bf04:	4b5f      	ldr	r3, [pc, #380]	@ (800c084 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bf06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bf08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bf0c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800bf0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d004      	beq.n	800bf1e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800bf14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bf1a:	d012      	beq.n	800bf42 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800bf1c:	e023      	b.n	800bf66 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bf1e:	4b59      	ldr	r3, [pc, #356]	@ (800c084 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bf26:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bf2a:	d107      	bne.n	800bf3c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bf2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bf30:	4618      	mov	r0, r3
 800bf32:	f000 fbc7 	bl	800c6c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bf36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bf3a:	e0fc      	b.n	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bf3c:	2300      	movs	r3, #0
 800bf3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bf40:	e0f9      	b.n	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bf42:	4b50      	ldr	r3, [pc, #320]	@ (800c084 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bf4a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bf4e:	d107      	bne.n	800bf60 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bf50:	f107 0318 	add.w	r3, r7, #24
 800bf54:	4618      	mov	r0, r3
 800bf56:	f000 f90d 	bl	800c174 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800bf5a:	6a3b      	ldr	r3, [r7, #32]
 800bf5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bf5e:	e0ea      	b.n	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bf60:	2300      	movs	r3, #0
 800bf62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bf64:	e0e7      	b.n	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800bf66:	2300      	movs	r3, #0
 800bf68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bf6a:	e0e4      	b.n	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800bf6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bf70:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800bf74:	430b      	orrs	r3, r1
 800bf76:	f040 808d 	bne.w	800c094 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800bf7a:	4b42      	ldr	r3, [pc, #264]	@ (800c084 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bf7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bf7e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800bf82:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800bf84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf86:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bf8a:	d06b      	beq.n	800c064 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800bf8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bf92:	d874      	bhi.n	800c07e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800bf94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bf9a:	d056      	beq.n	800c04a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800bf9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bfa2:	d86c      	bhi.n	800c07e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800bfa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfa6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800bfaa:	d03b      	beq.n	800c024 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800bfac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfae:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800bfb2:	d864      	bhi.n	800c07e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800bfb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfb6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bfba:	d021      	beq.n	800c000 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800bfbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfbe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bfc2:	d85c      	bhi.n	800c07e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800bfc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d004      	beq.n	800bfd4 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800bfca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfcc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bfd0:	d004      	beq.n	800bfdc <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800bfd2:	e054      	b.n	800c07e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800bfd4:	f000 f8b8 	bl	800c148 <HAL_RCCEx_GetD3PCLK1Freq>
 800bfd8:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bfda:	e0ac      	b.n	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bfdc:	4b29      	ldr	r3, [pc, #164]	@ (800c084 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bfe4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bfe8:	d107      	bne.n	800bffa <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bfea:	f107 0318 	add.w	r3, r7, #24
 800bfee:	4618      	mov	r0, r3
 800bff0:	f000 f8c0 	bl	800c174 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bff4:	69fb      	ldr	r3, [r7, #28]
 800bff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bff8:	e09d      	b.n	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bffa:	2300      	movs	r3, #0
 800bffc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bffe:	e09a      	b.n	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c000:	4b20      	ldr	r3, [pc, #128]	@ (800c084 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c008:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c00c:	d107      	bne.n	800c01e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c00e:	f107 030c 	add.w	r3, r7, #12
 800c012:	4618      	mov	r0, r3
 800c014:	f000 fa02 	bl	800c41c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c018:	693b      	ldr	r3, [r7, #16]
 800c01a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c01c:	e08b      	b.n	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c01e:	2300      	movs	r3, #0
 800c020:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c022:	e088      	b.n	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c024:	4b17      	ldr	r3, [pc, #92]	@ (800c084 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	f003 0304 	and.w	r3, r3, #4
 800c02c:	2b04      	cmp	r3, #4
 800c02e:	d109      	bne.n	800c044 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c030:	4b14      	ldr	r3, [pc, #80]	@ (800c084 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	08db      	lsrs	r3, r3, #3
 800c036:	f003 0303 	and.w	r3, r3, #3
 800c03a:	4a13      	ldr	r2, [pc, #76]	@ (800c088 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800c03c:	fa22 f303 	lsr.w	r3, r2, r3
 800c040:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c042:	e078      	b.n	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c044:	2300      	movs	r3, #0
 800c046:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c048:	e075      	b.n	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c04a:	4b0e      	ldr	r3, [pc, #56]	@ (800c084 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c052:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c056:	d102      	bne.n	800c05e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800c058:	4b0c      	ldr	r3, [pc, #48]	@ (800c08c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800c05a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c05c:	e06b      	b.n	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c05e:	2300      	movs	r3, #0
 800c060:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c062:	e068      	b.n	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c064:	4b07      	ldr	r3, [pc, #28]	@ (800c084 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c06c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c070:	d102      	bne.n	800c078 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800c072:	4b07      	ldr	r3, [pc, #28]	@ (800c090 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800c074:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c076:	e05e      	b.n	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c078:	2300      	movs	r3, #0
 800c07a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c07c:	e05b      	b.n	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800c07e:	2300      	movs	r3, #0
 800c080:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c082:	e058      	b.n	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c084:	58024400 	.word	0x58024400
 800c088:	03d09000 	.word	0x03d09000
 800c08c:	003d0900 	.word	0x003d0900
 800c090:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800c094:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c098:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800c09c:	430b      	orrs	r3, r1
 800c09e:	d148      	bne.n	800c132 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800c0a0:	4b27      	ldr	r3, [pc, #156]	@ (800c140 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c0a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c0a4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800c0a8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800c0aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c0b0:	d02a      	beq.n	800c108 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800c0b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c0b8:	d838      	bhi.n	800c12c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800c0ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d004      	beq.n	800c0ca <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800c0c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c0c6:	d00d      	beq.n	800c0e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800c0c8:	e030      	b.n	800c12c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c0ca:	4b1d      	ldr	r3, [pc, #116]	@ (800c140 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c0d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c0d6:	d102      	bne.n	800c0de <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800c0d8:	4b1a      	ldr	r3, [pc, #104]	@ (800c144 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800c0da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c0dc:	e02b      	b.n	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c0de:	2300      	movs	r3, #0
 800c0e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c0e2:	e028      	b.n	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c0e4:	4b16      	ldr	r3, [pc, #88]	@ (800c140 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c0ec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c0f0:	d107      	bne.n	800c102 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c0f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c0f6:	4618      	mov	r0, r3
 800c0f8:	f000 fae4 	bl	800c6c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c0fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c100:	e019      	b.n	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c102:	2300      	movs	r3, #0
 800c104:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c106:	e016      	b.n	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c108:	4b0d      	ldr	r3, [pc, #52]	@ (800c140 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c110:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c114:	d107      	bne.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c116:	f107 0318 	add.w	r3, r7, #24
 800c11a:	4618      	mov	r0, r3
 800c11c:	f000 f82a 	bl	800c174 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c120:	69fb      	ldr	r3, [r7, #28]
 800c122:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c124:	e007      	b.n	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c126:	2300      	movs	r3, #0
 800c128:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c12a:	e004      	b.n	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c12c:	2300      	movs	r3, #0
 800c12e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c130:	e001      	b.n	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800c132:	2300      	movs	r3, #0
 800c134:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800c136:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800c138:	4618      	mov	r0, r3
 800c13a:	3740      	adds	r7, #64	@ 0x40
 800c13c:	46bd      	mov	sp, r7
 800c13e:	bd80      	pop	{r7, pc}
 800c140:	58024400 	.word	0x58024400
 800c144:	007a1200 	.word	0x007a1200

0800c148 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c148:	b580      	push	{r7, lr}
 800c14a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c14c:	f7fe f816 	bl	800a17c <HAL_RCC_GetHCLKFreq>
 800c150:	4602      	mov	r2, r0
 800c152:	4b06      	ldr	r3, [pc, #24]	@ (800c16c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c154:	6a1b      	ldr	r3, [r3, #32]
 800c156:	091b      	lsrs	r3, r3, #4
 800c158:	f003 0307 	and.w	r3, r3, #7
 800c15c:	4904      	ldr	r1, [pc, #16]	@ (800c170 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c15e:	5ccb      	ldrb	r3, [r1, r3]
 800c160:	f003 031f 	and.w	r3, r3, #31
 800c164:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800c168:	4618      	mov	r0, r3
 800c16a:	bd80      	pop	{r7, pc}
 800c16c:	58024400 	.word	0x58024400
 800c170:	080123f8 	.word	0x080123f8

0800c174 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800c174:	b480      	push	{r7}
 800c176:	b089      	sub	sp, #36	@ 0x24
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c17c:	4ba1      	ldr	r3, [pc, #644]	@ (800c404 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c17e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c180:	f003 0303 	and.w	r3, r3, #3
 800c184:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800c186:	4b9f      	ldr	r3, [pc, #636]	@ (800c404 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c188:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c18a:	0b1b      	lsrs	r3, r3, #12
 800c18c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c190:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c192:	4b9c      	ldr	r3, [pc, #624]	@ (800c404 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c196:	091b      	lsrs	r3, r3, #4
 800c198:	f003 0301 	and.w	r3, r3, #1
 800c19c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c19e:	4b99      	ldr	r3, [pc, #612]	@ (800c404 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c1a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c1a2:	08db      	lsrs	r3, r3, #3
 800c1a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c1a8:	693a      	ldr	r2, [r7, #16]
 800c1aa:	fb02 f303 	mul.w	r3, r2, r3
 800c1ae:	ee07 3a90 	vmov	s15, r3
 800c1b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1b6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c1ba:	697b      	ldr	r3, [r7, #20]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	f000 8111 	beq.w	800c3e4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c1c2:	69bb      	ldr	r3, [r7, #24]
 800c1c4:	2b02      	cmp	r3, #2
 800c1c6:	f000 8083 	beq.w	800c2d0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c1ca:	69bb      	ldr	r3, [r7, #24]
 800c1cc:	2b02      	cmp	r3, #2
 800c1ce:	f200 80a1 	bhi.w	800c314 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c1d2:	69bb      	ldr	r3, [r7, #24]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d003      	beq.n	800c1e0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800c1d8:	69bb      	ldr	r3, [r7, #24]
 800c1da:	2b01      	cmp	r3, #1
 800c1dc:	d056      	beq.n	800c28c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800c1de:	e099      	b.n	800c314 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c1e0:	4b88      	ldr	r3, [pc, #544]	@ (800c404 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	f003 0320 	and.w	r3, r3, #32
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d02d      	beq.n	800c248 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c1ec:	4b85      	ldr	r3, [pc, #532]	@ (800c404 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	08db      	lsrs	r3, r3, #3
 800c1f2:	f003 0303 	and.w	r3, r3, #3
 800c1f6:	4a84      	ldr	r2, [pc, #528]	@ (800c408 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800c1f8:	fa22 f303 	lsr.w	r3, r2, r3
 800c1fc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c1fe:	68bb      	ldr	r3, [r7, #8]
 800c200:	ee07 3a90 	vmov	s15, r3
 800c204:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c208:	697b      	ldr	r3, [r7, #20]
 800c20a:	ee07 3a90 	vmov	s15, r3
 800c20e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c212:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c216:	4b7b      	ldr	r3, [pc, #492]	@ (800c404 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c218:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c21a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c21e:	ee07 3a90 	vmov	s15, r3
 800c222:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c226:	ed97 6a03 	vldr	s12, [r7, #12]
 800c22a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800c40c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c22e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c232:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c236:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c23a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c23e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c242:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c246:	e087      	b.n	800c358 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c248:	697b      	ldr	r3, [r7, #20]
 800c24a:	ee07 3a90 	vmov	s15, r3
 800c24e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c252:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800c410 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800c256:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c25a:	4b6a      	ldr	r3, [pc, #424]	@ (800c404 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c25c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c25e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c262:	ee07 3a90 	vmov	s15, r3
 800c266:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c26a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c26e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800c40c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c272:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c276:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c27a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c27e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c282:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c286:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c28a:	e065      	b.n	800c358 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c28c:	697b      	ldr	r3, [r7, #20]
 800c28e:	ee07 3a90 	vmov	s15, r3
 800c292:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c296:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800c414 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c29a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c29e:	4b59      	ldr	r3, [pc, #356]	@ (800c404 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c2a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c2a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c2a6:	ee07 3a90 	vmov	s15, r3
 800c2aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c2ae:	ed97 6a03 	vldr	s12, [r7, #12]
 800c2b2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800c40c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c2b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c2ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c2be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c2c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c2c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c2ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c2ce:	e043      	b.n	800c358 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c2d0:	697b      	ldr	r3, [r7, #20]
 800c2d2:	ee07 3a90 	vmov	s15, r3
 800c2d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2da:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800c418 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800c2de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c2e2:	4b48      	ldr	r3, [pc, #288]	@ (800c404 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c2e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c2e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c2ea:	ee07 3a90 	vmov	s15, r3
 800c2ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c2f2:	ed97 6a03 	vldr	s12, [r7, #12]
 800c2f6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800c40c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c2fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c2fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c302:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c306:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c30a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c30e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c312:	e021      	b.n	800c358 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c314:	697b      	ldr	r3, [r7, #20]
 800c316:	ee07 3a90 	vmov	s15, r3
 800c31a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c31e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800c414 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c322:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c326:	4b37      	ldr	r3, [pc, #220]	@ (800c404 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c328:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c32a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c32e:	ee07 3a90 	vmov	s15, r3
 800c332:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c336:	ed97 6a03 	vldr	s12, [r7, #12]
 800c33a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800c40c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c33e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c342:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c346:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c34a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c34e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c352:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c356:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800c358:	4b2a      	ldr	r3, [pc, #168]	@ (800c404 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c35a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c35c:	0a5b      	lsrs	r3, r3, #9
 800c35e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c362:	ee07 3a90 	vmov	s15, r3
 800c366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c36a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c36e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c372:	edd7 6a07 	vldr	s13, [r7, #28]
 800c376:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c37a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c37e:	ee17 2a90 	vmov	r2, s15
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800c386:	4b1f      	ldr	r3, [pc, #124]	@ (800c404 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c388:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c38a:	0c1b      	lsrs	r3, r3, #16
 800c38c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c390:	ee07 3a90 	vmov	s15, r3
 800c394:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c398:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c39c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c3a0:	edd7 6a07 	vldr	s13, [r7, #28]
 800c3a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c3a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c3ac:	ee17 2a90 	vmov	r2, s15
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800c3b4:	4b13      	ldr	r3, [pc, #76]	@ (800c404 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c3b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c3b8:	0e1b      	lsrs	r3, r3, #24
 800c3ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c3be:	ee07 3a90 	vmov	s15, r3
 800c3c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c3c6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c3ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c3ce:	edd7 6a07 	vldr	s13, [r7, #28]
 800c3d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c3d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c3da:	ee17 2a90 	vmov	r2, s15
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c3e2:	e008      	b.n	800c3f6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	2200      	movs	r2, #0
 800c3e8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	2200      	movs	r2, #0
 800c3ee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	2200      	movs	r2, #0
 800c3f4:	609a      	str	r2, [r3, #8]
}
 800c3f6:	bf00      	nop
 800c3f8:	3724      	adds	r7, #36	@ 0x24
 800c3fa:	46bd      	mov	sp, r7
 800c3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c400:	4770      	bx	lr
 800c402:	bf00      	nop
 800c404:	58024400 	.word	0x58024400
 800c408:	03d09000 	.word	0x03d09000
 800c40c:	46000000 	.word	0x46000000
 800c410:	4c742400 	.word	0x4c742400
 800c414:	4a742400 	.word	0x4a742400
 800c418:	4af42400 	.word	0x4af42400

0800c41c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800c41c:	b480      	push	{r7}
 800c41e:	b089      	sub	sp, #36	@ 0x24
 800c420:	af00      	add	r7, sp, #0
 800c422:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c424:	4ba1      	ldr	r3, [pc, #644]	@ (800c6ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c426:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c428:	f003 0303 	and.w	r3, r3, #3
 800c42c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800c42e:	4b9f      	ldr	r3, [pc, #636]	@ (800c6ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c430:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c432:	0d1b      	lsrs	r3, r3, #20
 800c434:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c438:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c43a:	4b9c      	ldr	r3, [pc, #624]	@ (800c6ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c43c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c43e:	0a1b      	lsrs	r3, r3, #8
 800c440:	f003 0301 	and.w	r3, r3, #1
 800c444:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800c446:	4b99      	ldr	r3, [pc, #612]	@ (800c6ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c448:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c44a:	08db      	lsrs	r3, r3, #3
 800c44c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c450:	693a      	ldr	r2, [r7, #16]
 800c452:	fb02 f303 	mul.w	r3, r2, r3
 800c456:	ee07 3a90 	vmov	s15, r3
 800c45a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c45e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800c462:	697b      	ldr	r3, [r7, #20]
 800c464:	2b00      	cmp	r3, #0
 800c466:	f000 8111 	beq.w	800c68c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800c46a:	69bb      	ldr	r3, [r7, #24]
 800c46c:	2b02      	cmp	r3, #2
 800c46e:	f000 8083 	beq.w	800c578 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800c472:	69bb      	ldr	r3, [r7, #24]
 800c474:	2b02      	cmp	r3, #2
 800c476:	f200 80a1 	bhi.w	800c5bc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800c47a:	69bb      	ldr	r3, [r7, #24]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d003      	beq.n	800c488 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800c480:	69bb      	ldr	r3, [r7, #24]
 800c482:	2b01      	cmp	r3, #1
 800c484:	d056      	beq.n	800c534 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800c486:	e099      	b.n	800c5bc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c488:	4b88      	ldr	r3, [pc, #544]	@ (800c6ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	f003 0320 	and.w	r3, r3, #32
 800c490:	2b00      	cmp	r3, #0
 800c492:	d02d      	beq.n	800c4f0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c494:	4b85      	ldr	r3, [pc, #532]	@ (800c6ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	08db      	lsrs	r3, r3, #3
 800c49a:	f003 0303 	and.w	r3, r3, #3
 800c49e:	4a84      	ldr	r2, [pc, #528]	@ (800c6b0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800c4a0:	fa22 f303 	lsr.w	r3, r2, r3
 800c4a4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c4a6:	68bb      	ldr	r3, [r7, #8]
 800c4a8:	ee07 3a90 	vmov	s15, r3
 800c4ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c4b0:	697b      	ldr	r3, [r7, #20]
 800c4b2:	ee07 3a90 	vmov	s15, r3
 800c4b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c4ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c4be:	4b7b      	ldr	r3, [pc, #492]	@ (800c6ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c4c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c4c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c4c6:	ee07 3a90 	vmov	s15, r3
 800c4ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c4ce:	ed97 6a03 	vldr	s12, [r7, #12]
 800c4d2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800c6b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c4d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c4da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c4de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c4e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c4e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c4ea:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c4ee:	e087      	b.n	800c600 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c4f0:	697b      	ldr	r3, [r7, #20]
 800c4f2:	ee07 3a90 	vmov	s15, r3
 800c4f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c4fa:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800c6b8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800c4fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c502:	4b6a      	ldr	r3, [pc, #424]	@ (800c6ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c506:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c50a:	ee07 3a90 	vmov	s15, r3
 800c50e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c512:	ed97 6a03 	vldr	s12, [r7, #12]
 800c516:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800c6b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c51a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c51e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c522:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c526:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c52a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c52e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c532:	e065      	b.n	800c600 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c534:	697b      	ldr	r3, [r7, #20]
 800c536:	ee07 3a90 	vmov	s15, r3
 800c53a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c53e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800c6bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c542:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c546:	4b59      	ldr	r3, [pc, #356]	@ (800c6ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c54a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c54e:	ee07 3a90 	vmov	s15, r3
 800c552:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c556:	ed97 6a03 	vldr	s12, [r7, #12]
 800c55a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800c6b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c55e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c562:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c566:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c56a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c56e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c572:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c576:	e043      	b.n	800c600 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c578:	697b      	ldr	r3, [r7, #20]
 800c57a:	ee07 3a90 	vmov	s15, r3
 800c57e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c582:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800c6c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800c586:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c58a:	4b48      	ldr	r3, [pc, #288]	@ (800c6ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c58c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c58e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c592:	ee07 3a90 	vmov	s15, r3
 800c596:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c59a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c59e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800c6b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c5a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c5a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c5aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c5ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c5b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c5b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c5ba:	e021      	b.n	800c600 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c5bc:	697b      	ldr	r3, [r7, #20]
 800c5be:	ee07 3a90 	vmov	s15, r3
 800c5c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c5c6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800c6bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c5ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c5ce:	4b37      	ldr	r3, [pc, #220]	@ (800c6ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c5d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c5d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c5d6:	ee07 3a90 	vmov	s15, r3
 800c5da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c5de:	ed97 6a03 	vldr	s12, [r7, #12]
 800c5e2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800c6b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c5e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c5ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c5ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c5f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c5f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c5fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c5fe:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800c600:	4b2a      	ldr	r3, [pc, #168]	@ (800c6ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c604:	0a5b      	lsrs	r3, r3, #9
 800c606:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c60a:	ee07 3a90 	vmov	s15, r3
 800c60e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c612:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c616:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c61a:	edd7 6a07 	vldr	s13, [r7, #28]
 800c61e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c622:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c626:	ee17 2a90 	vmov	r2, s15
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800c62e:	4b1f      	ldr	r3, [pc, #124]	@ (800c6ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c632:	0c1b      	lsrs	r3, r3, #16
 800c634:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c638:	ee07 3a90 	vmov	s15, r3
 800c63c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c640:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c644:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c648:	edd7 6a07 	vldr	s13, [r7, #28]
 800c64c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c650:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c654:	ee17 2a90 	vmov	r2, s15
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800c65c:	4b13      	ldr	r3, [pc, #76]	@ (800c6ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c65e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c660:	0e1b      	lsrs	r3, r3, #24
 800c662:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c666:	ee07 3a90 	vmov	s15, r3
 800c66a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c66e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c672:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c676:	edd7 6a07 	vldr	s13, [r7, #28]
 800c67a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c67e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c682:	ee17 2a90 	vmov	r2, s15
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c68a:	e008      	b.n	800c69e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	2200      	movs	r2, #0
 800c690:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	2200      	movs	r2, #0
 800c696:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	2200      	movs	r2, #0
 800c69c:	609a      	str	r2, [r3, #8]
}
 800c69e:	bf00      	nop
 800c6a0:	3724      	adds	r7, #36	@ 0x24
 800c6a2:	46bd      	mov	sp, r7
 800c6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a8:	4770      	bx	lr
 800c6aa:	bf00      	nop
 800c6ac:	58024400 	.word	0x58024400
 800c6b0:	03d09000 	.word	0x03d09000
 800c6b4:	46000000 	.word	0x46000000
 800c6b8:	4c742400 	.word	0x4c742400
 800c6bc:	4a742400 	.word	0x4a742400
 800c6c0:	4af42400 	.word	0x4af42400

0800c6c4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800c6c4:	b480      	push	{r7}
 800c6c6:	b089      	sub	sp, #36	@ 0x24
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c6cc:	4ba0      	ldr	r3, [pc, #640]	@ (800c950 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c6ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c6d0:	f003 0303 	and.w	r3, r3, #3
 800c6d4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800c6d6:	4b9e      	ldr	r3, [pc, #632]	@ (800c950 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c6d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c6da:	091b      	lsrs	r3, r3, #4
 800c6dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c6e0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800c6e2:	4b9b      	ldr	r3, [pc, #620]	@ (800c950 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c6e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6e6:	f003 0301 	and.w	r3, r3, #1
 800c6ea:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c6ec:	4b98      	ldr	r3, [pc, #608]	@ (800c950 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c6ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c6f0:	08db      	lsrs	r3, r3, #3
 800c6f2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c6f6:	693a      	ldr	r2, [r7, #16]
 800c6f8:	fb02 f303 	mul.w	r3, r2, r3
 800c6fc:	ee07 3a90 	vmov	s15, r3
 800c700:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c704:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800c708:	697b      	ldr	r3, [r7, #20]
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	f000 8111 	beq.w	800c932 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800c710:	69bb      	ldr	r3, [r7, #24]
 800c712:	2b02      	cmp	r3, #2
 800c714:	f000 8083 	beq.w	800c81e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800c718:	69bb      	ldr	r3, [r7, #24]
 800c71a:	2b02      	cmp	r3, #2
 800c71c:	f200 80a1 	bhi.w	800c862 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800c720:	69bb      	ldr	r3, [r7, #24]
 800c722:	2b00      	cmp	r3, #0
 800c724:	d003      	beq.n	800c72e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800c726:	69bb      	ldr	r3, [r7, #24]
 800c728:	2b01      	cmp	r3, #1
 800c72a:	d056      	beq.n	800c7da <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800c72c:	e099      	b.n	800c862 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c72e:	4b88      	ldr	r3, [pc, #544]	@ (800c950 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	f003 0320 	and.w	r3, r3, #32
 800c736:	2b00      	cmp	r3, #0
 800c738:	d02d      	beq.n	800c796 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c73a:	4b85      	ldr	r3, [pc, #532]	@ (800c950 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	08db      	lsrs	r3, r3, #3
 800c740:	f003 0303 	and.w	r3, r3, #3
 800c744:	4a83      	ldr	r2, [pc, #524]	@ (800c954 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800c746:	fa22 f303 	lsr.w	r3, r2, r3
 800c74a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c74c:	68bb      	ldr	r3, [r7, #8]
 800c74e:	ee07 3a90 	vmov	s15, r3
 800c752:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c756:	697b      	ldr	r3, [r7, #20]
 800c758:	ee07 3a90 	vmov	s15, r3
 800c75c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c760:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c764:	4b7a      	ldr	r3, [pc, #488]	@ (800c950 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c766:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c768:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c76c:	ee07 3a90 	vmov	s15, r3
 800c770:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c774:	ed97 6a03 	vldr	s12, [r7, #12]
 800c778:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800c958 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c77c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c780:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c784:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c788:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c78c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c790:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c794:	e087      	b.n	800c8a6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c796:	697b      	ldr	r3, [r7, #20]
 800c798:	ee07 3a90 	vmov	s15, r3
 800c79c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7a0:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800c95c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c7a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c7a8:	4b69      	ldr	r3, [pc, #420]	@ (800c950 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c7aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c7ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7b0:	ee07 3a90 	vmov	s15, r3
 800c7b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c7b8:	ed97 6a03 	vldr	s12, [r7, #12]
 800c7bc:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800c958 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c7c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c7c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c7c8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c7cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c7d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c7d4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c7d8:	e065      	b.n	800c8a6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c7da:	697b      	ldr	r3, [r7, #20]
 800c7dc:	ee07 3a90 	vmov	s15, r3
 800c7e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7e4:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800c960 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800c7e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c7ec:	4b58      	ldr	r3, [pc, #352]	@ (800c950 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c7ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c7f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7f4:	ee07 3a90 	vmov	s15, r3
 800c7f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c7fc:	ed97 6a03 	vldr	s12, [r7, #12]
 800c800:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800c958 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c804:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c808:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c80c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c810:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c814:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c818:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c81c:	e043      	b.n	800c8a6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c81e:	697b      	ldr	r3, [r7, #20]
 800c820:	ee07 3a90 	vmov	s15, r3
 800c824:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c828:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800c964 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800c82c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c830:	4b47      	ldr	r3, [pc, #284]	@ (800c950 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c832:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c834:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c838:	ee07 3a90 	vmov	s15, r3
 800c83c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c840:	ed97 6a03 	vldr	s12, [r7, #12]
 800c844:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800c958 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c848:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c84c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c850:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c854:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c858:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c85c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c860:	e021      	b.n	800c8a6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c862:	697b      	ldr	r3, [r7, #20]
 800c864:	ee07 3a90 	vmov	s15, r3
 800c868:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c86c:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800c95c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c870:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c874:	4b36      	ldr	r3, [pc, #216]	@ (800c950 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c876:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c878:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c87c:	ee07 3a90 	vmov	s15, r3
 800c880:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c884:	ed97 6a03 	vldr	s12, [r7, #12]
 800c888:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800c958 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c88c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c890:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c894:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c898:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c89c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c8a0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c8a4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800c8a6:	4b2a      	ldr	r3, [pc, #168]	@ (800c950 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c8a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c8aa:	0a5b      	lsrs	r3, r3, #9
 800c8ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c8b0:	ee07 3a90 	vmov	s15, r3
 800c8b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8b8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c8bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c8c0:	edd7 6a07 	vldr	s13, [r7, #28]
 800c8c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c8c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c8cc:	ee17 2a90 	vmov	r2, s15
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800c8d4:	4b1e      	ldr	r3, [pc, #120]	@ (800c950 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c8d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c8d8:	0c1b      	lsrs	r3, r3, #16
 800c8da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c8de:	ee07 3a90 	vmov	s15, r3
 800c8e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c8ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c8ee:	edd7 6a07 	vldr	s13, [r7, #28]
 800c8f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c8f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c8fa:	ee17 2a90 	vmov	r2, s15
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800c902:	4b13      	ldr	r3, [pc, #76]	@ (800c950 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c906:	0e1b      	lsrs	r3, r3, #24
 800c908:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c90c:	ee07 3a90 	vmov	s15, r3
 800c910:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c914:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c918:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c91c:	edd7 6a07 	vldr	s13, [r7, #28]
 800c920:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c924:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c928:	ee17 2a90 	vmov	r2, s15
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800c930:	e008      	b.n	800c944 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	2200      	movs	r2, #0
 800c936:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	2200      	movs	r2, #0
 800c93c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	2200      	movs	r2, #0
 800c942:	609a      	str	r2, [r3, #8]
}
 800c944:	bf00      	nop
 800c946:	3724      	adds	r7, #36	@ 0x24
 800c948:	46bd      	mov	sp, r7
 800c94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c94e:	4770      	bx	lr
 800c950:	58024400 	.word	0x58024400
 800c954:	03d09000 	.word	0x03d09000
 800c958:	46000000 	.word	0x46000000
 800c95c:	4c742400 	.word	0x4c742400
 800c960:	4a742400 	.word	0x4a742400
 800c964:	4af42400 	.word	0x4af42400

0800c968 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c968:	b580      	push	{r7, lr}
 800c96a:	b084      	sub	sp, #16
 800c96c:	af00      	add	r7, sp, #0
 800c96e:	6078      	str	r0, [r7, #4]
 800c970:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c972:	2300      	movs	r3, #0
 800c974:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c976:	4b53      	ldr	r3, [pc, #332]	@ (800cac4 <RCCEx_PLL2_Config+0x15c>)
 800c978:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c97a:	f003 0303 	and.w	r3, r3, #3
 800c97e:	2b03      	cmp	r3, #3
 800c980:	d101      	bne.n	800c986 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c982:	2301      	movs	r3, #1
 800c984:	e099      	b.n	800caba <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c986:	4b4f      	ldr	r3, [pc, #316]	@ (800cac4 <RCCEx_PLL2_Config+0x15c>)
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	4a4e      	ldr	r2, [pc, #312]	@ (800cac4 <RCCEx_PLL2_Config+0x15c>)
 800c98c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c990:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c992:	f7f5 fee9 	bl	8002768 <HAL_GetTick>
 800c996:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c998:	e008      	b.n	800c9ac <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c99a:	f7f5 fee5 	bl	8002768 <HAL_GetTick>
 800c99e:	4602      	mov	r2, r0
 800c9a0:	68bb      	ldr	r3, [r7, #8]
 800c9a2:	1ad3      	subs	r3, r2, r3
 800c9a4:	2b02      	cmp	r3, #2
 800c9a6:	d901      	bls.n	800c9ac <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c9a8:	2303      	movs	r3, #3
 800c9aa:	e086      	b.n	800caba <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c9ac:	4b45      	ldr	r3, [pc, #276]	@ (800cac4 <RCCEx_PLL2_Config+0x15c>)
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d1f0      	bne.n	800c99a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c9b8:	4b42      	ldr	r3, [pc, #264]	@ (800cac4 <RCCEx_PLL2_Config+0x15c>)
 800c9ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c9bc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	031b      	lsls	r3, r3, #12
 800c9c6:	493f      	ldr	r1, [pc, #252]	@ (800cac4 <RCCEx_PLL2_Config+0x15c>)
 800c9c8:	4313      	orrs	r3, r2
 800c9ca:	628b      	str	r3, [r1, #40]	@ 0x28
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	685b      	ldr	r3, [r3, #4]
 800c9d0:	3b01      	subs	r3, #1
 800c9d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	689b      	ldr	r3, [r3, #8]
 800c9da:	3b01      	subs	r3, #1
 800c9dc:	025b      	lsls	r3, r3, #9
 800c9de:	b29b      	uxth	r3, r3
 800c9e0:	431a      	orrs	r2, r3
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	68db      	ldr	r3, [r3, #12]
 800c9e6:	3b01      	subs	r3, #1
 800c9e8:	041b      	lsls	r3, r3, #16
 800c9ea:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800c9ee:	431a      	orrs	r2, r3
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	691b      	ldr	r3, [r3, #16]
 800c9f4:	3b01      	subs	r3, #1
 800c9f6:	061b      	lsls	r3, r3, #24
 800c9f8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800c9fc:	4931      	ldr	r1, [pc, #196]	@ (800cac4 <RCCEx_PLL2_Config+0x15c>)
 800c9fe:	4313      	orrs	r3, r2
 800ca00:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800ca02:	4b30      	ldr	r3, [pc, #192]	@ (800cac4 <RCCEx_PLL2_Config+0x15c>)
 800ca04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca06:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	695b      	ldr	r3, [r3, #20]
 800ca0e:	492d      	ldr	r1, [pc, #180]	@ (800cac4 <RCCEx_PLL2_Config+0x15c>)
 800ca10:	4313      	orrs	r3, r2
 800ca12:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800ca14:	4b2b      	ldr	r3, [pc, #172]	@ (800cac4 <RCCEx_PLL2_Config+0x15c>)
 800ca16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca18:	f023 0220 	bic.w	r2, r3, #32
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	699b      	ldr	r3, [r3, #24]
 800ca20:	4928      	ldr	r1, [pc, #160]	@ (800cac4 <RCCEx_PLL2_Config+0x15c>)
 800ca22:	4313      	orrs	r3, r2
 800ca24:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800ca26:	4b27      	ldr	r3, [pc, #156]	@ (800cac4 <RCCEx_PLL2_Config+0x15c>)
 800ca28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca2a:	4a26      	ldr	r2, [pc, #152]	@ (800cac4 <RCCEx_PLL2_Config+0x15c>)
 800ca2c:	f023 0310 	bic.w	r3, r3, #16
 800ca30:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800ca32:	4b24      	ldr	r3, [pc, #144]	@ (800cac4 <RCCEx_PLL2_Config+0x15c>)
 800ca34:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ca36:	4b24      	ldr	r3, [pc, #144]	@ (800cac8 <RCCEx_PLL2_Config+0x160>)
 800ca38:	4013      	ands	r3, r2
 800ca3a:	687a      	ldr	r2, [r7, #4]
 800ca3c:	69d2      	ldr	r2, [r2, #28]
 800ca3e:	00d2      	lsls	r2, r2, #3
 800ca40:	4920      	ldr	r1, [pc, #128]	@ (800cac4 <RCCEx_PLL2_Config+0x15c>)
 800ca42:	4313      	orrs	r3, r2
 800ca44:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800ca46:	4b1f      	ldr	r3, [pc, #124]	@ (800cac4 <RCCEx_PLL2_Config+0x15c>)
 800ca48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca4a:	4a1e      	ldr	r2, [pc, #120]	@ (800cac4 <RCCEx_PLL2_Config+0x15c>)
 800ca4c:	f043 0310 	orr.w	r3, r3, #16
 800ca50:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800ca52:	683b      	ldr	r3, [r7, #0]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d106      	bne.n	800ca66 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800ca58:	4b1a      	ldr	r3, [pc, #104]	@ (800cac4 <RCCEx_PLL2_Config+0x15c>)
 800ca5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca5c:	4a19      	ldr	r2, [pc, #100]	@ (800cac4 <RCCEx_PLL2_Config+0x15c>)
 800ca5e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ca62:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ca64:	e00f      	b.n	800ca86 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800ca66:	683b      	ldr	r3, [r7, #0]
 800ca68:	2b01      	cmp	r3, #1
 800ca6a:	d106      	bne.n	800ca7a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800ca6c:	4b15      	ldr	r3, [pc, #84]	@ (800cac4 <RCCEx_PLL2_Config+0x15c>)
 800ca6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca70:	4a14      	ldr	r2, [pc, #80]	@ (800cac4 <RCCEx_PLL2_Config+0x15c>)
 800ca72:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ca76:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ca78:	e005      	b.n	800ca86 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800ca7a:	4b12      	ldr	r3, [pc, #72]	@ (800cac4 <RCCEx_PLL2_Config+0x15c>)
 800ca7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca7e:	4a11      	ldr	r2, [pc, #68]	@ (800cac4 <RCCEx_PLL2_Config+0x15c>)
 800ca80:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ca84:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800ca86:	4b0f      	ldr	r3, [pc, #60]	@ (800cac4 <RCCEx_PLL2_Config+0x15c>)
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	4a0e      	ldr	r2, [pc, #56]	@ (800cac4 <RCCEx_PLL2_Config+0x15c>)
 800ca8c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ca90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ca92:	f7f5 fe69 	bl	8002768 <HAL_GetTick>
 800ca96:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ca98:	e008      	b.n	800caac <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ca9a:	f7f5 fe65 	bl	8002768 <HAL_GetTick>
 800ca9e:	4602      	mov	r2, r0
 800caa0:	68bb      	ldr	r3, [r7, #8]
 800caa2:	1ad3      	subs	r3, r2, r3
 800caa4:	2b02      	cmp	r3, #2
 800caa6:	d901      	bls.n	800caac <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800caa8:	2303      	movs	r3, #3
 800caaa:	e006      	b.n	800caba <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800caac:	4b05      	ldr	r3, [pc, #20]	@ (800cac4 <RCCEx_PLL2_Config+0x15c>)
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d0f0      	beq.n	800ca9a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800cab8:	7bfb      	ldrb	r3, [r7, #15]
}
 800caba:	4618      	mov	r0, r3
 800cabc:	3710      	adds	r7, #16
 800cabe:	46bd      	mov	sp, r7
 800cac0:	bd80      	pop	{r7, pc}
 800cac2:	bf00      	nop
 800cac4:	58024400 	.word	0x58024400
 800cac8:	ffff0007 	.word	0xffff0007

0800cacc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800cacc:	b580      	push	{r7, lr}
 800cace:	b084      	sub	sp, #16
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	6078      	str	r0, [r7, #4]
 800cad4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cad6:	2300      	movs	r3, #0
 800cad8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800cada:	4b53      	ldr	r3, [pc, #332]	@ (800cc28 <RCCEx_PLL3_Config+0x15c>)
 800cadc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cade:	f003 0303 	and.w	r3, r3, #3
 800cae2:	2b03      	cmp	r3, #3
 800cae4:	d101      	bne.n	800caea <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800cae6:	2301      	movs	r3, #1
 800cae8:	e099      	b.n	800cc1e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800caea:	4b4f      	ldr	r3, [pc, #316]	@ (800cc28 <RCCEx_PLL3_Config+0x15c>)
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	4a4e      	ldr	r2, [pc, #312]	@ (800cc28 <RCCEx_PLL3_Config+0x15c>)
 800caf0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800caf4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800caf6:	f7f5 fe37 	bl	8002768 <HAL_GetTick>
 800cafa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800cafc:	e008      	b.n	800cb10 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800cafe:	f7f5 fe33 	bl	8002768 <HAL_GetTick>
 800cb02:	4602      	mov	r2, r0
 800cb04:	68bb      	ldr	r3, [r7, #8]
 800cb06:	1ad3      	subs	r3, r2, r3
 800cb08:	2b02      	cmp	r3, #2
 800cb0a:	d901      	bls.n	800cb10 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800cb0c:	2303      	movs	r3, #3
 800cb0e:	e086      	b.n	800cc1e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800cb10:	4b45      	ldr	r3, [pc, #276]	@ (800cc28 <RCCEx_PLL3_Config+0x15c>)
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d1f0      	bne.n	800cafe <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800cb1c:	4b42      	ldr	r3, [pc, #264]	@ (800cc28 <RCCEx_PLL3_Config+0x15c>)
 800cb1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb20:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	051b      	lsls	r3, r3, #20
 800cb2a:	493f      	ldr	r1, [pc, #252]	@ (800cc28 <RCCEx_PLL3_Config+0x15c>)
 800cb2c:	4313      	orrs	r3, r2
 800cb2e:	628b      	str	r3, [r1, #40]	@ 0x28
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	685b      	ldr	r3, [r3, #4]
 800cb34:	3b01      	subs	r3, #1
 800cb36:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	689b      	ldr	r3, [r3, #8]
 800cb3e:	3b01      	subs	r3, #1
 800cb40:	025b      	lsls	r3, r3, #9
 800cb42:	b29b      	uxth	r3, r3
 800cb44:	431a      	orrs	r2, r3
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	68db      	ldr	r3, [r3, #12]
 800cb4a:	3b01      	subs	r3, #1
 800cb4c:	041b      	lsls	r3, r3, #16
 800cb4e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800cb52:	431a      	orrs	r2, r3
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	691b      	ldr	r3, [r3, #16]
 800cb58:	3b01      	subs	r3, #1
 800cb5a:	061b      	lsls	r3, r3, #24
 800cb5c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800cb60:	4931      	ldr	r1, [pc, #196]	@ (800cc28 <RCCEx_PLL3_Config+0x15c>)
 800cb62:	4313      	orrs	r3, r2
 800cb64:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800cb66:	4b30      	ldr	r3, [pc, #192]	@ (800cc28 <RCCEx_PLL3_Config+0x15c>)
 800cb68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb6a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	695b      	ldr	r3, [r3, #20]
 800cb72:	492d      	ldr	r1, [pc, #180]	@ (800cc28 <RCCEx_PLL3_Config+0x15c>)
 800cb74:	4313      	orrs	r3, r2
 800cb76:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800cb78:	4b2b      	ldr	r3, [pc, #172]	@ (800cc28 <RCCEx_PLL3_Config+0x15c>)
 800cb7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb7c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	699b      	ldr	r3, [r3, #24]
 800cb84:	4928      	ldr	r1, [pc, #160]	@ (800cc28 <RCCEx_PLL3_Config+0x15c>)
 800cb86:	4313      	orrs	r3, r2
 800cb88:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800cb8a:	4b27      	ldr	r3, [pc, #156]	@ (800cc28 <RCCEx_PLL3_Config+0x15c>)
 800cb8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb8e:	4a26      	ldr	r2, [pc, #152]	@ (800cc28 <RCCEx_PLL3_Config+0x15c>)
 800cb90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cb94:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800cb96:	4b24      	ldr	r3, [pc, #144]	@ (800cc28 <RCCEx_PLL3_Config+0x15c>)
 800cb98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cb9a:	4b24      	ldr	r3, [pc, #144]	@ (800cc2c <RCCEx_PLL3_Config+0x160>)
 800cb9c:	4013      	ands	r3, r2
 800cb9e:	687a      	ldr	r2, [r7, #4]
 800cba0:	69d2      	ldr	r2, [r2, #28]
 800cba2:	00d2      	lsls	r2, r2, #3
 800cba4:	4920      	ldr	r1, [pc, #128]	@ (800cc28 <RCCEx_PLL3_Config+0x15c>)
 800cba6:	4313      	orrs	r3, r2
 800cba8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800cbaa:	4b1f      	ldr	r3, [pc, #124]	@ (800cc28 <RCCEx_PLL3_Config+0x15c>)
 800cbac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cbae:	4a1e      	ldr	r2, [pc, #120]	@ (800cc28 <RCCEx_PLL3_Config+0x15c>)
 800cbb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800cbb4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800cbb6:	683b      	ldr	r3, [r7, #0]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d106      	bne.n	800cbca <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800cbbc:	4b1a      	ldr	r3, [pc, #104]	@ (800cc28 <RCCEx_PLL3_Config+0x15c>)
 800cbbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cbc0:	4a19      	ldr	r2, [pc, #100]	@ (800cc28 <RCCEx_PLL3_Config+0x15c>)
 800cbc2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800cbc6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800cbc8:	e00f      	b.n	800cbea <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800cbca:	683b      	ldr	r3, [r7, #0]
 800cbcc:	2b01      	cmp	r3, #1
 800cbce:	d106      	bne.n	800cbde <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800cbd0:	4b15      	ldr	r3, [pc, #84]	@ (800cc28 <RCCEx_PLL3_Config+0x15c>)
 800cbd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cbd4:	4a14      	ldr	r2, [pc, #80]	@ (800cc28 <RCCEx_PLL3_Config+0x15c>)
 800cbd6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800cbda:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800cbdc:	e005      	b.n	800cbea <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800cbde:	4b12      	ldr	r3, [pc, #72]	@ (800cc28 <RCCEx_PLL3_Config+0x15c>)
 800cbe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cbe2:	4a11      	ldr	r2, [pc, #68]	@ (800cc28 <RCCEx_PLL3_Config+0x15c>)
 800cbe4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800cbe8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800cbea:	4b0f      	ldr	r3, [pc, #60]	@ (800cc28 <RCCEx_PLL3_Config+0x15c>)
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	4a0e      	ldr	r2, [pc, #56]	@ (800cc28 <RCCEx_PLL3_Config+0x15c>)
 800cbf0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800cbf4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cbf6:	f7f5 fdb7 	bl	8002768 <HAL_GetTick>
 800cbfa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cbfc:	e008      	b.n	800cc10 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800cbfe:	f7f5 fdb3 	bl	8002768 <HAL_GetTick>
 800cc02:	4602      	mov	r2, r0
 800cc04:	68bb      	ldr	r3, [r7, #8]
 800cc06:	1ad3      	subs	r3, r2, r3
 800cc08:	2b02      	cmp	r3, #2
 800cc0a:	d901      	bls.n	800cc10 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800cc0c:	2303      	movs	r3, #3
 800cc0e:	e006      	b.n	800cc1e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cc10:	4b05      	ldr	r3, [pc, #20]	@ (800cc28 <RCCEx_PLL3_Config+0x15c>)
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d0f0      	beq.n	800cbfe <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800cc1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc1e:	4618      	mov	r0, r3
 800cc20:	3710      	adds	r7, #16
 800cc22:	46bd      	mov	sp, r7
 800cc24:	bd80      	pop	{r7, pc}
 800cc26:	bf00      	nop
 800cc28:	58024400 	.word	0x58024400
 800cc2c:	ffff0007 	.word	0xffff0007

0800cc30 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800cc30:	b580      	push	{r7, lr}
 800cc32:	b084      	sub	sp, #16
 800cc34:	af00      	add	r7, sp, #0
 800cc36:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d101      	bne.n	800cc42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800cc3e:	2301      	movs	r3, #1
 800cc40:	e10f      	b.n	800ce62 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	2200      	movs	r2, #0
 800cc46:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	4a87      	ldr	r2, [pc, #540]	@ (800ce6c <HAL_SPI_Init+0x23c>)
 800cc4e:	4293      	cmp	r3, r2
 800cc50:	d00f      	beq.n	800cc72 <HAL_SPI_Init+0x42>
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	4a86      	ldr	r2, [pc, #536]	@ (800ce70 <HAL_SPI_Init+0x240>)
 800cc58:	4293      	cmp	r3, r2
 800cc5a:	d00a      	beq.n	800cc72 <HAL_SPI_Init+0x42>
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	4a84      	ldr	r2, [pc, #528]	@ (800ce74 <HAL_SPI_Init+0x244>)
 800cc62:	4293      	cmp	r3, r2
 800cc64:	d005      	beq.n	800cc72 <HAL_SPI_Init+0x42>
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	68db      	ldr	r3, [r3, #12]
 800cc6a:	2b0f      	cmp	r3, #15
 800cc6c:	d901      	bls.n	800cc72 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800cc6e:	2301      	movs	r3, #1
 800cc70:	e0f7      	b.n	800ce62 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800cc72:	6878      	ldr	r0, [r7, #4]
 800cc74:	f000 fbba 	bl	800d3ec <SPI_GetPacketSize>
 800cc78:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	4a7b      	ldr	r2, [pc, #492]	@ (800ce6c <HAL_SPI_Init+0x23c>)
 800cc80:	4293      	cmp	r3, r2
 800cc82:	d00c      	beq.n	800cc9e <HAL_SPI_Init+0x6e>
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	4a79      	ldr	r2, [pc, #484]	@ (800ce70 <HAL_SPI_Init+0x240>)
 800cc8a:	4293      	cmp	r3, r2
 800cc8c:	d007      	beq.n	800cc9e <HAL_SPI_Init+0x6e>
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	4a78      	ldr	r2, [pc, #480]	@ (800ce74 <HAL_SPI_Init+0x244>)
 800cc94:	4293      	cmp	r3, r2
 800cc96:	d002      	beq.n	800cc9e <HAL_SPI_Init+0x6e>
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	2b08      	cmp	r3, #8
 800cc9c:	d811      	bhi.n	800ccc2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800cca2:	4a72      	ldr	r2, [pc, #456]	@ (800ce6c <HAL_SPI_Init+0x23c>)
 800cca4:	4293      	cmp	r3, r2
 800cca6:	d009      	beq.n	800ccbc <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	4a70      	ldr	r2, [pc, #448]	@ (800ce70 <HAL_SPI_Init+0x240>)
 800ccae:	4293      	cmp	r3, r2
 800ccb0:	d004      	beq.n	800ccbc <HAL_SPI_Init+0x8c>
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	4a6f      	ldr	r2, [pc, #444]	@ (800ce74 <HAL_SPI_Init+0x244>)
 800ccb8:	4293      	cmp	r3, r2
 800ccba:	d104      	bne.n	800ccc6 <HAL_SPI_Init+0x96>
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	2b10      	cmp	r3, #16
 800ccc0:	d901      	bls.n	800ccc6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800ccc2:	2301      	movs	r3, #1
 800ccc4:	e0cd      	b.n	800ce62 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800cccc:	b2db      	uxtb	r3, r3
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d106      	bne.n	800cce0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	2200      	movs	r2, #0
 800ccd6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ccda:	6878      	ldr	r0, [r7, #4]
 800ccdc:	f7f5 f848 	bl	8001d70 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	2202      	movs	r2, #2
 800cce4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	681a      	ldr	r2, [r3, #0]
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	f022 0201 	bic.w	r2, r2, #1
 800ccf6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	689b      	ldr	r3, [r3, #8]
 800ccfe:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800cd02:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	699b      	ldr	r3, [r3, #24]
 800cd08:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800cd0c:	d119      	bne.n	800cd42 <HAL_SPI_Init+0x112>
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	685b      	ldr	r3, [r3, #4]
 800cd12:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800cd16:	d103      	bne.n	800cd20 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d008      	beq.n	800cd32 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d10c      	bne.n	800cd42 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800cd2c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cd30:	d107      	bne.n	800cd42 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	681a      	ldr	r2, [r3, #0]
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800cd40:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	685b      	ldr	r3, [r3, #4]
 800cd46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d00f      	beq.n	800cd6e <HAL_SPI_Init+0x13e>
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	68db      	ldr	r3, [r3, #12]
 800cd52:	2b06      	cmp	r3, #6
 800cd54:	d90b      	bls.n	800cd6e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	430a      	orrs	r2, r1
 800cd6a:	601a      	str	r2, [r3, #0]
 800cd6c:	e007      	b.n	800cd7e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	681a      	ldr	r2, [r3, #0]
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800cd7c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	69da      	ldr	r2, [r3, #28]
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd86:	431a      	orrs	r2, r3
 800cd88:	68bb      	ldr	r3, [r7, #8]
 800cd8a:	431a      	orrs	r2, r3
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cd90:	ea42 0103 	orr.w	r1, r2, r3
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	68da      	ldr	r2, [r3, #12]
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	430a      	orrs	r2, r1
 800cd9e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cda8:	431a      	orrs	r2, r3
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cdae:	431a      	orrs	r2, r3
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	699b      	ldr	r3, [r3, #24]
 800cdb4:	431a      	orrs	r2, r3
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	691b      	ldr	r3, [r3, #16]
 800cdba:	431a      	orrs	r2, r3
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	695b      	ldr	r3, [r3, #20]
 800cdc0:	431a      	orrs	r2, r3
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	6a1b      	ldr	r3, [r3, #32]
 800cdc6:	431a      	orrs	r2, r3
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	685b      	ldr	r3, [r3, #4]
 800cdcc:	431a      	orrs	r2, r3
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cdd2:	431a      	orrs	r2, r3
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	689b      	ldr	r3, [r3, #8]
 800cdd8:	431a      	orrs	r2, r3
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cdde:	ea42 0103 	orr.w	r1, r2, r3
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	430a      	orrs	r2, r1
 800cdec:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	685b      	ldr	r3, [r3, #4]
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d113      	bne.n	800ce1e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	689b      	ldr	r3, [r3, #8]
 800cdfc:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ce08:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	689b      	ldr	r3, [r3, #8]
 800ce10:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800ce1c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	f022 0201 	bic.w	r2, r2, #1
 800ce2c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	685b      	ldr	r3, [r3, #4]
 800ce32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d00a      	beq.n	800ce50 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	68db      	ldr	r3, [r3, #12]
 800ce40:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	430a      	orrs	r2, r1
 800ce4e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	2200      	movs	r2, #0
 800ce54:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	2201      	movs	r2, #1
 800ce5c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800ce60:	2300      	movs	r3, #0
}
 800ce62:	4618      	mov	r0, r3
 800ce64:	3710      	adds	r7, #16
 800ce66:	46bd      	mov	sp, r7
 800ce68:	bd80      	pop	{r7, pc}
 800ce6a:	bf00      	nop
 800ce6c:	40013000 	.word	0x40013000
 800ce70:	40003800 	.word	0x40003800
 800ce74:	40003c00 	.word	0x40003c00

0800ce78 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800ce78:	b580      	push	{r7, lr}
 800ce7a:	b08a      	sub	sp, #40	@ 0x28
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	691b      	ldr	r3, [r3, #16]
 800ce86:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	695b      	ldr	r3, [r3, #20]
 800ce8e:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800ce90:	6a3a      	ldr	r2, [r7, #32]
 800ce92:	69fb      	ldr	r3, [r7, #28]
 800ce94:	4013      	ands	r3, r2
 800ce96:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	689b      	ldr	r3, [r3, #8]
 800ce9e:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800cea0:	2300      	movs	r3, #0
 800cea2:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800ceaa:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	3330      	adds	r3, #48	@ 0x30
 800ceb2:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800ceb4:	69fb      	ldr	r3, [r7, #28]
 800ceb6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d010      	beq.n	800cee0 <HAL_SPI_IRQHandler+0x68>
 800cebe:	6a3b      	ldr	r3, [r7, #32]
 800cec0:	f003 0308 	and.w	r3, r3, #8
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d00b      	beq.n	800cee0 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	699a      	ldr	r2, [r3, #24]
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ced6:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 800ced8:	6878      	ldr	r0, [r7, #4]
 800ceda:	f000 f9c3 	bl	800d264 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 800cede:	e192      	b.n	800d206 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800cee0:	69bb      	ldr	r3, [r7, #24]
 800cee2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d113      	bne.n	800cf12 <HAL_SPI_IRQHandler+0x9a>
 800ceea:	69bb      	ldr	r3, [r7, #24]
 800ceec:	f003 0320 	and.w	r3, r3, #32
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d10e      	bne.n	800cf12 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800cef4:	69bb      	ldr	r3, [r7, #24]
 800cef6:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d009      	beq.n	800cf12 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cf02:	6878      	ldr	r0, [r7, #4]
 800cf04:	4798      	blx	r3
    hspi->RxISR(hspi);
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cf0a:	6878      	ldr	r0, [r7, #4]
 800cf0c:	4798      	blx	r3
    handled = 1UL;
 800cf0e:	2301      	movs	r3, #1
 800cf10:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800cf12:	69bb      	ldr	r3, [r7, #24]
 800cf14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d10f      	bne.n	800cf3c <HAL_SPI_IRQHandler+0xc4>
 800cf1c:	69bb      	ldr	r3, [r7, #24]
 800cf1e:	f003 0301 	and.w	r3, r3, #1
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d00a      	beq.n	800cf3c <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800cf26:	69bb      	ldr	r3, [r7, #24]
 800cf28:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d105      	bne.n	800cf3c <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cf34:	6878      	ldr	r0, [r7, #4]
 800cf36:	4798      	blx	r3
    handled = 1UL;
 800cf38:	2301      	movs	r3, #1
 800cf3a:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800cf3c:	69bb      	ldr	r3, [r7, #24]
 800cf3e:	f003 0320 	and.w	r3, r3, #32
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d10f      	bne.n	800cf66 <HAL_SPI_IRQHandler+0xee>
 800cf46:	69bb      	ldr	r3, [r7, #24]
 800cf48:	f003 0302 	and.w	r3, r3, #2
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d00a      	beq.n	800cf66 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800cf50:	69bb      	ldr	r3, [r7, #24]
 800cf52:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d105      	bne.n	800cf66 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cf5e:	6878      	ldr	r0, [r7, #4]
 800cf60:	4798      	blx	r3
    handled = 1UL;
 800cf62:	2301      	movs	r3, #1
 800cf64:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800cf66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	f040 8147 	bne.w	800d1fc <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800cf6e:	69bb      	ldr	r3, [r7, #24]
 800cf70:	f003 0308 	and.w	r3, r3, #8
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	f000 808b 	beq.w	800d090 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	699a      	ldr	r2, [r3, #24]
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	f042 0208 	orr.w	r2, r2, #8
 800cf88:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	699a      	ldr	r2, [r3, #24]
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	f042 0210 	orr.w	r2, r2, #16
 800cf98:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	699a      	ldr	r2, [r3, #24]
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800cfa8:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	691a      	ldr	r2, [r3, #16]
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	f022 0208 	bic.w	r2, r2, #8
 800cfb8:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	689b      	ldr	r3, [r3, #8]
 800cfc0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d13d      	bne.n	800d044 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 800cfc8:	e036      	b.n	800d038 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	68db      	ldr	r3, [r3, #12]
 800cfce:	2b0f      	cmp	r3, #15
 800cfd0:	d90b      	bls.n	800cfea <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	681a      	ldr	r2, [r3, #0]
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cfda:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800cfdc:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cfe2:	1d1a      	adds	r2, r3, #4
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	665a      	str	r2, [r3, #100]	@ 0x64
 800cfe8:	e01d      	b.n	800d026 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	68db      	ldr	r3, [r3, #12]
 800cfee:	2b07      	cmp	r3, #7
 800cff0:	d90b      	bls.n	800d00a <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cff6:	68fa      	ldr	r2, [r7, #12]
 800cff8:	8812      	ldrh	r2, [r2, #0]
 800cffa:	b292      	uxth	r2, r2
 800cffc:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d002:	1c9a      	adds	r2, r3, #2
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	665a      	str	r2, [r3, #100]	@ 0x64
 800d008:	e00d      	b.n	800d026 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d016:	7812      	ldrb	r2, [r2, #0]
 800d018:	b2d2      	uxtb	r2, r2
 800d01a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d020:	1c5a      	adds	r2, r3, #1
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d02c:	b29b      	uxth	r3, r3
 800d02e:	3b01      	subs	r3, #1
 800d030:	b29a      	uxth	r2, r3
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d03e:	b29b      	uxth	r3, r3
 800d040:	2b00      	cmp	r3, #0
 800d042:	d1c2      	bne.n	800cfca <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 800d044:	6878      	ldr	r0, [r7, #4]
 800d046:	f000 f931 	bl	800d2ac <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	2201      	movs	r2, #1
 800d04e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d003      	beq.n	800d064 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800d05c:	6878      	ldr	r0, [r7, #4]
 800d05e:	f000 f8f7 	bl	800d250 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800d062:	e0d0      	b.n	800d206 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800d064:	7cfb      	ldrb	r3, [r7, #19]
 800d066:	2b05      	cmp	r3, #5
 800d068:	d103      	bne.n	800d072 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800d06a:	6878      	ldr	r0, [r7, #4]
 800d06c:	f000 f8e6 	bl	800d23c <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800d070:	e0c6      	b.n	800d200 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800d072:	7cfb      	ldrb	r3, [r7, #19]
 800d074:	2b04      	cmp	r3, #4
 800d076:	d103      	bne.n	800d080 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 800d078:	6878      	ldr	r0, [r7, #4]
 800d07a:	f000 f8d5 	bl	800d228 <HAL_SPI_RxCpltCallback>
    return;
 800d07e:	e0bf      	b.n	800d200 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800d080:	7cfb      	ldrb	r3, [r7, #19]
 800d082:	2b03      	cmp	r3, #3
 800d084:	f040 80bc 	bne.w	800d200 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 800d088:	6878      	ldr	r0, [r7, #4]
 800d08a:	f000 f8c3 	bl	800d214 <HAL_SPI_TxCpltCallback>
    return;
 800d08e:	e0b7      	b.n	800d200 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800d090:	69bb      	ldr	r3, [r7, #24]
 800d092:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 800d096:	2b00      	cmp	r3, #0
 800d098:	f000 80b5 	beq.w	800d206 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800d09c:	69bb      	ldr	r3, [r7, #24]
 800d09e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d00f      	beq.n	800d0c6 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d0ac:	f043 0204 	orr.w	r2, r3, #4
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	699a      	ldr	r2, [r3, #24]
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d0c4:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800d0c6:	69bb      	ldr	r3, [r7, #24]
 800d0c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d00f      	beq.n	800d0f0 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d0d6:	f043 0201 	orr.w	r2, r3, #1
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	699a      	ldr	r2, [r3, #24]
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d0ee:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800d0f0:	69bb      	ldr	r3, [r7, #24]
 800d0f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d00f      	beq.n	800d11a <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d100:	f043 0208 	orr.w	r2, r3, #8
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	699a      	ldr	r2, [r3, #24]
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800d118:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800d11a:	69bb      	ldr	r3, [r7, #24]
 800d11c:	f003 0320 	and.w	r3, r3, #32
 800d120:	2b00      	cmp	r3, #0
 800d122:	d00f      	beq.n	800d144 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d12a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	699a      	ldr	r2, [r3, #24]
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	f042 0220 	orr.w	r2, r2, #32
 800d142:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d05a      	beq.n	800d204 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	681a      	ldr	r2, [r3, #0]
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	f022 0201 	bic.w	r2, r2, #1
 800d15c:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	6919      	ldr	r1, [r3, #16]
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	681a      	ldr	r2, [r3, #0]
 800d168:	4b28      	ldr	r3, [pc, #160]	@ (800d20c <HAL_SPI_IRQHandler+0x394>)
 800d16a:	400b      	ands	r3, r1
 800d16c:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800d16e:	697b      	ldr	r3, [r7, #20]
 800d170:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800d174:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800d178:	d138      	bne.n	800d1ec <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	689a      	ldr	r2, [r3, #8]
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800d188:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d013      	beq.n	800d1ba <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d196:	4a1e      	ldr	r2, [pc, #120]	@ (800d210 <HAL_SPI_IRQHandler+0x398>)
 800d198:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d19e:	4618      	mov	r0, r3
 800d1a0:	f7f8 f876 	bl	8005290 <HAL_DMA_Abort_IT>
 800d1a4:	4603      	mov	r3, r0
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d007      	beq.n	800d1ba <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d1b0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d020      	beq.n	800d204 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d1c6:	4a12      	ldr	r2, [pc, #72]	@ (800d210 <HAL_SPI_IRQHandler+0x398>)
 800d1c8:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d1ce:	4618      	mov	r0, r3
 800d1d0:	f7f8 f85e 	bl	8005290 <HAL_DMA_Abort_IT>
 800d1d4:	4603      	mov	r3, r0
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d014      	beq.n	800d204 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d1e0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800d1ea:	e00b      	b.n	800d204 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	2201      	movs	r2, #1
 800d1f0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 800d1f4:	6878      	ldr	r0, [r7, #4]
 800d1f6:	f000 f82b 	bl	800d250 <HAL_SPI_ErrorCallback>
    return;
 800d1fa:	e003      	b.n	800d204 <HAL_SPI_IRQHandler+0x38c>
    return;
 800d1fc:	bf00      	nop
 800d1fe:	e002      	b.n	800d206 <HAL_SPI_IRQHandler+0x38e>
    return;
 800d200:	bf00      	nop
 800d202:	e000      	b.n	800d206 <HAL_SPI_IRQHandler+0x38e>
    return;
 800d204:	bf00      	nop
  }
}
 800d206:	3728      	adds	r7, #40	@ 0x28
 800d208:	46bd      	mov	sp, r7
 800d20a:	bd80      	pop	{r7, pc}
 800d20c:	fffffc94 	.word	0xfffffc94
 800d210:	0800d279 	.word	0x0800d279

0800d214 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800d214:	b480      	push	{r7}
 800d216:	b083      	sub	sp, #12
 800d218:	af00      	add	r7, sp, #0
 800d21a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800d21c:	bf00      	nop
 800d21e:	370c      	adds	r7, #12
 800d220:	46bd      	mov	sp, r7
 800d222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d226:	4770      	bx	lr

0800d228 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800d228:	b480      	push	{r7}
 800d22a:	b083      	sub	sp, #12
 800d22c:	af00      	add	r7, sp, #0
 800d22e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800d230:	bf00      	nop
 800d232:	370c      	adds	r7, #12
 800d234:	46bd      	mov	sp, r7
 800d236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d23a:	4770      	bx	lr

0800d23c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800d23c:	b480      	push	{r7}
 800d23e:	b083      	sub	sp, #12
 800d240:	af00      	add	r7, sp, #0
 800d242:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800d244:	bf00      	nop
 800d246:	370c      	adds	r7, #12
 800d248:	46bd      	mov	sp, r7
 800d24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d24e:	4770      	bx	lr

0800d250 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800d250:	b480      	push	{r7}
 800d252:	b083      	sub	sp, #12
 800d254:	af00      	add	r7, sp, #0
 800d256:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800d258:	bf00      	nop
 800d25a:	370c      	adds	r7, #12
 800d25c:	46bd      	mov	sp, r7
 800d25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d262:	4770      	bx	lr

0800d264 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800d264:	b480      	push	{r7}
 800d266:	b083      	sub	sp, #12
 800d268:	af00      	add	r7, sp, #0
 800d26a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 800d26c:	bf00      	nop
 800d26e:	370c      	adds	r7, #12
 800d270:	46bd      	mov	sp, r7
 800d272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d276:	4770      	bx	lr

0800d278 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d278:	b580      	push	{r7, lr}
 800d27a:	b084      	sub	sp, #16
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d284:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	2200      	movs	r2, #0
 800d28a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	2200      	movs	r2, #0
 800d292:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	2201      	movs	r2, #1
 800d29a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800d29e:	68f8      	ldr	r0, [r7, #12]
 800d2a0:	f7ff ffd6 	bl	800d250 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d2a4:	bf00      	nop
 800d2a6:	3710      	adds	r7, #16
 800d2a8:	46bd      	mov	sp, r7
 800d2aa:	bd80      	pop	{r7, pc}

0800d2ac <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800d2ac:	b480      	push	{r7}
 800d2ae:	b085      	sub	sp, #20
 800d2b0:	af00      	add	r7, sp, #0
 800d2b2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	695b      	ldr	r3, [r3, #20]
 800d2ba:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	699a      	ldr	r2, [r3, #24]
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	f042 0208 	orr.w	r2, r2, #8
 800d2ca:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	699a      	ldr	r2, [r3, #24]
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	f042 0210 	orr.w	r2, r2, #16
 800d2da:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	681a      	ldr	r2, [r3, #0]
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	f022 0201 	bic.w	r2, r2, #1
 800d2ea:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	6919      	ldr	r1, [r3, #16]
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	681a      	ldr	r2, [r3, #0]
 800d2f6:	4b3c      	ldr	r3, [pc, #240]	@ (800d3e8 <SPI_CloseTransfer+0x13c>)
 800d2f8:	400b      	ands	r3, r1
 800d2fa:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	689a      	ldr	r2, [r3, #8]
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800d30a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800d312:	b2db      	uxtb	r3, r3
 800d314:	2b04      	cmp	r3, #4
 800d316:	d014      	beq.n	800d342 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	f003 0320 	and.w	r3, r3, #32
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d00f      	beq.n	800d342 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d328:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	699a      	ldr	r2, [r3, #24]
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	f042 0220 	orr.w	r2, r2, #32
 800d340:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800d348:	b2db      	uxtb	r3, r3
 800d34a:	2b03      	cmp	r3, #3
 800d34c:	d014      	beq.n	800d378 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d354:	2b00      	cmp	r3, #0
 800d356:	d00f      	beq.n	800d378 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d35e:	f043 0204 	orr.w	r2, r3, #4
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	699a      	ldr	r2, [r3, #24]
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d376:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d00f      	beq.n	800d3a2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d388:	f043 0201 	orr.w	r2, r3, #1
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	699a      	ldr	r2, [r3, #24]
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d3a0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d00f      	beq.n	800d3cc <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d3b2:	f043 0208 	orr.w	r2, r3, #8
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	699a      	ldr	r2, [r3, #24]
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800d3ca:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	2200      	movs	r2, #0
 800d3d0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	2200      	movs	r2, #0
 800d3d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800d3dc:	bf00      	nop
 800d3de:	3714      	adds	r7, #20
 800d3e0:	46bd      	mov	sp, r7
 800d3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e6:	4770      	bx	lr
 800d3e8:	fffffc90 	.word	0xfffffc90

0800d3ec <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800d3ec:	b480      	push	{r7}
 800d3ee:	b085      	sub	sp, #20
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d3f8:	095b      	lsrs	r3, r3, #5
 800d3fa:	3301      	adds	r3, #1
 800d3fc:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	68db      	ldr	r3, [r3, #12]
 800d402:	3301      	adds	r3, #1
 800d404:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800d406:	68bb      	ldr	r3, [r7, #8]
 800d408:	3307      	adds	r3, #7
 800d40a:	08db      	lsrs	r3, r3, #3
 800d40c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800d40e:	68bb      	ldr	r3, [r7, #8]
 800d410:	68fa      	ldr	r2, [r7, #12]
 800d412:	fb02 f303 	mul.w	r3, r2, r3
}
 800d416:	4618      	mov	r0, r3
 800d418:	3714      	adds	r7, #20
 800d41a:	46bd      	mov	sp, r7
 800d41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d420:	4770      	bx	lr

0800d422 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d422:	b580      	push	{r7, lr}
 800d424:	b082      	sub	sp, #8
 800d426:	af00      	add	r7, sp, #0
 800d428:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d101      	bne.n	800d434 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d430:	2301      	movs	r3, #1
 800d432:	e049      	b.n	800d4c8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d43a:	b2db      	uxtb	r3, r3
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d106      	bne.n	800d44e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	2200      	movs	r2, #0
 800d444:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d448:	6878      	ldr	r0, [r7, #4]
 800d44a:	f7f4 fd01 	bl	8001e50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	2202      	movs	r2, #2
 800d452:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	681a      	ldr	r2, [r3, #0]
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	3304      	adds	r3, #4
 800d45e:	4619      	mov	r1, r3
 800d460:	4610      	mov	r0, r2
 800d462:	f000 fb45 	bl	800daf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	2201      	movs	r2, #1
 800d46a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	2201      	movs	r2, #1
 800d472:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	2201      	movs	r2, #1
 800d47a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	2201      	movs	r2, #1
 800d482:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	2201      	movs	r2, #1
 800d48a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	2201      	movs	r2, #1
 800d492:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	2201      	movs	r2, #1
 800d49a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	2201      	movs	r2, #1
 800d4a2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	2201      	movs	r2, #1
 800d4aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	2201      	movs	r2, #1
 800d4b2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	2201      	movs	r2, #1
 800d4ba:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	2201      	movs	r2, #1
 800d4c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d4c6:	2300      	movs	r3, #0
}
 800d4c8:	4618      	mov	r0, r3
 800d4ca:	3708      	adds	r7, #8
 800d4cc:	46bd      	mov	sp, r7
 800d4ce:	bd80      	pop	{r7, pc}

0800d4d0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800d4d0:	b480      	push	{r7}
 800d4d2:	b085      	sub	sp, #20
 800d4d4:	af00      	add	r7, sp, #0
 800d4d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d4de:	b2db      	uxtb	r3, r3
 800d4e0:	2b01      	cmp	r3, #1
 800d4e2:	d001      	beq.n	800d4e8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800d4e4:	2301      	movs	r3, #1
 800d4e6:	e04c      	b.n	800d582 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	2202      	movs	r2, #2
 800d4ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	4a26      	ldr	r2, [pc, #152]	@ (800d590 <HAL_TIM_Base_Start+0xc0>)
 800d4f6:	4293      	cmp	r3, r2
 800d4f8:	d022      	beq.n	800d540 <HAL_TIM_Base_Start+0x70>
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d502:	d01d      	beq.n	800d540 <HAL_TIM_Base_Start+0x70>
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	4a22      	ldr	r2, [pc, #136]	@ (800d594 <HAL_TIM_Base_Start+0xc4>)
 800d50a:	4293      	cmp	r3, r2
 800d50c:	d018      	beq.n	800d540 <HAL_TIM_Base_Start+0x70>
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	4a21      	ldr	r2, [pc, #132]	@ (800d598 <HAL_TIM_Base_Start+0xc8>)
 800d514:	4293      	cmp	r3, r2
 800d516:	d013      	beq.n	800d540 <HAL_TIM_Base_Start+0x70>
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	4a1f      	ldr	r2, [pc, #124]	@ (800d59c <HAL_TIM_Base_Start+0xcc>)
 800d51e:	4293      	cmp	r3, r2
 800d520:	d00e      	beq.n	800d540 <HAL_TIM_Base_Start+0x70>
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	4a1e      	ldr	r2, [pc, #120]	@ (800d5a0 <HAL_TIM_Base_Start+0xd0>)
 800d528:	4293      	cmp	r3, r2
 800d52a:	d009      	beq.n	800d540 <HAL_TIM_Base_Start+0x70>
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	4a1c      	ldr	r2, [pc, #112]	@ (800d5a4 <HAL_TIM_Base_Start+0xd4>)
 800d532:	4293      	cmp	r3, r2
 800d534:	d004      	beq.n	800d540 <HAL_TIM_Base_Start+0x70>
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	4a1b      	ldr	r2, [pc, #108]	@ (800d5a8 <HAL_TIM_Base_Start+0xd8>)
 800d53c:	4293      	cmp	r3, r2
 800d53e:	d115      	bne.n	800d56c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	689a      	ldr	r2, [r3, #8]
 800d546:	4b19      	ldr	r3, [pc, #100]	@ (800d5ac <HAL_TIM_Base_Start+0xdc>)
 800d548:	4013      	ands	r3, r2
 800d54a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	2b06      	cmp	r3, #6
 800d550:	d015      	beq.n	800d57e <HAL_TIM_Base_Start+0xae>
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d558:	d011      	beq.n	800d57e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	681a      	ldr	r2, [r3, #0]
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	f042 0201 	orr.w	r2, r2, #1
 800d568:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d56a:	e008      	b.n	800d57e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	681a      	ldr	r2, [r3, #0]
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	f042 0201 	orr.w	r2, r2, #1
 800d57a:	601a      	str	r2, [r3, #0]
 800d57c:	e000      	b.n	800d580 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d57e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d580:	2300      	movs	r3, #0
}
 800d582:	4618      	mov	r0, r3
 800d584:	3714      	adds	r7, #20
 800d586:	46bd      	mov	sp, r7
 800d588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d58c:	4770      	bx	lr
 800d58e:	bf00      	nop
 800d590:	40010000 	.word	0x40010000
 800d594:	40000400 	.word	0x40000400
 800d598:	40000800 	.word	0x40000800
 800d59c:	40000c00 	.word	0x40000c00
 800d5a0:	40010400 	.word	0x40010400
 800d5a4:	40001800 	.word	0x40001800
 800d5a8:	40014000 	.word	0x40014000
 800d5ac:	00010007 	.word	0x00010007

0800d5b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d5b0:	b480      	push	{r7}
 800d5b2:	b085      	sub	sp, #20
 800d5b4:	af00      	add	r7, sp, #0
 800d5b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d5be:	b2db      	uxtb	r3, r3
 800d5c0:	2b01      	cmp	r3, #1
 800d5c2:	d001      	beq.n	800d5c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d5c4:	2301      	movs	r3, #1
 800d5c6:	e054      	b.n	800d672 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	2202      	movs	r2, #2
 800d5cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	68da      	ldr	r2, [r3, #12]
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	f042 0201 	orr.w	r2, r2, #1
 800d5de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	4a26      	ldr	r2, [pc, #152]	@ (800d680 <HAL_TIM_Base_Start_IT+0xd0>)
 800d5e6:	4293      	cmp	r3, r2
 800d5e8:	d022      	beq.n	800d630 <HAL_TIM_Base_Start_IT+0x80>
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d5f2:	d01d      	beq.n	800d630 <HAL_TIM_Base_Start_IT+0x80>
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	4a22      	ldr	r2, [pc, #136]	@ (800d684 <HAL_TIM_Base_Start_IT+0xd4>)
 800d5fa:	4293      	cmp	r3, r2
 800d5fc:	d018      	beq.n	800d630 <HAL_TIM_Base_Start_IT+0x80>
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	4a21      	ldr	r2, [pc, #132]	@ (800d688 <HAL_TIM_Base_Start_IT+0xd8>)
 800d604:	4293      	cmp	r3, r2
 800d606:	d013      	beq.n	800d630 <HAL_TIM_Base_Start_IT+0x80>
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	4a1f      	ldr	r2, [pc, #124]	@ (800d68c <HAL_TIM_Base_Start_IT+0xdc>)
 800d60e:	4293      	cmp	r3, r2
 800d610:	d00e      	beq.n	800d630 <HAL_TIM_Base_Start_IT+0x80>
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	4a1e      	ldr	r2, [pc, #120]	@ (800d690 <HAL_TIM_Base_Start_IT+0xe0>)
 800d618:	4293      	cmp	r3, r2
 800d61a:	d009      	beq.n	800d630 <HAL_TIM_Base_Start_IT+0x80>
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	4a1c      	ldr	r2, [pc, #112]	@ (800d694 <HAL_TIM_Base_Start_IT+0xe4>)
 800d622:	4293      	cmp	r3, r2
 800d624:	d004      	beq.n	800d630 <HAL_TIM_Base_Start_IT+0x80>
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	4a1b      	ldr	r2, [pc, #108]	@ (800d698 <HAL_TIM_Base_Start_IT+0xe8>)
 800d62c:	4293      	cmp	r3, r2
 800d62e:	d115      	bne.n	800d65c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	689a      	ldr	r2, [r3, #8]
 800d636:	4b19      	ldr	r3, [pc, #100]	@ (800d69c <HAL_TIM_Base_Start_IT+0xec>)
 800d638:	4013      	ands	r3, r2
 800d63a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	2b06      	cmp	r3, #6
 800d640:	d015      	beq.n	800d66e <HAL_TIM_Base_Start_IT+0xbe>
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d648:	d011      	beq.n	800d66e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	681a      	ldr	r2, [r3, #0]
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	f042 0201 	orr.w	r2, r2, #1
 800d658:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d65a:	e008      	b.n	800d66e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	681a      	ldr	r2, [r3, #0]
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	f042 0201 	orr.w	r2, r2, #1
 800d66a:	601a      	str	r2, [r3, #0]
 800d66c:	e000      	b.n	800d670 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d66e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d670:	2300      	movs	r3, #0
}
 800d672:	4618      	mov	r0, r3
 800d674:	3714      	adds	r7, #20
 800d676:	46bd      	mov	sp, r7
 800d678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d67c:	4770      	bx	lr
 800d67e:	bf00      	nop
 800d680:	40010000 	.word	0x40010000
 800d684:	40000400 	.word	0x40000400
 800d688:	40000800 	.word	0x40000800
 800d68c:	40000c00 	.word	0x40000c00
 800d690:	40010400 	.word	0x40010400
 800d694:	40001800 	.word	0x40001800
 800d698:	40014000 	.word	0x40014000
 800d69c:	00010007 	.word	0x00010007

0800d6a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d6a0:	b580      	push	{r7, lr}
 800d6a2:	b084      	sub	sp, #16
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	68db      	ldr	r3, [r3, #12]
 800d6ae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	691b      	ldr	r3, [r3, #16]
 800d6b6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800d6b8:	68bb      	ldr	r3, [r7, #8]
 800d6ba:	f003 0302 	and.w	r3, r3, #2
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d020      	beq.n	800d704 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	f003 0302 	and.w	r3, r3, #2
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d01b      	beq.n	800d704 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	f06f 0202 	mvn.w	r2, #2
 800d6d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	2201      	movs	r2, #1
 800d6da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	699b      	ldr	r3, [r3, #24]
 800d6e2:	f003 0303 	and.w	r3, r3, #3
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d003      	beq.n	800d6f2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d6ea:	6878      	ldr	r0, [r7, #4]
 800d6ec:	f000 f9e2 	bl	800dab4 <HAL_TIM_IC_CaptureCallback>
 800d6f0:	e005      	b.n	800d6fe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d6f2:	6878      	ldr	r0, [r7, #4]
 800d6f4:	f000 f9d4 	bl	800daa0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d6f8:	6878      	ldr	r0, [r7, #4]
 800d6fa:	f000 f9e5 	bl	800dac8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	2200      	movs	r2, #0
 800d702:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800d704:	68bb      	ldr	r3, [r7, #8]
 800d706:	f003 0304 	and.w	r3, r3, #4
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d020      	beq.n	800d750 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	f003 0304 	and.w	r3, r3, #4
 800d714:	2b00      	cmp	r3, #0
 800d716:	d01b      	beq.n	800d750 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	f06f 0204 	mvn.w	r2, #4
 800d720:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	2202      	movs	r2, #2
 800d726:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	699b      	ldr	r3, [r3, #24]
 800d72e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d732:	2b00      	cmp	r3, #0
 800d734:	d003      	beq.n	800d73e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d736:	6878      	ldr	r0, [r7, #4]
 800d738:	f000 f9bc 	bl	800dab4 <HAL_TIM_IC_CaptureCallback>
 800d73c:	e005      	b.n	800d74a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d73e:	6878      	ldr	r0, [r7, #4]
 800d740:	f000 f9ae 	bl	800daa0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d744:	6878      	ldr	r0, [r7, #4]
 800d746:	f000 f9bf 	bl	800dac8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	2200      	movs	r2, #0
 800d74e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800d750:	68bb      	ldr	r3, [r7, #8]
 800d752:	f003 0308 	and.w	r3, r3, #8
 800d756:	2b00      	cmp	r3, #0
 800d758:	d020      	beq.n	800d79c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	f003 0308 	and.w	r3, r3, #8
 800d760:	2b00      	cmp	r3, #0
 800d762:	d01b      	beq.n	800d79c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	f06f 0208 	mvn.w	r2, #8
 800d76c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	2204      	movs	r2, #4
 800d772:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	69db      	ldr	r3, [r3, #28]
 800d77a:	f003 0303 	and.w	r3, r3, #3
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d003      	beq.n	800d78a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d782:	6878      	ldr	r0, [r7, #4]
 800d784:	f000 f996 	bl	800dab4 <HAL_TIM_IC_CaptureCallback>
 800d788:	e005      	b.n	800d796 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d78a:	6878      	ldr	r0, [r7, #4]
 800d78c:	f000 f988 	bl	800daa0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d790:	6878      	ldr	r0, [r7, #4]
 800d792:	f000 f999 	bl	800dac8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	2200      	movs	r2, #0
 800d79a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800d79c:	68bb      	ldr	r3, [r7, #8]
 800d79e:	f003 0310 	and.w	r3, r3, #16
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d020      	beq.n	800d7e8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	f003 0310 	and.w	r3, r3, #16
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d01b      	beq.n	800d7e8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	f06f 0210 	mvn.w	r2, #16
 800d7b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	2208      	movs	r2, #8
 800d7be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	69db      	ldr	r3, [r3, #28]
 800d7c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d003      	beq.n	800d7d6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d7ce:	6878      	ldr	r0, [r7, #4]
 800d7d0:	f000 f970 	bl	800dab4 <HAL_TIM_IC_CaptureCallback>
 800d7d4:	e005      	b.n	800d7e2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d7d6:	6878      	ldr	r0, [r7, #4]
 800d7d8:	f000 f962 	bl	800daa0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d7dc:	6878      	ldr	r0, [r7, #4]
 800d7de:	f000 f973 	bl	800dac8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	2200      	movs	r2, #0
 800d7e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800d7e8:	68bb      	ldr	r3, [r7, #8]
 800d7ea:	f003 0301 	and.w	r3, r3, #1
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d00c      	beq.n	800d80c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	f003 0301 	and.w	r3, r3, #1
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d007      	beq.n	800d80c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	f06f 0201 	mvn.w	r2, #1
 800d804:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d806:	6878      	ldr	r0, [r7, #4]
 800d808:	f7f4 fe16 	bl	8002438 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d80c:	68bb      	ldr	r3, [r7, #8]
 800d80e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d812:	2b00      	cmp	r3, #0
 800d814:	d104      	bne.n	800d820 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800d816:	68bb      	ldr	r3, [r7, #8]
 800d818:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d00c      	beq.n	800d83a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d826:	2b00      	cmp	r3, #0
 800d828:	d007      	beq.n	800d83a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800d832:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d834:	6878      	ldr	r0, [r7, #4]
 800d836:	f000 fb37 	bl	800dea8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800d83a:	68bb      	ldr	r3, [r7, #8]
 800d83c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d840:	2b00      	cmp	r3, #0
 800d842:	d00c      	beq.n	800d85e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d007      	beq.n	800d85e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800d856:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d858:	6878      	ldr	r0, [r7, #4]
 800d85a:	f000 fb2f 	bl	800debc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800d85e:	68bb      	ldr	r3, [r7, #8]
 800d860:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d864:	2b00      	cmp	r3, #0
 800d866:	d00c      	beq.n	800d882 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d007      	beq.n	800d882 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800d87a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d87c:	6878      	ldr	r0, [r7, #4]
 800d87e:	f000 f92d 	bl	800dadc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800d882:	68bb      	ldr	r3, [r7, #8]
 800d884:	f003 0320 	and.w	r3, r3, #32
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d00c      	beq.n	800d8a6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	f003 0320 	and.w	r3, r3, #32
 800d892:	2b00      	cmp	r3, #0
 800d894:	d007      	beq.n	800d8a6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	f06f 0220 	mvn.w	r2, #32
 800d89e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d8a0:	6878      	ldr	r0, [r7, #4]
 800d8a2:	f000 faf7 	bl	800de94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d8a6:	bf00      	nop
 800d8a8:	3710      	adds	r7, #16
 800d8aa:	46bd      	mov	sp, r7
 800d8ac:	bd80      	pop	{r7, pc}
	...

0800d8b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d8b0:	b580      	push	{r7, lr}
 800d8b2:	b084      	sub	sp, #16
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	6078      	str	r0, [r7, #4]
 800d8b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d8ba:	2300      	movs	r3, #0
 800d8bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d8c4:	2b01      	cmp	r3, #1
 800d8c6:	d101      	bne.n	800d8cc <HAL_TIM_ConfigClockSource+0x1c>
 800d8c8:	2302      	movs	r3, #2
 800d8ca:	e0dc      	b.n	800da86 <HAL_TIM_ConfigClockSource+0x1d6>
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	2201      	movs	r2, #1
 800d8d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	2202      	movs	r2, #2
 800d8d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	689b      	ldr	r3, [r3, #8]
 800d8e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d8e4:	68ba      	ldr	r2, [r7, #8]
 800d8e6:	4b6a      	ldr	r3, [pc, #424]	@ (800da90 <HAL_TIM_ConfigClockSource+0x1e0>)
 800d8e8:	4013      	ands	r3, r2
 800d8ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d8ec:	68bb      	ldr	r3, [r7, #8]
 800d8ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d8f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	68ba      	ldr	r2, [r7, #8]
 800d8fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d8fc:	683b      	ldr	r3, [r7, #0]
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	4a64      	ldr	r2, [pc, #400]	@ (800da94 <HAL_TIM_ConfigClockSource+0x1e4>)
 800d902:	4293      	cmp	r3, r2
 800d904:	f000 80a9 	beq.w	800da5a <HAL_TIM_ConfigClockSource+0x1aa>
 800d908:	4a62      	ldr	r2, [pc, #392]	@ (800da94 <HAL_TIM_ConfigClockSource+0x1e4>)
 800d90a:	4293      	cmp	r3, r2
 800d90c:	f200 80ae 	bhi.w	800da6c <HAL_TIM_ConfigClockSource+0x1bc>
 800d910:	4a61      	ldr	r2, [pc, #388]	@ (800da98 <HAL_TIM_ConfigClockSource+0x1e8>)
 800d912:	4293      	cmp	r3, r2
 800d914:	f000 80a1 	beq.w	800da5a <HAL_TIM_ConfigClockSource+0x1aa>
 800d918:	4a5f      	ldr	r2, [pc, #380]	@ (800da98 <HAL_TIM_ConfigClockSource+0x1e8>)
 800d91a:	4293      	cmp	r3, r2
 800d91c:	f200 80a6 	bhi.w	800da6c <HAL_TIM_ConfigClockSource+0x1bc>
 800d920:	4a5e      	ldr	r2, [pc, #376]	@ (800da9c <HAL_TIM_ConfigClockSource+0x1ec>)
 800d922:	4293      	cmp	r3, r2
 800d924:	f000 8099 	beq.w	800da5a <HAL_TIM_ConfigClockSource+0x1aa>
 800d928:	4a5c      	ldr	r2, [pc, #368]	@ (800da9c <HAL_TIM_ConfigClockSource+0x1ec>)
 800d92a:	4293      	cmp	r3, r2
 800d92c:	f200 809e 	bhi.w	800da6c <HAL_TIM_ConfigClockSource+0x1bc>
 800d930:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800d934:	f000 8091 	beq.w	800da5a <HAL_TIM_ConfigClockSource+0x1aa>
 800d938:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800d93c:	f200 8096 	bhi.w	800da6c <HAL_TIM_ConfigClockSource+0x1bc>
 800d940:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d944:	f000 8089 	beq.w	800da5a <HAL_TIM_ConfigClockSource+0x1aa>
 800d948:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d94c:	f200 808e 	bhi.w	800da6c <HAL_TIM_ConfigClockSource+0x1bc>
 800d950:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d954:	d03e      	beq.n	800d9d4 <HAL_TIM_ConfigClockSource+0x124>
 800d956:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d95a:	f200 8087 	bhi.w	800da6c <HAL_TIM_ConfigClockSource+0x1bc>
 800d95e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d962:	f000 8086 	beq.w	800da72 <HAL_TIM_ConfigClockSource+0x1c2>
 800d966:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d96a:	d87f      	bhi.n	800da6c <HAL_TIM_ConfigClockSource+0x1bc>
 800d96c:	2b70      	cmp	r3, #112	@ 0x70
 800d96e:	d01a      	beq.n	800d9a6 <HAL_TIM_ConfigClockSource+0xf6>
 800d970:	2b70      	cmp	r3, #112	@ 0x70
 800d972:	d87b      	bhi.n	800da6c <HAL_TIM_ConfigClockSource+0x1bc>
 800d974:	2b60      	cmp	r3, #96	@ 0x60
 800d976:	d050      	beq.n	800da1a <HAL_TIM_ConfigClockSource+0x16a>
 800d978:	2b60      	cmp	r3, #96	@ 0x60
 800d97a:	d877      	bhi.n	800da6c <HAL_TIM_ConfigClockSource+0x1bc>
 800d97c:	2b50      	cmp	r3, #80	@ 0x50
 800d97e:	d03c      	beq.n	800d9fa <HAL_TIM_ConfigClockSource+0x14a>
 800d980:	2b50      	cmp	r3, #80	@ 0x50
 800d982:	d873      	bhi.n	800da6c <HAL_TIM_ConfigClockSource+0x1bc>
 800d984:	2b40      	cmp	r3, #64	@ 0x40
 800d986:	d058      	beq.n	800da3a <HAL_TIM_ConfigClockSource+0x18a>
 800d988:	2b40      	cmp	r3, #64	@ 0x40
 800d98a:	d86f      	bhi.n	800da6c <HAL_TIM_ConfigClockSource+0x1bc>
 800d98c:	2b30      	cmp	r3, #48	@ 0x30
 800d98e:	d064      	beq.n	800da5a <HAL_TIM_ConfigClockSource+0x1aa>
 800d990:	2b30      	cmp	r3, #48	@ 0x30
 800d992:	d86b      	bhi.n	800da6c <HAL_TIM_ConfigClockSource+0x1bc>
 800d994:	2b20      	cmp	r3, #32
 800d996:	d060      	beq.n	800da5a <HAL_TIM_ConfigClockSource+0x1aa>
 800d998:	2b20      	cmp	r3, #32
 800d99a:	d867      	bhi.n	800da6c <HAL_TIM_ConfigClockSource+0x1bc>
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d05c      	beq.n	800da5a <HAL_TIM_ConfigClockSource+0x1aa>
 800d9a0:	2b10      	cmp	r3, #16
 800d9a2:	d05a      	beq.n	800da5a <HAL_TIM_ConfigClockSource+0x1aa>
 800d9a4:	e062      	b.n	800da6c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d9aa:	683b      	ldr	r3, [r7, #0]
 800d9ac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d9ae:	683b      	ldr	r3, [r7, #0]
 800d9b0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d9b2:	683b      	ldr	r3, [r7, #0]
 800d9b4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d9b6:	f000 f9bf 	bl	800dd38 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	689b      	ldr	r3, [r3, #8]
 800d9c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d9c2:	68bb      	ldr	r3, [r7, #8]
 800d9c4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800d9c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	68ba      	ldr	r2, [r7, #8]
 800d9d0:	609a      	str	r2, [r3, #8]
      break;
 800d9d2:	e04f      	b.n	800da74 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d9d8:	683b      	ldr	r3, [r7, #0]
 800d9da:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d9dc:	683b      	ldr	r3, [r7, #0]
 800d9de:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d9e0:	683b      	ldr	r3, [r7, #0]
 800d9e2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d9e4:	f000 f9a8 	bl	800dd38 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	689a      	ldr	r2, [r3, #8]
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800d9f6:	609a      	str	r2, [r3, #8]
      break;
 800d9f8:	e03c      	b.n	800da74 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d9fe:	683b      	ldr	r3, [r7, #0]
 800da00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800da02:	683b      	ldr	r3, [r7, #0]
 800da04:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800da06:	461a      	mov	r2, r3
 800da08:	f000 f918 	bl	800dc3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	2150      	movs	r1, #80	@ 0x50
 800da12:	4618      	mov	r0, r3
 800da14:	f000 f972 	bl	800dcfc <TIM_ITRx_SetConfig>
      break;
 800da18:	e02c      	b.n	800da74 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800da1e:	683b      	ldr	r3, [r7, #0]
 800da20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800da22:	683b      	ldr	r3, [r7, #0]
 800da24:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800da26:	461a      	mov	r2, r3
 800da28:	f000 f937 	bl	800dc9a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	2160      	movs	r1, #96	@ 0x60
 800da32:	4618      	mov	r0, r3
 800da34:	f000 f962 	bl	800dcfc <TIM_ITRx_SetConfig>
      break;
 800da38:	e01c      	b.n	800da74 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800da3e:	683b      	ldr	r3, [r7, #0]
 800da40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800da42:	683b      	ldr	r3, [r7, #0]
 800da44:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800da46:	461a      	mov	r2, r3
 800da48:	f000 f8f8 	bl	800dc3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	2140      	movs	r1, #64	@ 0x40
 800da52:	4618      	mov	r0, r3
 800da54:	f000 f952 	bl	800dcfc <TIM_ITRx_SetConfig>
      break;
 800da58:	e00c      	b.n	800da74 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	681a      	ldr	r2, [r3, #0]
 800da5e:	683b      	ldr	r3, [r7, #0]
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	4619      	mov	r1, r3
 800da64:	4610      	mov	r0, r2
 800da66:	f000 f949 	bl	800dcfc <TIM_ITRx_SetConfig>
      break;
 800da6a:	e003      	b.n	800da74 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800da6c:	2301      	movs	r3, #1
 800da6e:	73fb      	strb	r3, [r7, #15]
      break;
 800da70:	e000      	b.n	800da74 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800da72:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	2201      	movs	r2, #1
 800da78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	2200      	movs	r2, #0
 800da80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800da84:	7bfb      	ldrb	r3, [r7, #15]
}
 800da86:	4618      	mov	r0, r3
 800da88:	3710      	adds	r7, #16
 800da8a:	46bd      	mov	sp, r7
 800da8c:	bd80      	pop	{r7, pc}
 800da8e:	bf00      	nop
 800da90:	ffceff88 	.word	0xffceff88
 800da94:	00100040 	.word	0x00100040
 800da98:	00100030 	.word	0x00100030
 800da9c:	00100020 	.word	0x00100020

0800daa0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800daa0:	b480      	push	{r7}
 800daa2:	b083      	sub	sp, #12
 800daa4:	af00      	add	r7, sp, #0
 800daa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800daa8:	bf00      	nop
 800daaa:	370c      	adds	r7, #12
 800daac:	46bd      	mov	sp, r7
 800daae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab2:	4770      	bx	lr

0800dab4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800dab4:	b480      	push	{r7}
 800dab6:	b083      	sub	sp, #12
 800dab8:	af00      	add	r7, sp, #0
 800daba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800dabc:	bf00      	nop
 800dabe:	370c      	adds	r7, #12
 800dac0:	46bd      	mov	sp, r7
 800dac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac6:	4770      	bx	lr

0800dac8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800dac8:	b480      	push	{r7}
 800daca:	b083      	sub	sp, #12
 800dacc:	af00      	add	r7, sp, #0
 800dace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800dad0:	bf00      	nop
 800dad2:	370c      	adds	r7, #12
 800dad4:	46bd      	mov	sp, r7
 800dad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dada:	4770      	bx	lr

0800dadc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800dadc:	b480      	push	{r7}
 800dade:	b083      	sub	sp, #12
 800dae0:	af00      	add	r7, sp, #0
 800dae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800dae4:	bf00      	nop
 800dae6:	370c      	adds	r7, #12
 800dae8:	46bd      	mov	sp, r7
 800daea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daee:	4770      	bx	lr

0800daf0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800daf0:	b480      	push	{r7}
 800daf2:	b085      	sub	sp, #20
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	6078      	str	r0, [r7, #4]
 800daf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	4a46      	ldr	r2, [pc, #280]	@ (800dc1c <TIM_Base_SetConfig+0x12c>)
 800db04:	4293      	cmp	r3, r2
 800db06:	d013      	beq.n	800db30 <TIM_Base_SetConfig+0x40>
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800db0e:	d00f      	beq.n	800db30 <TIM_Base_SetConfig+0x40>
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	4a43      	ldr	r2, [pc, #268]	@ (800dc20 <TIM_Base_SetConfig+0x130>)
 800db14:	4293      	cmp	r3, r2
 800db16:	d00b      	beq.n	800db30 <TIM_Base_SetConfig+0x40>
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	4a42      	ldr	r2, [pc, #264]	@ (800dc24 <TIM_Base_SetConfig+0x134>)
 800db1c:	4293      	cmp	r3, r2
 800db1e:	d007      	beq.n	800db30 <TIM_Base_SetConfig+0x40>
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	4a41      	ldr	r2, [pc, #260]	@ (800dc28 <TIM_Base_SetConfig+0x138>)
 800db24:	4293      	cmp	r3, r2
 800db26:	d003      	beq.n	800db30 <TIM_Base_SetConfig+0x40>
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	4a40      	ldr	r2, [pc, #256]	@ (800dc2c <TIM_Base_SetConfig+0x13c>)
 800db2c:	4293      	cmp	r3, r2
 800db2e:	d108      	bne.n	800db42 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800db36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800db38:	683b      	ldr	r3, [r7, #0]
 800db3a:	685b      	ldr	r3, [r3, #4]
 800db3c:	68fa      	ldr	r2, [r7, #12]
 800db3e:	4313      	orrs	r3, r2
 800db40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	4a35      	ldr	r2, [pc, #212]	@ (800dc1c <TIM_Base_SetConfig+0x12c>)
 800db46:	4293      	cmp	r3, r2
 800db48:	d01f      	beq.n	800db8a <TIM_Base_SetConfig+0x9a>
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800db50:	d01b      	beq.n	800db8a <TIM_Base_SetConfig+0x9a>
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	4a32      	ldr	r2, [pc, #200]	@ (800dc20 <TIM_Base_SetConfig+0x130>)
 800db56:	4293      	cmp	r3, r2
 800db58:	d017      	beq.n	800db8a <TIM_Base_SetConfig+0x9a>
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	4a31      	ldr	r2, [pc, #196]	@ (800dc24 <TIM_Base_SetConfig+0x134>)
 800db5e:	4293      	cmp	r3, r2
 800db60:	d013      	beq.n	800db8a <TIM_Base_SetConfig+0x9a>
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	4a30      	ldr	r2, [pc, #192]	@ (800dc28 <TIM_Base_SetConfig+0x138>)
 800db66:	4293      	cmp	r3, r2
 800db68:	d00f      	beq.n	800db8a <TIM_Base_SetConfig+0x9a>
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	4a2f      	ldr	r2, [pc, #188]	@ (800dc2c <TIM_Base_SetConfig+0x13c>)
 800db6e:	4293      	cmp	r3, r2
 800db70:	d00b      	beq.n	800db8a <TIM_Base_SetConfig+0x9a>
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	4a2e      	ldr	r2, [pc, #184]	@ (800dc30 <TIM_Base_SetConfig+0x140>)
 800db76:	4293      	cmp	r3, r2
 800db78:	d007      	beq.n	800db8a <TIM_Base_SetConfig+0x9a>
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	4a2d      	ldr	r2, [pc, #180]	@ (800dc34 <TIM_Base_SetConfig+0x144>)
 800db7e:	4293      	cmp	r3, r2
 800db80:	d003      	beq.n	800db8a <TIM_Base_SetConfig+0x9a>
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	4a2c      	ldr	r2, [pc, #176]	@ (800dc38 <TIM_Base_SetConfig+0x148>)
 800db86:	4293      	cmp	r3, r2
 800db88:	d108      	bne.n	800db9c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800db90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800db92:	683b      	ldr	r3, [r7, #0]
 800db94:	68db      	ldr	r3, [r3, #12]
 800db96:	68fa      	ldr	r2, [r7, #12]
 800db98:	4313      	orrs	r3, r2
 800db9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800dba2:	683b      	ldr	r3, [r7, #0]
 800dba4:	695b      	ldr	r3, [r3, #20]
 800dba6:	4313      	orrs	r3, r2
 800dba8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	68fa      	ldr	r2, [r7, #12]
 800dbae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800dbb0:	683b      	ldr	r3, [r7, #0]
 800dbb2:	689a      	ldr	r2, [r3, #8]
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800dbb8:	683b      	ldr	r3, [r7, #0]
 800dbba:	681a      	ldr	r2, [r3, #0]
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	4a16      	ldr	r2, [pc, #88]	@ (800dc1c <TIM_Base_SetConfig+0x12c>)
 800dbc4:	4293      	cmp	r3, r2
 800dbc6:	d00f      	beq.n	800dbe8 <TIM_Base_SetConfig+0xf8>
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	4a18      	ldr	r2, [pc, #96]	@ (800dc2c <TIM_Base_SetConfig+0x13c>)
 800dbcc:	4293      	cmp	r3, r2
 800dbce:	d00b      	beq.n	800dbe8 <TIM_Base_SetConfig+0xf8>
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	4a17      	ldr	r2, [pc, #92]	@ (800dc30 <TIM_Base_SetConfig+0x140>)
 800dbd4:	4293      	cmp	r3, r2
 800dbd6:	d007      	beq.n	800dbe8 <TIM_Base_SetConfig+0xf8>
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	4a16      	ldr	r2, [pc, #88]	@ (800dc34 <TIM_Base_SetConfig+0x144>)
 800dbdc:	4293      	cmp	r3, r2
 800dbde:	d003      	beq.n	800dbe8 <TIM_Base_SetConfig+0xf8>
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	4a15      	ldr	r2, [pc, #84]	@ (800dc38 <TIM_Base_SetConfig+0x148>)
 800dbe4:	4293      	cmp	r3, r2
 800dbe6:	d103      	bne.n	800dbf0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800dbe8:	683b      	ldr	r3, [r7, #0]
 800dbea:	691a      	ldr	r2, [r3, #16]
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	2201      	movs	r2, #1
 800dbf4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	691b      	ldr	r3, [r3, #16]
 800dbfa:	f003 0301 	and.w	r3, r3, #1
 800dbfe:	2b01      	cmp	r3, #1
 800dc00:	d105      	bne.n	800dc0e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	691b      	ldr	r3, [r3, #16]
 800dc06:	f023 0201 	bic.w	r2, r3, #1
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	611a      	str	r2, [r3, #16]
  }
}
 800dc0e:	bf00      	nop
 800dc10:	3714      	adds	r7, #20
 800dc12:	46bd      	mov	sp, r7
 800dc14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc18:	4770      	bx	lr
 800dc1a:	bf00      	nop
 800dc1c:	40010000 	.word	0x40010000
 800dc20:	40000400 	.word	0x40000400
 800dc24:	40000800 	.word	0x40000800
 800dc28:	40000c00 	.word	0x40000c00
 800dc2c:	40010400 	.word	0x40010400
 800dc30:	40014000 	.word	0x40014000
 800dc34:	40014400 	.word	0x40014400
 800dc38:	40014800 	.word	0x40014800

0800dc3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800dc3c:	b480      	push	{r7}
 800dc3e:	b087      	sub	sp, #28
 800dc40:	af00      	add	r7, sp, #0
 800dc42:	60f8      	str	r0, [r7, #12]
 800dc44:	60b9      	str	r1, [r7, #8]
 800dc46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	6a1b      	ldr	r3, [r3, #32]
 800dc4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	6a1b      	ldr	r3, [r3, #32]
 800dc52:	f023 0201 	bic.w	r2, r3, #1
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	699b      	ldr	r3, [r3, #24]
 800dc5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800dc60:	693b      	ldr	r3, [r7, #16]
 800dc62:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800dc66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	011b      	lsls	r3, r3, #4
 800dc6c:	693a      	ldr	r2, [r7, #16]
 800dc6e:	4313      	orrs	r3, r2
 800dc70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800dc72:	697b      	ldr	r3, [r7, #20]
 800dc74:	f023 030a 	bic.w	r3, r3, #10
 800dc78:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800dc7a:	697a      	ldr	r2, [r7, #20]
 800dc7c:	68bb      	ldr	r3, [r7, #8]
 800dc7e:	4313      	orrs	r3, r2
 800dc80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	693a      	ldr	r2, [r7, #16]
 800dc86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	697a      	ldr	r2, [r7, #20]
 800dc8c:	621a      	str	r2, [r3, #32]
}
 800dc8e:	bf00      	nop
 800dc90:	371c      	adds	r7, #28
 800dc92:	46bd      	mov	sp, r7
 800dc94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc98:	4770      	bx	lr

0800dc9a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800dc9a:	b480      	push	{r7}
 800dc9c:	b087      	sub	sp, #28
 800dc9e:	af00      	add	r7, sp, #0
 800dca0:	60f8      	str	r0, [r7, #12]
 800dca2:	60b9      	str	r1, [r7, #8]
 800dca4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	6a1b      	ldr	r3, [r3, #32]
 800dcaa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	6a1b      	ldr	r3, [r3, #32]
 800dcb0:	f023 0210 	bic.w	r2, r3, #16
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	699b      	ldr	r3, [r3, #24]
 800dcbc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800dcbe:	693b      	ldr	r3, [r7, #16]
 800dcc0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800dcc4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	031b      	lsls	r3, r3, #12
 800dcca:	693a      	ldr	r2, [r7, #16]
 800dccc:	4313      	orrs	r3, r2
 800dcce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800dcd0:	697b      	ldr	r3, [r7, #20]
 800dcd2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800dcd6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800dcd8:	68bb      	ldr	r3, [r7, #8]
 800dcda:	011b      	lsls	r3, r3, #4
 800dcdc:	697a      	ldr	r2, [r7, #20]
 800dcde:	4313      	orrs	r3, r2
 800dce0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	693a      	ldr	r2, [r7, #16]
 800dce6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	697a      	ldr	r2, [r7, #20]
 800dcec:	621a      	str	r2, [r3, #32]
}
 800dcee:	bf00      	nop
 800dcf0:	371c      	adds	r7, #28
 800dcf2:	46bd      	mov	sp, r7
 800dcf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf8:	4770      	bx	lr
	...

0800dcfc <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800dcfc:	b480      	push	{r7}
 800dcfe:	b085      	sub	sp, #20
 800dd00:	af00      	add	r7, sp, #0
 800dd02:	6078      	str	r0, [r7, #4]
 800dd04:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	689b      	ldr	r3, [r3, #8]
 800dd0a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800dd0c:	68fa      	ldr	r2, [r7, #12]
 800dd0e:	4b09      	ldr	r3, [pc, #36]	@ (800dd34 <TIM_ITRx_SetConfig+0x38>)
 800dd10:	4013      	ands	r3, r2
 800dd12:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800dd14:	683a      	ldr	r2, [r7, #0]
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	4313      	orrs	r3, r2
 800dd1a:	f043 0307 	orr.w	r3, r3, #7
 800dd1e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	68fa      	ldr	r2, [r7, #12]
 800dd24:	609a      	str	r2, [r3, #8]
}
 800dd26:	bf00      	nop
 800dd28:	3714      	adds	r7, #20
 800dd2a:	46bd      	mov	sp, r7
 800dd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd30:	4770      	bx	lr
 800dd32:	bf00      	nop
 800dd34:	ffcfff8f 	.word	0xffcfff8f

0800dd38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800dd38:	b480      	push	{r7}
 800dd3a:	b087      	sub	sp, #28
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	60f8      	str	r0, [r7, #12]
 800dd40:	60b9      	str	r1, [r7, #8]
 800dd42:	607a      	str	r2, [r7, #4]
 800dd44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	689b      	ldr	r3, [r3, #8]
 800dd4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800dd4c:	697b      	ldr	r3, [r7, #20]
 800dd4e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800dd52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800dd54:	683b      	ldr	r3, [r7, #0]
 800dd56:	021a      	lsls	r2, r3, #8
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	431a      	orrs	r2, r3
 800dd5c:	68bb      	ldr	r3, [r7, #8]
 800dd5e:	4313      	orrs	r3, r2
 800dd60:	697a      	ldr	r2, [r7, #20]
 800dd62:	4313      	orrs	r3, r2
 800dd64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	697a      	ldr	r2, [r7, #20]
 800dd6a:	609a      	str	r2, [r3, #8]
}
 800dd6c:	bf00      	nop
 800dd6e:	371c      	adds	r7, #28
 800dd70:	46bd      	mov	sp, r7
 800dd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd76:	4770      	bx	lr

0800dd78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800dd78:	b480      	push	{r7}
 800dd7a:	b085      	sub	sp, #20
 800dd7c:	af00      	add	r7, sp, #0
 800dd7e:	6078      	str	r0, [r7, #4]
 800dd80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800dd88:	2b01      	cmp	r3, #1
 800dd8a:	d101      	bne.n	800dd90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800dd8c:	2302      	movs	r3, #2
 800dd8e:	e06d      	b.n	800de6c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	2201      	movs	r2, #1
 800dd94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	2202      	movs	r2, #2
 800dd9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	685b      	ldr	r3, [r3, #4]
 800dda6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	689b      	ldr	r3, [r3, #8]
 800ddae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	4a30      	ldr	r2, [pc, #192]	@ (800de78 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ddb6:	4293      	cmp	r3, r2
 800ddb8:	d004      	beq.n	800ddc4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	4a2f      	ldr	r2, [pc, #188]	@ (800de7c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ddc0:	4293      	cmp	r3, r2
 800ddc2:	d108      	bne.n	800ddd6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800ddca:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ddcc:	683b      	ldr	r3, [r7, #0]
 800ddce:	685b      	ldr	r3, [r3, #4]
 800ddd0:	68fa      	ldr	r2, [r7, #12]
 800ddd2:	4313      	orrs	r3, r2
 800ddd4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dddc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ddde:	683b      	ldr	r3, [r7, #0]
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	68fa      	ldr	r2, [r7, #12]
 800dde4:	4313      	orrs	r3, r2
 800dde6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	68fa      	ldr	r2, [r7, #12]
 800ddee:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	4a20      	ldr	r2, [pc, #128]	@ (800de78 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ddf6:	4293      	cmp	r3, r2
 800ddf8:	d022      	beq.n	800de40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800de02:	d01d      	beq.n	800de40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	4a1d      	ldr	r2, [pc, #116]	@ (800de80 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800de0a:	4293      	cmp	r3, r2
 800de0c:	d018      	beq.n	800de40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	4a1c      	ldr	r2, [pc, #112]	@ (800de84 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800de14:	4293      	cmp	r3, r2
 800de16:	d013      	beq.n	800de40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	4a1a      	ldr	r2, [pc, #104]	@ (800de88 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800de1e:	4293      	cmp	r3, r2
 800de20:	d00e      	beq.n	800de40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	4a15      	ldr	r2, [pc, #84]	@ (800de7c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800de28:	4293      	cmp	r3, r2
 800de2a:	d009      	beq.n	800de40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	4a16      	ldr	r2, [pc, #88]	@ (800de8c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800de32:	4293      	cmp	r3, r2
 800de34:	d004      	beq.n	800de40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	4a15      	ldr	r2, [pc, #84]	@ (800de90 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800de3c:	4293      	cmp	r3, r2
 800de3e:	d10c      	bne.n	800de5a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800de40:	68bb      	ldr	r3, [r7, #8]
 800de42:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800de46:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800de48:	683b      	ldr	r3, [r7, #0]
 800de4a:	689b      	ldr	r3, [r3, #8]
 800de4c:	68ba      	ldr	r2, [r7, #8]
 800de4e:	4313      	orrs	r3, r2
 800de50:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	68ba      	ldr	r2, [r7, #8]
 800de58:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	2201      	movs	r2, #1
 800de5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	2200      	movs	r2, #0
 800de66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800de6a:	2300      	movs	r3, #0
}
 800de6c:	4618      	mov	r0, r3
 800de6e:	3714      	adds	r7, #20
 800de70:	46bd      	mov	sp, r7
 800de72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de76:	4770      	bx	lr
 800de78:	40010000 	.word	0x40010000
 800de7c:	40010400 	.word	0x40010400
 800de80:	40000400 	.word	0x40000400
 800de84:	40000800 	.word	0x40000800
 800de88:	40000c00 	.word	0x40000c00
 800de8c:	40001800 	.word	0x40001800
 800de90:	40014000 	.word	0x40014000

0800de94 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800de94:	b480      	push	{r7}
 800de96:	b083      	sub	sp, #12
 800de98:	af00      	add	r7, sp, #0
 800de9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800de9c:	bf00      	nop
 800de9e:	370c      	adds	r7, #12
 800dea0:	46bd      	mov	sp, r7
 800dea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dea6:	4770      	bx	lr

0800dea8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800dea8:	b480      	push	{r7}
 800deaa:	b083      	sub	sp, #12
 800deac:	af00      	add	r7, sp, #0
 800deae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800deb0:	bf00      	nop
 800deb2:	370c      	adds	r7, #12
 800deb4:	46bd      	mov	sp, r7
 800deb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deba:	4770      	bx	lr

0800debc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800debc:	b480      	push	{r7}
 800debe:	b083      	sub	sp, #12
 800dec0:	af00      	add	r7, sp, #0
 800dec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800dec4:	bf00      	nop
 800dec6:	370c      	adds	r7, #12
 800dec8:	46bd      	mov	sp, r7
 800deca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dece:	4770      	bx	lr

0800ded0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ded0:	b580      	push	{r7, lr}
 800ded2:	b082      	sub	sp, #8
 800ded4:	af00      	add	r7, sp, #0
 800ded6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d101      	bne.n	800dee2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800dede:	2301      	movs	r3, #1
 800dee0:	e042      	b.n	800df68 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d106      	bne.n	800defa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	2200      	movs	r2, #0
 800def0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800def4:	6878      	ldr	r0, [r7, #4]
 800def6:	f7f4 f807 	bl	8001f08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	2224      	movs	r2, #36	@ 0x24
 800defe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	681a      	ldr	r2, [r3, #0]
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	f022 0201 	bic.w	r2, r2, #1
 800df10:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df16:	2b00      	cmp	r3, #0
 800df18:	d002      	beq.n	800df20 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800df1a:	6878      	ldr	r0, [r7, #4]
 800df1c:	f001 f9ec 	bl	800f2f8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800df20:	6878      	ldr	r0, [r7, #4]
 800df22:	f000 fc81 	bl	800e828 <UART_SetConfig>
 800df26:	4603      	mov	r3, r0
 800df28:	2b01      	cmp	r3, #1
 800df2a:	d101      	bne.n	800df30 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800df2c:	2301      	movs	r3, #1
 800df2e:	e01b      	b.n	800df68 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	685a      	ldr	r2, [r3, #4]
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800df3e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	689a      	ldr	r2, [r3, #8]
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800df4e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	681a      	ldr	r2, [r3, #0]
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	f042 0201 	orr.w	r2, r2, #1
 800df5e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800df60:	6878      	ldr	r0, [r7, #4]
 800df62:	f001 fa6b 	bl	800f43c <UART_CheckIdleState>
 800df66:	4603      	mov	r3, r0
}
 800df68:	4618      	mov	r0, r3
 800df6a:	3708      	adds	r7, #8
 800df6c:	46bd      	mov	sp, r7
 800df6e:	bd80      	pop	{r7, pc}

0800df70 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800df70:	b580      	push	{r7, lr}
 800df72:	b08a      	sub	sp, #40	@ 0x28
 800df74:	af02      	add	r7, sp, #8
 800df76:	60f8      	str	r0, [r7, #12]
 800df78:	60b9      	str	r1, [r7, #8]
 800df7a:	603b      	str	r3, [r7, #0]
 800df7c:	4613      	mov	r3, r2
 800df7e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800df86:	2b20      	cmp	r3, #32
 800df88:	d17b      	bne.n	800e082 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800df8a:	68bb      	ldr	r3, [r7, #8]
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d002      	beq.n	800df96 <HAL_UART_Transmit+0x26>
 800df90:	88fb      	ldrh	r3, [r7, #6]
 800df92:	2b00      	cmp	r3, #0
 800df94:	d101      	bne.n	800df9a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800df96:	2301      	movs	r3, #1
 800df98:	e074      	b.n	800e084 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	2200      	movs	r2, #0
 800df9e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	2221      	movs	r2, #33	@ 0x21
 800dfa6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800dfaa:	f7f4 fbdd 	bl	8002768 <HAL_GetTick>
 800dfae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	88fa      	ldrh	r2, [r7, #6]
 800dfb4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	88fa      	ldrh	r2, [r7, #6]
 800dfbc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	689b      	ldr	r3, [r3, #8]
 800dfc4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dfc8:	d108      	bne.n	800dfdc <HAL_UART_Transmit+0x6c>
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	691b      	ldr	r3, [r3, #16]
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d104      	bne.n	800dfdc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800dfd2:	2300      	movs	r3, #0
 800dfd4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800dfd6:	68bb      	ldr	r3, [r7, #8]
 800dfd8:	61bb      	str	r3, [r7, #24]
 800dfda:	e003      	b.n	800dfe4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800dfdc:	68bb      	ldr	r3, [r7, #8]
 800dfde:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800dfe0:	2300      	movs	r3, #0
 800dfe2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800dfe4:	e030      	b.n	800e048 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800dfe6:	683b      	ldr	r3, [r7, #0]
 800dfe8:	9300      	str	r3, [sp, #0]
 800dfea:	697b      	ldr	r3, [r7, #20]
 800dfec:	2200      	movs	r2, #0
 800dfee:	2180      	movs	r1, #128	@ 0x80
 800dff0:	68f8      	ldr	r0, [r7, #12]
 800dff2:	f001 facd 	bl	800f590 <UART_WaitOnFlagUntilTimeout>
 800dff6:	4603      	mov	r3, r0
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d005      	beq.n	800e008 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	2220      	movs	r2, #32
 800e000:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800e004:	2303      	movs	r3, #3
 800e006:	e03d      	b.n	800e084 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800e008:	69fb      	ldr	r3, [r7, #28]
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d10b      	bne.n	800e026 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e00e:	69bb      	ldr	r3, [r7, #24]
 800e010:	881b      	ldrh	r3, [r3, #0]
 800e012:	461a      	mov	r2, r3
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e01c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800e01e:	69bb      	ldr	r3, [r7, #24]
 800e020:	3302      	adds	r3, #2
 800e022:	61bb      	str	r3, [r7, #24]
 800e024:	e007      	b.n	800e036 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e026:	69fb      	ldr	r3, [r7, #28]
 800e028:	781a      	ldrb	r2, [r3, #0]
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800e030:	69fb      	ldr	r3, [r7, #28]
 800e032:	3301      	adds	r3, #1
 800e034:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e03c:	b29b      	uxth	r3, r3
 800e03e:	3b01      	subs	r3, #1
 800e040:	b29a      	uxth	r2, r3
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e04e:	b29b      	uxth	r3, r3
 800e050:	2b00      	cmp	r3, #0
 800e052:	d1c8      	bne.n	800dfe6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e054:	683b      	ldr	r3, [r7, #0]
 800e056:	9300      	str	r3, [sp, #0]
 800e058:	697b      	ldr	r3, [r7, #20]
 800e05a:	2200      	movs	r2, #0
 800e05c:	2140      	movs	r1, #64	@ 0x40
 800e05e:	68f8      	ldr	r0, [r7, #12]
 800e060:	f001 fa96 	bl	800f590 <UART_WaitOnFlagUntilTimeout>
 800e064:	4603      	mov	r3, r0
 800e066:	2b00      	cmp	r3, #0
 800e068:	d005      	beq.n	800e076 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	2220      	movs	r2, #32
 800e06e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800e072:	2303      	movs	r3, #3
 800e074:	e006      	b.n	800e084 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	2220      	movs	r2, #32
 800e07a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800e07e:	2300      	movs	r3, #0
 800e080:	e000      	b.n	800e084 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800e082:	2302      	movs	r3, #2
  }
}
 800e084:	4618      	mov	r0, r3
 800e086:	3720      	adds	r7, #32
 800e088:	46bd      	mov	sp, r7
 800e08a:	bd80      	pop	{r7, pc}

0800e08c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e08c:	b580      	push	{r7, lr}
 800e08e:	b0ba      	sub	sp, #232	@ 0xe8
 800e090:	af00      	add	r7, sp, #0
 800e092:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	69db      	ldr	r3, [r3, #28]
 800e09a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	689b      	ldr	r3, [r3, #8]
 800e0ae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e0b2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800e0b6:	f640 030f 	movw	r3, #2063	@ 0x80f
 800e0ba:	4013      	ands	r3, r2
 800e0bc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800e0c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d11b      	bne.n	800e100 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e0c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e0cc:	f003 0320 	and.w	r3, r3, #32
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d015      	beq.n	800e100 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e0d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e0d8:	f003 0320 	and.w	r3, r3, #32
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d105      	bne.n	800e0ec <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e0e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e0e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d009      	beq.n	800e100 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	f000 8377 	beq.w	800e7e4 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e0fa:	6878      	ldr	r0, [r7, #4]
 800e0fc:	4798      	blx	r3
      }
      return;
 800e0fe:	e371      	b.n	800e7e4 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800e100:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e104:	2b00      	cmp	r3, #0
 800e106:	f000 8123 	beq.w	800e350 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800e10a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800e10e:	4b8d      	ldr	r3, [pc, #564]	@ (800e344 <HAL_UART_IRQHandler+0x2b8>)
 800e110:	4013      	ands	r3, r2
 800e112:	2b00      	cmp	r3, #0
 800e114:	d106      	bne.n	800e124 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800e116:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800e11a:	4b8b      	ldr	r3, [pc, #556]	@ (800e348 <HAL_UART_IRQHandler+0x2bc>)
 800e11c:	4013      	ands	r3, r2
 800e11e:	2b00      	cmp	r3, #0
 800e120:	f000 8116 	beq.w	800e350 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e124:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e128:	f003 0301 	and.w	r3, r3, #1
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d011      	beq.n	800e154 <HAL_UART_IRQHandler+0xc8>
 800e130:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e134:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d00b      	beq.n	800e154 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	2201      	movs	r2, #1
 800e142:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e14a:	f043 0201 	orr.w	r2, r3, #1
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e154:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e158:	f003 0302 	and.w	r3, r3, #2
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d011      	beq.n	800e184 <HAL_UART_IRQHandler+0xf8>
 800e160:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e164:	f003 0301 	and.w	r3, r3, #1
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d00b      	beq.n	800e184 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	2202      	movs	r2, #2
 800e172:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e17a:	f043 0204 	orr.w	r2, r3, #4
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e184:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e188:	f003 0304 	and.w	r3, r3, #4
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d011      	beq.n	800e1b4 <HAL_UART_IRQHandler+0x128>
 800e190:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e194:	f003 0301 	and.w	r3, r3, #1
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d00b      	beq.n	800e1b4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	2204      	movs	r2, #4
 800e1a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e1aa:	f043 0202 	orr.w	r2, r3, #2
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e1b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e1b8:	f003 0308 	and.w	r3, r3, #8
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d017      	beq.n	800e1f0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e1c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e1c4:	f003 0320 	and.w	r3, r3, #32
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d105      	bne.n	800e1d8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800e1cc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800e1d0:	4b5c      	ldr	r3, [pc, #368]	@ (800e344 <HAL_UART_IRQHandler+0x2b8>)
 800e1d2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d00b      	beq.n	800e1f0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	2208      	movs	r2, #8
 800e1de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e1e6:	f043 0208 	orr.w	r2, r3, #8
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e1f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e1f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d012      	beq.n	800e222 <HAL_UART_IRQHandler+0x196>
 800e1fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e200:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800e204:	2b00      	cmp	r3, #0
 800e206:	d00c      	beq.n	800e222 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e210:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e218:	f043 0220 	orr.w	r2, r3, #32
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e228:	2b00      	cmp	r3, #0
 800e22a:	f000 82dd 	beq.w	800e7e8 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e22e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e232:	f003 0320 	and.w	r3, r3, #32
 800e236:	2b00      	cmp	r3, #0
 800e238:	d013      	beq.n	800e262 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e23a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e23e:	f003 0320 	and.w	r3, r3, #32
 800e242:	2b00      	cmp	r3, #0
 800e244:	d105      	bne.n	800e252 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e246:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e24a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d007      	beq.n	800e262 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e256:	2b00      	cmp	r3, #0
 800e258:	d003      	beq.n	800e262 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e25e:	6878      	ldr	r0, [r7, #4]
 800e260:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e268:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	689b      	ldr	r3, [r3, #8]
 800e272:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e276:	2b40      	cmp	r3, #64	@ 0x40
 800e278:	d005      	beq.n	800e286 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e27a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e27e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e282:	2b00      	cmp	r3, #0
 800e284:	d054      	beq.n	800e330 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e286:	6878      	ldr	r0, [r7, #4]
 800e288:	f001 f9f0 	bl	800f66c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	689b      	ldr	r3, [r3, #8]
 800e292:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e296:	2b40      	cmp	r3, #64	@ 0x40
 800e298:	d146      	bne.n	800e328 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	3308      	adds	r3, #8
 800e2a0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800e2a8:	e853 3f00 	ldrex	r3, [r3]
 800e2ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800e2b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e2b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e2b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	3308      	adds	r3, #8
 800e2c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800e2c6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800e2ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800e2d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800e2d6:	e841 2300 	strex	r3, r2, [r1]
 800e2da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800e2de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d1d9      	bne.n	800e29a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d017      	beq.n	800e320 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e2f6:	4a15      	ldr	r2, [pc, #84]	@ (800e34c <HAL_UART_IRQHandler+0x2c0>)
 800e2f8:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e300:	4618      	mov	r0, r3
 800e302:	f7f6 ffc5 	bl	8005290 <HAL_DMA_Abort_IT>
 800e306:	4603      	mov	r3, r0
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d019      	beq.n	800e340 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e312:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e314:	687a      	ldr	r2, [r7, #4]
 800e316:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800e31a:	4610      	mov	r0, r2
 800e31c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e31e:	e00f      	b.n	800e340 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e320:	6878      	ldr	r0, [r7, #4]
 800e322:	f000 fa77 	bl	800e814 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e326:	e00b      	b.n	800e340 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e328:	6878      	ldr	r0, [r7, #4]
 800e32a:	f000 fa73 	bl	800e814 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e32e:	e007      	b.n	800e340 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e330:	6878      	ldr	r0, [r7, #4]
 800e332:	f000 fa6f 	bl	800e814 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	2200      	movs	r2, #0
 800e33a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800e33e:	e253      	b.n	800e7e8 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e340:	bf00      	nop
    return;
 800e342:	e251      	b.n	800e7e8 <HAL_UART_IRQHandler+0x75c>
 800e344:	10000001 	.word	0x10000001
 800e348:	04000120 	.word	0x04000120
 800e34c:	0800f739 	.word	0x0800f739

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e354:	2b01      	cmp	r3, #1
 800e356:	f040 81e7 	bne.w	800e728 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e35a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e35e:	f003 0310 	and.w	r3, r3, #16
 800e362:	2b00      	cmp	r3, #0
 800e364:	f000 81e0 	beq.w	800e728 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e368:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e36c:	f003 0310 	and.w	r3, r3, #16
 800e370:	2b00      	cmp	r3, #0
 800e372:	f000 81d9 	beq.w	800e728 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	2210      	movs	r2, #16
 800e37c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	689b      	ldr	r3, [r3, #8]
 800e384:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e388:	2b40      	cmp	r3, #64	@ 0x40
 800e38a:	f040 8151 	bne.w	800e630 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	4a96      	ldr	r2, [pc, #600]	@ (800e5f0 <HAL_UART_IRQHandler+0x564>)
 800e398:	4293      	cmp	r3, r2
 800e39a:	d068      	beq.n	800e46e <HAL_UART_IRQHandler+0x3e2>
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	4a93      	ldr	r2, [pc, #588]	@ (800e5f4 <HAL_UART_IRQHandler+0x568>)
 800e3a6:	4293      	cmp	r3, r2
 800e3a8:	d061      	beq.n	800e46e <HAL_UART_IRQHandler+0x3e2>
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	4a91      	ldr	r2, [pc, #580]	@ (800e5f8 <HAL_UART_IRQHandler+0x56c>)
 800e3b4:	4293      	cmp	r3, r2
 800e3b6:	d05a      	beq.n	800e46e <HAL_UART_IRQHandler+0x3e2>
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	4a8e      	ldr	r2, [pc, #568]	@ (800e5fc <HAL_UART_IRQHandler+0x570>)
 800e3c2:	4293      	cmp	r3, r2
 800e3c4:	d053      	beq.n	800e46e <HAL_UART_IRQHandler+0x3e2>
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	4a8c      	ldr	r2, [pc, #560]	@ (800e600 <HAL_UART_IRQHandler+0x574>)
 800e3d0:	4293      	cmp	r3, r2
 800e3d2:	d04c      	beq.n	800e46e <HAL_UART_IRQHandler+0x3e2>
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	4a89      	ldr	r2, [pc, #548]	@ (800e604 <HAL_UART_IRQHandler+0x578>)
 800e3de:	4293      	cmp	r3, r2
 800e3e0:	d045      	beq.n	800e46e <HAL_UART_IRQHandler+0x3e2>
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	4a87      	ldr	r2, [pc, #540]	@ (800e608 <HAL_UART_IRQHandler+0x57c>)
 800e3ec:	4293      	cmp	r3, r2
 800e3ee:	d03e      	beq.n	800e46e <HAL_UART_IRQHandler+0x3e2>
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	4a84      	ldr	r2, [pc, #528]	@ (800e60c <HAL_UART_IRQHandler+0x580>)
 800e3fa:	4293      	cmp	r3, r2
 800e3fc:	d037      	beq.n	800e46e <HAL_UART_IRQHandler+0x3e2>
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	4a82      	ldr	r2, [pc, #520]	@ (800e610 <HAL_UART_IRQHandler+0x584>)
 800e408:	4293      	cmp	r3, r2
 800e40a:	d030      	beq.n	800e46e <HAL_UART_IRQHandler+0x3e2>
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	4a7f      	ldr	r2, [pc, #508]	@ (800e614 <HAL_UART_IRQHandler+0x588>)
 800e416:	4293      	cmp	r3, r2
 800e418:	d029      	beq.n	800e46e <HAL_UART_IRQHandler+0x3e2>
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	4a7d      	ldr	r2, [pc, #500]	@ (800e618 <HAL_UART_IRQHandler+0x58c>)
 800e424:	4293      	cmp	r3, r2
 800e426:	d022      	beq.n	800e46e <HAL_UART_IRQHandler+0x3e2>
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	4a7a      	ldr	r2, [pc, #488]	@ (800e61c <HAL_UART_IRQHandler+0x590>)
 800e432:	4293      	cmp	r3, r2
 800e434:	d01b      	beq.n	800e46e <HAL_UART_IRQHandler+0x3e2>
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	4a78      	ldr	r2, [pc, #480]	@ (800e620 <HAL_UART_IRQHandler+0x594>)
 800e440:	4293      	cmp	r3, r2
 800e442:	d014      	beq.n	800e46e <HAL_UART_IRQHandler+0x3e2>
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	4a75      	ldr	r2, [pc, #468]	@ (800e624 <HAL_UART_IRQHandler+0x598>)
 800e44e:	4293      	cmp	r3, r2
 800e450:	d00d      	beq.n	800e46e <HAL_UART_IRQHandler+0x3e2>
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	4a73      	ldr	r2, [pc, #460]	@ (800e628 <HAL_UART_IRQHandler+0x59c>)
 800e45c:	4293      	cmp	r3, r2
 800e45e:	d006      	beq.n	800e46e <HAL_UART_IRQHandler+0x3e2>
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	4a70      	ldr	r2, [pc, #448]	@ (800e62c <HAL_UART_IRQHandler+0x5a0>)
 800e46a:	4293      	cmp	r3, r2
 800e46c:	d106      	bne.n	800e47c <HAL_UART_IRQHandler+0x3f0>
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	685b      	ldr	r3, [r3, #4]
 800e478:	b29b      	uxth	r3, r3
 800e47a:	e005      	b.n	800e488 <HAL_UART_IRQHandler+0x3fc>
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	685b      	ldr	r3, [r3, #4]
 800e486:	b29b      	uxth	r3, r3
 800e488:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e48c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800e490:	2b00      	cmp	r3, #0
 800e492:	f000 81ab 	beq.w	800e7ec <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e49c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800e4a0:	429a      	cmp	r2, r3
 800e4a2:	f080 81a3 	bcs.w	800e7ec <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800e4ac:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e4b6:	69db      	ldr	r3, [r3, #28]
 800e4b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e4bc:	f000 8087 	beq.w	800e5ce <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800e4cc:	e853 3f00 	ldrex	r3, [r3]
 800e4d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800e4d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e4d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e4dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	461a      	mov	r2, r3
 800e4e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e4ea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e4ee:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4f2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800e4f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800e4fa:	e841 2300 	strex	r3, r2, [r1]
 800e4fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800e502:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e506:	2b00      	cmp	r3, #0
 800e508:	d1da      	bne.n	800e4c0 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	3308      	adds	r3, #8
 800e510:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e512:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e514:	e853 3f00 	ldrex	r3, [r3]
 800e518:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800e51a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e51c:	f023 0301 	bic.w	r3, r3, #1
 800e520:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	3308      	adds	r3, #8
 800e52a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800e52e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800e532:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e534:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800e536:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800e53a:	e841 2300 	strex	r3, r2, [r1]
 800e53e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800e540:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e542:	2b00      	cmp	r3, #0
 800e544:	d1e1      	bne.n	800e50a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	3308      	adds	r3, #8
 800e54c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e54e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e550:	e853 3f00 	ldrex	r3, [r3]
 800e554:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800e556:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e558:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e55c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	3308      	adds	r3, #8
 800e566:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800e56a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800e56c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e56e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800e570:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800e572:	e841 2300 	strex	r3, r2, [r1]
 800e576:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800e578:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d1e3      	bne.n	800e546 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	2220      	movs	r2, #32
 800e582:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	2200      	movs	r2, #0
 800e58a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e592:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e594:	e853 3f00 	ldrex	r3, [r3]
 800e598:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800e59a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e59c:	f023 0310 	bic.w	r3, r3, #16
 800e5a0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	461a      	mov	r2, r3
 800e5aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e5ae:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e5b0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5b2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e5b4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e5b6:	e841 2300 	strex	r3, r2, [r1]
 800e5ba:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800e5bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d1e4      	bne.n	800e58c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e5c8:	4618      	mov	r0, r3
 800e5ca:	f7f6 fb43 	bl	8004c54 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	2202      	movs	r2, #2
 800e5d2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e5e0:	b29b      	uxth	r3, r3
 800e5e2:	1ad3      	subs	r3, r2, r3
 800e5e4:	b29b      	uxth	r3, r3
 800e5e6:	4619      	mov	r1, r3
 800e5e8:	6878      	ldr	r0, [r7, #4]
 800e5ea:	f7f2 fef5 	bl	80013d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e5ee:	e0fd      	b.n	800e7ec <HAL_UART_IRQHandler+0x760>
 800e5f0:	40020010 	.word	0x40020010
 800e5f4:	40020028 	.word	0x40020028
 800e5f8:	40020040 	.word	0x40020040
 800e5fc:	40020058 	.word	0x40020058
 800e600:	40020070 	.word	0x40020070
 800e604:	40020088 	.word	0x40020088
 800e608:	400200a0 	.word	0x400200a0
 800e60c:	400200b8 	.word	0x400200b8
 800e610:	40020410 	.word	0x40020410
 800e614:	40020428 	.word	0x40020428
 800e618:	40020440 	.word	0x40020440
 800e61c:	40020458 	.word	0x40020458
 800e620:	40020470 	.word	0x40020470
 800e624:	40020488 	.word	0x40020488
 800e628:	400204a0 	.word	0x400204a0
 800e62c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e63c:	b29b      	uxth	r3, r3
 800e63e:	1ad3      	subs	r3, r2, r3
 800e640:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e64a:	b29b      	uxth	r3, r3
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	f000 80cf 	beq.w	800e7f0 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800e652:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800e656:	2b00      	cmp	r3, #0
 800e658:	f000 80ca 	beq.w	800e7f0 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e662:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e664:	e853 3f00 	ldrex	r3, [r3]
 800e668:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e66a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e66c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e670:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	461a      	mov	r2, r3
 800e67a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e67e:	647b      	str	r3, [r7, #68]	@ 0x44
 800e680:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e682:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e684:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e686:	e841 2300 	strex	r3, r2, [r1]
 800e68a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e68c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d1e4      	bne.n	800e65c <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	3308      	adds	r3, #8
 800e698:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e69a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e69c:	e853 3f00 	ldrex	r3, [r3]
 800e6a0:	623b      	str	r3, [r7, #32]
   return(result);
 800e6a2:	6a3a      	ldr	r2, [r7, #32]
 800e6a4:	4b55      	ldr	r3, [pc, #340]	@ (800e7fc <HAL_UART_IRQHandler+0x770>)
 800e6a6:	4013      	ands	r3, r2
 800e6a8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	3308      	adds	r3, #8
 800e6b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800e6b6:	633a      	str	r2, [r7, #48]	@ 0x30
 800e6b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e6bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e6be:	e841 2300 	strex	r3, r2, [r1]
 800e6c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e6c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d1e3      	bne.n	800e692 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	2220      	movs	r2, #32
 800e6ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	2200      	movs	r2, #0
 800e6d6:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	2200      	movs	r2, #0
 800e6dc:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6e4:	693b      	ldr	r3, [r7, #16]
 800e6e6:	e853 3f00 	ldrex	r3, [r3]
 800e6ea:	60fb      	str	r3, [r7, #12]
   return(result);
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	f023 0310 	bic.w	r3, r3, #16
 800e6f2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	461a      	mov	r2, r3
 800e6fc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800e700:	61fb      	str	r3, [r7, #28]
 800e702:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e704:	69b9      	ldr	r1, [r7, #24]
 800e706:	69fa      	ldr	r2, [r7, #28]
 800e708:	e841 2300 	strex	r3, r2, [r1]
 800e70c:	617b      	str	r3, [r7, #20]
   return(result);
 800e70e:	697b      	ldr	r3, [r7, #20]
 800e710:	2b00      	cmp	r3, #0
 800e712:	d1e4      	bne.n	800e6de <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	2202      	movs	r2, #2
 800e718:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e71a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800e71e:	4619      	mov	r1, r3
 800e720:	6878      	ldr	r0, [r7, #4]
 800e722:	f7f2 fe59 	bl	80013d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e726:	e063      	b.n	800e7f0 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e728:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e72c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800e730:	2b00      	cmp	r3, #0
 800e732:	d00e      	beq.n	800e752 <HAL_UART_IRQHandler+0x6c6>
 800e734:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e738:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d008      	beq.n	800e752 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800e748:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800e74a:	6878      	ldr	r0, [r7, #4]
 800e74c:	f001 f835 	bl	800f7ba <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e750:	e051      	b.n	800e7f6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800e752:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e756:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d014      	beq.n	800e788 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800e75e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e762:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e766:	2b00      	cmp	r3, #0
 800e768:	d105      	bne.n	800e776 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800e76a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e76e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e772:	2b00      	cmp	r3, #0
 800e774:	d008      	beq.n	800e788 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d03a      	beq.n	800e7f4 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e782:	6878      	ldr	r0, [r7, #4]
 800e784:	4798      	blx	r3
    }
    return;
 800e786:	e035      	b.n	800e7f4 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e788:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e78c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e790:	2b00      	cmp	r3, #0
 800e792:	d009      	beq.n	800e7a8 <HAL_UART_IRQHandler+0x71c>
 800e794:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e798:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d003      	beq.n	800e7a8 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800e7a0:	6878      	ldr	r0, [r7, #4]
 800e7a2:	f000 ffdf 	bl	800f764 <UART_EndTransmit_IT>
    return;
 800e7a6:	e026      	b.n	800e7f6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800e7a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e7ac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d009      	beq.n	800e7c8 <HAL_UART_IRQHandler+0x73c>
 800e7b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e7b8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d003      	beq.n	800e7c8 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800e7c0:	6878      	ldr	r0, [r7, #4]
 800e7c2:	f001 f80e 	bl	800f7e2 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e7c6:	e016      	b.n	800e7f6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800e7c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e7cc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d010      	beq.n	800e7f6 <HAL_UART_IRQHandler+0x76a>
 800e7d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	da0c      	bge.n	800e7f6 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800e7dc:	6878      	ldr	r0, [r7, #4]
 800e7de:	f000 fff6 	bl	800f7ce <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e7e2:	e008      	b.n	800e7f6 <HAL_UART_IRQHandler+0x76a>
      return;
 800e7e4:	bf00      	nop
 800e7e6:	e006      	b.n	800e7f6 <HAL_UART_IRQHandler+0x76a>
    return;
 800e7e8:	bf00      	nop
 800e7ea:	e004      	b.n	800e7f6 <HAL_UART_IRQHandler+0x76a>
      return;
 800e7ec:	bf00      	nop
 800e7ee:	e002      	b.n	800e7f6 <HAL_UART_IRQHandler+0x76a>
      return;
 800e7f0:	bf00      	nop
 800e7f2:	e000      	b.n	800e7f6 <HAL_UART_IRQHandler+0x76a>
    return;
 800e7f4:	bf00      	nop
  }
}
 800e7f6:	37e8      	adds	r7, #232	@ 0xe8
 800e7f8:	46bd      	mov	sp, r7
 800e7fa:	bd80      	pop	{r7, pc}
 800e7fc:	effffffe 	.word	0xeffffffe

0800e800 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e800:	b480      	push	{r7}
 800e802:	b083      	sub	sp, #12
 800e804:	af00      	add	r7, sp, #0
 800e806:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800e808:	bf00      	nop
 800e80a:	370c      	adds	r7, #12
 800e80c:	46bd      	mov	sp, r7
 800e80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e812:	4770      	bx	lr

0800e814 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e814:	b480      	push	{r7}
 800e816:	b083      	sub	sp, #12
 800e818:	af00      	add	r7, sp, #0
 800e81a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800e81c:	bf00      	nop
 800e81e:	370c      	adds	r7, #12
 800e820:	46bd      	mov	sp, r7
 800e822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e826:	4770      	bx	lr

0800e828 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e828:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e82c:	b092      	sub	sp, #72	@ 0x48
 800e82e:	af00      	add	r7, sp, #0
 800e830:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e832:	2300      	movs	r3, #0
 800e834:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e838:	697b      	ldr	r3, [r7, #20]
 800e83a:	689a      	ldr	r2, [r3, #8]
 800e83c:	697b      	ldr	r3, [r7, #20]
 800e83e:	691b      	ldr	r3, [r3, #16]
 800e840:	431a      	orrs	r2, r3
 800e842:	697b      	ldr	r3, [r7, #20]
 800e844:	695b      	ldr	r3, [r3, #20]
 800e846:	431a      	orrs	r2, r3
 800e848:	697b      	ldr	r3, [r7, #20]
 800e84a:	69db      	ldr	r3, [r3, #28]
 800e84c:	4313      	orrs	r3, r2
 800e84e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e850:	697b      	ldr	r3, [r7, #20]
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	681a      	ldr	r2, [r3, #0]
 800e856:	4bbe      	ldr	r3, [pc, #760]	@ (800eb50 <UART_SetConfig+0x328>)
 800e858:	4013      	ands	r3, r2
 800e85a:	697a      	ldr	r2, [r7, #20]
 800e85c:	6812      	ldr	r2, [r2, #0]
 800e85e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e860:	430b      	orrs	r3, r1
 800e862:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e864:	697b      	ldr	r3, [r7, #20]
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	685b      	ldr	r3, [r3, #4]
 800e86a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800e86e:	697b      	ldr	r3, [r7, #20]
 800e870:	68da      	ldr	r2, [r3, #12]
 800e872:	697b      	ldr	r3, [r7, #20]
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	430a      	orrs	r2, r1
 800e878:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e87a:	697b      	ldr	r3, [r7, #20]
 800e87c:	699b      	ldr	r3, [r3, #24]
 800e87e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e880:	697b      	ldr	r3, [r7, #20]
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	4ab3      	ldr	r2, [pc, #716]	@ (800eb54 <UART_SetConfig+0x32c>)
 800e886:	4293      	cmp	r3, r2
 800e888:	d004      	beq.n	800e894 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e88a:	697b      	ldr	r3, [r7, #20]
 800e88c:	6a1b      	ldr	r3, [r3, #32]
 800e88e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e890:	4313      	orrs	r3, r2
 800e892:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e894:	697b      	ldr	r3, [r7, #20]
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	689a      	ldr	r2, [r3, #8]
 800e89a:	4baf      	ldr	r3, [pc, #700]	@ (800eb58 <UART_SetConfig+0x330>)
 800e89c:	4013      	ands	r3, r2
 800e89e:	697a      	ldr	r2, [r7, #20]
 800e8a0:	6812      	ldr	r2, [r2, #0]
 800e8a2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e8a4:	430b      	orrs	r3, r1
 800e8a6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e8a8:	697b      	ldr	r3, [r7, #20]
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e8ae:	f023 010f 	bic.w	r1, r3, #15
 800e8b2:	697b      	ldr	r3, [r7, #20]
 800e8b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e8b6:	697b      	ldr	r3, [r7, #20]
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	430a      	orrs	r2, r1
 800e8bc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e8be:	697b      	ldr	r3, [r7, #20]
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	4aa6      	ldr	r2, [pc, #664]	@ (800eb5c <UART_SetConfig+0x334>)
 800e8c4:	4293      	cmp	r3, r2
 800e8c6:	d177      	bne.n	800e9b8 <UART_SetConfig+0x190>
 800e8c8:	4ba5      	ldr	r3, [pc, #660]	@ (800eb60 <UART_SetConfig+0x338>)
 800e8ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e8cc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800e8d0:	2b28      	cmp	r3, #40	@ 0x28
 800e8d2:	d86d      	bhi.n	800e9b0 <UART_SetConfig+0x188>
 800e8d4:	a201      	add	r2, pc, #4	@ (adr r2, 800e8dc <UART_SetConfig+0xb4>)
 800e8d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8da:	bf00      	nop
 800e8dc:	0800e981 	.word	0x0800e981
 800e8e0:	0800e9b1 	.word	0x0800e9b1
 800e8e4:	0800e9b1 	.word	0x0800e9b1
 800e8e8:	0800e9b1 	.word	0x0800e9b1
 800e8ec:	0800e9b1 	.word	0x0800e9b1
 800e8f0:	0800e9b1 	.word	0x0800e9b1
 800e8f4:	0800e9b1 	.word	0x0800e9b1
 800e8f8:	0800e9b1 	.word	0x0800e9b1
 800e8fc:	0800e989 	.word	0x0800e989
 800e900:	0800e9b1 	.word	0x0800e9b1
 800e904:	0800e9b1 	.word	0x0800e9b1
 800e908:	0800e9b1 	.word	0x0800e9b1
 800e90c:	0800e9b1 	.word	0x0800e9b1
 800e910:	0800e9b1 	.word	0x0800e9b1
 800e914:	0800e9b1 	.word	0x0800e9b1
 800e918:	0800e9b1 	.word	0x0800e9b1
 800e91c:	0800e991 	.word	0x0800e991
 800e920:	0800e9b1 	.word	0x0800e9b1
 800e924:	0800e9b1 	.word	0x0800e9b1
 800e928:	0800e9b1 	.word	0x0800e9b1
 800e92c:	0800e9b1 	.word	0x0800e9b1
 800e930:	0800e9b1 	.word	0x0800e9b1
 800e934:	0800e9b1 	.word	0x0800e9b1
 800e938:	0800e9b1 	.word	0x0800e9b1
 800e93c:	0800e999 	.word	0x0800e999
 800e940:	0800e9b1 	.word	0x0800e9b1
 800e944:	0800e9b1 	.word	0x0800e9b1
 800e948:	0800e9b1 	.word	0x0800e9b1
 800e94c:	0800e9b1 	.word	0x0800e9b1
 800e950:	0800e9b1 	.word	0x0800e9b1
 800e954:	0800e9b1 	.word	0x0800e9b1
 800e958:	0800e9b1 	.word	0x0800e9b1
 800e95c:	0800e9a1 	.word	0x0800e9a1
 800e960:	0800e9b1 	.word	0x0800e9b1
 800e964:	0800e9b1 	.word	0x0800e9b1
 800e968:	0800e9b1 	.word	0x0800e9b1
 800e96c:	0800e9b1 	.word	0x0800e9b1
 800e970:	0800e9b1 	.word	0x0800e9b1
 800e974:	0800e9b1 	.word	0x0800e9b1
 800e978:	0800e9b1 	.word	0x0800e9b1
 800e97c:	0800e9a9 	.word	0x0800e9a9
 800e980:	2301      	movs	r3, #1
 800e982:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e986:	e222      	b.n	800edce <UART_SetConfig+0x5a6>
 800e988:	2304      	movs	r3, #4
 800e98a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e98e:	e21e      	b.n	800edce <UART_SetConfig+0x5a6>
 800e990:	2308      	movs	r3, #8
 800e992:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e996:	e21a      	b.n	800edce <UART_SetConfig+0x5a6>
 800e998:	2310      	movs	r3, #16
 800e99a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e99e:	e216      	b.n	800edce <UART_SetConfig+0x5a6>
 800e9a0:	2320      	movs	r3, #32
 800e9a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e9a6:	e212      	b.n	800edce <UART_SetConfig+0x5a6>
 800e9a8:	2340      	movs	r3, #64	@ 0x40
 800e9aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e9ae:	e20e      	b.n	800edce <UART_SetConfig+0x5a6>
 800e9b0:	2380      	movs	r3, #128	@ 0x80
 800e9b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e9b6:	e20a      	b.n	800edce <UART_SetConfig+0x5a6>
 800e9b8:	697b      	ldr	r3, [r7, #20]
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	4a69      	ldr	r2, [pc, #420]	@ (800eb64 <UART_SetConfig+0x33c>)
 800e9be:	4293      	cmp	r3, r2
 800e9c0:	d130      	bne.n	800ea24 <UART_SetConfig+0x1fc>
 800e9c2:	4b67      	ldr	r3, [pc, #412]	@ (800eb60 <UART_SetConfig+0x338>)
 800e9c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e9c6:	f003 0307 	and.w	r3, r3, #7
 800e9ca:	2b05      	cmp	r3, #5
 800e9cc:	d826      	bhi.n	800ea1c <UART_SetConfig+0x1f4>
 800e9ce:	a201      	add	r2, pc, #4	@ (adr r2, 800e9d4 <UART_SetConfig+0x1ac>)
 800e9d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9d4:	0800e9ed 	.word	0x0800e9ed
 800e9d8:	0800e9f5 	.word	0x0800e9f5
 800e9dc:	0800e9fd 	.word	0x0800e9fd
 800e9e0:	0800ea05 	.word	0x0800ea05
 800e9e4:	0800ea0d 	.word	0x0800ea0d
 800e9e8:	0800ea15 	.word	0x0800ea15
 800e9ec:	2300      	movs	r3, #0
 800e9ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e9f2:	e1ec      	b.n	800edce <UART_SetConfig+0x5a6>
 800e9f4:	2304      	movs	r3, #4
 800e9f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e9fa:	e1e8      	b.n	800edce <UART_SetConfig+0x5a6>
 800e9fc:	2308      	movs	r3, #8
 800e9fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea02:	e1e4      	b.n	800edce <UART_SetConfig+0x5a6>
 800ea04:	2310      	movs	r3, #16
 800ea06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea0a:	e1e0      	b.n	800edce <UART_SetConfig+0x5a6>
 800ea0c:	2320      	movs	r3, #32
 800ea0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea12:	e1dc      	b.n	800edce <UART_SetConfig+0x5a6>
 800ea14:	2340      	movs	r3, #64	@ 0x40
 800ea16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea1a:	e1d8      	b.n	800edce <UART_SetConfig+0x5a6>
 800ea1c:	2380      	movs	r3, #128	@ 0x80
 800ea1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea22:	e1d4      	b.n	800edce <UART_SetConfig+0x5a6>
 800ea24:	697b      	ldr	r3, [r7, #20]
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	4a4f      	ldr	r2, [pc, #316]	@ (800eb68 <UART_SetConfig+0x340>)
 800ea2a:	4293      	cmp	r3, r2
 800ea2c:	d130      	bne.n	800ea90 <UART_SetConfig+0x268>
 800ea2e:	4b4c      	ldr	r3, [pc, #304]	@ (800eb60 <UART_SetConfig+0x338>)
 800ea30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ea32:	f003 0307 	and.w	r3, r3, #7
 800ea36:	2b05      	cmp	r3, #5
 800ea38:	d826      	bhi.n	800ea88 <UART_SetConfig+0x260>
 800ea3a:	a201      	add	r2, pc, #4	@ (adr r2, 800ea40 <UART_SetConfig+0x218>)
 800ea3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea40:	0800ea59 	.word	0x0800ea59
 800ea44:	0800ea61 	.word	0x0800ea61
 800ea48:	0800ea69 	.word	0x0800ea69
 800ea4c:	0800ea71 	.word	0x0800ea71
 800ea50:	0800ea79 	.word	0x0800ea79
 800ea54:	0800ea81 	.word	0x0800ea81
 800ea58:	2300      	movs	r3, #0
 800ea5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea5e:	e1b6      	b.n	800edce <UART_SetConfig+0x5a6>
 800ea60:	2304      	movs	r3, #4
 800ea62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea66:	e1b2      	b.n	800edce <UART_SetConfig+0x5a6>
 800ea68:	2308      	movs	r3, #8
 800ea6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea6e:	e1ae      	b.n	800edce <UART_SetConfig+0x5a6>
 800ea70:	2310      	movs	r3, #16
 800ea72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea76:	e1aa      	b.n	800edce <UART_SetConfig+0x5a6>
 800ea78:	2320      	movs	r3, #32
 800ea7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea7e:	e1a6      	b.n	800edce <UART_SetConfig+0x5a6>
 800ea80:	2340      	movs	r3, #64	@ 0x40
 800ea82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea86:	e1a2      	b.n	800edce <UART_SetConfig+0x5a6>
 800ea88:	2380      	movs	r3, #128	@ 0x80
 800ea8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea8e:	e19e      	b.n	800edce <UART_SetConfig+0x5a6>
 800ea90:	697b      	ldr	r3, [r7, #20]
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	4a35      	ldr	r2, [pc, #212]	@ (800eb6c <UART_SetConfig+0x344>)
 800ea96:	4293      	cmp	r3, r2
 800ea98:	d130      	bne.n	800eafc <UART_SetConfig+0x2d4>
 800ea9a:	4b31      	ldr	r3, [pc, #196]	@ (800eb60 <UART_SetConfig+0x338>)
 800ea9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ea9e:	f003 0307 	and.w	r3, r3, #7
 800eaa2:	2b05      	cmp	r3, #5
 800eaa4:	d826      	bhi.n	800eaf4 <UART_SetConfig+0x2cc>
 800eaa6:	a201      	add	r2, pc, #4	@ (adr r2, 800eaac <UART_SetConfig+0x284>)
 800eaa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eaac:	0800eac5 	.word	0x0800eac5
 800eab0:	0800eacd 	.word	0x0800eacd
 800eab4:	0800ead5 	.word	0x0800ead5
 800eab8:	0800eadd 	.word	0x0800eadd
 800eabc:	0800eae5 	.word	0x0800eae5
 800eac0:	0800eaed 	.word	0x0800eaed
 800eac4:	2300      	movs	r3, #0
 800eac6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eaca:	e180      	b.n	800edce <UART_SetConfig+0x5a6>
 800eacc:	2304      	movs	r3, #4
 800eace:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ead2:	e17c      	b.n	800edce <UART_SetConfig+0x5a6>
 800ead4:	2308      	movs	r3, #8
 800ead6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eada:	e178      	b.n	800edce <UART_SetConfig+0x5a6>
 800eadc:	2310      	movs	r3, #16
 800eade:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eae2:	e174      	b.n	800edce <UART_SetConfig+0x5a6>
 800eae4:	2320      	movs	r3, #32
 800eae6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eaea:	e170      	b.n	800edce <UART_SetConfig+0x5a6>
 800eaec:	2340      	movs	r3, #64	@ 0x40
 800eaee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eaf2:	e16c      	b.n	800edce <UART_SetConfig+0x5a6>
 800eaf4:	2380      	movs	r3, #128	@ 0x80
 800eaf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eafa:	e168      	b.n	800edce <UART_SetConfig+0x5a6>
 800eafc:	697b      	ldr	r3, [r7, #20]
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	4a1b      	ldr	r2, [pc, #108]	@ (800eb70 <UART_SetConfig+0x348>)
 800eb02:	4293      	cmp	r3, r2
 800eb04:	d142      	bne.n	800eb8c <UART_SetConfig+0x364>
 800eb06:	4b16      	ldr	r3, [pc, #88]	@ (800eb60 <UART_SetConfig+0x338>)
 800eb08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eb0a:	f003 0307 	and.w	r3, r3, #7
 800eb0e:	2b05      	cmp	r3, #5
 800eb10:	d838      	bhi.n	800eb84 <UART_SetConfig+0x35c>
 800eb12:	a201      	add	r2, pc, #4	@ (adr r2, 800eb18 <UART_SetConfig+0x2f0>)
 800eb14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb18:	0800eb31 	.word	0x0800eb31
 800eb1c:	0800eb39 	.word	0x0800eb39
 800eb20:	0800eb41 	.word	0x0800eb41
 800eb24:	0800eb49 	.word	0x0800eb49
 800eb28:	0800eb75 	.word	0x0800eb75
 800eb2c:	0800eb7d 	.word	0x0800eb7d
 800eb30:	2300      	movs	r3, #0
 800eb32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb36:	e14a      	b.n	800edce <UART_SetConfig+0x5a6>
 800eb38:	2304      	movs	r3, #4
 800eb3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb3e:	e146      	b.n	800edce <UART_SetConfig+0x5a6>
 800eb40:	2308      	movs	r3, #8
 800eb42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb46:	e142      	b.n	800edce <UART_SetConfig+0x5a6>
 800eb48:	2310      	movs	r3, #16
 800eb4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb4e:	e13e      	b.n	800edce <UART_SetConfig+0x5a6>
 800eb50:	cfff69f3 	.word	0xcfff69f3
 800eb54:	58000c00 	.word	0x58000c00
 800eb58:	11fff4ff 	.word	0x11fff4ff
 800eb5c:	40011000 	.word	0x40011000
 800eb60:	58024400 	.word	0x58024400
 800eb64:	40004400 	.word	0x40004400
 800eb68:	40004800 	.word	0x40004800
 800eb6c:	40004c00 	.word	0x40004c00
 800eb70:	40005000 	.word	0x40005000
 800eb74:	2320      	movs	r3, #32
 800eb76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb7a:	e128      	b.n	800edce <UART_SetConfig+0x5a6>
 800eb7c:	2340      	movs	r3, #64	@ 0x40
 800eb7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb82:	e124      	b.n	800edce <UART_SetConfig+0x5a6>
 800eb84:	2380      	movs	r3, #128	@ 0x80
 800eb86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb8a:	e120      	b.n	800edce <UART_SetConfig+0x5a6>
 800eb8c:	697b      	ldr	r3, [r7, #20]
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	4acb      	ldr	r2, [pc, #812]	@ (800eec0 <UART_SetConfig+0x698>)
 800eb92:	4293      	cmp	r3, r2
 800eb94:	d176      	bne.n	800ec84 <UART_SetConfig+0x45c>
 800eb96:	4bcb      	ldr	r3, [pc, #812]	@ (800eec4 <UART_SetConfig+0x69c>)
 800eb98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eb9a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800eb9e:	2b28      	cmp	r3, #40	@ 0x28
 800eba0:	d86c      	bhi.n	800ec7c <UART_SetConfig+0x454>
 800eba2:	a201      	add	r2, pc, #4	@ (adr r2, 800eba8 <UART_SetConfig+0x380>)
 800eba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eba8:	0800ec4d 	.word	0x0800ec4d
 800ebac:	0800ec7d 	.word	0x0800ec7d
 800ebb0:	0800ec7d 	.word	0x0800ec7d
 800ebb4:	0800ec7d 	.word	0x0800ec7d
 800ebb8:	0800ec7d 	.word	0x0800ec7d
 800ebbc:	0800ec7d 	.word	0x0800ec7d
 800ebc0:	0800ec7d 	.word	0x0800ec7d
 800ebc4:	0800ec7d 	.word	0x0800ec7d
 800ebc8:	0800ec55 	.word	0x0800ec55
 800ebcc:	0800ec7d 	.word	0x0800ec7d
 800ebd0:	0800ec7d 	.word	0x0800ec7d
 800ebd4:	0800ec7d 	.word	0x0800ec7d
 800ebd8:	0800ec7d 	.word	0x0800ec7d
 800ebdc:	0800ec7d 	.word	0x0800ec7d
 800ebe0:	0800ec7d 	.word	0x0800ec7d
 800ebe4:	0800ec7d 	.word	0x0800ec7d
 800ebe8:	0800ec5d 	.word	0x0800ec5d
 800ebec:	0800ec7d 	.word	0x0800ec7d
 800ebf0:	0800ec7d 	.word	0x0800ec7d
 800ebf4:	0800ec7d 	.word	0x0800ec7d
 800ebf8:	0800ec7d 	.word	0x0800ec7d
 800ebfc:	0800ec7d 	.word	0x0800ec7d
 800ec00:	0800ec7d 	.word	0x0800ec7d
 800ec04:	0800ec7d 	.word	0x0800ec7d
 800ec08:	0800ec65 	.word	0x0800ec65
 800ec0c:	0800ec7d 	.word	0x0800ec7d
 800ec10:	0800ec7d 	.word	0x0800ec7d
 800ec14:	0800ec7d 	.word	0x0800ec7d
 800ec18:	0800ec7d 	.word	0x0800ec7d
 800ec1c:	0800ec7d 	.word	0x0800ec7d
 800ec20:	0800ec7d 	.word	0x0800ec7d
 800ec24:	0800ec7d 	.word	0x0800ec7d
 800ec28:	0800ec6d 	.word	0x0800ec6d
 800ec2c:	0800ec7d 	.word	0x0800ec7d
 800ec30:	0800ec7d 	.word	0x0800ec7d
 800ec34:	0800ec7d 	.word	0x0800ec7d
 800ec38:	0800ec7d 	.word	0x0800ec7d
 800ec3c:	0800ec7d 	.word	0x0800ec7d
 800ec40:	0800ec7d 	.word	0x0800ec7d
 800ec44:	0800ec7d 	.word	0x0800ec7d
 800ec48:	0800ec75 	.word	0x0800ec75
 800ec4c:	2301      	movs	r3, #1
 800ec4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec52:	e0bc      	b.n	800edce <UART_SetConfig+0x5a6>
 800ec54:	2304      	movs	r3, #4
 800ec56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec5a:	e0b8      	b.n	800edce <UART_SetConfig+0x5a6>
 800ec5c:	2308      	movs	r3, #8
 800ec5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec62:	e0b4      	b.n	800edce <UART_SetConfig+0x5a6>
 800ec64:	2310      	movs	r3, #16
 800ec66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec6a:	e0b0      	b.n	800edce <UART_SetConfig+0x5a6>
 800ec6c:	2320      	movs	r3, #32
 800ec6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec72:	e0ac      	b.n	800edce <UART_SetConfig+0x5a6>
 800ec74:	2340      	movs	r3, #64	@ 0x40
 800ec76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec7a:	e0a8      	b.n	800edce <UART_SetConfig+0x5a6>
 800ec7c:	2380      	movs	r3, #128	@ 0x80
 800ec7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec82:	e0a4      	b.n	800edce <UART_SetConfig+0x5a6>
 800ec84:	697b      	ldr	r3, [r7, #20]
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	4a8f      	ldr	r2, [pc, #572]	@ (800eec8 <UART_SetConfig+0x6a0>)
 800ec8a:	4293      	cmp	r3, r2
 800ec8c:	d130      	bne.n	800ecf0 <UART_SetConfig+0x4c8>
 800ec8e:	4b8d      	ldr	r3, [pc, #564]	@ (800eec4 <UART_SetConfig+0x69c>)
 800ec90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ec92:	f003 0307 	and.w	r3, r3, #7
 800ec96:	2b05      	cmp	r3, #5
 800ec98:	d826      	bhi.n	800ece8 <UART_SetConfig+0x4c0>
 800ec9a:	a201      	add	r2, pc, #4	@ (adr r2, 800eca0 <UART_SetConfig+0x478>)
 800ec9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eca0:	0800ecb9 	.word	0x0800ecb9
 800eca4:	0800ecc1 	.word	0x0800ecc1
 800eca8:	0800ecc9 	.word	0x0800ecc9
 800ecac:	0800ecd1 	.word	0x0800ecd1
 800ecb0:	0800ecd9 	.word	0x0800ecd9
 800ecb4:	0800ece1 	.word	0x0800ece1
 800ecb8:	2300      	movs	r3, #0
 800ecba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ecbe:	e086      	b.n	800edce <UART_SetConfig+0x5a6>
 800ecc0:	2304      	movs	r3, #4
 800ecc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ecc6:	e082      	b.n	800edce <UART_SetConfig+0x5a6>
 800ecc8:	2308      	movs	r3, #8
 800ecca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ecce:	e07e      	b.n	800edce <UART_SetConfig+0x5a6>
 800ecd0:	2310      	movs	r3, #16
 800ecd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ecd6:	e07a      	b.n	800edce <UART_SetConfig+0x5a6>
 800ecd8:	2320      	movs	r3, #32
 800ecda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ecde:	e076      	b.n	800edce <UART_SetConfig+0x5a6>
 800ece0:	2340      	movs	r3, #64	@ 0x40
 800ece2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ece6:	e072      	b.n	800edce <UART_SetConfig+0x5a6>
 800ece8:	2380      	movs	r3, #128	@ 0x80
 800ecea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ecee:	e06e      	b.n	800edce <UART_SetConfig+0x5a6>
 800ecf0:	697b      	ldr	r3, [r7, #20]
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	4a75      	ldr	r2, [pc, #468]	@ (800eecc <UART_SetConfig+0x6a4>)
 800ecf6:	4293      	cmp	r3, r2
 800ecf8:	d130      	bne.n	800ed5c <UART_SetConfig+0x534>
 800ecfa:	4b72      	ldr	r3, [pc, #456]	@ (800eec4 <UART_SetConfig+0x69c>)
 800ecfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ecfe:	f003 0307 	and.w	r3, r3, #7
 800ed02:	2b05      	cmp	r3, #5
 800ed04:	d826      	bhi.n	800ed54 <UART_SetConfig+0x52c>
 800ed06:	a201      	add	r2, pc, #4	@ (adr r2, 800ed0c <UART_SetConfig+0x4e4>)
 800ed08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed0c:	0800ed25 	.word	0x0800ed25
 800ed10:	0800ed2d 	.word	0x0800ed2d
 800ed14:	0800ed35 	.word	0x0800ed35
 800ed18:	0800ed3d 	.word	0x0800ed3d
 800ed1c:	0800ed45 	.word	0x0800ed45
 800ed20:	0800ed4d 	.word	0x0800ed4d
 800ed24:	2300      	movs	r3, #0
 800ed26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed2a:	e050      	b.n	800edce <UART_SetConfig+0x5a6>
 800ed2c:	2304      	movs	r3, #4
 800ed2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed32:	e04c      	b.n	800edce <UART_SetConfig+0x5a6>
 800ed34:	2308      	movs	r3, #8
 800ed36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed3a:	e048      	b.n	800edce <UART_SetConfig+0x5a6>
 800ed3c:	2310      	movs	r3, #16
 800ed3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed42:	e044      	b.n	800edce <UART_SetConfig+0x5a6>
 800ed44:	2320      	movs	r3, #32
 800ed46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed4a:	e040      	b.n	800edce <UART_SetConfig+0x5a6>
 800ed4c:	2340      	movs	r3, #64	@ 0x40
 800ed4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed52:	e03c      	b.n	800edce <UART_SetConfig+0x5a6>
 800ed54:	2380      	movs	r3, #128	@ 0x80
 800ed56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed5a:	e038      	b.n	800edce <UART_SetConfig+0x5a6>
 800ed5c:	697b      	ldr	r3, [r7, #20]
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	4a5b      	ldr	r2, [pc, #364]	@ (800eed0 <UART_SetConfig+0x6a8>)
 800ed62:	4293      	cmp	r3, r2
 800ed64:	d130      	bne.n	800edc8 <UART_SetConfig+0x5a0>
 800ed66:	4b57      	ldr	r3, [pc, #348]	@ (800eec4 <UART_SetConfig+0x69c>)
 800ed68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ed6a:	f003 0307 	and.w	r3, r3, #7
 800ed6e:	2b05      	cmp	r3, #5
 800ed70:	d826      	bhi.n	800edc0 <UART_SetConfig+0x598>
 800ed72:	a201      	add	r2, pc, #4	@ (adr r2, 800ed78 <UART_SetConfig+0x550>)
 800ed74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed78:	0800ed91 	.word	0x0800ed91
 800ed7c:	0800ed99 	.word	0x0800ed99
 800ed80:	0800eda1 	.word	0x0800eda1
 800ed84:	0800eda9 	.word	0x0800eda9
 800ed88:	0800edb1 	.word	0x0800edb1
 800ed8c:	0800edb9 	.word	0x0800edb9
 800ed90:	2302      	movs	r3, #2
 800ed92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed96:	e01a      	b.n	800edce <UART_SetConfig+0x5a6>
 800ed98:	2304      	movs	r3, #4
 800ed9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed9e:	e016      	b.n	800edce <UART_SetConfig+0x5a6>
 800eda0:	2308      	movs	r3, #8
 800eda2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eda6:	e012      	b.n	800edce <UART_SetConfig+0x5a6>
 800eda8:	2310      	movs	r3, #16
 800edaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800edae:	e00e      	b.n	800edce <UART_SetConfig+0x5a6>
 800edb0:	2320      	movs	r3, #32
 800edb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800edb6:	e00a      	b.n	800edce <UART_SetConfig+0x5a6>
 800edb8:	2340      	movs	r3, #64	@ 0x40
 800edba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800edbe:	e006      	b.n	800edce <UART_SetConfig+0x5a6>
 800edc0:	2380      	movs	r3, #128	@ 0x80
 800edc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800edc6:	e002      	b.n	800edce <UART_SetConfig+0x5a6>
 800edc8:	2380      	movs	r3, #128	@ 0x80
 800edca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800edce:	697b      	ldr	r3, [r7, #20]
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	4a3f      	ldr	r2, [pc, #252]	@ (800eed0 <UART_SetConfig+0x6a8>)
 800edd4:	4293      	cmp	r3, r2
 800edd6:	f040 80f8 	bne.w	800efca <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800edda:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800edde:	2b20      	cmp	r3, #32
 800ede0:	dc46      	bgt.n	800ee70 <UART_SetConfig+0x648>
 800ede2:	2b02      	cmp	r3, #2
 800ede4:	f2c0 8082 	blt.w	800eeec <UART_SetConfig+0x6c4>
 800ede8:	3b02      	subs	r3, #2
 800edea:	2b1e      	cmp	r3, #30
 800edec:	d87e      	bhi.n	800eeec <UART_SetConfig+0x6c4>
 800edee:	a201      	add	r2, pc, #4	@ (adr r2, 800edf4 <UART_SetConfig+0x5cc>)
 800edf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800edf4:	0800ee77 	.word	0x0800ee77
 800edf8:	0800eeed 	.word	0x0800eeed
 800edfc:	0800ee7f 	.word	0x0800ee7f
 800ee00:	0800eeed 	.word	0x0800eeed
 800ee04:	0800eeed 	.word	0x0800eeed
 800ee08:	0800eeed 	.word	0x0800eeed
 800ee0c:	0800ee8f 	.word	0x0800ee8f
 800ee10:	0800eeed 	.word	0x0800eeed
 800ee14:	0800eeed 	.word	0x0800eeed
 800ee18:	0800eeed 	.word	0x0800eeed
 800ee1c:	0800eeed 	.word	0x0800eeed
 800ee20:	0800eeed 	.word	0x0800eeed
 800ee24:	0800eeed 	.word	0x0800eeed
 800ee28:	0800eeed 	.word	0x0800eeed
 800ee2c:	0800ee9f 	.word	0x0800ee9f
 800ee30:	0800eeed 	.word	0x0800eeed
 800ee34:	0800eeed 	.word	0x0800eeed
 800ee38:	0800eeed 	.word	0x0800eeed
 800ee3c:	0800eeed 	.word	0x0800eeed
 800ee40:	0800eeed 	.word	0x0800eeed
 800ee44:	0800eeed 	.word	0x0800eeed
 800ee48:	0800eeed 	.word	0x0800eeed
 800ee4c:	0800eeed 	.word	0x0800eeed
 800ee50:	0800eeed 	.word	0x0800eeed
 800ee54:	0800eeed 	.word	0x0800eeed
 800ee58:	0800eeed 	.word	0x0800eeed
 800ee5c:	0800eeed 	.word	0x0800eeed
 800ee60:	0800eeed 	.word	0x0800eeed
 800ee64:	0800eeed 	.word	0x0800eeed
 800ee68:	0800eeed 	.word	0x0800eeed
 800ee6c:	0800eedf 	.word	0x0800eedf
 800ee70:	2b40      	cmp	r3, #64	@ 0x40
 800ee72:	d037      	beq.n	800eee4 <UART_SetConfig+0x6bc>
 800ee74:	e03a      	b.n	800eeec <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ee76:	f7fd f967 	bl	800c148 <HAL_RCCEx_GetD3PCLK1Freq>
 800ee7a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ee7c:	e03c      	b.n	800eef8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ee7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ee82:	4618      	mov	r0, r3
 800ee84:	f7fd f976 	bl	800c174 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ee88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ee8c:	e034      	b.n	800eef8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ee8e:	f107 0318 	add.w	r3, r7, #24
 800ee92:	4618      	mov	r0, r3
 800ee94:	f7fd fac2 	bl	800c41c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ee98:	69fb      	ldr	r3, [r7, #28]
 800ee9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ee9c:	e02c      	b.n	800eef8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ee9e:	4b09      	ldr	r3, [pc, #36]	@ (800eec4 <UART_SetConfig+0x69c>)
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	f003 0320 	and.w	r3, r3, #32
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d016      	beq.n	800eed8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800eeaa:	4b06      	ldr	r3, [pc, #24]	@ (800eec4 <UART_SetConfig+0x69c>)
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	08db      	lsrs	r3, r3, #3
 800eeb0:	f003 0303 	and.w	r3, r3, #3
 800eeb4:	4a07      	ldr	r2, [pc, #28]	@ (800eed4 <UART_SetConfig+0x6ac>)
 800eeb6:	fa22 f303 	lsr.w	r3, r2, r3
 800eeba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800eebc:	e01c      	b.n	800eef8 <UART_SetConfig+0x6d0>
 800eebe:	bf00      	nop
 800eec0:	40011400 	.word	0x40011400
 800eec4:	58024400 	.word	0x58024400
 800eec8:	40007800 	.word	0x40007800
 800eecc:	40007c00 	.word	0x40007c00
 800eed0:	58000c00 	.word	0x58000c00
 800eed4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800eed8:	4b9d      	ldr	r3, [pc, #628]	@ (800f150 <UART_SetConfig+0x928>)
 800eeda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800eedc:	e00c      	b.n	800eef8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800eede:	4b9d      	ldr	r3, [pc, #628]	@ (800f154 <UART_SetConfig+0x92c>)
 800eee0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800eee2:	e009      	b.n	800eef8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800eee4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800eee8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800eeea:	e005      	b.n	800eef8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800eeec:	2300      	movs	r3, #0
 800eeee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800eef0:	2301      	movs	r3, #1
 800eef2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800eef6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800eef8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	f000 81de 	beq.w	800f2bc <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ef00:	697b      	ldr	r3, [r7, #20]
 800ef02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef04:	4a94      	ldr	r2, [pc, #592]	@ (800f158 <UART_SetConfig+0x930>)
 800ef06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ef0a:	461a      	mov	r2, r3
 800ef0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ef0e:	fbb3 f3f2 	udiv	r3, r3, r2
 800ef12:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ef14:	697b      	ldr	r3, [r7, #20]
 800ef16:	685a      	ldr	r2, [r3, #4]
 800ef18:	4613      	mov	r3, r2
 800ef1a:	005b      	lsls	r3, r3, #1
 800ef1c:	4413      	add	r3, r2
 800ef1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ef20:	429a      	cmp	r2, r3
 800ef22:	d305      	bcc.n	800ef30 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ef24:	697b      	ldr	r3, [r7, #20]
 800ef26:	685b      	ldr	r3, [r3, #4]
 800ef28:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ef2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ef2c:	429a      	cmp	r2, r3
 800ef2e:	d903      	bls.n	800ef38 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800ef30:	2301      	movs	r3, #1
 800ef32:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ef36:	e1c1      	b.n	800f2bc <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ef38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ef3a:	2200      	movs	r2, #0
 800ef3c:	60bb      	str	r3, [r7, #8]
 800ef3e:	60fa      	str	r2, [r7, #12]
 800ef40:	697b      	ldr	r3, [r7, #20]
 800ef42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef44:	4a84      	ldr	r2, [pc, #528]	@ (800f158 <UART_SetConfig+0x930>)
 800ef46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ef4a:	b29b      	uxth	r3, r3
 800ef4c:	2200      	movs	r2, #0
 800ef4e:	603b      	str	r3, [r7, #0]
 800ef50:	607a      	str	r2, [r7, #4]
 800ef52:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ef56:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ef5a:	f7f1 fa19 	bl	8000390 <__aeabi_uldivmod>
 800ef5e:	4602      	mov	r2, r0
 800ef60:	460b      	mov	r3, r1
 800ef62:	4610      	mov	r0, r2
 800ef64:	4619      	mov	r1, r3
 800ef66:	f04f 0200 	mov.w	r2, #0
 800ef6a:	f04f 0300 	mov.w	r3, #0
 800ef6e:	020b      	lsls	r3, r1, #8
 800ef70:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ef74:	0202      	lsls	r2, r0, #8
 800ef76:	6979      	ldr	r1, [r7, #20]
 800ef78:	6849      	ldr	r1, [r1, #4]
 800ef7a:	0849      	lsrs	r1, r1, #1
 800ef7c:	2000      	movs	r0, #0
 800ef7e:	460c      	mov	r4, r1
 800ef80:	4605      	mov	r5, r0
 800ef82:	eb12 0804 	adds.w	r8, r2, r4
 800ef86:	eb43 0905 	adc.w	r9, r3, r5
 800ef8a:	697b      	ldr	r3, [r7, #20]
 800ef8c:	685b      	ldr	r3, [r3, #4]
 800ef8e:	2200      	movs	r2, #0
 800ef90:	469a      	mov	sl, r3
 800ef92:	4693      	mov	fp, r2
 800ef94:	4652      	mov	r2, sl
 800ef96:	465b      	mov	r3, fp
 800ef98:	4640      	mov	r0, r8
 800ef9a:	4649      	mov	r1, r9
 800ef9c:	f7f1 f9f8 	bl	8000390 <__aeabi_uldivmod>
 800efa0:	4602      	mov	r2, r0
 800efa2:	460b      	mov	r3, r1
 800efa4:	4613      	mov	r3, r2
 800efa6:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800efa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800efaa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800efae:	d308      	bcc.n	800efc2 <UART_SetConfig+0x79a>
 800efb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800efb2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800efb6:	d204      	bcs.n	800efc2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800efb8:	697b      	ldr	r3, [r7, #20]
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800efbe:	60da      	str	r2, [r3, #12]
 800efc0:	e17c      	b.n	800f2bc <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800efc2:	2301      	movs	r3, #1
 800efc4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800efc8:	e178      	b.n	800f2bc <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800efca:	697b      	ldr	r3, [r7, #20]
 800efcc:	69db      	ldr	r3, [r3, #28]
 800efce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800efd2:	f040 80c5 	bne.w	800f160 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800efd6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800efda:	2b20      	cmp	r3, #32
 800efdc:	dc48      	bgt.n	800f070 <UART_SetConfig+0x848>
 800efde:	2b00      	cmp	r3, #0
 800efe0:	db7b      	blt.n	800f0da <UART_SetConfig+0x8b2>
 800efe2:	2b20      	cmp	r3, #32
 800efe4:	d879      	bhi.n	800f0da <UART_SetConfig+0x8b2>
 800efe6:	a201      	add	r2, pc, #4	@ (adr r2, 800efec <UART_SetConfig+0x7c4>)
 800efe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efec:	0800f077 	.word	0x0800f077
 800eff0:	0800f07f 	.word	0x0800f07f
 800eff4:	0800f0db 	.word	0x0800f0db
 800eff8:	0800f0db 	.word	0x0800f0db
 800effc:	0800f087 	.word	0x0800f087
 800f000:	0800f0db 	.word	0x0800f0db
 800f004:	0800f0db 	.word	0x0800f0db
 800f008:	0800f0db 	.word	0x0800f0db
 800f00c:	0800f097 	.word	0x0800f097
 800f010:	0800f0db 	.word	0x0800f0db
 800f014:	0800f0db 	.word	0x0800f0db
 800f018:	0800f0db 	.word	0x0800f0db
 800f01c:	0800f0db 	.word	0x0800f0db
 800f020:	0800f0db 	.word	0x0800f0db
 800f024:	0800f0db 	.word	0x0800f0db
 800f028:	0800f0db 	.word	0x0800f0db
 800f02c:	0800f0a7 	.word	0x0800f0a7
 800f030:	0800f0db 	.word	0x0800f0db
 800f034:	0800f0db 	.word	0x0800f0db
 800f038:	0800f0db 	.word	0x0800f0db
 800f03c:	0800f0db 	.word	0x0800f0db
 800f040:	0800f0db 	.word	0x0800f0db
 800f044:	0800f0db 	.word	0x0800f0db
 800f048:	0800f0db 	.word	0x0800f0db
 800f04c:	0800f0db 	.word	0x0800f0db
 800f050:	0800f0db 	.word	0x0800f0db
 800f054:	0800f0db 	.word	0x0800f0db
 800f058:	0800f0db 	.word	0x0800f0db
 800f05c:	0800f0db 	.word	0x0800f0db
 800f060:	0800f0db 	.word	0x0800f0db
 800f064:	0800f0db 	.word	0x0800f0db
 800f068:	0800f0db 	.word	0x0800f0db
 800f06c:	0800f0cd 	.word	0x0800f0cd
 800f070:	2b40      	cmp	r3, #64	@ 0x40
 800f072:	d02e      	beq.n	800f0d2 <UART_SetConfig+0x8aa>
 800f074:	e031      	b.n	800f0da <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f076:	f7fb f8b1 	bl	800a1dc <HAL_RCC_GetPCLK1Freq>
 800f07a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f07c:	e033      	b.n	800f0e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f07e:	f7fb f8c3 	bl	800a208 <HAL_RCC_GetPCLK2Freq>
 800f082:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f084:	e02f      	b.n	800f0e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f086:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f08a:	4618      	mov	r0, r3
 800f08c:	f7fd f872 	bl	800c174 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f092:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f094:	e027      	b.n	800f0e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f096:	f107 0318 	add.w	r3, r7, #24
 800f09a:	4618      	mov	r0, r3
 800f09c:	f7fd f9be 	bl	800c41c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f0a0:	69fb      	ldr	r3, [r7, #28]
 800f0a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f0a4:	e01f      	b.n	800f0e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f0a6:	4b2d      	ldr	r3, [pc, #180]	@ (800f15c <UART_SetConfig+0x934>)
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	f003 0320 	and.w	r3, r3, #32
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d009      	beq.n	800f0c6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f0b2:	4b2a      	ldr	r3, [pc, #168]	@ (800f15c <UART_SetConfig+0x934>)
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	08db      	lsrs	r3, r3, #3
 800f0b8:	f003 0303 	and.w	r3, r3, #3
 800f0bc:	4a24      	ldr	r2, [pc, #144]	@ (800f150 <UART_SetConfig+0x928>)
 800f0be:	fa22 f303 	lsr.w	r3, r2, r3
 800f0c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f0c4:	e00f      	b.n	800f0e6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800f0c6:	4b22      	ldr	r3, [pc, #136]	@ (800f150 <UART_SetConfig+0x928>)
 800f0c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f0ca:	e00c      	b.n	800f0e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f0cc:	4b21      	ldr	r3, [pc, #132]	@ (800f154 <UART_SetConfig+0x92c>)
 800f0ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f0d0:	e009      	b.n	800f0e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f0d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f0d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f0d8:	e005      	b.n	800f0e6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800f0da:	2300      	movs	r3, #0
 800f0dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800f0de:	2301      	movs	r3, #1
 800f0e0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800f0e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f0e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	f000 80e7 	beq.w	800f2bc <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f0ee:	697b      	ldr	r3, [r7, #20]
 800f0f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f0f2:	4a19      	ldr	r2, [pc, #100]	@ (800f158 <UART_SetConfig+0x930>)
 800f0f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f0f8:	461a      	mov	r2, r3
 800f0fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f0fc:	fbb3 f3f2 	udiv	r3, r3, r2
 800f100:	005a      	lsls	r2, r3, #1
 800f102:	697b      	ldr	r3, [r7, #20]
 800f104:	685b      	ldr	r3, [r3, #4]
 800f106:	085b      	lsrs	r3, r3, #1
 800f108:	441a      	add	r2, r3
 800f10a:	697b      	ldr	r3, [r7, #20]
 800f10c:	685b      	ldr	r3, [r3, #4]
 800f10e:	fbb2 f3f3 	udiv	r3, r2, r3
 800f112:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f114:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f116:	2b0f      	cmp	r3, #15
 800f118:	d916      	bls.n	800f148 <UART_SetConfig+0x920>
 800f11a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f11c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f120:	d212      	bcs.n	800f148 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f124:	b29b      	uxth	r3, r3
 800f126:	f023 030f 	bic.w	r3, r3, #15
 800f12a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f12c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f12e:	085b      	lsrs	r3, r3, #1
 800f130:	b29b      	uxth	r3, r3
 800f132:	f003 0307 	and.w	r3, r3, #7
 800f136:	b29a      	uxth	r2, r3
 800f138:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f13a:	4313      	orrs	r3, r2
 800f13c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800f13e:	697b      	ldr	r3, [r7, #20]
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800f144:	60da      	str	r2, [r3, #12]
 800f146:	e0b9      	b.n	800f2bc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800f148:	2301      	movs	r3, #1
 800f14a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800f14e:	e0b5      	b.n	800f2bc <UART_SetConfig+0xa94>
 800f150:	03d09000 	.word	0x03d09000
 800f154:	003d0900 	.word	0x003d0900
 800f158:	08012410 	.word	0x08012410
 800f15c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800f160:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800f164:	2b20      	cmp	r3, #32
 800f166:	dc49      	bgt.n	800f1fc <UART_SetConfig+0x9d4>
 800f168:	2b00      	cmp	r3, #0
 800f16a:	db7c      	blt.n	800f266 <UART_SetConfig+0xa3e>
 800f16c:	2b20      	cmp	r3, #32
 800f16e:	d87a      	bhi.n	800f266 <UART_SetConfig+0xa3e>
 800f170:	a201      	add	r2, pc, #4	@ (adr r2, 800f178 <UART_SetConfig+0x950>)
 800f172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f176:	bf00      	nop
 800f178:	0800f203 	.word	0x0800f203
 800f17c:	0800f20b 	.word	0x0800f20b
 800f180:	0800f267 	.word	0x0800f267
 800f184:	0800f267 	.word	0x0800f267
 800f188:	0800f213 	.word	0x0800f213
 800f18c:	0800f267 	.word	0x0800f267
 800f190:	0800f267 	.word	0x0800f267
 800f194:	0800f267 	.word	0x0800f267
 800f198:	0800f223 	.word	0x0800f223
 800f19c:	0800f267 	.word	0x0800f267
 800f1a0:	0800f267 	.word	0x0800f267
 800f1a4:	0800f267 	.word	0x0800f267
 800f1a8:	0800f267 	.word	0x0800f267
 800f1ac:	0800f267 	.word	0x0800f267
 800f1b0:	0800f267 	.word	0x0800f267
 800f1b4:	0800f267 	.word	0x0800f267
 800f1b8:	0800f233 	.word	0x0800f233
 800f1bc:	0800f267 	.word	0x0800f267
 800f1c0:	0800f267 	.word	0x0800f267
 800f1c4:	0800f267 	.word	0x0800f267
 800f1c8:	0800f267 	.word	0x0800f267
 800f1cc:	0800f267 	.word	0x0800f267
 800f1d0:	0800f267 	.word	0x0800f267
 800f1d4:	0800f267 	.word	0x0800f267
 800f1d8:	0800f267 	.word	0x0800f267
 800f1dc:	0800f267 	.word	0x0800f267
 800f1e0:	0800f267 	.word	0x0800f267
 800f1e4:	0800f267 	.word	0x0800f267
 800f1e8:	0800f267 	.word	0x0800f267
 800f1ec:	0800f267 	.word	0x0800f267
 800f1f0:	0800f267 	.word	0x0800f267
 800f1f4:	0800f267 	.word	0x0800f267
 800f1f8:	0800f259 	.word	0x0800f259
 800f1fc:	2b40      	cmp	r3, #64	@ 0x40
 800f1fe:	d02e      	beq.n	800f25e <UART_SetConfig+0xa36>
 800f200:	e031      	b.n	800f266 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f202:	f7fa ffeb 	bl	800a1dc <HAL_RCC_GetPCLK1Freq>
 800f206:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f208:	e033      	b.n	800f272 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f20a:	f7fa fffd 	bl	800a208 <HAL_RCC_GetPCLK2Freq>
 800f20e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f210:	e02f      	b.n	800f272 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f212:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f216:	4618      	mov	r0, r3
 800f218:	f7fc ffac 	bl	800c174 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f21c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f21e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f220:	e027      	b.n	800f272 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f222:	f107 0318 	add.w	r3, r7, #24
 800f226:	4618      	mov	r0, r3
 800f228:	f7fd f8f8 	bl	800c41c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f22c:	69fb      	ldr	r3, [r7, #28]
 800f22e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f230:	e01f      	b.n	800f272 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f232:	4b2d      	ldr	r3, [pc, #180]	@ (800f2e8 <UART_SetConfig+0xac0>)
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	f003 0320 	and.w	r3, r3, #32
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d009      	beq.n	800f252 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f23e:	4b2a      	ldr	r3, [pc, #168]	@ (800f2e8 <UART_SetConfig+0xac0>)
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	08db      	lsrs	r3, r3, #3
 800f244:	f003 0303 	and.w	r3, r3, #3
 800f248:	4a28      	ldr	r2, [pc, #160]	@ (800f2ec <UART_SetConfig+0xac4>)
 800f24a:	fa22 f303 	lsr.w	r3, r2, r3
 800f24e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f250:	e00f      	b.n	800f272 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800f252:	4b26      	ldr	r3, [pc, #152]	@ (800f2ec <UART_SetConfig+0xac4>)
 800f254:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f256:	e00c      	b.n	800f272 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f258:	4b25      	ldr	r3, [pc, #148]	@ (800f2f0 <UART_SetConfig+0xac8>)
 800f25a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f25c:	e009      	b.n	800f272 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f25e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f262:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f264:	e005      	b.n	800f272 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800f266:	2300      	movs	r3, #0
 800f268:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800f26a:	2301      	movs	r3, #1
 800f26c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800f270:	bf00      	nop
    }

    if (pclk != 0U)
 800f272:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f274:	2b00      	cmp	r3, #0
 800f276:	d021      	beq.n	800f2bc <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f278:	697b      	ldr	r3, [r7, #20]
 800f27a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f27c:	4a1d      	ldr	r2, [pc, #116]	@ (800f2f4 <UART_SetConfig+0xacc>)
 800f27e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f282:	461a      	mov	r2, r3
 800f284:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f286:	fbb3 f2f2 	udiv	r2, r3, r2
 800f28a:	697b      	ldr	r3, [r7, #20]
 800f28c:	685b      	ldr	r3, [r3, #4]
 800f28e:	085b      	lsrs	r3, r3, #1
 800f290:	441a      	add	r2, r3
 800f292:	697b      	ldr	r3, [r7, #20]
 800f294:	685b      	ldr	r3, [r3, #4]
 800f296:	fbb2 f3f3 	udiv	r3, r2, r3
 800f29a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f29c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f29e:	2b0f      	cmp	r3, #15
 800f2a0:	d909      	bls.n	800f2b6 <UART_SetConfig+0xa8e>
 800f2a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f2a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f2a8:	d205      	bcs.n	800f2b6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f2aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f2ac:	b29a      	uxth	r2, r3
 800f2ae:	697b      	ldr	r3, [r7, #20]
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	60da      	str	r2, [r3, #12]
 800f2b4:	e002      	b.n	800f2bc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800f2b6:	2301      	movs	r3, #1
 800f2b8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f2bc:	697b      	ldr	r3, [r7, #20]
 800f2be:	2201      	movs	r2, #1
 800f2c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800f2c4:	697b      	ldr	r3, [r7, #20]
 800f2c6:	2201      	movs	r2, #1
 800f2c8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f2cc:	697b      	ldr	r3, [r7, #20]
 800f2ce:	2200      	movs	r2, #0
 800f2d0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800f2d2:	697b      	ldr	r3, [r7, #20]
 800f2d4:	2200      	movs	r2, #0
 800f2d6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800f2d8:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800f2dc:	4618      	mov	r0, r3
 800f2de:	3748      	adds	r7, #72	@ 0x48
 800f2e0:	46bd      	mov	sp, r7
 800f2e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f2e6:	bf00      	nop
 800f2e8:	58024400 	.word	0x58024400
 800f2ec:	03d09000 	.word	0x03d09000
 800f2f0:	003d0900 	.word	0x003d0900
 800f2f4:	08012410 	.word	0x08012410

0800f2f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f2f8:	b480      	push	{r7}
 800f2fa:	b083      	sub	sp, #12
 800f2fc:	af00      	add	r7, sp, #0
 800f2fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f304:	f003 0308 	and.w	r3, r3, #8
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d00a      	beq.n	800f322 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	681b      	ldr	r3, [r3, #0]
 800f310:	685b      	ldr	r3, [r3, #4]
 800f312:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	430a      	orrs	r2, r1
 800f320:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f326:	f003 0301 	and.w	r3, r3, #1
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d00a      	beq.n	800f344 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	681b      	ldr	r3, [r3, #0]
 800f332:	685b      	ldr	r3, [r3, #4]
 800f334:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	430a      	orrs	r2, r1
 800f342:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f348:	f003 0302 	and.w	r3, r3, #2
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d00a      	beq.n	800f366 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	685b      	ldr	r3, [r3, #4]
 800f356:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	430a      	orrs	r2, r1
 800f364:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f36a:	f003 0304 	and.w	r3, r3, #4
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d00a      	beq.n	800f388 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	685b      	ldr	r3, [r3, #4]
 800f378:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	430a      	orrs	r2, r1
 800f386:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f38c:	f003 0310 	and.w	r3, r3, #16
 800f390:	2b00      	cmp	r3, #0
 800f392:	d00a      	beq.n	800f3aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	689b      	ldr	r3, [r3, #8]
 800f39a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	430a      	orrs	r2, r1
 800f3a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f3ae:	f003 0320 	and.w	r3, r3, #32
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d00a      	beq.n	800f3cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	689b      	ldr	r3, [r3, #8]
 800f3bc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	430a      	orrs	r2, r1
 800f3ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f3d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d01a      	beq.n	800f40e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	681b      	ldr	r3, [r3, #0]
 800f3dc:	685b      	ldr	r3, [r3, #4]
 800f3de:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	430a      	orrs	r2, r1
 800f3ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f3f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f3f6:	d10a      	bne.n	800f40e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	685b      	ldr	r3, [r3, #4]
 800f3fe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	430a      	orrs	r2, r1
 800f40c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f412:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f416:	2b00      	cmp	r3, #0
 800f418:	d00a      	beq.n	800f430 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	685b      	ldr	r3, [r3, #4]
 800f420:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	430a      	orrs	r2, r1
 800f42e:	605a      	str	r2, [r3, #4]
  }
}
 800f430:	bf00      	nop
 800f432:	370c      	adds	r7, #12
 800f434:	46bd      	mov	sp, r7
 800f436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f43a:	4770      	bx	lr

0800f43c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f43c:	b580      	push	{r7, lr}
 800f43e:	b098      	sub	sp, #96	@ 0x60
 800f440:	af02      	add	r7, sp, #8
 800f442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	2200      	movs	r2, #0
 800f448:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f44c:	f7f3 f98c 	bl	8002768 <HAL_GetTick>
 800f450:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	681b      	ldr	r3, [r3, #0]
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	f003 0308 	and.w	r3, r3, #8
 800f45c:	2b08      	cmp	r3, #8
 800f45e:	d12f      	bne.n	800f4c0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f460:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800f464:	9300      	str	r3, [sp, #0]
 800f466:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f468:	2200      	movs	r2, #0
 800f46a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800f46e:	6878      	ldr	r0, [r7, #4]
 800f470:	f000 f88e 	bl	800f590 <UART_WaitOnFlagUntilTimeout>
 800f474:	4603      	mov	r3, r0
 800f476:	2b00      	cmp	r3, #0
 800f478:	d022      	beq.n	800f4c0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	681b      	ldr	r3, [r3, #0]
 800f47e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f480:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f482:	e853 3f00 	ldrex	r3, [r3]
 800f486:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f488:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f48a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f48e:	653b      	str	r3, [r7, #80]	@ 0x50
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	461a      	mov	r2, r3
 800f496:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f498:	647b      	str	r3, [r7, #68]	@ 0x44
 800f49a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f49c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f49e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f4a0:	e841 2300 	strex	r3, r2, [r1]
 800f4a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f4a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d1e6      	bne.n	800f47a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	2220      	movs	r2, #32
 800f4b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	2200      	movs	r2, #0
 800f4b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f4bc:	2303      	movs	r3, #3
 800f4be:	e063      	b.n	800f588 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	681b      	ldr	r3, [r3, #0]
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	f003 0304 	and.w	r3, r3, #4
 800f4ca:	2b04      	cmp	r3, #4
 800f4cc:	d149      	bne.n	800f562 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f4ce:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800f4d2:	9300      	str	r3, [sp, #0]
 800f4d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f4d6:	2200      	movs	r2, #0
 800f4d8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800f4dc:	6878      	ldr	r0, [r7, #4]
 800f4de:	f000 f857 	bl	800f590 <UART_WaitOnFlagUntilTimeout>
 800f4e2:	4603      	mov	r3, r0
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d03c      	beq.n	800f562 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4f0:	e853 3f00 	ldrex	r3, [r3]
 800f4f4:	623b      	str	r3, [r7, #32]
   return(result);
 800f4f6:	6a3b      	ldr	r3, [r7, #32]
 800f4f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f4fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	461a      	mov	r2, r3
 800f504:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f506:	633b      	str	r3, [r7, #48]	@ 0x30
 800f508:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f50a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f50c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f50e:	e841 2300 	strex	r3, r2, [r1]
 800f512:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f514:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f516:	2b00      	cmp	r3, #0
 800f518:	d1e6      	bne.n	800f4e8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	681b      	ldr	r3, [r3, #0]
 800f51e:	3308      	adds	r3, #8
 800f520:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f522:	693b      	ldr	r3, [r7, #16]
 800f524:	e853 3f00 	ldrex	r3, [r3]
 800f528:	60fb      	str	r3, [r7, #12]
   return(result);
 800f52a:	68fb      	ldr	r3, [r7, #12]
 800f52c:	f023 0301 	bic.w	r3, r3, #1
 800f530:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	3308      	adds	r3, #8
 800f538:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f53a:	61fa      	str	r2, [r7, #28]
 800f53c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f53e:	69b9      	ldr	r1, [r7, #24]
 800f540:	69fa      	ldr	r2, [r7, #28]
 800f542:	e841 2300 	strex	r3, r2, [r1]
 800f546:	617b      	str	r3, [r7, #20]
   return(result);
 800f548:	697b      	ldr	r3, [r7, #20]
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	d1e5      	bne.n	800f51a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	2220      	movs	r2, #32
 800f552:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	2200      	movs	r2, #0
 800f55a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f55e:	2303      	movs	r3, #3
 800f560:	e012      	b.n	800f588 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	2220      	movs	r2, #32
 800f566:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	2220      	movs	r2, #32
 800f56e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	2200      	movs	r2, #0
 800f576:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	2200      	movs	r2, #0
 800f57c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	2200      	movs	r2, #0
 800f582:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f586:	2300      	movs	r3, #0
}
 800f588:	4618      	mov	r0, r3
 800f58a:	3758      	adds	r7, #88	@ 0x58
 800f58c:	46bd      	mov	sp, r7
 800f58e:	bd80      	pop	{r7, pc}

0800f590 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f590:	b580      	push	{r7, lr}
 800f592:	b084      	sub	sp, #16
 800f594:	af00      	add	r7, sp, #0
 800f596:	60f8      	str	r0, [r7, #12]
 800f598:	60b9      	str	r1, [r7, #8]
 800f59a:	603b      	str	r3, [r7, #0]
 800f59c:	4613      	mov	r3, r2
 800f59e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f5a0:	e04f      	b.n	800f642 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f5a2:	69bb      	ldr	r3, [r7, #24]
 800f5a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5a8:	d04b      	beq.n	800f642 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f5aa:	f7f3 f8dd 	bl	8002768 <HAL_GetTick>
 800f5ae:	4602      	mov	r2, r0
 800f5b0:	683b      	ldr	r3, [r7, #0]
 800f5b2:	1ad3      	subs	r3, r2, r3
 800f5b4:	69ba      	ldr	r2, [r7, #24]
 800f5b6:	429a      	cmp	r2, r3
 800f5b8:	d302      	bcc.n	800f5c0 <UART_WaitOnFlagUntilTimeout+0x30>
 800f5ba:	69bb      	ldr	r3, [r7, #24]
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d101      	bne.n	800f5c4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800f5c0:	2303      	movs	r3, #3
 800f5c2:	e04e      	b.n	800f662 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	681b      	ldr	r3, [r3, #0]
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	f003 0304 	and.w	r3, r3, #4
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d037      	beq.n	800f642 <UART_WaitOnFlagUntilTimeout+0xb2>
 800f5d2:	68bb      	ldr	r3, [r7, #8]
 800f5d4:	2b80      	cmp	r3, #128	@ 0x80
 800f5d6:	d034      	beq.n	800f642 <UART_WaitOnFlagUntilTimeout+0xb2>
 800f5d8:	68bb      	ldr	r3, [r7, #8]
 800f5da:	2b40      	cmp	r3, #64	@ 0x40
 800f5dc:	d031      	beq.n	800f642 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	69db      	ldr	r3, [r3, #28]
 800f5e4:	f003 0308 	and.w	r3, r3, #8
 800f5e8:	2b08      	cmp	r3, #8
 800f5ea:	d110      	bne.n	800f60e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f5ec:	68fb      	ldr	r3, [r7, #12]
 800f5ee:	681b      	ldr	r3, [r3, #0]
 800f5f0:	2208      	movs	r2, #8
 800f5f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f5f4:	68f8      	ldr	r0, [r7, #12]
 800f5f6:	f000 f839 	bl	800f66c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800f5fa:	68fb      	ldr	r3, [r7, #12]
 800f5fc:	2208      	movs	r2, #8
 800f5fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f602:	68fb      	ldr	r3, [r7, #12]
 800f604:	2200      	movs	r2, #0
 800f606:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800f60a:	2301      	movs	r3, #1
 800f60c:	e029      	b.n	800f662 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	681b      	ldr	r3, [r3, #0]
 800f612:	69db      	ldr	r3, [r3, #28]
 800f614:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f618:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f61c:	d111      	bne.n	800f642 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f61e:	68fb      	ldr	r3, [r7, #12]
 800f620:	681b      	ldr	r3, [r3, #0]
 800f622:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800f626:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f628:	68f8      	ldr	r0, [r7, #12]
 800f62a:	f000 f81f 	bl	800f66c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f62e:	68fb      	ldr	r3, [r7, #12]
 800f630:	2220      	movs	r2, #32
 800f632:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	2200      	movs	r2, #0
 800f63a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800f63e:	2303      	movs	r3, #3
 800f640:	e00f      	b.n	800f662 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f642:	68fb      	ldr	r3, [r7, #12]
 800f644:	681b      	ldr	r3, [r3, #0]
 800f646:	69da      	ldr	r2, [r3, #28]
 800f648:	68bb      	ldr	r3, [r7, #8]
 800f64a:	4013      	ands	r3, r2
 800f64c:	68ba      	ldr	r2, [r7, #8]
 800f64e:	429a      	cmp	r2, r3
 800f650:	bf0c      	ite	eq
 800f652:	2301      	moveq	r3, #1
 800f654:	2300      	movne	r3, #0
 800f656:	b2db      	uxtb	r3, r3
 800f658:	461a      	mov	r2, r3
 800f65a:	79fb      	ldrb	r3, [r7, #7]
 800f65c:	429a      	cmp	r2, r3
 800f65e:	d0a0      	beq.n	800f5a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f660:	2300      	movs	r3, #0
}
 800f662:	4618      	mov	r0, r3
 800f664:	3710      	adds	r7, #16
 800f666:	46bd      	mov	sp, r7
 800f668:	bd80      	pop	{r7, pc}
	...

0800f66c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f66c:	b480      	push	{r7}
 800f66e:	b095      	sub	sp, #84	@ 0x54
 800f670:	af00      	add	r7, sp, #0
 800f672:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	681b      	ldr	r3, [r3, #0]
 800f678:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f67a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f67c:	e853 3f00 	ldrex	r3, [r3]
 800f680:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800f682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f684:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f688:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	461a      	mov	r2, r3
 800f690:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f692:	643b      	str	r3, [r7, #64]	@ 0x40
 800f694:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f696:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f698:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f69a:	e841 2300 	strex	r3, r2, [r1]
 800f69e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f6a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d1e6      	bne.n	800f674 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	681b      	ldr	r3, [r3, #0]
 800f6aa:	3308      	adds	r3, #8
 800f6ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6ae:	6a3b      	ldr	r3, [r7, #32]
 800f6b0:	e853 3f00 	ldrex	r3, [r3]
 800f6b4:	61fb      	str	r3, [r7, #28]
   return(result);
 800f6b6:	69fa      	ldr	r2, [r7, #28]
 800f6b8:	4b1e      	ldr	r3, [pc, #120]	@ (800f734 <UART_EndRxTransfer+0xc8>)
 800f6ba:	4013      	ands	r3, r2
 800f6bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	3308      	adds	r3, #8
 800f6c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f6c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f6c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f6cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f6ce:	e841 2300 	strex	r3, r2, [r1]
 800f6d2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f6d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	d1e5      	bne.n	800f6a6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f6de:	2b01      	cmp	r3, #1
 800f6e0:	d118      	bne.n	800f714 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	e853 3f00 	ldrex	r3, [r3]
 800f6ee:	60bb      	str	r3, [r7, #8]
   return(result);
 800f6f0:	68bb      	ldr	r3, [r7, #8]
 800f6f2:	f023 0310 	bic.w	r3, r3, #16
 800f6f6:	647b      	str	r3, [r7, #68]	@ 0x44
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	681b      	ldr	r3, [r3, #0]
 800f6fc:	461a      	mov	r2, r3
 800f6fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f700:	61bb      	str	r3, [r7, #24]
 800f702:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f704:	6979      	ldr	r1, [r7, #20]
 800f706:	69ba      	ldr	r2, [r7, #24]
 800f708:	e841 2300 	strex	r3, r2, [r1]
 800f70c:	613b      	str	r3, [r7, #16]
   return(result);
 800f70e:	693b      	ldr	r3, [r7, #16]
 800f710:	2b00      	cmp	r3, #0
 800f712:	d1e6      	bne.n	800f6e2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	2220      	movs	r2, #32
 800f718:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	2200      	movs	r2, #0
 800f720:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	2200      	movs	r2, #0
 800f726:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800f728:	bf00      	nop
 800f72a:	3754      	adds	r7, #84	@ 0x54
 800f72c:	46bd      	mov	sp, r7
 800f72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f732:	4770      	bx	lr
 800f734:	effffffe 	.word	0xeffffffe

0800f738 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f738:	b580      	push	{r7, lr}
 800f73a:	b084      	sub	sp, #16
 800f73c:	af00      	add	r7, sp, #0
 800f73e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f744:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	2200      	movs	r2, #0
 800f74a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800f74e:	68fb      	ldr	r3, [r7, #12]
 800f750:	2200      	movs	r2, #0
 800f752:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f756:	68f8      	ldr	r0, [r7, #12]
 800f758:	f7ff f85c 	bl	800e814 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f75c:	bf00      	nop
 800f75e:	3710      	adds	r7, #16
 800f760:	46bd      	mov	sp, r7
 800f762:	bd80      	pop	{r7, pc}

0800f764 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f764:	b580      	push	{r7, lr}
 800f766:	b088      	sub	sp, #32
 800f768:	af00      	add	r7, sp, #0
 800f76a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	e853 3f00 	ldrex	r3, [r3]
 800f778:	60bb      	str	r3, [r7, #8]
   return(result);
 800f77a:	68bb      	ldr	r3, [r7, #8]
 800f77c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f780:	61fb      	str	r3, [r7, #28]
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	461a      	mov	r2, r3
 800f788:	69fb      	ldr	r3, [r7, #28]
 800f78a:	61bb      	str	r3, [r7, #24]
 800f78c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f78e:	6979      	ldr	r1, [r7, #20]
 800f790:	69ba      	ldr	r2, [r7, #24]
 800f792:	e841 2300 	strex	r3, r2, [r1]
 800f796:	613b      	str	r3, [r7, #16]
   return(result);
 800f798:	693b      	ldr	r3, [r7, #16]
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d1e6      	bne.n	800f76c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	2220      	movs	r2, #32
 800f7a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	2200      	movs	r2, #0
 800f7aa:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f7ac:	6878      	ldr	r0, [r7, #4]
 800f7ae:	f7ff f827 	bl	800e800 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f7b2:	bf00      	nop
 800f7b4:	3720      	adds	r7, #32
 800f7b6:	46bd      	mov	sp, r7
 800f7b8:	bd80      	pop	{r7, pc}

0800f7ba <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800f7ba:	b480      	push	{r7}
 800f7bc:	b083      	sub	sp, #12
 800f7be:	af00      	add	r7, sp, #0
 800f7c0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f7c2:	bf00      	nop
 800f7c4:	370c      	adds	r7, #12
 800f7c6:	46bd      	mov	sp, r7
 800f7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7cc:	4770      	bx	lr

0800f7ce <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800f7ce:	b480      	push	{r7}
 800f7d0:	b083      	sub	sp, #12
 800f7d2:	af00      	add	r7, sp, #0
 800f7d4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800f7d6:	bf00      	nop
 800f7d8:	370c      	adds	r7, #12
 800f7da:	46bd      	mov	sp, r7
 800f7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7e0:	4770      	bx	lr

0800f7e2 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800f7e2:	b480      	push	{r7}
 800f7e4:	b083      	sub	sp, #12
 800f7e6:	af00      	add	r7, sp, #0
 800f7e8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800f7ea:	bf00      	nop
 800f7ec:	370c      	adds	r7, #12
 800f7ee:	46bd      	mov	sp, r7
 800f7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7f4:	4770      	bx	lr

0800f7f6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f7f6:	b480      	push	{r7}
 800f7f8:	b085      	sub	sp, #20
 800f7fa:	af00      	add	r7, sp, #0
 800f7fc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f804:	2b01      	cmp	r3, #1
 800f806:	d101      	bne.n	800f80c <HAL_UARTEx_DisableFifoMode+0x16>
 800f808:	2302      	movs	r3, #2
 800f80a:	e027      	b.n	800f85c <HAL_UARTEx_DisableFifoMode+0x66>
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	2201      	movs	r2, #1
 800f810:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	2224      	movs	r2, #36	@ 0x24
 800f818:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	681b      	ldr	r3, [r3, #0]
 800f820:	681b      	ldr	r3, [r3, #0]
 800f822:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	681a      	ldr	r2, [r3, #0]
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	681b      	ldr	r3, [r3, #0]
 800f82e:	f022 0201 	bic.w	r2, r2, #1
 800f832:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f834:	68fb      	ldr	r3, [r7, #12]
 800f836:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800f83a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	2200      	movs	r2, #0
 800f840:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	68fa      	ldr	r2, [r7, #12]
 800f848:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	2220      	movs	r2, #32
 800f84e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	2200      	movs	r2, #0
 800f856:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f85a:	2300      	movs	r3, #0
}
 800f85c:	4618      	mov	r0, r3
 800f85e:	3714      	adds	r7, #20
 800f860:	46bd      	mov	sp, r7
 800f862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f866:	4770      	bx	lr

0800f868 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f868:	b580      	push	{r7, lr}
 800f86a:	b084      	sub	sp, #16
 800f86c:	af00      	add	r7, sp, #0
 800f86e:	6078      	str	r0, [r7, #4]
 800f870:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f878:	2b01      	cmp	r3, #1
 800f87a:	d101      	bne.n	800f880 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f87c:	2302      	movs	r3, #2
 800f87e:	e02d      	b.n	800f8dc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	2201      	movs	r2, #1
 800f884:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	2224      	movs	r2, #36	@ 0x24
 800f88c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	681a      	ldr	r2, [r3, #0]
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	f022 0201 	bic.w	r2, r2, #1
 800f8a6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	689b      	ldr	r3, [r3, #8]
 800f8ae:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	681b      	ldr	r3, [r3, #0]
 800f8b6:	683a      	ldr	r2, [r7, #0]
 800f8b8:	430a      	orrs	r2, r1
 800f8ba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f8bc:	6878      	ldr	r0, [r7, #4]
 800f8be:	f000 f84f 	bl	800f960 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	68fa      	ldr	r2, [r7, #12]
 800f8c8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	2220      	movs	r2, #32
 800f8ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	2200      	movs	r2, #0
 800f8d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f8da:	2300      	movs	r3, #0
}
 800f8dc:	4618      	mov	r0, r3
 800f8de:	3710      	adds	r7, #16
 800f8e0:	46bd      	mov	sp, r7
 800f8e2:	bd80      	pop	{r7, pc}

0800f8e4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f8e4:	b580      	push	{r7, lr}
 800f8e6:	b084      	sub	sp, #16
 800f8e8:	af00      	add	r7, sp, #0
 800f8ea:	6078      	str	r0, [r7, #4]
 800f8ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f8f4:	2b01      	cmp	r3, #1
 800f8f6:	d101      	bne.n	800f8fc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f8f8:	2302      	movs	r3, #2
 800f8fa:	e02d      	b.n	800f958 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	2201      	movs	r2, #1
 800f900:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	2224      	movs	r2, #36	@ 0x24
 800f908:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	681b      	ldr	r3, [r3, #0]
 800f912:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	681a      	ldr	r2, [r3, #0]
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	681b      	ldr	r3, [r3, #0]
 800f91e:	f022 0201 	bic.w	r2, r2, #1
 800f922:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	689b      	ldr	r3, [r3, #8]
 800f92a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	683a      	ldr	r2, [r7, #0]
 800f934:	430a      	orrs	r2, r1
 800f936:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f938:	6878      	ldr	r0, [r7, #4]
 800f93a:	f000 f811 	bl	800f960 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	681b      	ldr	r3, [r3, #0]
 800f942:	68fa      	ldr	r2, [r7, #12]
 800f944:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	2220      	movs	r2, #32
 800f94a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	2200      	movs	r2, #0
 800f952:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f956:	2300      	movs	r3, #0
}
 800f958:	4618      	mov	r0, r3
 800f95a:	3710      	adds	r7, #16
 800f95c:	46bd      	mov	sp, r7
 800f95e:	bd80      	pop	{r7, pc}

0800f960 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f960:	b480      	push	{r7}
 800f962:	b085      	sub	sp, #20
 800f964:	af00      	add	r7, sp, #0
 800f966:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d108      	bne.n	800f982 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	2201      	movs	r2, #1
 800f974:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	2201      	movs	r2, #1
 800f97c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f980:	e031      	b.n	800f9e6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f982:	2310      	movs	r3, #16
 800f984:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f986:	2310      	movs	r3, #16
 800f988:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	689b      	ldr	r3, [r3, #8]
 800f990:	0e5b      	lsrs	r3, r3, #25
 800f992:	b2db      	uxtb	r3, r3
 800f994:	f003 0307 	and.w	r3, r3, #7
 800f998:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	689b      	ldr	r3, [r3, #8]
 800f9a0:	0f5b      	lsrs	r3, r3, #29
 800f9a2:	b2db      	uxtb	r3, r3
 800f9a4:	f003 0307 	and.w	r3, r3, #7
 800f9a8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f9aa:	7bbb      	ldrb	r3, [r7, #14]
 800f9ac:	7b3a      	ldrb	r2, [r7, #12]
 800f9ae:	4911      	ldr	r1, [pc, #68]	@ (800f9f4 <UARTEx_SetNbDataToProcess+0x94>)
 800f9b0:	5c8a      	ldrb	r2, [r1, r2]
 800f9b2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f9b6:	7b3a      	ldrb	r2, [r7, #12]
 800f9b8:	490f      	ldr	r1, [pc, #60]	@ (800f9f8 <UARTEx_SetNbDataToProcess+0x98>)
 800f9ba:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f9bc:	fb93 f3f2 	sdiv	r3, r3, r2
 800f9c0:	b29a      	uxth	r2, r3
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f9c8:	7bfb      	ldrb	r3, [r7, #15]
 800f9ca:	7b7a      	ldrb	r2, [r7, #13]
 800f9cc:	4909      	ldr	r1, [pc, #36]	@ (800f9f4 <UARTEx_SetNbDataToProcess+0x94>)
 800f9ce:	5c8a      	ldrb	r2, [r1, r2]
 800f9d0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f9d4:	7b7a      	ldrb	r2, [r7, #13]
 800f9d6:	4908      	ldr	r1, [pc, #32]	@ (800f9f8 <UARTEx_SetNbDataToProcess+0x98>)
 800f9d8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f9da:	fb93 f3f2 	sdiv	r3, r3, r2
 800f9de:	b29a      	uxth	r2, r3
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800f9e6:	bf00      	nop
 800f9e8:	3714      	adds	r7, #20
 800f9ea:	46bd      	mov	sp, r7
 800f9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9f0:	4770      	bx	lr
 800f9f2:	bf00      	nop
 800f9f4:	08012428 	.word	0x08012428
 800f9f8:	08012430 	.word	0x08012430

0800f9fc <__cvt>:
 800f9fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f9fe:	ed2d 8b02 	vpush	{d8}
 800fa02:	eeb0 8b40 	vmov.f64	d8, d0
 800fa06:	b085      	sub	sp, #20
 800fa08:	4617      	mov	r7, r2
 800fa0a:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800fa0c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800fa0e:	ee18 2a90 	vmov	r2, s17
 800fa12:	f025 0520 	bic.w	r5, r5, #32
 800fa16:	2a00      	cmp	r2, #0
 800fa18:	bfb6      	itet	lt
 800fa1a:	222d      	movlt	r2, #45	@ 0x2d
 800fa1c:	2200      	movge	r2, #0
 800fa1e:	eeb1 8b40 	vneglt.f64	d8, d0
 800fa22:	2d46      	cmp	r5, #70	@ 0x46
 800fa24:	460c      	mov	r4, r1
 800fa26:	701a      	strb	r2, [r3, #0]
 800fa28:	d004      	beq.n	800fa34 <__cvt+0x38>
 800fa2a:	2d45      	cmp	r5, #69	@ 0x45
 800fa2c:	d100      	bne.n	800fa30 <__cvt+0x34>
 800fa2e:	3401      	adds	r4, #1
 800fa30:	2102      	movs	r1, #2
 800fa32:	e000      	b.n	800fa36 <__cvt+0x3a>
 800fa34:	2103      	movs	r1, #3
 800fa36:	ab03      	add	r3, sp, #12
 800fa38:	9301      	str	r3, [sp, #4]
 800fa3a:	ab02      	add	r3, sp, #8
 800fa3c:	9300      	str	r3, [sp, #0]
 800fa3e:	4622      	mov	r2, r4
 800fa40:	4633      	mov	r3, r6
 800fa42:	eeb0 0b48 	vmov.f64	d0, d8
 800fa46:	f000 fe1f 	bl	8010688 <_dtoa_r>
 800fa4a:	2d47      	cmp	r5, #71	@ 0x47
 800fa4c:	d114      	bne.n	800fa78 <__cvt+0x7c>
 800fa4e:	07fb      	lsls	r3, r7, #31
 800fa50:	d50a      	bpl.n	800fa68 <__cvt+0x6c>
 800fa52:	1902      	adds	r2, r0, r4
 800fa54:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800fa58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa5c:	bf08      	it	eq
 800fa5e:	9203      	streq	r2, [sp, #12]
 800fa60:	2130      	movs	r1, #48	@ 0x30
 800fa62:	9b03      	ldr	r3, [sp, #12]
 800fa64:	4293      	cmp	r3, r2
 800fa66:	d319      	bcc.n	800fa9c <__cvt+0xa0>
 800fa68:	9b03      	ldr	r3, [sp, #12]
 800fa6a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fa6c:	1a1b      	subs	r3, r3, r0
 800fa6e:	6013      	str	r3, [r2, #0]
 800fa70:	b005      	add	sp, #20
 800fa72:	ecbd 8b02 	vpop	{d8}
 800fa76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fa78:	2d46      	cmp	r5, #70	@ 0x46
 800fa7a:	eb00 0204 	add.w	r2, r0, r4
 800fa7e:	d1e9      	bne.n	800fa54 <__cvt+0x58>
 800fa80:	7803      	ldrb	r3, [r0, #0]
 800fa82:	2b30      	cmp	r3, #48	@ 0x30
 800fa84:	d107      	bne.n	800fa96 <__cvt+0x9a>
 800fa86:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800fa8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa8e:	bf1c      	itt	ne
 800fa90:	f1c4 0401 	rsbne	r4, r4, #1
 800fa94:	6034      	strne	r4, [r6, #0]
 800fa96:	6833      	ldr	r3, [r6, #0]
 800fa98:	441a      	add	r2, r3
 800fa9a:	e7db      	b.n	800fa54 <__cvt+0x58>
 800fa9c:	1c5c      	adds	r4, r3, #1
 800fa9e:	9403      	str	r4, [sp, #12]
 800faa0:	7019      	strb	r1, [r3, #0]
 800faa2:	e7de      	b.n	800fa62 <__cvt+0x66>

0800faa4 <__exponent>:
 800faa4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800faa6:	2900      	cmp	r1, #0
 800faa8:	bfba      	itte	lt
 800faaa:	4249      	neglt	r1, r1
 800faac:	232d      	movlt	r3, #45	@ 0x2d
 800faae:	232b      	movge	r3, #43	@ 0x2b
 800fab0:	2909      	cmp	r1, #9
 800fab2:	7002      	strb	r2, [r0, #0]
 800fab4:	7043      	strb	r3, [r0, #1]
 800fab6:	dd29      	ble.n	800fb0c <__exponent+0x68>
 800fab8:	f10d 0307 	add.w	r3, sp, #7
 800fabc:	461d      	mov	r5, r3
 800fabe:	270a      	movs	r7, #10
 800fac0:	461a      	mov	r2, r3
 800fac2:	fbb1 f6f7 	udiv	r6, r1, r7
 800fac6:	fb07 1416 	mls	r4, r7, r6, r1
 800faca:	3430      	adds	r4, #48	@ 0x30
 800facc:	f802 4c01 	strb.w	r4, [r2, #-1]
 800fad0:	460c      	mov	r4, r1
 800fad2:	2c63      	cmp	r4, #99	@ 0x63
 800fad4:	f103 33ff 	add.w	r3, r3, #4294967295
 800fad8:	4631      	mov	r1, r6
 800fada:	dcf1      	bgt.n	800fac0 <__exponent+0x1c>
 800fadc:	3130      	adds	r1, #48	@ 0x30
 800fade:	1e94      	subs	r4, r2, #2
 800fae0:	f803 1c01 	strb.w	r1, [r3, #-1]
 800fae4:	1c41      	adds	r1, r0, #1
 800fae6:	4623      	mov	r3, r4
 800fae8:	42ab      	cmp	r3, r5
 800faea:	d30a      	bcc.n	800fb02 <__exponent+0x5e>
 800faec:	f10d 0309 	add.w	r3, sp, #9
 800faf0:	1a9b      	subs	r3, r3, r2
 800faf2:	42ac      	cmp	r4, r5
 800faf4:	bf88      	it	hi
 800faf6:	2300      	movhi	r3, #0
 800faf8:	3302      	adds	r3, #2
 800fafa:	4403      	add	r3, r0
 800fafc:	1a18      	subs	r0, r3, r0
 800fafe:	b003      	add	sp, #12
 800fb00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb02:	f813 6b01 	ldrb.w	r6, [r3], #1
 800fb06:	f801 6f01 	strb.w	r6, [r1, #1]!
 800fb0a:	e7ed      	b.n	800fae8 <__exponent+0x44>
 800fb0c:	2330      	movs	r3, #48	@ 0x30
 800fb0e:	3130      	adds	r1, #48	@ 0x30
 800fb10:	7083      	strb	r3, [r0, #2]
 800fb12:	70c1      	strb	r1, [r0, #3]
 800fb14:	1d03      	adds	r3, r0, #4
 800fb16:	e7f1      	b.n	800fafc <__exponent+0x58>

0800fb18 <_printf_float>:
 800fb18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb1c:	b08d      	sub	sp, #52	@ 0x34
 800fb1e:	460c      	mov	r4, r1
 800fb20:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800fb24:	4616      	mov	r6, r2
 800fb26:	461f      	mov	r7, r3
 800fb28:	4605      	mov	r5, r0
 800fb2a:	f000 fcab 	bl	8010484 <_localeconv_r>
 800fb2e:	f8d0 b000 	ldr.w	fp, [r0]
 800fb32:	4658      	mov	r0, fp
 800fb34:	f7f0 fc24 	bl	8000380 <strlen>
 800fb38:	2300      	movs	r3, #0
 800fb3a:	930a      	str	r3, [sp, #40]	@ 0x28
 800fb3c:	f8d8 3000 	ldr.w	r3, [r8]
 800fb40:	f894 9018 	ldrb.w	r9, [r4, #24]
 800fb44:	6822      	ldr	r2, [r4, #0]
 800fb46:	9005      	str	r0, [sp, #20]
 800fb48:	3307      	adds	r3, #7
 800fb4a:	f023 0307 	bic.w	r3, r3, #7
 800fb4e:	f103 0108 	add.w	r1, r3, #8
 800fb52:	f8c8 1000 	str.w	r1, [r8]
 800fb56:	ed93 0b00 	vldr	d0, [r3]
 800fb5a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800fdb8 <_printf_float+0x2a0>
 800fb5e:	eeb0 7bc0 	vabs.f64	d7, d0
 800fb62:	eeb4 7b46 	vcmp.f64	d7, d6
 800fb66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb6a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800fb6e:	dd24      	ble.n	800fbba <_printf_float+0xa2>
 800fb70:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800fb74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb78:	d502      	bpl.n	800fb80 <_printf_float+0x68>
 800fb7a:	232d      	movs	r3, #45	@ 0x2d
 800fb7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fb80:	498f      	ldr	r1, [pc, #572]	@ (800fdc0 <_printf_float+0x2a8>)
 800fb82:	4b90      	ldr	r3, [pc, #576]	@ (800fdc4 <_printf_float+0x2ac>)
 800fb84:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800fb88:	bf94      	ite	ls
 800fb8a:	4688      	movls	r8, r1
 800fb8c:	4698      	movhi	r8, r3
 800fb8e:	f022 0204 	bic.w	r2, r2, #4
 800fb92:	2303      	movs	r3, #3
 800fb94:	6123      	str	r3, [r4, #16]
 800fb96:	6022      	str	r2, [r4, #0]
 800fb98:	f04f 0a00 	mov.w	sl, #0
 800fb9c:	9700      	str	r7, [sp, #0]
 800fb9e:	4633      	mov	r3, r6
 800fba0:	aa0b      	add	r2, sp, #44	@ 0x2c
 800fba2:	4621      	mov	r1, r4
 800fba4:	4628      	mov	r0, r5
 800fba6:	f000 f9d1 	bl	800ff4c <_printf_common>
 800fbaa:	3001      	adds	r0, #1
 800fbac:	f040 8089 	bne.w	800fcc2 <_printf_float+0x1aa>
 800fbb0:	f04f 30ff 	mov.w	r0, #4294967295
 800fbb4:	b00d      	add	sp, #52	@ 0x34
 800fbb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbba:	eeb4 0b40 	vcmp.f64	d0, d0
 800fbbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbc2:	d709      	bvc.n	800fbd8 <_printf_float+0xc0>
 800fbc4:	ee10 3a90 	vmov	r3, s1
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	bfbc      	itt	lt
 800fbcc:	232d      	movlt	r3, #45	@ 0x2d
 800fbce:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800fbd2:	497d      	ldr	r1, [pc, #500]	@ (800fdc8 <_printf_float+0x2b0>)
 800fbd4:	4b7d      	ldr	r3, [pc, #500]	@ (800fdcc <_printf_float+0x2b4>)
 800fbd6:	e7d5      	b.n	800fb84 <_printf_float+0x6c>
 800fbd8:	6863      	ldr	r3, [r4, #4]
 800fbda:	1c59      	adds	r1, r3, #1
 800fbdc:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800fbe0:	d139      	bne.n	800fc56 <_printf_float+0x13e>
 800fbe2:	2306      	movs	r3, #6
 800fbe4:	6063      	str	r3, [r4, #4]
 800fbe6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800fbea:	2300      	movs	r3, #0
 800fbec:	6022      	str	r2, [r4, #0]
 800fbee:	9303      	str	r3, [sp, #12]
 800fbf0:	ab0a      	add	r3, sp, #40	@ 0x28
 800fbf2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800fbf6:	ab09      	add	r3, sp, #36	@ 0x24
 800fbf8:	9300      	str	r3, [sp, #0]
 800fbfa:	6861      	ldr	r1, [r4, #4]
 800fbfc:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800fc00:	4628      	mov	r0, r5
 800fc02:	f7ff fefb 	bl	800f9fc <__cvt>
 800fc06:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800fc0a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800fc0c:	4680      	mov	r8, r0
 800fc0e:	d129      	bne.n	800fc64 <_printf_float+0x14c>
 800fc10:	1cc8      	adds	r0, r1, #3
 800fc12:	db02      	blt.n	800fc1a <_printf_float+0x102>
 800fc14:	6863      	ldr	r3, [r4, #4]
 800fc16:	4299      	cmp	r1, r3
 800fc18:	dd41      	ble.n	800fc9e <_printf_float+0x186>
 800fc1a:	f1a9 0902 	sub.w	r9, r9, #2
 800fc1e:	fa5f f989 	uxtb.w	r9, r9
 800fc22:	3901      	subs	r1, #1
 800fc24:	464a      	mov	r2, r9
 800fc26:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800fc2a:	9109      	str	r1, [sp, #36]	@ 0x24
 800fc2c:	f7ff ff3a 	bl	800faa4 <__exponent>
 800fc30:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fc32:	1813      	adds	r3, r2, r0
 800fc34:	2a01      	cmp	r2, #1
 800fc36:	4682      	mov	sl, r0
 800fc38:	6123      	str	r3, [r4, #16]
 800fc3a:	dc02      	bgt.n	800fc42 <_printf_float+0x12a>
 800fc3c:	6822      	ldr	r2, [r4, #0]
 800fc3e:	07d2      	lsls	r2, r2, #31
 800fc40:	d501      	bpl.n	800fc46 <_printf_float+0x12e>
 800fc42:	3301      	adds	r3, #1
 800fc44:	6123      	str	r3, [r4, #16]
 800fc46:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	d0a6      	beq.n	800fb9c <_printf_float+0x84>
 800fc4e:	232d      	movs	r3, #45	@ 0x2d
 800fc50:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fc54:	e7a2      	b.n	800fb9c <_printf_float+0x84>
 800fc56:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800fc5a:	d1c4      	bne.n	800fbe6 <_printf_float+0xce>
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	d1c2      	bne.n	800fbe6 <_printf_float+0xce>
 800fc60:	2301      	movs	r3, #1
 800fc62:	e7bf      	b.n	800fbe4 <_printf_float+0xcc>
 800fc64:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800fc68:	d9db      	bls.n	800fc22 <_printf_float+0x10a>
 800fc6a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800fc6e:	d118      	bne.n	800fca2 <_printf_float+0x18a>
 800fc70:	2900      	cmp	r1, #0
 800fc72:	6863      	ldr	r3, [r4, #4]
 800fc74:	dd0b      	ble.n	800fc8e <_printf_float+0x176>
 800fc76:	6121      	str	r1, [r4, #16]
 800fc78:	b913      	cbnz	r3, 800fc80 <_printf_float+0x168>
 800fc7a:	6822      	ldr	r2, [r4, #0]
 800fc7c:	07d0      	lsls	r0, r2, #31
 800fc7e:	d502      	bpl.n	800fc86 <_printf_float+0x16e>
 800fc80:	3301      	adds	r3, #1
 800fc82:	440b      	add	r3, r1
 800fc84:	6123      	str	r3, [r4, #16]
 800fc86:	65a1      	str	r1, [r4, #88]	@ 0x58
 800fc88:	f04f 0a00 	mov.w	sl, #0
 800fc8c:	e7db      	b.n	800fc46 <_printf_float+0x12e>
 800fc8e:	b913      	cbnz	r3, 800fc96 <_printf_float+0x17e>
 800fc90:	6822      	ldr	r2, [r4, #0]
 800fc92:	07d2      	lsls	r2, r2, #31
 800fc94:	d501      	bpl.n	800fc9a <_printf_float+0x182>
 800fc96:	3302      	adds	r3, #2
 800fc98:	e7f4      	b.n	800fc84 <_printf_float+0x16c>
 800fc9a:	2301      	movs	r3, #1
 800fc9c:	e7f2      	b.n	800fc84 <_printf_float+0x16c>
 800fc9e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800fca2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fca4:	4299      	cmp	r1, r3
 800fca6:	db05      	blt.n	800fcb4 <_printf_float+0x19c>
 800fca8:	6823      	ldr	r3, [r4, #0]
 800fcaa:	6121      	str	r1, [r4, #16]
 800fcac:	07d8      	lsls	r0, r3, #31
 800fcae:	d5ea      	bpl.n	800fc86 <_printf_float+0x16e>
 800fcb0:	1c4b      	adds	r3, r1, #1
 800fcb2:	e7e7      	b.n	800fc84 <_printf_float+0x16c>
 800fcb4:	2900      	cmp	r1, #0
 800fcb6:	bfd4      	ite	le
 800fcb8:	f1c1 0202 	rsble	r2, r1, #2
 800fcbc:	2201      	movgt	r2, #1
 800fcbe:	4413      	add	r3, r2
 800fcc0:	e7e0      	b.n	800fc84 <_printf_float+0x16c>
 800fcc2:	6823      	ldr	r3, [r4, #0]
 800fcc4:	055a      	lsls	r2, r3, #21
 800fcc6:	d407      	bmi.n	800fcd8 <_printf_float+0x1c0>
 800fcc8:	6923      	ldr	r3, [r4, #16]
 800fcca:	4642      	mov	r2, r8
 800fccc:	4631      	mov	r1, r6
 800fcce:	4628      	mov	r0, r5
 800fcd0:	47b8      	blx	r7
 800fcd2:	3001      	adds	r0, #1
 800fcd4:	d12a      	bne.n	800fd2c <_printf_float+0x214>
 800fcd6:	e76b      	b.n	800fbb0 <_printf_float+0x98>
 800fcd8:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800fcdc:	f240 80e0 	bls.w	800fea0 <_printf_float+0x388>
 800fce0:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800fce4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800fce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcec:	d133      	bne.n	800fd56 <_printf_float+0x23e>
 800fcee:	4a38      	ldr	r2, [pc, #224]	@ (800fdd0 <_printf_float+0x2b8>)
 800fcf0:	2301      	movs	r3, #1
 800fcf2:	4631      	mov	r1, r6
 800fcf4:	4628      	mov	r0, r5
 800fcf6:	47b8      	blx	r7
 800fcf8:	3001      	adds	r0, #1
 800fcfa:	f43f af59 	beq.w	800fbb0 <_printf_float+0x98>
 800fcfe:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800fd02:	4543      	cmp	r3, r8
 800fd04:	db02      	blt.n	800fd0c <_printf_float+0x1f4>
 800fd06:	6823      	ldr	r3, [r4, #0]
 800fd08:	07d8      	lsls	r0, r3, #31
 800fd0a:	d50f      	bpl.n	800fd2c <_printf_float+0x214>
 800fd0c:	9b05      	ldr	r3, [sp, #20]
 800fd0e:	465a      	mov	r2, fp
 800fd10:	4631      	mov	r1, r6
 800fd12:	4628      	mov	r0, r5
 800fd14:	47b8      	blx	r7
 800fd16:	3001      	adds	r0, #1
 800fd18:	f43f af4a 	beq.w	800fbb0 <_printf_float+0x98>
 800fd1c:	f04f 0900 	mov.w	r9, #0
 800fd20:	f108 38ff 	add.w	r8, r8, #4294967295
 800fd24:	f104 0a1a 	add.w	sl, r4, #26
 800fd28:	45c8      	cmp	r8, r9
 800fd2a:	dc09      	bgt.n	800fd40 <_printf_float+0x228>
 800fd2c:	6823      	ldr	r3, [r4, #0]
 800fd2e:	079b      	lsls	r3, r3, #30
 800fd30:	f100 8107 	bmi.w	800ff42 <_printf_float+0x42a>
 800fd34:	68e0      	ldr	r0, [r4, #12]
 800fd36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fd38:	4298      	cmp	r0, r3
 800fd3a:	bfb8      	it	lt
 800fd3c:	4618      	movlt	r0, r3
 800fd3e:	e739      	b.n	800fbb4 <_printf_float+0x9c>
 800fd40:	2301      	movs	r3, #1
 800fd42:	4652      	mov	r2, sl
 800fd44:	4631      	mov	r1, r6
 800fd46:	4628      	mov	r0, r5
 800fd48:	47b8      	blx	r7
 800fd4a:	3001      	adds	r0, #1
 800fd4c:	f43f af30 	beq.w	800fbb0 <_printf_float+0x98>
 800fd50:	f109 0901 	add.w	r9, r9, #1
 800fd54:	e7e8      	b.n	800fd28 <_printf_float+0x210>
 800fd56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	dc3b      	bgt.n	800fdd4 <_printf_float+0x2bc>
 800fd5c:	4a1c      	ldr	r2, [pc, #112]	@ (800fdd0 <_printf_float+0x2b8>)
 800fd5e:	2301      	movs	r3, #1
 800fd60:	4631      	mov	r1, r6
 800fd62:	4628      	mov	r0, r5
 800fd64:	47b8      	blx	r7
 800fd66:	3001      	adds	r0, #1
 800fd68:	f43f af22 	beq.w	800fbb0 <_printf_float+0x98>
 800fd6c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800fd70:	ea59 0303 	orrs.w	r3, r9, r3
 800fd74:	d102      	bne.n	800fd7c <_printf_float+0x264>
 800fd76:	6823      	ldr	r3, [r4, #0]
 800fd78:	07d9      	lsls	r1, r3, #31
 800fd7a:	d5d7      	bpl.n	800fd2c <_printf_float+0x214>
 800fd7c:	9b05      	ldr	r3, [sp, #20]
 800fd7e:	465a      	mov	r2, fp
 800fd80:	4631      	mov	r1, r6
 800fd82:	4628      	mov	r0, r5
 800fd84:	47b8      	blx	r7
 800fd86:	3001      	adds	r0, #1
 800fd88:	f43f af12 	beq.w	800fbb0 <_printf_float+0x98>
 800fd8c:	f04f 0a00 	mov.w	sl, #0
 800fd90:	f104 0b1a 	add.w	fp, r4, #26
 800fd94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fd96:	425b      	negs	r3, r3
 800fd98:	4553      	cmp	r3, sl
 800fd9a:	dc01      	bgt.n	800fda0 <_printf_float+0x288>
 800fd9c:	464b      	mov	r3, r9
 800fd9e:	e794      	b.n	800fcca <_printf_float+0x1b2>
 800fda0:	2301      	movs	r3, #1
 800fda2:	465a      	mov	r2, fp
 800fda4:	4631      	mov	r1, r6
 800fda6:	4628      	mov	r0, r5
 800fda8:	47b8      	blx	r7
 800fdaa:	3001      	adds	r0, #1
 800fdac:	f43f af00 	beq.w	800fbb0 <_printf_float+0x98>
 800fdb0:	f10a 0a01 	add.w	sl, sl, #1
 800fdb4:	e7ee      	b.n	800fd94 <_printf_float+0x27c>
 800fdb6:	bf00      	nop
 800fdb8:	ffffffff 	.word	0xffffffff
 800fdbc:	7fefffff 	.word	0x7fefffff
 800fdc0:	08012438 	.word	0x08012438
 800fdc4:	0801243c 	.word	0x0801243c
 800fdc8:	08012440 	.word	0x08012440
 800fdcc:	08012444 	.word	0x08012444
 800fdd0:	08012448 	.word	0x08012448
 800fdd4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800fdd6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800fdda:	4553      	cmp	r3, sl
 800fddc:	bfa8      	it	ge
 800fdde:	4653      	movge	r3, sl
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	4699      	mov	r9, r3
 800fde4:	dc37      	bgt.n	800fe56 <_printf_float+0x33e>
 800fde6:	2300      	movs	r3, #0
 800fde8:	9307      	str	r3, [sp, #28]
 800fdea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fdee:	f104 021a 	add.w	r2, r4, #26
 800fdf2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800fdf4:	9907      	ldr	r1, [sp, #28]
 800fdf6:	9306      	str	r3, [sp, #24]
 800fdf8:	eba3 0309 	sub.w	r3, r3, r9
 800fdfc:	428b      	cmp	r3, r1
 800fdfe:	dc31      	bgt.n	800fe64 <_printf_float+0x34c>
 800fe00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fe02:	459a      	cmp	sl, r3
 800fe04:	dc3b      	bgt.n	800fe7e <_printf_float+0x366>
 800fe06:	6823      	ldr	r3, [r4, #0]
 800fe08:	07da      	lsls	r2, r3, #31
 800fe0a:	d438      	bmi.n	800fe7e <_printf_float+0x366>
 800fe0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fe0e:	ebaa 0903 	sub.w	r9, sl, r3
 800fe12:	9b06      	ldr	r3, [sp, #24]
 800fe14:	ebaa 0303 	sub.w	r3, sl, r3
 800fe18:	4599      	cmp	r9, r3
 800fe1a:	bfa8      	it	ge
 800fe1c:	4699      	movge	r9, r3
 800fe1e:	f1b9 0f00 	cmp.w	r9, #0
 800fe22:	dc34      	bgt.n	800fe8e <_printf_float+0x376>
 800fe24:	f04f 0800 	mov.w	r8, #0
 800fe28:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fe2c:	f104 0b1a 	add.w	fp, r4, #26
 800fe30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fe32:	ebaa 0303 	sub.w	r3, sl, r3
 800fe36:	eba3 0309 	sub.w	r3, r3, r9
 800fe3a:	4543      	cmp	r3, r8
 800fe3c:	f77f af76 	ble.w	800fd2c <_printf_float+0x214>
 800fe40:	2301      	movs	r3, #1
 800fe42:	465a      	mov	r2, fp
 800fe44:	4631      	mov	r1, r6
 800fe46:	4628      	mov	r0, r5
 800fe48:	47b8      	blx	r7
 800fe4a:	3001      	adds	r0, #1
 800fe4c:	f43f aeb0 	beq.w	800fbb0 <_printf_float+0x98>
 800fe50:	f108 0801 	add.w	r8, r8, #1
 800fe54:	e7ec      	b.n	800fe30 <_printf_float+0x318>
 800fe56:	4642      	mov	r2, r8
 800fe58:	4631      	mov	r1, r6
 800fe5a:	4628      	mov	r0, r5
 800fe5c:	47b8      	blx	r7
 800fe5e:	3001      	adds	r0, #1
 800fe60:	d1c1      	bne.n	800fde6 <_printf_float+0x2ce>
 800fe62:	e6a5      	b.n	800fbb0 <_printf_float+0x98>
 800fe64:	2301      	movs	r3, #1
 800fe66:	4631      	mov	r1, r6
 800fe68:	4628      	mov	r0, r5
 800fe6a:	9206      	str	r2, [sp, #24]
 800fe6c:	47b8      	blx	r7
 800fe6e:	3001      	adds	r0, #1
 800fe70:	f43f ae9e 	beq.w	800fbb0 <_printf_float+0x98>
 800fe74:	9b07      	ldr	r3, [sp, #28]
 800fe76:	9a06      	ldr	r2, [sp, #24]
 800fe78:	3301      	adds	r3, #1
 800fe7a:	9307      	str	r3, [sp, #28]
 800fe7c:	e7b9      	b.n	800fdf2 <_printf_float+0x2da>
 800fe7e:	9b05      	ldr	r3, [sp, #20]
 800fe80:	465a      	mov	r2, fp
 800fe82:	4631      	mov	r1, r6
 800fe84:	4628      	mov	r0, r5
 800fe86:	47b8      	blx	r7
 800fe88:	3001      	adds	r0, #1
 800fe8a:	d1bf      	bne.n	800fe0c <_printf_float+0x2f4>
 800fe8c:	e690      	b.n	800fbb0 <_printf_float+0x98>
 800fe8e:	9a06      	ldr	r2, [sp, #24]
 800fe90:	464b      	mov	r3, r9
 800fe92:	4442      	add	r2, r8
 800fe94:	4631      	mov	r1, r6
 800fe96:	4628      	mov	r0, r5
 800fe98:	47b8      	blx	r7
 800fe9a:	3001      	adds	r0, #1
 800fe9c:	d1c2      	bne.n	800fe24 <_printf_float+0x30c>
 800fe9e:	e687      	b.n	800fbb0 <_printf_float+0x98>
 800fea0:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800fea4:	f1b9 0f01 	cmp.w	r9, #1
 800fea8:	dc01      	bgt.n	800feae <_printf_float+0x396>
 800feaa:	07db      	lsls	r3, r3, #31
 800feac:	d536      	bpl.n	800ff1c <_printf_float+0x404>
 800feae:	2301      	movs	r3, #1
 800feb0:	4642      	mov	r2, r8
 800feb2:	4631      	mov	r1, r6
 800feb4:	4628      	mov	r0, r5
 800feb6:	47b8      	blx	r7
 800feb8:	3001      	adds	r0, #1
 800feba:	f43f ae79 	beq.w	800fbb0 <_printf_float+0x98>
 800febe:	9b05      	ldr	r3, [sp, #20]
 800fec0:	465a      	mov	r2, fp
 800fec2:	4631      	mov	r1, r6
 800fec4:	4628      	mov	r0, r5
 800fec6:	47b8      	blx	r7
 800fec8:	3001      	adds	r0, #1
 800feca:	f43f ae71 	beq.w	800fbb0 <_printf_float+0x98>
 800fece:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800fed2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800fed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800feda:	f109 39ff 	add.w	r9, r9, #4294967295
 800fede:	d018      	beq.n	800ff12 <_printf_float+0x3fa>
 800fee0:	464b      	mov	r3, r9
 800fee2:	f108 0201 	add.w	r2, r8, #1
 800fee6:	4631      	mov	r1, r6
 800fee8:	4628      	mov	r0, r5
 800feea:	47b8      	blx	r7
 800feec:	3001      	adds	r0, #1
 800feee:	d10c      	bne.n	800ff0a <_printf_float+0x3f2>
 800fef0:	e65e      	b.n	800fbb0 <_printf_float+0x98>
 800fef2:	2301      	movs	r3, #1
 800fef4:	465a      	mov	r2, fp
 800fef6:	4631      	mov	r1, r6
 800fef8:	4628      	mov	r0, r5
 800fefa:	47b8      	blx	r7
 800fefc:	3001      	adds	r0, #1
 800fefe:	f43f ae57 	beq.w	800fbb0 <_printf_float+0x98>
 800ff02:	f108 0801 	add.w	r8, r8, #1
 800ff06:	45c8      	cmp	r8, r9
 800ff08:	dbf3      	blt.n	800fef2 <_printf_float+0x3da>
 800ff0a:	4653      	mov	r3, sl
 800ff0c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800ff10:	e6dc      	b.n	800fccc <_printf_float+0x1b4>
 800ff12:	f04f 0800 	mov.w	r8, #0
 800ff16:	f104 0b1a 	add.w	fp, r4, #26
 800ff1a:	e7f4      	b.n	800ff06 <_printf_float+0x3ee>
 800ff1c:	2301      	movs	r3, #1
 800ff1e:	4642      	mov	r2, r8
 800ff20:	e7e1      	b.n	800fee6 <_printf_float+0x3ce>
 800ff22:	2301      	movs	r3, #1
 800ff24:	464a      	mov	r2, r9
 800ff26:	4631      	mov	r1, r6
 800ff28:	4628      	mov	r0, r5
 800ff2a:	47b8      	blx	r7
 800ff2c:	3001      	adds	r0, #1
 800ff2e:	f43f ae3f 	beq.w	800fbb0 <_printf_float+0x98>
 800ff32:	f108 0801 	add.w	r8, r8, #1
 800ff36:	68e3      	ldr	r3, [r4, #12]
 800ff38:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ff3a:	1a5b      	subs	r3, r3, r1
 800ff3c:	4543      	cmp	r3, r8
 800ff3e:	dcf0      	bgt.n	800ff22 <_printf_float+0x40a>
 800ff40:	e6f8      	b.n	800fd34 <_printf_float+0x21c>
 800ff42:	f04f 0800 	mov.w	r8, #0
 800ff46:	f104 0919 	add.w	r9, r4, #25
 800ff4a:	e7f4      	b.n	800ff36 <_printf_float+0x41e>

0800ff4c <_printf_common>:
 800ff4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ff50:	4616      	mov	r6, r2
 800ff52:	4698      	mov	r8, r3
 800ff54:	688a      	ldr	r2, [r1, #8]
 800ff56:	690b      	ldr	r3, [r1, #16]
 800ff58:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ff5c:	4293      	cmp	r3, r2
 800ff5e:	bfb8      	it	lt
 800ff60:	4613      	movlt	r3, r2
 800ff62:	6033      	str	r3, [r6, #0]
 800ff64:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ff68:	4607      	mov	r7, r0
 800ff6a:	460c      	mov	r4, r1
 800ff6c:	b10a      	cbz	r2, 800ff72 <_printf_common+0x26>
 800ff6e:	3301      	adds	r3, #1
 800ff70:	6033      	str	r3, [r6, #0]
 800ff72:	6823      	ldr	r3, [r4, #0]
 800ff74:	0699      	lsls	r1, r3, #26
 800ff76:	bf42      	ittt	mi
 800ff78:	6833      	ldrmi	r3, [r6, #0]
 800ff7a:	3302      	addmi	r3, #2
 800ff7c:	6033      	strmi	r3, [r6, #0]
 800ff7e:	6825      	ldr	r5, [r4, #0]
 800ff80:	f015 0506 	ands.w	r5, r5, #6
 800ff84:	d106      	bne.n	800ff94 <_printf_common+0x48>
 800ff86:	f104 0a19 	add.w	sl, r4, #25
 800ff8a:	68e3      	ldr	r3, [r4, #12]
 800ff8c:	6832      	ldr	r2, [r6, #0]
 800ff8e:	1a9b      	subs	r3, r3, r2
 800ff90:	42ab      	cmp	r3, r5
 800ff92:	dc26      	bgt.n	800ffe2 <_printf_common+0x96>
 800ff94:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ff98:	6822      	ldr	r2, [r4, #0]
 800ff9a:	3b00      	subs	r3, #0
 800ff9c:	bf18      	it	ne
 800ff9e:	2301      	movne	r3, #1
 800ffa0:	0692      	lsls	r2, r2, #26
 800ffa2:	d42b      	bmi.n	800fffc <_printf_common+0xb0>
 800ffa4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ffa8:	4641      	mov	r1, r8
 800ffaa:	4638      	mov	r0, r7
 800ffac:	47c8      	blx	r9
 800ffae:	3001      	adds	r0, #1
 800ffb0:	d01e      	beq.n	800fff0 <_printf_common+0xa4>
 800ffb2:	6823      	ldr	r3, [r4, #0]
 800ffb4:	6922      	ldr	r2, [r4, #16]
 800ffb6:	f003 0306 	and.w	r3, r3, #6
 800ffba:	2b04      	cmp	r3, #4
 800ffbc:	bf02      	ittt	eq
 800ffbe:	68e5      	ldreq	r5, [r4, #12]
 800ffc0:	6833      	ldreq	r3, [r6, #0]
 800ffc2:	1aed      	subeq	r5, r5, r3
 800ffc4:	68a3      	ldr	r3, [r4, #8]
 800ffc6:	bf0c      	ite	eq
 800ffc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ffcc:	2500      	movne	r5, #0
 800ffce:	4293      	cmp	r3, r2
 800ffd0:	bfc4      	itt	gt
 800ffd2:	1a9b      	subgt	r3, r3, r2
 800ffd4:	18ed      	addgt	r5, r5, r3
 800ffd6:	2600      	movs	r6, #0
 800ffd8:	341a      	adds	r4, #26
 800ffda:	42b5      	cmp	r5, r6
 800ffdc:	d11a      	bne.n	8010014 <_printf_common+0xc8>
 800ffde:	2000      	movs	r0, #0
 800ffe0:	e008      	b.n	800fff4 <_printf_common+0xa8>
 800ffe2:	2301      	movs	r3, #1
 800ffe4:	4652      	mov	r2, sl
 800ffe6:	4641      	mov	r1, r8
 800ffe8:	4638      	mov	r0, r7
 800ffea:	47c8      	blx	r9
 800ffec:	3001      	adds	r0, #1
 800ffee:	d103      	bne.n	800fff8 <_printf_common+0xac>
 800fff0:	f04f 30ff 	mov.w	r0, #4294967295
 800fff4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fff8:	3501      	adds	r5, #1
 800fffa:	e7c6      	b.n	800ff8a <_printf_common+0x3e>
 800fffc:	18e1      	adds	r1, r4, r3
 800fffe:	1c5a      	adds	r2, r3, #1
 8010000:	2030      	movs	r0, #48	@ 0x30
 8010002:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8010006:	4422      	add	r2, r4
 8010008:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801000c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010010:	3302      	adds	r3, #2
 8010012:	e7c7      	b.n	800ffa4 <_printf_common+0x58>
 8010014:	2301      	movs	r3, #1
 8010016:	4622      	mov	r2, r4
 8010018:	4641      	mov	r1, r8
 801001a:	4638      	mov	r0, r7
 801001c:	47c8      	blx	r9
 801001e:	3001      	adds	r0, #1
 8010020:	d0e6      	beq.n	800fff0 <_printf_common+0xa4>
 8010022:	3601      	adds	r6, #1
 8010024:	e7d9      	b.n	800ffda <_printf_common+0x8e>
	...

08010028 <_printf_i>:
 8010028:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801002c:	7e0f      	ldrb	r7, [r1, #24]
 801002e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010030:	2f78      	cmp	r7, #120	@ 0x78
 8010032:	4691      	mov	r9, r2
 8010034:	4680      	mov	r8, r0
 8010036:	460c      	mov	r4, r1
 8010038:	469a      	mov	sl, r3
 801003a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801003e:	d807      	bhi.n	8010050 <_printf_i+0x28>
 8010040:	2f62      	cmp	r7, #98	@ 0x62
 8010042:	d80a      	bhi.n	801005a <_printf_i+0x32>
 8010044:	2f00      	cmp	r7, #0
 8010046:	f000 80d2 	beq.w	80101ee <_printf_i+0x1c6>
 801004a:	2f58      	cmp	r7, #88	@ 0x58
 801004c:	f000 80b9 	beq.w	80101c2 <_printf_i+0x19a>
 8010050:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010054:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010058:	e03a      	b.n	80100d0 <_printf_i+0xa8>
 801005a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801005e:	2b15      	cmp	r3, #21
 8010060:	d8f6      	bhi.n	8010050 <_printf_i+0x28>
 8010062:	a101      	add	r1, pc, #4	@ (adr r1, 8010068 <_printf_i+0x40>)
 8010064:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010068:	080100c1 	.word	0x080100c1
 801006c:	080100d5 	.word	0x080100d5
 8010070:	08010051 	.word	0x08010051
 8010074:	08010051 	.word	0x08010051
 8010078:	08010051 	.word	0x08010051
 801007c:	08010051 	.word	0x08010051
 8010080:	080100d5 	.word	0x080100d5
 8010084:	08010051 	.word	0x08010051
 8010088:	08010051 	.word	0x08010051
 801008c:	08010051 	.word	0x08010051
 8010090:	08010051 	.word	0x08010051
 8010094:	080101d5 	.word	0x080101d5
 8010098:	080100ff 	.word	0x080100ff
 801009c:	0801018f 	.word	0x0801018f
 80100a0:	08010051 	.word	0x08010051
 80100a4:	08010051 	.word	0x08010051
 80100a8:	080101f7 	.word	0x080101f7
 80100ac:	08010051 	.word	0x08010051
 80100b0:	080100ff 	.word	0x080100ff
 80100b4:	08010051 	.word	0x08010051
 80100b8:	08010051 	.word	0x08010051
 80100bc:	08010197 	.word	0x08010197
 80100c0:	6833      	ldr	r3, [r6, #0]
 80100c2:	1d1a      	adds	r2, r3, #4
 80100c4:	681b      	ldr	r3, [r3, #0]
 80100c6:	6032      	str	r2, [r6, #0]
 80100c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80100cc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80100d0:	2301      	movs	r3, #1
 80100d2:	e09d      	b.n	8010210 <_printf_i+0x1e8>
 80100d4:	6833      	ldr	r3, [r6, #0]
 80100d6:	6820      	ldr	r0, [r4, #0]
 80100d8:	1d19      	adds	r1, r3, #4
 80100da:	6031      	str	r1, [r6, #0]
 80100dc:	0606      	lsls	r6, r0, #24
 80100de:	d501      	bpl.n	80100e4 <_printf_i+0xbc>
 80100e0:	681d      	ldr	r5, [r3, #0]
 80100e2:	e003      	b.n	80100ec <_printf_i+0xc4>
 80100e4:	0645      	lsls	r5, r0, #25
 80100e6:	d5fb      	bpl.n	80100e0 <_printf_i+0xb8>
 80100e8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80100ec:	2d00      	cmp	r5, #0
 80100ee:	da03      	bge.n	80100f8 <_printf_i+0xd0>
 80100f0:	232d      	movs	r3, #45	@ 0x2d
 80100f2:	426d      	negs	r5, r5
 80100f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80100f8:	4859      	ldr	r0, [pc, #356]	@ (8010260 <_printf_i+0x238>)
 80100fa:	230a      	movs	r3, #10
 80100fc:	e011      	b.n	8010122 <_printf_i+0xfa>
 80100fe:	6821      	ldr	r1, [r4, #0]
 8010100:	6833      	ldr	r3, [r6, #0]
 8010102:	0608      	lsls	r0, r1, #24
 8010104:	f853 5b04 	ldr.w	r5, [r3], #4
 8010108:	d402      	bmi.n	8010110 <_printf_i+0xe8>
 801010a:	0649      	lsls	r1, r1, #25
 801010c:	bf48      	it	mi
 801010e:	b2ad      	uxthmi	r5, r5
 8010110:	2f6f      	cmp	r7, #111	@ 0x6f
 8010112:	4853      	ldr	r0, [pc, #332]	@ (8010260 <_printf_i+0x238>)
 8010114:	6033      	str	r3, [r6, #0]
 8010116:	bf14      	ite	ne
 8010118:	230a      	movne	r3, #10
 801011a:	2308      	moveq	r3, #8
 801011c:	2100      	movs	r1, #0
 801011e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8010122:	6866      	ldr	r6, [r4, #4]
 8010124:	60a6      	str	r6, [r4, #8]
 8010126:	2e00      	cmp	r6, #0
 8010128:	bfa2      	ittt	ge
 801012a:	6821      	ldrge	r1, [r4, #0]
 801012c:	f021 0104 	bicge.w	r1, r1, #4
 8010130:	6021      	strge	r1, [r4, #0]
 8010132:	b90d      	cbnz	r5, 8010138 <_printf_i+0x110>
 8010134:	2e00      	cmp	r6, #0
 8010136:	d04b      	beq.n	80101d0 <_printf_i+0x1a8>
 8010138:	4616      	mov	r6, r2
 801013a:	fbb5 f1f3 	udiv	r1, r5, r3
 801013e:	fb03 5711 	mls	r7, r3, r1, r5
 8010142:	5dc7      	ldrb	r7, [r0, r7]
 8010144:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010148:	462f      	mov	r7, r5
 801014a:	42bb      	cmp	r3, r7
 801014c:	460d      	mov	r5, r1
 801014e:	d9f4      	bls.n	801013a <_printf_i+0x112>
 8010150:	2b08      	cmp	r3, #8
 8010152:	d10b      	bne.n	801016c <_printf_i+0x144>
 8010154:	6823      	ldr	r3, [r4, #0]
 8010156:	07df      	lsls	r7, r3, #31
 8010158:	d508      	bpl.n	801016c <_printf_i+0x144>
 801015a:	6923      	ldr	r3, [r4, #16]
 801015c:	6861      	ldr	r1, [r4, #4]
 801015e:	4299      	cmp	r1, r3
 8010160:	bfde      	ittt	le
 8010162:	2330      	movle	r3, #48	@ 0x30
 8010164:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010168:	f106 36ff 	addle.w	r6, r6, #4294967295
 801016c:	1b92      	subs	r2, r2, r6
 801016e:	6122      	str	r2, [r4, #16]
 8010170:	f8cd a000 	str.w	sl, [sp]
 8010174:	464b      	mov	r3, r9
 8010176:	aa03      	add	r2, sp, #12
 8010178:	4621      	mov	r1, r4
 801017a:	4640      	mov	r0, r8
 801017c:	f7ff fee6 	bl	800ff4c <_printf_common>
 8010180:	3001      	adds	r0, #1
 8010182:	d14a      	bne.n	801021a <_printf_i+0x1f2>
 8010184:	f04f 30ff 	mov.w	r0, #4294967295
 8010188:	b004      	add	sp, #16
 801018a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801018e:	6823      	ldr	r3, [r4, #0]
 8010190:	f043 0320 	orr.w	r3, r3, #32
 8010194:	6023      	str	r3, [r4, #0]
 8010196:	4833      	ldr	r0, [pc, #204]	@ (8010264 <_printf_i+0x23c>)
 8010198:	2778      	movs	r7, #120	@ 0x78
 801019a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801019e:	6823      	ldr	r3, [r4, #0]
 80101a0:	6831      	ldr	r1, [r6, #0]
 80101a2:	061f      	lsls	r7, r3, #24
 80101a4:	f851 5b04 	ldr.w	r5, [r1], #4
 80101a8:	d402      	bmi.n	80101b0 <_printf_i+0x188>
 80101aa:	065f      	lsls	r7, r3, #25
 80101ac:	bf48      	it	mi
 80101ae:	b2ad      	uxthmi	r5, r5
 80101b0:	6031      	str	r1, [r6, #0]
 80101b2:	07d9      	lsls	r1, r3, #31
 80101b4:	bf44      	itt	mi
 80101b6:	f043 0320 	orrmi.w	r3, r3, #32
 80101ba:	6023      	strmi	r3, [r4, #0]
 80101bc:	b11d      	cbz	r5, 80101c6 <_printf_i+0x19e>
 80101be:	2310      	movs	r3, #16
 80101c0:	e7ac      	b.n	801011c <_printf_i+0xf4>
 80101c2:	4827      	ldr	r0, [pc, #156]	@ (8010260 <_printf_i+0x238>)
 80101c4:	e7e9      	b.n	801019a <_printf_i+0x172>
 80101c6:	6823      	ldr	r3, [r4, #0]
 80101c8:	f023 0320 	bic.w	r3, r3, #32
 80101cc:	6023      	str	r3, [r4, #0]
 80101ce:	e7f6      	b.n	80101be <_printf_i+0x196>
 80101d0:	4616      	mov	r6, r2
 80101d2:	e7bd      	b.n	8010150 <_printf_i+0x128>
 80101d4:	6833      	ldr	r3, [r6, #0]
 80101d6:	6825      	ldr	r5, [r4, #0]
 80101d8:	6961      	ldr	r1, [r4, #20]
 80101da:	1d18      	adds	r0, r3, #4
 80101dc:	6030      	str	r0, [r6, #0]
 80101de:	062e      	lsls	r6, r5, #24
 80101e0:	681b      	ldr	r3, [r3, #0]
 80101e2:	d501      	bpl.n	80101e8 <_printf_i+0x1c0>
 80101e4:	6019      	str	r1, [r3, #0]
 80101e6:	e002      	b.n	80101ee <_printf_i+0x1c6>
 80101e8:	0668      	lsls	r0, r5, #25
 80101ea:	d5fb      	bpl.n	80101e4 <_printf_i+0x1bc>
 80101ec:	8019      	strh	r1, [r3, #0]
 80101ee:	2300      	movs	r3, #0
 80101f0:	6123      	str	r3, [r4, #16]
 80101f2:	4616      	mov	r6, r2
 80101f4:	e7bc      	b.n	8010170 <_printf_i+0x148>
 80101f6:	6833      	ldr	r3, [r6, #0]
 80101f8:	1d1a      	adds	r2, r3, #4
 80101fa:	6032      	str	r2, [r6, #0]
 80101fc:	681e      	ldr	r6, [r3, #0]
 80101fe:	6862      	ldr	r2, [r4, #4]
 8010200:	2100      	movs	r1, #0
 8010202:	4630      	mov	r0, r6
 8010204:	f7f0 f86c 	bl	80002e0 <memchr>
 8010208:	b108      	cbz	r0, 801020e <_printf_i+0x1e6>
 801020a:	1b80      	subs	r0, r0, r6
 801020c:	6060      	str	r0, [r4, #4]
 801020e:	6863      	ldr	r3, [r4, #4]
 8010210:	6123      	str	r3, [r4, #16]
 8010212:	2300      	movs	r3, #0
 8010214:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010218:	e7aa      	b.n	8010170 <_printf_i+0x148>
 801021a:	6923      	ldr	r3, [r4, #16]
 801021c:	4632      	mov	r2, r6
 801021e:	4649      	mov	r1, r9
 8010220:	4640      	mov	r0, r8
 8010222:	47d0      	blx	sl
 8010224:	3001      	adds	r0, #1
 8010226:	d0ad      	beq.n	8010184 <_printf_i+0x15c>
 8010228:	6823      	ldr	r3, [r4, #0]
 801022a:	079b      	lsls	r3, r3, #30
 801022c:	d413      	bmi.n	8010256 <_printf_i+0x22e>
 801022e:	68e0      	ldr	r0, [r4, #12]
 8010230:	9b03      	ldr	r3, [sp, #12]
 8010232:	4298      	cmp	r0, r3
 8010234:	bfb8      	it	lt
 8010236:	4618      	movlt	r0, r3
 8010238:	e7a6      	b.n	8010188 <_printf_i+0x160>
 801023a:	2301      	movs	r3, #1
 801023c:	4632      	mov	r2, r6
 801023e:	4649      	mov	r1, r9
 8010240:	4640      	mov	r0, r8
 8010242:	47d0      	blx	sl
 8010244:	3001      	adds	r0, #1
 8010246:	d09d      	beq.n	8010184 <_printf_i+0x15c>
 8010248:	3501      	adds	r5, #1
 801024a:	68e3      	ldr	r3, [r4, #12]
 801024c:	9903      	ldr	r1, [sp, #12]
 801024e:	1a5b      	subs	r3, r3, r1
 8010250:	42ab      	cmp	r3, r5
 8010252:	dcf2      	bgt.n	801023a <_printf_i+0x212>
 8010254:	e7eb      	b.n	801022e <_printf_i+0x206>
 8010256:	2500      	movs	r5, #0
 8010258:	f104 0619 	add.w	r6, r4, #25
 801025c:	e7f5      	b.n	801024a <_printf_i+0x222>
 801025e:	bf00      	nop
 8010260:	0801244a 	.word	0x0801244a
 8010264:	0801245b 	.word	0x0801245b

08010268 <std>:
 8010268:	2300      	movs	r3, #0
 801026a:	b510      	push	{r4, lr}
 801026c:	4604      	mov	r4, r0
 801026e:	e9c0 3300 	strd	r3, r3, [r0]
 8010272:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010276:	6083      	str	r3, [r0, #8]
 8010278:	8181      	strh	r1, [r0, #12]
 801027a:	6643      	str	r3, [r0, #100]	@ 0x64
 801027c:	81c2      	strh	r2, [r0, #14]
 801027e:	6183      	str	r3, [r0, #24]
 8010280:	4619      	mov	r1, r3
 8010282:	2208      	movs	r2, #8
 8010284:	305c      	adds	r0, #92	@ 0x5c
 8010286:	f000 f8f4 	bl	8010472 <memset>
 801028a:	4b0d      	ldr	r3, [pc, #52]	@ (80102c0 <std+0x58>)
 801028c:	6263      	str	r3, [r4, #36]	@ 0x24
 801028e:	4b0d      	ldr	r3, [pc, #52]	@ (80102c4 <std+0x5c>)
 8010290:	62a3      	str	r3, [r4, #40]	@ 0x28
 8010292:	4b0d      	ldr	r3, [pc, #52]	@ (80102c8 <std+0x60>)
 8010294:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8010296:	4b0d      	ldr	r3, [pc, #52]	@ (80102cc <std+0x64>)
 8010298:	6323      	str	r3, [r4, #48]	@ 0x30
 801029a:	4b0d      	ldr	r3, [pc, #52]	@ (80102d0 <std+0x68>)
 801029c:	6224      	str	r4, [r4, #32]
 801029e:	429c      	cmp	r4, r3
 80102a0:	d006      	beq.n	80102b0 <std+0x48>
 80102a2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80102a6:	4294      	cmp	r4, r2
 80102a8:	d002      	beq.n	80102b0 <std+0x48>
 80102aa:	33d0      	adds	r3, #208	@ 0xd0
 80102ac:	429c      	cmp	r4, r3
 80102ae:	d105      	bne.n	80102bc <std+0x54>
 80102b0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80102b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80102b8:	f000 b958 	b.w	801056c <__retarget_lock_init_recursive>
 80102bc:	bd10      	pop	{r4, pc}
 80102be:	bf00      	nop
 80102c0:	080103ed 	.word	0x080103ed
 80102c4:	0801040f 	.word	0x0801040f
 80102c8:	08010447 	.word	0x08010447
 80102cc:	0801046b 	.word	0x0801046b
 80102d0:	240009b0 	.word	0x240009b0

080102d4 <stdio_exit_handler>:
 80102d4:	4a02      	ldr	r2, [pc, #8]	@ (80102e0 <stdio_exit_handler+0xc>)
 80102d6:	4903      	ldr	r1, [pc, #12]	@ (80102e4 <stdio_exit_handler+0x10>)
 80102d8:	4803      	ldr	r0, [pc, #12]	@ (80102e8 <stdio_exit_handler+0x14>)
 80102da:	f000 b869 	b.w	80103b0 <_fwalk_sglue>
 80102de:	bf00      	nop
 80102e0:	24000010 	.word	0x24000010
 80102e4:	08011b41 	.word	0x08011b41
 80102e8:	24000020 	.word	0x24000020

080102ec <cleanup_stdio>:
 80102ec:	6841      	ldr	r1, [r0, #4]
 80102ee:	4b0c      	ldr	r3, [pc, #48]	@ (8010320 <cleanup_stdio+0x34>)
 80102f0:	4299      	cmp	r1, r3
 80102f2:	b510      	push	{r4, lr}
 80102f4:	4604      	mov	r4, r0
 80102f6:	d001      	beq.n	80102fc <cleanup_stdio+0x10>
 80102f8:	f001 fc22 	bl	8011b40 <_fflush_r>
 80102fc:	68a1      	ldr	r1, [r4, #8]
 80102fe:	4b09      	ldr	r3, [pc, #36]	@ (8010324 <cleanup_stdio+0x38>)
 8010300:	4299      	cmp	r1, r3
 8010302:	d002      	beq.n	801030a <cleanup_stdio+0x1e>
 8010304:	4620      	mov	r0, r4
 8010306:	f001 fc1b 	bl	8011b40 <_fflush_r>
 801030a:	68e1      	ldr	r1, [r4, #12]
 801030c:	4b06      	ldr	r3, [pc, #24]	@ (8010328 <cleanup_stdio+0x3c>)
 801030e:	4299      	cmp	r1, r3
 8010310:	d004      	beq.n	801031c <cleanup_stdio+0x30>
 8010312:	4620      	mov	r0, r4
 8010314:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010318:	f001 bc12 	b.w	8011b40 <_fflush_r>
 801031c:	bd10      	pop	{r4, pc}
 801031e:	bf00      	nop
 8010320:	240009b0 	.word	0x240009b0
 8010324:	24000a18 	.word	0x24000a18
 8010328:	24000a80 	.word	0x24000a80

0801032c <global_stdio_init.part.0>:
 801032c:	b510      	push	{r4, lr}
 801032e:	4b0b      	ldr	r3, [pc, #44]	@ (801035c <global_stdio_init.part.0+0x30>)
 8010330:	4c0b      	ldr	r4, [pc, #44]	@ (8010360 <global_stdio_init.part.0+0x34>)
 8010332:	4a0c      	ldr	r2, [pc, #48]	@ (8010364 <global_stdio_init.part.0+0x38>)
 8010334:	601a      	str	r2, [r3, #0]
 8010336:	4620      	mov	r0, r4
 8010338:	2200      	movs	r2, #0
 801033a:	2104      	movs	r1, #4
 801033c:	f7ff ff94 	bl	8010268 <std>
 8010340:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8010344:	2201      	movs	r2, #1
 8010346:	2109      	movs	r1, #9
 8010348:	f7ff ff8e 	bl	8010268 <std>
 801034c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8010350:	2202      	movs	r2, #2
 8010352:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010356:	2112      	movs	r1, #18
 8010358:	f7ff bf86 	b.w	8010268 <std>
 801035c:	24000ae8 	.word	0x24000ae8
 8010360:	240009b0 	.word	0x240009b0
 8010364:	080102d5 	.word	0x080102d5

08010368 <__sfp_lock_acquire>:
 8010368:	4801      	ldr	r0, [pc, #4]	@ (8010370 <__sfp_lock_acquire+0x8>)
 801036a:	f000 b900 	b.w	801056e <__retarget_lock_acquire_recursive>
 801036e:	bf00      	nop
 8010370:	24000af1 	.word	0x24000af1

08010374 <__sfp_lock_release>:
 8010374:	4801      	ldr	r0, [pc, #4]	@ (801037c <__sfp_lock_release+0x8>)
 8010376:	f000 b8fb 	b.w	8010570 <__retarget_lock_release_recursive>
 801037a:	bf00      	nop
 801037c:	24000af1 	.word	0x24000af1

08010380 <__sinit>:
 8010380:	b510      	push	{r4, lr}
 8010382:	4604      	mov	r4, r0
 8010384:	f7ff fff0 	bl	8010368 <__sfp_lock_acquire>
 8010388:	6a23      	ldr	r3, [r4, #32]
 801038a:	b11b      	cbz	r3, 8010394 <__sinit+0x14>
 801038c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010390:	f7ff bff0 	b.w	8010374 <__sfp_lock_release>
 8010394:	4b04      	ldr	r3, [pc, #16]	@ (80103a8 <__sinit+0x28>)
 8010396:	6223      	str	r3, [r4, #32]
 8010398:	4b04      	ldr	r3, [pc, #16]	@ (80103ac <__sinit+0x2c>)
 801039a:	681b      	ldr	r3, [r3, #0]
 801039c:	2b00      	cmp	r3, #0
 801039e:	d1f5      	bne.n	801038c <__sinit+0xc>
 80103a0:	f7ff ffc4 	bl	801032c <global_stdio_init.part.0>
 80103a4:	e7f2      	b.n	801038c <__sinit+0xc>
 80103a6:	bf00      	nop
 80103a8:	080102ed 	.word	0x080102ed
 80103ac:	24000ae8 	.word	0x24000ae8

080103b0 <_fwalk_sglue>:
 80103b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80103b4:	4607      	mov	r7, r0
 80103b6:	4688      	mov	r8, r1
 80103b8:	4614      	mov	r4, r2
 80103ba:	2600      	movs	r6, #0
 80103bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80103c0:	f1b9 0901 	subs.w	r9, r9, #1
 80103c4:	d505      	bpl.n	80103d2 <_fwalk_sglue+0x22>
 80103c6:	6824      	ldr	r4, [r4, #0]
 80103c8:	2c00      	cmp	r4, #0
 80103ca:	d1f7      	bne.n	80103bc <_fwalk_sglue+0xc>
 80103cc:	4630      	mov	r0, r6
 80103ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80103d2:	89ab      	ldrh	r3, [r5, #12]
 80103d4:	2b01      	cmp	r3, #1
 80103d6:	d907      	bls.n	80103e8 <_fwalk_sglue+0x38>
 80103d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80103dc:	3301      	adds	r3, #1
 80103de:	d003      	beq.n	80103e8 <_fwalk_sglue+0x38>
 80103e0:	4629      	mov	r1, r5
 80103e2:	4638      	mov	r0, r7
 80103e4:	47c0      	blx	r8
 80103e6:	4306      	orrs	r6, r0
 80103e8:	3568      	adds	r5, #104	@ 0x68
 80103ea:	e7e9      	b.n	80103c0 <_fwalk_sglue+0x10>

080103ec <__sread>:
 80103ec:	b510      	push	{r4, lr}
 80103ee:	460c      	mov	r4, r1
 80103f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80103f4:	f000 f86c 	bl	80104d0 <_read_r>
 80103f8:	2800      	cmp	r0, #0
 80103fa:	bfab      	itete	ge
 80103fc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80103fe:	89a3      	ldrhlt	r3, [r4, #12]
 8010400:	181b      	addge	r3, r3, r0
 8010402:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8010406:	bfac      	ite	ge
 8010408:	6563      	strge	r3, [r4, #84]	@ 0x54
 801040a:	81a3      	strhlt	r3, [r4, #12]
 801040c:	bd10      	pop	{r4, pc}

0801040e <__swrite>:
 801040e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010412:	461f      	mov	r7, r3
 8010414:	898b      	ldrh	r3, [r1, #12]
 8010416:	05db      	lsls	r3, r3, #23
 8010418:	4605      	mov	r5, r0
 801041a:	460c      	mov	r4, r1
 801041c:	4616      	mov	r6, r2
 801041e:	d505      	bpl.n	801042c <__swrite+0x1e>
 8010420:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010424:	2302      	movs	r3, #2
 8010426:	2200      	movs	r2, #0
 8010428:	f000 f840 	bl	80104ac <_lseek_r>
 801042c:	89a3      	ldrh	r3, [r4, #12]
 801042e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010432:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010436:	81a3      	strh	r3, [r4, #12]
 8010438:	4632      	mov	r2, r6
 801043a:	463b      	mov	r3, r7
 801043c:	4628      	mov	r0, r5
 801043e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010442:	f000 b857 	b.w	80104f4 <_write_r>

08010446 <__sseek>:
 8010446:	b510      	push	{r4, lr}
 8010448:	460c      	mov	r4, r1
 801044a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801044e:	f000 f82d 	bl	80104ac <_lseek_r>
 8010452:	1c43      	adds	r3, r0, #1
 8010454:	89a3      	ldrh	r3, [r4, #12]
 8010456:	bf15      	itete	ne
 8010458:	6560      	strne	r0, [r4, #84]	@ 0x54
 801045a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801045e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8010462:	81a3      	strheq	r3, [r4, #12]
 8010464:	bf18      	it	ne
 8010466:	81a3      	strhne	r3, [r4, #12]
 8010468:	bd10      	pop	{r4, pc}

0801046a <__sclose>:
 801046a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801046e:	f000 b80d 	b.w	801048c <_close_r>

08010472 <memset>:
 8010472:	4402      	add	r2, r0
 8010474:	4603      	mov	r3, r0
 8010476:	4293      	cmp	r3, r2
 8010478:	d100      	bne.n	801047c <memset+0xa>
 801047a:	4770      	bx	lr
 801047c:	f803 1b01 	strb.w	r1, [r3], #1
 8010480:	e7f9      	b.n	8010476 <memset+0x4>
	...

08010484 <_localeconv_r>:
 8010484:	4800      	ldr	r0, [pc, #0]	@ (8010488 <_localeconv_r+0x4>)
 8010486:	4770      	bx	lr
 8010488:	2400015c 	.word	0x2400015c

0801048c <_close_r>:
 801048c:	b538      	push	{r3, r4, r5, lr}
 801048e:	4d06      	ldr	r5, [pc, #24]	@ (80104a8 <_close_r+0x1c>)
 8010490:	2300      	movs	r3, #0
 8010492:	4604      	mov	r4, r0
 8010494:	4608      	mov	r0, r1
 8010496:	602b      	str	r3, [r5, #0]
 8010498:	f7f1 fedc 	bl	8002254 <_close>
 801049c:	1c43      	adds	r3, r0, #1
 801049e:	d102      	bne.n	80104a6 <_close_r+0x1a>
 80104a0:	682b      	ldr	r3, [r5, #0]
 80104a2:	b103      	cbz	r3, 80104a6 <_close_r+0x1a>
 80104a4:	6023      	str	r3, [r4, #0]
 80104a6:	bd38      	pop	{r3, r4, r5, pc}
 80104a8:	24000aec 	.word	0x24000aec

080104ac <_lseek_r>:
 80104ac:	b538      	push	{r3, r4, r5, lr}
 80104ae:	4d07      	ldr	r5, [pc, #28]	@ (80104cc <_lseek_r+0x20>)
 80104b0:	4604      	mov	r4, r0
 80104b2:	4608      	mov	r0, r1
 80104b4:	4611      	mov	r1, r2
 80104b6:	2200      	movs	r2, #0
 80104b8:	602a      	str	r2, [r5, #0]
 80104ba:	461a      	mov	r2, r3
 80104bc:	f7f1 fef1 	bl	80022a2 <_lseek>
 80104c0:	1c43      	adds	r3, r0, #1
 80104c2:	d102      	bne.n	80104ca <_lseek_r+0x1e>
 80104c4:	682b      	ldr	r3, [r5, #0]
 80104c6:	b103      	cbz	r3, 80104ca <_lseek_r+0x1e>
 80104c8:	6023      	str	r3, [r4, #0]
 80104ca:	bd38      	pop	{r3, r4, r5, pc}
 80104cc:	24000aec 	.word	0x24000aec

080104d0 <_read_r>:
 80104d0:	b538      	push	{r3, r4, r5, lr}
 80104d2:	4d07      	ldr	r5, [pc, #28]	@ (80104f0 <_read_r+0x20>)
 80104d4:	4604      	mov	r4, r0
 80104d6:	4608      	mov	r0, r1
 80104d8:	4611      	mov	r1, r2
 80104da:	2200      	movs	r2, #0
 80104dc:	602a      	str	r2, [r5, #0]
 80104de:	461a      	mov	r2, r3
 80104e0:	f7f1 fe7f 	bl	80021e2 <_read>
 80104e4:	1c43      	adds	r3, r0, #1
 80104e6:	d102      	bne.n	80104ee <_read_r+0x1e>
 80104e8:	682b      	ldr	r3, [r5, #0]
 80104ea:	b103      	cbz	r3, 80104ee <_read_r+0x1e>
 80104ec:	6023      	str	r3, [r4, #0]
 80104ee:	bd38      	pop	{r3, r4, r5, pc}
 80104f0:	24000aec 	.word	0x24000aec

080104f4 <_write_r>:
 80104f4:	b538      	push	{r3, r4, r5, lr}
 80104f6:	4d07      	ldr	r5, [pc, #28]	@ (8010514 <_write_r+0x20>)
 80104f8:	4604      	mov	r4, r0
 80104fa:	4608      	mov	r0, r1
 80104fc:	4611      	mov	r1, r2
 80104fe:	2200      	movs	r2, #0
 8010500:	602a      	str	r2, [r5, #0]
 8010502:	461a      	mov	r2, r3
 8010504:	f7f1 fe8a 	bl	800221c <_write>
 8010508:	1c43      	adds	r3, r0, #1
 801050a:	d102      	bne.n	8010512 <_write_r+0x1e>
 801050c:	682b      	ldr	r3, [r5, #0]
 801050e:	b103      	cbz	r3, 8010512 <_write_r+0x1e>
 8010510:	6023      	str	r3, [r4, #0]
 8010512:	bd38      	pop	{r3, r4, r5, pc}
 8010514:	24000aec 	.word	0x24000aec

08010518 <__errno>:
 8010518:	4b01      	ldr	r3, [pc, #4]	@ (8010520 <__errno+0x8>)
 801051a:	6818      	ldr	r0, [r3, #0]
 801051c:	4770      	bx	lr
 801051e:	bf00      	nop
 8010520:	2400001c 	.word	0x2400001c

08010524 <__libc_init_array>:
 8010524:	b570      	push	{r4, r5, r6, lr}
 8010526:	4d0d      	ldr	r5, [pc, #52]	@ (801055c <__libc_init_array+0x38>)
 8010528:	4c0d      	ldr	r4, [pc, #52]	@ (8010560 <__libc_init_array+0x3c>)
 801052a:	1b64      	subs	r4, r4, r5
 801052c:	10a4      	asrs	r4, r4, #2
 801052e:	2600      	movs	r6, #0
 8010530:	42a6      	cmp	r6, r4
 8010532:	d109      	bne.n	8010548 <__libc_init_array+0x24>
 8010534:	4d0b      	ldr	r5, [pc, #44]	@ (8010564 <__libc_init_array+0x40>)
 8010536:	4c0c      	ldr	r4, [pc, #48]	@ (8010568 <__libc_init_array+0x44>)
 8010538:	f001 fe50 	bl	80121dc <_init>
 801053c:	1b64      	subs	r4, r4, r5
 801053e:	10a4      	asrs	r4, r4, #2
 8010540:	2600      	movs	r6, #0
 8010542:	42a6      	cmp	r6, r4
 8010544:	d105      	bne.n	8010552 <__libc_init_array+0x2e>
 8010546:	bd70      	pop	{r4, r5, r6, pc}
 8010548:	f855 3b04 	ldr.w	r3, [r5], #4
 801054c:	4798      	blx	r3
 801054e:	3601      	adds	r6, #1
 8010550:	e7ee      	b.n	8010530 <__libc_init_array+0xc>
 8010552:	f855 3b04 	ldr.w	r3, [r5], #4
 8010556:	4798      	blx	r3
 8010558:	3601      	adds	r6, #1
 801055a:	e7f2      	b.n	8010542 <__libc_init_array+0x1e>
 801055c:	080127b0 	.word	0x080127b0
 8010560:	080127b0 	.word	0x080127b0
 8010564:	080127b0 	.word	0x080127b0
 8010568:	080127b4 	.word	0x080127b4

0801056c <__retarget_lock_init_recursive>:
 801056c:	4770      	bx	lr

0801056e <__retarget_lock_acquire_recursive>:
 801056e:	4770      	bx	lr

08010570 <__retarget_lock_release_recursive>:
 8010570:	4770      	bx	lr

08010572 <quorem>:
 8010572:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010576:	6903      	ldr	r3, [r0, #16]
 8010578:	690c      	ldr	r4, [r1, #16]
 801057a:	42a3      	cmp	r3, r4
 801057c:	4607      	mov	r7, r0
 801057e:	db7e      	blt.n	801067e <quorem+0x10c>
 8010580:	3c01      	subs	r4, #1
 8010582:	f101 0814 	add.w	r8, r1, #20
 8010586:	00a3      	lsls	r3, r4, #2
 8010588:	f100 0514 	add.w	r5, r0, #20
 801058c:	9300      	str	r3, [sp, #0]
 801058e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010592:	9301      	str	r3, [sp, #4]
 8010594:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010598:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801059c:	3301      	adds	r3, #1
 801059e:	429a      	cmp	r2, r3
 80105a0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80105a4:	fbb2 f6f3 	udiv	r6, r2, r3
 80105a8:	d32e      	bcc.n	8010608 <quorem+0x96>
 80105aa:	f04f 0a00 	mov.w	sl, #0
 80105ae:	46c4      	mov	ip, r8
 80105b0:	46ae      	mov	lr, r5
 80105b2:	46d3      	mov	fp, sl
 80105b4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80105b8:	b298      	uxth	r0, r3
 80105ba:	fb06 a000 	mla	r0, r6, r0, sl
 80105be:	0c02      	lsrs	r2, r0, #16
 80105c0:	0c1b      	lsrs	r3, r3, #16
 80105c2:	fb06 2303 	mla	r3, r6, r3, r2
 80105c6:	f8de 2000 	ldr.w	r2, [lr]
 80105ca:	b280      	uxth	r0, r0
 80105cc:	b292      	uxth	r2, r2
 80105ce:	1a12      	subs	r2, r2, r0
 80105d0:	445a      	add	r2, fp
 80105d2:	f8de 0000 	ldr.w	r0, [lr]
 80105d6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80105da:	b29b      	uxth	r3, r3
 80105dc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80105e0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80105e4:	b292      	uxth	r2, r2
 80105e6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80105ea:	45e1      	cmp	r9, ip
 80105ec:	f84e 2b04 	str.w	r2, [lr], #4
 80105f0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80105f4:	d2de      	bcs.n	80105b4 <quorem+0x42>
 80105f6:	9b00      	ldr	r3, [sp, #0]
 80105f8:	58eb      	ldr	r3, [r5, r3]
 80105fa:	b92b      	cbnz	r3, 8010608 <quorem+0x96>
 80105fc:	9b01      	ldr	r3, [sp, #4]
 80105fe:	3b04      	subs	r3, #4
 8010600:	429d      	cmp	r5, r3
 8010602:	461a      	mov	r2, r3
 8010604:	d32f      	bcc.n	8010666 <quorem+0xf4>
 8010606:	613c      	str	r4, [r7, #16]
 8010608:	4638      	mov	r0, r7
 801060a:	f001 f90d 	bl	8011828 <__mcmp>
 801060e:	2800      	cmp	r0, #0
 8010610:	db25      	blt.n	801065e <quorem+0xec>
 8010612:	4629      	mov	r1, r5
 8010614:	2000      	movs	r0, #0
 8010616:	f858 2b04 	ldr.w	r2, [r8], #4
 801061a:	f8d1 c000 	ldr.w	ip, [r1]
 801061e:	fa1f fe82 	uxth.w	lr, r2
 8010622:	fa1f f38c 	uxth.w	r3, ip
 8010626:	eba3 030e 	sub.w	r3, r3, lr
 801062a:	4403      	add	r3, r0
 801062c:	0c12      	lsrs	r2, r2, #16
 801062e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8010632:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8010636:	b29b      	uxth	r3, r3
 8010638:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801063c:	45c1      	cmp	r9, r8
 801063e:	f841 3b04 	str.w	r3, [r1], #4
 8010642:	ea4f 4022 	mov.w	r0, r2, asr #16
 8010646:	d2e6      	bcs.n	8010616 <quorem+0xa4>
 8010648:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801064c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010650:	b922      	cbnz	r2, 801065c <quorem+0xea>
 8010652:	3b04      	subs	r3, #4
 8010654:	429d      	cmp	r5, r3
 8010656:	461a      	mov	r2, r3
 8010658:	d30b      	bcc.n	8010672 <quorem+0x100>
 801065a:	613c      	str	r4, [r7, #16]
 801065c:	3601      	adds	r6, #1
 801065e:	4630      	mov	r0, r6
 8010660:	b003      	add	sp, #12
 8010662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010666:	6812      	ldr	r2, [r2, #0]
 8010668:	3b04      	subs	r3, #4
 801066a:	2a00      	cmp	r2, #0
 801066c:	d1cb      	bne.n	8010606 <quorem+0x94>
 801066e:	3c01      	subs	r4, #1
 8010670:	e7c6      	b.n	8010600 <quorem+0x8e>
 8010672:	6812      	ldr	r2, [r2, #0]
 8010674:	3b04      	subs	r3, #4
 8010676:	2a00      	cmp	r2, #0
 8010678:	d1ef      	bne.n	801065a <quorem+0xe8>
 801067a:	3c01      	subs	r4, #1
 801067c:	e7ea      	b.n	8010654 <quorem+0xe2>
 801067e:	2000      	movs	r0, #0
 8010680:	e7ee      	b.n	8010660 <quorem+0xee>
 8010682:	0000      	movs	r0, r0
 8010684:	0000      	movs	r0, r0
	...

08010688 <_dtoa_r>:
 8010688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801068c:	ed2d 8b02 	vpush	{d8}
 8010690:	69c7      	ldr	r7, [r0, #28]
 8010692:	b091      	sub	sp, #68	@ 0x44
 8010694:	ed8d 0b02 	vstr	d0, [sp, #8]
 8010698:	ec55 4b10 	vmov	r4, r5, d0
 801069c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 801069e:	9107      	str	r1, [sp, #28]
 80106a0:	4681      	mov	r9, r0
 80106a2:	9209      	str	r2, [sp, #36]	@ 0x24
 80106a4:	930d      	str	r3, [sp, #52]	@ 0x34
 80106a6:	b97f      	cbnz	r7, 80106c8 <_dtoa_r+0x40>
 80106a8:	2010      	movs	r0, #16
 80106aa:	f000 fd8d 	bl	80111c8 <malloc>
 80106ae:	4602      	mov	r2, r0
 80106b0:	f8c9 001c 	str.w	r0, [r9, #28]
 80106b4:	b920      	cbnz	r0, 80106c0 <_dtoa_r+0x38>
 80106b6:	4ba0      	ldr	r3, [pc, #640]	@ (8010938 <_dtoa_r+0x2b0>)
 80106b8:	21ef      	movs	r1, #239	@ 0xef
 80106ba:	48a0      	ldr	r0, [pc, #640]	@ (801093c <_dtoa_r+0x2b4>)
 80106bc:	f001 fa86 	bl	8011bcc <__assert_func>
 80106c0:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80106c4:	6007      	str	r7, [r0, #0]
 80106c6:	60c7      	str	r7, [r0, #12]
 80106c8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80106cc:	6819      	ldr	r1, [r3, #0]
 80106ce:	b159      	cbz	r1, 80106e8 <_dtoa_r+0x60>
 80106d0:	685a      	ldr	r2, [r3, #4]
 80106d2:	604a      	str	r2, [r1, #4]
 80106d4:	2301      	movs	r3, #1
 80106d6:	4093      	lsls	r3, r2
 80106d8:	608b      	str	r3, [r1, #8]
 80106da:	4648      	mov	r0, r9
 80106dc:	f000 fe6a 	bl	80113b4 <_Bfree>
 80106e0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80106e4:	2200      	movs	r2, #0
 80106e6:	601a      	str	r2, [r3, #0]
 80106e8:	1e2b      	subs	r3, r5, #0
 80106ea:	bfbb      	ittet	lt
 80106ec:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80106f0:	9303      	strlt	r3, [sp, #12]
 80106f2:	2300      	movge	r3, #0
 80106f4:	2201      	movlt	r2, #1
 80106f6:	bfac      	ite	ge
 80106f8:	6033      	strge	r3, [r6, #0]
 80106fa:	6032      	strlt	r2, [r6, #0]
 80106fc:	4b90      	ldr	r3, [pc, #576]	@ (8010940 <_dtoa_r+0x2b8>)
 80106fe:	9e03      	ldr	r6, [sp, #12]
 8010700:	43b3      	bics	r3, r6
 8010702:	d110      	bne.n	8010726 <_dtoa_r+0x9e>
 8010704:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010706:	f242 730f 	movw	r3, #9999	@ 0x270f
 801070a:	6013      	str	r3, [r2, #0]
 801070c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8010710:	4323      	orrs	r3, r4
 8010712:	f000 84de 	beq.w	80110d2 <_dtoa_r+0xa4a>
 8010716:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010718:	4f8a      	ldr	r7, [pc, #552]	@ (8010944 <_dtoa_r+0x2bc>)
 801071a:	2b00      	cmp	r3, #0
 801071c:	f000 84e0 	beq.w	80110e0 <_dtoa_r+0xa58>
 8010720:	1cfb      	adds	r3, r7, #3
 8010722:	f000 bcdb 	b.w	80110dc <_dtoa_r+0xa54>
 8010726:	ed9d 8b02 	vldr	d8, [sp, #8]
 801072a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801072e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010732:	d10a      	bne.n	801074a <_dtoa_r+0xc2>
 8010734:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010736:	2301      	movs	r3, #1
 8010738:	6013      	str	r3, [r2, #0]
 801073a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801073c:	b113      	cbz	r3, 8010744 <_dtoa_r+0xbc>
 801073e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8010740:	4b81      	ldr	r3, [pc, #516]	@ (8010948 <_dtoa_r+0x2c0>)
 8010742:	6013      	str	r3, [r2, #0]
 8010744:	4f81      	ldr	r7, [pc, #516]	@ (801094c <_dtoa_r+0x2c4>)
 8010746:	f000 bccb 	b.w	80110e0 <_dtoa_r+0xa58>
 801074a:	aa0e      	add	r2, sp, #56	@ 0x38
 801074c:	a90f      	add	r1, sp, #60	@ 0x3c
 801074e:	4648      	mov	r0, r9
 8010750:	eeb0 0b48 	vmov.f64	d0, d8
 8010754:	f001 f918 	bl	8011988 <__d2b>
 8010758:	f3c6 530a 	ubfx	r3, r6, #20, #11
 801075c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801075e:	9001      	str	r0, [sp, #4]
 8010760:	2b00      	cmp	r3, #0
 8010762:	d045      	beq.n	80107f0 <_dtoa_r+0x168>
 8010764:	eeb0 7b48 	vmov.f64	d7, d8
 8010768:	ee18 1a90 	vmov	r1, s17
 801076c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8010770:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8010774:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8010778:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 801077c:	2500      	movs	r5, #0
 801077e:	ee07 1a90 	vmov	s15, r1
 8010782:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8010786:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8010920 <_dtoa_r+0x298>
 801078a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801078e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8010928 <_dtoa_r+0x2a0>
 8010792:	eea7 6b05 	vfma.f64	d6, d7, d5
 8010796:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8010930 <_dtoa_r+0x2a8>
 801079a:	ee07 3a90 	vmov	s15, r3
 801079e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80107a2:	eeb0 7b46 	vmov.f64	d7, d6
 80107a6:	eea4 7b05 	vfma.f64	d7, d4, d5
 80107aa:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80107ae:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80107b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107b6:	ee16 8a90 	vmov	r8, s13
 80107ba:	d508      	bpl.n	80107ce <_dtoa_r+0x146>
 80107bc:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80107c0:	eeb4 6b47 	vcmp.f64	d6, d7
 80107c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107c8:	bf18      	it	ne
 80107ca:	f108 38ff 	addne.w	r8, r8, #4294967295
 80107ce:	f1b8 0f16 	cmp.w	r8, #22
 80107d2:	d82b      	bhi.n	801082c <_dtoa_r+0x1a4>
 80107d4:	495e      	ldr	r1, [pc, #376]	@ (8010950 <_dtoa_r+0x2c8>)
 80107d6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 80107da:	ed91 7b00 	vldr	d7, [r1]
 80107de:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80107e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107e6:	d501      	bpl.n	80107ec <_dtoa_r+0x164>
 80107e8:	f108 38ff 	add.w	r8, r8, #4294967295
 80107ec:	2100      	movs	r1, #0
 80107ee:	e01e      	b.n	801082e <_dtoa_r+0x1a6>
 80107f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80107f2:	4413      	add	r3, r2
 80107f4:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 80107f8:	2920      	cmp	r1, #32
 80107fa:	bfc1      	itttt	gt
 80107fc:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8010800:	408e      	lslgt	r6, r1
 8010802:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8010806:	fa24 f101 	lsrgt.w	r1, r4, r1
 801080a:	bfd6      	itet	le
 801080c:	f1c1 0120 	rsble	r1, r1, #32
 8010810:	4331      	orrgt	r1, r6
 8010812:	fa04 f101 	lslle.w	r1, r4, r1
 8010816:	ee07 1a90 	vmov	s15, r1
 801081a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801081e:	3b01      	subs	r3, #1
 8010820:	ee17 1a90 	vmov	r1, s15
 8010824:	2501      	movs	r5, #1
 8010826:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 801082a:	e7a8      	b.n	801077e <_dtoa_r+0xf6>
 801082c:	2101      	movs	r1, #1
 801082e:	1ad2      	subs	r2, r2, r3
 8010830:	1e53      	subs	r3, r2, #1
 8010832:	9306      	str	r3, [sp, #24]
 8010834:	bf45      	ittet	mi
 8010836:	f1c2 0301 	rsbmi	r3, r2, #1
 801083a:	9305      	strmi	r3, [sp, #20]
 801083c:	2300      	movpl	r3, #0
 801083e:	2300      	movmi	r3, #0
 8010840:	bf4c      	ite	mi
 8010842:	9306      	strmi	r3, [sp, #24]
 8010844:	9305      	strpl	r3, [sp, #20]
 8010846:	f1b8 0f00 	cmp.w	r8, #0
 801084a:	910c      	str	r1, [sp, #48]	@ 0x30
 801084c:	db18      	blt.n	8010880 <_dtoa_r+0x1f8>
 801084e:	9b06      	ldr	r3, [sp, #24]
 8010850:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8010854:	4443      	add	r3, r8
 8010856:	9306      	str	r3, [sp, #24]
 8010858:	2300      	movs	r3, #0
 801085a:	9a07      	ldr	r2, [sp, #28]
 801085c:	2a09      	cmp	r2, #9
 801085e:	d849      	bhi.n	80108f4 <_dtoa_r+0x26c>
 8010860:	2a05      	cmp	r2, #5
 8010862:	bfc4      	itt	gt
 8010864:	3a04      	subgt	r2, #4
 8010866:	9207      	strgt	r2, [sp, #28]
 8010868:	9a07      	ldr	r2, [sp, #28]
 801086a:	f1a2 0202 	sub.w	r2, r2, #2
 801086e:	bfcc      	ite	gt
 8010870:	2400      	movgt	r4, #0
 8010872:	2401      	movle	r4, #1
 8010874:	2a03      	cmp	r2, #3
 8010876:	d848      	bhi.n	801090a <_dtoa_r+0x282>
 8010878:	e8df f002 	tbb	[pc, r2]
 801087c:	3a2c2e0b 	.word	0x3a2c2e0b
 8010880:	9b05      	ldr	r3, [sp, #20]
 8010882:	2200      	movs	r2, #0
 8010884:	eba3 0308 	sub.w	r3, r3, r8
 8010888:	9305      	str	r3, [sp, #20]
 801088a:	920a      	str	r2, [sp, #40]	@ 0x28
 801088c:	f1c8 0300 	rsb	r3, r8, #0
 8010890:	e7e3      	b.n	801085a <_dtoa_r+0x1d2>
 8010892:	2200      	movs	r2, #0
 8010894:	9208      	str	r2, [sp, #32]
 8010896:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010898:	2a00      	cmp	r2, #0
 801089a:	dc39      	bgt.n	8010910 <_dtoa_r+0x288>
 801089c:	f04f 0b01 	mov.w	fp, #1
 80108a0:	46da      	mov	sl, fp
 80108a2:	465a      	mov	r2, fp
 80108a4:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 80108a8:	f8d9 701c 	ldr.w	r7, [r9, #28]
 80108ac:	2100      	movs	r1, #0
 80108ae:	2004      	movs	r0, #4
 80108b0:	f100 0614 	add.w	r6, r0, #20
 80108b4:	4296      	cmp	r6, r2
 80108b6:	d930      	bls.n	801091a <_dtoa_r+0x292>
 80108b8:	6079      	str	r1, [r7, #4]
 80108ba:	4648      	mov	r0, r9
 80108bc:	9304      	str	r3, [sp, #16]
 80108be:	f000 fd39 	bl	8011334 <_Balloc>
 80108c2:	9b04      	ldr	r3, [sp, #16]
 80108c4:	4607      	mov	r7, r0
 80108c6:	2800      	cmp	r0, #0
 80108c8:	d146      	bne.n	8010958 <_dtoa_r+0x2d0>
 80108ca:	4b22      	ldr	r3, [pc, #136]	@ (8010954 <_dtoa_r+0x2cc>)
 80108cc:	4602      	mov	r2, r0
 80108ce:	f240 11af 	movw	r1, #431	@ 0x1af
 80108d2:	e6f2      	b.n	80106ba <_dtoa_r+0x32>
 80108d4:	2201      	movs	r2, #1
 80108d6:	e7dd      	b.n	8010894 <_dtoa_r+0x20c>
 80108d8:	2200      	movs	r2, #0
 80108da:	9208      	str	r2, [sp, #32]
 80108dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80108de:	eb08 0b02 	add.w	fp, r8, r2
 80108e2:	f10b 0a01 	add.w	sl, fp, #1
 80108e6:	4652      	mov	r2, sl
 80108e8:	2a01      	cmp	r2, #1
 80108ea:	bfb8      	it	lt
 80108ec:	2201      	movlt	r2, #1
 80108ee:	e7db      	b.n	80108a8 <_dtoa_r+0x220>
 80108f0:	2201      	movs	r2, #1
 80108f2:	e7f2      	b.n	80108da <_dtoa_r+0x252>
 80108f4:	2401      	movs	r4, #1
 80108f6:	2200      	movs	r2, #0
 80108f8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 80108fc:	f04f 3bff 	mov.w	fp, #4294967295
 8010900:	2100      	movs	r1, #0
 8010902:	46da      	mov	sl, fp
 8010904:	2212      	movs	r2, #18
 8010906:	9109      	str	r1, [sp, #36]	@ 0x24
 8010908:	e7ce      	b.n	80108a8 <_dtoa_r+0x220>
 801090a:	2201      	movs	r2, #1
 801090c:	9208      	str	r2, [sp, #32]
 801090e:	e7f5      	b.n	80108fc <_dtoa_r+0x274>
 8010910:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8010914:	46da      	mov	sl, fp
 8010916:	465a      	mov	r2, fp
 8010918:	e7c6      	b.n	80108a8 <_dtoa_r+0x220>
 801091a:	3101      	adds	r1, #1
 801091c:	0040      	lsls	r0, r0, #1
 801091e:	e7c7      	b.n	80108b0 <_dtoa_r+0x228>
 8010920:	636f4361 	.word	0x636f4361
 8010924:	3fd287a7 	.word	0x3fd287a7
 8010928:	8b60c8b3 	.word	0x8b60c8b3
 801092c:	3fc68a28 	.word	0x3fc68a28
 8010930:	509f79fb 	.word	0x509f79fb
 8010934:	3fd34413 	.word	0x3fd34413
 8010938:	08012479 	.word	0x08012479
 801093c:	08012490 	.word	0x08012490
 8010940:	7ff00000 	.word	0x7ff00000
 8010944:	08012475 	.word	0x08012475
 8010948:	08012449 	.word	0x08012449
 801094c:	08012448 	.word	0x08012448
 8010950:	08012588 	.word	0x08012588
 8010954:	080124e8 	.word	0x080124e8
 8010958:	f8d9 201c 	ldr.w	r2, [r9, #28]
 801095c:	f1ba 0f0e 	cmp.w	sl, #14
 8010960:	6010      	str	r0, [r2, #0]
 8010962:	d86f      	bhi.n	8010a44 <_dtoa_r+0x3bc>
 8010964:	2c00      	cmp	r4, #0
 8010966:	d06d      	beq.n	8010a44 <_dtoa_r+0x3bc>
 8010968:	f1b8 0f00 	cmp.w	r8, #0
 801096c:	f340 80c2 	ble.w	8010af4 <_dtoa_r+0x46c>
 8010970:	4aca      	ldr	r2, [pc, #808]	@ (8010c9c <_dtoa_r+0x614>)
 8010972:	f008 010f 	and.w	r1, r8, #15
 8010976:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801097a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 801097e:	ed92 7b00 	vldr	d7, [r2]
 8010982:	ea4f 1128 	mov.w	r1, r8, asr #4
 8010986:	f000 80a9 	beq.w	8010adc <_dtoa_r+0x454>
 801098a:	4ac5      	ldr	r2, [pc, #788]	@ (8010ca0 <_dtoa_r+0x618>)
 801098c:	ed92 6b08 	vldr	d6, [r2, #32]
 8010990:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8010994:	ed8d 6b02 	vstr	d6, [sp, #8]
 8010998:	f001 010f 	and.w	r1, r1, #15
 801099c:	2203      	movs	r2, #3
 801099e:	48c0      	ldr	r0, [pc, #768]	@ (8010ca0 <_dtoa_r+0x618>)
 80109a0:	2900      	cmp	r1, #0
 80109a2:	f040 809d 	bne.w	8010ae0 <_dtoa_r+0x458>
 80109a6:	ed9d 6b02 	vldr	d6, [sp, #8]
 80109aa:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80109ae:	ed8d 7b02 	vstr	d7, [sp, #8]
 80109b2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80109b4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80109b8:	2900      	cmp	r1, #0
 80109ba:	f000 80c1 	beq.w	8010b40 <_dtoa_r+0x4b8>
 80109be:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80109c2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80109c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109ca:	f140 80b9 	bpl.w	8010b40 <_dtoa_r+0x4b8>
 80109ce:	f1ba 0f00 	cmp.w	sl, #0
 80109d2:	f000 80b5 	beq.w	8010b40 <_dtoa_r+0x4b8>
 80109d6:	f1bb 0f00 	cmp.w	fp, #0
 80109da:	dd31      	ble.n	8010a40 <_dtoa_r+0x3b8>
 80109dc:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 80109e0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80109e4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80109e8:	f108 31ff 	add.w	r1, r8, #4294967295
 80109ec:	9104      	str	r1, [sp, #16]
 80109ee:	3201      	adds	r2, #1
 80109f0:	465c      	mov	r4, fp
 80109f2:	ed9d 6b02 	vldr	d6, [sp, #8]
 80109f6:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 80109fa:	ee07 2a90 	vmov	s15, r2
 80109fe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010a02:	eea7 5b06 	vfma.f64	d5, d7, d6
 8010a06:	ee15 2a90 	vmov	r2, s11
 8010a0a:	ec51 0b15 	vmov	r0, r1, d5
 8010a0e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8010a12:	2c00      	cmp	r4, #0
 8010a14:	f040 8098 	bne.w	8010b48 <_dtoa_r+0x4c0>
 8010a18:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8010a1c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8010a20:	ec41 0b17 	vmov	d7, r0, r1
 8010a24:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010a28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a2c:	f300 8261 	bgt.w	8010ef2 <_dtoa_r+0x86a>
 8010a30:	eeb1 7b47 	vneg.f64	d7, d7
 8010a34:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a3c:	f100 80f5 	bmi.w	8010c2a <_dtoa_r+0x5a2>
 8010a40:	ed8d 8b02 	vstr	d8, [sp, #8]
 8010a44:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8010a46:	2a00      	cmp	r2, #0
 8010a48:	f2c0 812c 	blt.w	8010ca4 <_dtoa_r+0x61c>
 8010a4c:	f1b8 0f0e 	cmp.w	r8, #14
 8010a50:	f300 8128 	bgt.w	8010ca4 <_dtoa_r+0x61c>
 8010a54:	4b91      	ldr	r3, [pc, #580]	@ (8010c9c <_dtoa_r+0x614>)
 8010a56:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8010a5a:	ed93 6b00 	vldr	d6, [r3]
 8010a5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	da03      	bge.n	8010a6c <_dtoa_r+0x3e4>
 8010a64:	f1ba 0f00 	cmp.w	sl, #0
 8010a68:	f340 80d2 	ble.w	8010c10 <_dtoa_r+0x588>
 8010a6c:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8010a70:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010a74:	463e      	mov	r6, r7
 8010a76:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8010a7a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8010a7e:	ee15 3a10 	vmov	r3, s10
 8010a82:	3330      	adds	r3, #48	@ 0x30
 8010a84:	f806 3b01 	strb.w	r3, [r6], #1
 8010a88:	1bf3      	subs	r3, r6, r7
 8010a8a:	459a      	cmp	sl, r3
 8010a8c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8010a90:	eea3 7b46 	vfms.f64	d7, d3, d6
 8010a94:	f040 80f8 	bne.w	8010c88 <_dtoa_r+0x600>
 8010a98:	ee37 7b07 	vadd.f64	d7, d7, d7
 8010a9c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8010aa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010aa4:	f300 80dd 	bgt.w	8010c62 <_dtoa_r+0x5da>
 8010aa8:	eeb4 7b46 	vcmp.f64	d7, d6
 8010aac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ab0:	d104      	bne.n	8010abc <_dtoa_r+0x434>
 8010ab2:	ee15 3a10 	vmov	r3, s10
 8010ab6:	07db      	lsls	r3, r3, #31
 8010ab8:	f100 80d3 	bmi.w	8010c62 <_dtoa_r+0x5da>
 8010abc:	9901      	ldr	r1, [sp, #4]
 8010abe:	4648      	mov	r0, r9
 8010ac0:	f000 fc78 	bl	80113b4 <_Bfree>
 8010ac4:	2300      	movs	r3, #0
 8010ac6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010ac8:	7033      	strb	r3, [r6, #0]
 8010aca:	f108 0301 	add.w	r3, r8, #1
 8010ace:	6013      	str	r3, [r2, #0]
 8010ad0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	f000 8304 	beq.w	80110e0 <_dtoa_r+0xa58>
 8010ad8:	601e      	str	r6, [r3, #0]
 8010ada:	e301      	b.n	80110e0 <_dtoa_r+0xa58>
 8010adc:	2202      	movs	r2, #2
 8010ade:	e75e      	b.n	801099e <_dtoa_r+0x316>
 8010ae0:	07cc      	lsls	r4, r1, #31
 8010ae2:	d504      	bpl.n	8010aee <_dtoa_r+0x466>
 8010ae4:	ed90 6b00 	vldr	d6, [r0]
 8010ae8:	3201      	adds	r2, #1
 8010aea:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010aee:	1049      	asrs	r1, r1, #1
 8010af0:	3008      	adds	r0, #8
 8010af2:	e755      	b.n	80109a0 <_dtoa_r+0x318>
 8010af4:	d022      	beq.n	8010b3c <_dtoa_r+0x4b4>
 8010af6:	f1c8 0100 	rsb	r1, r8, #0
 8010afa:	4a68      	ldr	r2, [pc, #416]	@ (8010c9c <_dtoa_r+0x614>)
 8010afc:	f001 000f 	and.w	r0, r1, #15
 8010b00:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8010b04:	ed92 7b00 	vldr	d7, [r2]
 8010b08:	ee28 7b07 	vmul.f64	d7, d8, d7
 8010b0c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010b10:	4863      	ldr	r0, [pc, #396]	@ (8010ca0 <_dtoa_r+0x618>)
 8010b12:	1109      	asrs	r1, r1, #4
 8010b14:	2400      	movs	r4, #0
 8010b16:	2202      	movs	r2, #2
 8010b18:	b929      	cbnz	r1, 8010b26 <_dtoa_r+0x49e>
 8010b1a:	2c00      	cmp	r4, #0
 8010b1c:	f43f af49 	beq.w	80109b2 <_dtoa_r+0x32a>
 8010b20:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010b24:	e745      	b.n	80109b2 <_dtoa_r+0x32a>
 8010b26:	07ce      	lsls	r6, r1, #31
 8010b28:	d505      	bpl.n	8010b36 <_dtoa_r+0x4ae>
 8010b2a:	ed90 6b00 	vldr	d6, [r0]
 8010b2e:	3201      	adds	r2, #1
 8010b30:	2401      	movs	r4, #1
 8010b32:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010b36:	1049      	asrs	r1, r1, #1
 8010b38:	3008      	adds	r0, #8
 8010b3a:	e7ed      	b.n	8010b18 <_dtoa_r+0x490>
 8010b3c:	2202      	movs	r2, #2
 8010b3e:	e738      	b.n	80109b2 <_dtoa_r+0x32a>
 8010b40:	f8cd 8010 	str.w	r8, [sp, #16]
 8010b44:	4654      	mov	r4, sl
 8010b46:	e754      	b.n	80109f2 <_dtoa_r+0x36a>
 8010b48:	4a54      	ldr	r2, [pc, #336]	@ (8010c9c <_dtoa_r+0x614>)
 8010b4a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8010b4e:	ed12 4b02 	vldr	d4, [r2, #-8]
 8010b52:	9a08      	ldr	r2, [sp, #32]
 8010b54:	ec41 0b17 	vmov	d7, r0, r1
 8010b58:	443c      	add	r4, r7
 8010b5a:	b34a      	cbz	r2, 8010bb0 <_dtoa_r+0x528>
 8010b5c:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8010b60:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8010b64:	463e      	mov	r6, r7
 8010b66:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8010b6a:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8010b6e:	ee35 7b47 	vsub.f64	d7, d5, d7
 8010b72:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8010b76:	ee14 2a90 	vmov	r2, s9
 8010b7a:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8010b7e:	3230      	adds	r2, #48	@ 0x30
 8010b80:	ee36 6b45 	vsub.f64	d6, d6, d5
 8010b84:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010b88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b8c:	f806 2b01 	strb.w	r2, [r6], #1
 8010b90:	d438      	bmi.n	8010c04 <_dtoa_r+0x57c>
 8010b92:	ee32 5b46 	vsub.f64	d5, d2, d6
 8010b96:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8010b9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b9e:	d462      	bmi.n	8010c66 <_dtoa_r+0x5de>
 8010ba0:	42a6      	cmp	r6, r4
 8010ba2:	f43f af4d 	beq.w	8010a40 <_dtoa_r+0x3b8>
 8010ba6:	ee27 7b03 	vmul.f64	d7, d7, d3
 8010baa:	ee26 6b03 	vmul.f64	d6, d6, d3
 8010bae:	e7e0      	b.n	8010b72 <_dtoa_r+0x4ea>
 8010bb0:	4621      	mov	r1, r4
 8010bb2:	463e      	mov	r6, r7
 8010bb4:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010bb8:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8010bbc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8010bc0:	ee14 2a90 	vmov	r2, s9
 8010bc4:	3230      	adds	r2, #48	@ 0x30
 8010bc6:	f806 2b01 	strb.w	r2, [r6], #1
 8010bca:	42a6      	cmp	r6, r4
 8010bcc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8010bd0:	ee36 6b45 	vsub.f64	d6, d6, d5
 8010bd4:	d119      	bne.n	8010c0a <_dtoa_r+0x582>
 8010bd6:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8010bda:	ee37 4b05 	vadd.f64	d4, d7, d5
 8010bde:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8010be2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010be6:	dc3e      	bgt.n	8010c66 <_dtoa_r+0x5de>
 8010be8:	ee35 5b47 	vsub.f64	d5, d5, d7
 8010bec:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8010bf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bf4:	f57f af24 	bpl.w	8010a40 <_dtoa_r+0x3b8>
 8010bf8:	460e      	mov	r6, r1
 8010bfa:	3901      	subs	r1, #1
 8010bfc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010c00:	2b30      	cmp	r3, #48	@ 0x30
 8010c02:	d0f9      	beq.n	8010bf8 <_dtoa_r+0x570>
 8010c04:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8010c08:	e758      	b.n	8010abc <_dtoa_r+0x434>
 8010c0a:	ee26 6b03 	vmul.f64	d6, d6, d3
 8010c0e:	e7d5      	b.n	8010bbc <_dtoa_r+0x534>
 8010c10:	d10b      	bne.n	8010c2a <_dtoa_r+0x5a2>
 8010c12:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8010c16:	ee26 6b07 	vmul.f64	d6, d6, d7
 8010c1a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010c1e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010c22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c26:	f2c0 8161 	blt.w	8010eec <_dtoa_r+0x864>
 8010c2a:	2400      	movs	r4, #0
 8010c2c:	4625      	mov	r5, r4
 8010c2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010c30:	43db      	mvns	r3, r3
 8010c32:	9304      	str	r3, [sp, #16]
 8010c34:	463e      	mov	r6, r7
 8010c36:	f04f 0800 	mov.w	r8, #0
 8010c3a:	4621      	mov	r1, r4
 8010c3c:	4648      	mov	r0, r9
 8010c3e:	f000 fbb9 	bl	80113b4 <_Bfree>
 8010c42:	2d00      	cmp	r5, #0
 8010c44:	d0de      	beq.n	8010c04 <_dtoa_r+0x57c>
 8010c46:	f1b8 0f00 	cmp.w	r8, #0
 8010c4a:	d005      	beq.n	8010c58 <_dtoa_r+0x5d0>
 8010c4c:	45a8      	cmp	r8, r5
 8010c4e:	d003      	beq.n	8010c58 <_dtoa_r+0x5d0>
 8010c50:	4641      	mov	r1, r8
 8010c52:	4648      	mov	r0, r9
 8010c54:	f000 fbae 	bl	80113b4 <_Bfree>
 8010c58:	4629      	mov	r1, r5
 8010c5a:	4648      	mov	r0, r9
 8010c5c:	f000 fbaa 	bl	80113b4 <_Bfree>
 8010c60:	e7d0      	b.n	8010c04 <_dtoa_r+0x57c>
 8010c62:	f8cd 8010 	str.w	r8, [sp, #16]
 8010c66:	4633      	mov	r3, r6
 8010c68:	461e      	mov	r6, r3
 8010c6a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010c6e:	2a39      	cmp	r2, #57	@ 0x39
 8010c70:	d106      	bne.n	8010c80 <_dtoa_r+0x5f8>
 8010c72:	429f      	cmp	r7, r3
 8010c74:	d1f8      	bne.n	8010c68 <_dtoa_r+0x5e0>
 8010c76:	9a04      	ldr	r2, [sp, #16]
 8010c78:	3201      	adds	r2, #1
 8010c7a:	9204      	str	r2, [sp, #16]
 8010c7c:	2230      	movs	r2, #48	@ 0x30
 8010c7e:	703a      	strb	r2, [r7, #0]
 8010c80:	781a      	ldrb	r2, [r3, #0]
 8010c82:	3201      	adds	r2, #1
 8010c84:	701a      	strb	r2, [r3, #0]
 8010c86:	e7bd      	b.n	8010c04 <_dtoa_r+0x57c>
 8010c88:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010c8c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c94:	f47f aeef 	bne.w	8010a76 <_dtoa_r+0x3ee>
 8010c98:	e710      	b.n	8010abc <_dtoa_r+0x434>
 8010c9a:	bf00      	nop
 8010c9c:	08012588 	.word	0x08012588
 8010ca0:	08012560 	.word	0x08012560
 8010ca4:	9908      	ldr	r1, [sp, #32]
 8010ca6:	2900      	cmp	r1, #0
 8010ca8:	f000 80e3 	beq.w	8010e72 <_dtoa_r+0x7ea>
 8010cac:	9907      	ldr	r1, [sp, #28]
 8010cae:	2901      	cmp	r1, #1
 8010cb0:	f300 80c8 	bgt.w	8010e44 <_dtoa_r+0x7bc>
 8010cb4:	2d00      	cmp	r5, #0
 8010cb6:	f000 80c1 	beq.w	8010e3c <_dtoa_r+0x7b4>
 8010cba:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8010cbe:	9e05      	ldr	r6, [sp, #20]
 8010cc0:	461c      	mov	r4, r3
 8010cc2:	9304      	str	r3, [sp, #16]
 8010cc4:	9b05      	ldr	r3, [sp, #20]
 8010cc6:	4413      	add	r3, r2
 8010cc8:	9305      	str	r3, [sp, #20]
 8010cca:	9b06      	ldr	r3, [sp, #24]
 8010ccc:	2101      	movs	r1, #1
 8010cce:	4413      	add	r3, r2
 8010cd0:	4648      	mov	r0, r9
 8010cd2:	9306      	str	r3, [sp, #24]
 8010cd4:	f000 fc22 	bl	801151c <__i2b>
 8010cd8:	9b04      	ldr	r3, [sp, #16]
 8010cda:	4605      	mov	r5, r0
 8010cdc:	b166      	cbz	r6, 8010cf8 <_dtoa_r+0x670>
 8010cde:	9a06      	ldr	r2, [sp, #24]
 8010ce0:	2a00      	cmp	r2, #0
 8010ce2:	dd09      	ble.n	8010cf8 <_dtoa_r+0x670>
 8010ce4:	42b2      	cmp	r2, r6
 8010ce6:	9905      	ldr	r1, [sp, #20]
 8010ce8:	bfa8      	it	ge
 8010cea:	4632      	movge	r2, r6
 8010cec:	1a89      	subs	r1, r1, r2
 8010cee:	9105      	str	r1, [sp, #20]
 8010cf0:	9906      	ldr	r1, [sp, #24]
 8010cf2:	1ab6      	subs	r6, r6, r2
 8010cf4:	1a8a      	subs	r2, r1, r2
 8010cf6:	9206      	str	r2, [sp, #24]
 8010cf8:	b1fb      	cbz	r3, 8010d3a <_dtoa_r+0x6b2>
 8010cfa:	9a08      	ldr	r2, [sp, #32]
 8010cfc:	2a00      	cmp	r2, #0
 8010cfe:	f000 80bc 	beq.w	8010e7a <_dtoa_r+0x7f2>
 8010d02:	b19c      	cbz	r4, 8010d2c <_dtoa_r+0x6a4>
 8010d04:	4629      	mov	r1, r5
 8010d06:	4622      	mov	r2, r4
 8010d08:	4648      	mov	r0, r9
 8010d0a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010d0c:	f000 fcc6 	bl	801169c <__pow5mult>
 8010d10:	9a01      	ldr	r2, [sp, #4]
 8010d12:	4601      	mov	r1, r0
 8010d14:	4605      	mov	r5, r0
 8010d16:	4648      	mov	r0, r9
 8010d18:	f000 fc16 	bl	8011548 <__multiply>
 8010d1c:	9901      	ldr	r1, [sp, #4]
 8010d1e:	9004      	str	r0, [sp, #16]
 8010d20:	4648      	mov	r0, r9
 8010d22:	f000 fb47 	bl	80113b4 <_Bfree>
 8010d26:	9a04      	ldr	r2, [sp, #16]
 8010d28:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010d2a:	9201      	str	r2, [sp, #4]
 8010d2c:	1b1a      	subs	r2, r3, r4
 8010d2e:	d004      	beq.n	8010d3a <_dtoa_r+0x6b2>
 8010d30:	9901      	ldr	r1, [sp, #4]
 8010d32:	4648      	mov	r0, r9
 8010d34:	f000 fcb2 	bl	801169c <__pow5mult>
 8010d38:	9001      	str	r0, [sp, #4]
 8010d3a:	2101      	movs	r1, #1
 8010d3c:	4648      	mov	r0, r9
 8010d3e:	f000 fbed 	bl	801151c <__i2b>
 8010d42:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010d44:	4604      	mov	r4, r0
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	f000 81d0 	beq.w	80110ec <_dtoa_r+0xa64>
 8010d4c:	461a      	mov	r2, r3
 8010d4e:	4601      	mov	r1, r0
 8010d50:	4648      	mov	r0, r9
 8010d52:	f000 fca3 	bl	801169c <__pow5mult>
 8010d56:	9b07      	ldr	r3, [sp, #28]
 8010d58:	2b01      	cmp	r3, #1
 8010d5a:	4604      	mov	r4, r0
 8010d5c:	f300 8095 	bgt.w	8010e8a <_dtoa_r+0x802>
 8010d60:	9b02      	ldr	r3, [sp, #8]
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	f040 808b 	bne.w	8010e7e <_dtoa_r+0x7f6>
 8010d68:	9b03      	ldr	r3, [sp, #12]
 8010d6a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8010d6e:	2a00      	cmp	r2, #0
 8010d70:	f040 8087 	bne.w	8010e82 <_dtoa_r+0x7fa>
 8010d74:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8010d78:	0d12      	lsrs	r2, r2, #20
 8010d7a:	0512      	lsls	r2, r2, #20
 8010d7c:	2a00      	cmp	r2, #0
 8010d7e:	f000 8082 	beq.w	8010e86 <_dtoa_r+0x7fe>
 8010d82:	9b05      	ldr	r3, [sp, #20]
 8010d84:	3301      	adds	r3, #1
 8010d86:	9305      	str	r3, [sp, #20]
 8010d88:	9b06      	ldr	r3, [sp, #24]
 8010d8a:	3301      	adds	r3, #1
 8010d8c:	9306      	str	r3, [sp, #24]
 8010d8e:	2301      	movs	r3, #1
 8010d90:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010d92:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	f000 81af 	beq.w	80110f8 <_dtoa_r+0xa70>
 8010d9a:	6922      	ldr	r2, [r4, #16]
 8010d9c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8010da0:	6910      	ldr	r0, [r2, #16]
 8010da2:	f000 fb6f 	bl	8011484 <__hi0bits>
 8010da6:	f1c0 0020 	rsb	r0, r0, #32
 8010daa:	9b06      	ldr	r3, [sp, #24]
 8010dac:	4418      	add	r0, r3
 8010dae:	f010 001f 	ands.w	r0, r0, #31
 8010db2:	d076      	beq.n	8010ea2 <_dtoa_r+0x81a>
 8010db4:	f1c0 0220 	rsb	r2, r0, #32
 8010db8:	2a04      	cmp	r2, #4
 8010dba:	dd69      	ble.n	8010e90 <_dtoa_r+0x808>
 8010dbc:	9b05      	ldr	r3, [sp, #20]
 8010dbe:	f1c0 001c 	rsb	r0, r0, #28
 8010dc2:	4403      	add	r3, r0
 8010dc4:	9305      	str	r3, [sp, #20]
 8010dc6:	9b06      	ldr	r3, [sp, #24]
 8010dc8:	4406      	add	r6, r0
 8010dca:	4403      	add	r3, r0
 8010dcc:	9306      	str	r3, [sp, #24]
 8010dce:	9b05      	ldr	r3, [sp, #20]
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	dd05      	ble.n	8010de0 <_dtoa_r+0x758>
 8010dd4:	9901      	ldr	r1, [sp, #4]
 8010dd6:	461a      	mov	r2, r3
 8010dd8:	4648      	mov	r0, r9
 8010dda:	f000 fcb9 	bl	8011750 <__lshift>
 8010dde:	9001      	str	r0, [sp, #4]
 8010de0:	9b06      	ldr	r3, [sp, #24]
 8010de2:	2b00      	cmp	r3, #0
 8010de4:	dd05      	ble.n	8010df2 <_dtoa_r+0x76a>
 8010de6:	4621      	mov	r1, r4
 8010de8:	461a      	mov	r2, r3
 8010dea:	4648      	mov	r0, r9
 8010dec:	f000 fcb0 	bl	8011750 <__lshift>
 8010df0:	4604      	mov	r4, r0
 8010df2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	d056      	beq.n	8010ea6 <_dtoa_r+0x81e>
 8010df8:	9801      	ldr	r0, [sp, #4]
 8010dfa:	4621      	mov	r1, r4
 8010dfc:	f000 fd14 	bl	8011828 <__mcmp>
 8010e00:	2800      	cmp	r0, #0
 8010e02:	da50      	bge.n	8010ea6 <_dtoa_r+0x81e>
 8010e04:	f108 33ff 	add.w	r3, r8, #4294967295
 8010e08:	9304      	str	r3, [sp, #16]
 8010e0a:	9901      	ldr	r1, [sp, #4]
 8010e0c:	2300      	movs	r3, #0
 8010e0e:	220a      	movs	r2, #10
 8010e10:	4648      	mov	r0, r9
 8010e12:	f000 faf1 	bl	80113f8 <__multadd>
 8010e16:	9b08      	ldr	r3, [sp, #32]
 8010e18:	9001      	str	r0, [sp, #4]
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	f000 816e 	beq.w	80110fc <_dtoa_r+0xa74>
 8010e20:	4629      	mov	r1, r5
 8010e22:	2300      	movs	r3, #0
 8010e24:	220a      	movs	r2, #10
 8010e26:	4648      	mov	r0, r9
 8010e28:	f000 fae6 	bl	80113f8 <__multadd>
 8010e2c:	f1bb 0f00 	cmp.w	fp, #0
 8010e30:	4605      	mov	r5, r0
 8010e32:	dc64      	bgt.n	8010efe <_dtoa_r+0x876>
 8010e34:	9b07      	ldr	r3, [sp, #28]
 8010e36:	2b02      	cmp	r3, #2
 8010e38:	dc3e      	bgt.n	8010eb8 <_dtoa_r+0x830>
 8010e3a:	e060      	b.n	8010efe <_dtoa_r+0x876>
 8010e3c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010e3e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8010e42:	e73c      	b.n	8010cbe <_dtoa_r+0x636>
 8010e44:	f10a 34ff 	add.w	r4, sl, #4294967295
 8010e48:	42a3      	cmp	r3, r4
 8010e4a:	bfbf      	itttt	lt
 8010e4c:	1ae2      	sublt	r2, r4, r3
 8010e4e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8010e50:	189b      	addlt	r3, r3, r2
 8010e52:	930a      	strlt	r3, [sp, #40]	@ 0x28
 8010e54:	bfae      	itee	ge
 8010e56:	1b1c      	subge	r4, r3, r4
 8010e58:	4623      	movlt	r3, r4
 8010e5a:	2400      	movlt	r4, #0
 8010e5c:	f1ba 0f00 	cmp.w	sl, #0
 8010e60:	bfb5      	itete	lt
 8010e62:	9a05      	ldrlt	r2, [sp, #20]
 8010e64:	9e05      	ldrge	r6, [sp, #20]
 8010e66:	eba2 060a 	sublt.w	r6, r2, sl
 8010e6a:	4652      	movge	r2, sl
 8010e6c:	bfb8      	it	lt
 8010e6e:	2200      	movlt	r2, #0
 8010e70:	e727      	b.n	8010cc2 <_dtoa_r+0x63a>
 8010e72:	9e05      	ldr	r6, [sp, #20]
 8010e74:	9d08      	ldr	r5, [sp, #32]
 8010e76:	461c      	mov	r4, r3
 8010e78:	e730      	b.n	8010cdc <_dtoa_r+0x654>
 8010e7a:	461a      	mov	r2, r3
 8010e7c:	e758      	b.n	8010d30 <_dtoa_r+0x6a8>
 8010e7e:	2300      	movs	r3, #0
 8010e80:	e786      	b.n	8010d90 <_dtoa_r+0x708>
 8010e82:	9b02      	ldr	r3, [sp, #8]
 8010e84:	e784      	b.n	8010d90 <_dtoa_r+0x708>
 8010e86:	920b      	str	r2, [sp, #44]	@ 0x2c
 8010e88:	e783      	b.n	8010d92 <_dtoa_r+0x70a>
 8010e8a:	2300      	movs	r3, #0
 8010e8c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010e8e:	e784      	b.n	8010d9a <_dtoa_r+0x712>
 8010e90:	d09d      	beq.n	8010dce <_dtoa_r+0x746>
 8010e92:	9b05      	ldr	r3, [sp, #20]
 8010e94:	321c      	adds	r2, #28
 8010e96:	4413      	add	r3, r2
 8010e98:	9305      	str	r3, [sp, #20]
 8010e9a:	9b06      	ldr	r3, [sp, #24]
 8010e9c:	4416      	add	r6, r2
 8010e9e:	4413      	add	r3, r2
 8010ea0:	e794      	b.n	8010dcc <_dtoa_r+0x744>
 8010ea2:	4602      	mov	r2, r0
 8010ea4:	e7f5      	b.n	8010e92 <_dtoa_r+0x80a>
 8010ea6:	f1ba 0f00 	cmp.w	sl, #0
 8010eaa:	f8cd 8010 	str.w	r8, [sp, #16]
 8010eae:	46d3      	mov	fp, sl
 8010eb0:	dc21      	bgt.n	8010ef6 <_dtoa_r+0x86e>
 8010eb2:	9b07      	ldr	r3, [sp, #28]
 8010eb4:	2b02      	cmp	r3, #2
 8010eb6:	dd1e      	ble.n	8010ef6 <_dtoa_r+0x86e>
 8010eb8:	f1bb 0f00 	cmp.w	fp, #0
 8010ebc:	f47f aeb7 	bne.w	8010c2e <_dtoa_r+0x5a6>
 8010ec0:	4621      	mov	r1, r4
 8010ec2:	465b      	mov	r3, fp
 8010ec4:	2205      	movs	r2, #5
 8010ec6:	4648      	mov	r0, r9
 8010ec8:	f000 fa96 	bl	80113f8 <__multadd>
 8010ecc:	4601      	mov	r1, r0
 8010ece:	4604      	mov	r4, r0
 8010ed0:	9801      	ldr	r0, [sp, #4]
 8010ed2:	f000 fca9 	bl	8011828 <__mcmp>
 8010ed6:	2800      	cmp	r0, #0
 8010ed8:	f77f aea9 	ble.w	8010c2e <_dtoa_r+0x5a6>
 8010edc:	463e      	mov	r6, r7
 8010ede:	2331      	movs	r3, #49	@ 0x31
 8010ee0:	f806 3b01 	strb.w	r3, [r6], #1
 8010ee4:	9b04      	ldr	r3, [sp, #16]
 8010ee6:	3301      	adds	r3, #1
 8010ee8:	9304      	str	r3, [sp, #16]
 8010eea:	e6a4      	b.n	8010c36 <_dtoa_r+0x5ae>
 8010eec:	f8cd 8010 	str.w	r8, [sp, #16]
 8010ef0:	4654      	mov	r4, sl
 8010ef2:	4625      	mov	r5, r4
 8010ef4:	e7f2      	b.n	8010edc <_dtoa_r+0x854>
 8010ef6:	9b08      	ldr	r3, [sp, #32]
 8010ef8:	2b00      	cmp	r3, #0
 8010efa:	f000 8103 	beq.w	8011104 <_dtoa_r+0xa7c>
 8010efe:	2e00      	cmp	r6, #0
 8010f00:	dd05      	ble.n	8010f0e <_dtoa_r+0x886>
 8010f02:	4629      	mov	r1, r5
 8010f04:	4632      	mov	r2, r6
 8010f06:	4648      	mov	r0, r9
 8010f08:	f000 fc22 	bl	8011750 <__lshift>
 8010f0c:	4605      	mov	r5, r0
 8010f0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d058      	beq.n	8010fc6 <_dtoa_r+0x93e>
 8010f14:	6869      	ldr	r1, [r5, #4]
 8010f16:	4648      	mov	r0, r9
 8010f18:	f000 fa0c 	bl	8011334 <_Balloc>
 8010f1c:	4606      	mov	r6, r0
 8010f1e:	b928      	cbnz	r0, 8010f2c <_dtoa_r+0x8a4>
 8010f20:	4b82      	ldr	r3, [pc, #520]	@ (801112c <_dtoa_r+0xaa4>)
 8010f22:	4602      	mov	r2, r0
 8010f24:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8010f28:	f7ff bbc7 	b.w	80106ba <_dtoa_r+0x32>
 8010f2c:	692a      	ldr	r2, [r5, #16]
 8010f2e:	3202      	adds	r2, #2
 8010f30:	0092      	lsls	r2, r2, #2
 8010f32:	f105 010c 	add.w	r1, r5, #12
 8010f36:	300c      	adds	r0, #12
 8010f38:	f000 fe3a 	bl	8011bb0 <memcpy>
 8010f3c:	2201      	movs	r2, #1
 8010f3e:	4631      	mov	r1, r6
 8010f40:	4648      	mov	r0, r9
 8010f42:	f000 fc05 	bl	8011750 <__lshift>
 8010f46:	1c7b      	adds	r3, r7, #1
 8010f48:	9305      	str	r3, [sp, #20]
 8010f4a:	eb07 030b 	add.w	r3, r7, fp
 8010f4e:	9309      	str	r3, [sp, #36]	@ 0x24
 8010f50:	9b02      	ldr	r3, [sp, #8]
 8010f52:	f003 0301 	and.w	r3, r3, #1
 8010f56:	46a8      	mov	r8, r5
 8010f58:	9308      	str	r3, [sp, #32]
 8010f5a:	4605      	mov	r5, r0
 8010f5c:	9b05      	ldr	r3, [sp, #20]
 8010f5e:	9801      	ldr	r0, [sp, #4]
 8010f60:	4621      	mov	r1, r4
 8010f62:	f103 3bff 	add.w	fp, r3, #4294967295
 8010f66:	f7ff fb04 	bl	8010572 <quorem>
 8010f6a:	4641      	mov	r1, r8
 8010f6c:	9002      	str	r0, [sp, #8]
 8010f6e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8010f72:	9801      	ldr	r0, [sp, #4]
 8010f74:	f000 fc58 	bl	8011828 <__mcmp>
 8010f78:	462a      	mov	r2, r5
 8010f7a:	9006      	str	r0, [sp, #24]
 8010f7c:	4621      	mov	r1, r4
 8010f7e:	4648      	mov	r0, r9
 8010f80:	f000 fc6e 	bl	8011860 <__mdiff>
 8010f84:	68c2      	ldr	r2, [r0, #12]
 8010f86:	4606      	mov	r6, r0
 8010f88:	b9fa      	cbnz	r2, 8010fca <_dtoa_r+0x942>
 8010f8a:	4601      	mov	r1, r0
 8010f8c:	9801      	ldr	r0, [sp, #4]
 8010f8e:	f000 fc4b 	bl	8011828 <__mcmp>
 8010f92:	4602      	mov	r2, r0
 8010f94:	4631      	mov	r1, r6
 8010f96:	4648      	mov	r0, r9
 8010f98:	920a      	str	r2, [sp, #40]	@ 0x28
 8010f9a:	f000 fa0b 	bl	80113b4 <_Bfree>
 8010f9e:	9b07      	ldr	r3, [sp, #28]
 8010fa0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010fa2:	9e05      	ldr	r6, [sp, #20]
 8010fa4:	ea43 0102 	orr.w	r1, r3, r2
 8010fa8:	9b08      	ldr	r3, [sp, #32]
 8010faa:	4319      	orrs	r1, r3
 8010fac:	d10f      	bne.n	8010fce <_dtoa_r+0x946>
 8010fae:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8010fb2:	d028      	beq.n	8011006 <_dtoa_r+0x97e>
 8010fb4:	9b06      	ldr	r3, [sp, #24]
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	dd02      	ble.n	8010fc0 <_dtoa_r+0x938>
 8010fba:	9b02      	ldr	r3, [sp, #8]
 8010fbc:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8010fc0:	f88b a000 	strb.w	sl, [fp]
 8010fc4:	e639      	b.n	8010c3a <_dtoa_r+0x5b2>
 8010fc6:	4628      	mov	r0, r5
 8010fc8:	e7bd      	b.n	8010f46 <_dtoa_r+0x8be>
 8010fca:	2201      	movs	r2, #1
 8010fcc:	e7e2      	b.n	8010f94 <_dtoa_r+0x90c>
 8010fce:	9b06      	ldr	r3, [sp, #24]
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	db04      	blt.n	8010fde <_dtoa_r+0x956>
 8010fd4:	9907      	ldr	r1, [sp, #28]
 8010fd6:	430b      	orrs	r3, r1
 8010fd8:	9908      	ldr	r1, [sp, #32]
 8010fda:	430b      	orrs	r3, r1
 8010fdc:	d120      	bne.n	8011020 <_dtoa_r+0x998>
 8010fde:	2a00      	cmp	r2, #0
 8010fe0:	ddee      	ble.n	8010fc0 <_dtoa_r+0x938>
 8010fe2:	9901      	ldr	r1, [sp, #4]
 8010fe4:	2201      	movs	r2, #1
 8010fe6:	4648      	mov	r0, r9
 8010fe8:	f000 fbb2 	bl	8011750 <__lshift>
 8010fec:	4621      	mov	r1, r4
 8010fee:	9001      	str	r0, [sp, #4]
 8010ff0:	f000 fc1a 	bl	8011828 <__mcmp>
 8010ff4:	2800      	cmp	r0, #0
 8010ff6:	dc03      	bgt.n	8011000 <_dtoa_r+0x978>
 8010ff8:	d1e2      	bne.n	8010fc0 <_dtoa_r+0x938>
 8010ffa:	f01a 0f01 	tst.w	sl, #1
 8010ffe:	d0df      	beq.n	8010fc0 <_dtoa_r+0x938>
 8011000:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8011004:	d1d9      	bne.n	8010fba <_dtoa_r+0x932>
 8011006:	2339      	movs	r3, #57	@ 0x39
 8011008:	f88b 3000 	strb.w	r3, [fp]
 801100c:	4633      	mov	r3, r6
 801100e:	461e      	mov	r6, r3
 8011010:	3b01      	subs	r3, #1
 8011012:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8011016:	2a39      	cmp	r2, #57	@ 0x39
 8011018:	d053      	beq.n	80110c2 <_dtoa_r+0xa3a>
 801101a:	3201      	adds	r2, #1
 801101c:	701a      	strb	r2, [r3, #0]
 801101e:	e60c      	b.n	8010c3a <_dtoa_r+0x5b2>
 8011020:	2a00      	cmp	r2, #0
 8011022:	dd07      	ble.n	8011034 <_dtoa_r+0x9ac>
 8011024:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8011028:	d0ed      	beq.n	8011006 <_dtoa_r+0x97e>
 801102a:	f10a 0301 	add.w	r3, sl, #1
 801102e:	f88b 3000 	strb.w	r3, [fp]
 8011032:	e602      	b.n	8010c3a <_dtoa_r+0x5b2>
 8011034:	9b05      	ldr	r3, [sp, #20]
 8011036:	9a05      	ldr	r2, [sp, #20]
 8011038:	f803 ac01 	strb.w	sl, [r3, #-1]
 801103c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801103e:	4293      	cmp	r3, r2
 8011040:	d029      	beq.n	8011096 <_dtoa_r+0xa0e>
 8011042:	9901      	ldr	r1, [sp, #4]
 8011044:	2300      	movs	r3, #0
 8011046:	220a      	movs	r2, #10
 8011048:	4648      	mov	r0, r9
 801104a:	f000 f9d5 	bl	80113f8 <__multadd>
 801104e:	45a8      	cmp	r8, r5
 8011050:	9001      	str	r0, [sp, #4]
 8011052:	f04f 0300 	mov.w	r3, #0
 8011056:	f04f 020a 	mov.w	r2, #10
 801105a:	4641      	mov	r1, r8
 801105c:	4648      	mov	r0, r9
 801105e:	d107      	bne.n	8011070 <_dtoa_r+0x9e8>
 8011060:	f000 f9ca 	bl	80113f8 <__multadd>
 8011064:	4680      	mov	r8, r0
 8011066:	4605      	mov	r5, r0
 8011068:	9b05      	ldr	r3, [sp, #20]
 801106a:	3301      	adds	r3, #1
 801106c:	9305      	str	r3, [sp, #20]
 801106e:	e775      	b.n	8010f5c <_dtoa_r+0x8d4>
 8011070:	f000 f9c2 	bl	80113f8 <__multadd>
 8011074:	4629      	mov	r1, r5
 8011076:	4680      	mov	r8, r0
 8011078:	2300      	movs	r3, #0
 801107a:	220a      	movs	r2, #10
 801107c:	4648      	mov	r0, r9
 801107e:	f000 f9bb 	bl	80113f8 <__multadd>
 8011082:	4605      	mov	r5, r0
 8011084:	e7f0      	b.n	8011068 <_dtoa_r+0x9e0>
 8011086:	f1bb 0f00 	cmp.w	fp, #0
 801108a:	bfcc      	ite	gt
 801108c:	465e      	movgt	r6, fp
 801108e:	2601      	movle	r6, #1
 8011090:	443e      	add	r6, r7
 8011092:	f04f 0800 	mov.w	r8, #0
 8011096:	9901      	ldr	r1, [sp, #4]
 8011098:	2201      	movs	r2, #1
 801109a:	4648      	mov	r0, r9
 801109c:	f000 fb58 	bl	8011750 <__lshift>
 80110a0:	4621      	mov	r1, r4
 80110a2:	9001      	str	r0, [sp, #4]
 80110a4:	f000 fbc0 	bl	8011828 <__mcmp>
 80110a8:	2800      	cmp	r0, #0
 80110aa:	dcaf      	bgt.n	801100c <_dtoa_r+0x984>
 80110ac:	d102      	bne.n	80110b4 <_dtoa_r+0xa2c>
 80110ae:	f01a 0f01 	tst.w	sl, #1
 80110b2:	d1ab      	bne.n	801100c <_dtoa_r+0x984>
 80110b4:	4633      	mov	r3, r6
 80110b6:	461e      	mov	r6, r3
 80110b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80110bc:	2a30      	cmp	r2, #48	@ 0x30
 80110be:	d0fa      	beq.n	80110b6 <_dtoa_r+0xa2e>
 80110c0:	e5bb      	b.n	8010c3a <_dtoa_r+0x5b2>
 80110c2:	429f      	cmp	r7, r3
 80110c4:	d1a3      	bne.n	801100e <_dtoa_r+0x986>
 80110c6:	9b04      	ldr	r3, [sp, #16]
 80110c8:	3301      	adds	r3, #1
 80110ca:	9304      	str	r3, [sp, #16]
 80110cc:	2331      	movs	r3, #49	@ 0x31
 80110ce:	703b      	strb	r3, [r7, #0]
 80110d0:	e5b3      	b.n	8010c3a <_dtoa_r+0x5b2>
 80110d2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80110d4:	4f16      	ldr	r7, [pc, #88]	@ (8011130 <_dtoa_r+0xaa8>)
 80110d6:	b11b      	cbz	r3, 80110e0 <_dtoa_r+0xa58>
 80110d8:	f107 0308 	add.w	r3, r7, #8
 80110dc:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80110de:	6013      	str	r3, [r2, #0]
 80110e0:	4638      	mov	r0, r7
 80110e2:	b011      	add	sp, #68	@ 0x44
 80110e4:	ecbd 8b02 	vpop	{d8}
 80110e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110ec:	9b07      	ldr	r3, [sp, #28]
 80110ee:	2b01      	cmp	r3, #1
 80110f0:	f77f ae36 	ble.w	8010d60 <_dtoa_r+0x6d8>
 80110f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80110f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80110f8:	2001      	movs	r0, #1
 80110fa:	e656      	b.n	8010daa <_dtoa_r+0x722>
 80110fc:	f1bb 0f00 	cmp.w	fp, #0
 8011100:	f77f aed7 	ble.w	8010eb2 <_dtoa_r+0x82a>
 8011104:	463e      	mov	r6, r7
 8011106:	9801      	ldr	r0, [sp, #4]
 8011108:	4621      	mov	r1, r4
 801110a:	f7ff fa32 	bl	8010572 <quorem>
 801110e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8011112:	f806 ab01 	strb.w	sl, [r6], #1
 8011116:	1bf2      	subs	r2, r6, r7
 8011118:	4593      	cmp	fp, r2
 801111a:	ddb4      	ble.n	8011086 <_dtoa_r+0x9fe>
 801111c:	9901      	ldr	r1, [sp, #4]
 801111e:	2300      	movs	r3, #0
 8011120:	220a      	movs	r2, #10
 8011122:	4648      	mov	r0, r9
 8011124:	f000 f968 	bl	80113f8 <__multadd>
 8011128:	9001      	str	r0, [sp, #4]
 801112a:	e7ec      	b.n	8011106 <_dtoa_r+0xa7e>
 801112c:	080124e8 	.word	0x080124e8
 8011130:	0801246c 	.word	0x0801246c

08011134 <_free_r>:
 8011134:	b538      	push	{r3, r4, r5, lr}
 8011136:	4605      	mov	r5, r0
 8011138:	2900      	cmp	r1, #0
 801113a:	d041      	beq.n	80111c0 <_free_r+0x8c>
 801113c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011140:	1f0c      	subs	r4, r1, #4
 8011142:	2b00      	cmp	r3, #0
 8011144:	bfb8      	it	lt
 8011146:	18e4      	addlt	r4, r4, r3
 8011148:	f000 f8e8 	bl	801131c <__malloc_lock>
 801114c:	4a1d      	ldr	r2, [pc, #116]	@ (80111c4 <_free_r+0x90>)
 801114e:	6813      	ldr	r3, [r2, #0]
 8011150:	b933      	cbnz	r3, 8011160 <_free_r+0x2c>
 8011152:	6063      	str	r3, [r4, #4]
 8011154:	6014      	str	r4, [r2, #0]
 8011156:	4628      	mov	r0, r5
 8011158:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801115c:	f000 b8e4 	b.w	8011328 <__malloc_unlock>
 8011160:	42a3      	cmp	r3, r4
 8011162:	d908      	bls.n	8011176 <_free_r+0x42>
 8011164:	6820      	ldr	r0, [r4, #0]
 8011166:	1821      	adds	r1, r4, r0
 8011168:	428b      	cmp	r3, r1
 801116a:	bf01      	itttt	eq
 801116c:	6819      	ldreq	r1, [r3, #0]
 801116e:	685b      	ldreq	r3, [r3, #4]
 8011170:	1809      	addeq	r1, r1, r0
 8011172:	6021      	streq	r1, [r4, #0]
 8011174:	e7ed      	b.n	8011152 <_free_r+0x1e>
 8011176:	461a      	mov	r2, r3
 8011178:	685b      	ldr	r3, [r3, #4]
 801117a:	b10b      	cbz	r3, 8011180 <_free_r+0x4c>
 801117c:	42a3      	cmp	r3, r4
 801117e:	d9fa      	bls.n	8011176 <_free_r+0x42>
 8011180:	6811      	ldr	r1, [r2, #0]
 8011182:	1850      	adds	r0, r2, r1
 8011184:	42a0      	cmp	r0, r4
 8011186:	d10b      	bne.n	80111a0 <_free_r+0x6c>
 8011188:	6820      	ldr	r0, [r4, #0]
 801118a:	4401      	add	r1, r0
 801118c:	1850      	adds	r0, r2, r1
 801118e:	4283      	cmp	r3, r0
 8011190:	6011      	str	r1, [r2, #0]
 8011192:	d1e0      	bne.n	8011156 <_free_r+0x22>
 8011194:	6818      	ldr	r0, [r3, #0]
 8011196:	685b      	ldr	r3, [r3, #4]
 8011198:	6053      	str	r3, [r2, #4]
 801119a:	4408      	add	r0, r1
 801119c:	6010      	str	r0, [r2, #0]
 801119e:	e7da      	b.n	8011156 <_free_r+0x22>
 80111a0:	d902      	bls.n	80111a8 <_free_r+0x74>
 80111a2:	230c      	movs	r3, #12
 80111a4:	602b      	str	r3, [r5, #0]
 80111a6:	e7d6      	b.n	8011156 <_free_r+0x22>
 80111a8:	6820      	ldr	r0, [r4, #0]
 80111aa:	1821      	adds	r1, r4, r0
 80111ac:	428b      	cmp	r3, r1
 80111ae:	bf04      	itt	eq
 80111b0:	6819      	ldreq	r1, [r3, #0]
 80111b2:	685b      	ldreq	r3, [r3, #4]
 80111b4:	6063      	str	r3, [r4, #4]
 80111b6:	bf04      	itt	eq
 80111b8:	1809      	addeq	r1, r1, r0
 80111ba:	6021      	streq	r1, [r4, #0]
 80111bc:	6054      	str	r4, [r2, #4]
 80111be:	e7ca      	b.n	8011156 <_free_r+0x22>
 80111c0:	bd38      	pop	{r3, r4, r5, pc}
 80111c2:	bf00      	nop
 80111c4:	24000af8 	.word	0x24000af8

080111c8 <malloc>:
 80111c8:	4b02      	ldr	r3, [pc, #8]	@ (80111d4 <malloc+0xc>)
 80111ca:	4601      	mov	r1, r0
 80111cc:	6818      	ldr	r0, [r3, #0]
 80111ce:	f000 b825 	b.w	801121c <_malloc_r>
 80111d2:	bf00      	nop
 80111d4:	2400001c 	.word	0x2400001c

080111d8 <sbrk_aligned>:
 80111d8:	b570      	push	{r4, r5, r6, lr}
 80111da:	4e0f      	ldr	r6, [pc, #60]	@ (8011218 <sbrk_aligned+0x40>)
 80111dc:	460c      	mov	r4, r1
 80111de:	6831      	ldr	r1, [r6, #0]
 80111e0:	4605      	mov	r5, r0
 80111e2:	b911      	cbnz	r1, 80111ea <sbrk_aligned+0x12>
 80111e4:	f000 fcd4 	bl	8011b90 <_sbrk_r>
 80111e8:	6030      	str	r0, [r6, #0]
 80111ea:	4621      	mov	r1, r4
 80111ec:	4628      	mov	r0, r5
 80111ee:	f000 fccf 	bl	8011b90 <_sbrk_r>
 80111f2:	1c43      	adds	r3, r0, #1
 80111f4:	d103      	bne.n	80111fe <sbrk_aligned+0x26>
 80111f6:	f04f 34ff 	mov.w	r4, #4294967295
 80111fa:	4620      	mov	r0, r4
 80111fc:	bd70      	pop	{r4, r5, r6, pc}
 80111fe:	1cc4      	adds	r4, r0, #3
 8011200:	f024 0403 	bic.w	r4, r4, #3
 8011204:	42a0      	cmp	r0, r4
 8011206:	d0f8      	beq.n	80111fa <sbrk_aligned+0x22>
 8011208:	1a21      	subs	r1, r4, r0
 801120a:	4628      	mov	r0, r5
 801120c:	f000 fcc0 	bl	8011b90 <_sbrk_r>
 8011210:	3001      	adds	r0, #1
 8011212:	d1f2      	bne.n	80111fa <sbrk_aligned+0x22>
 8011214:	e7ef      	b.n	80111f6 <sbrk_aligned+0x1e>
 8011216:	bf00      	nop
 8011218:	24000af4 	.word	0x24000af4

0801121c <_malloc_r>:
 801121c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011220:	1ccd      	adds	r5, r1, #3
 8011222:	f025 0503 	bic.w	r5, r5, #3
 8011226:	3508      	adds	r5, #8
 8011228:	2d0c      	cmp	r5, #12
 801122a:	bf38      	it	cc
 801122c:	250c      	movcc	r5, #12
 801122e:	2d00      	cmp	r5, #0
 8011230:	4606      	mov	r6, r0
 8011232:	db01      	blt.n	8011238 <_malloc_r+0x1c>
 8011234:	42a9      	cmp	r1, r5
 8011236:	d904      	bls.n	8011242 <_malloc_r+0x26>
 8011238:	230c      	movs	r3, #12
 801123a:	6033      	str	r3, [r6, #0]
 801123c:	2000      	movs	r0, #0
 801123e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011242:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011318 <_malloc_r+0xfc>
 8011246:	f000 f869 	bl	801131c <__malloc_lock>
 801124a:	f8d8 3000 	ldr.w	r3, [r8]
 801124e:	461c      	mov	r4, r3
 8011250:	bb44      	cbnz	r4, 80112a4 <_malloc_r+0x88>
 8011252:	4629      	mov	r1, r5
 8011254:	4630      	mov	r0, r6
 8011256:	f7ff ffbf 	bl	80111d8 <sbrk_aligned>
 801125a:	1c43      	adds	r3, r0, #1
 801125c:	4604      	mov	r4, r0
 801125e:	d158      	bne.n	8011312 <_malloc_r+0xf6>
 8011260:	f8d8 4000 	ldr.w	r4, [r8]
 8011264:	4627      	mov	r7, r4
 8011266:	2f00      	cmp	r7, #0
 8011268:	d143      	bne.n	80112f2 <_malloc_r+0xd6>
 801126a:	2c00      	cmp	r4, #0
 801126c:	d04b      	beq.n	8011306 <_malloc_r+0xea>
 801126e:	6823      	ldr	r3, [r4, #0]
 8011270:	4639      	mov	r1, r7
 8011272:	4630      	mov	r0, r6
 8011274:	eb04 0903 	add.w	r9, r4, r3
 8011278:	f000 fc8a 	bl	8011b90 <_sbrk_r>
 801127c:	4581      	cmp	r9, r0
 801127e:	d142      	bne.n	8011306 <_malloc_r+0xea>
 8011280:	6821      	ldr	r1, [r4, #0]
 8011282:	1a6d      	subs	r5, r5, r1
 8011284:	4629      	mov	r1, r5
 8011286:	4630      	mov	r0, r6
 8011288:	f7ff ffa6 	bl	80111d8 <sbrk_aligned>
 801128c:	3001      	adds	r0, #1
 801128e:	d03a      	beq.n	8011306 <_malloc_r+0xea>
 8011290:	6823      	ldr	r3, [r4, #0]
 8011292:	442b      	add	r3, r5
 8011294:	6023      	str	r3, [r4, #0]
 8011296:	f8d8 3000 	ldr.w	r3, [r8]
 801129a:	685a      	ldr	r2, [r3, #4]
 801129c:	bb62      	cbnz	r2, 80112f8 <_malloc_r+0xdc>
 801129e:	f8c8 7000 	str.w	r7, [r8]
 80112a2:	e00f      	b.n	80112c4 <_malloc_r+0xa8>
 80112a4:	6822      	ldr	r2, [r4, #0]
 80112a6:	1b52      	subs	r2, r2, r5
 80112a8:	d420      	bmi.n	80112ec <_malloc_r+0xd0>
 80112aa:	2a0b      	cmp	r2, #11
 80112ac:	d917      	bls.n	80112de <_malloc_r+0xc2>
 80112ae:	1961      	adds	r1, r4, r5
 80112b0:	42a3      	cmp	r3, r4
 80112b2:	6025      	str	r5, [r4, #0]
 80112b4:	bf18      	it	ne
 80112b6:	6059      	strne	r1, [r3, #4]
 80112b8:	6863      	ldr	r3, [r4, #4]
 80112ba:	bf08      	it	eq
 80112bc:	f8c8 1000 	streq.w	r1, [r8]
 80112c0:	5162      	str	r2, [r4, r5]
 80112c2:	604b      	str	r3, [r1, #4]
 80112c4:	4630      	mov	r0, r6
 80112c6:	f000 f82f 	bl	8011328 <__malloc_unlock>
 80112ca:	f104 000b 	add.w	r0, r4, #11
 80112ce:	1d23      	adds	r3, r4, #4
 80112d0:	f020 0007 	bic.w	r0, r0, #7
 80112d4:	1ac2      	subs	r2, r0, r3
 80112d6:	bf1c      	itt	ne
 80112d8:	1a1b      	subne	r3, r3, r0
 80112da:	50a3      	strne	r3, [r4, r2]
 80112dc:	e7af      	b.n	801123e <_malloc_r+0x22>
 80112de:	6862      	ldr	r2, [r4, #4]
 80112e0:	42a3      	cmp	r3, r4
 80112e2:	bf0c      	ite	eq
 80112e4:	f8c8 2000 	streq.w	r2, [r8]
 80112e8:	605a      	strne	r2, [r3, #4]
 80112ea:	e7eb      	b.n	80112c4 <_malloc_r+0xa8>
 80112ec:	4623      	mov	r3, r4
 80112ee:	6864      	ldr	r4, [r4, #4]
 80112f0:	e7ae      	b.n	8011250 <_malloc_r+0x34>
 80112f2:	463c      	mov	r4, r7
 80112f4:	687f      	ldr	r7, [r7, #4]
 80112f6:	e7b6      	b.n	8011266 <_malloc_r+0x4a>
 80112f8:	461a      	mov	r2, r3
 80112fa:	685b      	ldr	r3, [r3, #4]
 80112fc:	42a3      	cmp	r3, r4
 80112fe:	d1fb      	bne.n	80112f8 <_malloc_r+0xdc>
 8011300:	2300      	movs	r3, #0
 8011302:	6053      	str	r3, [r2, #4]
 8011304:	e7de      	b.n	80112c4 <_malloc_r+0xa8>
 8011306:	230c      	movs	r3, #12
 8011308:	6033      	str	r3, [r6, #0]
 801130a:	4630      	mov	r0, r6
 801130c:	f000 f80c 	bl	8011328 <__malloc_unlock>
 8011310:	e794      	b.n	801123c <_malloc_r+0x20>
 8011312:	6005      	str	r5, [r0, #0]
 8011314:	e7d6      	b.n	80112c4 <_malloc_r+0xa8>
 8011316:	bf00      	nop
 8011318:	24000af8 	.word	0x24000af8

0801131c <__malloc_lock>:
 801131c:	4801      	ldr	r0, [pc, #4]	@ (8011324 <__malloc_lock+0x8>)
 801131e:	f7ff b926 	b.w	801056e <__retarget_lock_acquire_recursive>
 8011322:	bf00      	nop
 8011324:	24000af0 	.word	0x24000af0

08011328 <__malloc_unlock>:
 8011328:	4801      	ldr	r0, [pc, #4]	@ (8011330 <__malloc_unlock+0x8>)
 801132a:	f7ff b921 	b.w	8010570 <__retarget_lock_release_recursive>
 801132e:	bf00      	nop
 8011330:	24000af0 	.word	0x24000af0

08011334 <_Balloc>:
 8011334:	b570      	push	{r4, r5, r6, lr}
 8011336:	69c6      	ldr	r6, [r0, #28]
 8011338:	4604      	mov	r4, r0
 801133a:	460d      	mov	r5, r1
 801133c:	b976      	cbnz	r6, 801135c <_Balloc+0x28>
 801133e:	2010      	movs	r0, #16
 8011340:	f7ff ff42 	bl	80111c8 <malloc>
 8011344:	4602      	mov	r2, r0
 8011346:	61e0      	str	r0, [r4, #28]
 8011348:	b920      	cbnz	r0, 8011354 <_Balloc+0x20>
 801134a:	4b18      	ldr	r3, [pc, #96]	@ (80113ac <_Balloc+0x78>)
 801134c:	4818      	ldr	r0, [pc, #96]	@ (80113b0 <_Balloc+0x7c>)
 801134e:	216b      	movs	r1, #107	@ 0x6b
 8011350:	f000 fc3c 	bl	8011bcc <__assert_func>
 8011354:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011358:	6006      	str	r6, [r0, #0]
 801135a:	60c6      	str	r6, [r0, #12]
 801135c:	69e6      	ldr	r6, [r4, #28]
 801135e:	68f3      	ldr	r3, [r6, #12]
 8011360:	b183      	cbz	r3, 8011384 <_Balloc+0x50>
 8011362:	69e3      	ldr	r3, [r4, #28]
 8011364:	68db      	ldr	r3, [r3, #12]
 8011366:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801136a:	b9b8      	cbnz	r0, 801139c <_Balloc+0x68>
 801136c:	2101      	movs	r1, #1
 801136e:	fa01 f605 	lsl.w	r6, r1, r5
 8011372:	1d72      	adds	r2, r6, #5
 8011374:	0092      	lsls	r2, r2, #2
 8011376:	4620      	mov	r0, r4
 8011378:	f000 fc46 	bl	8011c08 <_calloc_r>
 801137c:	b160      	cbz	r0, 8011398 <_Balloc+0x64>
 801137e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011382:	e00e      	b.n	80113a2 <_Balloc+0x6e>
 8011384:	2221      	movs	r2, #33	@ 0x21
 8011386:	2104      	movs	r1, #4
 8011388:	4620      	mov	r0, r4
 801138a:	f000 fc3d 	bl	8011c08 <_calloc_r>
 801138e:	69e3      	ldr	r3, [r4, #28]
 8011390:	60f0      	str	r0, [r6, #12]
 8011392:	68db      	ldr	r3, [r3, #12]
 8011394:	2b00      	cmp	r3, #0
 8011396:	d1e4      	bne.n	8011362 <_Balloc+0x2e>
 8011398:	2000      	movs	r0, #0
 801139a:	bd70      	pop	{r4, r5, r6, pc}
 801139c:	6802      	ldr	r2, [r0, #0]
 801139e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80113a2:	2300      	movs	r3, #0
 80113a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80113a8:	e7f7      	b.n	801139a <_Balloc+0x66>
 80113aa:	bf00      	nop
 80113ac:	08012479 	.word	0x08012479
 80113b0:	080124f9 	.word	0x080124f9

080113b4 <_Bfree>:
 80113b4:	b570      	push	{r4, r5, r6, lr}
 80113b6:	69c6      	ldr	r6, [r0, #28]
 80113b8:	4605      	mov	r5, r0
 80113ba:	460c      	mov	r4, r1
 80113bc:	b976      	cbnz	r6, 80113dc <_Bfree+0x28>
 80113be:	2010      	movs	r0, #16
 80113c0:	f7ff ff02 	bl	80111c8 <malloc>
 80113c4:	4602      	mov	r2, r0
 80113c6:	61e8      	str	r0, [r5, #28]
 80113c8:	b920      	cbnz	r0, 80113d4 <_Bfree+0x20>
 80113ca:	4b09      	ldr	r3, [pc, #36]	@ (80113f0 <_Bfree+0x3c>)
 80113cc:	4809      	ldr	r0, [pc, #36]	@ (80113f4 <_Bfree+0x40>)
 80113ce:	218f      	movs	r1, #143	@ 0x8f
 80113d0:	f000 fbfc 	bl	8011bcc <__assert_func>
 80113d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80113d8:	6006      	str	r6, [r0, #0]
 80113da:	60c6      	str	r6, [r0, #12]
 80113dc:	b13c      	cbz	r4, 80113ee <_Bfree+0x3a>
 80113de:	69eb      	ldr	r3, [r5, #28]
 80113e0:	6862      	ldr	r2, [r4, #4]
 80113e2:	68db      	ldr	r3, [r3, #12]
 80113e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80113e8:	6021      	str	r1, [r4, #0]
 80113ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80113ee:	bd70      	pop	{r4, r5, r6, pc}
 80113f0:	08012479 	.word	0x08012479
 80113f4:	080124f9 	.word	0x080124f9

080113f8 <__multadd>:
 80113f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80113fc:	690d      	ldr	r5, [r1, #16]
 80113fe:	4607      	mov	r7, r0
 8011400:	460c      	mov	r4, r1
 8011402:	461e      	mov	r6, r3
 8011404:	f101 0c14 	add.w	ip, r1, #20
 8011408:	2000      	movs	r0, #0
 801140a:	f8dc 3000 	ldr.w	r3, [ip]
 801140e:	b299      	uxth	r1, r3
 8011410:	fb02 6101 	mla	r1, r2, r1, r6
 8011414:	0c1e      	lsrs	r6, r3, #16
 8011416:	0c0b      	lsrs	r3, r1, #16
 8011418:	fb02 3306 	mla	r3, r2, r6, r3
 801141c:	b289      	uxth	r1, r1
 801141e:	3001      	adds	r0, #1
 8011420:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011424:	4285      	cmp	r5, r0
 8011426:	f84c 1b04 	str.w	r1, [ip], #4
 801142a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801142e:	dcec      	bgt.n	801140a <__multadd+0x12>
 8011430:	b30e      	cbz	r6, 8011476 <__multadd+0x7e>
 8011432:	68a3      	ldr	r3, [r4, #8]
 8011434:	42ab      	cmp	r3, r5
 8011436:	dc19      	bgt.n	801146c <__multadd+0x74>
 8011438:	6861      	ldr	r1, [r4, #4]
 801143a:	4638      	mov	r0, r7
 801143c:	3101      	adds	r1, #1
 801143e:	f7ff ff79 	bl	8011334 <_Balloc>
 8011442:	4680      	mov	r8, r0
 8011444:	b928      	cbnz	r0, 8011452 <__multadd+0x5a>
 8011446:	4602      	mov	r2, r0
 8011448:	4b0c      	ldr	r3, [pc, #48]	@ (801147c <__multadd+0x84>)
 801144a:	480d      	ldr	r0, [pc, #52]	@ (8011480 <__multadd+0x88>)
 801144c:	21ba      	movs	r1, #186	@ 0xba
 801144e:	f000 fbbd 	bl	8011bcc <__assert_func>
 8011452:	6922      	ldr	r2, [r4, #16]
 8011454:	3202      	adds	r2, #2
 8011456:	f104 010c 	add.w	r1, r4, #12
 801145a:	0092      	lsls	r2, r2, #2
 801145c:	300c      	adds	r0, #12
 801145e:	f000 fba7 	bl	8011bb0 <memcpy>
 8011462:	4621      	mov	r1, r4
 8011464:	4638      	mov	r0, r7
 8011466:	f7ff ffa5 	bl	80113b4 <_Bfree>
 801146a:	4644      	mov	r4, r8
 801146c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011470:	3501      	adds	r5, #1
 8011472:	615e      	str	r6, [r3, #20]
 8011474:	6125      	str	r5, [r4, #16]
 8011476:	4620      	mov	r0, r4
 8011478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801147c:	080124e8 	.word	0x080124e8
 8011480:	080124f9 	.word	0x080124f9

08011484 <__hi0bits>:
 8011484:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8011488:	4603      	mov	r3, r0
 801148a:	bf36      	itet	cc
 801148c:	0403      	lslcc	r3, r0, #16
 801148e:	2000      	movcs	r0, #0
 8011490:	2010      	movcc	r0, #16
 8011492:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8011496:	bf3c      	itt	cc
 8011498:	021b      	lslcc	r3, r3, #8
 801149a:	3008      	addcc	r0, #8
 801149c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80114a0:	bf3c      	itt	cc
 80114a2:	011b      	lslcc	r3, r3, #4
 80114a4:	3004      	addcc	r0, #4
 80114a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80114aa:	bf3c      	itt	cc
 80114ac:	009b      	lslcc	r3, r3, #2
 80114ae:	3002      	addcc	r0, #2
 80114b0:	2b00      	cmp	r3, #0
 80114b2:	db05      	blt.n	80114c0 <__hi0bits+0x3c>
 80114b4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80114b8:	f100 0001 	add.w	r0, r0, #1
 80114bc:	bf08      	it	eq
 80114be:	2020      	moveq	r0, #32
 80114c0:	4770      	bx	lr

080114c2 <__lo0bits>:
 80114c2:	6803      	ldr	r3, [r0, #0]
 80114c4:	4602      	mov	r2, r0
 80114c6:	f013 0007 	ands.w	r0, r3, #7
 80114ca:	d00b      	beq.n	80114e4 <__lo0bits+0x22>
 80114cc:	07d9      	lsls	r1, r3, #31
 80114ce:	d421      	bmi.n	8011514 <__lo0bits+0x52>
 80114d0:	0798      	lsls	r0, r3, #30
 80114d2:	bf49      	itett	mi
 80114d4:	085b      	lsrmi	r3, r3, #1
 80114d6:	089b      	lsrpl	r3, r3, #2
 80114d8:	2001      	movmi	r0, #1
 80114da:	6013      	strmi	r3, [r2, #0]
 80114dc:	bf5c      	itt	pl
 80114de:	6013      	strpl	r3, [r2, #0]
 80114e0:	2002      	movpl	r0, #2
 80114e2:	4770      	bx	lr
 80114e4:	b299      	uxth	r1, r3
 80114e6:	b909      	cbnz	r1, 80114ec <__lo0bits+0x2a>
 80114e8:	0c1b      	lsrs	r3, r3, #16
 80114ea:	2010      	movs	r0, #16
 80114ec:	b2d9      	uxtb	r1, r3
 80114ee:	b909      	cbnz	r1, 80114f4 <__lo0bits+0x32>
 80114f0:	3008      	adds	r0, #8
 80114f2:	0a1b      	lsrs	r3, r3, #8
 80114f4:	0719      	lsls	r1, r3, #28
 80114f6:	bf04      	itt	eq
 80114f8:	091b      	lsreq	r3, r3, #4
 80114fa:	3004      	addeq	r0, #4
 80114fc:	0799      	lsls	r1, r3, #30
 80114fe:	bf04      	itt	eq
 8011500:	089b      	lsreq	r3, r3, #2
 8011502:	3002      	addeq	r0, #2
 8011504:	07d9      	lsls	r1, r3, #31
 8011506:	d403      	bmi.n	8011510 <__lo0bits+0x4e>
 8011508:	085b      	lsrs	r3, r3, #1
 801150a:	f100 0001 	add.w	r0, r0, #1
 801150e:	d003      	beq.n	8011518 <__lo0bits+0x56>
 8011510:	6013      	str	r3, [r2, #0]
 8011512:	4770      	bx	lr
 8011514:	2000      	movs	r0, #0
 8011516:	4770      	bx	lr
 8011518:	2020      	movs	r0, #32
 801151a:	4770      	bx	lr

0801151c <__i2b>:
 801151c:	b510      	push	{r4, lr}
 801151e:	460c      	mov	r4, r1
 8011520:	2101      	movs	r1, #1
 8011522:	f7ff ff07 	bl	8011334 <_Balloc>
 8011526:	4602      	mov	r2, r0
 8011528:	b928      	cbnz	r0, 8011536 <__i2b+0x1a>
 801152a:	4b05      	ldr	r3, [pc, #20]	@ (8011540 <__i2b+0x24>)
 801152c:	4805      	ldr	r0, [pc, #20]	@ (8011544 <__i2b+0x28>)
 801152e:	f240 1145 	movw	r1, #325	@ 0x145
 8011532:	f000 fb4b 	bl	8011bcc <__assert_func>
 8011536:	2301      	movs	r3, #1
 8011538:	6144      	str	r4, [r0, #20]
 801153a:	6103      	str	r3, [r0, #16]
 801153c:	bd10      	pop	{r4, pc}
 801153e:	bf00      	nop
 8011540:	080124e8 	.word	0x080124e8
 8011544:	080124f9 	.word	0x080124f9

08011548 <__multiply>:
 8011548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801154c:	4614      	mov	r4, r2
 801154e:	690a      	ldr	r2, [r1, #16]
 8011550:	6923      	ldr	r3, [r4, #16]
 8011552:	429a      	cmp	r2, r3
 8011554:	bfa8      	it	ge
 8011556:	4623      	movge	r3, r4
 8011558:	460f      	mov	r7, r1
 801155a:	bfa4      	itt	ge
 801155c:	460c      	movge	r4, r1
 801155e:	461f      	movge	r7, r3
 8011560:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8011564:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8011568:	68a3      	ldr	r3, [r4, #8]
 801156a:	6861      	ldr	r1, [r4, #4]
 801156c:	eb0a 0609 	add.w	r6, sl, r9
 8011570:	42b3      	cmp	r3, r6
 8011572:	b085      	sub	sp, #20
 8011574:	bfb8      	it	lt
 8011576:	3101      	addlt	r1, #1
 8011578:	f7ff fedc 	bl	8011334 <_Balloc>
 801157c:	b930      	cbnz	r0, 801158c <__multiply+0x44>
 801157e:	4602      	mov	r2, r0
 8011580:	4b44      	ldr	r3, [pc, #272]	@ (8011694 <__multiply+0x14c>)
 8011582:	4845      	ldr	r0, [pc, #276]	@ (8011698 <__multiply+0x150>)
 8011584:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8011588:	f000 fb20 	bl	8011bcc <__assert_func>
 801158c:	f100 0514 	add.w	r5, r0, #20
 8011590:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011594:	462b      	mov	r3, r5
 8011596:	2200      	movs	r2, #0
 8011598:	4543      	cmp	r3, r8
 801159a:	d321      	bcc.n	80115e0 <__multiply+0x98>
 801159c:	f107 0114 	add.w	r1, r7, #20
 80115a0:	f104 0214 	add.w	r2, r4, #20
 80115a4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80115a8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80115ac:	9302      	str	r3, [sp, #8]
 80115ae:	1b13      	subs	r3, r2, r4
 80115b0:	3b15      	subs	r3, #21
 80115b2:	f023 0303 	bic.w	r3, r3, #3
 80115b6:	3304      	adds	r3, #4
 80115b8:	f104 0715 	add.w	r7, r4, #21
 80115bc:	42ba      	cmp	r2, r7
 80115be:	bf38      	it	cc
 80115c0:	2304      	movcc	r3, #4
 80115c2:	9301      	str	r3, [sp, #4]
 80115c4:	9b02      	ldr	r3, [sp, #8]
 80115c6:	9103      	str	r1, [sp, #12]
 80115c8:	428b      	cmp	r3, r1
 80115ca:	d80c      	bhi.n	80115e6 <__multiply+0x9e>
 80115cc:	2e00      	cmp	r6, #0
 80115ce:	dd03      	ble.n	80115d8 <__multiply+0x90>
 80115d0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	d05b      	beq.n	8011690 <__multiply+0x148>
 80115d8:	6106      	str	r6, [r0, #16]
 80115da:	b005      	add	sp, #20
 80115dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115e0:	f843 2b04 	str.w	r2, [r3], #4
 80115e4:	e7d8      	b.n	8011598 <__multiply+0x50>
 80115e6:	f8b1 a000 	ldrh.w	sl, [r1]
 80115ea:	f1ba 0f00 	cmp.w	sl, #0
 80115ee:	d024      	beq.n	801163a <__multiply+0xf2>
 80115f0:	f104 0e14 	add.w	lr, r4, #20
 80115f4:	46a9      	mov	r9, r5
 80115f6:	f04f 0c00 	mov.w	ip, #0
 80115fa:	f85e 7b04 	ldr.w	r7, [lr], #4
 80115fe:	f8d9 3000 	ldr.w	r3, [r9]
 8011602:	fa1f fb87 	uxth.w	fp, r7
 8011606:	b29b      	uxth	r3, r3
 8011608:	fb0a 330b 	mla	r3, sl, fp, r3
 801160c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8011610:	f8d9 7000 	ldr.w	r7, [r9]
 8011614:	4463      	add	r3, ip
 8011616:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801161a:	fb0a c70b 	mla	r7, sl, fp, ip
 801161e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8011622:	b29b      	uxth	r3, r3
 8011624:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011628:	4572      	cmp	r2, lr
 801162a:	f849 3b04 	str.w	r3, [r9], #4
 801162e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8011632:	d8e2      	bhi.n	80115fa <__multiply+0xb2>
 8011634:	9b01      	ldr	r3, [sp, #4]
 8011636:	f845 c003 	str.w	ip, [r5, r3]
 801163a:	9b03      	ldr	r3, [sp, #12]
 801163c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8011640:	3104      	adds	r1, #4
 8011642:	f1b9 0f00 	cmp.w	r9, #0
 8011646:	d021      	beq.n	801168c <__multiply+0x144>
 8011648:	682b      	ldr	r3, [r5, #0]
 801164a:	f104 0c14 	add.w	ip, r4, #20
 801164e:	46ae      	mov	lr, r5
 8011650:	f04f 0a00 	mov.w	sl, #0
 8011654:	f8bc b000 	ldrh.w	fp, [ip]
 8011658:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801165c:	fb09 770b 	mla	r7, r9, fp, r7
 8011660:	4457      	add	r7, sl
 8011662:	b29b      	uxth	r3, r3
 8011664:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011668:	f84e 3b04 	str.w	r3, [lr], #4
 801166c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8011670:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011674:	f8be 3000 	ldrh.w	r3, [lr]
 8011678:	fb09 330a 	mla	r3, r9, sl, r3
 801167c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8011680:	4562      	cmp	r2, ip
 8011682:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011686:	d8e5      	bhi.n	8011654 <__multiply+0x10c>
 8011688:	9f01      	ldr	r7, [sp, #4]
 801168a:	51eb      	str	r3, [r5, r7]
 801168c:	3504      	adds	r5, #4
 801168e:	e799      	b.n	80115c4 <__multiply+0x7c>
 8011690:	3e01      	subs	r6, #1
 8011692:	e79b      	b.n	80115cc <__multiply+0x84>
 8011694:	080124e8 	.word	0x080124e8
 8011698:	080124f9 	.word	0x080124f9

0801169c <__pow5mult>:
 801169c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80116a0:	4615      	mov	r5, r2
 80116a2:	f012 0203 	ands.w	r2, r2, #3
 80116a6:	4607      	mov	r7, r0
 80116a8:	460e      	mov	r6, r1
 80116aa:	d007      	beq.n	80116bc <__pow5mult+0x20>
 80116ac:	4c25      	ldr	r4, [pc, #148]	@ (8011744 <__pow5mult+0xa8>)
 80116ae:	3a01      	subs	r2, #1
 80116b0:	2300      	movs	r3, #0
 80116b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80116b6:	f7ff fe9f 	bl	80113f8 <__multadd>
 80116ba:	4606      	mov	r6, r0
 80116bc:	10ad      	asrs	r5, r5, #2
 80116be:	d03d      	beq.n	801173c <__pow5mult+0xa0>
 80116c0:	69fc      	ldr	r4, [r7, #28]
 80116c2:	b97c      	cbnz	r4, 80116e4 <__pow5mult+0x48>
 80116c4:	2010      	movs	r0, #16
 80116c6:	f7ff fd7f 	bl	80111c8 <malloc>
 80116ca:	4602      	mov	r2, r0
 80116cc:	61f8      	str	r0, [r7, #28]
 80116ce:	b928      	cbnz	r0, 80116dc <__pow5mult+0x40>
 80116d0:	4b1d      	ldr	r3, [pc, #116]	@ (8011748 <__pow5mult+0xac>)
 80116d2:	481e      	ldr	r0, [pc, #120]	@ (801174c <__pow5mult+0xb0>)
 80116d4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80116d8:	f000 fa78 	bl	8011bcc <__assert_func>
 80116dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80116e0:	6004      	str	r4, [r0, #0]
 80116e2:	60c4      	str	r4, [r0, #12]
 80116e4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80116e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80116ec:	b94c      	cbnz	r4, 8011702 <__pow5mult+0x66>
 80116ee:	f240 2171 	movw	r1, #625	@ 0x271
 80116f2:	4638      	mov	r0, r7
 80116f4:	f7ff ff12 	bl	801151c <__i2b>
 80116f8:	2300      	movs	r3, #0
 80116fa:	f8c8 0008 	str.w	r0, [r8, #8]
 80116fe:	4604      	mov	r4, r0
 8011700:	6003      	str	r3, [r0, #0]
 8011702:	f04f 0900 	mov.w	r9, #0
 8011706:	07eb      	lsls	r3, r5, #31
 8011708:	d50a      	bpl.n	8011720 <__pow5mult+0x84>
 801170a:	4631      	mov	r1, r6
 801170c:	4622      	mov	r2, r4
 801170e:	4638      	mov	r0, r7
 8011710:	f7ff ff1a 	bl	8011548 <__multiply>
 8011714:	4631      	mov	r1, r6
 8011716:	4680      	mov	r8, r0
 8011718:	4638      	mov	r0, r7
 801171a:	f7ff fe4b 	bl	80113b4 <_Bfree>
 801171e:	4646      	mov	r6, r8
 8011720:	106d      	asrs	r5, r5, #1
 8011722:	d00b      	beq.n	801173c <__pow5mult+0xa0>
 8011724:	6820      	ldr	r0, [r4, #0]
 8011726:	b938      	cbnz	r0, 8011738 <__pow5mult+0x9c>
 8011728:	4622      	mov	r2, r4
 801172a:	4621      	mov	r1, r4
 801172c:	4638      	mov	r0, r7
 801172e:	f7ff ff0b 	bl	8011548 <__multiply>
 8011732:	6020      	str	r0, [r4, #0]
 8011734:	f8c0 9000 	str.w	r9, [r0]
 8011738:	4604      	mov	r4, r0
 801173a:	e7e4      	b.n	8011706 <__pow5mult+0x6a>
 801173c:	4630      	mov	r0, r6
 801173e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011742:	bf00      	nop
 8011744:	08012554 	.word	0x08012554
 8011748:	08012479 	.word	0x08012479
 801174c:	080124f9 	.word	0x080124f9

08011750 <__lshift>:
 8011750:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011754:	460c      	mov	r4, r1
 8011756:	6849      	ldr	r1, [r1, #4]
 8011758:	6923      	ldr	r3, [r4, #16]
 801175a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801175e:	68a3      	ldr	r3, [r4, #8]
 8011760:	4607      	mov	r7, r0
 8011762:	4691      	mov	r9, r2
 8011764:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011768:	f108 0601 	add.w	r6, r8, #1
 801176c:	42b3      	cmp	r3, r6
 801176e:	db0b      	blt.n	8011788 <__lshift+0x38>
 8011770:	4638      	mov	r0, r7
 8011772:	f7ff fddf 	bl	8011334 <_Balloc>
 8011776:	4605      	mov	r5, r0
 8011778:	b948      	cbnz	r0, 801178e <__lshift+0x3e>
 801177a:	4602      	mov	r2, r0
 801177c:	4b28      	ldr	r3, [pc, #160]	@ (8011820 <__lshift+0xd0>)
 801177e:	4829      	ldr	r0, [pc, #164]	@ (8011824 <__lshift+0xd4>)
 8011780:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8011784:	f000 fa22 	bl	8011bcc <__assert_func>
 8011788:	3101      	adds	r1, #1
 801178a:	005b      	lsls	r3, r3, #1
 801178c:	e7ee      	b.n	801176c <__lshift+0x1c>
 801178e:	2300      	movs	r3, #0
 8011790:	f100 0114 	add.w	r1, r0, #20
 8011794:	f100 0210 	add.w	r2, r0, #16
 8011798:	4618      	mov	r0, r3
 801179a:	4553      	cmp	r3, sl
 801179c:	db33      	blt.n	8011806 <__lshift+0xb6>
 801179e:	6920      	ldr	r0, [r4, #16]
 80117a0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80117a4:	f104 0314 	add.w	r3, r4, #20
 80117a8:	f019 091f 	ands.w	r9, r9, #31
 80117ac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80117b0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80117b4:	d02b      	beq.n	801180e <__lshift+0xbe>
 80117b6:	f1c9 0e20 	rsb	lr, r9, #32
 80117ba:	468a      	mov	sl, r1
 80117bc:	2200      	movs	r2, #0
 80117be:	6818      	ldr	r0, [r3, #0]
 80117c0:	fa00 f009 	lsl.w	r0, r0, r9
 80117c4:	4310      	orrs	r0, r2
 80117c6:	f84a 0b04 	str.w	r0, [sl], #4
 80117ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80117ce:	459c      	cmp	ip, r3
 80117d0:	fa22 f20e 	lsr.w	r2, r2, lr
 80117d4:	d8f3      	bhi.n	80117be <__lshift+0x6e>
 80117d6:	ebac 0304 	sub.w	r3, ip, r4
 80117da:	3b15      	subs	r3, #21
 80117dc:	f023 0303 	bic.w	r3, r3, #3
 80117e0:	3304      	adds	r3, #4
 80117e2:	f104 0015 	add.w	r0, r4, #21
 80117e6:	4584      	cmp	ip, r0
 80117e8:	bf38      	it	cc
 80117ea:	2304      	movcc	r3, #4
 80117ec:	50ca      	str	r2, [r1, r3]
 80117ee:	b10a      	cbz	r2, 80117f4 <__lshift+0xa4>
 80117f0:	f108 0602 	add.w	r6, r8, #2
 80117f4:	3e01      	subs	r6, #1
 80117f6:	4638      	mov	r0, r7
 80117f8:	612e      	str	r6, [r5, #16]
 80117fa:	4621      	mov	r1, r4
 80117fc:	f7ff fdda 	bl	80113b4 <_Bfree>
 8011800:	4628      	mov	r0, r5
 8011802:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011806:	f842 0f04 	str.w	r0, [r2, #4]!
 801180a:	3301      	adds	r3, #1
 801180c:	e7c5      	b.n	801179a <__lshift+0x4a>
 801180e:	3904      	subs	r1, #4
 8011810:	f853 2b04 	ldr.w	r2, [r3], #4
 8011814:	f841 2f04 	str.w	r2, [r1, #4]!
 8011818:	459c      	cmp	ip, r3
 801181a:	d8f9      	bhi.n	8011810 <__lshift+0xc0>
 801181c:	e7ea      	b.n	80117f4 <__lshift+0xa4>
 801181e:	bf00      	nop
 8011820:	080124e8 	.word	0x080124e8
 8011824:	080124f9 	.word	0x080124f9

08011828 <__mcmp>:
 8011828:	690a      	ldr	r2, [r1, #16]
 801182a:	4603      	mov	r3, r0
 801182c:	6900      	ldr	r0, [r0, #16]
 801182e:	1a80      	subs	r0, r0, r2
 8011830:	b530      	push	{r4, r5, lr}
 8011832:	d10e      	bne.n	8011852 <__mcmp+0x2a>
 8011834:	3314      	adds	r3, #20
 8011836:	3114      	adds	r1, #20
 8011838:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801183c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8011840:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011844:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011848:	4295      	cmp	r5, r2
 801184a:	d003      	beq.n	8011854 <__mcmp+0x2c>
 801184c:	d205      	bcs.n	801185a <__mcmp+0x32>
 801184e:	f04f 30ff 	mov.w	r0, #4294967295
 8011852:	bd30      	pop	{r4, r5, pc}
 8011854:	42a3      	cmp	r3, r4
 8011856:	d3f3      	bcc.n	8011840 <__mcmp+0x18>
 8011858:	e7fb      	b.n	8011852 <__mcmp+0x2a>
 801185a:	2001      	movs	r0, #1
 801185c:	e7f9      	b.n	8011852 <__mcmp+0x2a>
	...

08011860 <__mdiff>:
 8011860:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011864:	4689      	mov	r9, r1
 8011866:	4606      	mov	r6, r0
 8011868:	4611      	mov	r1, r2
 801186a:	4648      	mov	r0, r9
 801186c:	4614      	mov	r4, r2
 801186e:	f7ff ffdb 	bl	8011828 <__mcmp>
 8011872:	1e05      	subs	r5, r0, #0
 8011874:	d112      	bne.n	801189c <__mdiff+0x3c>
 8011876:	4629      	mov	r1, r5
 8011878:	4630      	mov	r0, r6
 801187a:	f7ff fd5b 	bl	8011334 <_Balloc>
 801187e:	4602      	mov	r2, r0
 8011880:	b928      	cbnz	r0, 801188e <__mdiff+0x2e>
 8011882:	4b3f      	ldr	r3, [pc, #252]	@ (8011980 <__mdiff+0x120>)
 8011884:	f240 2137 	movw	r1, #567	@ 0x237
 8011888:	483e      	ldr	r0, [pc, #248]	@ (8011984 <__mdiff+0x124>)
 801188a:	f000 f99f 	bl	8011bcc <__assert_func>
 801188e:	2301      	movs	r3, #1
 8011890:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011894:	4610      	mov	r0, r2
 8011896:	b003      	add	sp, #12
 8011898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801189c:	bfbc      	itt	lt
 801189e:	464b      	movlt	r3, r9
 80118a0:	46a1      	movlt	r9, r4
 80118a2:	4630      	mov	r0, r6
 80118a4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80118a8:	bfba      	itte	lt
 80118aa:	461c      	movlt	r4, r3
 80118ac:	2501      	movlt	r5, #1
 80118ae:	2500      	movge	r5, #0
 80118b0:	f7ff fd40 	bl	8011334 <_Balloc>
 80118b4:	4602      	mov	r2, r0
 80118b6:	b918      	cbnz	r0, 80118c0 <__mdiff+0x60>
 80118b8:	4b31      	ldr	r3, [pc, #196]	@ (8011980 <__mdiff+0x120>)
 80118ba:	f240 2145 	movw	r1, #581	@ 0x245
 80118be:	e7e3      	b.n	8011888 <__mdiff+0x28>
 80118c0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80118c4:	6926      	ldr	r6, [r4, #16]
 80118c6:	60c5      	str	r5, [r0, #12]
 80118c8:	f109 0310 	add.w	r3, r9, #16
 80118cc:	f109 0514 	add.w	r5, r9, #20
 80118d0:	f104 0e14 	add.w	lr, r4, #20
 80118d4:	f100 0b14 	add.w	fp, r0, #20
 80118d8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80118dc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80118e0:	9301      	str	r3, [sp, #4]
 80118e2:	46d9      	mov	r9, fp
 80118e4:	f04f 0c00 	mov.w	ip, #0
 80118e8:	9b01      	ldr	r3, [sp, #4]
 80118ea:	f85e 0b04 	ldr.w	r0, [lr], #4
 80118ee:	f853 af04 	ldr.w	sl, [r3, #4]!
 80118f2:	9301      	str	r3, [sp, #4]
 80118f4:	fa1f f38a 	uxth.w	r3, sl
 80118f8:	4619      	mov	r1, r3
 80118fa:	b283      	uxth	r3, r0
 80118fc:	1acb      	subs	r3, r1, r3
 80118fe:	0c00      	lsrs	r0, r0, #16
 8011900:	4463      	add	r3, ip
 8011902:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8011906:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801190a:	b29b      	uxth	r3, r3
 801190c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8011910:	4576      	cmp	r6, lr
 8011912:	f849 3b04 	str.w	r3, [r9], #4
 8011916:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801191a:	d8e5      	bhi.n	80118e8 <__mdiff+0x88>
 801191c:	1b33      	subs	r3, r6, r4
 801191e:	3b15      	subs	r3, #21
 8011920:	f023 0303 	bic.w	r3, r3, #3
 8011924:	3415      	adds	r4, #21
 8011926:	3304      	adds	r3, #4
 8011928:	42a6      	cmp	r6, r4
 801192a:	bf38      	it	cc
 801192c:	2304      	movcc	r3, #4
 801192e:	441d      	add	r5, r3
 8011930:	445b      	add	r3, fp
 8011932:	461e      	mov	r6, r3
 8011934:	462c      	mov	r4, r5
 8011936:	4544      	cmp	r4, r8
 8011938:	d30e      	bcc.n	8011958 <__mdiff+0xf8>
 801193a:	f108 0103 	add.w	r1, r8, #3
 801193e:	1b49      	subs	r1, r1, r5
 8011940:	f021 0103 	bic.w	r1, r1, #3
 8011944:	3d03      	subs	r5, #3
 8011946:	45a8      	cmp	r8, r5
 8011948:	bf38      	it	cc
 801194a:	2100      	movcc	r1, #0
 801194c:	440b      	add	r3, r1
 801194e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011952:	b191      	cbz	r1, 801197a <__mdiff+0x11a>
 8011954:	6117      	str	r7, [r2, #16]
 8011956:	e79d      	b.n	8011894 <__mdiff+0x34>
 8011958:	f854 1b04 	ldr.w	r1, [r4], #4
 801195c:	46e6      	mov	lr, ip
 801195e:	0c08      	lsrs	r0, r1, #16
 8011960:	fa1c fc81 	uxtah	ip, ip, r1
 8011964:	4471      	add	r1, lr
 8011966:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801196a:	b289      	uxth	r1, r1
 801196c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011970:	f846 1b04 	str.w	r1, [r6], #4
 8011974:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011978:	e7dd      	b.n	8011936 <__mdiff+0xd6>
 801197a:	3f01      	subs	r7, #1
 801197c:	e7e7      	b.n	801194e <__mdiff+0xee>
 801197e:	bf00      	nop
 8011980:	080124e8 	.word	0x080124e8
 8011984:	080124f9 	.word	0x080124f9

08011988 <__d2b>:
 8011988:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801198c:	460f      	mov	r7, r1
 801198e:	2101      	movs	r1, #1
 8011990:	ec59 8b10 	vmov	r8, r9, d0
 8011994:	4616      	mov	r6, r2
 8011996:	f7ff fccd 	bl	8011334 <_Balloc>
 801199a:	4604      	mov	r4, r0
 801199c:	b930      	cbnz	r0, 80119ac <__d2b+0x24>
 801199e:	4602      	mov	r2, r0
 80119a0:	4b23      	ldr	r3, [pc, #140]	@ (8011a30 <__d2b+0xa8>)
 80119a2:	4824      	ldr	r0, [pc, #144]	@ (8011a34 <__d2b+0xac>)
 80119a4:	f240 310f 	movw	r1, #783	@ 0x30f
 80119a8:	f000 f910 	bl	8011bcc <__assert_func>
 80119ac:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80119b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80119b4:	b10d      	cbz	r5, 80119ba <__d2b+0x32>
 80119b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80119ba:	9301      	str	r3, [sp, #4]
 80119bc:	f1b8 0300 	subs.w	r3, r8, #0
 80119c0:	d023      	beq.n	8011a0a <__d2b+0x82>
 80119c2:	4668      	mov	r0, sp
 80119c4:	9300      	str	r3, [sp, #0]
 80119c6:	f7ff fd7c 	bl	80114c2 <__lo0bits>
 80119ca:	e9dd 1200 	ldrd	r1, r2, [sp]
 80119ce:	b1d0      	cbz	r0, 8011a06 <__d2b+0x7e>
 80119d0:	f1c0 0320 	rsb	r3, r0, #32
 80119d4:	fa02 f303 	lsl.w	r3, r2, r3
 80119d8:	430b      	orrs	r3, r1
 80119da:	40c2      	lsrs	r2, r0
 80119dc:	6163      	str	r3, [r4, #20]
 80119de:	9201      	str	r2, [sp, #4]
 80119e0:	9b01      	ldr	r3, [sp, #4]
 80119e2:	61a3      	str	r3, [r4, #24]
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	bf0c      	ite	eq
 80119e8:	2201      	moveq	r2, #1
 80119ea:	2202      	movne	r2, #2
 80119ec:	6122      	str	r2, [r4, #16]
 80119ee:	b1a5      	cbz	r5, 8011a1a <__d2b+0x92>
 80119f0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80119f4:	4405      	add	r5, r0
 80119f6:	603d      	str	r5, [r7, #0]
 80119f8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80119fc:	6030      	str	r0, [r6, #0]
 80119fe:	4620      	mov	r0, r4
 8011a00:	b003      	add	sp, #12
 8011a02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011a06:	6161      	str	r1, [r4, #20]
 8011a08:	e7ea      	b.n	80119e0 <__d2b+0x58>
 8011a0a:	a801      	add	r0, sp, #4
 8011a0c:	f7ff fd59 	bl	80114c2 <__lo0bits>
 8011a10:	9b01      	ldr	r3, [sp, #4]
 8011a12:	6163      	str	r3, [r4, #20]
 8011a14:	3020      	adds	r0, #32
 8011a16:	2201      	movs	r2, #1
 8011a18:	e7e8      	b.n	80119ec <__d2b+0x64>
 8011a1a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011a1e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8011a22:	6038      	str	r0, [r7, #0]
 8011a24:	6918      	ldr	r0, [r3, #16]
 8011a26:	f7ff fd2d 	bl	8011484 <__hi0bits>
 8011a2a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011a2e:	e7e5      	b.n	80119fc <__d2b+0x74>
 8011a30:	080124e8 	.word	0x080124e8
 8011a34:	080124f9 	.word	0x080124f9

08011a38 <__sflush_r>:
 8011a38:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011a3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a40:	0716      	lsls	r6, r2, #28
 8011a42:	4605      	mov	r5, r0
 8011a44:	460c      	mov	r4, r1
 8011a46:	d454      	bmi.n	8011af2 <__sflush_r+0xba>
 8011a48:	684b      	ldr	r3, [r1, #4]
 8011a4a:	2b00      	cmp	r3, #0
 8011a4c:	dc02      	bgt.n	8011a54 <__sflush_r+0x1c>
 8011a4e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	dd48      	ble.n	8011ae6 <__sflush_r+0xae>
 8011a54:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011a56:	2e00      	cmp	r6, #0
 8011a58:	d045      	beq.n	8011ae6 <__sflush_r+0xae>
 8011a5a:	2300      	movs	r3, #0
 8011a5c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011a60:	682f      	ldr	r7, [r5, #0]
 8011a62:	6a21      	ldr	r1, [r4, #32]
 8011a64:	602b      	str	r3, [r5, #0]
 8011a66:	d030      	beq.n	8011aca <__sflush_r+0x92>
 8011a68:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011a6a:	89a3      	ldrh	r3, [r4, #12]
 8011a6c:	0759      	lsls	r1, r3, #29
 8011a6e:	d505      	bpl.n	8011a7c <__sflush_r+0x44>
 8011a70:	6863      	ldr	r3, [r4, #4]
 8011a72:	1ad2      	subs	r2, r2, r3
 8011a74:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011a76:	b10b      	cbz	r3, 8011a7c <__sflush_r+0x44>
 8011a78:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011a7a:	1ad2      	subs	r2, r2, r3
 8011a7c:	2300      	movs	r3, #0
 8011a7e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011a80:	6a21      	ldr	r1, [r4, #32]
 8011a82:	4628      	mov	r0, r5
 8011a84:	47b0      	blx	r6
 8011a86:	1c43      	adds	r3, r0, #1
 8011a88:	89a3      	ldrh	r3, [r4, #12]
 8011a8a:	d106      	bne.n	8011a9a <__sflush_r+0x62>
 8011a8c:	6829      	ldr	r1, [r5, #0]
 8011a8e:	291d      	cmp	r1, #29
 8011a90:	d82b      	bhi.n	8011aea <__sflush_r+0xb2>
 8011a92:	4a2a      	ldr	r2, [pc, #168]	@ (8011b3c <__sflush_r+0x104>)
 8011a94:	410a      	asrs	r2, r1
 8011a96:	07d6      	lsls	r6, r2, #31
 8011a98:	d427      	bmi.n	8011aea <__sflush_r+0xb2>
 8011a9a:	2200      	movs	r2, #0
 8011a9c:	6062      	str	r2, [r4, #4]
 8011a9e:	04d9      	lsls	r1, r3, #19
 8011aa0:	6922      	ldr	r2, [r4, #16]
 8011aa2:	6022      	str	r2, [r4, #0]
 8011aa4:	d504      	bpl.n	8011ab0 <__sflush_r+0x78>
 8011aa6:	1c42      	adds	r2, r0, #1
 8011aa8:	d101      	bne.n	8011aae <__sflush_r+0x76>
 8011aaa:	682b      	ldr	r3, [r5, #0]
 8011aac:	b903      	cbnz	r3, 8011ab0 <__sflush_r+0x78>
 8011aae:	6560      	str	r0, [r4, #84]	@ 0x54
 8011ab0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011ab2:	602f      	str	r7, [r5, #0]
 8011ab4:	b1b9      	cbz	r1, 8011ae6 <__sflush_r+0xae>
 8011ab6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011aba:	4299      	cmp	r1, r3
 8011abc:	d002      	beq.n	8011ac4 <__sflush_r+0x8c>
 8011abe:	4628      	mov	r0, r5
 8011ac0:	f7ff fb38 	bl	8011134 <_free_r>
 8011ac4:	2300      	movs	r3, #0
 8011ac6:	6363      	str	r3, [r4, #52]	@ 0x34
 8011ac8:	e00d      	b.n	8011ae6 <__sflush_r+0xae>
 8011aca:	2301      	movs	r3, #1
 8011acc:	4628      	mov	r0, r5
 8011ace:	47b0      	blx	r6
 8011ad0:	4602      	mov	r2, r0
 8011ad2:	1c50      	adds	r0, r2, #1
 8011ad4:	d1c9      	bne.n	8011a6a <__sflush_r+0x32>
 8011ad6:	682b      	ldr	r3, [r5, #0]
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d0c6      	beq.n	8011a6a <__sflush_r+0x32>
 8011adc:	2b1d      	cmp	r3, #29
 8011ade:	d001      	beq.n	8011ae4 <__sflush_r+0xac>
 8011ae0:	2b16      	cmp	r3, #22
 8011ae2:	d11e      	bne.n	8011b22 <__sflush_r+0xea>
 8011ae4:	602f      	str	r7, [r5, #0]
 8011ae6:	2000      	movs	r0, #0
 8011ae8:	e022      	b.n	8011b30 <__sflush_r+0xf8>
 8011aea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011aee:	b21b      	sxth	r3, r3
 8011af0:	e01b      	b.n	8011b2a <__sflush_r+0xf2>
 8011af2:	690f      	ldr	r7, [r1, #16]
 8011af4:	2f00      	cmp	r7, #0
 8011af6:	d0f6      	beq.n	8011ae6 <__sflush_r+0xae>
 8011af8:	0793      	lsls	r3, r2, #30
 8011afa:	680e      	ldr	r6, [r1, #0]
 8011afc:	bf08      	it	eq
 8011afe:	694b      	ldreq	r3, [r1, #20]
 8011b00:	600f      	str	r7, [r1, #0]
 8011b02:	bf18      	it	ne
 8011b04:	2300      	movne	r3, #0
 8011b06:	eba6 0807 	sub.w	r8, r6, r7
 8011b0a:	608b      	str	r3, [r1, #8]
 8011b0c:	f1b8 0f00 	cmp.w	r8, #0
 8011b10:	dde9      	ble.n	8011ae6 <__sflush_r+0xae>
 8011b12:	6a21      	ldr	r1, [r4, #32]
 8011b14:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011b16:	4643      	mov	r3, r8
 8011b18:	463a      	mov	r2, r7
 8011b1a:	4628      	mov	r0, r5
 8011b1c:	47b0      	blx	r6
 8011b1e:	2800      	cmp	r0, #0
 8011b20:	dc08      	bgt.n	8011b34 <__sflush_r+0xfc>
 8011b22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011b26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011b2a:	81a3      	strh	r3, [r4, #12]
 8011b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8011b30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b34:	4407      	add	r7, r0
 8011b36:	eba8 0800 	sub.w	r8, r8, r0
 8011b3a:	e7e7      	b.n	8011b0c <__sflush_r+0xd4>
 8011b3c:	dfbffffe 	.word	0xdfbffffe

08011b40 <_fflush_r>:
 8011b40:	b538      	push	{r3, r4, r5, lr}
 8011b42:	690b      	ldr	r3, [r1, #16]
 8011b44:	4605      	mov	r5, r0
 8011b46:	460c      	mov	r4, r1
 8011b48:	b913      	cbnz	r3, 8011b50 <_fflush_r+0x10>
 8011b4a:	2500      	movs	r5, #0
 8011b4c:	4628      	mov	r0, r5
 8011b4e:	bd38      	pop	{r3, r4, r5, pc}
 8011b50:	b118      	cbz	r0, 8011b5a <_fflush_r+0x1a>
 8011b52:	6a03      	ldr	r3, [r0, #32]
 8011b54:	b90b      	cbnz	r3, 8011b5a <_fflush_r+0x1a>
 8011b56:	f7fe fc13 	bl	8010380 <__sinit>
 8011b5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011b5e:	2b00      	cmp	r3, #0
 8011b60:	d0f3      	beq.n	8011b4a <_fflush_r+0xa>
 8011b62:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011b64:	07d0      	lsls	r0, r2, #31
 8011b66:	d404      	bmi.n	8011b72 <_fflush_r+0x32>
 8011b68:	0599      	lsls	r1, r3, #22
 8011b6a:	d402      	bmi.n	8011b72 <_fflush_r+0x32>
 8011b6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011b6e:	f7fe fcfe 	bl	801056e <__retarget_lock_acquire_recursive>
 8011b72:	4628      	mov	r0, r5
 8011b74:	4621      	mov	r1, r4
 8011b76:	f7ff ff5f 	bl	8011a38 <__sflush_r>
 8011b7a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011b7c:	07da      	lsls	r2, r3, #31
 8011b7e:	4605      	mov	r5, r0
 8011b80:	d4e4      	bmi.n	8011b4c <_fflush_r+0xc>
 8011b82:	89a3      	ldrh	r3, [r4, #12]
 8011b84:	059b      	lsls	r3, r3, #22
 8011b86:	d4e1      	bmi.n	8011b4c <_fflush_r+0xc>
 8011b88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011b8a:	f7fe fcf1 	bl	8010570 <__retarget_lock_release_recursive>
 8011b8e:	e7dd      	b.n	8011b4c <_fflush_r+0xc>

08011b90 <_sbrk_r>:
 8011b90:	b538      	push	{r3, r4, r5, lr}
 8011b92:	4d06      	ldr	r5, [pc, #24]	@ (8011bac <_sbrk_r+0x1c>)
 8011b94:	2300      	movs	r3, #0
 8011b96:	4604      	mov	r4, r0
 8011b98:	4608      	mov	r0, r1
 8011b9a:	602b      	str	r3, [r5, #0]
 8011b9c:	f7f0 fb8e 	bl	80022bc <_sbrk>
 8011ba0:	1c43      	adds	r3, r0, #1
 8011ba2:	d102      	bne.n	8011baa <_sbrk_r+0x1a>
 8011ba4:	682b      	ldr	r3, [r5, #0]
 8011ba6:	b103      	cbz	r3, 8011baa <_sbrk_r+0x1a>
 8011ba8:	6023      	str	r3, [r4, #0]
 8011baa:	bd38      	pop	{r3, r4, r5, pc}
 8011bac:	24000aec 	.word	0x24000aec

08011bb0 <memcpy>:
 8011bb0:	440a      	add	r2, r1
 8011bb2:	4291      	cmp	r1, r2
 8011bb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8011bb8:	d100      	bne.n	8011bbc <memcpy+0xc>
 8011bba:	4770      	bx	lr
 8011bbc:	b510      	push	{r4, lr}
 8011bbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011bc2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011bc6:	4291      	cmp	r1, r2
 8011bc8:	d1f9      	bne.n	8011bbe <memcpy+0xe>
 8011bca:	bd10      	pop	{r4, pc}

08011bcc <__assert_func>:
 8011bcc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011bce:	4614      	mov	r4, r2
 8011bd0:	461a      	mov	r2, r3
 8011bd2:	4b09      	ldr	r3, [pc, #36]	@ (8011bf8 <__assert_func+0x2c>)
 8011bd4:	681b      	ldr	r3, [r3, #0]
 8011bd6:	4605      	mov	r5, r0
 8011bd8:	68d8      	ldr	r0, [r3, #12]
 8011bda:	b954      	cbnz	r4, 8011bf2 <__assert_func+0x26>
 8011bdc:	4b07      	ldr	r3, [pc, #28]	@ (8011bfc <__assert_func+0x30>)
 8011bde:	461c      	mov	r4, r3
 8011be0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011be4:	9100      	str	r1, [sp, #0]
 8011be6:	462b      	mov	r3, r5
 8011be8:	4905      	ldr	r1, [pc, #20]	@ (8011c00 <__assert_func+0x34>)
 8011bea:	f000 f841 	bl	8011c70 <fiprintf>
 8011bee:	f000 f851 	bl	8011c94 <abort>
 8011bf2:	4b04      	ldr	r3, [pc, #16]	@ (8011c04 <__assert_func+0x38>)
 8011bf4:	e7f4      	b.n	8011be0 <__assert_func+0x14>
 8011bf6:	bf00      	nop
 8011bf8:	2400001c 	.word	0x2400001c
 8011bfc:	08012695 	.word	0x08012695
 8011c00:	08012667 	.word	0x08012667
 8011c04:	0801265a 	.word	0x0801265a

08011c08 <_calloc_r>:
 8011c08:	b570      	push	{r4, r5, r6, lr}
 8011c0a:	fba1 5402 	umull	r5, r4, r1, r2
 8011c0e:	b93c      	cbnz	r4, 8011c20 <_calloc_r+0x18>
 8011c10:	4629      	mov	r1, r5
 8011c12:	f7ff fb03 	bl	801121c <_malloc_r>
 8011c16:	4606      	mov	r6, r0
 8011c18:	b928      	cbnz	r0, 8011c26 <_calloc_r+0x1e>
 8011c1a:	2600      	movs	r6, #0
 8011c1c:	4630      	mov	r0, r6
 8011c1e:	bd70      	pop	{r4, r5, r6, pc}
 8011c20:	220c      	movs	r2, #12
 8011c22:	6002      	str	r2, [r0, #0]
 8011c24:	e7f9      	b.n	8011c1a <_calloc_r+0x12>
 8011c26:	462a      	mov	r2, r5
 8011c28:	4621      	mov	r1, r4
 8011c2a:	f7fe fc22 	bl	8010472 <memset>
 8011c2e:	e7f5      	b.n	8011c1c <_calloc_r+0x14>

08011c30 <__ascii_mbtowc>:
 8011c30:	b082      	sub	sp, #8
 8011c32:	b901      	cbnz	r1, 8011c36 <__ascii_mbtowc+0x6>
 8011c34:	a901      	add	r1, sp, #4
 8011c36:	b142      	cbz	r2, 8011c4a <__ascii_mbtowc+0x1a>
 8011c38:	b14b      	cbz	r3, 8011c4e <__ascii_mbtowc+0x1e>
 8011c3a:	7813      	ldrb	r3, [r2, #0]
 8011c3c:	600b      	str	r3, [r1, #0]
 8011c3e:	7812      	ldrb	r2, [r2, #0]
 8011c40:	1e10      	subs	r0, r2, #0
 8011c42:	bf18      	it	ne
 8011c44:	2001      	movne	r0, #1
 8011c46:	b002      	add	sp, #8
 8011c48:	4770      	bx	lr
 8011c4a:	4610      	mov	r0, r2
 8011c4c:	e7fb      	b.n	8011c46 <__ascii_mbtowc+0x16>
 8011c4e:	f06f 0001 	mvn.w	r0, #1
 8011c52:	e7f8      	b.n	8011c46 <__ascii_mbtowc+0x16>

08011c54 <__ascii_wctomb>:
 8011c54:	4603      	mov	r3, r0
 8011c56:	4608      	mov	r0, r1
 8011c58:	b141      	cbz	r1, 8011c6c <__ascii_wctomb+0x18>
 8011c5a:	2aff      	cmp	r2, #255	@ 0xff
 8011c5c:	d904      	bls.n	8011c68 <__ascii_wctomb+0x14>
 8011c5e:	228a      	movs	r2, #138	@ 0x8a
 8011c60:	601a      	str	r2, [r3, #0]
 8011c62:	f04f 30ff 	mov.w	r0, #4294967295
 8011c66:	4770      	bx	lr
 8011c68:	700a      	strb	r2, [r1, #0]
 8011c6a:	2001      	movs	r0, #1
 8011c6c:	4770      	bx	lr
	...

08011c70 <fiprintf>:
 8011c70:	b40e      	push	{r1, r2, r3}
 8011c72:	b503      	push	{r0, r1, lr}
 8011c74:	4601      	mov	r1, r0
 8011c76:	ab03      	add	r3, sp, #12
 8011c78:	4805      	ldr	r0, [pc, #20]	@ (8011c90 <fiprintf+0x20>)
 8011c7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8011c7e:	6800      	ldr	r0, [r0, #0]
 8011c80:	9301      	str	r3, [sp, #4]
 8011c82:	f000 f837 	bl	8011cf4 <_vfiprintf_r>
 8011c86:	b002      	add	sp, #8
 8011c88:	f85d eb04 	ldr.w	lr, [sp], #4
 8011c8c:	b003      	add	sp, #12
 8011c8e:	4770      	bx	lr
 8011c90:	2400001c 	.word	0x2400001c

08011c94 <abort>:
 8011c94:	b508      	push	{r3, lr}
 8011c96:	2006      	movs	r0, #6
 8011c98:	f000 fa00 	bl	801209c <raise>
 8011c9c:	2001      	movs	r0, #1
 8011c9e:	f7f0 fa95 	bl	80021cc <_exit>

08011ca2 <__sfputc_r>:
 8011ca2:	6893      	ldr	r3, [r2, #8]
 8011ca4:	3b01      	subs	r3, #1
 8011ca6:	2b00      	cmp	r3, #0
 8011ca8:	b410      	push	{r4}
 8011caa:	6093      	str	r3, [r2, #8]
 8011cac:	da08      	bge.n	8011cc0 <__sfputc_r+0x1e>
 8011cae:	6994      	ldr	r4, [r2, #24]
 8011cb0:	42a3      	cmp	r3, r4
 8011cb2:	db01      	blt.n	8011cb8 <__sfputc_r+0x16>
 8011cb4:	290a      	cmp	r1, #10
 8011cb6:	d103      	bne.n	8011cc0 <__sfputc_r+0x1e>
 8011cb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011cbc:	f000 b932 	b.w	8011f24 <__swbuf_r>
 8011cc0:	6813      	ldr	r3, [r2, #0]
 8011cc2:	1c58      	adds	r0, r3, #1
 8011cc4:	6010      	str	r0, [r2, #0]
 8011cc6:	7019      	strb	r1, [r3, #0]
 8011cc8:	4608      	mov	r0, r1
 8011cca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011cce:	4770      	bx	lr

08011cd0 <__sfputs_r>:
 8011cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011cd2:	4606      	mov	r6, r0
 8011cd4:	460f      	mov	r7, r1
 8011cd6:	4614      	mov	r4, r2
 8011cd8:	18d5      	adds	r5, r2, r3
 8011cda:	42ac      	cmp	r4, r5
 8011cdc:	d101      	bne.n	8011ce2 <__sfputs_r+0x12>
 8011cde:	2000      	movs	r0, #0
 8011ce0:	e007      	b.n	8011cf2 <__sfputs_r+0x22>
 8011ce2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011ce6:	463a      	mov	r2, r7
 8011ce8:	4630      	mov	r0, r6
 8011cea:	f7ff ffda 	bl	8011ca2 <__sfputc_r>
 8011cee:	1c43      	adds	r3, r0, #1
 8011cf0:	d1f3      	bne.n	8011cda <__sfputs_r+0xa>
 8011cf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011cf4 <_vfiprintf_r>:
 8011cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011cf8:	460d      	mov	r5, r1
 8011cfa:	b09d      	sub	sp, #116	@ 0x74
 8011cfc:	4614      	mov	r4, r2
 8011cfe:	4698      	mov	r8, r3
 8011d00:	4606      	mov	r6, r0
 8011d02:	b118      	cbz	r0, 8011d0c <_vfiprintf_r+0x18>
 8011d04:	6a03      	ldr	r3, [r0, #32]
 8011d06:	b90b      	cbnz	r3, 8011d0c <_vfiprintf_r+0x18>
 8011d08:	f7fe fb3a 	bl	8010380 <__sinit>
 8011d0c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011d0e:	07d9      	lsls	r1, r3, #31
 8011d10:	d405      	bmi.n	8011d1e <_vfiprintf_r+0x2a>
 8011d12:	89ab      	ldrh	r3, [r5, #12]
 8011d14:	059a      	lsls	r2, r3, #22
 8011d16:	d402      	bmi.n	8011d1e <_vfiprintf_r+0x2a>
 8011d18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011d1a:	f7fe fc28 	bl	801056e <__retarget_lock_acquire_recursive>
 8011d1e:	89ab      	ldrh	r3, [r5, #12]
 8011d20:	071b      	lsls	r3, r3, #28
 8011d22:	d501      	bpl.n	8011d28 <_vfiprintf_r+0x34>
 8011d24:	692b      	ldr	r3, [r5, #16]
 8011d26:	b99b      	cbnz	r3, 8011d50 <_vfiprintf_r+0x5c>
 8011d28:	4629      	mov	r1, r5
 8011d2a:	4630      	mov	r0, r6
 8011d2c:	f000 f938 	bl	8011fa0 <__swsetup_r>
 8011d30:	b170      	cbz	r0, 8011d50 <_vfiprintf_r+0x5c>
 8011d32:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011d34:	07dc      	lsls	r4, r3, #31
 8011d36:	d504      	bpl.n	8011d42 <_vfiprintf_r+0x4e>
 8011d38:	f04f 30ff 	mov.w	r0, #4294967295
 8011d3c:	b01d      	add	sp, #116	@ 0x74
 8011d3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d42:	89ab      	ldrh	r3, [r5, #12]
 8011d44:	0598      	lsls	r0, r3, #22
 8011d46:	d4f7      	bmi.n	8011d38 <_vfiprintf_r+0x44>
 8011d48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011d4a:	f7fe fc11 	bl	8010570 <__retarget_lock_release_recursive>
 8011d4e:	e7f3      	b.n	8011d38 <_vfiprintf_r+0x44>
 8011d50:	2300      	movs	r3, #0
 8011d52:	9309      	str	r3, [sp, #36]	@ 0x24
 8011d54:	2320      	movs	r3, #32
 8011d56:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011d5a:	f8cd 800c 	str.w	r8, [sp, #12]
 8011d5e:	2330      	movs	r3, #48	@ 0x30
 8011d60:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8011f10 <_vfiprintf_r+0x21c>
 8011d64:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011d68:	f04f 0901 	mov.w	r9, #1
 8011d6c:	4623      	mov	r3, r4
 8011d6e:	469a      	mov	sl, r3
 8011d70:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011d74:	b10a      	cbz	r2, 8011d7a <_vfiprintf_r+0x86>
 8011d76:	2a25      	cmp	r2, #37	@ 0x25
 8011d78:	d1f9      	bne.n	8011d6e <_vfiprintf_r+0x7a>
 8011d7a:	ebba 0b04 	subs.w	fp, sl, r4
 8011d7e:	d00b      	beq.n	8011d98 <_vfiprintf_r+0xa4>
 8011d80:	465b      	mov	r3, fp
 8011d82:	4622      	mov	r2, r4
 8011d84:	4629      	mov	r1, r5
 8011d86:	4630      	mov	r0, r6
 8011d88:	f7ff ffa2 	bl	8011cd0 <__sfputs_r>
 8011d8c:	3001      	adds	r0, #1
 8011d8e:	f000 80a7 	beq.w	8011ee0 <_vfiprintf_r+0x1ec>
 8011d92:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011d94:	445a      	add	r2, fp
 8011d96:	9209      	str	r2, [sp, #36]	@ 0x24
 8011d98:	f89a 3000 	ldrb.w	r3, [sl]
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	f000 809f 	beq.w	8011ee0 <_vfiprintf_r+0x1ec>
 8011da2:	2300      	movs	r3, #0
 8011da4:	f04f 32ff 	mov.w	r2, #4294967295
 8011da8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011dac:	f10a 0a01 	add.w	sl, sl, #1
 8011db0:	9304      	str	r3, [sp, #16]
 8011db2:	9307      	str	r3, [sp, #28]
 8011db4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011db8:	931a      	str	r3, [sp, #104]	@ 0x68
 8011dba:	4654      	mov	r4, sl
 8011dbc:	2205      	movs	r2, #5
 8011dbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011dc2:	4853      	ldr	r0, [pc, #332]	@ (8011f10 <_vfiprintf_r+0x21c>)
 8011dc4:	f7ee fa8c 	bl	80002e0 <memchr>
 8011dc8:	9a04      	ldr	r2, [sp, #16]
 8011dca:	b9d8      	cbnz	r0, 8011e04 <_vfiprintf_r+0x110>
 8011dcc:	06d1      	lsls	r1, r2, #27
 8011dce:	bf44      	itt	mi
 8011dd0:	2320      	movmi	r3, #32
 8011dd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011dd6:	0713      	lsls	r3, r2, #28
 8011dd8:	bf44      	itt	mi
 8011dda:	232b      	movmi	r3, #43	@ 0x2b
 8011ddc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011de0:	f89a 3000 	ldrb.w	r3, [sl]
 8011de4:	2b2a      	cmp	r3, #42	@ 0x2a
 8011de6:	d015      	beq.n	8011e14 <_vfiprintf_r+0x120>
 8011de8:	9a07      	ldr	r2, [sp, #28]
 8011dea:	4654      	mov	r4, sl
 8011dec:	2000      	movs	r0, #0
 8011dee:	f04f 0c0a 	mov.w	ip, #10
 8011df2:	4621      	mov	r1, r4
 8011df4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011df8:	3b30      	subs	r3, #48	@ 0x30
 8011dfa:	2b09      	cmp	r3, #9
 8011dfc:	d94b      	bls.n	8011e96 <_vfiprintf_r+0x1a2>
 8011dfe:	b1b0      	cbz	r0, 8011e2e <_vfiprintf_r+0x13a>
 8011e00:	9207      	str	r2, [sp, #28]
 8011e02:	e014      	b.n	8011e2e <_vfiprintf_r+0x13a>
 8011e04:	eba0 0308 	sub.w	r3, r0, r8
 8011e08:	fa09 f303 	lsl.w	r3, r9, r3
 8011e0c:	4313      	orrs	r3, r2
 8011e0e:	9304      	str	r3, [sp, #16]
 8011e10:	46a2      	mov	sl, r4
 8011e12:	e7d2      	b.n	8011dba <_vfiprintf_r+0xc6>
 8011e14:	9b03      	ldr	r3, [sp, #12]
 8011e16:	1d19      	adds	r1, r3, #4
 8011e18:	681b      	ldr	r3, [r3, #0]
 8011e1a:	9103      	str	r1, [sp, #12]
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	bfbb      	ittet	lt
 8011e20:	425b      	neglt	r3, r3
 8011e22:	f042 0202 	orrlt.w	r2, r2, #2
 8011e26:	9307      	strge	r3, [sp, #28]
 8011e28:	9307      	strlt	r3, [sp, #28]
 8011e2a:	bfb8      	it	lt
 8011e2c:	9204      	strlt	r2, [sp, #16]
 8011e2e:	7823      	ldrb	r3, [r4, #0]
 8011e30:	2b2e      	cmp	r3, #46	@ 0x2e
 8011e32:	d10a      	bne.n	8011e4a <_vfiprintf_r+0x156>
 8011e34:	7863      	ldrb	r3, [r4, #1]
 8011e36:	2b2a      	cmp	r3, #42	@ 0x2a
 8011e38:	d132      	bne.n	8011ea0 <_vfiprintf_r+0x1ac>
 8011e3a:	9b03      	ldr	r3, [sp, #12]
 8011e3c:	1d1a      	adds	r2, r3, #4
 8011e3e:	681b      	ldr	r3, [r3, #0]
 8011e40:	9203      	str	r2, [sp, #12]
 8011e42:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011e46:	3402      	adds	r4, #2
 8011e48:	9305      	str	r3, [sp, #20]
 8011e4a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011f20 <_vfiprintf_r+0x22c>
 8011e4e:	7821      	ldrb	r1, [r4, #0]
 8011e50:	2203      	movs	r2, #3
 8011e52:	4650      	mov	r0, sl
 8011e54:	f7ee fa44 	bl	80002e0 <memchr>
 8011e58:	b138      	cbz	r0, 8011e6a <_vfiprintf_r+0x176>
 8011e5a:	9b04      	ldr	r3, [sp, #16]
 8011e5c:	eba0 000a 	sub.w	r0, r0, sl
 8011e60:	2240      	movs	r2, #64	@ 0x40
 8011e62:	4082      	lsls	r2, r0
 8011e64:	4313      	orrs	r3, r2
 8011e66:	3401      	adds	r4, #1
 8011e68:	9304      	str	r3, [sp, #16]
 8011e6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011e6e:	4829      	ldr	r0, [pc, #164]	@ (8011f14 <_vfiprintf_r+0x220>)
 8011e70:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011e74:	2206      	movs	r2, #6
 8011e76:	f7ee fa33 	bl	80002e0 <memchr>
 8011e7a:	2800      	cmp	r0, #0
 8011e7c:	d03f      	beq.n	8011efe <_vfiprintf_r+0x20a>
 8011e7e:	4b26      	ldr	r3, [pc, #152]	@ (8011f18 <_vfiprintf_r+0x224>)
 8011e80:	bb1b      	cbnz	r3, 8011eca <_vfiprintf_r+0x1d6>
 8011e82:	9b03      	ldr	r3, [sp, #12]
 8011e84:	3307      	adds	r3, #7
 8011e86:	f023 0307 	bic.w	r3, r3, #7
 8011e8a:	3308      	adds	r3, #8
 8011e8c:	9303      	str	r3, [sp, #12]
 8011e8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011e90:	443b      	add	r3, r7
 8011e92:	9309      	str	r3, [sp, #36]	@ 0x24
 8011e94:	e76a      	b.n	8011d6c <_vfiprintf_r+0x78>
 8011e96:	fb0c 3202 	mla	r2, ip, r2, r3
 8011e9a:	460c      	mov	r4, r1
 8011e9c:	2001      	movs	r0, #1
 8011e9e:	e7a8      	b.n	8011df2 <_vfiprintf_r+0xfe>
 8011ea0:	2300      	movs	r3, #0
 8011ea2:	3401      	adds	r4, #1
 8011ea4:	9305      	str	r3, [sp, #20]
 8011ea6:	4619      	mov	r1, r3
 8011ea8:	f04f 0c0a 	mov.w	ip, #10
 8011eac:	4620      	mov	r0, r4
 8011eae:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011eb2:	3a30      	subs	r2, #48	@ 0x30
 8011eb4:	2a09      	cmp	r2, #9
 8011eb6:	d903      	bls.n	8011ec0 <_vfiprintf_r+0x1cc>
 8011eb8:	2b00      	cmp	r3, #0
 8011eba:	d0c6      	beq.n	8011e4a <_vfiprintf_r+0x156>
 8011ebc:	9105      	str	r1, [sp, #20]
 8011ebe:	e7c4      	b.n	8011e4a <_vfiprintf_r+0x156>
 8011ec0:	fb0c 2101 	mla	r1, ip, r1, r2
 8011ec4:	4604      	mov	r4, r0
 8011ec6:	2301      	movs	r3, #1
 8011ec8:	e7f0      	b.n	8011eac <_vfiprintf_r+0x1b8>
 8011eca:	ab03      	add	r3, sp, #12
 8011ecc:	9300      	str	r3, [sp, #0]
 8011ece:	462a      	mov	r2, r5
 8011ed0:	4b12      	ldr	r3, [pc, #72]	@ (8011f1c <_vfiprintf_r+0x228>)
 8011ed2:	a904      	add	r1, sp, #16
 8011ed4:	4630      	mov	r0, r6
 8011ed6:	f7fd fe1f 	bl	800fb18 <_printf_float>
 8011eda:	4607      	mov	r7, r0
 8011edc:	1c78      	adds	r0, r7, #1
 8011ede:	d1d6      	bne.n	8011e8e <_vfiprintf_r+0x19a>
 8011ee0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011ee2:	07d9      	lsls	r1, r3, #31
 8011ee4:	d405      	bmi.n	8011ef2 <_vfiprintf_r+0x1fe>
 8011ee6:	89ab      	ldrh	r3, [r5, #12]
 8011ee8:	059a      	lsls	r2, r3, #22
 8011eea:	d402      	bmi.n	8011ef2 <_vfiprintf_r+0x1fe>
 8011eec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011eee:	f7fe fb3f 	bl	8010570 <__retarget_lock_release_recursive>
 8011ef2:	89ab      	ldrh	r3, [r5, #12]
 8011ef4:	065b      	lsls	r3, r3, #25
 8011ef6:	f53f af1f 	bmi.w	8011d38 <_vfiprintf_r+0x44>
 8011efa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011efc:	e71e      	b.n	8011d3c <_vfiprintf_r+0x48>
 8011efe:	ab03      	add	r3, sp, #12
 8011f00:	9300      	str	r3, [sp, #0]
 8011f02:	462a      	mov	r2, r5
 8011f04:	4b05      	ldr	r3, [pc, #20]	@ (8011f1c <_vfiprintf_r+0x228>)
 8011f06:	a904      	add	r1, sp, #16
 8011f08:	4630      	mov	r0, r6
 8011f0a:	f7fe f88d 	bl	8010028 <_printf_i>
 8011f0e:	e7e4      	b.n	8011eda <_vfiprintf_r+0x1e6>
 8011f10:	08012797 	.word	0x08012797
 8011f14:	080127a1 	.word	0x080127a1
 8011f18:	0800fb19 	.word	0x0800fb19
 8011f1c:	08011cd1 	.word	0x08011cd1
 8011f20:	0801279d 	.word	0x0801279d

08011f24 <__swbuf_r>:
 8011f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f26:	460e      	mov	r6, r1
 8011f28:	4614      	mov	r4, r2
 8011f2a:	4605      	mov	r5, r0
 8011f2c:	b118      	cbz	r0, 8011f36 <__swbuf_r+0x12>
 8011f2e:	6a03      	ldr	r3, [r0, #32]
 8011f30:	b90b      	cbnz	r3, 8011f36 <__swbuf_r+0x12>
 8011f32:	f7fe fa25 	bl	8010380 <__sinit>
 8011f36:	69a3      	ldr	r3, [r4, #24]
 8011f38:	60a3      	str	r3, [r4, #8]
 8011f3a:	89a3      	ldrh	r3, [r4, #12]
 8011f3c:	071a      	lsls	r2, r3, #28
 8011f3e:	d501      	bpl.n	8011f44 <__swbuf_r+0x20>
 8011f40:	6923      	ldr	r3, [r4, #16]
 8011f42:	b943      	cbnz	r3, 8011f56 <__swbuf_r+0x32>
 8011f44:	4621      	mov	r1, r4
 8011f46:	4628      	mov	r0, r5
 8011f48:	f000 f82a 	bl	8011fa0 <__swsetup_r>
 8011f4c:	b118      	cbz	r0, 8011f56 <__swbuf_r+0x32>
 8011f4e:	f04f 37ff 	mov.w	r7, #4294967295
 8011f52:	4638      	mov	r0, r7
 8011f54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011f56:	6823      	ldr	r3, [r4, #0]
 8011f58:	6922      	ldr	r2, [r4, #16]
 8011f5a:	1a98      	subs	r0, r3, r2
 8011f5c:	6963      	ldr	r3, [r4, #20]
 8011f5e:	b2f6      	uxtb	r6, r6
 8011f60:	4283      	cmp	r3, r0
 8011f62:	4637      	mov	r7, r6
 8011f64:	dc05      	bgt.n	8011f72 <__swbuf_r+0x4e>
 8011f66:	4621      	mov	r1, r4
 8011f68:	4628      	mov	r0, r5
 8011f6a:	f7ff fde9 	bl	8011b40 <_fflush_r>
 8011f6e:	2800      	cmp	r0, #0
 8011f70:	d1ed      	bne.n	8011f4e <__swbuf_r+0x2a>
 8011f72:	68a3      	ldr	r3, [r4, #8]
 8011f74:	3b01      	subs	r3, #1
 8011f76:	60a3      	str	r3, [r4, #8]
 8011f78:	6823      	ldr	r3, [r4, #0]
 8011f7a:	1c5a      	adds	r2, r3, #1
 8011f7c:	6022      	str	r2, [r4, #0]
 8011f7e:	701e      	strb	r6, [r3, #0]
 8011f80:	6962      	ldr	r2, [r4, #20]
 8011f82:	1c43      	adds	r3, r0, #1
 8011f84:	429a      	cmp	r2, r3
 8011f86:	d004      	beq.n	8011f92 <__swbuf_r+0x6e>
 8011f88:	89a3      	ldrh	r3, [r4, #12]
 8011f8a:	07db      	lsls	r3, r3, #31
 8011f8c:	d5e1      	bpl.n	8011f52 <__swbuf_r+0x2e>
 8011f8e:	2e0a      	cmp	r6, #10
 8011f90:	d1df      	bne.n	8011f52 <__swbuf_r+0x2e>
 8011f92:	4621      	mov	r1, r4
 8011f94:	4628      	mov	r0, r5
 8011f96:	f7ff fdd3 	bl	8011b40 <_fflush_r>
 8011f9a:	2800      	cmp	r0, #0
 8011f9c:	d0d9      	beq.n	8011f52 <__swbuf_r+0x2e>
 8011f9e:	e7d6      	b.n	8011f4e <__swbuf_r+0x2a>

08011fa0 <__swsetup_r>:
 8011fa0:	b538      	push	{r3, r4, r5, lr}
 8011fa2:	4b29      	ldr	r3, [pc, #164]	@ (8012048 <__swsetup_r+0xa8>)
 8011fa4:	4605      	mov	r5, r0
 8011fa6:	6818      	ldr	r0, [r3, #0]
 8011fa8:	460c      	mov	r4, r1
 8011faa:	b118      	cbz	r0, 8011fb4 <__swsetup_r+0x14>
 8011fac:	6a03      	ldr	r3, [r0, #32]
 8011fae:	b90b      	cbnz	r3, 8011fb4 <__swsetup_r+0x14>
 8011fb0:	f7fe f9e6 	bl	8010380 <__sinit>
 8011fb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011fb8:	0719      	lsls	r1, r3, #28
 8011fba:	d422      	bmi.n	8012002 <__swsetup_r+0x62>
 8011fbc:	06da      	lsls	r2, r3, #27
 8011fbe:	d407      	bmi.n	8011fd0 <__swsetup_r+0x30>
 8011fc0:	2209      	movs	r2, #9
 8011fc2:	602a      	str	r2, [r5, #0]
 8011fc4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011fc8:	81a3      	strh	r3, [r4, #12]
 8011fca:	f04f 30ff 	mov.w	r0, #4294967295
 8011fce:	e033      	b.n	8012038 <__swsetup_r+0x98>
 8011fd0:	0758      	lsls	r0, r3, #29
 8011fd2:	d512      	bpl.n	8011ffa <__swsetup_r+0x5a>
 8011fd4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011fd6:	b141      	cbz	r1, 8011fea <__swsetup_r+0x4a>
 8011fd8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011fdc:	4299      	cmp	r1, r3
 8011fde:	d002      	beq.n	8011fe6 <__swsetup_r+0x46>
 8011fe0:	4628      	mov	r0, r5
 8011fe2:	f7ff f8a7 	bl	8011134 <_free_r>
 8011fe6:	2300      	movs	r3, #0
 8011fe8:	6363      	str	r3, [r4, #52]	@ 0x34
 8011fea:	89a3      	ldrh	r3, [r4, #12]
 8011fec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011ff0:	81a3      	strh	r3, [r4, #12]
 8011ff2:	2300      	movs	r3, #0
 8011ff4:	6063      	str	r3, [r4, #4]
 8011ff6:	6923      	ldr	r3, [r4, #16]
 8011ff8:	6023      	str	r3, [r4, #0]
 8011ffa:	89a3      	ldrh	r3, [r4, #12]
 8011ffc:	f043 0308 	orr.w	r3, r3, #8
 8012000:	81a3      	strh	r3, [r4, #12]
 8012002:	6923      	ldr	r3, [r4, #16]
 8012004:	b94b      	cbnz	r3, 801201a <__swsetup_r+0x7a>
 8012006:	89a3      	ldrh	r3, [r4, #12]
 8012008:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801200c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012010:	d003      	beq.n	801201a <__swsetup_r+0x7a>
 8012012:	4621      	mov	r1, r4
 8012014:	4628      	mov	r0, r5
 8012016:	f000 f883 	bl	8012120 <__smakebuf_r>
 801201a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801201e:	f013 0201 	ands.w	r2, r3, #1
 8012022:	d00a      	beq.n	801203a <__swsetup_r+0x9a>
 8012024:	2200      	movs	r2, #0
 8012026:	60a2      	str	r2, [r4, #8]
 8012028:	6962      	ldr	r2, [r4, #20]
 801202a:	4252      	negs	r2, r2
 801202c:	61a2      	str	r2, [r4, #24]
 801202e:	6922      	ldr	r2, [r4, #16]
 8012030:	b942      	cbnz	r2, 8012044 <__swsetup_r+0xa4>
 8012032:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8012036:	d1c5      	bne.n	8011fc4 <__swsetup_r+0x24>
 8012038:	bd38      	pop	{r3, r4, r5, pc}
 801203a:	0799      	lsls	r1, r3, #30
 801203c:	bf58      	it	pl
 801203e:	6962      	ldrpl	r2, [r4, #20]
 8012040:	60a2      	str	r2, [r4, #8]
 8012042:	e7f4      	b.n	801202e <__swsetup_r+0x8e>
 8012044:	2000      	movs	r0, #0
 8012046:	e7f7      	b.n	8012038 <__swsetup_r+0x98>
 8012048:	2400001c 	.word	0x2400001c

0801204c <_raise_r>:
 801204c:	291f      	cmp	r1, #31
 801204e:	b538      	push	{r3, r4, r5, lr}
 8012050:	4605      	mov	r5, r0
 8012052:	460c      	mov	r4, r1
 8012054:	d904      	bls.n	8012060 <_raise_r+0x14>
 8012056:	2316      	movs	r3, #22
 8012058:	6003      	str	r3, [r0, #0]
 801205a:	f04f 30ff 	mov.w	r0, #4294967295
 801205e:	bd38      	pop	{r3, r4, r5, pc}
 8012060:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8012062:	b112      	cbz	r2, 801206a <_raise_r+0x1e>
 8012064:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012068:	b94b      	cbnz	r3, 801207e <_raise_r+0x32>
 801206a:	4628      	mov	r0, r5
 801206c:	f000 f830 	bl	80120d0 <_getpid_r>
 8012070:	4622      	mov	r2, r4
 8012072:	4601      	mov	r1, r0
 8012074:	4628      	mov	r0, r5
 8012076:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801207a:	f000 b817 	b.w	80120ac <_kill_r>
 801207e:	2b01      	cmp	r3, #1
 8012080:	d00a      	beq.n	8012098 <_raise_r+0x4c>
 8012082:	1c59      	adds	r1, r3, #1
 8012084:	d103      	bne.n	801208e <_raise_r+0x42>
 8012086:	2316      	movs	r3, #22
 8012088:	6003      	str	r3, [r0, #0]
 801208a:	2001      	movs	r0, #1
 801208c:	e7e7      	b.n	801205e <_raise_r+0x12>
 801208e:	2100      	movs	r1, #0
 8012090:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8012094:	4620      	mov	r0, r4
 8012096:	4798      	blx	r3
 8012098:	2000      	movs	r0, #0
 801209a:	e7e0      	b.n	801205e <_raise_r+0x12>

0801209c <raise>:
 801209c:	4b02      	ldr	r3, [pc, #8]	@ (80120a8 <raise+0xc>)
 801209e:	4601      	mov	r1, r0
 80120a0:	6818      	ldr	r0, [r3, #0]
 80120a2:	f7ff bfd3 	b.w	801204c <_raise_r>
 80120a6:	bf00      	nop
 80120a8:	2400001c 	.word	0x2400001c

080120ac <_kill_r>:
 80120ac:	b538      	push	{r3, r4, r5, lr}
 80120ae:	4d07      	ldr	r5, [pc, #28]	@ (80120cc <_kill_r+0x20>)
 80120b0:	2300      	movs	r3, #0
 80120b2:	4604      	mov	r4, r0
 80120b4:	4608      	mov	r0, r1
 80120b6:	4611      	mov	r1, r2
 80120b8:	602b      	str	r3, [r5, #0]
 80120ba:	f7f0 f877 	bl	80021ac <_kill>
 80120be:	1c43      	adds	r3, r0, #1
 80120c0:	d102      	bne.n	80120c8 <_kill_r+0x1c>
 80120c2:	682b      	ldr	r3, [r5, #0]
 80120c4:	b103      	cbz	r3, 80120c8 <_kill_r+0x1c>
 80120c6:	6023      	str	r3, [r4, #0]
 80120c8:	bd38      	pop	{r3, r4, r5, pc}
 80120ca:	bf00      	nop
 80120cc:	24000aec 	.word	0x24000aec

080120d0 <_getpid_r>:
 80120d0:	f7f0 b864 	b.w	800219c <_getpid>

080120d4 <__swhatbuf_r>:
 80120d4:	b570      	push	{r4, r5, r6, lr}
 80120d6:	460c      	mov	r4, r1
 80120d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80120dc:	2900      	cmp	r1, #0
 80120de:	b096      	sub	sp, #88	@ 0x58
 80120e0:	4615      	mov	r5, r2
 80120e2:	461e      	mov	r6, r3
 80120e4:	da0d      	bge.n	8012102 <__swhatbuf_r+0x2e>
 80120e6:	89a3      	ldrh	r3, [r4, #12]
 80120e8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80120ec:	f04f 0100 	mov.w	r1, #0
 80120f0:	bf14      	ite	ne
 80120f2:	2340      	movne	r3, #64	@ 0x40
 80120f4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80120f8:	2000      	movs	r0, #0
 80120fa:	6031      	str	r1, [r6, #0]
 80120fc:	602b      	str	r3, [r5, #0]
 80120fe:	b016      	add	sp, #88	@ 0x58
 8012100:	bd70      	pop	{r4, r5, r6, pc}
 8012102:	466a      	mov	r2, sp
 8012104:	f000 f848 	bl	8012198 <_fstat_r>
 8012108:	2800      	cmp	r0, #0
 801210a:	dbec      	blt.n	80120e6 <__swhatbuf_r+0x12>
 801210c:	9901      	ldr	r1, [sp, #4]
 801210e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8012112:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8012116:	4259      	negs	r1, r3
 8012118:	4159      	adcs	r1, r3
 801211a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801211e:	e7eb      	b.n	80120f8 <__swhatbuf_r+0x24>

08012120 <__smakebuf_r>:
 8012120:	898b      	ldrh	r3, [r1, #12]
 8012122:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012124:	079d      	lsls	r5, r3, #30
 8012126:	4606      	mov	r6, r0
 8012128:	460c      	mov	r4, r1
 801212a:	d507      	bpl.n	801213c <__smakebuf_r+0x1c>
 801212c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012130:	6023      	str	r3, [r4, #0]
 8012132:	6123      	str	r3, [r4, #16]
 8012134:	2301      	movs	r3, #1
 8012136:	6163      	str	r3, [r4, #20]
 8012138:	b003      	add	sp, #12
 801213a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801213c:	ab01      	add	r3, sp, #4
 801213e:	466a      	mov	r2, sp
 8012140:	f7ff ffc8 	bl	80120d4 <__swhatbuf_r>
 8012144:	9f00      	ldr	r7, [sp, #0]
 8012146:	4605      	mov	r5, r0
 8012148:	4639      	mov	r1, r7
 801214a:	4630      	mov	r0, r6
 801214c:	f7ff f866 	bl	801121c <_malloc_r>
 8012150:	b948      	cbnz	r0, 8012166 <__smakebuf_r+0x46>
 8012152:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012156:	059a      	lsls	r2, r3, #22
 8012158:	d4ee      	bmi.n	8012138 <__smakebuf_r+0x18>
 801215a:	f023 0303 	bic.w	r3, r3, #3
 801215e:	f043 0302 	orr.w	r3, r3, #2
 8012162:	81a3      	strh	r3, [r4, #12]
 8012164:	e7e2      	b.n	801212c <__smakebuf_r+0xc>
 8012166:	89a3      	ldrh	r3, [r4, #12]
 8012168:	6020      	str	r0, [r4, #0]
 801216a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801216e:	81a3      	strh	r3, [r4, #12]
 8012170:	9b01      	ldr	r3, [sp, #4]
 8012172:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8012176:	b15b      	cbz	r3, 8012190 <__smakebuf_r+0x70>
 8012178:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801217c:	4630      	mov	r0, r6
 801217e:	f000 f81d 	bl	80121bc <_isatty_r>
 8012182:	b128      	cbz	r0, 8012190 <__smakebuf_r+0x70>
 8012184:	89a3      	ldrh	r3, [r4, #12]
 8012186:	f023 0303 	bic.w	r3, r3, #3
 801218a:	f043 0301 	orr.w	r3, r3, #1
 801218e:	81a3      	strh	r3, [r4, #12]
 8012190:	89a3      	ldrh	r3, [r4, #12]
 8012192:	431d      	orrs	r5, r3
 8012194:	81a5      	strh	r5, [r4, #12]
 8012196:	e7cf      	b.n	8012138 <__smakebuf_r+0x18>

08012198 <_fstat_r>:
 8012198:	b538      	push	{r3, r4, r5, lr}
 801219a:	4d07      	ldr	r5, [pc, #28]	@ (80121b8 <_fstat_r+0x20>)
 801219c:	2300      	movs	r3, #0
 801219e:	4604      	mov	r4, r0
 80121a0:	4608      	mov	r0, r1
 80121a2:	4611      	mov	r1, r2
 80121a4:	602b      	str	r3, [r5, #0]
 80121a6:	f7f0 f861 	bl	800226c <_fstat>
 80121aa:	1c43      	adds	r3, r0, #1
 80121ac:	d102      	bne.n	80121b4 <_fstat_r+0x1c>
 80121ae:	682b      	ldr	r3, [r5, #0]
 80121b0:	b103      	cbz	r3, 80121b4 <_fstat_r+0x1c>
 80121b2:	6023      	str	r3, [r4, #0]
 80121b4:	bd38      	pop	{r3, r4, r5, pc}
 80121b6:	bf00      	nop
 80121b8:	24000aec 	.word	0x24000aec

080121bc <_isatty_r>:
 80121bc:	b538      	push	{r3, r4, r5, lr}
 80121be:	4d06      	ldr	r5, [pc, #24]	@ (80121d8 <_isatty_r+0x1c>)
 80121c0:	2300      	movs	r3, #0
 80121c2:	4604      	mov	r4, r0
 80121c4:	4608      	mov	r0, r1
 80121c6:	602b      	str	r3, [r5, #0]
 80121c8:	f7f0 f860 	bl	800228c <_isatty>
 80121cc:	1c43      	adds	r3, r0, #1
 80121ce:	d102      	bne.n	80121d6 <_isatty_r+0x1a>
 80121d0:	682b      	ldr	r3, [r5, #0]
 80121d2:	b103      	cbz	r3, 80121d6 <_isatty_r+0x1a>
 80121d4:	6023      	str	r3, [r4, #0]
 80121d6:	bd38      	pop	{r3, r4, r5, pc}
 80121d8:	24000aec 	.word	0x24000aec

080121dc <_init>:
 80121dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80121de:	bf00      	nop
 80121e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80121e2:	bc08      	pop	{r3}
 80121e4:	469e      	mov	lr, r3
 80121e6:	4770      	bx	lr

080121e8 <_fini>:
 80121e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80121ea:	bf00      	nop
 80121ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80121ee:	bc08      	pop	{r3}
 80121f0:	469e      	mov	lr, r3
 80121f2:	4770      	bx	lr
