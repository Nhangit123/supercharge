
suppercharge.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e63c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b0  0800e8e0  0800e8e0  0000f8e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ee90  0800ee90  0000fe90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ee98  0800ee98  0000fe98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800ee9c  0800ee9c  0000fe9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001d8  24000000  0800eea0  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000564  240001d8  0800f078  000101d8  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400073c  0800f078  0001073c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000101d8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00021c53  00000000  00000000  00010206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000039cf  00000000  00000000  00031e59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001aa8  00000000  00000000  00035828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000014dc  00000000  00000000  000372d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00005254  00000000  00000000  000387ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000266db  00000000  00000000  0003da00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001807fa  00000000  00000000  000640db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001e48d5  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008158  00000000  00000000  001e4918  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000004a  00000000  00000000  001eca70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001d8 	.word	0x240001d8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800e8c4 	.word	0x0800e8c4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001dc 	.word	0x240001dc
 80002dc:	0800e8c4 	.word	0x0800e8c4

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
//	uint8_t data_write = 0xAB;
  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000684:	f000 fc10 	bl	8000ea8 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000688:	f001 fa2a 	bl	8001ae0 <HAL_Init>
//   app_init();

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800068c:	f000 f814 	bl	80006b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000690:	f000 fb34 	bl	8000cfc <MX_GPIO_Init>
  MX_DMA_Init();
 8000694:	f000 fb12 	bl	8000cbc <MX_DMA_Init>
  MX_TIM4_Init();
 8000698:	f000 fa2a 	bl	8000af0 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 800069c:	f000 fac2 	bl	8000c24 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80006a0:	f000 f93c 	bl	800091c <MX_I2C1_Init>
  MX_SPI3_Init();
 80006a4:	f000 f97a 	bl	800099c <MX_SPI3_Init>
  MX_ADC1_Init();
 80006a8:	f000 f884 	bl	80007b4 <MX_ADC1_Init>
  MX_TIM1_Init();
 80006ac:	f000 f9cc 	bl	8000a48 <MX_TIM1_Init>
  MX_UART7_Init();
 80006b0:	f000 fa6c 	bl	8000b8c <MX_UART7_Init>
//HAL_Delay(1000);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006b4:	bf00      	nop
 80006b6:	e7fd      	b.n	80006b4 <main+0x34>

080006b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b09c      	sub	sp, #112	@ 0x70
 80006bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006c2:	224c      	movs	r2, #76	@ 0x4c
 80006c4:	2100      	movs	r1, #0
 80006c6:	4618      	mov	r0, r3
 80006c8:	f00c fa47 	bl	800cb5a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006cc:	1d3b      	adds	r3, r7, #4
 80006ce:	2220      	movs	r2, #32
 80006d0:	2100      	movs	r1, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f00c fa41 	bl	800cb5a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80006d8:	2002      	movs	r0, #2
 80006da:	f005 f9e5 	bl	8005aa8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006de:	2300      	movs	r3, #0
 80006e0:	603b      	str	r3, [r7, #0]
 80006e2:	4b32      	ldr	r3, [pc, #200]	@ (80007ac <SystemClock_Config+0xf4>)
 80006e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006e6:	4a31      	ldr	r2, [pc, #196]	@ (80007ac <SystemClock_Config+0xf4>)
 80006e8:	f023 0301 	bic.w	r3, r3, #1
 80006ec:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80006ee:	4b2f      	ldr	r3, [pc, #188]	@ (80007ac <SystemClock_Config+0xf4>)
 80006f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006f2:	f003 0301 	and.w	r3, r3, #1
 80006f6:	603b      	str	r3, [r7, #0]
 80006f8:	4b2d      	ldr	r3, [pc, #180]	@ (80007b0 <SystemClock_Config+0xf8>)
 80006fa:	699b      	ldr	r3, [r3, #24]
 80006fc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000700:	4a2b      	ldr	r2, [pc, #172]	@ (80007b0 <SystemClock_Config+0xf8>)
 8000702:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000706:	6193      	str	r3, [r2, #24]
 8000708:	4b29      	ldr	r3, [pc, #164]	@ (80007b0 <SystemClock_Config+0xf8>)
 800070a:	699b      	ldr	r3, [r3, #24]
 800070c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000710:	603b      	str	r3, [r7, #0]
 8000712:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000714:	bf00      	nop
 8000716:	4b26      	ldr	r3, [pc, #152]	@ (80007b0 <SystemClock_Config+0xf8>)
 8000718:	699b      	ldr	r3, [r3, #24]
 800071a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800071e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000722:	d1f8      	bne.n	8000716 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000724:	2302      	movs	r3, #2
 8000726:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000728:	2301      	movs	r3, #1
 800072a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800072c:	2340      	movs	r3, #64	@ 0x40
 800072e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000730:	2302      	movs	r3, #2
 8000732:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000734:	2300      	movs	r3, #0
 8000736:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000738:	2304      	movs	r3, #4
 800073a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 800073c:	2312      	movs	r3, #18
 800073e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000740:	2302      	movs	r3, #2
 8000742:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000744:	2303      	movs	r3, #3
 8000746:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000748:	2302      	movs	r3, #2
 800074a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800074c:	230c      	movs	r3, #12
 800074e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000750:	2300      	movs	r3, #0
 8000752:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000754:	2300      	movs	r3, #0
 8000756:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000758:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800075c:	4618      	mov	r0, r3
 800075e:	f005 f9dd 	bl	8005b1c <HAL_RCC_OscConfig>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000768:	f000 fbca 	bl	8000f00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800076c:	233f      	movs	r3, #63	@ 0x3f
 800076e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000770:	2303      	movs	r3, #3
 8000772:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000774:	2300      	movs	r3, #0
 8000776:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000778:	2300      	movs	r3, #0
 800077a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800077c:	2340      	movs	r3, #64	@ 0x40
 800077e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV4;
 8000780:	2350      	movs	r3, #80	@ 0x50
 8000782:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV8;
 8000784:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000788:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800078a:	2340      	movs	r3, #64	@ 0x40
 800078c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800078e:	1d3b      	adds	r3, r7, #4
 8000790:	2103      	movs	r1, #3
 8000792:	4618      	mov	r0, r3
 8000794:	f005 fe1c 	bl	80063d0 <HAL_RCC_ClockConfig>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <SystemClock_Config+0xea>
  {
    Error_Handler();
 800079e:	f000 fbaf 	bl	8000f00 <Error_Handler>
  }
}
 80007a2:	bf00      	nop
 80007a4:	3770      	adds	r7, #112	@ 0x70
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	58000400 	.word	0x58000400
 80007b0:	58024800 	.word	0x58024800

080007b4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b08a      	sub	sp, #40	@ 0x28
 80007b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80007ba:	f107 031c 	add.w	r3, r7, #28
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	605a      	str	r2, [r3, #4]
 80007c4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007c6:	463b      	mov	r3, r7
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
 80007ce:	609a      	str	r2, [r3, #8]
 80007d0:	60da      	str	r2, [r3, #12]
 80007d2:	611a      	str	r2, [r3, #16]
 80007d4:	615a      	str	r2, [r3, #20]
 80007d6:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007d8:	4b4a      	ldr	r3, [pc, #296]	@ (8000904 <MX_ADC1_Init+0x150>)
 80007da:	4a4b      	ldr	r2, [pc, #300]	@ (8000908 <MX_ADC1_Init+0x154>)
 80007dc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80007de:	4b49      	ldr	r3, [pc, #292]	@ (8000904 <MX_ADC1_Init+0x150>)
 80007e0:	2201      	movs	r2, #1
 80007e2:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80007e4:	4b47      	ldr	r3, [pc, #284]	@ (8000904 <MX_ADC1_Init+0x150>)
 80007e6:	2208      	movs	r2, #8
 80007e8:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007ea:	4b46      	ldr	r3, [pc, #280]	@ (8000904 <MX_ADC1_Init+0x150>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007f0:	4b44      	ldr	r3, [pc, #272]	@ (8000904 <MX_ADC1_Init+0x150>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 4;
 80007f6:	4b43      	ldr	r3, [pc, #268]	@ (8000904 <MX_ADC1_Init+0x150>)
 80007f8:	2204      	movs	r2, #4
 80007fa:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007fc:	4b41      	ldr	r3, [pc, #260]	@ (8000904 <MX_ADC1_Init+0x150>)
 80007fe:	2200      	movs	r2, #0
 8000800:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000802:	4b40      	ldr	r3, [pc, #256]	@ (8000904 <MX_ADC1_Init+0x150>)
 8000804:	2200      	movs	r2, #0
 8000806:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000808:	4b3e      	ldr	r3, [pc, #248]	@ (8000904 <MX_ADC1_Init+0x150>)
 800080a:	2200      	movs	r2, #0
 800080c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_ONESHOT;
 800080e:	4b3d      	ldr	r3, [pc, #244]	@ (8000904 <MX_ADC1_Init+0x150>)
 8000810:	2201      	movs	r2, #1
 8000812:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000814:	4b3b      	ldr	r3, [pc, #236]	@ (8000904 <MX_ADC1_Init+0x150>)
 8000816:	2200      	movs	r2, #0
 8000818:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800081a:	4b3a      	ldr	r3, [pc, #232]	@ (8000904 <MX_ADC1_Init+0x150>)
 800081c:	2200      	movs	r2, #0
 800081e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000820:	4b38      	ldr	r3, [pc, #224]	@ (8000904 <MX_ADC1_Init+0x150>)
 8000822:	2200      	movs	r2, #0
 8000824:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 1;
 8000828:	4b36      	ldr	r3, [pc, #216]	@ (8000904 <MX_ADC1_Init+0x150>)
 800082a:	2201      	movs	r2, #1
 800082c:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800082e:	4835      	ldr	r0, [pc, #212]	@ (8000904 <MX_ADC1_Init+0x150>)
 8000830:	f001 fb80 	bl	8001f34 <HAL_ADC_Init>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800083a:	f000 fb61 	bl	8000f00 <Error_Handler>
  }
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800083e:	4b31      	ldr	r3, [pc, #196]	@ (8000904 <MX_ADC1_Init+0x150>)
 8000840:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000844:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000846:	4b2f      	ldr	r3, [pc, #188]	@ (8000904 <MX_ADC1_Init+0x150>)
 8000848:	2200      	movs	r2, #0
 800084a:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800084c:	482d      	ldr	r0, [pc, #180]	@ (8000904 <MX_ADC1_Init+0x150>)
 800084e:	f001 fb71 	bl	8001f34 <HAL_ADC_Init>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8000858:	f000 fb52 	bl	8000f00 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800085c:	2300      	movs	r3, #0
 800085e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000860:	f107 031c 	add.w	r3, r7, #28
 8000864:	4619      	mov	r1, r3
 8000866:	4827      	ldr	r0, [pc, #156]	@ (8000904 <MX_ADC1_Init+0x150>)
 8000868:	f002 f994 	bl	8002b94 <HAL_ADCEx_MultiModeConfigChannel>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8000872:	f000 fb45 	bl	8000f00 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000876:	4b25      	ldr	r3, [pc, #148]	@ (800090c <MX_ADC1_Init+0x158>)
 8000878:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800087a:	2306      	movs	r3, #6
 800087c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800087e:	2300      	movs	r3, #0
 8000880:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000882:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000886:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000888:	2304      	movs	r3, #4
 800088a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800088c:	2300      	movs	r3, #0
 800088e:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000890:	2300      	movs	r3, #0
 8000892:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000894:	463b      	mov	r3, r7
 8000896:	4619      	mov	r1, r3
 8000898:	481a      	ldr	r0, [pc, #104]	@ (8000904 <MX_ADC1_Init+0x150>)
 800089a:	f001 fced 	bl	8002278 <HAL_ADC_ConfigChannel>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 80008a4:	f000 fb2c 	bl	8000f00 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80008a8:	4b19      	ldr	r3, [pc, #100]	@ (8000910 <MX_ADC1_Init+0x15c>)
 80008aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80008ac:	230c      	movs	r3, #12
 80008ae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008b0:	463b      	mov	r3, r7
 80008b2:	4619      	mov	r1, r3
 80008b4:	4813      	ldr	r0, [pc, #76]	@ (8000904 <MX_ADC1_Init+0x150>)
 80008b6:	f001 fcdf 	bl	8002278 <HAL_ADC_ConfigChannel>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_ADC1_Init+0x110>
  {
    Error_Handler();
 80008c0:	f000 fb1e 	bl	8000f00 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80008c4:	4b13      	ldr	r3, [pc, #76]	@ (8000914 <MX_ADC1_Init+0x160>)
 80008c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80008c8:	2312      	movs	r3, #18
 80008ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008cc:	463b      	mov	r3, r7
 80008ce:	4619      	mov	r1, r3
 80008d0:	480c      	ldr	r0, [pc, #48]	@ (8000904 <MX_ADC1_Init+0x150>)
 80008d2:	f001 fcd1 	bl	8002278 <HAL_ADC_ConfigChannel>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_ADC1_Init+0x12c>
  {
    Error_Handler();
 80008dc:	f000 fb10 	bl	8000f00 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 80008e0:	4b0d      	ldr	r3, [pc, #52]	@ (8000918 <MX_ADC1_Init+0x164>)
 80008e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80008e4:	2318      	movs	r3, #24
 80008e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008e8:	463b      	mov	r3, r7
 80008ea:	4619      	mov	r1, r3
 80008ec:	4805      	ldr	r0, [pc, #20]	@ (8000904 <MX_ADC1_Init+0x150>)
 80008ee:	f001 fcc3 	bl	8002278 <HAL_ADC_ConfigChannel>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_ADC1_Init+0x148>
  {
    Error_Handler();
 80008f8:	f000 fb02 	bl	8000f00 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008fc:	bf00      	nop
 80008fe:	3728      	adds	r7, #40	@ 0x28
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	240001f4 	.word	0x240001f4
 8000908:	40022000 	.word	0x40022000
 800090c:	1d500080 	.word	0x1d500080
 8000910:	10c00010 	.word	0x10c00010
 8000914:	21800100 	.word	0x21800100
 8000918:	4b840000 	.word	0x4b840000

0800091c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000920:	4b1b      	ldr	r3, [pc, #108]	@ (8000990 <MX_I2C1_Init+0x74>)
 8000922:	4a1c      	ldr	r2, [pc, #112]	@ (8000994 <MX_I2C1_Init+0x78>)
 8000924:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00301739;
 8000926:	4b1a      	ldr	r3, [pc, #104]	@ (8000990 <MX_I2C1_Init+0x74>)
 8000928:	4a1b      	ldr	r2, [pc, #108]	@ (8000998 <MX_I2C1_Init+0x7c>)
 800092a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800092c:	4b18      	ldr	r3, [pc, #96]	@ (8000990 <MX_I2C1_Init+0x74>)
 800092e:	2200      	movs	r2, #0
 8000930:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000932:	4b17      	ldr	r3, [pc, #92]	@ (8000990 <MX_I2C1_Init+0x74>)
 8000934:	2201      	movs	r2, #1
 8000936:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000938:	4b15      	ldr	r3, [pc, #84]	@ (8000990 <MX_I2C1_Init+0x74>)
 800093a:	2200      	movs	r2, #0
 800093c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800093e:	4b14      	ldr	r3, [pc, #80]	@ (8000990 <MX_I2C1_Init+0x74>)
 8000940:	2200      	movs	r2, #0
 8000942:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000944:	4b12      	ldr	r3, [pc, #72]	@ (8000990 <MX_I2C1_Init+0x74>)
 8000946:	2200      	movs	r2, #0
 8000948:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800094a:	4b11      	ldr	r3, [pc, #68]	@ (8000990 <MX_I2C1_Init+0x74>)
 800094c:	2200      	movs	r2, #0
 800094e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000950:	4b0f      	ldr	r3, [pc, #60]	@ (8000990 <MX_I2C1_Init+0x74>)
 8000952:	2200      	movs	r2, #0
 8000954:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000956:	480e      	ldr	r0, [pc, #56]	@ (8000990 <MX_I2C1_Init+0x74>)
 8000958:	f004 ff72 	bl	8005840 <HAL_I2C_Init>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000962:	f000 facd 	bl	8000f00 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000966:	2100      	movs	r1, #0
 8000968:	4809      	ldr	r0, [pc, #36]	@ (8000990 <MX_I2C1_Init+0x74>)
 800096a:	f005 f805 	bl	8005978 <HAL_I2CEx_ConfigAnalogFilter>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000974:	f000 fac4 	bl	8000f00 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000978:	2100      	movs	r1, #0
 800097a:	4805      	ldr	r0, [pc, #20]	@ (8000990 <MX_I2C1_Init+0x74>)
 800097c:	f005 f847 	bl	8005a0e <HAL_I2CEx_ConfigDigitalFilter>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000986:	f000 fabb 	bl	8000f00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	240002d0 	.word	0x240002d0
 8000994:	40005400 	.word	0x40005400
 8000998:	00301739 	.word	0x00301739

0800099c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80009a0:	4b27      	ldr	r3, [pc, #156]	@ (8000a40 <MX_SPI3_Init+0xa4>)
 80009a2:	4a28      	ldr	r2, [pc, #160]	@ (8000a44 <MX_SPI3_Init+0xa8>)
 80009a4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80009a6:	4b26      	ldr	r3, [pc, #152]	@ (8000a40 <MX_SPI3_Init+0xa4>)
 80009a8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80009ac:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80009ae:	4b24      	ldr	r3, [pc, #144]	@ (8000a40 <MX_SPI3_Init+0xa4>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80009b4:	4b22      	ldr	r3, [pc, #136]	@ (8000a40 <MX_SPI3_Init+0xa4>)
 80009b6:	2203      	movs	r2, #3
 80009b8:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009ba:	4b21      	ldr	r3, [pc, #132]	@ (8000a40 <MX_SPI3_Init+0xa4>)
 80009bc:	2200      	movs	r2, #0
 80009be:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009c0:	4b1f      	ldr	r3, [pc, #124]	@ (8000a40 <MX_SPI3_Init+0xa4>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80009c6:	4b1e      	ldr	r3, [pc, #120]	@ (8000a40 <MX_SPI3_Init+0xa4>)
 80009c8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80009cc:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80009ce:	4b1c      	ldr	r3, [pc, #112]	@ (8000a40 <MX_SPI3_Init+0xa4>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009d4:	4b1a      	ldr	r3, [pc, #104]	@ (8000a40 <MX_SPI3_Init+0xa4>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80009da:	4b19      	ldr	r3, [pc, #100]	@ (8000a40 <MX_SPI3_Init+0xa4>)
 80009dc:	2200      	movs	r2, #0
 80009de:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009e0:	4b17      	ldr	r3, [pc, #92]	@ (8000a40 <MX_SPI3_Init+0xa4>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 80009e6:	4b16      	ldr	r3, [pc, #88]	@ (8000a40 <MX_SPI3_Init+0xa4>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80009ec:	4b14      	ldr	r3, [pc, #80]	@ (8000a40 <MX_SPI3_Init+0xa4>)
 80009ee:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80009f2:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80009f4:	4b12      	ldr	r3, [pc, #72]	@ (8000a40 <MX_SPI3_Init+0xa4>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80009fa:	4b11      	ldr	r3, [pc, #68]	@ (8000a40 <MX_SPI3_Init+0xa4>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000a00:	4b0f      	ldr	r3, [pc, #60]	@ (8000a40 <MX_SPI3_Init+0xa4>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000a06:	4b0e      	ldr	r3, [pc, #56]	@ (8000a40 <MX_SPI3_Init+0xa4>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000a0c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a40 <MX_SPI3_Init+0xa4>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000a12:	4b0b      	ldr	r3, [pc, #44]	@ (8000a40 <MX_SPI3_Init+0xa4>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000a18:	4b09      	ldr	r3, [pc, #36]	@ (8000a40 <MX_SPI3_Init+0xa4>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000a1e:	4b08      	ldr	r3, [pc, #32]	@ (8000a40 <MX_SPI3_Init+0xa4>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000a24:	4b06      	ldr	r3, [pc, #24]	@ (8000a40 <MX_SPI3_Init+0xa4>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000a2a:	4805      	ldr	r0, [pc, #20]	@ (8000a40 <MX_SPI3_Init+0xa4>)
 8000a2c:	f008 fd5a 	bl	80094e4 <HAL_SPI_Init>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 8000a36:	f000 fa63 	bl	8000f00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000a3a:	bf00      	nop
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	24000324 	.word	0x24000324
 8000a44:	40003c00 	.word	0x40003c00

08000a48 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b088      	sub	sp, #32
 8000a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a4e:	f107 0310 	add.w	r3, r7, #16
 8000a52:	2200      	movs	r2, #0
 8000a54:	601a      	str	r2, [r3, #0]
 8000a56:	605a      	str	r2, [r3, #4]
 8000a58:	609a      	str	r2, [r3, #8]
 8000a5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a5c:	1d3b      	adds	r3, r7, #4
 8000a5e:	2200      	movs	r2, #0
 8000a60:	601a      	str	r2, [r3, #0]
 8000a62:	605a      	str	r2, [r3, #4]
 8000a64:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a66:	4b20      	ldr	r3, [pc, #128]	@ (8000ae8 <MX_TIM1_Init+0xa0>)
 8000a68:	4a20      	ldr	r2, [pc, #128]	@ (8000aec <MX_TIM1_Init+0xa4>)
 8000a6a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1-1;
 8000a6c:	4b1e      	ldr	r3, [pc, #120]	@ (8000ae8 <MX_TIM1_Init+0xa0>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a72:	4b1d      	ldr	r3, [pc, #116]	@ (8000ae8 <MX_TIM1_Init+0xa0>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000a78:	4b1b      	ldr	r3, [pc, #108]	@ (8000ae8 <MX_TIM1_Init+0xa0>)
 8000a7a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a7e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a80:	4b19      	ldr	r3, [pc, #100]	@ (8000ae8 <MX_TIM1_Init+0xa0>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a86:	4b18      	ldr	r3, [pc, #96]	@ (8000ae8 <MX_TIM1_Init+0xa0>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a8c:	4b16      	ldr	r3, [pc, #88]	@ (8000ae8 <MX_TIM1_Init+0xa0>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a92:	4815      	ldr	r0, [pc, #84]	@ (8000ae8 <MX_TIM1_Init+0xa0>)
 8000a94:	f009 f91f 	bl	8009cd6 <HAL_TIM_Base_Init>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000a9e:	f000 fa2f 	bl	8000f00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000aa2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000aa6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000aa8:	f107 0310 	add.w	r3, r7, #16
 8000aac:	4619      	mov	r1, r3
 8000aae:	480e      	ldr	r0, [pc, #56]	@ (8000ae8 <MX_TIM1_Init+0xa0>)
 8000ab0:	f009 fa70 	bl	8009f94 <HAL_TIM_ConfigClockSource>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000aba:	f000 fa21 	bl	8000f00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000aca:	1d3b      	adds	r3, r7, #4
 8000acc:	4619      	mov	r1, r3
 8000ace:	4806      	ldr	r0, [pc, #24]	@ (8000ae8 <MX_TIM1_Init+0xa0>)
 8000ad0:	f009 fcc4 	bl	800a45c <HAL_TIMEx_MasterConfigSynchronization>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000ada:	f000 fa11 	bl	8000f00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000ade:	bf00      	nop
 8000ae0:	3720      	adds	r7, #32
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	240003ac 	.word	0x240003ac
 8000aec:	40010000 	.word	0x40010000

08000af0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b088      	sub	sp, #32
 8000af4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000af6:	f107 0310 	add.w	r3, r7, #16
 8000afa:	2200      	movs	r2, #0
 8000afc:	601a      	str	r2, [r3, #0]
 8000afe:	605a      	str	r2, [r3, #4]
 8000b00:	609a      	str	r2, [r3, #8]
 8000b02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b04:	1d3b      	adds	r3, r7, #4
 8000b06:	2200      	movs	r2, #0
 8000b08:	601a      	str	r2, [r3, #0]
 8000b0a:	605a      	str	r2, [r3, #4]
 8000b0c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000b0e:	4b1d      	ldr	r3, [pc, #116]	@ (8000b84 <MX_TIM4_Init+0x94>)
 8000b10:	4a1d      	ldr	r2, [pc, #116]	@ (8000b88 <MX_TIM4_Init+0x98>)
 8000b12:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000b14:	4b1b      	ldr	r3, [pc, #108]	@ (8000b84 <MX_TIM4_Init+0x94>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b1a:	4b1a      	ldr	r3, [pc, #104]	@ (8000b84 <MX_TIM4_Init+0x94>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 8000b20:	4b18      	ldr	r3, [pc, #96]	@ (8000b84 <MX_TIM4_Init+0x94>)
 8000b22:	2263      	movs	r2, #99	@ 0x63
 8000b24:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b26:	4b17      	ldr	r3, [pc, #92]	@ (8000b84 <MX_TIM4_Init+0x94>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b2c:	4b15      	ldr	r3, [pc, #84]	@ (8000b84 <MX_TIM4_Init+0x94>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000b32:	4814      	ldr	r0, [pc, #80]	@ (8000b84 <MX_TIM4_Init+0x94>)
 8000b34:	f009 f8cf 	bl	8009cd6 <HAL_TIM_Base_Init>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000b3e:	f000 f9df 	bl	8000f00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b42:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b46:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000b48:	f107 0310 	add.w	r3, r7, #16
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	480d      	ldr	r0, [pc, #52]	@ (8000b84 <MX_TIM4_Init+0x94>)
 8000b50:	f009 fa20 	bl	8009f94 <HAL_TIM_ConfigClockSource>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000b5a:	f000 f9d1 	bl	8000f00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b62:	2300      	movs	r3, #0
 8000b64:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000b66:	1d3b      	adds	r3, r7, #4
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4806      	ldr	r0, [pc, #24]	@ (8000b84 <MX_TIM4_Init+0x94>)
 8000b6c:	f009 fc76 	bl	800a45c <HAL_TIMEx_MasterConfigSynchronization>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000b76:	f000 f9c3 	bl	8000f00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000b7a:	bf00      	nop
 8000b7c:	3720      	adds	r7, #32
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	240003f8 	.word	0x240003f8
 8000b88:	40000800 	.word	0x40000800

08000b8c <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8000b90:	4b22      	ldr	r3, [pc, #136]	@ (8000c1c <MX_UART7_Init+0x90>)
 8000b92:	4a23      	ldr	r2, [pc, #140]	@ (8000c20 <MX_UART7_Init+0x94>)
 8000b94:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8000b96:	4b21      	ldr	r3, [pc, #132]	@ (8000c1c <MX_UART7_Init+0x90>)
 8000b98:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b9c:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8000b9e:	4b1f      	ldr	r3, [pc, #124]	@ (8000c1c <MX_UART7_Init+0x90>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8000ba4:	4b1d      	ldr	r3, [pc, #116]	@ (8000c1c <MX_UART7_Init+0x90>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8000baa:	4b1c      	ldr	r3, [pc, #112]	@ (8000c1c <MX_UART7_Init+0x90>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8000bb0:	4b1a      	ldr	r3, [pc, #104]	@ (8000c1c <MX_UART7_Init+0x90>)
 8000bb2:	220c      	movs	r2, #12
 8000bb4:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bb6:	4b19      	ldr	r3, [pc, #100]	@ (8000c1c <MX_UART7_Init+0x90>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bbc:	4b17      	ldr	r3, [pc, #92]	@ (8000c1c <MX_UART7_Init+0x90>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bc2:	4b16      	ldr	r3, [pc, #88]	@ (8000c1c <MX_UART7_Init+0x90>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bc8:	4b14      	ldr	r3, [pc, #80]	@ (8000c1c <MX_UART7_Init+0x90>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bce:	4b13      	ldr	r3, [pc, #76]	@ (8000c1c <MX_UART7_Init+0x90>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8000bd4:	4811      	ldr	r0, [pc, #68]	@ (8000c1c <MX_UART7_Init+0x90>)
 8000bd6:	f009 fced 	bl	800a5b4 <HAL_UART_Init>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8000be0:	f000 f98e 	bl	8000f00 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000be4:	2100      	movs	r1, #0
 8000be6:	480d      	ldr	r0, [pc, #52]	@ (8000c1c <MX_UART7_Init+0x90>)
 8000be8:	f00b f9b0 	bl	800bf4c <HAL_UARTEx_SetTxFifoThreshold>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 8000bf2:	f000 f985 	bl	8000f00 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	4808      	ldr	r0, [pc, #32]	@ (8000c1c <MX_UART7_Init+0x90>)
 8000bfa:	f00b f9e5 	bl	800bfc8 <HAL_UARTEx_SetRxFifoThreshold>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8000c04:	f000 f97c 	bl	8000f00 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8000c08:	4804      	ldr	r0, [pc, #16]	@ (8000c1c <MX_UART7_Init+0x90>)
 8000c0a:	f00b f966 	bl	800beda <HAL_UARTEx_DisableFifoMode>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 8000c14:	f000 f974 	bl	8000f00 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8000c18:	bf00      	nop
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	24000444 	.word	0x24000444
 8000c20:	40007800 	.word	0x40007800

08000c24 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c28:	4b22      	ldr	r3, [pc, #136]	@ (8000cb4 <MX_USART2_UART_Init+0x90>)
 8000c2a:	4a23      	ldr	r2, [pc, #140]	@ (8000cb8 <MX_USART2_UART_Init+0x94>)
 8000c2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c2e:	4b21      	ldr	r3, [pc, #132]	@ (8000cb4 <MX_USART2_UART_Init+0x90>)
 8000c30:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c36:	4b1f      	ldr	r3, [pc, #124]	@ (8000cb4 <MX_USART2_UART_Init+0x90>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c3c:	4b1d      	ldr	r3, [pc, #116]	@ (8000cb4 <MX_USART2_UART_Init+0x90>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c42:	4b1c      	ldr	r3, [pc, #112]	@ (8000cb4 <MX_USART2_UART_Init+0x90>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c48:	4b1a      	ldr	r3, [pc, #104]	@ (8000cb4 <MX_USART2_UART_Init+0x90>)
 8000c4a:	220c      	movs	r2, #12
 8000c4c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c4e:	4b19      	ldr	r3, [pc, #100]	@ (8000cb4 <MX_USART2_UART_Init+0x90>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c54:	4b17      	ldr	r3, [pc, #92]	@ (8000cb4 <MX_USART2_UART_Init+0x90>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c5a:	4b16      	ldr	r3, [pc, #88]	@ (8000cb4 <MX_USART2_UART_Init+0x90>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c60:	4b14      	ldr	r3, [pc, #80]	@ (8000cb4 <MX_USART2_UART_Init+0x90>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c66:	4b13      	ldr	r3, [pc, #76]	@ (8000cb4 <MX_USART2_UART_Init+0x90>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c6c:	4811      	ldr	r0, [pc, #68]	@ (8000cb4 <MX_USART2_UART_Init+0x90>)
 8000c6e:	f009 fca1 	bl	800a5b4 <HAL_UART_Init>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000c78:	f000 f942 	bl	8000f00 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	480d      	ldr	r0, [pc, #52]	@ (8000cb4 <MX_USART2_UART_Init+0x90>)
 8000c80:	f00b f964 	bl	800bf4c <HAL_UARTEx_SetTxFifoThreshold>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000c8a:	f000 f939 	bl	8000f00 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c8e:	2100      	movs	r1, #0
 8000c90:	4808      	ldr	r0, [pc, #32]	@ (8000cb4 <MX_USART2_UART_Init+0x90>)
 8000c92:	f00b f999 	bl	800bfc8 <HAL_UARTEx_SetRxFifoThreshold>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000c9c:	f000 f930 	bl	8000f00 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000ca0:	4804      	ldr	r0, [pc, #16]	@ (8000cb4 <MX_USART2_UART_Init+0x90>)
 8000ca2:	f00b f91a 	bl	800beda <HAL_UARTEx_DisableFifoMode>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000cac:	f000 f928 	bl	8000f00 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cb0:	bf00      	nop
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	240004d8 	.word	0x240004d8
 8000cb8:	40004400 	.word	0x40004400

08000cbc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cc2:	4b0d      	ldr	r3, [pc, #52]	@ (8000cf8 <MX_DMA_Init+0x3c>)
 8000cc4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000cc8:	4a0b      	ldr	r2, [pc, #44]	@ (8000cf8 <MX_DMA_Init+0x3c>)
 8000cca:	f043 0301 	orr.w	r3, r3, #1
 8000cce:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000cd2:	4b09      	ldr	r3, [pc, #36]	@ (8000cf8 <MX_DMA_Init+0x3c>)
 8000cd4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000cd8:	f003 0301 	and.w	r3, r3, #1
 8000cdc:	607b      	str	r3, [r7, #4]
 8000cde:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	200b      	movs	r0, #11
 8000ce6:	f002 f90e 	bl	8002f06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000cea:	200b      	movs	r0, #11
 8000cec:	f002 f925 	bl	8002f3a <HAL_NVIC_EnableIRQ>

}
 8000cf0:	bf00      	nop
 8000cf2:	3708      	adds	r7, #8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	58024400 	.word	0x58024400

08000cfc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b08c      	sub	sp, #48	@ 0x30
 8000d00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d02:	f107 031c 	add.w	r3, r7, #28
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	605a      	str	r2, [r3, #4]
 8000d0c:	609a      	str	r2, [r3, #8]
 8000d0e:	60da      	str	r2, [r3, #12]
 8000d10:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d12:	4b60      	ldr	r3, [pc, #384]	@ (8000e94 <MX_GPIO_Init+0x198>)
 8000d14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d18:	4a5e      	ldr	r2, [pc, #376]	@ (8000e94 <MX_GPIO_Init+0x198>)
 8000d1a:	f043 0304 	orr.w	r3, r3, #4
 8000d1e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d22:	4b5c      	ldr	r3, [pc, #368]	@ (8000e94 <MX_GPIO_Init+0x198>)
 8000d24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d28:	f003 0304 	and.w	r3, r3, #4
 8000d2c:	61bb      	str	r3, [r7, #24]
 8000d2e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d30:	4b58      	ldr	r3, [pc, #352]	@ (8000e94 <MX_GPIO_Init+0x198>)
 8000d32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d36:	4a57      	ldr	r2, [pc, #348]	@ (8000e94 <MX_GPIO_Init+0x198>)
 8000d38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d3c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d40:	4b54      	ldr	r3, [pc, #336]	@ (8000e94 <MX_GPIO_Init+0x198>)
 8000d42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d4a:	617b      	str	r3, [r7, #20]
 8000d4c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4e:	4b51      	ldr	r3, [pc, #324]	@ (8000e94 <MX_GPIO_Init+0x198>)
 8000d50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d54:	4a4f      	ldr	r2, [pc, #316]	@ (8000e94 <MX_GPIO_Init+0x198>)
 8000d56:	f043 0301 	orr.w	r3, r3, #1
 8000d5a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d5e:	4b4d      	ldr	r3, [pc, #308]	@ (8000e94 <MX_GPIO_Init+0x198>)
 8000d60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d64:	f003 0301 	and.w	r3, r3, #1
 8000d68:	613b      	str	r3, [r7, #16]
 8000d6a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d6c:	4b49      	ldr	r3, [pc, #292]	@ (8000e94 <MX_GPIO_Init+0x198>)
 8000d6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d72:	4a48      	ldr	r2, [pc, #288]	@ (8000e94 <MX_GPIO_Init+0x198>)
 8000d74:	f043 0308 	orr.w	r3, r3, #8
 8000d78:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d7c:	4b45      	ldr	r3, [pc, #276]	@ (8000e94 <MX_GPIO_Init+0x198>)
 8000d7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d82:	f003 0308 	and.w	r3, r3, #8
 8000d86:	60fb      	str	r3, [r7, #12]
 8000d88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d8a:	4b42      	ldr	r3, [pc, #264]	@ (8000e94 <MX_GPIO_Init+0x198>)
 8000d8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d90:	4a40      	ldr	r2, [pc, #256]	@ (8000e94 <MX_GPIO_Init+0x198>)
 8000d92:	f043 0302 	orr.w	r3, r3, #2
 8000d96:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d9a:	4b3e      	ldr	r3, [pc, #248]	@ (8000e94 <MX_GPIO_Init+0x198>)
 8000d9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000da0:	f003 0302 	and.w	r3, r3, #2
 8000da4:	60bb      	str	r3, [r7, #8]
 8000da6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000da8:	4b3a      	ldr	r3, [pc, #232]	@ (8000e94 <MX_GPIO_Init+0x198>)
 8000daa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dae:	4a39      	ldr	r2, [pc, #228]	@ (8000e94 <MX_GPIO_Init+0x198>)
 8000db0:	f043 0310 	orr.w	r3, r3, #16
 8000db4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000db8:	4b36      	ldr	r3, [pc, #216]	@ (8000e94 <MX_GPIO_Init+0x198>)
 8000dba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dbe:	f003 0310 	and.w	r3, r3, #16
 8000dc2:	607b      	str	r3, [r7, #4]
 8000dc4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, bypass_Pin|reset_Pin, GPIO_PIN_RESET);
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	f248 0140 	movw	r1, #32832	@ 0x8040
 8000dcc:	4832      	ldr	r0, [pc, #200]	@ (8000e98 <MX_GPIO_Init+0x19c>)
 8000dce:	f004 fd1d 	bl	800580c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f24f 0111 	movw	r1, #61457	@ 0xf011
 8000dd8:	4830      	ldr	r0, [pc, #192]	@ (8000e9c <MX_GPIO_Init+0x1a0>)
 8000dda:	f004 fd17 	bl	800580c <HAL_GPIO_WritePin>
                          |select_Pin|MODBUS_nWR2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8000dde:	2200      	movs	r2, #0
 8000de0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000de4:	482e      	ldr	r0, [pc, #184]	@ (8000ea0 <MX_GPIO_Init+0x1a4>)
 8000de6:	f004 fd11 	bl	800580c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, GPIO_PIN_RESET);
 8000dea:	2200      	movs	r2, #0
 8000dec:	2101      	movs	r1, #1
 8000dee:	482d      	ldr	r0, [pc, #180]	@ (8000ea4 <MX_GPIO_Init+0x1a8>)
 8000df0:	f004 fd0c 	bl	800580c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : bypass_Pin reset_Pin */
  GPIO_InitStruct.Pin = bypass_Pin|reset_Pin;
 8000df4:	f248 0340 	movw	r3, #32832	@ 0x8040
 8000df8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e02:	2300      	movs	r3, #0
 8000e04:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e06:	f107 031c 	add.w	r3, r7, #28
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4822      	ldr	r0, [pc, #136]	@ (8000e98 <MX_GPIO_Init+0x19c>)
 8000e0e:	f004 fb4d 	bl	80054ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15
                           select_Pin MODBUS_nWR2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8000e12:	f24f 0311 	movw	r3, #61457	@ 0xf011
 8000e16:	61fb      	str	r3, [r7, #28]
                          |select_Pin|MODBUS_nWR2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e20:	2300      	movs	r3, #0
 8000e22:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e24:	f107 031c 	add.w	r3, r7, #28
 8000e28:	4619      	mov	r1, r3
 8000e2a:	481c      	ldr	r0, [pc, #112]	@ (8000e9c <MX_GPIO_Init+0x1a0>)
 8000e2c:	f004 fb3e 	bl	80054ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000e30:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000e34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e36:	2302      	movs	r3, #2
 8000e38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000e42:	2309      	movs	r3, #9
 8000e44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e46:	f107 031c 	add.w	r3, r7, #28
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4812      	ldr	r0, [pc, #72]	@ (8000e98 <MX_GPIO_Init+0x19c>)
 8000e4e:	f004 fb2d 	bl	80054ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e52:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e60:	2300      	movs	r3, #0
 8000e62:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e64:	f107 031c 	add.w	r3, r7, #28
 8000e68:	4619      	mov	r1, r3
 8000e6a:	480d      	ldr	r0, [pc, #52]	@ (8000ea0 <MX_GPIO_Init+0x1a4>)
 8000e6c:	f004 fb1e 	bl	80054ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e70:	2301      	movs	r3, #1
 8000e72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e74:	2301      	movs	r3, #1
 8000e76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e80:	f107 031c 	add.w	r3, r7, #28
 8000e84:	4619      	mov	r1, r3
 8000e86:	4807      	ldr	r0, [pc, #28]	@ (8000ea4 <MX_GPIO_Init+0x1a8>)
 8000e88:	f004 fb10 	bl	80054ac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e8c:	bf00      	nop
 8000e8e:	3730      	adds	r7, #48	@ 0x30
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	58024400 	.word	0x58024400
 8000e98:	58020000 	.word	0x58020000
 8000e9c:	58020c00 	.word	0x58020c00
 8000ea0:	58020400 	.word	0x58020400
 8000ea4:	58021000 	.word	0x58021000

08000ea8 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000eae:	463b      	mov	r3, r7
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000eba:	f002 f859 	bl	8002f70 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000eca:	231f      	movs	r3, #31
 8000ecc:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000ece:	2387      	movs	r3, #135	@ 0x87
 8000ed0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000eda:	2301      	movs	r3, #1
 8000edc:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000eea:	463b      	mov	r3, r7
 8000eec:	4618      	mov	r0, r3
 8000eee:	f002 f877 	bl	8002fe0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000ef2:	2004      	movs	r0, #4
 8000ef4:	f002 f854 	bl	8002fa0 <HAL_MPU_Enable>

}
 8000ef8:	bf00      	nop
 8000efa:	3710      	adds	r7, #16
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f04:	b672      	cpsid	i
}
 8000f06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f08:	bf00      	nop
 8000f0a:	e7fd      	b.n	8000f08 <Error_Handler+0x8>

08000f0c <modbus_send_data>:
static void resetArray(uint8_t *arr, size_t size)
{
  memset(arr, 0, size);
}
void modbus_send_data(uint8_t *data,uint8_t num)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	460b      	mov	r3, r1
 8000f16:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(MODBUS_GPIO_WRITE_PORT,MODBUS_WRITE_PORT,GPIO_PIN_SET);
 8000f18:	2201      	movs	r2, #1
 8000f1a:	2110      	movs	r1, #16
 8000f1c:	4809      	ldr	r0, [pc, #36]	@ (8000f44 <modbus_send_data+0x38>)
 8000f1e:	f004 fc75 	bl	800580c <HAL_GPIO_WritePin>
	HAL_UART_Transmit(&huart2,data,num,100);
 8000f22:	78fb      	ldrb	r3, [r7, #3]
 8000f24:	b29a      	uxth	r2, r3
 8000f26:	2364      	movs	r3, #100	@ 0x64
 8000f28:	6879      	ldr	r1, [r7, #4]
 8000f2a:	4807      	ldr	r0, [pc, #28]	@ (8000f48 <modbus_send_data+0x3c>)
 8000f2c:	f009 fb92 	bl	800a654 <HAL_UART_Transmit>
	HAL_GPIO_WritePin(MODBUS_GPIO_WRITE_PORT,MODBUS_WRITE_PORT,GPIO_PIN_RESET);
 8000f30:	2200      	movs	r2, #0
 8000f32:	2110      	movs	r1, #16
 8000f34:	4803      	ldr	r0, [pc, #12]	@ (8000f44 <modbus_send_data+0x38>)
 8000f36:	f004 fc69 	bl	800580c <HAL_GPIO_WritePin>
}
 8000f3a:	bf00      	nop
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	58020c00 	.word	0x58020c00
 8000f48:	240004d8 	.word	0x240004d8

08000f4c <modbus_respone_data>:
void modbus_respone_data()
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b086      	sub	sp, #24
 8000f50:	af00      	add	r7, sp, #0
	uint8_t slave_id_ = 1;
 8000f52:	2301      	movs	r3, #1
 8000f54:	72fb      	strb	r3, [r7, #11]
	if(slave_id_ == modbus_receive[0])
 8000f56:	4b31      	ldr	r3, [pc, #196]	@ (800101c <modbus_respone_data+0xd0>)
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	7afa      	ldrb	r2, [r7, #11]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d159      	bne.n	8001014 <modbus_respone_data+0xc8>
	{
		uint16_t start_addr = (modbus_receive[2] << 8) | modbus_receive[3]; // start address
 8000f60:	4b2e      	ldr	r3, [pc, #184]	@ (800101c <modbus_respone_data+0xd0>)
 8000f62:	789b      	ldrb	r3, [r3, #2]
 8000f64:	021b      	lsls	r3, r3, #8
 8000f66:	b21a      	sxth	r2, r3
 8000f68:	4b2c      	ldr	r3, [pc, #176]	@ (800101c <modbus_respone_data+0xd0>)
 8000f6a:	78db      	ldrb	r3, [r3, #3]
 8000f6c:	b21b      	sxth	r3, r3
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	b21b      	sxth	r3, r3
 8000f72:	82fb      	strh	r3, [r7, #22]
    uint16_t num_registers = (modbus_receive[4] << 8) | modbus_receive[5]; // number of registers
 8000f74:	4b29      	ldr	r3, [pc, #164]	@ (800101c <modbus_respone_data+0xd0>)
 8000f76:	791b      	ldrb	r3, [r3, #4]
 8000f78:	021b      	lsls	r3, r3, #8
 8000f7a:	b21a      	sxth	r2, r3
 8000f7c:	4b27      	ldr	r3, [pc, #156]	@ (800101c <modbus_respone_data+0xd0>)
 8000f7e:	795b      	ldrb	r3, [r3, #5]
 8000f80:	b21b      	sxth	r3, r3
 8000f82:	4313      	orrs	r3, r2
 8000f84:	b21b      	sxth	r3, r3
 8000f86:	813b      	strh	r3, [r7, #8]
		modbus_send[0] = MODBUS_ID;  // slave ID
 8000f88:	4b25      	ldr	r3, [pc, #148]	@ (8001020 <modbus_respone_data+0xd4>)
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	701a      	strb	r2, [r3, #0]
	  modbus_send[1] = HOLDING_REGISTERS_READ_FUCTION_CODE;  // function code
 8000f8e:	4b24      	ldr	r3, [pc, #144]	@ (8001020 <modbus_respone_data+0xd4>)
 8000f90:	2203      	movs	r2, #3
 8000f92:	705a      	strb	r2, [r3, #1]
	  modbus_send[2] = num_registers*2;  // Byte count
 8000f94:	893b      	ldrh	r3, [r7, #8]
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	005b      	lsls	r3, r3, #1
 8000f9a:	b2da      	uxtb	r2, r3
 8000f9c:	4b20      	ldr	r3, [pc, #128]	@ (8001020 <modbus_respone_data+0xd4>)
 8000f9e:	709a      	strb	r2, [r3, #2]
		int indx = 3;  // we need to keep track of how many bytes has been stored in TxData Buffer
 8000fa0:	2303      	movs	r3, #3
 8000fa2:	613b      	str	r3, [r7, #16]

		for (int i=0; i<num_registers; i++)   // Load the actual data into TxData buffer
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	60fb      	str	r3, [r7, #12]
 8000fa8:	e013      	b.n	8000fd2 <modbus_respone_data+0x86>
		{
			modbus_send[indx++] = (modbus_database[start_addr]>>8)&0xFF;  // extract the higher byte
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	1c5a      	adds	r2, r3, #1
 8000fae:	613a      	str	r2, [r7, #16]
 8000fb0:	4a1b      	ldr	r2, [pc, #108]	@ (8001020 <modbus_respone_data+0xd4>)
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	54d1      	strb	r1, [r2, r3]
			modbus_send[indx++] = (modbus_database[start_addr])&0xFF;   // extract the lower byte
 8000fb6:	8afa      	ldrh	r2, [r7, #22]
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	1c59      	adds	r1, r3, #1
 8000fbc:	6139      	str	r1, [r7, #16]
 8000fbe:	4919      	ldr	r1, [pc, #100]	@ (8001024 <modbus_respone_data+0xd8>)
 8000fc0:	5c89      	ldrb	r1, [r1, r2]
 8000fc2:	4a17      	ldr	r2, [pc, #92]	@ (8001020 <modbus_respone_data+0xd4>)
 8000fc4:	54d1      	strb	r1, [r2, r3]
			start_addr++;  // increment the register address
 8000fc6:	8afb      	ldrh	r3, [r7, #22]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	82fb      	strh	r3, [r7, #22]
		for (int i=0; i<num_registers; i++)   // Load the actual data into TxData buffer
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	3301      	adds	r3, #1
 8000fd0:	60fb      	str	r3, [r7, #12]
 8000fd2:	893b      	ldrh	r3, [r7, #8]
 8000fd4:	68fa      	ldr	r2, [r7, #12]
 8000fd6:	429a      	cmp	r2, r3
 8000fd8:	dbe7      	blt.n	8000faa <modbus_respone_data+0x5e>
		}
	uint16_t crc = crc16(modbus_send, num_registers);
 8000fda:	893b      	ldrh	r3, [r7, #8]
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4810      	ldr	r0, [pc, #64]	@ (8001020 <modbus_respone_data+0xd4>)
 8000fe0:	f000 f866 	bl	80010b0 <crc16>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	80fb      	strh	r3, [r7, #6]
	modbus_send[num_registers] = crc&0xFF;   // CRC LOW
 8000fe8:	893b      	ldrh	r3, [r7, #8]
 8000fea:	88fa      	ldrh	r2, [r7, #6]
 8000fec:	b2d1      	uxtb	r1, r2
 8000fee:	4a0c      	ldr	r2, [pc, #48]	@ (8001020 <modbus_respone_data+0xd4>)
 8000ff0:	54d1      	strb	r1, [r2, r3]
	modbus_send[num_registers+1] = (crc>>8)&0xFF;  // CRC HIGH
 8000ff2:	88fb      	ldrh	r3, [r7, #6]
 8000ff4:	0a1b      	lsrs	r3, r3, #8
 8000ff6:	b29a      	uxth	r2, r3
 8000ff8:	893b      	ldrh	r3, [r7, #8]
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	b2d1      	uxtb	r1, r2
 8000ffe:	4a08      	ldr	r2, [pc, #32]	@ (8001020 <modbus_respone_data+0xd4>)
 8001000:	54d1      	strb	r1, [r2, r3]
	num_registers = num_registers+2;
 8001002:	893b      	ldrh	r3, [r7, #8]
 8001004:	3302      	adds	r3, #2
 8001006:	813b      	strh	r3, [r7, #8]
	modbus_send_data(modbus_send,num_registers);  // send data... CRC will be calculated in the function itself
 8001008:	893b      	ldrh	r3, [r7, #8]
 800100a:	b2db      	uxtb	r3, r3
 800100c:	4619      	mov	r1, r3
 800100e:	4804      	ldr	r0, [pc, #16]	@ (8001020 <modbus_respone_data+0xd4>)
 8001010:	f7ff ff7c 	bl	8000f0c <modbus_send_data>
	}
}
 8001014:	bf00      	nop
 8001016:	3718      	adds	r7, #24
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	24000580 	.word	0x24000580
 8001020:	2400056c 	.word	0x2400056c
 8001024:	240005ac 	.word	0x240005ac

08001028 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	460b      	mov	r3, r1
 8001032:	807b      	strh	r3, [r7, #2]
		if (huart->Instance == USART1)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a19      	ldr	r2, [pc, #100]	@ (80010a0 <HAL_UARTEx_RxEventCallback+0x78>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d12b      	bne.n	8001096 <HAL_UARTEx_RxEventCallback+0x6e>
    {
			  if (is_requesting)
 800103e:	4b19      	ldr	r3, [pc, #100]	@ (80010a4 <HAL_UARTEx_RxEventCallback+0x7c>)
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d025      	beq.n	8001092 <HAL_UARTEx_RxEventCallback+0x6a>
        {
           uint8_t numRegisters = modbus_receive[2] / 2;
 8001046:	4b18      	ldr	r3, [pc, #96]	@ (80010a8 <HAL_UARTEx_RxEventCallback+0x80>)
 8001048:	789b      	ldrb	r3, [r3, #2]
 800104a:	085b      	lsrs	r3, r3, #1
 800104c:	73bb      	strb	r3, [r7, #14]
           for (uint8_t i = 0; i < numRegisters; i++)
 800104e:	2300      	movs	r3, #0
 8001050:	73fb      	strb	r3, [r7, #15]
 8001052:	e016      	b.n	8001082 <HAL_UARTEx_RxEventCallback+0x5a>
           {
               final_data[i] = (modbus_receive[3 + (i * 2)] << 8) | modbus_receive[4 + (i * 2)];
 8001054:	7bfb      	ldrb	r3, [r7, #15]
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	3303      	adds	r3, #3
 800105a:	4a13      	ldr	r2, [pc, #76]	@ (80010a8 <HAL_UARTEx_RxEventCallback+0x80>)
 800105c:	5cd3      	ldrb	r3, [r2, r3]
 800105e:	021b      	lsls	r3, r3, #8
 8001060:	b21a      	sxth	r2, r3
 8001062:	7bfb      	ldrb	r3, [r7, #15]
 8001064:	3302      	adds	r3, #2
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	490f      	ldr	r1, [pc, #60]	@ (80010a8 <HAL_UARTEx_RxEventCallback+0x80>)
 800106a:	5ccb      	ldrb	r3, [r1, r3]
 800106c:	b21b      	sxth	r3, r3
 800106e:	4313      	orrs	r3, r2
 8001070:	b21a      	sxth	r2, r3
 8001072:	7bfb      	ldrb	r3, [r7, #15]
 8001074:	b291      	uxth	r1, r2
 8001076:	4a0d      	ldr	r2, [pc, #52]	@ (80010ac <HAL_UARTEx_RxEventCallback+0x84>)
 8001078:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
           for (uint8_t i = 0; i < numRegisters; i++)
 800107c:	7bfb      	ldrb	r3, [r7, #15]
 800107e:	3301      	adds	r3, #1
 8001080:	73fb      	strb	r3, [r7, #15]
 8001082:	7bfa      	ldrb	r2, [r7, #15]
 8001084:	7bbb      	ldrb	r3, [r7, #14]
 8001086:	429a      	cmp	r2, r3
 8001088:	d3e4      	bcc.n	8001054 <HAL_UARTEx_RxEventCallback+0x2c>
           }
           is_requesting = 0;
 800108a:	4b06      	ldr	r3, [pc, #24]	@ (80010a4 <HAL_UARTEx_RxEventCallback+0x7c>)
 800108c:	2200      	movs	r2, #0
 800108e:	701a      	strb	r2, [r3, #0]
        else
        {
           modbus_respone_data();
        }
    }
}
 8001090:	e001      	b.n	8001096 <HAL_UARTEx_RxEventCallback+0x6e>
           modbus_respone_data();
 8001092:	f7ff ff5b 	bl	8000f4c <modbus_respone_data>
}
 8001096:	bf00      	nop
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	40011000 	.word	0x40011000
 80010a4:	240005a8 	.word	0x240005a8
 80010a8:	24000580 	.word	0x24000580
 80010ac:	24000594 	.word	0x24000594

080010b0 <crc16>:
    0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42,
    0x43, 0x83, 0x41, 0x81, 0x80, 0x40
};

uint16_t crc16(uint8_t *buffer, uint16_t buffer_length)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b085      	sub	sp, #20
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	460b      	mov	r3, r1
 80010ba:	807b      	strh	r3, [r7, #2]
    uint8_t crc_hi = 0xFF; /* high CRC byte initialized */
 80010bc:	23ff      	movs	r3, #255	@ 0xff
 80010be:	73fb      	strb	r3, [r7, #15]
    uint8_t crc_lo = 0xFF; /* low CRC byte initialized */
 80010c0:	23ff      	movs	r3, #255	@ 0xff
 80010c2:	73bb      	strb	r3, [r7, #14]
    unsigned int i; /* will index into CRC lookup */

    /* pass through message buffer */
    while (buffer_length--) {
 80010c4:	e013      	b.n	80010ee <crc16+0x3e>
        i = crc_lo ^ *buffer++; /* calculate the CRC  */
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	1c5a      	adds	r2, r3, #1
 80010ca:	607a      	str	r2, [r7, #4]
 80010cc:	781a      	ldrb	r2, [r3, #0]
 80010ce:	7bbb      	ldrb	r3, [r7, #14]
 80010d0:	4053      	eors	r3, r2
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	60bb      	str	r3, [r7, #8]
        crc_lo = crc_hi ^ table_crc_hi[i];
 80010d6:	4a0f      	ldr	r2, [pc, #60]	@ (8001114 <crc16+0x64>)
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	4413      	add	r3, r2
 80010dc:	781a      	ldrb	r2, [r3, #0]
 80010de:	7bfb      	ldrb	r3, [r7, #15]
 80010e0:	4053      	eors	r3, r2
 80010e2:	73bb      	strb	r3, [r7, #14]
        crc_hi = table_crc_lo[i];
 80010e4:	4a0c      	ldr	r2, [pc, #48]	@ (8001118 <crc16+0x68>)
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	4413      	add	r3, r2
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	73fb      	strb	r3, [r7, #15]
    while (buffer_length--) {
 80010ee:	887b      	ldrh	r3, [r7, #2]
 80010f0:	1e5a      	subs	r2, r3, #1
 80010f2:	807a      	strh	r2, [r7, #2]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d1e6      	bne.n	80010c6 <crc16+0x16>
    }

    return (crc_hi << 8 | crc_lo);
 80010f8:	7bfb      	ldrb	r3, [r7, #15]
 80010fa:	021b      	lsls	r3, r3, #8
 80010fc:	b21a      	sxth	r2, r3
 80010fe:	7bbb      	ldrb	r3, [r7, #14]
 8001100:	b21b      	sxth	r3, r3
 8001102:	4313      	orrs	r3, r2
 8001104:	b21b      	sxth	r3, r3
 8001106:	b29b      	uxth	r3, r3
}
 8001108:	4618      	mov	r0, r3
 800110a:	3714      	adds	r7, #20
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	0800e8e0 	.word	0x0800e8e0
 8001118:	0800e9e0 	.word	0x0800e9e0

0800111c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001122:	4b0a      	ldr	r3, [pc, #40]	@ (800114c <HAL_MspInit+0x30>)
 8001124:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001128:	4a08      	ldr	r2, [pc, #32]	@ (800114c <HAL_MspInit+0x30>)
 800112a:	f043 0302 	orr.w	r3, r3, #2
 800112e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001132:	4b06      	ldr	r3, [pc, #24]	@ (800114c <HAL_MspInit+0x30>)
 8001134:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001138:	f003 0302 	and.w	r3, r3, #2
 800113c:	607b      	str	r3, [r7, #4]
 800113e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001140:	bf00      	nop
 8001142:	370c      	adds	r7, #12
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr
 800114c:	58024400 	.word	0x58024400

08001150 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b0bc      	sub	sp, #240	@ 0xf0
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001158:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]
 8001164:	60da      	str	r2, [r3, #12]
 8001166:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001168:	f107 0318 	add.w	r3, r7, #24
 800116c:	22c0      	movs	r2, #192	@ 0xc0
 800116e:	2100      	movs	r1, #0
 8001170:	4618      	mov	r0, r3
 8001172:	f00b fcf2 	bl	800cb5a <memset>
  if(hadc->Instance==ADC1)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a52      	ldr	r2, [pc, #328]	@ (80012c4 <HAL_ADC_MspInit+0x174>)
 800117c:	4293      	cmp	r3, r2
 800117e:	f040 809d 	bne.w	80012bc <HAL_ADC_MspInit+0x16c>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001182:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001186:	f04f 0300 	mov.w	r3, #0
 800118a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 800118e:	2304      	movs	r3, #4
 8001190:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 10;
 8001192:	230a      	movs	r3, #10
 8001194:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001196:	2302      	movs	r3, #2
 8001198:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800119a:	2302      	movs	r3, #2
 800119c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 800119e:	2302      	movs	r3, #2
 80011a0:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80011a2:	23c0      	movs	r3, #192	@ 0xc0
 80011a4:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80011a6:	2320      	movs	r3, #32
 80011a8:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80011aa:	2300      	movs	r3, #0
 80011ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80011ae:	2300      	movs	r3, #0
 80011b0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011b4:	f107 0318 	add.w	r3, r7, #24
 80011b8:	4618      	mov	r0, r3
 80011ba:	f005 fc95 	bl	8006ae8 <HAL_RCCEx_PeriphCLKConfig>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 80011c4:	f7ff fe9c 	bl	8000f00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80011c8:	4b3f      	ldr	r3, [pc, #252]	@ (80012c8 <HAL_ADC_MspInit+0x178>)
 80011ca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80011ce:	4a3e      	ldr	r2, [pc, #248]	@ (80012c8 <HAL_ADC_MspInit+0x178>)
 80011d0:	f043 0320 	orr.w	r3, r3, #32
 80011d4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80011d8:	4b3b      	ldr	r3, [pc, #236]	@ (80012c8 <HAL_ADC_MspInit+0x178>)
 80011da:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80011de:	f003 0320 	and.w	r3, r3, #32
 80011e2:	617b      	str	r3, [r7, #20]
 80011e4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e6:	4b38      	ldr	r3, [pc, #224]	@ (80012c8 <HAL_ADC_MspInit+0x178>)
 80011e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011ec:	4a36      	ldr	r2, [pc, #216]	@ (80012c8 <HAL_ADC_MspInit+0x178>)
 80011ee:	f043 0301 	orr.w	r3, r3, #1
 80011f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011f6:	4b34      	ldr	r3, [pc, #208]	@ (80012c8 <HAL_ADC_MspInit+0x178>)
 80011f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011fc:	f003 0301 	and.w	r3, r3, #1
 8001200:	613b      	str	r3, [r7, #16]
 8001202:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001204:	4b30      	ldr	r3, [pc, #192]	@ (80012c8 <HAL_ADC_MspInit+0x178>)
 8001206:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800120a:	4a2f      	ldr	r2, [pc, #188]	@ (80012c8 <HAL_ADC_MspInit+0x178>)
 800120c:	f043 0304 	orr.w	r3, r3, #4
 8001210:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001214:	4b2c      	ldr	r3, [pc, #176]	@ (80012c8 <HAL_ADC_MspInit+0x178>)
 8001216:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800121a:	f003 0304 	and.w	r3, r3, #4
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_INP18
    PA7     ------> ADC1_INP7
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|adc1_channel_7_isense_Pin;
 8001222:	2390      	movs	r3, #144	@ 0x90
 8001224:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001228:	2303      	movs	r3, #3
 800122a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122e:	2300      	movs	r3, #0
 8001230:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001234:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001238:	4619      	mov	r1, r3
 800123a:	4824      	ldr	r0, [pc, #144]	@ (80012cc <HAL_ADC_MspInit+0x17c>)
 800123c:	f004 f936 	bl	80054ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = adc1_channel_4_voutsense_Pin|adc1_channel_8_vinsense_Pin;
 8001240:	2330      	movs	r3, #48	@ 0x30
 8001242:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001246:	2303      	movs	r3, #3
 8001248:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124c:	2300      	movs	r3, #0
 800124e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001252:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001256:	4619      	mov	r1, r3
 8001258:	481d      	ldr	r0, [pc, #116]	@ (80012d0 <HAL_ADC_MspInit+0x180>)
 800125a:	f004 f927 	bl	80054ac <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 800125e:	4b1d      	ldr	r3, [pc, #116]	@ (80012d4 <HAL_ADC_MspInit+0x184>)
 8001260:	4a1d      	ldr	r2, [pc, #116]	@ (80012d8 <HAL_ADC_MspInit+0x188>)
 8001262:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001264:	4b1b      	ldr	r3, [pc, #108]	@ (80012d4 <HAL_ADC_MspInit+0x184>)
 8001266:	2209      	movs	r2, #9
 8001268:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800126a:	4b1a      	ldr	r3, [pc, #104]	@ (80012d4 <HAL_ADC_MspInit+0x184>)
 800126c:	2200      	movs	r2, #0
 800126e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001270:	4b18      	ldr	r3, [pc, #96]	@ (80012d4 <HAL_ADC_MspInit+0x184>)
 8001272:	2200      	movs	r2, #0
 8001274:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001276:	4b17      	ldr	r3, [pc, #92]	@ (80012d4 <HAL_ADC_MspInit+0x184>)
 8001278:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800127c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800127e:	4b15      	ldr	r3, [pc, #84]	@ (80012d4 <HAL_ADC_MspInit+0x184>)
 8001280:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001284:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001286:	4b13      	ldr	r3, [pc, #76]	@ (80012d4 <HAL_ADC_MspInit+0x184>)
 8001288:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800128c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800128e:	4b11      	ldr	r3, [pc, #68]	@ (80012d4 <HAL_ADC_MspInit+0x184>)
 8001290:	2200      	movs	r2, #0
 8001292:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001294:	4b0f      	ldr	r3, [pc, #60]	@ (80012d4 <HAL_ADC_MspInit+0x184>)
 8001296:	2200      	movs	r2, #0
 8001298:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800129a:	4b0e      	ldr	r3, [pc, #56]	@ (80012d4 <HAL_ADC_MspInit+0x184>)
 800129c:	2200      	movs	r2, #0
 800129e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80012a0:	480c      	ldr	r0, [pc, #48]	@ (80012d4 <HAL_ADC_MspInit+0x184>)
 80012a2:	f001 fedd 	bl	8003060 <HAL_DMA_Init>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <HAL_ADC_MspInit+0x160>
    {
      Error_Handler();
 80012ac:	f7ff fe28 	bl	8000f00 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	4a08      	ldr	r2, [pc, #32]	@ (80012d4 <HAL_ADC_MspInit+0x184>)
 80012b4:	64da      	str	r2, [r3, #76]	@ 0x4c
 80012b6:	4a07      	ldr	r2, [pc, #28]	@ (80012d4 <HAL_ADC_MspInit+0x184>)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80012bc:	bf00      	nop
 80012be:	37f0      	adds	r7, #240	@ 0xf0
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	40022000 	.word	0x40022000
 80012c8:	58024400 	.word	0x58024400
 80012cc:	58020000 	.word	0x58020000
 80012d0:	58020800 	.word	0x58020800
 80012d4:	24000258 	.word	0x24000258
 80012d8:	40020010 	.word	0x40020010

080012dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b0ba      	sub	sp, #232	@ 0xe8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	605a      	str	r2, [r3, #4]
 80012ee:	609a      	str	r2, [r3, #8]
 80012f0:	60da      	str	r2, [r3, #12]
 80012f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012f4:	f107 0310 	add.w	r3, r7, #16
 80012f8:	22c0      	movs	r2, #192	@ 0xc0
 80012fa:	2100      	movs	r1, #0
 80012fc:	4618      	mov	r0, r3
 80012fe:	f00b fc2c 	bl	800cb5a <memset>
  if(hi2c->Instance==I2C1)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a26      	ldr	r2, [pc, #152]	@ (80013a0 <HAL_I2C_MspInit+0xc4>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d145      	bne.n	8001398 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800130c:	f04f 0208 	mov.w	r2, #8
 8001310:	f04f 0300 	mov.w	r3, #0
 8001314:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001318:	2300      	movs	r3, #0
 800131a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800131e:	f107 0310 	add.w	r3, r7, #16
 8001322:	4618      	mov	r0, r3
 8001324:	f005 fbe0 	bl	8006ae8 <HAL_RCCEx_PeriphCLKConfig>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800132e:	f7ff fde7 	bl	8000f00 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001332:	4b1c      	ldr	r3, [pc, #112]	@ (80013a4 <HAL_I2C_MspInit+0xc8>)
 8001334:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001338:	4a1a      	ldr	r2, [pc, #104]	@ (80013a4 <HAL_I2C_MspInit+0xc8>)
 800133a:	f043 0302 	orr.w	r3, r3, #2
 800133e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001342:	4b18      	ldr	r3, [pc, #96]	@ (80013a4 <HAL_I2C_MspInit+0xc8>)
 8001344:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001348:	f003 0302 	and.w	r3, r3, #2
 800134c:	60fb      	str	r3, [r7, #12]
 800134e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001350:	23c0      	movs	r3, #192	@ 0xc0
 8001352:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001356:	2312      	movs	r3, #18
 8001358:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135c:	2300      	movs	r3, #0
 800135e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001362:	2300      	movs	r3, #0
 8001364:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001368:	2304      	movs	r3, #4
 800136a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800136e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001372:	4619      	mov	r1, r3
 8001374:	480c      	ldr	r0, [pc, #48]	@ (80013a8 <HAL_I2C_MspInit+0xcc>)
 8001376:	f004 f899 	bl	80054ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800137a:	4b0a      	ldr	r3, [pc, #40]	@ (80013a4 <HAL_I2C_MspInit+0xc8>)
 800137c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001380:	4a08      	ldr	r2, [pc, #32]	@ (80013a4 <HAL_I2C_MspInit+0xc8>)
 8001382:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001386:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800138a:	4b06      	ldr	r3, [pc, #24]	@ (80013a4 <HAL_I2C_MspInit+0xc8>)
 800138c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001390:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001394:	60bb      	str	r3, [r7, #8]
 8001396:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001398:	bf00      	nop
 800139a:	37e8      	adds	r7, #232	@ 0xe8
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	40005400 	.word	0x40005400
 80013a4:	58024400 	.word	0x58024400
 80013a8:	58020400 	.word	0x58020400

080013ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b0ba      	sub	sp, #232	@ 0xe8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	605a      	str	r2, [r3, #4]
 80013be:	609a      	str	r2, [r3, #8]
 80013c0:	60da      	str	r2, [r3, #12]
 80013c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013c4:	f107 0310 	add.w	r3, r7, #16
 80013c8:	22c0      	movs	r2, #192	@ 0xc0
 80013ca:	2100      	movs	r1, #0
 80013cc:	4618      	mov	r0, r3
 80013ce:	f00b fbc4 	bl	800cb5a <memset>
  if(hspi->Instance==SPI3)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a2a      	ldr	r2, [pc, #168]	@ (8001480 <HAL_SPI_MspInit+0xd4>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d14d      	bne.n	8001478 <HAL_SPI_MspInit+0xcc>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 80013dc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80013e0:	f04f 0300 	mov.w	r3, #0
 80013e4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013ec:	f107 0310 	add.w	r3, r7, #16
 80013f0:	4618      	mov	r0, r3
 80013f2:	f005 fb79 	bl	8006ae8 <HAL_RCCEx_PeriphCLKConfig>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80013fc:	f7ff fd80 	bl	8000f00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001400:	4b20      	ldr	r3, [pc, #128]	@ (8001484 <HAL_SPI_MspInit+0xd8>)
 8001402:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001406:	4a1f      	ldr	r2, [pc, #124]	@ (8001484 <HAL_SPI_MspInit+0xd8>)
 8001408:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800140c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001410:	4b1c      	ldr	r3, [pc, #112]	@ (8001484 <HAL_SPI_MspInit+0xd8>)
 8001412:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001416:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800141e:	4b19      	ldr	r3, [pc, #100]	@ (8001484 <HAL_SPI_MspInit+0xd8>)
 8001420:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001424:	4a17      	ldr	r2, [pc, #92]	@ (8001484 <HAL_SPI_MspInit+0xd8>)
 8001426:	f043 0304 	orr.w	r3, r3, #4
 800142a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800142e:	4b15      	ldr	r3, [pc, #84]	@ (8001484 <HAL_SPI_MspInit+0xd8>)
 8001430:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001434:	f003 0304 	and.w	r3, r3, #4
 8001438:	60bb      	str	r3, [r7, #8]
 800143a:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800143c:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001440:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001444:	2302      	movs	r3, #2
 8001446:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144a:	2300      	movs	r3, #0
 800144c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001450:	2300      	movs	r3, #0
 8001452:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001456:	2306      	movs	r3, #6
 8001458:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800145c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001460:	4619      	mov	r1, r3
 8001462:	4809      	ldr	r0, [pc, #36]	@ (8001488 <HAL_SPI_MspInit+0xdc>)
 8001464:	f004 f822 	bl	80054ac <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8001468:	2200      	movs	r2, #0
 800146a:	2100      	movs	r1, #0
 800146c:	2033      	movs	r0, #51	@ 0x33
 800146e:	f001 fd4a 	bl	8002f06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8001472:	2033      	movs	r0, #51	@ 0x33
 8001474:	f001 fd61 	bl	8002f3a <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001478:	bf00      	nop
 800147a:	37e8      	adds	r7, #232	@ 0xe8
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	40003c00 	.word	0x40003c00
 8001484:	58024400 	.word	0x58024400
 8001488:	58020800 	.word	0x58020800

0800148c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a19      	ldr	r2, [pc, #100]	@ (8001500 <HAL_TIM_Base_MspInit+0x74>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d10f      	bne.n	80014be <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800149e:	4b19      	ldr	r3, [pc, #100]	@ (8001504 <HAL_TIM_Base_MspInit+0x78>)
 80014a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80014a4:	4a17      	ldr	r2, [pc, #92]	@ (8001504 <HAL_TIM_Base_MspInit+0x78>)
 80014a6:	f043 0301 	orr.w	r3, r3, #1
 80014aa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80014ae:	4b15      	ldr	r3, [pc, #84]	@ (8001504 <HAL_TIM_Base_MspInit+0x78>)
 80014b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80014b4:	f003 0301 	and.w	r3, r3, #1
 80014b8:	60fb      	str	r3, [r7, #12]
 80014ba:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80014bc:	e01b      	b.n	80014f6 <HAL_TIM_Base_MspInit+0x6a>
  else if(htim_base->Instance==TIM4)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a11      	ldr	r2, [pc, #68]	@ (8001508 <HAL_TIM_Base_MspInit+0x7c>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d116      	bne.n	80014f6 <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80014c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001504 <HAL_TIM_Base_MspInit+0x78>)
 80014ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80014ce:	4a0d      	ldr	r2, [pc, #52]	@ (8001504 <HAL_TIM_Base_MspInit+0x78>)
 80014d0:	f043 0304 	orr.w	r3, r3, #4
 80014d4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80014d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001504 <HAL_TIM_Base_MspInit+0x78>)
 80014da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80014de:	f003 0304 	and.w	r3, r3, #4
 80014e2:	60bb      	str	r3, [r7, #8]
 80014e4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80014e6:	2200      	movs	r2, #0
 80014e8:	2100      	movs	r1, #0
 80014ea:	201e      	movs	r0, #30
 80014ec:	f001 fd0b 	bl	8002f06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80014f0:	201e      	movs	r0, #30
 80014f2:	f001 fd22 	bl	8002f3a <HAL_NVIC_EnableIRQ>
}
 80014f6:	bf00      	nop
 80014f8:	3710      	adds	r7, #16
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	40010000 	.word	0x40010000
 8001504:	58024400 	.word	0x58024400
 8001508:	40000800 	.word	0x40000800

0800150c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b0bc      	sub	sp, #240	@ 0xf0
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001514:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	605a      	str	r2, [r3, #4]
 800151e:	609a      	str	r2, [r3, #8]
 8001520:	60da      	str	r2, [r3, #12]
 8001522:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001524:	f107 0318 	add.w	r3, r7, #24
 8001528:	22c0      	movs	r2, #192	@ 0xc0
 800152a:	2100      	movs	r1, #0
 800152c:	4618      	mov	r0, r3
 800152e:	f00b fb14 	bl	800cb5a <memset>
  if(huart->Instance==UART7)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a50      	ldr	r2, [pc, #320]	@ (8001678 <HAL_UART_MspInit+0x16c>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d146      	bne.n	80015ca <HAL_UART_MspInit+0xbe>

  /* USER CODE END UART7_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 800153c:	f04f 0202 	mov.w	r2, #2
 8001540:	f04f 0300 	mov.w	r3, #0
 8001544:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001548:	2300      	movs	r3, #0
 800154a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800154e:	f107 0318 	add.w	r3, r7, #24
 8001552:	4618      	mov	r0, r3
 8001554:	f005 fac8 	bl	8006ae8 <HAL_RCCEx_PeriphCLKConfig>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800155e:	f7ff fccf 	bl	8000f00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8001562:	4b46      	ldr	r3, [pc, #280]	@ (800167c <HAL_UART_MspInit+0x170>)
 8001564:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001568:	4a44      	ldr	r2, [pc, #272]	@ (800167c <HAL_UART_MspInit+0x170>)
 800156a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800156e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001572:	4b42      	ldr	r3, [pc, #264]	@ (800167c <HAL_UART_MspInit+0x170>)
 8001574:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001578:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800157c:	617b      	str	r3, [r7, #20]
 800157e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001580:	4b3e      	ldr	r3, [pc, #248]	@ (800167c <HAL_UART_MspInit+0x170>)
 8001582:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001586:	4a3d      	ldr	r2, [pc, #244]	@ (800167c <HAL_UART_MspInit+0x170>)
 8001588:	f043 0302 	orr.w	r3, r3, #2
 800158c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001590:	4b3a      	ldr	r3, [pc, #232]	@ (800167c <HAL_UART_MspInit+0x170>)
 8001592:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001596:	f003 0302 	and.w	r3, r3, #2
 800159a:	613b      	str	r3, [r7, #16]
 800159c:	693b      	ldr	r3, [r7, #16]
    /**UART7 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> UART7_RX
    PB4 (NJTRST)     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800159e:	2318      	movs	r3, #24
 80015a0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a4:	2302      	movs	r3, #2
 80015a6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015aa:	2300      	movs	r3, #0
 80015ac:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b0:	2300      	movs	r3, #0
 80015b2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF11_UART7;
 80015b6:	230b      	movs	r3, #11
 80015b8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015bc:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80015c0:	4619      	mov	r1, r3
 80015c2:	482f      	ldr	r0, [pc, #188]	@ (8001680 <HAL_UART_MspInit+0x174>)
 80015c4:	f003 ff72 	bl	80054ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80015c8:	e052      	b.n	8001670 <HAL_UART_MspInit+0x164>
  else if(huart->Instance==USART2)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a2d      	ldr	r2, [pc, #180]	@ (8001684 <HAL_UART_MspInit+0x178>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d14d      	bne.n	8001670 <HAL_UART_MspInit+0x164>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80015d4:	f04f 0202 	mov.w	r2, #2
 80015d8:	f04f 0300 	mov.w	r3, #0
 80015dc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80015e0:	2300      	movs	r3, #0
 80015e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015e6:	f107 0318 	add.w	r3, r7, #24
 80015ea:	4618      	mov	r0, r3
 80015ec:	f005 fa7c 	bl	8006ae8 <HAL_RCCEx_PeriphCLKConfig>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <HAL_UART_MspInit+0xee>
      Error_Handler();
 80015f6:	f7ff fc83 	bl	8000f00 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80015fa:	4b20      	ldr	r3, [pc, #128]	@ (800167c <HAL_UART_MspInit+0x170>)
 80015fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001600:	4a1e      	ldr	r2, [pc, #120]	@ (800167c <HAL_UART_MspInit+0x170>)
 8001602:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001606:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800160a:	4b1c      	ldr	r3, [pc, #112]	@ (800167c <HAL_UART_MspInit+0x170>)
 800160c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001610:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001614:	60fb      	str	r3, [r7, #12]
 8001616:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001618:	4b18      	ldr	r3, [pc, #96]	@ (800167c <HAL_UART_MspInit+0x170>)
 800161a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800161e:	4a17      	ldr	r2, [pc, #92]	@ (800167c <HAL_UART_MspInit+0x170>)
 8001620:	f043 0308 	orr.w	r3, r3, #8
 8001624:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001628:	4b14      	ldr	r3, [pc, #80]	@ (800167c <HAL_UART_MspInit+0x170>)
 800162a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800162e:	f003 0308 	and.w	r3, r3, #8
 8001632:	60bb      	str	r3, [r7, #8]
 8001634:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MODBUS_TX2_Pin|MODBUS_RX2_Pin;
 8001636:	2360      	movs	r3, #96	@ 0x60
 8001638:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163c:	2302      	movs	r3, #2
 800163e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001642:	2300      	movs	r3, #0
 8001644:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001648:	2300      	movs	r3, #0
 800164a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800164e:	2307      	movs	r3, #7
 8001650:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001654:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001658:	4619      	mov	r1, r3
 800165a:	480b      	ldr	r0, [pc, #44]	@ (8001688 <HAL_UART_MspInit+0x17c>)
 800165c:	f003 ff26 	bl	80054ac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001660:	2200      	movs	r2, #0
 8001662:	2100      	movs	r1, #0
 8001664:	2026      	movs	r0, #38	@ 0x26
 8001666:	f001 fc4e 	bl	8002f06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800166a:	2026      	movs	r0, #38	@ 0x26
 800166c:	f001 fc65 	bl	8002f3a <HAL_NVIC_EnableIRQ>
}
 8001670:	bf00      	nop
 8001672:	37f0      	adds	r7, #240	@ 0xf0
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	40007800 	.word	0x40007800
 800167c:	58024400 	.word	0x58024400
 8001680:	58020400 	.word	0x58020400
 8001684:	40004400 	.word	0x40004400
 8001688:	58020c00 	.word	0x58020c00

0800168c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001690:	bf00      	nop
 8001692:	e7fd      	b.n	8001690 <NMI_Handler+0x4>

08001694 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001698:	bf00      	nop
 800169a:	e7fd      	b.n	8001698 <HardFault_Handler+0x4>

0800169c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016a0:	bf00      	nop
 80016a2:	e7fd      	b.n	80016a0 <MemManage_Handler+0x4>

080016a4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016a8:	bf00      	nop
 80016aa:	e7fd      	b.n	80016a8 <BusFault_Handler+0x4>

080016ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016b0:	bf00      	nop
 80016b2:	e7fd      	b.n	80016b0 <UsageFault_Handler+0x4>

080016b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016b8:	bf00      	nop
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr

080016c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016c2:	b480      	push	{r7}
 80016c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016c6:	bf00      	nop
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016d4:	bf00      	nop
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr

080016de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016de:	b580      	push	{r7, lr}
 80016e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016e2:	f000 fa6f 	bl	8001bc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016e6:	bf00      	nop
 80016e8:	bd80      	pop	{r7, pc}
	...

080016ec <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80016f0:	4802      	ldr	r0, [pc, #8]	@ (80016fc <DMA1_Stream0_IRQHandler+0x10>)
 80016f2:	f002 fd75 	bl	80041e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80016f6:	bf00      	nop
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	24000258 	.word	0x24000258

08001700 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001704:	4802      	ldr	r0, [pc, #8]	@ (8001710 <TIM4_IRQHandler+0x10>)
 8001706:	f008 fb3d 	bl	8009d84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	240003f8 	.word	0x240003f8

08001714 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001718:	4802      	ldr	r0, [pc, #8]	@ (8001724 <USART2_IRQHandler+0x10>)
 800171a:	f009 f829 	bl	800a770 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800171e:	bf00      	nop
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	240004d8 	.word	0x240004d8

08001728 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 800172c:	4802      	ldr	r0, [pc, #8]	@ (8001738 <SPI3_IRQHandler+0x10>)
 800172e:	f007 fffd 	bl	800972c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8001732:	bf00      	nop
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	24000324 	.word	0x24000324

0800173c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  return 1;
 8001740:	2301      	movs	r3, #1
}
 8001742:	4618      	mov	r0, r3
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr

0800174c <_kill>:

int _kill(int pid, int sig)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001756:	f00b fa53 	bl	800cc00 <__errno>
 800175a:	4603      	mov	r3, r0
 800175c:	2216      	movs	r2, #22
 800175e:	601a      	str	r2, [r3, #0]
  return -1;
 8001760:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001764:	4618      	mov	r0, r3
 8001766:	3708      	adds	r7, #8
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}

0800176c <_exit>:

void _exit (int status)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001774:	f04f 31ff 	mov.w	r1, #4294967295
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f7ff ffe7 	bl	800174c <_kill>
  while (1) {}    /* Make sure we hang here */
 800177e:	bf00      	nop
 8001780:	e7fd      	b.n	800177e <_exit+0x12>

08001782 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001782:	b580      	push	{r7, lr}
 8001784:	b086      	sub	sp, #24
 8001786:	af00      	add	r7, sp, #0
 8001788:	60f8      	str	r0, [r7, #12]
 800178a:	60b9      	str	r1, [r7, #8]
 800178c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800178e:	2300      	movs	r3, #0
 8001790:	617b      	str	r3, [r7, #20]
 8001792:	e00a      	b.n	80017aa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001794:	f3af 8000 	nop.w
 8001798:	4601      	mov	r1, r0
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	1c5a      	adds	r2, r3, #1
 800179e:	60ba      	str	r2, [r7, #8]
 80017a0:	b2ca      	uxtb	r2, r1
 80017a2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	3301      	adds	r3, #1
 80017a8:	617b      	str	r3, [r7, #20]
 80017aa:	697a      	ldr	r2, [r7, #20]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	429a      	cmp	r2, r3
 80017b0:	dbf0      	blt.n	8001794 <_read+0x12>
  }

  return len;
 80017b2:	687b      	ldr	r3, [r7, #4]
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3718      	adds	r7, #24
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}

080017bc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b086      	sub	sp, #24
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	60f8      	str	r0, [r7, #12]
 80017c4:	60b9      	str	r1, [r7, #8]
 80017c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017c8:	2300      	movs	r3, #0
 80017ca:	617b      	str	r3, [r7, #20]
 80017cc:	e009      	b.n	80017e2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	1c5a      	adds	r2, r3, #1
 80017d2:	60ba      	str	r2, [r7, #8]
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	3301      	adds	r3, #1
 80017e0:	617b      	str	r3, [r7, #20]
 80017e2:	697a      	ldr	r2, [r7, #20]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	429a      	cmp	r2, r3
 80017e8:	dbf1      	blt.n	80017ce <_write+0x12>
  }
  return len;
 80017ea:	687b      	ldr	r3, [r7, #4]
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	3718      	adds	r7, #24
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}

080017f4 <_close>:

int _close(int file)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80017fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001800:	4618      	mov	r0, r3
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800181c:	605a      	str	r2, [r3, #4]
  return 0;
 800181e:	2300      	movs	r3, #0
}
 8001820:	4618      	mov	r0, r3
 8001822:	370c      	adds	r7, #12
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr

0800182c <_isatty>:

int _isatty(int file)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001834:	2301      	movs	r3, #1
}
 8001836:	4618      	mov	r0, r3
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr

08001842 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001842:	b480      	push	{r7}
 8001844:	b085      	sub	sp, #20
 8001846:	af00      	add	r7, sp, #0
 8001848:	60f8      	str	r0, [r7, #12]
 800184a:	60b9      	str	r1, [r7, #8]
 800184c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800184e:	2300      	movs	r3, #0
}
 8001850:	4618      	mov	r0, r3
 8001852:	3714      	adds	r7, #20
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b086      	sub	sp, #24
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001864:	4a14      	ldr	r2, [pc, #80]	@ (80018b8 <_sbrk+0x5c>)
 8001866:	4b15      	ldr	r3, [pc, #84]	@ (80018bc <_sbrk+0x60>)
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001870:	4b13      	ldr	r3, [pc, #76]	@ (80018c0 <_sbrk+0x64>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d102      	bne.n	800187e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001878:	4b11      	ldr	r3, [pc, #68]	@ (80018c0 <_sbrk+0x64>)
 800187a:	4a12      	ldr	r2, [pc, #72]	@ (80018c4 <_sbrk+0x68>)
 800187c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800187e:	4b10      	ldr	r3, [pc, #64]	@ (80018c0 <_sbrk+0x64>)
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4413      	add	r3, r2
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	429a      	cmp	r2, r3
 800188a:	d207      	bcs.n	800189c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800188c:	f00b f9b8 	bl	800cc00 <__errno>
 8001890:	4603      	mov	r3, r0
 8001892:	220c      	movs	r2, #12
 8001894:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001896:	f04f 33ff 	mov.w	r3, #4294967295
 800189a:	e009      	b.n	80018b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800189c:	4b08      	ldr	r3, [pc, #32]	@ (80018c0 <_sbrk+0x64>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018a2:	4b07      	ldr	r3, [pc, #28]	@ (80018c0 <_sbrk+0x64>)
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4413      	add	r3, r2
 80018aa:	4a05      	ldr	r2, [pc, #20]	@ (80018c0 <_sbrk+0x64>)
 80018ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018ae:	68fb      	ldr	r3, [r7, #12]
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3718      	adds	r7, #24
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	24080000 	.word	0x24080000
 80018bc:	00000400 	.word	0x00000400
 80018c0:	240005e0 	.word	0x240005e0
 80018c4:	24000740 	.word	0x24000740

080018c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80018cc:	4b37      	ldr	r3, [pc, #220]	@ (80019ac <SystemInit+0xe4>)
 80018ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018d2:	4a36      	ldr	r2, [pc, #216]	@ (80019ac <SystemInit+0xe4>)
 80018d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80018dc:	4b34      	ldr	r3, [pc, #208]	@ (80019b0 <SystemInit+0xe8>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 030f 	and.w	r3, r3, #15
 80018e4:	2b06      	cmp	r3, #6
 80018e6:	d807      	bhi.n	80018f8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80018e8:	4b31      	ldr	r3, [pc, #196]	@ (80019b0 <SystemInit+0xe8>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f023 030f 	bic.w	r3, r3, #15
 80018f0:	4a2f      	ldr	r2, [pc, #188]	@ (80019b0 <SystemInit+0xe8>)
 80018f2:	f043 0307 	orr.w	r3, r3, #7
 80018f6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
	  RCC->CR |= RCC_CR_HSION;
 80018f8:	4b2e      	ldr	r3, [pc, #184]	@ (80019b4 <SystemInit+0xec>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a2d      	ldr	r2, [pc, #180]	@ (80019b4 <SystemInit+0xec>)
 80018fe:	f043 0301 	orr.w	r3, r3, #1
 8001902:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001904:	4b2b      	ldr	r3, [pc, #172]	@ (80019b4 <SystemInit+0xec>)
 8001906:	2200      	movs	r2, #0
 8001908:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800190a:	4b2a      	ldr	r3, [pc, #168]	@ (80019b4 <SystemInit+0xec>)
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	4929      	ldr	r1, [pc, #164]	@ (80019b4 <SystemInit+0xec>)
 8001910:	4b29      	ldr	r3, [pc, #164]	@ (80019b8 <SystemInit+0xf0>)
 8001912:	4013      	ands	r3, r2
 8001914:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001916:	4b26      	ldr	r3, [pc, #152]	@ (80019b0 <SystemInit+0xe8>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0308 	and.w	r3, r3, #8
 800191e:	2b00      	cmp	r3, #0
 8001920:	d007      	beq.n	8001932 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001922:	4b23      	ldr	r3, [pc, #140]	@ (80019b0 <SystemInit+0xe8>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f023 030f 	bic.w	r3, r3, #15
 800192a:	4a21      	ldr	r2, [pc, #132]	@ (80019b0 <SystemInit+0xe8>)
 800192c:	f043 0307 	orr.w	r3, r3, #7
 8001930:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001932:	4b20      	ldr	r3, [pc, #128]	@ (80019b4 <SystemInit+0xec>)
 8001934:	2200      	movs	r2, #0
 8001936:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001938:	4b1e      	ldr	r3, [pc, #120]	@ (80019b4 <SystemInit+0xec>)
 800193a:	2200      	movs	r2, #0
 800193c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800193e:	4b1d      	ldr	r3, [pc, #116]	@ (80019b4 <SystemInit+0xec>)
 8001940:	2200      	movs	r2, #0
 8001942:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001944:	4b1b      	ldr	r3, [pc, #108]	@ (80019b4 <SystemInit+0xec>)
 8001946:	4a1d      	ldr	r2, [pc, #116]	@ (80019bc <SystemInit+0xf4>)
 8001948:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800194a:	4b1a      	ldr	r3, [pc, #104]	@ (80019b4 <SystemInit+0xec>)
 800194c:	4a1c      	ldr	r2, [pc, #112]	@ (80019c0 <SystemInit+0xf8>)
 800194e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001950:	4b18      	ldr	r3, [pc, #96]	@ (80019b4 <SystemInit+0xec>)
 8001952:	4a1c      	ldr	r2, [pc, #112]	@ (80019c4 <SystemInit+0xfc>)
 8001954:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001956:	4b17      	ldr	r3, [pc, #92]	@ (80019b4 <SystemInit+0xec>)
 8001958:	2200      	movs	r2, #0
 800195a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800195c:	4b15      	ldr	r3, [pc, #84]	@ (80019b4 <SystemInit+0xec>)
 800195e:	4a19      	ldr	r2, [pc, #100]	@ (80019c4 <SystemInit+0xfc>)
 8001960:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001962:	4b14      	ldr	r3, [pc, #80]	@ (80019b4 <SystemInit+0xec>)
 8001964:	2200      	movs	r2, #0
 8001966:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001968:	4b12      	ldr	r3, [pc, #72]	@ (80019b4 <SystemInit+0xec>)
 800196a:	4a16      	ldr	r2, [pc, #88]	@ (80019c4 <SystemInit+0xfc>)
 800196c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800196e:	4b11      	ldr	r3, [pc, #68]	@ (80019b4 <SystemInit+0xec>)
 8001970:	2200      	movs	r2, #0
 8001972:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001974:	4b0f      	ldr	r3, [pc, #60]	@ (80019b4 <SystemInit+0xec>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a0e      	ldr	r2, [pc, #56]	@ (80019b4 <SystemInit+0xec>)
 800197a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800197e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001980:	4b0c      	ldr	r3, [pc, #48]	@ (80019b4 <SystemInit+0xec>)
 8001982:	2200      	movs	r2, #0
 8001984:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001986:	4b10      	ldr	r3, [pc, #64]	@ (80019c8 <SystemInit+0x100>)
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	4b10      	ldr	r3, [pc, #64]	@ (80019cc <SystemInit+0x104>)
 800198c:	4013      	ands	r3, r2
 800198e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001992:	d202      	bcs.n	800199a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001994:	4b0e      	ldr	r3, [pc, #56]	@ (80019d0 <SystemInit+0x108>)
 8001996:	2201      	movs	r2, #1
 8001998:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800199a:	4b0e      	ldr	r3, [pc, #56]	@ (80019d4 <SystemInit+0x10c>)
 800199c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80019a0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80019a2:	bf00      	nop
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr
 80019ac:	e000ed00 	.word	0xe000ed00
 80019b0:	52002000 	.word	0x52002000
 80019b4:	58024400 	.word	0x58024400
 80019b8:	eaf6ed7f 	.word	0xeaf6ed7f
 80019bc:	02020200 	.word	0x02020200
 80019c0:	01ff0000 	.word	0x01ff0000
 80019c4:	01010280 	.word	0x01010280
 80019c8:	5c001000 	.word	0x5c001000
 80019cc:	ffff0000 	.word	0xffff0000
 80019d0:	51008108 	.word	0x51008108
 80019d4:	52004000 	.word	0x52004000

080019d8 <HAL_TIM_PeriodElapsedCallback>:
// Use volatile for variables shared between ISR and main
volatile int check = 0;
volatile int a = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM4)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a25      	ldr	r2, [pc, #148]	@ (8001a7c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d144      	bne.n	8001a74 <HAL_TIM_PeriodElapsedCallback+0x9c>
    {
        if(check <= a)
 80019ea:	4b25      	ldr	r3, [pc, #148]	@ (8001a80 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	4b25      	ldr	r3, [pc, #148]	@ (8001a84 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	429a      	cmp	r2, r3
 80019f4:	dc18      	bgt.n	8001a28 <HAL_TIM_PeriodElapsedCallback+0x50>
        {
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 80019f6:	2201      	movs	r2, #1
 80019f8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80019fc:	4822      	ldr	r0, [pc, #136]	@ (8001a88 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80019fe:	f003 ff05 	bl	800580c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8001a02:	2201      	movs	r2, #1
 8001a04:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001a08:	481f      	ldr	r0, [pc, #124]	@ (8001a88 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001a0a:	f003 feff 	bl	800580c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8001a0e:	2200      	movs	r2, #0
 8001a10:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001a14:	481c      	ldr	r0, [pc, #112]	@ (8001a88 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001a16:	f003 fef9 	bl	800580c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001a20:	4819      	ldr	r0, [pc, #100]	@ (8001a88 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001a22:	f003 fef3 	bl	800580c <HAL_GPIO_WritePin>
 8001a26:	e020      	b.n	8001a6a <HAL_TIM_PeriodElapsedCallback+0x92>
        }
        else if (check <= 1000)  // Changed condition
 8001a28:	4b15      	ldr	r3, [pc, #84]	@ (8001a80 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001a30:	dc18      	bgt.n	8001a64 <HAL_TIM_PeriodElapsedCallback+0x8c>
        {
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8001a32:	2200      	movs	r2, #0
 8001a34:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001a38:	4813      	ldr	r0, [pc, #76]	@ (8001a88 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001a3a:	f003 fee7 	bl	800580c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8001a3e:	2200      	movs	r2, #0
 8001a40:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001a44:	4810      	ldr	r0, [pc, #64]	@ (8001a88 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001a46:	f003 fee1 	bl	800580c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001a50:	480d      	ldr	r0, [pc, #52]	@ (8001a88 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001a52:	f003 fedb 	bl	800580c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8001a56:	2201      	movs	r2, #1
 8001a58:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001a5c:	480a      	ldr	r0, [pc, #40]	@ (8001a88 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001a5e:	f003 fed5 	bl	800580c <HAL_GPIO_WritePin>
 8001a62:	e002      	b.n	8001a6a <HAL_TIM_PeriodElapsedCallback+0x92>
        }
        else
        {
            check = 0;
 8001a64:	4b06      	ldr	r3, [pc, #24]	@ (8001a80 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	601a      	str	r2, [r3, #0]
        }

        check++;
 8001a6a:	4b05      	ldr	r3, [pc, #20]	@ (8001a80 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	3301      	adds	r3, #1
 8001a70:	4a03      	ldr	r2, [pc, #12]	@ (8001a80 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001a72:	6013      	str	r3, [r2, #0]
    }
}
 8001a74:	bf00      	nop
 8001a76:	3708      	adds	r7, #8
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	40000800 	.word	0x40000800
 8001a80:	240005e4 	.word	0x240005e4
 8001a84:	240005e8 	.word	0x240005e8
 8001a88:	58020c00 	.word	0x58020c00

08001a8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001a8c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ac4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001a90:	f7ff ff1a 	bl	80018c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a94:	480c      	ldr	r0, [pc, #48]	@ (8001ac8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a96:	490d      	ldr	r1, [pc, #52]	@ (8001acc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a98:	4a0d      	ldr	r2, [pc, #52]	@ (8001ad0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a9c:	e002      	b.n	8001aa4 <LoopCopyDataInit>

08001a9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001aa0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aa2:	3304      	adds	r3, #4

08001aa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001aa4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aa6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001aa8:	d3f9      	bcc.n	8001a9e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aaa:	4a0a      	ldr	r2, [pc, #40]	@ (8001ad4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001aac:	4c0a      	ldr	r4, [pc, #40]	@ (8001ad8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001aae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ab0:	e001      	b.n	8001ab6 <LoopFillZerobss>

08001ab2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ab2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ab4:	3204      	adds	r2, #4

08001ab6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ab6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ab8:	d3fb      	bcc.n	8001ab2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001aba:	f00b f8a7 	bl	800cc0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001abe:	f7fe fddf 	bl	8000680 <main>
  bx  lr
 8001ac2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ac4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001ac8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001acc:	240001d8 	.word	0x240001d8
  ldr r2, =_sidata
 8001ad0:	0800eea0 	.word	0x0800eea0
  ldr r2, =_sbss
 8001ad4:	240001d8 	.word	0x240001d8
  ldr r4, =_ebss
 8001ad8:	2400073c 	.word	0x2400073c

08001adc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001adc:	e7fe      	b.n	8001adc <ADC3_IRQHandler>
	...

08001ae0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ae6:	2003      	movs	r0, #3
 8001ae8:	f001 fa02 	bl	8002ef0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001aec:	f004 fe26 	bl	800673c <HAL_RCC_GetSysClockFreq>
 8001af0:	4602      	mov	r2, r0
 8001af2:	4b15      	ldr	r3, [pc, #84]	@ (8001b48 <HAL_Init+0x68>)
 8001af4:	699b      	ldr	r3, [r3, #24]
 8001af6:	0a1b      	lsrs	r3, r3, #8
 8001af8:	f003 030f 	and.w	r3, r3, #15
 8001afc:	4913      	ldr	r1, [pc, #76]	@ (8001b4c <HAL_Init+0x6c>)
 8001afe:	5ccb      	ldrb	r3, [r1, r3]
 8001b00:	f003 031f 	and.w	r3, r3, #31
 8001b04:	fa22 f303 	lsr.w	r3, r2, r3
 8001b08:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001b0a:	4b0f      	ldr	r3, [pc, #60]	@ (8001b48 <HAL_Init+0x68>)
 8001b0c:	699b      	ldr	r3, [r3, #24]
 8001b0e:	f003 030f 	and.w	r3, r3, #15
 8001b12:	4a0e      	ldr	r2, [pc, #56]	@ (8001b4c <HAL_Init+0x6c>)
 8001b14:	5cd3      	ldrb	r3, [r2, r3]
 8001b16:	f003 031f 	and.w	r3, r3, #31
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	fa22 f303 	lsr.w	r3, r2, r3
 8001b20:	4a0b      	ldr	r2, [pc, #44]	@ (8001b50 <HAL_Init+0x70>)
 8001b22:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001b24:	4a0b      	ldr	r2, [pc, #44]	@ (8001b54 <HAL_Init+0x74>)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b2a:	200f      	movs	r0, #15
 8001b2c:	f000 f814 	bl	8001b58 <HAL_InitTick>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e002      	b.n	8001b40 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001b3a:	f7ff faef 	bl	800111c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b3e:	2300      	movs	r3, #0
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3708      	adds	r7, #8
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	58024400 	.word	0x58024400
 8001b4c:	0800eae0 	.word	0x0800eae0
 8001b50:	24000004 	.word	0x24000004
 8001b54:	24000000 	.word	0x24000000

08001b58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001b60:	4b15      	ldr	r3, [pc, #84]	@ (8001bb8 <HAL_InitTick+0x60>)
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d101      	bne.n	8001b6c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e021      	b.n	8001bb0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001b6c:	4b13      	ldr	r3, [pc, #76]	@ (8001bbc <HAL_InitTick+0x64>)
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	4b11      	ldr	r3, [pc, #68]	@ (8001bb8 <HAL_InitTick+0x60>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	4619      	mov	r1, r3
 8001b76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b82:	4618      	mov	r0, r3
 8001b84:	f001 f9e7 	bl	8002f56 <HAL_SYSTICK_Config>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e00e      	b.n	8001bb0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2b0f      	cmp	r3, #15
 8001b96:	d80a      	bhi.n	8001bae <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b98:	2200      	movs	r2, #0
 8001b9a:	6879      	ldr	r1, [r7, #4]
 8001b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001ba0:	f001 f9b1 	bl	8002f06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ba4:	4a06      	ldr	r2, [pc, #24]	@ (8001bc0 <HAL_InitTick+0x68>)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001baa:	2300      	movs	r3, #0
 8001bac:	e000      	b.n	8001bb0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3708      	adds	r7, #8
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	2400000c 	.word	0x2400000c
 8001bbc:	24000000 	.word	0x24000000
 8001bc0:	24000008 	.word	0x24000008

08001bc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001bc8:	4b06      	ldr	r3, [pc, #24]	@ (8001be4 <HAL_IncTick+0x20>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	461a      	mov	r2, r3
 8001bce:	4b06      	ldr	r3, [pc, #24]	@ (8001be8 <HAL_IncTick+0x24>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	4a04      	ldr	r2, [pc, #16]	@ (8001be8 <HAL_IncTick+0x24>)
 8001bd6:	6013      	str	r3, [r2, #0]
}
 8001bd8:	bf00      	nop
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	2400000c 	.word	0x2400000c
 8001be8:	240005ec 	.word	0x240005ec

08001bec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  return uwTick;
 8001bf0:	4b03      	ldr	r3, [pc, #12]	@ (8001c00 <HAL_GetTick+0x14>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	240005ec 	.word	0x240005ec

08001c04 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001c08:	4b03      	ldr	r3, [pc, #12]	@ (8001c18 <HAL_GetREVID+0x14>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	0c1b      	lsrs	r3, r3, #16
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr
 8001c18:	5c001000 	.word	0x5c001000

08001c1c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	431a      	orrs	r2, r3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	609a      	str	r2, [r3, #8]
}
 8001c36:	bf00      	nop
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr

08001c42 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001c42:	b480      	push	{r7}
 8001c44:	b083      	sub	sp, #12
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
 8001c4a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	431a      	orrs	r2, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	609a      	str	r2, [r3, #8]
}
 8001c5c:	bf00      	nop
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b087      	sub	sp, #28
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	60f8      	str	r0, [r7, #12]
 8001c8c:	60b9      	str	r1, [r7, #8]
 8001c8e:	607a      	str	r2, [r7, #4]
 8001c90:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	3360      	adds	r3, #96	@ 0x60
 8001c96:	461a      	mov	r2, r3
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	4413      	add	r3, r2
 8001c9e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	430b      	orrs	r3, r1
 8001cb2:	431a      	orrs	r2, r3
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001cb8:	bf00      	nop
 8001cba:	371c      	adds	r7, #28
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b085      	sub	sp, #20
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	60b9      	str	r1, [r7, #8]
 8001cce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	691b      	ldr	r3, [r3, #16]
 8001cd4:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	f003 031f 	and.w	r3, r3, #31
 8001cde:	6879      	ldr	r1, [r7, #4]
 8001ce0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce4:	431a      	orrs	r2, r3
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	611a      	str	r2, [r3, #16]
}
 8001cea:	bf00      	nop
 8001cec:	3714      	adds	r7, #20
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr

08001cf6 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	b087      	sub	sp, #28
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	60f8      	str	r0, [r7, #12]
 8001cfe:	60b9      	str	r1, [r7, #8]
 8001d00:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	3360      	adds	r3, #96	@ 0x60
 8001d06:	461a      	mov	r2, r3
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	4413      	add	r3, r2
 8001d0e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	431a      	orrs	r2, r3
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	601a      	str	r2, [r3, #0]
  }
}
 8001d20:	bf00      	nop
 8001d22:	371c      	adds	r7, #28
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b087      	sub	sp, #28
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	60f8      	str	r0, [r7, #12]
 8001d34:	60b9      	str	r1, [r7, #8]
 8001d36:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	3330      	adds	r3, #48	@ 0x30
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	0a1b      	lsrs	r3, r3, #8
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	f003 030c 	and.w	r3, r3, #12
 8001d48:	4413      	add	r3, r2
 8001d4a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	f003 031f 	and.w	r3, r3, #31
 8001d56:	211f      	movs	r1, #31
 8001d58:	fa01 f303 	lsl.w	r3, r1, r3
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	401a      	ands	r2, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	0e9b      	lsrs	r3, r3, #26
 8001d64:	f003 011f 	and.w	r1, r3, #31
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	f003 031f 	and.w	r3, r3, #31
 8001d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d72:	431a      	orrs	r2, r3
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001d78:	bf00      	nop
 8001d7a:	371c      	adds	r7, #28
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b087      	sub	sp, #28
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	60f8      	str	r0, [r7, #12]
 8001d8c:	60b9      	str	r1, [r7, #8]
 8001d8e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	3314      	adds	r3, #20
 8001d94:	461a      	mov	r2, r3
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	0e5b      	lsrs	r3, r3, #25
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	f003 0304 	and.w	r3, r3, #4
 8001da0:	4413      	add	r3, r2
 8001da2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	0d1b      	lsrs	r3, r3, #20
 8001dac:	f003 031f 	and.w	r3, r3, #31
 8001db0:	2107      	movs	r1, #7
 8001db2:	fa01 f303 	lsl.w	r3, r1, r3
 8001db6:	43db      	mvns	r3, r3
 8001db8:	401a      	ands	r2, r3
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	0d1b      	lsrs	r3, r3, #20
 8001dbe:	f003 031f 	and.w	r3, r3, #31
 8001dc2:	6879      	ldr	r1, [r7, #4]
 8001dc4:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc8:	431a      	orrs	r2, r3
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001dce:	bf00      	nop
 8001dd0:	371c      	adds	r7, #28
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
	...

08001ddc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b085      	sub	sp, #20
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	60f8      	str	r0, [r7, #12]
 8001de4:	60b9      	str	r1, [r7, #8]
 8001de6:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001df4:	43db      	mvns	r3, r3
 8001df6:	401a      	ands	r2, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f003 0318 	and.w	r3, r3, #24
 8001dfe:	4908      	ldr	r1, [pc, #32]	@ (8001e20 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001e00:	40d9      	lsrs	r1, r3
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	400b      	ands	r3, r1
 8001e06:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e0a:	431a      	orrs	r2, r3
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001e12:	bf00      	nop
 8001e14:	3714      	adds	r7, #20
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	000fffff 	.word	0x000fffff

08001e24 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	689a      	ldr	r2, [r3, #8]
 8001e30:	4b04      	ldr	r3, [pc, #16]	@ (8001e44 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001e32:	4013      	ands	r3, r2
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	6093      	str	r3, [r2, #8]
}
 8001e38:	bf00      	nop
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr
 8001e44:	5fffffc0 	.word	0x5fffffc0

08001e48 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001e58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001e5c:	d101      	bne.n	8001e62 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e000      	b.n	8001e64 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001e62:	2300      	movs	r3, #0
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	370c      	adds	r7, #12
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	689a      	ldr	r2, [r3, #8]
 8001e7c:	4b05      	ldr	r3, [pc, #20]	@ (8001e94 <LL_ADC_EnableInternalRegulator+0x24>)
 8001e7e:	4013      	ands	r3, r2
 8001e80:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001e88:	bf00      	nop
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr
 8001e94:	6fffffc0 	.word	0x6fffffc0

08001e98 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ea8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001eac:	d101      	bne.n	8001eb2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e000      	b.n	8001eb4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001eb2:	2300      	movs	r3, #0
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f003 0301 	and.w	r3, r3, #1
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d101      	bne.n	8001ed8 <LL_ADC_IsEnabled+0x18>
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e000      	b.n	8001eda <LL_ADC_IsEnabled+0x1a>
 8001ed8:	2300      	movs	r3, #0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	370c      	adds	r7, #12
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr

08001ee6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	b083      	sub	sp, #12
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	f003 0304 	and.w	r3, r3, #4
 8001ef6:	2b04      	cmp	r3, #4
 8001ef8:	d101      	bne.n	8001efe <LL_ADC_REG_IsConversionOngoing+0x18>
 8001efa:	2301      	movs	r3, #1
 8001efc:	e000      	b.n	8001f00 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	f003 0308 	and.w	r3, r3, #8
 8001f1c:	2b08      	cmp	r3, #8
 8001f1e:	d101      	bne.n	8001f24 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001f20:	2301      	movs	r3, #1
 8001f22:	e000      	b.n	8001f26 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001f24:	2300      	movs	r3, #0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
	...

08001f34 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f34:	b590      	push	{r4, r7, lr}
 8001f36:	b089      	sub	sp, #36	@ 0x24
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001f40:	2300      	movs	r3, #0
 8001f42:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d101      	bne.n	8001f4e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e18f      	b.n	800226e <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	68db      	ldr	r3, [r3, #12]
 8001f52:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d109      	bne.n	8001f70 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f7ff f8f7 	bl	8001150 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2200      	movs	r2, #0
 8001f66:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7ff ff67 	bl	8001e48 <LL_ADC_IsDeepPowerDownEnabled>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d004      	beq.n	8001f8a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7ff ff4d 	bl	8001e24 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7ff ff82 	bl	8001e98 <LL_ADC_IsInternalRegulatorEnabled>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d114      	bne.n	8001fc4 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7ff ff66 	bl	8001e70 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001fa4:	4b87      	ldr	r3, [pc, #540]	@ (80021c4 <HAL_ADC_Init+0x290>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	099b      	lsrs	r3, r3, #6
 8001faa:	4a87      	ldr	r2, [pc, #540]	@ (80021c8 <HAL_ADC_Init+0x294>)
 8001fac:	fba2 2303 	umull	r2, r3, r2, r3
 8001fb0:	099b      	lsrs	r3, r3, #6
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001fb6:	e002      	b.n	8001fbe <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	3b01      	subs	r3, #1
 8001fbc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d1f9      	bne.n	8001fb8 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7ff ff65 	bl	8001e98 <LL_ADC_IsInternalRegulatorEnabled>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d10d      	bne.n	8001ff0 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fd8:	f043 0210 	orr.w	r2, r3, #16
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fe4:	f043 0201 	orr.w	r2, r3, #1
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7ff ff76 	bl	8001ee6 <LL_ADC_REG_IsConversionOngoing>
 8001ffa:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002000:	f003 0310 	and.w	r3, r3, #16
 8002004:	2b00      	cmp	r3, #0
 8002006:	f040 8129 	bne.w	800225c <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	2b00      	cmp	r3, #0
 800200e:	f040 8125 	bne.w	800225c <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002016:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800201a:	f043 0202 	orr.w	r2, r3, #2
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4618      	mov	r0, r3
 8002028:	f7ff ff4a 	bl	8001ec0 <LL_ADC_IsEnabled>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d136      	bne.n	80020a0 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a65      	ldr	r2, [pc, #404]	@ (80021cc <HAL_ADC_Init+0x298>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d004      	beq.n	8002046 <HAL_ADC_Init+0x112>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a63      	ldr	r2, [pc, #396]	@ (80021d0 <HAL_ADC_Init+0x29c>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d10e      	bne.n	8002064 <HAL_ADC_Init+0x130>
 8002046:	4861      	ldr	r0, [pc, #388]	@ (80021cc <HAL_ADC_Init+0x298>)
 8002048:	f7ff ff3a 	bl	8001ec0 <LL_ADC_IsEnabled>
 800204c:	4604      	mov	r4, r0
 800204e:	4860      	ldr	r0, [pc, #384]	@ (80021d0 <HAL_ADC_Init+0x29c>)
 8002050:	f7ff ff36 	bl	8001ec0 <LL_ADC_IsEnabled>
 8002054:	4603      	mov	r3, r0
 8002056:	4323      	orrs	r3, r4
 8002058:	2b00      	cmp	r3, #0
 800205a:	bf0c      	ite	eq
 800205c:	2301      	moveq	r3, #1
 800205e:	2300      	movne	r3, #0
 8002060:	b2db      	uxtb	r3, r3
 8002062:	e008      	b.n	8002076 <HAL_ADC_Init+0x142>
 8002064:	485b      	ldr	r0, [pc, #364]	@ (80021d4 <HAL_ADC_Init+0x2a0>)
 8002066:	f7ff ff2b 	bl	8001ec0 <LL_ADC_IsEnabled>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	bf0c      	ite	eq
 8002070:	2301      	moveq	r3, #1
 8002072:	2300      	movne	r3, #0
 8002074:	b2db      	uxtb	r3, r3
 8002076:	2b00      	cmp	r3, #0
 8002078:	d012      	beq.n	80020a0 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a53      	ldr	r2, [pc, #332]	@ (80021cc <HAL_ADC_Init+0x298>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d004      	beq.n	800208e <HAL_ADC_Init+0x15a>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a51      	ldr	r2, [pc, #324]	@ (80021d0 <HAL_ADC_Init+0x29c>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d101      	bne.n	8002092 <HAL_ADC_Init+0x15e>
 800208e:	4a52      	ldr	r2, [pc, #328]	@ (80021d8 <HAL_ADC_Init+0x2a4>)
 8002090:	e000      	b.n	8002094 <HAL_ADC_Init+0x160>
 8002092:	4a52      	ldr	r2, [pc, #328]	@ (80021dc <HAL_ADC_Init+0x2a8>)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	4619      	mov	r1, r3
 800209a:	4610      	mov	r0, r2
 800209c:	f7ff fdbe 	bl	8001c1c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80020a0:	f7ff fdb0 	bl	8001c04 <HAL_GetREVID>
 80020a4:	4603      	mov	r3, r0
 80020a6:	f241 0203 	movw	r2, #4099	@ 0x1003
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d914      	bls.n	80020d8 <HAL_ADC_Init+0x1a4>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	2b10      	cmp	r3, #16
 80020b4:	d110      	bne.n	80020d8 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	7d5b      	ldrb	r3, [r3, #21]
 80020ba:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80020c0:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80020c6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	7f1b      	ldrb	r3, [r3, #28]
 80020cc:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80020ce:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80020d0:	f043 030c 	orr.w	r3, r3, #12
 80020d4:	61bb      	str	r3, [r7, #24]
 80020d6:	e00d      	b.n	80020f4 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	7d5b      	ldrb	r3, [r3, #21]
 80020dc:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80020e2:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80020e8:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	7f1b      	ldrb	r3, [r3, #28]
 80020ee:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80020f0:	4313      	orrs	r3, r2
 80020f2:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	7f1b      	ldrb	r3, [r3, #28]
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d106      	bne.n	800210a <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6a1b      	ldr	r3, [r3, #32]
 8002100:	3b01      	subs	r3, #1
 8002102:	045b      	lsls	r3, r3, #17
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	4313      	orrs	r3, r2
 8002108:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800210e:	2b00      	cmp	r3, #0
 8002110:	d009      	beq.n	8002126 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002116:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800211e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	4313      	orrs	r3, r2
 8002124:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	68da      	ldr	r2, [r3, #12]
 800212c:	4b2c      	ldr	r3, [pc, #176]	@ (80021e0 <HAL_ADC_Init+0x2ac>)
 800212e:	4013      	ands	r3, r2
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	6812      	ldr	r2, [r2, #0]
 8002134:	69b9      	ldr	r1, [r7, #24]
 8002136:	430b      	orrs	r3, r1
 8002138:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4618      	mov	r0, r3
 8002140:	f7ff fed1 	bl	8001ee6 <LL_ADC_REG_IsConversionOngoing>
 8002144:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4618      	mov	r0, r3
 800214c:	f7ff fede 	bl	8001f0c <LL_ADC_INJ_IsConversionOngoing>
 8002150:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d15f      	bne.n	8002218 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d15c      	bne.n	8002218 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	7d1b      	ldrb	r3, [r3, #20]
 8002162:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8002168:	4313      	orrs	r3, r2
 800216a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	68da      	ldr	r2, [r3, #12]
 8002172:	4b1c      	ldr	r3, [pc, #112]	@ (80021e4 <HAL_ADC_Init+0x2b0>)
 8002174:	4013      	ands	r3, r2
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	6812      	ldr	r2, [r2, #0]
 800217a:	69b9      	ldr	r1, [r7, #24]
 800217c:	430b      	orrs	r3, r1
 800217e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002186:	2b01      	cmp	r3, #1
 8002188:	d130      	bne.n	80021ec <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800218e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	691a      	ldr	r2, [r3, #16]
 8002196:	4b14      	ldr	r3, [pc, #80]	@ (80021e8 <HAL_ADC_Init+0x2b4>)
 8002198:	4013      	ands	r3, r2
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800219e:	3a01      	subs	r2, #1
 80021a0:	0411      	lsls	r1, r2, #16
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80021a6:	4311      	orrs	r1, r2
 80021a8:	687a      	ldr	r2, [r7, #4]
 80021aa:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80021ac:	4311      	orrs	r1, r2
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80021b2:	430a      	orrs	r2, r1
 80021b4:	431a      	orrs	r2, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f042 0201 	orr.w	r2, r2, #1
 80021be:	611a      	str	r2, [r3, #16]
 80021c0:	e01c      	b.n	80021fc <HAL_ADC_Init+0x2c8>
 80021c2:	bf00      	nop
 80021c4:	24000000 	.word	0x24000000
 80021c8:	053e2d63 	.word	0x053e2d63
 80021cc:	40022000 	.word	0x40022000
 80021d0:	40022100 	.word	0x40022100
 80021d4:	58026000 	.word	0x58026000
 80021d8:	40022300 	.word	0x40022300
 80021dc:	58026300 	.word	0x58026300
 80021e0:	fff0c003 	.word	0xfff0c003
 80021e4:	ffffbffc 	.word	0xffffbffc
 80021e8:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	691a      	ldr	r2, [r3, #16]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f022 0201 	bic.w	r2, r2, #1
 80021fa:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	691b      	ldr	r3, [r3, #16]
 8002202:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	430a      	orrs	r2, r1
 8002210:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f000 fb8c 	bl	8002930 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	2b01      	cmp	r3, #1
 800221e:	d10c      	bne.n	800223a <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002226:	f023 010f 	bic.w	r1, r3, #15
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	699b      	ldr	r3, [r3, #24]
 800222e:	1e5a      	subs	r2, r3, #1
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	430a      	orrs	r2, r1
 8002236:	631a      	str	r2, [r3, #48]	@ 0x30
 8002238:	e007      	b.n	800224a <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f022 020f 	bic.w	r2, r2, #15
 8002248:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800224e:	f023 0303 	bic.w	r3, r3, #3
 8002252:	f043 0201 	orr.w	r2, r3, #1
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	655a      	str	r2, [r3, #84]	@ 0x54
 800225a:	e007      	b.n	800226c <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002260:	f043 0210 	orr.w	r2, r3, #16
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800226c:	7ffb      	ldrb	r3, [r7, #31]
}
 800226e:	4618      	mov	r0, r3
 8002270:	3724      	adds	r7, #36	@ 0x24
 8002272:	46bd      	mov	sp, r7
 8002274:	bd90      	pop	{r4, r7, pc}
 8002276:	bf00      	nop

08002278 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002278:	b590      	push	{r4, r7, lr}
 800227a:	b0a1      	sub	sp, #132	@ 0x84
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002282:	2300      	movs	r3, #0
 8002284:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002288:	2300      	movs	r3, #0
 800228a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	4a65      	ldr	r2, [pc, #404]	@ (8002428 <HAL_ADC_ConfigChannel+0x1b0>)
 8002292:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800229a:	2b01      	cmp	r3, #1
 800229c:	d101      	bne.n	80022a2 <HAL_ADC_ConfigChannel+0x2a>
 800229e:	2302      	movs	r3, #2
 80022a0:	e32e      	b.n	8002900 <HAL_ADC_ConfigChannel+0x688>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2201      	movs	r2, #1
 80022a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4618      	mov	r0, r3
 80022b0:	f7ff fe19 	bl	8001ee6 <LL_ADC_REG_IsConversionOngoing>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	f040 8313 	bne.w	80028e2 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	db2c      	blt.n	800231e <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d108      	bne.n	80022e2 <HAL_ADC_ConfigChannel+0x6a>
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	0e9b      	lsrs	r3, r3, #26
 80022d6:	f003 031f 	and.w	r3, r3, #31
 80022da:	2201      	movs	r2, #1
 80022dc:	fa02 f303 	lsl.w	r3, r2, r3
 80022e0:	e016      	b.n	8002310 <HAL_ADC_ConfigChannel+0x98>
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80022ea:	fa93 f3a3 	rbit	r3, r3
 80022ee:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80022f0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80022f2:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80022f4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d101      	bne.n	80022fe <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 80022fa:	2320      	movs	r3, #32
 80022fc:	e003      	b.n	8002306 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 80022fe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002300:	fab3 f383 	clz	r3, r3
 8002304:	b2db      	uxtb	r3, r3
 8002306:	f003 031f 	and.w	r3, r3, #31
 800230a:	2201      	movs	r2, #1
 800230c:	fa02 f303 	lsl.w	r3, r2, r3
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	6812      	ldr	r2, [r2, #0]
 8002314:	69d1      	ldr	r1, [r2, #28]
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	6812      	ldr	r2, [r2, #0]
 800231a:	430b      	orrs	r3, r1
 800231c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6818      	ldr	r0, [r3, #0]
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	6859      	ldr	r1, [r3, #4]
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	461a      	mov	r2, r3
 800232c:	f7ff fcfe 	bl	8001d2c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4618      	mov	r0, r3
 8002336:	f7ff fdd6 	bl	8001ee6 <LL_ADC_REG_IsConversionOngoing>
 800233a:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4618      	mov	r0, r3
 8002342:	f7ff fde3 	bl	8001f0c <LL_ADC_INJ_IsConversionOngoing>
 8002346:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002348:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800234a:	2b00      	cmp	r3, #0
 800234c:	f040 80b8 	bne.w	80024c0 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002350:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002352:	2b00      	cmp	r3, #0
 8002354:	f040 80b4 	bne.w	80024c0 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6818      	ldr	r0, [r3, #0]
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	6819      	ldr	r1, [r3, #0]
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	461a      	mov	r2, r3
 8002366:	f7ff fd0d 	bl	8001d84 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800236a:	4b30      	ldr	r3, [pc, #192]	@ (800242c <HAL_ADC_ConfigChannel+0x1b4>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8002372:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002376:	d10b      	bne.n	8002390 <HAL_ADC_ConfigChannel+0x118>
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	695a      	ldr	r2, [r3, #20]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	089b      	lsrs	r3, r3, #2
 8002384:	f003 0307 	and.w	r3, r3, #7
 8002388:	005b      	lsls	r3, r3, #1
 800238a:	fa02 f303 	lsl.w	r3, r2, r3
 800238e:	e01d      	b.n	80023cc <HAL_ADC_ConfigChannel+0x154>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	f003 0310 	and.w	r3, r3, #16
 800239a:	2b00      	cmp	r3, #0
 800239c:	d10b      	bne.n	80023b6 <HAL_ADC_ConfigChannel+0x13e>
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	695a      	ldr	r2, [r3, #20]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	089b      	lsrs	r3, r3, #2
 80023aa:	f003 0307 	and.w	r3, r3, #7
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	e00a      	b.n	80023cc <HAL_ADC_ConfigChannel+0x154>
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	695a      	ldr	r2, [r3, #20]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	089b      	lsrs	r3, r3, #2
 80023c2:	f003 0304 	and.w	r3, r3, #4
 80023c6:	005b      	lsls	r3, r3, #1
 80023c8:	fa02 f303 	lsl.w	r3, r2, r3
 80023cc:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	691b      	ldr	r3, [r3, #16]
 80023d2:	2b04      	cmp	r3, #4
 80023d4:	d02c      	beq.n	8002430 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6818      	ldr	r0, [r3, #0]
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	6919      	ldr	r1, [r3, #16]
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80023e4:	f7ff fc4e 	bl	8001c84 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6818      	ldr	r0, [r3, #0]
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	6919      	ldr	r1, [r3, #16]
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	7e5b      	ldrb	r3, [r3, #25]
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d102      	bne.n	80023fe <HAL_ADC_ConfigChannel+0x186>
 80023f8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80023fc:	e000      	b.n	8002400 <HAL_ADC_ConfigChannel+0x188>
 80023fe:	2300      	movs	r3, #0
 8002400:	461a      	mov	r2, r3
 8002402:	f7ff fc78 	bl	8001cf6 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6818      	ldr	r0, [r3, #0]
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	6919      	ldr	r1, [r3, #16]
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	7e1b      	ldrb	r3, [r3, #24]
 8002412:	2b01      	cmp	r3, #1
 8002414:	d102      	bne.n	800241c <HAL_ADC_ConfigChannel+0x1a4>
 8002416:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800241a:	e000      	b.n	800241e <HAL_ADC_ConfigChannel+0x1a6>
 800241c:	2300      	movs	r3, #0
 800241e:	461a      	mov	r2, r3
 8002420:	f7ff fc50 	bl	8001cc4 <LL_ADC_SetDataRightShift>
 8002424:	e04c      	b.n	80024c0 <HAL_ADC_ConfigChannel+0x248>
 8002426:	bf00      	nop
 8002428:	47ff0000 	.word	0x47ff0000
 800242c:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002436:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	069b      	lsls	r3, r3, #26
 8002440:	429a      	cmp	r2, r3
 8002442:	d107      	bne.n	8002454 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002452:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800245a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	069b      	lsls	r3, r3, #26
 8002464:	429a      	cmp	r2, r3
 8002466:	d107      	bne.n	8002478 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002476:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800247e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	069b      	lsls	r3, r3, #26
 8002488:	429a      	cmp	r2, r3
 800248a:	d107      	bne.n	800249c <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800249a:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80024a2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	069b      	lsls	r3, r3, #26
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d107      	bne.n	80024c0 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80024be:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7ff fcfb 	bl	8001ec0 <LL_ADC_IsEnabled>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	f040 8211 	bne.w	80028f4 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6818      	ldr	r0, [r3, #0]
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	6819      	ldr	r1, [r3, #0]
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	68db      	ldr	r3, [r3, #12]
 80024de:	461a      	mov	r2, r3
 80024e0:	f7ff fc7c 	bl	8001ddc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	4aa1      	ldr	r2, [pc, #644]	@ (8002770 <HAL_ADC_ConfigChannel+0x4f8>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	f040 812e 	bne.w	800274c <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d10b      	bne.n	8002518 <HAL_ADC_ConfigChannel+0x2a0>
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	0e9b      	lsrs	r3, r3, #26
 8002506:	3301      	adds	r3, #1
 8002508:	f003 031f 	and.w	r3, r3, #31
 800250c:	2b09      	cmp	r3, #9
 800250e:	bf94      	ite	ls
 8002510:	2301      	movls	r3, #1
 8002512:	2300      	movhi	r3, #0
 8002514:	b2db      	uxtb	r3, r3
 8002516:	e019      	b.n	800254c <HAL_ADC_ConfigChannel+0x2d4>
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800251e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002520:	fa93 f3a3 	rbit	r3, r3
 8002524:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002526:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002528:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800252a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800252c:	2b00      	cmp	r3, #0
 800252e:	d101      	bne.n	8002534 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8002530:	2320      	movs	r3, #32
 8002532:	e003      	b.n	800253c <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8002534:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002536:	fab3 f383 	clz	r3, r3
 800253a:	b2db      	uxtb	r3, r3
 800253c:	3301      	adds	r3, #1
 800253e:	f003 031f 	and.w	r3, r3, #31
 8002542:	2b09      	cmp	r3, #9
 8002544:	bf94      	ite	ls
 8002546:	2301      	movls	r3, #1
 8002548:	2300      	movhi	r3, #0
 800254a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800254c:	2b00      	cmp	r3, #0
 800254e:	d079      	beq.n	8002644 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002558:	2b00      	cmp	r3, #0
 800255a:	d107      	bne.n	800256c <HAL_ADC_ConfigChannel+0x2f4>
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	0e9b      	lsrs	r3, r3, #26
 8002562:	3301      	adds	r3, #1
 8002564:	069b      	lsls	r3, r3, #26
 8002566:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800256a:	e015      	b.n	8002598 <HAL_ADC_ConfigChannel+0x320>
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002572:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002574:	fa93 f3a3 	rbit	r3, r3
 8002578:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800257a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800257c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800257e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002580:	2b00      	cmp	r3, #0
 8002582:	d101      	bne.n	8002588 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8002584:	2320      	movs	r3, #32
 8002586:	e003      	b.n	8002590 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8002588:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800258a:	fab3 f383 	clz	r3, r3
 800258e:	b2db      	uxtb	r3, r3
 8002590:	3301      	adds	r3, #1
 8002592:	069b      	lsls	r3, r3, #26
 8002594:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d109      	bne.n	80025b8 <HAL_ADC_ConfigChannel+0x340>
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	0e9b      	lsrs	r3, r3, #26
 80025aa:	3301      	adds	r3, #1
 80025ac:	f003 031f 	and.w	r3, r3, #31
 80025b0:	2101      	movs	r1, #1
 80025b2:	fa01 f303 	lsl.w	r3, r1, r3
 80025b6:	e017      	b.n	80025e8 <HAL_ADC_ConfigChannel+0x370>
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80025c0:	fa93 f3a3 	rbit	r3, r3
 80025c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80025c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025c8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80025ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d101      	bne.n	80025d4 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 80025d0:	2320      	movs	r3, #32
 80025d2:	e003      	b.n	80025dc <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 80025d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80025d6:	fab3 f383 	clz	r3, r3
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	3301      	adds	r3, #1
 80025de:	f003 031f 	and.w	r3, r3, #31
 80025e2:	2101      	movs	r1, #1
 80025e4:	fa01 f303 	lsl.w	r3, r1, r3
 80025e8:	ea42 0103 	orr.w	r1, r2, r3
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d10a      	bne.n	800260e <HAL_ADC_ConfigChannel+0x396>
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	0e9b      	lsrs	r3, r3, #26
 80025fe:	3301      	adds	r3, #1
 8002600:	f003 021f 	and.w	r2, r3, #31
 8002604:	4613      	mov	r3, r2
 8002606:	005b      	lsls	r3, r3, #1
 8002608:	4413      	add	r3, r2
 800260a:	051b      	lsls	r3, r3, #20
 800260c:	e018      	b.n	8002640 <HAL_ADC_ConfigChannel+0x3c8>
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002614:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002616:	fa93 f3a3 	rbit	r3, r3
 800261a:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800261c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800261e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002622:	2b00      	cmp	r3, #0
 8002624:	d101      	bne.n	800262a <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8002626:	2320      	movs	r3, #32
 8002628:	e003      	b.n	8002632 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 800262a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800262c:	fab3 f383 	clz	r3, r3
 8002630:	b2db      	uxtb	r3, r3
 8002632:	3301      	adds	r3, #1
 8002634:	f003 021f 	and.w	r2, r3, #31
 8002638:	4613      	mov	r3, r2
 800263a:	005b      	lsls	r3, r3, #1
 800263c:	4413      	add	r3, r2
 800263e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002640:	430b      	orrs	r3, r1
 8002642:	e07e      	b.n	8002742 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800264c:	2b00      	cmp	r3, #0
 800264e:	d107      	bne.n	8002660 <HAL_ADC_ConfigChannel+0x3e8>
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	0e9b      	lsrs	r3, r3, #26
 8002656:	3301      	adds	r3, #1
 8002658:	069b      	lsls	r3, r3, #26
 800265a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800265e:	e015      	b.n	800268c <HAL_ADC_ConfigChannel+0x414>
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002668:	fa93 f3a3 	rbit	r3, r3
 800266c:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800266e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002670:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002672:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002674:	2b00      	cmp	r3, #0
 8002676:	d101      	bne.n	800267c <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8002678:	2320      	movs	r3, #32
 800267a:	e003      	b.n	8002684 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 800267c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800267e:	fab3 f383 	clz	r3, r3
 8002682:	b2db      	uxtb	r3, r3
 8002684:	3301      	adds	r3, #1
 8002686:	069b      	lsls	r3, r3, #26
 8002688:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002694:	2b00      	cmp	r3, #0
 8002696:	d109      	bne.n	80026ac <HAL_ADC_ConfigChannel+0x434>
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	0e9b      	lsrs	r3, r3, #26
 800269e:	3301      	adds	r3, #1
 80026a0:	f003 031f 	and.w	r3, r3, #31
 80026a4:	2101      	movs	r1, #1
 80026a6:	fa01 f303 	lsl.w	r3, r1, r3
 80026aa:	e017      	b.n	80026dc <HAL_ADC_ConfigChannel+0x464>
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	fa93 f3a3 	rbit	r3, r3
 80026b8:	61bb      	str	r3, [r7, #24]
  return result;
 80026ba:	69bb      	ldr	r3, [r7, #24]
 80026bc:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80026be:	6a3b      	ldr	r3, [r7, #32]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d101      	bne.n	80026c8 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 80026c4:	2320      	movs	r3, #32
 80026c6:	e003      	b.n	80026d0 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 80026c8:	6a3b      	ldr	r3, [r7, #32]
 80026ca:	fab3 f383 	clz	r3, r3
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	3301      	adds	r3, #1
 80026d2:	f003 031f 	and.w	r3, r3, #31
 80026d6:	2101      	movs	r1, #1
 80026d8:	fa01 f303 	lsl.w	r3, r1, r3
 80026dc:	ea42 0103 	orr.w	r1, r2, r3
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d10d      	bne.n	8002708 <HAL_ADC_ConfigChannel+0x490>
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	0e9b      	lsrs	r3, r3, #26
 80026f2:	3301      	adds	r3, #1
 80026f4:	f003 021f 	and.w	r2, r3, #31
 80026f8:	4613      	mov	r3, r2
 80026fa:	005b      	lsls	r3, r3, #1
 80026fc:	4413      	add	r3, r2
 80026fe:	3b1e      	subs	r3, #30
 8002700:	051b      	lsls	r3, r3, #20
 8002702:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002706:	e01b      	b.n	8002740 <HAL_ADC_ConfigChannel+0x4c8>
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	fa93 f3a3 	rbit	r3, r3
 8002714:	60fb      	str	r3, [r7, #12]
  return result;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d101      	bne.n	8002724 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8002720:	2320      	movs	r3, #32
 8002722:	e003      	b.n	800272c <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	fab3 f383 	clz	r3, r3
 800272a:	b2db      	uxtb	r3, r3
 800272c:	3301      	adds	r3, #1
 800272e:	f003 021f 	and.w	r2, r3, #31
 8002732:	4613      	mov	r3, r2
 8002734:	005b      	lsls	r3, r3, #1
 8002736:	4413      	add	r3, r2
 8002738:	3b1e      	subs	r3, #30
 800273a:	051b      	lsls	r3, r3, #20
 800273c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002740:	430b      	orrs	r3, r1
 8002742:	683a      	ldr	r2, [r7, #0]
 8002744:	6892      	ldr	r2, [r2, #8]
 8002746:	4619      	mov	r1, r3
 8002748:	f7ff fb1c 	bl	8001d84 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2b00      	cmp	r3, #0
 8002752:	f280 80cf 	bge.w	80028f4 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a06      	ldr	r2, [pc, #24]	@ (8002774 <HAL_ADC_ConfigChannel+0x4fc>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d004      	beq.n	800276a <HAL_ADC_ConfigChannel+0x4f2>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a04      	ldr	r2, [pc, #16]	@ (8002778 <HAL_ADC_ConfigChannel+0x500>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d10a      	bne.n	8002780 <HAL_ADC_ConfigChannel+0x508>
 800276a:	4b04      	ldr	r3, [pc, #16]	@ (800277c <HAL_ADC_ConfigChannel+0x504>)
 800276c:	e009      	b.n	8002782 <HAL_ADC_ConfigChannel+0x50a>
 800276e:	bf00      	nop
 8002770:	47ff0000 	.word	0x47ff0000
 8002774:	40022000 	.word	0x40022000
 8002778:	40022100 	.word	0x40022100
 800277c:	40022300 	.word	0x40022300
 8002780:	4b61      	ldr	r3, [pc, #388]	@ (8002908 <HAL_ADC_ConfigChannel+0x690>)
 8002782:	4618      	mov	r0, r3
 8002784:	f7ff fa70 	bl	8001c68 <LL_ADC_GetCommonPathInternalCh>
 8002788:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a5f      	ldr	r2, [pc, #380]	@ (800290c <HAL_ADC_ConfigChannel+0x694>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d004      	beq.n	800279e <HAL_ADC_ConfigChannel+0x526>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a5d      	ldr	r2, [pc, #372]	@ (8002910 <HAL_ADC_ConfigChannel+0x698>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d10e      	bne.n	80027bc <HAL_ADC_ConfigChannel+0x544>
 800279e:	485b      	ldr	r0, [pc, #364]	@ (800290c <HAL_ADC_ConfigChannel+0x694>)
 80027a0:	f7ff fb8e 	bl	8001ec0 <LL_ADC_IsEnabled>
 80027a4:	4604      	mov	r4, r0
 80027a6:	485a      	ldr	r0, [pc, #360]	@ (8002910 <HAL_ADC_ConfigChannel+0x698>)
 80027a8:	f7ff fb8a 	bl	8001ec0 <LL_ADC_IsEnabled>
 80027ac:	4603      	mov	r3, r0
 80027ae:	4323      	orrs	r3, r4
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	bf0c      	ite	eq
 80027b4:	2301      	moveq	r3, #1
 80027b6:	2300      	movne	r3, #0
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	e008      	b.n	80027ce <HAL_ADC_ConfigChannel+0x556>
 80027bc:	4855      	ldr	r0, [pc, #340]	@ (8002914 <HAL_ADC_ConfigChannel+0x69c>)
 80027be:	f7ff fb7f 	bl	8001ec0 <LL_ADC_IsEnabled>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	bf0c      	ite	eq
 80027c8:	2301      	moveq	r3, #1
 80027ca:	2300      	movne	r3, #0
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d07d      	beq.n	80028ce <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a50      	ldr	r2, [pc, #320]	@ (8002918 <HAL_ADC_ConfigChannel+0x6a0>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d130      	bne.n	800283e <HAL_ADC_ConfigChannel+0x5c6>
 80027dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80027de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d12b      	bne.n	800283e <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a4a      	ldr	r2, [pc, #296]	@ (8002914 <HAL_ADC_ConfigChannel+0x69c>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	f040 8081 	bne.w	80028f4 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a45      	ldr	r2, [pc, #276]	@ (800290c <HAL_ADC_ConfigChannel+0x694>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d004      	beq.n	8002806 <HAL_ADC_ConfigChannel+0x58e>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a43      	ldr	r2, [pc, #268]	@ (8002910 <HAL_ADC_ConfigChannel+0x698>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d101      	bne.n	800280a <HAL_ADC_ConfigChannel+0x592>
 8002806:	4a45      	ldr	r2, [pc, #276]	@ (800291c <HAL_ADC_ConfigChannel+0x6a4>)
 8002808:	e000      	b.n	800280c <HAL_ADC_ConfigChannel+0x594>
 800280a:	4a3f      	ldr	r2, [pc, #252]	@ (8002908 <HAL_ADC_ConfigChannel+0x690>)
 800280c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800280e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002812:	4619      	mov	r1, r3
 8002814:	4610      	mov	r0, r2
 8002816:	f7ff fa14 	bl	8001c42 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800281a:	4b41      	ldr	r3, [pc, #260]	@ (8002920 <HAL_ADC_ConfigChannel+0x6a8>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	099b      	lsrs	r3, r3, #6
 8002820:	4a40      	ldr	r2, [pc, #256]	@ (8002924 <HAL_ADC_ConfigChannel+0x6ac>)
 8002822:	fba2 2303 	umull	r2, r3, r2, r3
 8002826:	099b      	lsrs	r3, r3, #6
 8002828:	3301      	adds	r3, #1
 800282a:	005b      	lsls	r3, r3, #1
 800282c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800282e:	e002      	b.n	8002836 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	3b01      	subs	r3, #1
 8002834:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d1f9      	bne.n	8002830 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800283c:	e05a      	b.n	80028f4 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a39      	ldr	r2, [pc, #228]	@ (8002928 <HAL_ADC_ConfigChannel+0x6b0>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d11e      	bne.n	8002886 <HAL_ADC_ConfigChannel+0x60e>
 8002848:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800284a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d119      	bne.n	8002886 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a2f      	ldr	r2, [pc, #188]	@ (8002914 <HAL_ADC_ConfigChannel+0x69c>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d14b      	bne.n	80028f4 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a2a      	ldr	r2, [pc, #168]	@ (800290c <HAL_ADC_ConfigChannel+0x694>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d004      	beq.n	8002870 <HAL_ADC_ConfigChannel+0x5f8>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a29      	ldr	r2, [pc, #164]	@ (8002910 <HAL_ADC_ConfigChannel+0x698>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d101      	bne.n	8002874 <HAL_ADC_ConfigChannel+0x5fc>
 8002870:	4a2a      	ldr	r2, [pc, #168]	@ (800291c <HAL_ADC_ConfigChannel+0x6a4>)
 8002872:	e000      	b.n	8002876 <HAL_ADC_ConfigChannel+0x5fe>
 8002874:	4a24      	ldr	r2, [pc, #144]	@ (8002908 <HAL_ADC_ConfigChannel+0x690>)
 8002876:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002878:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800287c:	4619      	mov	r1, r3
 800287e:	4610      	mov	r0, r2
 8002880:	f7ff f9df 	bl	8001c42 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002884:	e036      	b.n	80028f4 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a28      	ldr	r2, [pc, #160]	@ (800292c <HAL_ADC_ConfigChannel+0x6b4>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d131      	bne.n	80028f4 <HAL_ADC_ConfigChannel+0x67c>
 8002890:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002892:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d12c      	bne.n	80028f4 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a1d      	ldr	r2, [pc, #116]	@ (8002914 <HAL_ADC_ConfigChannel+0x69c>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d127      	bne.n	80028f4 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a18      	ldr	r2, [pc, #96]	@ (800290c <HAL_ADC_ConfigChannel+0x694>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d004      	beq.n	80028b8 <HAL_ADC_ConfigChannel+0x640>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a17      	ldr	r2, [pc, #92]	@ (8002910 <HAL_ADC_ConfigChannel+0x698>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d101      	bne.n	80028bc <HAL_ADC_ConfigChannel+0x644>
 80028b8:	4a18      	ldr	r2, [pc, #96]	@ (800291c <HAL_ADC_ConfigChannel+0x6a4>)
 80028ba:	e000      	b.n	80028be <HAL_ADC_ConfigChannel+0x646>
 80028bc:	4a12      	ldr	r2, [pc, #72]	@ (8002908 <HAL_ADC_ConfigChannel+0x690>)
 80028be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80028c0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80028c4:	4619      	mov	r1, r3
 80028c6:	4610      	mov	r0, r2
 80028c8:	f7ff f9bb 	bl	8001c42 <LL_ADC_SetCommonPathInternalCh>
 80028cc:	e012      	b.n	80028f4 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028d2:	f043 0220 	orr.w	r2, r3, #32
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80028e0:	e008      	b.n	80028f4 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028e6:	f043 0220 	orr.w	r2, r3, #32
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2200      	movs	r2, #0
 80028f8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80028fc:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002900:	4618      	mov	r0, r3
 8002902:	3784      	adds	r7, #132	@ 0x84
 8002904:	46bd      	mov	sp, r7
 8002906:	bd90      	pop	{r4, r7, pc}
 8002908:	58026300 	.word	0x58026300
 800290c:	40022000 	.word	0x40022000
 8002910:	40022100 	.word	0x40022100
 8002914:	58026000 	.word	0x58026000
 8002918:	cb840000 	.word	0xcb840000
 800291c:	40022300 	.word	0x40022300
 8002920:	24000000 	.word	0x24000000
 8002924:	053e2d63 	.word	0x053e2d63
 8002928:	c7520000 	.word	0xc7520000
 800292c:	cfb80000 	.word	0xcfb80000

08002930 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a7a      	ldr	r2, [pc, #488]	@ (8002b28 <ADC_ConfigureBoostMode+0x1f8>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d004      	beq.n	800294c <ADC_ConfigureBoostMode+0x1c>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a79      	ldr	r2, [pc, #484]	@ (8002b2c <ADC_ConfigureBoostMode+0x1fc>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d109      	bne.n	8002960 <ADC_ConfigureBoostMode+0x30>
 800294c:	4b78      	ldr	r3, [pc, #480]	@ (8002b30 <ADC_ConfigureBoostMode+0x200>)
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002954:	2b00      	cmp	r3, #0
 8002956:	bf14      	ite	ne
 8002958:	2301      	movne	r3, #1
 800295a:	2300      	moveq	r3, #0
 800295c:	b2db      	uxtb	r3, r3
 800295e:	e008      	b.n	8002972 <ADC_ConfigureBoostMode+0x42>
 8002960:	4b74      	ldr	r3, [pc, #464]	@ (8002b34 <ADC_ConfigureBoostMode+0x204>)
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002968:	2b00      	cmp	r3, #0
 800296a:	bf14      	ite	ne
 800296c:	2301      	movne	r3, #1
 800296e:	2300      	moveq	r3, #0
 8002970:	b2db      	uxtb	r3, r3
 8002972:	2b00      	cmp	r3, #0
 8002974:	d01c      	beq.n	80029b0 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002976:	f004 f85b 	bl	8006a30 <HAL_RCC_GetHCLKFreq>
 800297a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002984:	d010      	beq.n	80029a8 <ADC_ConfigureBoostMode+0x78>
 8002986:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800298a:	d873      	bhi.n	8002a74 <ADC_ConfigureBoostMode+0x144>
 800298c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002990:	d002      	beq.n	8002998 <ADC_ConfigureBoostMode+0x68>
 8002992:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002996:	d16d      	bne.n	8002a74 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	0c1b      	lsrs	r3, r3, #16
 800299e:	68fa      	ldr	r2, [r7, #12]
 80029a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80029a4:	60fb      	str	r3, [r7, #12]
        break;
 80029a6:	e068      	b.n	8002a7a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	089b      	lsrs	r3, r3, #2
 80029ac:	60fb      	str	r3, [r7, #12]
        break;
 80029ae:	e064      	b.n	8002a7a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80029b0:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80029b4:	f04f 0100 	mov.w	r1, #0
 80029b8:	f005 faa0 	bl	8007efc <HAL_RCCEx_GetPeriphCLKFreq>
 80029bc:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80029c6:	d051      	beq.n	8002a6c <ADC_ConfigureBoostMode+0x13c>
 80029c8:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80029cc:	d854      	bhi.n	8002a78 <ADC_ConfigureBoostMode+0x148>
 80029ce:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80029d2:	d047      	beq.n	8002a64 <ADC_ConfigureBoostMode+0x134>
 80029d4:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80029d8:	d84e      	bhi.n	8002a78 <ADC_ConfigureBoostMode+0x148>
 80029da:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80029de:	d03d      	beq.n	8002a5c <ADC_ConfigureBoostMode+0x12c>
 80029e0:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80029e4:	d848      	bhi.n	8002a78 <ADC_ConfigureBoostMode+0x148>
 80029e6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80029ea:	d033      	beq.n	8002a54 <ADC_ConfigureBoostMode+0x124>
 80029ec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80029f0:	d842      	bhi.n	8002a78 <ADC_ConfigureBoostMode+0x148>
 80029f2:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80029f6:	d029      	beq.n	8002a4c <ADC_ConfigureBoostMode+0x11c>
 80029f8:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80029fc:	d83c      	bhi.n	8002a78 <ADC_ConfigureBoostMode+0x148>
 80029fe:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002a02:	d01a      	beq.n	8002a3a <ADC_ConfigureBoostMode+0x10a>
 8002a04:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002a08:	d836      	bhi.n	8002a78 <ADC_ConfigureBoostMode+0x148>
 8002a0a:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002a0e:	d014      	beq.n	8002a3a <ADC_ConfigureBoostMode+0x10a>
 8002a10:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002a14:	d830      	bhi.n	8002a78 <ADC_ConfigureBoostMode+0x148>
 8002a16:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002a1a:	d00e      	beq.n	8002a3a <ADC_ConfigureBoostMode+0x10a>
 8002a1c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002a20:	d82a      	bhi.n	8002a78 <ADC_ConfigureBoostMode+0x148>
 8002a22:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002a26:	d008      	beq.n	8002a3a <ADC_ConfigureBoostMode+0x10a>
 8002a28:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002a2c:	d824      	bhi.n	8002a78 <ADC_ConfigureBoostMode+0x148>
 8002a2e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002a32:	d002      	beq.n	8002a3a <ADC_ConfigureBoostMode+0x10a>
 8002a34:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002a38:	d11e      	bne.n	8002a78 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	0c9b      	lsrs	r3, r3, #18
 8002a40:	005b      	lsls	r3, r3, #1
 8002a42:	68fa      	ldr	r2, [r7, #12]
 8002a44:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a48:	60fb      	str	r3, [r7, #12]
        break;
 8002a4a:	e016      	b.n	8002a7a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	091b      	lsrs	r3, r3, #4
 8002a50:	60fb      	str	r3, [r7, #12]
        break;
 8002a52:	e012      	b.n	8002a7a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	095b      	lsrs	r3, r3, #5
 8002a58:	60fb      	str	r3, [r7, #12]
        break;
 8002a5a:	e00e      	b.n	8002a7a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	099b      	lsrs	r3, r3, #6
 8002a60:	60fb      	str	r3, [r7, #12]
        break;
 8002a62:	e00a      	b.n	8002a7a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	09db      	lsrs	r3, r3, #7
 8002a68:	60fb      	str	r3, [r7, #12]
        break;
 8002a6a:	e006      	b.n	8002a7a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	0a1b      	lsrs	r3, r3, #8
 8002a70:	60fb      	str	r3, [r7, #12]
        break;
 8002a72:	e002      	b.n	8002a7a <ADC_ConfigureBoostMode+0x14a>
        break;
 8002a74:	bf00      	nop
 8002a76:	e000      	b.n	8002a7a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8002a78:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002a7a:	f7ff f8c3 	bl	8001c04 <HAL_GetREVID>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d815      	bhi.n	8002ab4 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	4a2b      	ldr	r2, [pc, #172]	@ (8002b38 <ADC_ConfigureBoostMode+0x208>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d908      	bls.n	8002aa2 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	689a      	ldr	r2, [r3, #8]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a9e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002aa0:	e03e      	b.n	8002b20 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	689a      	ldr	r2, [r3, #8]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002ab0:	609a      	str	r2, [r3, #8]
}
 8002ab2:	e035      	b.n	8002b20 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	085b      	lsrs	r3, r3, #1
 8002ab8:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	4a1f      	ldr	r2, [pc, #124]	@ (8002b3c <ADC_ConfigureBoostMode+0x20c>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d808      	bhi.n	8002ad4 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	689a      	ldr	r2, [r3, #8]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002ad0:	609a      	str	r2, [r3, #8]
}
 8002ad2:	e025      	b.n	8002b20 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	4a1a      	ldr	r2, [pc, #104]	@ (8002b40 <ADC_ConfigureBoostMode+0x210>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d80a      	bhi.n	8002af2 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002aee:	609a      	str	r2, [r3, #8]
}
 8002af0:	e016      	b.n	8002b20 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	4a13      	ldr	r2, [pc, #76]	@ (8002b44 <ADC_ConfigureBoostMode+0x214>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d80a      	bhi.n	8002b10 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b0c:	609a      	str	r2, [r3, #8]
}
 8002b0e:	e007      	b.n	8002b20 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	689a      	ldr	r2, [r3, #8]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8002b1e:	609a      	str	r2, [r3, #8]
}
 8002b20:	bf00      	nop
 8002b22:	3710      	adds	r7, #16
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	40022000 	.word	0x40022000
 8002b2c:	40022100 	.word	0x40022100
 8002b30:	40022300 	.word	0x40022300
 8002b34:	58026300 	.word	0x58026300
 8002b38:	01312d00 	.word	0x01312d00
 8002b3c:	005f5e10 	.word	0x005f5e10
 8002b40:	00bebc20 	.word	0x00bebc20
 8002b44:	017d7840 	.word	0x017d7840

08002b48 <LL_ADC_IsEnabled>:
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	f003 0301 	and.w	r3, r3, #1
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d101      	bne.n	8002b60 <LL_ADC_IsEnabled+0x18>
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e000      	b.n	8002b62 <LL_ADC_IsEnabled+0x1a>
 8002b60:	2300      	movs	r3, #0
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	370c      	adds	r7, #12
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr

08002b6e <LL_ADC_REG_IsConversionOngoing>:
{
 8002b6e:	b480      	push	{r7}
 8002b70:	b083      	sub	sp, #12
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	f003 0304 	and.w	r3, r3, #4
 8002b7e:	2b04      	cmp	r3, #4
 8002b80:	d101      	bne.n	8002b86 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002b82:	2301      	movs	r3, #1
 8002b84:	e000      	b.n	8002b88 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002b86:	2300      	movs	r3, #0
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	370c      	adds	r7, #12
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr

08002b94 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002b94:	b590      	push	{r4, r7, lr}
 8002b96:	b09f      	sub	sp, #124	@ 0x7c
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d101      	bne.n	8002bb2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002bae:	2302      	movs	r3, #2
 8002bb0:	e0be      	b.n	8002d30 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a5c      	ldr	r2, [pc, #368]	@ (8002d38 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d102      	bne.n	8002bd2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002bcc:	4b5b      	ldr	r3, [pc, #364]	@ (8002d3c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002bce:	60bb      	str	r3, [r7, #8]
 8002bd0:	e001      	b.n	8002bd6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d10b      	bne.n	8002bf4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002be0:	f043 0220 	orr.w	r2, r3, #32
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e09d      	b.n	8002d30 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7ff ffb9 	bl	8002b6e <LL_ADC_REG_IsConversionOngoing>
 8002bfc:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7ff ffb3 	bl	8002b6e <LL_ADC_REG_IsConversionOngoing>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d17f      	bne.n	8002d0e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002c0e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d17c      	bne.n	8002d0e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a47      	ldr	r2, [pc, #284]	@ (8002d38 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d004      	beq.n	8002c28 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a46      	ldr	r2, [pc, #280]	@ (8002d3c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d101      	bne.n	8002c2c <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8002c28:	4b45      	ldr	r3, [pc, #276]	@ (8002d40 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002c2a:	e000      	b.n	8002c2e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8002c2c:	4b45      	ldr	r3, [pc, #276]	@ (8002d44 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002c2e:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d039      	beq.n	8002cac <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002c38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	431a      	orrs	r2, r3
 8002c46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c48:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a3a      	ldr	r2, [pc, #232]	@ (8002d38 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d004      	beq.n	8002c5e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a38      	ldr	r2, [pc, #224]	@ (8002d3c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d10e      	bne.n	8002c7c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002c5e:	4836      	ldr	r0, [pc, #216]	@ (8002d38 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002c60:	f7ff ff72 	bl	8002b48 <LL_ADC_IsEnabled>
 8002c64:	4604      	mov	r4, r0
 8002c66:	4835      	ldr	r0, [pc, #212]	@ (8002d3c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002c68:	f7ff ff6e 	bl	8002b48 <LL_ADC_IsEnabled>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	4323      	orrs	r3, r4
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	bf0c      	ite	eq
 8002c74:	2301      	moveq	r3, #1
 8002c76:	2300      	movne	r3, #0
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	e008      	b.n	8002c8e <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8002c7c:	4832      	ldr	r0, [pc, #200]	@ (8002d48 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002c7e:	f7ff ff63 	bl	8002b48 <LL_ADC_IsEnabled>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	bf0c      	ite	eq
 8002c88:	2301      	moveq	r3, #1
 8002c8a:	2300      	movne	r3, #0
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d047      	beq.n	8002d22 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002c92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c94:	689a      	ldr	r2, [r3, #8]
 8002c96:	4b2d      	ldr	r3, [pc, #180]	@ (8002d4c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002c98:	4013      	ands	r3, r2
 8002c9a:	683a      	ldr	r2, [r7, #0]
 8002c9c:	6811      	ldr	r1, [r2, #0]
 8002c9e:	683a      	ldr	r2, [r7, #0]
 8002ca0:	6892      	ldr	r2, [r2, #8]
 8002ca2:	430a      	orrs	r2, r1
 8002ca4:	431a      	orrs	r2, r3
 8002ca6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ca8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002caa:	e03a      	b.n	8002d22 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002cac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002cb4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002cb6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a1e      	ldr	r2, [pc, #120]	@ (8002d38 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d004      	beq.n	8002ccc <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a1d      	ldr	r2, [pc, #116]	@ (8002d3c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d10e      	bne.n	8002cea <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8002ccc:	481a      	ldr	r0, [pc, #104]	@ (8002d38 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002cce:	f7ff ff3b 	bl	8002b48 <LL_ADC_IsEnabled>
 8002cd2:	4604      	mov	r4, r0
 8002cd4:	4819      	ldr	r0, [pc, #100]	@ (8002d3c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002cd6:	f7ff ff37 	bl	8002b48 <LL_ADC_IsEnabled>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	4323      	orrs	r3, r4
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	bf0c      	ite	eq
 8002ce2:	2301      	moveq	r3, #1
 8002ce4:	2300      	movne	r3, #0
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	e008      	b.n	8002cfc <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002cea:	4817      	ldr	r0, [pc, #92]	@ (8002d48 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002cec:	f7ff ff2c 	bl	8002b48 <LL_ADC_IsEnabled>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	bf0c      	ite	eq
 8002cf6:	2301      	moveq	r3, #1
 8002cf8:	2300      	movne	r3, #0
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d010      	beq.n	8002d22 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002d00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d02:	689a      	ldr	r2, [r3, #8]
 8002d04:	4b11      	ldr	r3, [pc, #68]	@ (8002d4c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002d06:	4013      	ands	r3, r2
 8002d08:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002d0a:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d0c:	e009      	b.n	8002d22 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d12:	f043 0220 	orr.w	r2, r3, #32
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8002d20:	e000      	b.n	8002d24 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d22:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2200      	movs	r2, #0
 8002d28:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002d2c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	377c      	adds	r7, #124	@ 0x7c
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd90      	pop	{r4, r7, pc}
 8002d38:	40022000 	.word	0x40022000
 8002d3c:	40022100 	.word	0x40022100
 8002d40:	40022300 	.word	0x40022300
 8002d44:	58026300 	.word	0x58026300
 8002d48:	58026000 	.word	0x58026000
 8002d4c:	fffff0e0 	.word	0xfffff0e0

08002d50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b085      	sub	sp, #20
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f003 0307 	and.w	r3, r3, #7
 8002d5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d60:	4b0b      	ldr	r3, [pc, #44]	@ (8002d90 <__NVIC_SetPriorityGrouping+0x40>)
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d66:	68ba      	ldr	r2, [r7, #8]
 8002d68:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002d78:	4b06      	ldr	r3, [pc, #24]	@ (8002d94 <__NVIC_SetPriorityGrouping+0x44>)
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d7e:	4a04      	ldr	r2, [pc, #16]	@ (8002d90 <__NVIC_SetPriorityGrouping+0x40>)
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	60d3      	str	r3, [r2, #12]
}
 8002d84:	bf00      	nop
 8002d86:	3714      	adds	r7, #20
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr
 8002d90:	e000ed00 	.word	0xe000ed00
 8002d94:	05fa0000 	.word	0x05fa0000

08002d98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d9c:	4b04      	ldr	r3, [pc, #16]	@ (8002db0 <__NVIC_GetPriorityGrouping+0x18>)
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	0a1b      	lsrs	r3, r3, #8
 8002da2:	f003 0307 	and.w	r3, r3, #7
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr
 8002db0:	e000ed00 	.word	0xe000ed00

08002db4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	4603      	mov	r3, r0
 8002dbc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002dbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	db0b      	blt.n	8002dde <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dc6:	88fb      	ldrh	r3, [r7, #6]
 8002dc8:	f003 021f 	and.w	r2, r3, #31
 8002dcc:	4907      	ldr	r1, [pc, #28]	@ (8002dec <__NVIC_EnableIRQ+0x38>)
 8002dce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002dd2:	095b      	lsrs	r3, r3, #5
 8002dd4:	2001      	movs	r0, #1
 8002dd6:	fa00 f202 	lsl.w	r2, r0, r2
 8002dda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002dde:	bf00      	nop
 8002de0:	370c      	adds	r7, #12
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	e000e100 	.word	0xe000e100

08002df0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	4603      	mov	r3, r0
 8002df8:	6039      	str	r1, [r7, #0]
 8002dfa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002dfc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	db0a      	blt.n	8002e1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	b2da      	uxtb	r2, r3
 8002e08:	490c      	ldr	r1, [pc, #48]	@ (8002e3c <__NVIC_SetPriority+0x4c>)
 8002e0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e0e:	0112      	lsls	r2, r2, #4
 8002e10:	b2d2      	uxtb	r2, r2
 8002e12:	440b      	add	r3, r1
 8002e14:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e18:	e00a      	b.n	8002e30 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	b2da      	uxtb	r2, r3
 8002e1e:	4908      	ldr	r1, [pc, #32]	@ (8002e40 <__NVIC_SetPriority+0x50>)
 8002e20:	88fb      	ldrh	r3, [r7, #6]
 8002e22:	f003 030f 	and.w	r3, r3, #15
 8002e26:	3b04      	subs	r3, #4
 8002e28:	0112      	lsls	r2, r2, #4
 8002e2a:	b2d2      	uxtb	r2, r2
 8002e2c:	440b      	add	r3, r1
 8002e2e:	761a      	strb	r2, [r3, #24]
}
 8002e30:	bf00      	nop
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr
 8002e3c:	e000e100 	.word	0xe000e100
 8002e40:	e000ed00 	.word	0xe000ed00

08002e44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b089      	sub	sp, #36	@ 0x24
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	60f8      	str	r0, [r7, #12]
 8002e4c:	60b9      	str	r1, [r7, #8]
 8002e4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f003 0307 	and.w	r3, r3, #7
 8002e56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	f1c3 0307 	rsb	r3, r3, #7
 8002e5e:	2b04      	cmp	r3, #4
 8002e60:	bf28      	it	cs
 8002e62:	2304      	movcs	r3, #4
 8002e64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	3304      	adds	r3, #4
 8002e6a:	2b06      	cmp	r3, #6
 8002e6c:	d902      	bls.n	8002e74 <NVIC_EncodePriority+0x30>
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	3b03      	subs	r3, #3
 8002e72:	e000      	b.n	8002e76 <NVIC_EncodePriority+0x32>
 8002e74:	2300      	movs	r3, #0
 8002e76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e78:	f04f 32ff 	mov.w	r2, #4294967295
 8002e7c:	69bb      	ldr	r3, [r7, #24]
 8002e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e82:	43da      	mvns	r2, r3
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	401a      	ands	r2, r3
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e8c:	f04f 31ff 	mov.w	r1, #4294967295
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	fa01 f303 	lsl.w	r3, r1, r3
 8002e96:	43d9      	mvns	r1, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e9c:	4313      	orrs	r3, r2
         );
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3724      	adds	r7, #36	@ 0x24
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
	...

08002eac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	3b01      	subs	r3, #1
 8002eb8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ebc:	d301      	bcc.n	8002ec2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e00f      	b.n	8002ee2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ec2:	4a0a      	ldr	r2, [pc, #40]	@ (8002eec <SysTick_Config+0x40>)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	3b01      	subs	r3, #1
 8002ec8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002eca:	210f      	movs	r1, #15
 8002ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8002ed0:	f7ff ff8e 	bl	8002df0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ed4:	4b05      	ldr	r3, [pc, #20]	@ (8002eec <SysTick_Config+0x40>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002eda:	4b04      	ldr	r3, [pc, #16]	@ (8002eec <SysTick_Config+0x40>)
 8002edc:	2207      	movs	r2, #7
 8002ede:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3708      	adds	r7, #8
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	e000e010 	.word	0xe000e010

08002ef0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f7ff ff29 	bl	8002d50 <__NVIC_SetPriorityGrouping>
}
 8002efe:	bf00      	nop
 8002f00:	3708      	adds	r7, #8
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}

08002f06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f06:	b580      	push	{r7, lr}
 8002f08:	b086      	sub	sp, #24
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	60b9      	str	r1, [r7, #8]
 8002f10:	607a      	str	r2, [r7, #4]
 8002f12:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002f14:	f7ff ff40 	bl	8002d98 <__NVIC_GetPriorityGrouping>
 8002f18:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	68b9      	ldr	r1, [r7, #8]
 8002f1e:	6978      	ldr	r0, [r7, #20]
 8002f20:	f7ff ff90 	bl	8002e44 <NVIC_EncodePriority>
 8002f24:	4602      	mov	r2, r0
 8002f26:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002f2a:	4611      	mov	r1, r2
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f7ff ff5f 	bl	8002df0 <__NVIC_SetPriority>
}
 8002f32:	bf00      	nop
 8002f34:	3718      	adds	r7, #24
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}

08002f3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f3a:	b580      	push	{r7, lr}
 8002f3c:	b082      	sub	sp, #8
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	4603      	mov	r3, r0
 8002f42:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f44:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f7ff ff33 	bl	8002db4 <__NVIC_EnableIRQ>
}
 8002f4e:	bf00      	nop
 8002f50:	3708      	adds	r7, #8
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}

08002f56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f56:	b580      	push	{r7, lr}
 8002f58:	b082      	sub	sp, #8
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f7ff ffa4 	bl	8002eac <SysTick_Config>
 8002f64:	4603      	mov	r3, r0
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3708      	adds	r7, #8
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
	...

08002f70 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002f70:	b480      	push	{r7}
 8002f72:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8002f74:	f3bf 8f5f 	dmb	sy
}
 8002f78:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002f7a:	4b07      	ldr	r3, [pc, #28]	@ (8002f98 <HAL_MPU_Disable+0x28>)
 8002f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f7e:	4a06      	ldr	r2, [pc, #24]	@ (8002f98 <HAL_MPU_Disable+0x28>)
 8002f80:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f84:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002f86:	4b05      	ldr	r3, [pc, #20]	@ (8002f9c <HAL_MPU_Disable+0x2c>)
 8002f88:	2200      	movs	r2, #0
 8002f8a:	605a      	str	r2, [r3, #4]
}
 8002f8c:	bf00      	nop
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr
 8002f96:	bf00      	nop
 8002f98:	e000ed00 	.word	0xe000ed00
 8002f9c:	e000ed90 	.word	0xe000ed90

08002fa0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002fa8:	4a0b      	ldr	r2, [pc, #44]	@ (8002fd8 <HAL_MPU_Enable+0x38>)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f043 0301 	orr.w	r3, r3, #1
 8002fb0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002fb2:	4b0a      	ldr	r3, [pc, #40]	@ (8002fdc <HAL_MPU_Enable+0x3c>)
 8002fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fb6:	4a09      	ldr	r2, [pc, #36]	@ (8002fdc <HAL_MPU_Enable+0x3c>)
 8002fb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fbc:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002fbe:	f3bf 8f4f 	dsb	sy
}
 8002fc2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002fc4:	f3bf 8f6f 	isb	sy
}
 8002fc8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002fca:	bf00      	nop
 8002fcc:	370c      	adds	r7, #12
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop
 8002fd8:	e000ed90 	.word	0xe000ed90
 8002fdc:	e000ed00 	.word	0xe000ed00

08002fe0 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	785a      	ldrb	r2, [r3, #1]
 8002fec:	4b1b      	ldr	r3, [pc, #108]	@ (800305c <HAL_MPU_ConfigRegion+0x7c>)
 8002fee:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002ff0:	4b1a      	ldr	r3, [pc, #104]	@ (800305c <HAL_MPU_ConfigRegion+0x7c>)
 8002ff2:	691b      	ldr	r3, [r3, #16]
 8002ff4:	4a19      	ldr	r2, [pc, #100]	@ (800305c <HAL_MPU_ConfigRegion+0x7c>)
 8002ff6:	f023 0301 	bic.w	r3, r3, #1
 8002ffa:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002ffc:	4a17      	ldr	r2, [pc, #92]	@ (800305c <HAL_MPU_ConfigRegion+0x7c>)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	7b1b      	ldrb	r3, [r3, #12]
 8003008:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	7adb      	ldrb	r3, [r3, #11]
 800300e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003010:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	7a9b      	ldrb	r3, [r3, #10]
 8003016:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003018:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	7b5b      	ldrb	r3, [r3, #13]
 800301e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003020:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	7b9b      	ldrb	r3, [r3, #14]
 8003026:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003028:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	7bdb      	ldrb	r3, [r3, #15]
 800302e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003030:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	7a5b      	ldrb	r3, [r3, #9]
 8003036:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003038:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	7a1b      	ldrb	r3, [r3, #8]
 800303e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003040:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	7812      	ldrb	r2, [r2, #0]
 8003046:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003048:	4a04      	ldr	r2, [pc, #16]	@ (800305c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800304a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800304c:	6113      	str	r3, [r2, #16]
}
 800304e:	bf00      	nop
 8003050:	370c      	adds	r7, #12
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	e000ed90 	.word	0xe000ed90

08003060 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b086      	sub	sp, #24
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003068:	f7fe fdc0 	bl	8001bec <HAL_GetTick>
 800306c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d101      	bne.n	8003078 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e316      	b.n	80036a6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a66      	ldr	r2, [pc, #408]	@ (8003218 <HAL_DMA_Init+0x1b8>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d04a      	beq.n	8003118 <HAL_DMA_Init+0xb8>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a65      	ldr	r2, [pc, #404]	@ (800321c <HAL_DMA_Init+0x1bc>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d045      	beq.n	8003118 <HAL_DMA_Init+0xb8>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a63      	ldr	r2, [pc, #396]	@ (8003220 <HAL_DMA_Init+0x1c0>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d040      	beq.n	8003118 <HAL_DMA_Init+0xb8>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a62      	ldr	r2, [pc, #392]	@ (8003224 <HAL_DMA_Init+0x1c4>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d03b      	beq.n	8003118 <HAL_DMA_Init+0xb8>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a60      	ldr	r2, [pc, #384]	@ (8003228 <HAL_DMA_Init+0x1c8>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d036      	beq.n	8003118 <HAL_DMA_Init+0xb8>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a5f      	ldr	r2, [pc, #380]	@ (800322c <HAL_DMA_Init+0x1cc>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d031      	beq.n	8003118 <HAL_DMA_Init+0xb8>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a5d      	ldr	r2, [pc, #372]	@ (8003230 <HAL_DMA_Init+0x1d0>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d02c      	beq.n	8003118 <HAL_DMA_Init+0xb8>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a5c      	ldr	r2, [pc, #368]	@ (8003234 <HAL_DMA_Init+0x1d4>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d027      	beq.n	8003118 <HAL_DMA_Init+0xb8>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a5a      	ldr	r2, [pc, #360]	@ (8003238 <HAL_DMA_Init+0x1d8>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d022      	beq.n	8003118 <HAL_DMA_Init+0xb8>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a59      	ldr	r2, [pc, #356]	@ (800323c <HAL_DMA_Init+0x1dc>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d01d      	beq.n	8003118 <HAL_DMA_Init+0xb8>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a57      	ldr	r2, [pc, #348]	@ (8003240 <HAL_DMA_Init+0x1e0>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d018      	beq.n	8003118 <HAL_DMA_Init+0xb8>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a56      	ldr	r2, [pc, #344]	@ (8003244 <HAL_DMA_Init+0x1e4>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d013      	beq.n	8003118 <HAL_DMA_Init+0xb8>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a54      	ldr	r2, [pc, #336]	@ (8003248 <HAL_DMA_Init+0x1e8>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d00e      	beq.n	8003118 <HAL_DMA_Init+0xb8>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a53      	ldr	r2, [pc, #332]	@ (800324c <HAL_DMA_Init+0x1ec>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d009      	beq.n	8003118 <HAL_DMA_Init+0xb8>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a51      	ldr	r2, [pc, #324]	@ (8003250 <HAL_DMA_Init+0x1f0>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d004      	beq.n	8003118 <HAL_DMA_Init+0xb8>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a50      	ldr	r2, [pc, #320]	@ (8003254 <HAL_DMA_Init+0x1f4>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d101      	bne.n	800311c <HAL_DMA_Init+0xbc>
 8003118:	2301      	movs	r3, #1
 800311a:	e000      	b.n	800311e <HAL_DMA_Init+0xbe>
 800311c:	2300      	movs	r3, #0
 800311e:	2b00      	cmp	r3, #0
 8003120:	f000 813b 	beq.w	800339a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2202      	movs	r2, #2
 8003128:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a37      	ldr	r2, [pc, #220]	@ (8003218 <HAL_DMA_Init+0x1b8>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d04a      	beq.n	80031d4 <HAL_DMA_Init+0x174>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a36      	ldr	r2, [pc, #216]	@ (800321c <HAL_DMA_Init+0x1bc>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d045      	beq.n	80031d4 <HAL_DMA_Init+0x174>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a34      	ldr	r2, [pc, #208]	@ (8003220 <HAL_DMA_Init+0x1c0>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d040      	beq.n	80031d4 <HAL_DMA_Init+0x174>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a33      	ldr	r2, [pc, #204]	@ (8003224 <HAL_DMA_Init+0x1c4>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d03b      	beq.n	80031d4 <HAL_DMA_Init+0x174>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a31      	ldr	r2, [pc, #196]	@ (8003228 <HAL_DMA_Init+0x1c8>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d036      	beq.n	80031d4 <HAL_DMA_Init+0x174>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a30      	ldr	r2, [pc, #192]	@ (800322c <HAL_DMA_Init+0x1cc>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d031      	beq.n	80031d4 <HAL_DMA_Init+0x174>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a2e      	ldr	r2, [pc, #184]	@ (8003230 <HAL_DMA_Init+0x1d0>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d02c      	beq.n	80031d4 <HAL_DMA_Init+0x174>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a2d      	ldr	r2, [pc, #180]	@ (8003234 <HAL_DMA_Init+0x1d4>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d027      	beq.n	80031d4 <HAL_DMA_Init+0x174>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a2b      	ldr	r2, [pc, #172]	@ (8003238 <HAL_DMA_Init+0x1d8>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d022      	beq.n	80031d4 <HAL_DMA_Init+0x174>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a2a      	ldr	r2, [pc, #168]	@ (800323c <HAL_DMA_Init+0x1dc>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d01d      	beq.n	80031d4 <HAL_DMA_Init+0x174>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a28      	ldr	r2, [pc, #160]	@ (8003240 <HAL_DMA_Init+0x1e0>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d018      	beq.n	80031d4 <HAL_DMA_Init+0x174>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a27      	ldr	r2, [pc, #156]	@ (8003244 <HAL_DMA_Init+0x1e4>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d013      	beq.n	80031d4 <HAL_DMA_Init+0x174>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a25      	ldr	r2, [pc, #148]	@ (8003248 <HAL_DMA_Init+0x1e8>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d00e      	beq.n	80031d4 <HAL_DMA_Init+0x174>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a24      	ldr	r2, [pc, #144]	@ (800324c <HAL_DMA_Init+0x1ec>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d009      	beq.n	80031d4 <HAL_DMA_Init+0x174>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a22      	ldr	r2, [pc, #136]	@ (8003250 <HAL_DMA_Init+0x1f0>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d004      	beq.n	80031d4 <HAL_DMA_Init+0x174>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a21      	ldr	r2, [pc, #132]	@ (8003254 <HAL_DMA_Init+0x1f4>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d108      	bne.n	80031e6 <HAL_DMA_Init+0x186>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f022 0201 	bic.w	r2, r2, #1
 80031e2:	601a      	str	r2, [r3, #0]
 80031e4:	e007      	b.n	80031f6 <HAL_DMA_Init+0x196>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f022 0201 	bic.w	r2, r2, #1
 80031f4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80031f6:	e02f      	b.n	8003258 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80031f8:	f7fe fcf8 	bl	8001bec <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	2b05      	cmp	r3, #5
 8003204:	d928      	bls.n	8003258 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2220      	movs	r2, #32
 800320a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2203      	movs	r2, #3
 8003210:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e246      	b.n	80036a6 <HAL_DMA_Init+0x646>
 8003218:	40020010 	.word	0x40020010
 800321c:	40020028 	.word	0x40020028
 8003220:	40020040 	.word	0x40020040
 8003224:	40020058 	.word	0x40020058
 8003228:	40020070 	.word	0x40020070
 800322c:	40020088 	.word	0x40020088
 8003230:	400200a0 	.word	0x400200a0
 8003234:	400200b8 	.word	0x400200b8
 8003238:	40020410 	.word	0x40020410
 800323c:	40020428 	.word	0x40020428
 8003240:	40020440 	.word	0x40020440
 8003244:	40020458 	.word	0x40020458
 8003248:	40020470 	.word	0x40020470
 800324c:	40020488 	.word	0x40020488
 8003250:	400204a0 	.word	0x400204a0
 8003254:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0301 	and.w	r3, r3, #1
 8003262:	2b00      	cmp	r3, #0
 8003264:	d1c8      	bne.n	80031f8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800326e:	697a      	ldr	r2, [r7, #20]
 8003270:	4b83      	ldr	r3, [pc, #524]	@ (8003480 <HAL_DMA_Init+0x420>)
 8003272:	4013      	ands	r3, r2
 8003274:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800327e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	691b      	ldr	r3, [r3, #16]
 8003284:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800328a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	699b      	ldr	r3, [r3, #24]
 8003290:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003296:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a1b      	ldr	r3, [r3, #32]
 800329c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800329e:	697a      	ldr	r2, [r7, #20]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032a8:	2b04      	cmp	r3, #4
 80032aa:	d107      	bne.n	80032bc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032b4:	4313      	orrs	r3, r2
 80032b6:	697a      	ldr	r2, [r7, #20]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80032bc:	4b71      	ldr	r3, [pc, #452]	@ (8003484 <HAL_DMA_Init+0x424>)
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	4b71      	ldr	r3, [pc, #452]	@ (8003488 <HAL_DMA_Init+0x428>)
 80032c2:	4013      	ands	r3, r2
 80032c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80032c8:	d328      	bcc.n	800331c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	2b28      	cmp	r3, #40	@ 0x28
 80032d0:	d903      	bls.n	80032da <HAL_DMA_Init+0x27a>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	2b2e      	cmp	r3, #46	@ 0x2e
 80032d8:	d917      	bls.n	800330a <HAL_DMA_Init+0x2aa>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	2b3e      	cmp	r3, #62	@ 0x3e
 80032e0:	d903      	bls.n	80032ea <HAL_DMA_Init+0x28a>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	2b42      	cmp	r3, #66	@ 0x42
 80032e8:	d90f      	bls.n	800330a <HAL_DMA_Init+0x2aa>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	2b46      	cmp	r3, #70	@ 0x46
 80032f0:	d903      	bls.n	80032fa <HAL_DMA_Init+0x29a>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	2b48      	cmp	r3, #72	@ 0x48
 80032f8:	d907      	bls.n	800330a <HAL_DMA_Init+0x2aa>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	2b4e      	cmp	r3, #78	@ 0x4e
 8003300:	d905      	bls.n	800330e <HAL_DMA_Init+0x2ae>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	2b52      	cmp	r3, #82	@ 0x52
 8003308:	d801      	bhi.n	800330e <HAL_DMA_Init+0x2ae>
 800330a:	2301      	movs	r3, #1
 800330c:	e000      	b.n	8003310 <HAL_DMA_Init+0x2b0>
 800330e:	2300      	movs	r3, #0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d003      	beq.n	800331c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800331a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	697a      	ldr	r2, [r7, #20]
 8003322:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	695b      	ldr	r3, [r3, #20]
 800332a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	f023 0307 	bic.w	r3, r3, #7
 8003332:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003338:	697a      	ldr	r2, [r7, #20]
 800333a:	4313      	orrs	r3, r2
 800333c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003342:	2b04      	cmp	r3, #4
 8003344:	d117      	bne.n	8003376 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800334a:	697a      	ldr	r2, [r7, #20]
 800334c:	4313      	orrs	r3, r2
 800334e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003354:	2b00      	cmp	r3, #0
 8003356:	d00e      	beq.n	8003376 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f001 ff1d 	bl	8005198 <DMA_CheckFifoParam>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d008      	beq.n	8003376 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2240      	movs	r2, #64	@ 0x40
 8003368:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2201      	movs	r2, #1
 800336e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e197      	b.n	80036a6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	697a      	ldr	r2, [r7, #20]
 800337c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f001 fe58 	bl	8005034 <DMA_CalcBaseAndBitshift>
 8003384:	4603      	mov	r3, r0
 8003386:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800338c:	f003 031f 	and.w	r3, r3, #31
 8003390:	223f      	movs	r2, #63	@ 0x3f
 8003392:	409a      	lsls	r2, r3
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	609a      	str	r2, [r3, #8]
 8003398:	e0cd      	b.n	8003536 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a3b      	ldr	r2, [pc, #236]	@ (800348c <HAL_DMA_Init+0x42c>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d022      	beq.n	80033ea <HAL_DMA_Init+0x38a>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a39      	ldr	r2, [pc, #228]	@ (8003490 <HAL_DMA_Init+0x430>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d01d      	beq.n	80033ea <HAL_DMA_Init+0x38a>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a38      	ldr	r2, [pc, #224]	@ (8003494 <HAL_DMA_Init+0x434>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d018      	beq.n	80033ea <HAL_DMA_Init+0x38a>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a36      	ldr	r2, [pc, #216]	@ (8003498 <HAL_DMA_Init+0x438>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d013      	beq.n	80033ea <HAL_DMA_Init+0x38a>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a35      	ldr	r2, [pc, #212]	@ (800349c <HAL_DMA_Init+0x43c>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d00e      	beq.n	80033ea <HAL_DMA_Init+0x38a>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a33      	ldr	r2, [pc, #204]	@ (80034a0 <HAL_DMA_Init+0x440>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d009      	beq.n	80033ea <HAL_DMA_Init+0x38a>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a32      	ldr	r2, [pc, #200]	@ (80034a4 <HAL_DMA_Init+0x444>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d004      	beq.n	80033ea <HAL_DMA_Init+0x38a>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a30      	ldr	r2, [pc, #192]	@ (80034a8 <HAL_DMA_Init+0x448>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d101      	bne.n	80033ee <HAL_DMA_Init+0x38e>
 80033ea:	2301      	movs	r3, #1
 80033ec:	e000      	b.n	80033f0 <HAL_DMA_Init+0x390>
 80033ee:	2300      	movs	r3, #0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	f000 8097 	beq.w	8003524 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a24      	ldr	r2, [pc, #144]	@ (800348c <HAL_DMA_Init+0x42c>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d021      	beq.n	8003444 <HAL_DMA_Init+0x3e4>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a22      	ldr	r2, [pc, #136]	@ (8003490 <HAL_DMA_Init+0x430>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d01c      	beq.n	8003444 <HAL_DMA_Init+0x3e4>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a21      	ldr	r2, [pc, #132]	@ (8003494 <HAL_DMA_Init+0x434>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d017      	beq.n	8003444 <HAL_DMA_Init+0x3e4>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a1f      	ldr	r2, [pc, #124]	@ (8003498 <HAL_DMA_Init+0x438>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d012      	beq.n	8003444 <HAL_DMA_Init+0x3e4>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a1e      	ldr	r2, [pc, #120]	@ (800349c <HAL_DMA_Init+0x43c>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d00d      	beq.n	8003444 <HAL_DMA_Init+0x3e4>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a1c      	ldr	r2, [pc, #112]	@ (80034a0 <HAL_DMA_Init+0x440>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d008      	beq.n	8003444 <HAL_DMA_Init+0x3e4>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a1b      	ldr	r2, [pc, #108]	@ (80034a4 <HAL_DMA_Init+0x444>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d003      	beq.n	8003444 <HAL_DMA_Init+0x3e4>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a19      	ldr	r2, [pc, #100]	@ (80034a8 <HAL_DMA_Init+0x448>)
 8003442:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2202      	movs	r2, #2
 8003448:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800345c:	697a      	ldr	r2, [r7, #20]
 800345e:	4b13      	ldr	r3, [pc, #76]	@ (80034ac <HAL_DMA_Init+0x44c>)
 8003460:	4013      	ands	r3, r2
 8003462:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	2b40      	cmp	r3, #64	@ 0x40
 800346a:	d021      	beq.n	80034b0 <HAL_DMA_Init+0x450>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	2b80      	cmp	r3, #128	@ 0x80
 8003472:	d102      	bne.n	800347a <HAL_DMA_Init+0x41a>
 8003474:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003478:	e01b      	b.n	80034b2 <HAL_DMA_Init+0x452>
 800347a:	2300      	movs	r3, #0
 800347c:	e019      	b.n	80034b2 <HAL_DMA_Init+0x452>
 800347e:	bf00      	nop
 8003480:	fe10803f 	.word	0xfe10803f
 8003484:	5c001000 	.word	0x5c001000
 8003488:	ffff0000 	.word	0xffff0000
 800348c:	58025408 	.word	0x58025408
 8003490:	5802541c 	.word	0x5802541c
 8003494:	58025430 	.word	0x58025430
 8003498:	58025444 	.word	0x58025444
 800349c:	58025458 	.word	0x58025458
 80034a0:	5802546c 	.word	0x5802546c
 80034a4:	58025480 	.word	0x58025480
 80034a8:	58025494 	.word	0x58025494
 80034ac:	fffe000f 	.word	0xfffe000f
 80034b0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	68d2      	ldr	r2, [r2, #12]
 80034b6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80034b8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80034c0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	695b      	ldr	r3, [r3, #20]
 80034c6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80034c8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	699b      	ldr	r3, [r3, #24]
 80034ce:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80034d0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	69db      	ldr	r3, [r3, #28]
 80034d6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80034d8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a1b      	ldr	r3, [r3, #32]
 80034de:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80034e0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80034e2:	697a      	ldr	r2, [r7, #20]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	697a      	ldr	r2, [r7, #20]
 80034ee:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	461a      	mov	r2, r3
 80034f6:	4b6e      	ldr	r3, [pc, #440]	@ (80036b0 <HAL_DMA_Init+0x650>)
 80034f8:	4413      	add	r3, r2
 80034fa:	4a6e      	ldr	r2, [pc, #440]	@ (80036b4 <HAL_DMA_Init+0x654>)
 80034fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003500:	091b      	lsrs	r3, r3, #4
 8003502:	009a      	lsls	r2, r3, #2
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f001 fd93 	bl	8005034 <DMA_CalcBaseAndBitshift>
 800350e:	4603      	mov	r3, r0
 8003510:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003516:	f003 031f 	and.w	r3, r3, #31
 800351a:	2201      	movs	r2, #1
 800351c:	409a      	lsls	r2, r3
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	605a      	str	r2, [r3, #4]
 8003522:	e008      	b.n	8003536 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2240      	movs	r2, #64	@ 0x40
 8003528:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2203      	movs	r2, #3
 800352e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e0b7      	b.n	80036a6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a5f      	ldr	r2, [pc, #380]	@ (80036b8 <HAL_DMA_Init+0x658>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d072      	beq.n	8003626 <HAL_DMA_Init+0x5c6>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a5d      	ldr	r2, [pc, #372]	@ (80036bc <HAL_DMA_Init+0x65c>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d06d      	beq.n	8003626 <HAL_DMA_Init+0x5c6>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a5c      	ldr	r2, [pc, #368]	@ (80036c0 <HAL_DMA_Init+0x660>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d068      	beq.n	8003626 <HAL_DMA_Init+0x5c6>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a5a      	ldr	r2, [pc, #360]	@ (80036c4 <HAL_DMA_Init+0x664>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d063      	beq.n	8003626 <HAL_DMA_Init+0x5c6>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a59      	ldr	r2, [pc, #356]	@ (80036c8 <HAL_DMA_Init+0x668>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d05e      	beq.n	8003626 <HAL_DMA_Init+0x5c6>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a57      	ldr	r2, [pc, #348]	@ (80036cc <HAL_DMA_Init+0x66c>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d059      	beq.n	8003626 <HAL_DMA_Init+0x5c6>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a56      	ldr	r2, [pc, #344]	@ (80036d0 <HAL_DMA_Init+0x670>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d054      	beq.n	8003626 <HAL_DMA_Init+0x5c6>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a54      	ldr	r2, [pc, #336]	@ (80036d4 <HAL_DMA_Init+0x674>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d04f      	beq.n	8003626 <HAL_DMA_Init+0x5c6>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a53      	ldr	r2, [pc, #332]	@ (80036d8 <HAL_DMA_Init+0x678>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d04a      	beq.n	8003626 <HAL_DMA_Init+0x5c6>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a51      	ldr	r2, [pc, #324]	@ (80036dc <HAL_DMA_Init+0x67c>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d045      	beq.n	8003626 <HAL_DMA_Init+0x5c6>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a50      	ldr	r2, [pc, #320]	@ (80036e0 <HAL_DMA_Init+0x680>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d040      	beq.n	8003626 <HAL_DMA_Init+0x5c6>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a4e      	ldr	r2, [pc, #312]	@ (80036e4 <HAL_DMA_Init+0x684>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d03b      	beq.n	8003626 <HAL_DMA_Init+0x5c6>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a4d      	ldr	r2, [pc, #308]	@ (80036e8 <HAL_DMA_Init+0x688>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d036      	beq.n	8003626 <HAL_DMA_Init+0x5c6>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a4b      	ldr	r2, [pc, #300]	@ (80036ec <HAL_DMA_Init+0x68c>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d031      	beq.n	8003626 <HAL_DMA_Init+0x5c6>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a4a      	ldr	r2, [pc, #296]	@ (80036f0 <HAL_DMA_Init+0x690>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d02c      	beq.n	8003626 <HAL_DMA_Init+0x5c6>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a48      	ldr	r2, [pc, #288]	@ (80036f4 <HAL_DMA_Init+0x694>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d027      	beq.n	8003626 <HAL_DMA_Init+0x5c6>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a47      	ldr	r2, [pc, #284]	@ (80036f8 <HAL_DMA_Init+0x698>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d022      	beq.n	8003626 <HAL_DMA_Init+0x5c6>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a45      	ldr	r2, [pc, #276]	@ (80036fc <HAL_DMA_Init+0x69c>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d01d      	beq.n	8003626 <HAL_DMA_Init+0x5c6>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a44      	ldr	r2, [pc, #272]	@ (8003700 <HAL_DMA_Init+0x6a0>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d018      	beq.n	8003626 <HAL_DMA_Init+0x5c6>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a42      	ldr	r2, [pc, #264]	@ (8003704 <HAL_DMA_Init+0x6a4>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d013      	beq.n	8003626 <HAL_DMA_Init+0x5c6>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a41      	ldr	r2, [pc, #260]	@ (8003708 <HAL_DMA_Init+0x6a8>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d00e      	beq.n	8003626 <HAL_DMA_Init+0x5c6>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a3f      	ldr	r2, [pc, #252]	@ (800370c <HAL_DMA_Init+0x6ac>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d009      	beq.n	8003626 <HAL_DMA_Init+0x5c6>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a3e      	ldr	r2, [pc, #248]	@ (8003710 <HAL_DMA_Init+0x6b0>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d004      	beq.n	8003626 <HAL_DMA_Init+0x5c6>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a3c      	ldr	r2, [pc, #240]	@ (8003714 <HAL_DMA_Init+0x6b4>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d101      	bne.n	800362a <HAL_DMA_Init+0x5ca>
 8003626:	2301      	movs	r3, #1
 8003628:	e000      	b.n	800362c <HAL_DMA_Init+0x5cc>
 800362a:	2300      	movs	r3, #0
 800362c:	2b00      	cmp	r3, #0
 800362e:	d032      	beq.n	8003696 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f001 fe2d 	bl	8005290 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	2b80      	cmp	r3, #128	@ 0x80
 800363c:	d102      	bne.n	8003644 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685a      	ldr	r2, [r3, #4]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800364c:	b2d2      	uxtb	r2, r2
 800364e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003658:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d010      	beq.n	8003684 <HAL_DMA_Init+0x624>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	2b08      	cmp	r3, #8
 8003668:	d80c      	bhi.n	8003684 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f001 feaa 	bl	80053c4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003674:	2200      	movs	r2, #0
 8003676:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003680:	605a      	str	r2, [r3, #4]
 8003682:	e008      	b.n	8003696 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80036a4:	2300      	movs	r3, #0
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3718      	adds	r7, #24
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	a7fdabf8 	.word	0xa7fdabf8
 80036b4:	cccccccd 	.word	0xcccccccd
 80036b8:	40020010 	.word	0x40020010
 80036bc:	40020028 	.word	0x40020028
 80036c0:	40020040 	.word	0x40020040
 80036c4:	40020058 	.word	0x40020058
 80036c8:	40020070 	.word	0x40020070
 80036cc:	40020088 	.word	0x40020088
 80036d0:	400200a0 	.word	0x400200a0
 80036d4:	400200b8 	.word	0x400200b8
 80036d8:	40020410 	.word	0x40020410
 80036dc:	40020428 	.word	0x40020428
 80036e0:	40020440 	.word	0x40020440
 80036e4:	40020458 	.word	0x40020458
 80036e8:	40020470 	.word	0x40020470
 80036ec:	40020488 	.word	0x40020488
 80036f0:	400204a0 	.word	0x400204a0
 80036f4:	400204b8 	.word	0x400204b8
 80036f8:	58025408 	.word	0x58025408
 80036fc:	5802541c 	.word	0x5802541c
 8003700:	58025430 	.word	0x58025430
 8003704:	58025444 	.word	0x58025444
 8003708:	58025458 	.word	0x58025458
 800370c:	5802546c 	.word	0x5802546c
 8003710:	58025480 	.word	0x58025480
 8003714:	58025494 	.word	0x58025494

08003718 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b086      	sub	sp, #24
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003720:	f7fe fa64 	bl	8001bec <HAL_GetTick>
 8003724:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d101      	bne.n	8003730 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e2dc      	b.n	8003cea <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003736:	b2db      	uxtb	r3, r3
 8003738:	2b02      	cmp	r3, #2
 800373a:	d008      	beq.n	800374e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2280      	movs	r2, #128	@ 0x80
 8003740:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e2cd      	b.n	8003cea <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a76      	ldr	r2, [pc, #472]	@ (800392c <HAL_DMA_Abort+0x214>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d04a      	beq.n	80037ee <HAL_DMA_Abort+0xd6>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a74      	ldr	r2, [pc, #464]	@ (8003930 <HAL_DMA_Abort+0x218>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d045      	beq.n	80037ee <HAL_DMA_Abort+0xd6>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a73      	ldr	r2, [pc, #460]	@ (8003934 <HAL_DMA_Abort+0x21c>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d040      	beq.n	80037ee <HAL_DMA_Abort+0xd6>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a71      	ldr	r2, [pc, #452]	@ (8003938 <HAL_DMA_Abort+0x220>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d03b      	beq.n	80037ee <HAL_DMA_Abort+0xd6>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a70      	ldr	r2, [pc, #448]	@ (800393c <HAL_DMA_Abort+0x224>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d036      	beq.n	80037ee <HAL_DMA_Abort+0xd6>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a6e      	ldr	r2, [pc, #440]	@ (8003940 <HAL_DMA_Abort+0x228>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d031      	beq.n	80037ee <HAL_DMA_Abort+0xd6>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a6d      	ldr	r2, [pc, #436]	@ (8003944 <HAL_DMA_Abort+0x22c>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d02c      	beq.n	80037ee <HAL_DMA_Abort+0xd6>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a6b      	ldr	r2, [pc, #428]	@ (8003948 <HAL_DMA_Abort+0x230>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d027      	beq.n	80037ee <HAL_DMA_Abort+0xd6>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a6a      	ldr	r2, [pc, #424]	@ (800394c <HAL_DMA_Abort+0x234>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d022      	beq.n	80037ee <HAL_DMA_Abort+0xd6>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a68      	ldr	r2, [pc, #416]	@ (8003950 <HAL_DMA_Abort+0x238>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d01d      	beq.n	80037ee <HAL_DMA_Abort+0xd6>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a67      	ldr	r2, [pc, #412]	@ (8003954 <HAL_DMA_Abort+0x23c>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d018      	beq.n	80037ee <HAL_DMA_Abort+0xd6>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a65      	ldr	r2, [pc, #404]	@ (8003958 <HAL_DMA_Abort+0x240>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d013      	beq.n	80037ee <HAL_DMA_Abort+0xd6>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a64      	ldr	r2, [pc, #400]	@ (800395c <HAL_DMA_Abort+0x244>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d00e      	beq.n	80037ee <HAL_DMA_Abort+0xd6>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a62      	ldr	r2, [pc, #392]	@ (8003960 <HAL_DMA_Abort+0x248>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d009      	beq.n	80037ee <HAL_DMA_Abort+0xd6>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a61      	ldr	r2, [pc, #388]	@ (8003964 <HAL_DMA_Abort+0x24c>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d004      	beq.n	80037ee <HAL_DMA_Abort+0xd6>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a5f      	ldr	r2, [pc, #380]	@ (8003968 <HAL_DMA_Abort+0x250>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d101      	bne.n	80037f2 <HAL_DMA_Abort+0xda>
 80037ee:	2301      	movs	r3, #1
 80037f0:	e000      	b.n	80037f4 <HAL_DMA_Abort+0xdc>
 80037f2:	2300      	movs	r3, #0
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d013      	beq.n	8003820 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f022 021e 	bic.w	r2, r2, #30
 8003806:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	695a      	ldr	r2, [r3, #20]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003816:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	617b      	str	r3, [r7, #20]
 800381e:	e00a      	b.n	8003836 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f022 020e 	bic.w	r2, r2, #14
 800382e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a3c      	ldr	r2, [pc, #240]	@ (800392c <HAL_DMA_Abort+0x214>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d072      	beq.n	8003926 <HAL_DMA_Abort+0x20e>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a3a      	ldr	r2, [pc, #232]	@ (8003930 <HAL_DMA_Abort+0x218>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d06d      	beq.n	8003926 <HAL_DMA_Abort+0x20e>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a39      	ldr	r2, [pc, #228]	@ (8003934 <HAL_DMA_Abort+0x21c>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d068      	beq.n	8003926 <HAL_DMA_Abort+0x20e>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a37      	ldr	r2, [pc, #220]	@ (8003938 <HAL_DMA_Abort+0x220>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d063      	beq.n	8003926 <HAL_DMA_Abort+0x20e>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a36      	ldr	r2, [pc, #216]	@ (800393c <HAL_DMA_Abort+0x224>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d05e      	beq.n	8003926 <HAL_DMA_Abort+0x20e>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a34      	ldr	r2, [pc, #208]	@ (8003940 <HAL_DMA_Abort+0x228>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d059      	beq.n	8003926 <HAL_DMA_Abort+0x20e>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a33      	ldr	r2, [pc, #204]	@ (8003944 <HAL_DMA_Abort+0x22c>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d054      	beq.n	8003926 <HAL_DMA_Abort+0x20e>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a31      	ldr	r2, [pc, #196]	@ (8003948 <HAL_DMA_Abort+0x230>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d04f      	beq.n	8003926 <HAL_DMA_Abort+0x20e>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a30      	ldr	r2, [pc, #192]	@ (800394c <HAL_DMA_Abort+0x234>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d04a      	beq.n	8003926 <HAL_DMA_Abort+0x20e>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a2e      	ldr	r2, [pc, #184]	@ (8003950 <HAL_DMA_Abort+0x238>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d045      	beq.n	8003926 <HAL_DMA_Abort+0x20e>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a2d      	ldr	r2, [pc, #180]	@ (8003954 <HAL_DMA_Abort+0x23c>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d040      	beq.n	8003926 <HAL_DMA_Abort+0x20e>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a2b      	ldr	r2, [pc, #172]	@ (8003958 <HAL_DMA_Abort+0x240>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d03b      	beq.n	8003926 <HAL_DMA_Abort+0x20e>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a2a      	ldr	r2, [pc, #168]	@ (800395c <HAL_DMA_Abort+0x244>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d036      	beq.n	8003926 <HAL_DMA_Abort+0x20e>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a28      	ldr	r2, [pc, #160]	@ (8003960 <HAL_DMA_Abort+0x248>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d031      	beq.n	8003926 <HAL_DMA_Abort+0x20e>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a27      	ldr	r2, [pc, #156]	@ (8003964 <HAL_DMA_Abort+0x24c>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d02c      	beq.n	8003926 <HAL_DMA_Abort+0x20e>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a25      	ldr	r2, [pc, #148]	@ (8003968 <HAL_DMA_Abort+0x250>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d027      	beq.n	8003926 <HAL_DMA_Abort+0x20e>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a24      	ldr	r2, [pc, #144]	@ (800396c <HAL_DMA_Abort+0x254>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d022      	beq.n	8003926 <HAL_DMA_Abort+0x20e>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a22      	ldr	r2, [pc, #136]	@ (8003970 <HAL_DMA_Abort+0x258>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d01d      	beq.n	8003926 <HAL_DMA_Abort+0x20e>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a21      	ldr	r2, [pc, #132]	@ (8003974 <HAL_DMA_Abort+0x25c>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d018      	beq.n	8003926 <HAL_DMA_Abort+0x20e>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a1f      	ldr	r2, [pc, #124]	@ (8003978 <HAL_DMA_Abort+0x260>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d013      	beq.n	8003926 <HAL_DMA_Abort+0x20e>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a1e      	ldr	r2, [pc, #120]	@ (800397c <HAL_DMA_Abort+0x264>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d00e      	beq.n	8003926 <HAL_DMA_Abort+0x20e>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a1c      	ldr	r2, [pc, #112]	@ (8003980 <HAL_DMA_Abort+0x268>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d009      	beq.n	8003926 <HAL_DMA_Abort+0x20e>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a1b      	ldr	r2, [pc, #108]	@ (8003984 <HAL_DMA_Abort+0x26c>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d004      	beq.n	8003926 <HAL_DMA_Abort+0x20e>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a19      	ldr	r2, [pc, #100]	@ (8003988 <HAL_DMA_Abort+0x270>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d132      	bne.n	800398c <HAL_DMA_Abort+0x274>
 8003926:	2301      	movs	r3, #1
 8003928:	e031      	b.n	800398e <HAL_DMA_Abort+0x276>
 800392a:	bf00      	nop
 800392c:	40020010 	.word	0x40020010
 8003930:	40020028 	.word	0x40020028
 8003934:	40020040 	.word	0x40020040
 8003938:	40020058 	.word	0x40020058
 800393c:	40020070 	.word	0x40020070
 8003940:	40020088 	.word	0x40020088
 8003944:	400200a0 	.word	0x400200a0
 8003948:	400200b8 	.word	0x400200b8
 800394c:	40020410 	.word	0x40020410
 8003950:	40020428 	.word	0x40020428
 8003954:	40020440 	.word	0x40020440
 8003958:	40020458 	.word	0x40020458
 800395c:	40020470 	.word	0x40020470
 8003960:	40020488 	.word	0x40020488
 8003964:	400204a0 	.word	0x400204a0
 8003968:	400204b8 	.word	0x400204b8
 800396c:	58025408 	.word	0x58025408
 8003970:	5802541c 	.word	0x5802541c
 8003974:	58025430 	.word	0x58025430
 8003978:	58025444 	.word	0x58025444
 800397c:	58025458 	.word	0x58025458
 8003980:	5802546c 	.word	0x5802546c
 8003984:	58025480 	.word	0x58025480
 8003988:	58025494 	.word	0x58025494
 800398c:	2300      	movs	r3, #0
 800398e:	2b00      	cmp	r3, #0
 8003990:	d007      	beq.n	80039a2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800399c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80039a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a6d      	ldr	r2, [pc, #436]	@ (8003b5c <HAL_DMA_Abort+0x444>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d04a      	beq.n	8003a42 <HAL_DMA_Abort+0x32a>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a6b      	ldr	r2, [pc, #428]	@ (8003b60 <HAL_DMA_Abort+0x448>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d045      	beq.n	8003a42 <HAL_DMA_Abort+0x32a>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a6a      	ldr	r2, [pc, #424]	@ (8003b64 <HAL_DMA_Abort+0x44c>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d040      	beq.n	8003a42 <HAL_DMA_Abort+0x32a>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a68      	ldr	r2, [pc, #416]	@ (8003b68 <HAL_DMA_Abort+0x450>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d03b      	beq.n	8003a42 <HAL_DMA_Abort+0x32a>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a67      	ldr	r2, [pc, #412]	@ (8003b6c <HAL_DMA_Abort+0x454>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d036      	beq.n	8003a42 <HAL_DMA_Abort+0x32a>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a65      	ldr	r2, [pc, #404]	@ (8003b70 <HAL_DMA_Abort+0x458>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d031      	beq.n	8003a42 <HAL_DMA_Abort+0x32a>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a64      	ldr	r2, [pc, #400]	@ (8003b74 <HAL_DMA_Abort+0x45c>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d02c      	beq.n	8003a42 <HAL_DMA_Abort+0x32a>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a62      	ldr	r2, [pc, #392]	@ (8003b78 <HAL_DMA_Abort+0x460>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d027      	beq.n	8003a42 <HAL_DMA_Abort+0x32a>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a61      	ldr	r2, [pc, #388]	@ (8003b7c <HAL_DMA_Abort+0x464>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d022      	beq.n	8003a42 <HAL_DMA_Abort+0x32a>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a5f      	ldr	r2, [pc, #380]	@ (8003b80 <HAL_DMA_Abort+0x468>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d01d      	beq.n	8003a42 <HAL_DMA_Abort+0x32a>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a5e      	ldr	r2, [pc, #376]	@ (8003b84 <HAL_DMA_Abort+0x46c>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d018      	beq.n	8003a42 <HAL_DMA_Abort+0x32a>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a5c      	ldr	r2, [pc, #368]	@ (8003b88 <HAL_DMA_Abort+0x470>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d013      	beq.n	8003a42 <HAL_DMA_Abort+0x32a>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a5b      	ldr	r2, [pc, #364]	@ (8003b8c <HAL_DMA_Abort+0x474>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d00e      	beq.n	8003a42 <HAL_DMA_Abort+0x32a>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a59      	ldr	r2, [pc, #356]	@ (8003b90 <HAL_DMA_Abort+0x478>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d009      	beq.n	8003a42 <HAL_DMA_Abort+0x32a>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a58      	ldr	r2, [pc, #352]	@ (8003b94 <HAL_DMA_Abort+0x47c>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d004      	beq.n	8003a42 <HAL_DMA_Abort+0x32a>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a56      	ldr	r2, [pc, #344]	@ (8003b98 <HAL_DMA_Abort+0x480>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d108      	bne.n	8003a54 <HAL_DMA_Abort+0x33c>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f022 0201 	bic.w	r2, r2, #1
 8003a50:	601a      	str	r2, [r3, #0]
 8003a52:	e007      	b.n	8003a64 <HAL_DMA_Abort+0x34c>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f022 0201 	bic.w	r2, r2, #1
 8003a62:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003a64:	e013      	b.n	8003a8e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a66:	f7fe f8c1 	bl	8001bec <HAL_GetTick>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	1ad3      	subs	r3, r2, r3
 8003a70:	2b05      	cmp	r3, #5
 8003a72:	d90c      	bls.n	8003a8e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2220      	movs	r2, #32
 8003a78:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2203      	movs	r2, #3
 8003a7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e12d      	b.n	8003cea <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0301 	and.w	r3, r3, #1
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d1e5      	bne.n	8003a66 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a2f      	ldr	r2, [pc, #188]	@ (8003b5c <HAL_DMA_Abort+0x444>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d04a      	beq.n	8003b3a <HAL_DMA_Abort+0x422>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a2d      	ldr	r2, [pc, #180]	@ (8003b60 <HAL_DMA_Abort+0x448>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d045      	beq.n	8003b3a <HAL_DMA_Abort+0x422>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a2c      	ldr	r2, [pc, #176]	@ (8003b64 <HAL_DMA_Abort+0x44c>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d040      	beq.n	8003b3a <HAL_DMA_Abort+0x422>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a2a      	ldr	r2, [pc, #168]	@ (8003b68 <HAL_DMA_Abort+0x450>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d03b      	beq.n	8003b3a <HAL_DMA_Abort+0x422>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a29      	ldr	r2, [pc, #164]	@ (8003b6c <HAL_DMA_Abort+0x454>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d036      	beq.n	8003b3a <HAL_DMA_Abort+0x422>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a27      	ldr	r2, [pc, #156]	@ (8003b70 <HAL_DMA_Abort+0x458>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d031      	beq.n	8003b3a <HAL_DMA_Abort+0x422>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a26      	ldr	r2, [pc, #152]	@ (8003b74 <HAL_DMA_Abort+0x45c>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d02c      	beq.n	8003b3a <HAL_DMA_Abort+0x422>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a24      	ldr	r2, [pc, #144]	@ (8003b78 <HAL_DMA_Abort+0x460>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d027      	beq.n	8003b3a <HAL_DMA_Abort+0x422>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a23      	ldr	r2, [pc, #140]	@ (8003b7c <HAL_DMA_Abort+0x464>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d022      	beq.n	8003b3a <HAL_DMA_Abort+0x422>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a21      	ldr	r2, [pc, #132]	@ (8003b80 <HAL_DMA_Abort+0x468>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d01d      	beq.n	8003b3a <HAL_DMA_Abort+0x422>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a20      	ldr	r2, [pc, #128]	@ (8003b84 <HAL_DMA_Abort+0x46c>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d018      	beq.n	8003b3a <HAL_DMA_Abort+0x422>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a1e      	ldr	r2, [pc, #120]	@ (8003b88 <HAL_DMA_Abort+0x470>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d013      	beq.n	8003b3a <HAL_DMA_Abort+0x422>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a1d      	ldr	r2, [pc, #116]	@ (8003b8c <HAL_DMA_Abort+0x474>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d00e      	beq.n	8003b3a <HAL_DMA_Abort+0x422>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a1b      	ldr	r2, [pc, #108]	@ (8003b90 <HAL_DMA_Abort+0x478>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d009      	beq.n	8003b3a <HAL_DMA_Abort+0x422>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a1a      	ldr	r2, [pc, #104]	@ (8003b94 <HAL_DMA_Abort+0x47c>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d004      	beq.n	8003b3a <HAL_DMA_Abort+0x422>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a18      	ldr	r2, [pc, #96]	@ (8003b98 <HAL_DMA_Abort+0x480>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d101      	bne.n	8003b3e <HAL_DMA_Abort+0x426>
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e000      	b.n	8003b40 <HAL_DMA_Abort+0x428>
 8003b3e:	2300      	movs	r3, #0
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d02b      	beq.n	8003b9c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b48:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b4e:	f003 031f 	and.w	r3, r3, #31
 8003b52:	223f      	movs	r2, #63	@ 0x3f
 8003b54:	409a      	lsls	r2, r3
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	609a      	str	r2, [r3, #8]
 8003b5a:	e02a      	b.n	8003bb2 <HAL_DMA_Abort+0x49a>
 8003b5c:	40020010 	.word	0x40020010
 8003b60:	40020028 	.word	0x40020028
 8003b64:	40020040 	.word	0x40020040
 8003b68:	40020058 	.word	0x40020058
 8003b6c:	40020070 	.word	0x40020070
 8003b70:	40020088 	.word	0x40020088
 8003b74:	400200a0 	.word	0x400200a0
 8003b78:	400200b8 	.word	0x400200b8
 8003b7c:	40020410 	.word	0x40020410
 8003b80:	40020428 	.word	0x40020428
 8003b84:	40020440 	.word	0x40020440
 8003b88:	40020458 	.word	0x40020458
 8003b8c:	40020470 	.word	0x40020470
 8003b90:	40020488 	.word	0x40020488
 8003b94:	400204a0 	.word	0x400204a0
 8003b98:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ba0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ba6:	f003 031f 	and.w	r3, r3, #31
 8003baa:	2201      	movs	r2, #1
 8003bac:	409a      	lsls	r2, r3
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a4f      	ldr	r2, [pc, #316]	@ (8003cf4 <HAL_DMA_Abort+0x5dc>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d072      	beq.n	8003ca2 <HAL_DMA_Abort+0x58a>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a4d      	ldr	r2, [pc, #308]	@ (8003cf8 <HAL_DMA_Abort+0x5e0>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d06d      	beq.n	8003ca2 <HAL_DMA_Abort+0x58a>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a4c      	ldr	r2, [pc, #304]	@ (8003cfc <HAL_DMA_Abort+0x5e4>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d068      	beq.n	8003ca2 <HAL_DMA_Abort+0x58a>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a4a      	ldr	r2, [pc, #296]	@ (8003d00 <HAL_DMA_Abort+0x5e8>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d063      	beq.n	8003ca2 <HAL_DMA_Abort+0x58a>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a49      	ldr	r2, [pc, #292]	@ (8003d04 <HAL_DMA_Abort+0x5ec>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d05e      	beq.n	8003ca2 <HAL_DMA_Abort+0x58a>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a47      	ldr	r2, [pc, #284]	@ (8003d08 <HAL_DMA_Abort+0x5f0>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d059      	beq.n	8003ca2 <HAL_DMA_Abort+0x58a>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a46      	ldr	r2, [pc, #280]	@ (8003d0c <HAL_DMA_Abort+0x5f4>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d054      	beq.n	8003ca2 <HAL_DMA_Abort+0x58a>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a44      	ldr	r2, [pc, #272]	@ (8003d10 <HAL_DMA_Abort+0x5f8>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d04f      	beq.n	8003ca2 <HAL_DMA_Abort+0x58a>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a43      	ldr	r2, [pc, #268]	@ (8003d14 <HAL_DMA_Abort+0x5fc>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d04a      	beq.n	8003ca2 <HAL_DMA_Abort+0x58a>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a41      	ldr	r2, [pc, #260]	@ (8003d18 <HAL_DMA_Abort+0x600>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d045      	beq.n	8003ca2 <HAL_DMA_Abort+0x58a>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a40      	ldr	r2, [pc, #256]	@ (8003d1c <HAL_DMA_Abort+0x604>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d040      	beq.n	8003ca2 <HAL_DMA_Abort+0x58a>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a3e      	ldr	r2, [pc, #248]	@ (8003d20 <HAL_DMA_Abort+0x608>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d03b      	beq.n	8003ca2 <HAL_DMA_Abort+0x58a>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a3d      	ldr	r2, [pc, #244]	@ (8003d24 <HAL_DMA_Abort+0x60c>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d036      	beq.n	8003ca2 <HAL_DMA_Abort+0x58a>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a3b      	ldr	r2, [pc, #236]	@ (8003d28 <HAL_DMA_Abort+0x610>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d031      	beq.n	8003ca2 <HAL_DMA_Abort+0x58a>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a3a      	ldr	r2, [pc, #232]	@ (8003d2c <HAL_DMA_Abort+0x614>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d02c      	beq.n	8003ca2 <HAL_DMA_Abort+0x58a>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a38      	ldr	r2, [pc, #224]	@ (8003d30 <HAL_DMA_Abort+0x618>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d027      	beq.n	8003ca2 <HAL_DMA_Abort+0x58a>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a37      	ldr	r2, [pc, #220]	@ (8003d34 <HAL_DMA_Abort+0x61c>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d022      	beq.n	8003ca2 <HAL_DMA_Abort+0x58a>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a35      	ldr	r2, [pc, #212]	@ (8003d38 <HAL_DMA_Abort+0x620>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d01d      	beq.n	8003ca2 <HAL_DMA_Abort+0x58a>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a34      	ldr	r2, [pc, #208]	@ (8003d3c <HAL_DMA_Abort+0x624>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d018      	beq.n	8003ca2 <HAL_DMA_Abort+0x58a>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a32      	ldr	r2, [pc, #200]	@ (8003d40 <HAL_DMA_Abort+0x628>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d013      	beq.n	8003ca2 <HAL_DMA_Abort+0x58a>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a31      	ldr	r2, [pc, #196]	@ (8003d44 <HAL_DMA_Abort+0x62c>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d00e      	beq.n	8003ca2 <HAL_DMA_Abort+0x58a>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a2f      	ldr	r2, [pc, #188]	@ (8003d48 <HAL_DMA_Abort+0x630>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d009      	beq.n	8003ca2 <HAL_DMA_Abort+0x58a>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a2e      	ldr	r2, [pc, #184]	@ (8003d4c <HAL_DMA_Abort+0x634>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d004      	beq.n	8003ca2 <HAL_DMA_Abort+0x58a>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a2c      	ldr	r2, [pc, #176]	@ (8003d50 <HAL_DMA_Abort+0x638>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d101      	bne.n	8003ca6 <HAL_DMA_Abort+0x58e>
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e000      	b.n	8003ca8 <HAL_DMA_Abort+0x590>
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d015      	beq.n	8003cd8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003cb4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d00c      	beq.n	8003cd8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003cc8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003ccc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003cd6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8003ce8:	2300      	movs	r3, #0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3718      	adds	r7, #24
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	40020010 	.word	0x40020010
 8003cf8:	40020028 	.word	0x40020028
 8003cfc:	40020040 	.word	0x40020040
 8003d00:	40020058 	.word	0x40020058
 8003d04:	40020070 	.word	0x40020070
 8003d08:	40020088 	.word	0x40020088
 8003d0c:	400200a0 	.word	0x400200a0
 8003d10:	400200b8 	.word	0x400200b8
 8003d14:	40020410 	.word	0x40020410
 8003d18:	40020428 	.word	0x40020428
 8003d1c:	40020440 	.word	0x40020440
 8003d20:	40020458 	.word	0x40020458
 8003d24:	40020470 	.word	0x40020470
 8003d28:	40020488 	.word	0x40020488
 8003d2c:	400204a0 	.word	0x400204a0
 8003d30:	400204b8 	.word	0x400204b8
 8003d34:	58025408 	.word	0x58025408
 8003d38:	5802541c 	.word	0x5802541c
 8003d3c:	58025430 	.word	0x58025430
 8003d40:	58025444 	.word	0x58025444
 8003d44:	58025458 	.word	0x58025458
 8003d48:	5802546c 	.word	0x5802546c
 8003d4c:	58025480 	.word	0x58025480
 8003d50:	58025494 	.word	0x58025494

08003d54 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d101      	bne.n	8003d66 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e237      	b.n	80041d6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	2b02      	cmp	r3, #2
 8003d70:	d004      	beq.n	8003d7c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2280      	movs	r2, #128	@ 0x80
 8003d76:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e22c      	b.n	80041d6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a5c      	ldr	r2, [pc, #368]	@ (8003ef4 <HAL_DMA_Abort_IT+0x1a0>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d04a      	beq.n	8003e1c <HAL_DMA_Abort_IT+0xc8>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a5b      	ldr	r2, [pc, #364]	@ (8003ef8 <HAL_DMA_Abort_IT+0x1a4>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d045      	beq.n	8003e1c <HAL_DMA_Abort_IT+0xc8>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a59      	ldr	r2, [pc, #356]	@ (8003efc <HAL_DMA_Abort_IT+0x1a8>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d040      	beq.n	8003e1c <HAL_DMA_Abort_IT+0xc8>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a58      	ldr	r2, [pc, #352]	@ (8003f00 <HAL_DMA_Abort_IT+0x1ac>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d03b      	beq.n	8003e1c <HAL_DMA_Abort_IT+0xc8>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a56      	ldr	r2, [pc, #344]	@ (8003f04 <HAL_DMA_Abort_IT+0x1b0>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d036      	beq.n	8003e1c <HAL_DMA_Abort_IT+0xc8>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a55      	ldr	r2, [pc, #340]	@ (8003f08 <HAL_DMA_Abort_IT+0x1b4>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d031      	beq.n	8003e1c <HAL_DMA_Abort_IT+0xc8>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a53      	ldr	r2, [pc, #332]	@ (8003f0c <HAL_DMA_Abort_IT+0x1b8>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d02c      	beq.n	8003e1c <HAL_DMA_Abort_IT+0xc8>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a52      	ldr	r2, [pc, #328]	@ (8003f10 <HAL_DMA_Abort_IT+0x1bc>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d027      	beq.n	8003e1c <HAL_DMA_Abort_IT+0xc8>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a50      	ldr	r2, [pc, #320]	@ (8003f14 <HAL_DMA_Abort_IT+0x1c0>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d022      	beq.n	8003e1c <HAL_DMA_Abort_IT+0xc8>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a4f      	ldr	r2, [pc, #316]	@ (8003f18 <HAL_DMA_Abort_IT+0x1c4>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d01d      	beq.n	8003e1c <HAL_DMA_Abort_IT+0xc8>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a4d      	ldr	r2, [pc, #308]	@ (8003f1c <HAL_DMA_Abort_IT+0x1c8>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d018      	beq.n	8003e1c <HAL_DMA_Abort_IT+0xc8>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a4c      	ldr	r2, [pc, #304]	@ (8003f20 <HAL_DMA_Abort_IT+0x1cc>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d013      	beq.n	8003e1c <HAL_DMA_Abort_IT+0xc8>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a4a      	ldr	r2, [pc, #296]	@ (8003f24 <HAL_DMA_Abort_IT+0x1d0>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d00e      	beq.n	8003e1c <HAL_DMA_Abort_IT+0xc8>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a49      	ldr	r2, [pc, #292]	@ (8003f28 <HAL_DMA_Abort_IT+0x1d4>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d009      	beq.n	8003e1c <HAL_DMA_Abort_IT+0xc8>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a47      	ldr	r2, [pc, #284]	@ (8003f2c <HAL_DMA_Abort_IT+0x1d8>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d004      	beq.n	8003e1c <HAL_DMA_Abort_IT+0xc8>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a46      	ldr	r2, [pc, #280]	@ (8003f30 <HAL_DMA_Abort_IT+0x1dc>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d101      	bne.n	8003e20 <HAL_DMA_Abort_IT+0xcc>
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e000      	b.n	8003e22 <HAL_DMA_Abort_IT+0xce>
 8003e20:	2300      	movs	r3, #0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	f000 8086 	beq.w	8003f34 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2204      	movs	r2, #4
 8003e2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a2f      	ldr	r2, [pc, #188]	@ (8003ef4 <HAL_DMA_Abort_IT+0x1a0>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d04a      	beq.n	8003ed0 <HAL_DMA_Abort_IT+0x17c>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a2e      	ldr	r2, [pc, #184]	@ (8003ef8 <HAL_DMA_Abort_IT+0x1a4>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d045      	beq.n	8003ed0 <HAL_DMA_Abort_IT+0x17c>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a2c      	ldr	r2, [pc, #176]	@ (8003efc <HAL_DMA_Abort_IT+0x1a8>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d040      	beq.n	8003ed0 <HAL_DMA_Abort_IT+0x17c>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a2b      	ldr	r2, [pc, #172]	@ (8003f00 <HAL_DMA_Abort_IT+0x1ac>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d03b      	beq.n	8003ed0 <HAL_DMA_Abort_IT+0x17c>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a29      	ldr	r2, [pc, #164]	@ (8003f04 <HAL_DMA_Abort_IT+0x1b0>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d036      	beq.n	8003ed0 <HAL_DMA_Abort_IT+0x17c>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a28      	ldr	r2, [pc, #160]	@ (8003f08 <HAL_DMA_Abort_IT+0x1b4>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d031      	beq.n	8003ed0 <HAL_DMA_Abort_IT+0x17c>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a26      	ldr	r2, [pc, #152]	@ (8003f0c <HAL_DMA_Abort_IT+0x1b8>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d02c      	beq.n	8003ed0 <HAL_DMA_Abort_IT+0x17c>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a25      	ldr	r2, [pc, #148]	@ (8003f10 <HAL_DMA_Abort_IT+0x1bc>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d027      	beq.n	8003ed0 <HAL_DMA_Abort_IT+0x17c>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a23      	ldr	r2, [pc, #140]	@ (8003f14 <HAL_DMA_Abort_IT+0x1c0>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d022      	beq.n	8003ed0 <HAL_DMA_Abort_IT+0x17c>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a22      	ldr	r2, [pc, #136]	@ (8003f18 <HAL_DMA_Abort_IT+0x1c4>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d01d      	beq.n	8003ed0 <HAL_DMA_Abort_IT+0x17c>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a20      	ldr	r2, [pc, #128]	@ (8003f1c <HAL_DMA_Abort_IT+0x1c8>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d018      	beq.n	8003ed0 <HAL_DMA_Abort_IT+0x17c>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a1f      	ldr	r2, [pc, #124]	@ (8003f20 <HAL_DMA_Abort_IT+0x1cc>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d013      	beq.n	8003ed0 <HAL_DMA_Abort_IT+0x17c>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a1d      	ldr	r2, [pc, #116]	@ (8003f24 <HAL_DMA_Abort_IT+0x1d0>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d00e      	beq.n	8003ed0 <HAL_DMA_Abort_IT+0x17c>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a1c      	ldr	r2, [pc, #112]	@ (8003f28 <HAL_DMA_Abort_IT+0x1d4>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d009      	beq.n	8003ed0 <HAL_DMA_Abort_IT+0x17c>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a1a      	ldr	r2, [pc, #104]	@ (8003f2c <HAL_DMA_Abort_IT+0x1d8>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d004      	beq.n	8003ed0 <HAL_DMA_Abort_IT+0x17c>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a19      	ldr	r2, [pc, #100]	@ (8003f30 <HAL_DMA_Abort_IT+0x1dc>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d108      	bne.n	8003ee2 <HAL_DMA_Abort_IT+0x18e>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f022 0201 	bic.w	r2, r2, #1
 8003ede:	601a      	str	r2, [r3, #0]
 8003ee0:	e178      	b.n	80041d4 <HAL_DMA_Abort_IT+0x480>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f022 0201 	bic.w	r2, r2, #1
 8003ef0:	601a      	str	r2, [r3, #0]
 8003ef2:	e16f      	b.n	80041d4 <HAL_DMA_Abort_IT+0x480>
 8003ef4:	40020010 	.word	0x40020010
 8003ef8:	40020028 	.word	0x40020028
 8003efc:	40020040 	.word	0x40020040
 8003f00:	40020058 	.word	0x40020058
 8003f04:	40020070 	.word	0x40020070
 8003f08:	40020088 	.word	0x40020088
 8003f0c:	400200a0 	.word	0x400200a0
 8003f10:	400200b8 	.word	0x400200b8
 8003f14:	40020410 	.word	0x40020410
 8003f18:	40020428 	.word	0x40020428
 8003f1c:	40020440 	.word	0x40020440
 8003f20:	40020458 	.word	0x40020458
 8003f24:	40020470 	.word	0x40020470
 8003f28:	40020488 	.word	0x40020488
 8003f2c:	400204a0 	.word	0x400204a0
 8003f30:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f022 020e 	bic.w	r2, r2, #14
 8003f42:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a6c      	ldr	r2, [pc, #432]	@ (80040fc <HAL_DMA_Abort_IT+0x3a8>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d04a      	beq.n	8003fe4 <HAL_DMA_Abort_IT+0x290>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a6b      	ldr	r2, [pc, #428]	@ (8004100 <HAL_DMA_Abort_IT+0x3ac>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d045      	beq.n	8003fe4 <HAL_DMA_Abort_IT+0x290>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a69      	ldr	r2, [pc, #420]	@ (8004104 <HAL_DMA_Abort_IT+0x3b0>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d040      	beq.n	8003fe4 <HAL_DMA_Abort_IT+0x290>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a68      	ldr	r2, [pc, #416]	@ (8004108 <HAL_DMA_Abort_IT+0x3b4>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d03b      	beq.n	8003fe4 <HAL_DMA_Abort_IT+0x290>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a66      	ldr	r2, [pc, #408]	@ (800410c <HAL_DMA_Abort_IT+0x3b8>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d036      	beq.n	8003fe4 <HAL_DMA_Abort_IT+0x290>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a65      	ldr	r2, [pc, #404]	@ (8004110 <HAL_DMA_Abort_IT+0x3bc>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d031      	beq.n	8003fe4 <HAL_DMA_Abort_IT+0x290>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a63      	ldr	r2, [pc, #396]	@ (8004114 <HAL_DMA_Abort_IT+0x3c0>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d02c      	beq.n	8003fe4 <HAL_DMA_Abort_IT+0x290>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a62      	ldr	r2, [pc, #392]	@ (8004118 <HAL_DMA_Abort_IT+0x3c4>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d027      	beq.n	8003fe4 <HAL_DMA_Abort_IT+0x290>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a60      	ldr	r2, [pc, #384]	@ (800411c <HAL_DMA_Abort_IT+0x3c8>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d022      	beq.n	8003fe4 <HAL_DMA_Abort_IT+0x290>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a5f      	ldr	r2, [pc, #380]	@ (8004120 <HAL_DMA_Abort_IT+0x3cc>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d01d      	beq.n	8003fe4 <HAL_DMA_Abort_IT+0x290>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a5d      	ldr	r2, [pc, #372]	@ (8004124 <HAL_DMA_Abort_IT+0x3d0>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d018      	beq.n	8003fe4 <HAL_DMA_Abort_IT+0x290>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a5c      	ldr	r2, [pc, #368]	@ (8004128 <HAL_DMA_Abort_IT+0x3d4>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d013      	beq.n	8003fe4 <HAL_DMA_Abort_IT+0x290>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a5a      	ldr	r2, [pc, #360]	@ (800412c <HAL_DMA_Abort_IT+0x3d8>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d00e      	beq.n	8003fe4 <HAL_DMA_Abort_IT+0x290>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a59      	ldr	r2, [pc, #356]	@ (8004130 <HAL_DMA_Abort_IT+0x3dc>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d009      	beq.n	8003fe4 <HAL_DMA_Abort_IT+0x290>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a57      	ldr	r2, [pc, #348]	@ (8004134 <HAL_DMA_Abort_IT+0x3e0>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d004      	beq.n	8003fe4 <HAL_DMA_Abort_IT+0x290>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a56      	ldr	r2, [pc, #344]	@ (8004138 <HAL_DMA_Abort_IT+0x3e4>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d108      	bne.n	8003ff6 <HAL_DMA_Abort_IT+0x2a2>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f022 0201 	bic.w	r2, r2, #1
 8003ff2:	601a      	str	r2, [r3, #0]
 8003ff4:	e007      	b.n	8004006 <HAL_DMA_Abort_IT+0x2b2>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f022 0201 	bic.w	r2, r2, #1
 8004004:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a3c      	ldr	r2, [pc, #240]	@ (80040fc <HAL_DMA_Abort_IT+0x3a8>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d072      	beq.n	80040f6 <HAL_DMA_Abort_IT+0x3a2>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a3a      	ldr	r2, [pc, #232]	@ (8004100 <HAL_DMA_Abort_IT+0x3ac>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d06d      	beq.n	80040f6 <HAL_DMA_Abort_IT+0x3a2>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a39      	ldr	r2, [pc, #228]	@ (8004104 <HAL_DMA_Abort_IT+0x3b0>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d068      	beq.n	80040f6 <HAL_DMA_Abort_IT+0x3a2>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a37      	ldr	r2, [pc, #220]	@ (8004108 <HAL_DMA_Abort_IT+0x3b4>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d063      	beq.n	80040f6 <HAL_DMA_Abort_IT+0x3a2>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a36      	ldr	r2, [pc, #216]	@ (800410c <HAL_DMA_Abort_IT+0x3b8>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d05e      	beq.n	80040f6 <HAL_DMA_Abort_IT+0x3a2>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a34      	ldr	r2, [pc, #208]	@ (8004110 <HAL_DMA_Abort_IT+0x3bc>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d059      	beq.n	80040f6 <HAL_DMA_Abort_IT+0x3a2>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a33      	ldr	r2, [pc, #204]	@ (8004114 <HAL_DMA_Abort_IT+0x3c0>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d054      	beq.n	80040f6 <HAL_DMA_Abort_IT+0x3a2>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a31      	ldr	r2, [pc, #196]	@ (8004118 <HAL_DMA_Abort_IT+0x3c4>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d04f      	beq.n	80040f6 <HAL_DMA_Abort_IT+0x3a2>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a30      	ldr	r2, [pc, #192]	@ (800411c <HAL_DMA_Abort_IT+0x3c8>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d04a      	beq.n	80040f6 <HAL_DMA_Abort_IT+0x3a2>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a2e      	ldr	r2, [pc, #184]	@ (8004120 <HAL_DMA_Abort_IT+0x3cc>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d045      	beq.n	80040f6 <HAL_DMA_Abort_IT+0x3a2>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a2d      	ldr	r2, [pc, #180]	@ (8004124 <HAL_DMA_Abort_IT+0x3d0>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d040      	beq.n	80040f6 <HAL_DMA_Abort_IT+0x3a2>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a2b      	ldr	r2, [pc, #172]	@ (8004128 <HAL_DMA_Abort_IT+0x3d4>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d03b      	beq.n	80040f6 <HAL_DMA_Abort_IT+0x3a2>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a2a      	ldr	r2, [pc, #168]	@ (800412c <HAL_DMA_Abort_IT+0x3d8>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d036      	beq.n	80040f6 <HAL_DMA_Abort_IT+0x3a2>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a28      	ldr	r2, [pc, #160]	@ (8004130 <HAL_DMA_Abort_IT+0x3dc>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d031      	beq.n	80040f6 <HAL_DMA_Abort_IT+0x3a2>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a27      	ldr	r2, [pc, #156]	@ (8004134 <HAL_DMA_Abort_IT+0x3e0>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d02c      	beq.n	80040f6 <HAL_DMA_Abort_IT+0x3a2>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a25      	ldr	r2, [pc, #148]	@ (8004138 <HAL_DMA_Abort_IT+0x3e4>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d027      	beq.n	80040f6 <HAL_DMA_Abort_IT+0x3a2>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a24      	ldr	r2, [pc, #144]	@ (800413c <HAL_DMA_Abort_IT+0x3e8>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d022      	beq.n	80040f6 <HAL_DMA_Abort_IT+0x3a2>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a22      	ldr	r2, [pc, #136]	@ (8004140 <HAL_DMA_Abort_IT+0x3ec>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d01d      	beq.n	80040f6 <HAL_DMA_Abort_IT+0x3a2>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a21      	ldr	r2, [pc, #132]	@ (8004144 <HAL_DMA_Abort_IT+0x3f0>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d018      	beq.n	80040f6 <HAL_DMA_Abort_IT+0x3a2>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a1f      	ldr	r2, [pc, #124]	@ (8004148 <HAL_DMA_Abort_IT+0x3f4>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d013      	beq.n	80040f6 <HAL_DMA_Abort_IT+0x3a2>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a1e      	ldr	r2, [pc, #120]	@ (800414c <HAL_DMA_Abort_IT+0x3f8>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d00e      	beq.n	80040f6 <HAL_DMA_Abort_IT+0x3a2>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a1c      	ldr	r2, [pc, #112]	@ (8004150 <HAL_DMA_Abort_IT+0x3fc>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d009      	beq.n	80040f6 <HAL_DMA_Abort_IT+0x3a2>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a1b      	ldr	r2, [pc, #108]	@ (8004154 <HAL_DMA_Abort_IT+0x400>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d004      	beq.n	80040f6 <HAL_DMA_Abort_IT+0x3a2>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a19      	ldr	r2, [pc, #100]	@ (8004158 <HAL_DMA_Abort_IT+0x404>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d132      	bne.n	800415c <HAL_DMA_Abort_IT+0x408>
 80040f6:	2301      	movs	r3, #1
 80040f8:	e031      	b.n	800415e <HAL_DMA_Abort_IT+0x40a>
 80040fa:	bf00      	nop
 80040fc:	40020010 	.word	0x40020010
 8004100:	40020028 	.word	0x40020028
 8004104:	40020040 	.word	0x40020040
 8004108:	40020058 	.word	0x40020058
 800410c:	40020070 	.word	0x40020070
 8004110:	40020088 	.word	0x40020088
 8004114:	400200a0 	.word	0x400200a0
 8004118:	400200b8 	.word	0x400200b8
 800411c:	40020410 	.word	0x40020410
 8004120:	40020428 	.word	0x40020428
 8004124:	40020440 	.word	0x40020440
 8004128:	40020458 	.word	0x40020458
 800412c:	40020470 	.word	0x40020470
 8004130:	40020488 	.word	0x40020488
 8004134:	400204a0 	.word	0x400204a0
 8004138:	400204b8 	.word	0x400204b8
 800413c:	58025408 	.word	0x58025408
 8004140:	5802541c 	.word	0x5802541c
 8004144:	58025430 	.word	0x58025430
 8004148:	58025444 	.word	0x58025444
 800414c:	58025458 	.word	0x58025458
 8004150:	5802546c 	.word	0x5802546c
 8004154:	58025480 	.word	0x58025480
 8004158:	58025494 	.word	0x58025494
 800415c:	2300      	movs	r3, #0
 800415e:	2b00      	cmp	r3, #0
 8004160:	d028      	beq.n	80041b4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800416c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004170:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004176:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800417c:	f003 031f 	and.w	r3, r3, #31
 8004180:	2201      	movs	r2, #1
 8004182:	409a      	lsls	r2, r3
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800418c:	687a      	ldr	r2, [r7, #4]
 800418e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004190:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004196:	2b00      	cmp	r3, #0
 8004198:	d00c      	beq.n	80041b4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041a4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80041a8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80041b2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2200      	movs	r2, #0
 80041c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d003      	beq.n	80041d4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80041d4:	2300      	movs	r3, #0
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3710      	adds	r7, #16
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop

080041e0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b08a      	sub	sp, #40	@ 0x28
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80041e8:	2300      	movs	r3, #0
 80041ea:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80041ec:	4b67      	ldr	r3, [pc, #412]	@ (800438c <HAL_DMA_IRQHandler+0x1ac>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a67      	ldr	r2, [pc, #412]	@ (8004390 <HAL_DMA_IRQHandler+0x1b0>)
 80041f2:	fba2 2303 	umull	r2, r3, r2, r3
 80041f6:	0a9b      	lsrs	r3, r3, #10
 80041f8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041fe:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004204:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004206:	6a3b      	ldr	r3, [r7, #32]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a5f      	ldr	r2, [pc, #380]	@ (8004394 <HAL_DMA_IRQHandler+0x1b4>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d04a      	beq.n	80042b2 <HAL_DMA_IRQHandler+0xd2>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a5d      	ldr	r2, [pc, #372]	@ (8004398 <HAL_DMA_IRQHandler+0x1b8>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d045      	beq.n	80042b2 <HAL_DMA_IRQHandler+0xd2>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a5c      	ldr	r2, [pc, #368]	@ (800439c <HAL_DMA_IRQHandler+0x1bc>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d040      	beq.n	80042b2 <HAL_DMA_IRQHandler+0xd2>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a5a      	ldr	r2, [pc, #360]	@ (80043a0 <HAL_DMA_IRQHandler+0x1c0>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d03b      	beq.n	80042b2 <HAL_DMA_IRQHandler+0xd2>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a59      	ldr	r2, [pc, #356]	@ (80043a4 <HAL_DMA_IRQHandler+0x1c4>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d036      	beq.n	80042b2 <HAL_DMA_IRQHandler+0xd2>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a57      	ldr	r2, [pc, #348]	@ (80043a8 <HAL_DMA_IRQHandler+0x1c8>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d031      	beq.n	80042b2 <HAL_DMA_IRQHandler+0xd2>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a56      	ldr	r2, [pc, #344]	@ (80043ac <HAL_DMA_IRQHandler+0x1cc>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d02c      	beq.n	80042b2 <HAL_DMA_IRQHandler+0xd2>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a54      	ldr	r2, [pc, #336]	@ (80043b0 <HAL_DMA_IRQHandler+0x1d0>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d027      	beq.n	80042b2 <HAL_DMA_IRQHandler+0xd2>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a53      	ldr	r2, [pc, #332]	@ (80043b4 <HAL_DMA_IRQHandler+0x1d4>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d022      	beq.n	80042b2 <HAL_DMA_IRQHandler+0xd2>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a51      	ldr	r2, [pc, #324]	@ (80043b8 <HAL_DMA_IRQHandler+0x1d8>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d01d      	beq.n	80042b2 <HAL_DMA_IRQHandler+0xd2>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a50      	ldr	r2, [pc, #320]	@ (80043bc <HAL_DMA_IRQHandler+0x1dc>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d018      	beq.n	80042b2 <HAL_DMA_IRQHandler+0xd2>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a4e      	ldr	r2, [pc, #312]	@ (80043c0 <HAL_DMA_IRQHandler+0x1e0>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d013      	beq.n	80042b2 <HAL_DMA_IRQHandler+0xd2>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a4d      	ldr	r2, [pc, #308]	@ (80043c4 <HAL_DMA_IRQHandler+0x1e4>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d00e      	beq.n	80042b2 <HAL_DMA_IRQHandler+0xd2>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a4b      	ldr	r2, [pc, #300]	@ (80043c8 <HAL_DMA_IRQHandler+0x1e8>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d009      	beq.n	80042b2 <HAL_DMA_IRQHandler+0xd2>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a4a      	ldr	r2, [pc, #296]	@ (80043cc <HAL_DMA_IRQHandler+0x1ec>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d004      	beq.n	80042b2 <HAL_DMA_IRQHandler+0xd2>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a48      	ldr	r2, [pc, #288]	@ (80043d0 <HAL_DMA_IRQHandler+0x1f0>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d101      	bne.n	80042b6 <HAL_DMA_IRQHandler+0xd6>
 80042b2:	2301      	movs	r3, #1
 80042b4:	e000      	b.n	80042b8 <HAL_DMA_IRQHandler+0xd8>
 80042b6:	2300      	movs	r3, #0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	f000 842b 	beq.w	8004b14 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042c2:	f003 031f 	and.w	r3, r3, #31
 80042c6:	2208      	movs	r2, #8
 80042c8:	409a      	lsls	r2, r3
 80042ca:	69bb      	ldr	r3, [r7, #24]
 80042cc:	4013      	ands	r3, r2
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	f000 80a2 	beq.w	8004418 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a2e      	ldr	r2, [pc, #184]	@ (8004394 <HAL_DMA_IRQHandler+0x1b4>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d04a      	beq.n	8004374 <HAL_DMA_IRQHandler+0x194>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a2d      	ldr	r2, [pc, #180]	@ (8004398 <HAL_DMA_IRQHandler+0x1b8>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d045      	beq.n	8004374 <HAL_DMA_IRQHandler+0x194>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a2b      	ldr	r2, [pc, #172]	@ (800439c <HAL_DMA_IRQHandler+0x1bc>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d040      	beq.n	8004374 <HAL_DMA_IRQHandler+0x194>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a2a      	ldr	r2, [pc, #168]	@ (80043a0 <HAL_DMA_IRQHandler+0x1c0>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d03b      	beq.n	8004374 <HAL_DMA_IRQHandler+0x194>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a28      	ldr	r2, [pc, #160]	@ (80043a4 <HAL_DMA_IRQHandler+0x1c4>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d036      	beq.n	8004374 <HAL_DMA_IRQHandler+0x194>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a27      	ldr	r2, [pc, #156]	@ (80043a8 <HAL_DMA_IRQHandler+0x1c8>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d031      	beq.n	8004374 <HAL_DMA_IRQHandler+0x194>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a25      	ldr	r2, [pc, #148]	@ (80043ac <HAL_DMA_IRQHandler+0x1cc>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d02c      	beq.n	8004374 <HAL_DMA_IRQHandler+0x194>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a24      	ldr	r2, [pc, #144]	@ (80043b0 <HAL_DMA_IRQHandler+0x1d0>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d027      	beq.n	8004374 <HAL_DMA_IRQHandler+0x194>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a22      	ldr	r2, [pc, #136]	@ (80043b4 <HAL_DMA_IRQHandler+0x1d4>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d022      	beq.n	8004374 <HAL_DMA_IRQHandler+0x194>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a21      	ldr	r2, [pc, #132]	@ (80043b8 <HAL_DMA_IRQHandler+0x1d8>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d01d      	beq.n	8004374 <HAL_DMA_IRQHandler+0x194>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a1f      	ldr	r2, [pc, #124]	@ (80043bc <HAL_DMA_IRQHandler+0x1dc>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d018      	beq.n	8004374 <HAL_DMA_IRQHandler+0x194>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a1e      	ldr	r2, [pc, #120]	@ (80043c0 <HAL_DMA_IRQHandler+0x1e0>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d013      	beq.n	8004374 <HAL_DMA_IRQHandler+0x194>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a1c      	ldr	r2, [pc, #112]	@ (80043c4 <HAL_DMA_IRQHandler+0x1e4>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d00e      	beq.n	8004374 <HAL_DMA_IRQHandler+0x194>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a1b      	ldr	r2, [pc, #108]	@ (80043c8 <HAL_DMA_IRQHandler+0x1e8>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d009      	beq.n	8004374 <HAL_DMA_IRQHandler+0x194>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a19      	ldr	r2, [pc, #100]	@ (80043cc <HAL_DMA_IRQHandler+0x1ec>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d004      	beq.n	8004374 <HAL_DMA_IRQHandler+0x194>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a18      	ldr	r2, [pc, #96]	@ (80043d0 <HAL_DMA_IRQHandler+0x1f0>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d12f      	bne.n	80043d4 <HAL_DMA_IRQHandler+0x1f4>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 0304 	and.w	r3, r3, #4
 800437e:	2b00      	cmp	r3, #0
 8004380:	bf14      	ite	ne
 8004382:	2301      	movne	r3, #1
 8004384:	2300      	moveq	r3, #0
 8004386:	b2db      	uxtb	r3, r3
 8004388:	e02e      	b.n	80043e8 <HAL_DMA_IRQHandler+0x208>
 800438a:	bf00      	nop
 800438c:	24000000 	.word	0x24000000
 8004390:	1b4e81b5 	.word	0x1b4e81b5
 8004394:	40020010 	.word	0x40020010
 8004398:	40020028 	.word	0x40020028
 800439c:	40020040 	.word	0x40020040
 80043a0:	40020058 	.word	0x40020058
 80043a4:	40020070 	.word	0x40020070
 80043a8:	40020088 	.word	0x40020088
 80043ac:	400200a0 	.word	0x400200a0
 80043b0:	400200b8 	.word	0x400200b8
 80043b4:	40020410 	.word	0x40020410
 80043b8:	40020428 	.word	0x40020428
 80043bc:	40020440 	.word	0x40020440
 80043c0:	40020458 	.word	0x40020458
 80043c4:	40020470 	.word	0x40020470
 80043c8:	40020488 	.word	0x40020488
 80043cc:	400204a0 	.word	0x400204a0
 80043d0:	400204b8 	.word	0x400204b8
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 0308 	and.w	r3, r3, #8
 80043de:	2b00      	cmp	r3, #0
 80043e0:	bf14      	ite	ne
 80043e2:	2301      	movne	r3, #1
 80043e4:	2300      	moveq	r3, #0
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d015      	beq.n	8004418 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f022 0204 	bic.w	r2, r2, #4
 80043fa:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004400:	f003 031f 	and.w	r3, r3, #31
 8004404:	2208      	movs	r2, #8
 8004406:	409a      	lsls	r2, r3
 8004408:	6a3b      	ldr	r3, [r7, #32]
 800440a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004410:	f043 0201 	orr.w	r2, r3, #1
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800441c:	f003 031f 	and.w	r3, r3, #31
 8004420:	69ba      	ldr	r2, [r7, #24]
 8004422:	fa22 f303 	lsr.w	r3, r2, r3
 8004426:	f003 0301 	and.w	r3, r3, #1
 800442a:	2b00      	cmp	r3, #0
 800442c:	d06e      	beq.n	800450c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a69      	ldr	r2, [pc, #420]	@ (80045d8 <HAL_DMA_IRQHandler+0x3f8>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d04a      	beq.n	80044ce <HAL_DMA_IRQHandler+0x2ee>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a67      	ldr	r2, [pc, #412]	@ (80045dc <HAL_DMA_IRQHandler+0x3fc>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d045      	beq.n	80044ce <HAL_DMA_IRQHandler+0x2ee>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a66      	ldr	r2, [pc, #408]	@ (80045e0 <HAL_DMA_IRQHandler+0x400>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d040      	beq.n	80044ce <HAL_DMA_IRQHandler+0x2ee>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a64      	ldr	r2, [pc, #400]	@ (80045e4 <HAL_DMA_IRQHandler+0x404>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d03b      	beq.n	80044ce <HAL_DMA_IRQHandler+0x2ee>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a63      	ldr	r2, [pc, #396]	@ (80045e8 <HAL_DMA_IRQHandler+0x408>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d036      	beq.n	80044ce <HAL_DMA_IRQHandler+0x2ee>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a61      	ldr	r2, [pc, #388]	@ (80045ec <HAL_DMA_IRQHandler+0x40c>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d031      	beq.n	80044ce <HAL_DMA_IRQHandler+0x2ee>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a60      	ldr	r2, [pc, #384]	@ (80045f0 <HAL_DMA_IRQHandler+0x410>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d02c      	beq.n	80044ce <HAL_DMA_IRQHandler+0x2ee>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a5e      	ldr	r2, [pc, #376]	@ (80045f4 <HAL_DMA_IRQHandler+0x414>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d027      	beq.n	80044ce <HAL_DMA_IRQHandler+0x2ee>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a5d      	ldr	r2, [pc, #372]	@ (80045f8 <HAL_DMA_IRQHandler+0x418>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d022      	beq.n	80044ce <HAL_DMA_IRQHandler+0x2ee>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a5b      	ldr	r2, [pc, #364]	@ (80045fc <HAL_DMA_IRQHandler+0x41c>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d01d      	beq.n	80044ce <HAL_DMA_IRQHandler+0x2ee>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a5a      	ldr	r2, [pc, #360]	@ (8004600 <HAL_DMA_IRQHandler+0x420>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d018      	beq.n	80044ce <HAL_DMA_IRQHandler+0x2ee>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a58      	ldr	r2, [pc, #352]	@ (8004604 <HAL_DMA_IRQHandler+0x424>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d013      	beq.n	80044ce <HAL_DMA_IRQHandler+0x2ee>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a57      	ldr	r2, [pc, #348]	@ (8004608 <HAL_DMA_IRQHandler+0x428>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d00e      	beq.n	80044ce <HAL_DMA_IRQHandler+0x2ee>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a55      	ldr	r2, [pc, #340]	@ (800460c <HAL_DMA_IRQHandler+0x42c>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d009      	beq.n	80044ce <HAL_DMA_IRQHandler+0x2ee>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a54      	ldr	r2, [pc, #336]	@ (8004610 <HAL_DMA_IRQHandler+0x430>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d004      	beq.n	80044ce <HAL_DMA_IRQHandler+0x2ee>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a52      	ldr	r2, [pc, #328]	@ (8004614 <HAL_DMA_IRQHandler+0x434>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d10a      	bne.n	80044e4 <HAL_DMA_IRQHandler+0x304>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	695b      	ldr	r3, [r3, #20]
 80044d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044d8:	2b00      	cmp	r3, #0
 80044da:	bf14      	ite	ne
 80044dc:	2301      	movne	r3, #1
 80044de:	2300      	moveq	r3, #0
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	e003      	b.n	80044ec <HAL_DMA_IRQHandler+0x30c>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	2300      	movs	r3, #0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d00d      	beq.n	800450c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044f4:	f003 031f 	and.w	r3, r3, #31
 80044f8:	2201      	movs	r2, #1
 80044fa:	409a      	lsls	r2, r3
 80044fc:	6a3b      	ldr	r3, [r7, #32]
 80044fe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004504:	f043 0202 	orr.w	r2, r3, #2
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004510:	f003 031f 	and.w	r3, r3, #31
 8004514:	2204      	movs	r2, #4
 8004516:	409a      	lsls	r2, r3
 8004518:	69bb      	ldr	r3, [r7, #24]
 800451a:	4013      	ands	r3, r2
 800451c:	2b00      	cmp	r3, #0
 800451e:	f000 808f 	beq.w	8004640 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a2c      	ldr	r2, [pc, #176]	@ (80045d8 <HAL_DMA_IRQHandler+0x3f8>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d04a      	beq.n	80045c2 <HAL_DMA_IRQHandler+0x3e2>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a2a      	ldr	r2, [pc, #168]	@ (80045dc <HAL_DMA_IRQHandler+0x3fc>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d045      	beq.n	80045c2 <HAL_DMA_IRQHandler+0x3e2>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a29      	ldr	r2, [pc, #164]	@ (80045e0 <HAL_DMA_IRQHandler+0x400>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d040      	beq.n	80045c2 <HAL_DMA_IRQHandler+0x3e2>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a27      	ldr	r2, [pc, #156]	@ (80045e4 <HAL_DMA_IRQHandler+0x404>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d03b      	beq.n	80045c2 <HAL_DMA_IRQHandler+0x3e2>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a26      	ldr	r2, [pc, #152]	@ (80045e8 <HAL_DMA_IRQHandler+0x408>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d036      	beq.n	80045c2 <HAL_DMA_IRQHandler+0x3e2>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a24      	ldr	r2, [pc, #144]	@ (80045ec <HAL_DMA_IRQHandler+0x40c>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d031      	beq.n	80045c2 <HAL_DMA_IRQHandler+0x3e2>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a23      	ldr	r2, [pc, #140]	@ (80045f0 <HAL_DMA_IRQHandler+0x410>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d02c      	beq.n	80045c2 <HAL_DMA_IRQHandler+0x3e2>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a21      	ldr	r2, [pc, #132]	@ (80045f4 <HAL_DMA_IRQHandler+0x414>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d027      	beq.n	80045c2 <HAL_DMA_IRQHandler+0x3e2>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a20      	ldr	r2, [pc, #128]	@ (80045f8 <HAL_DMA_IRQHandler+0x418>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d022      	beq.n	80045c2 <HAL_DMA_IRQHandler+0x3e2>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a1e      	ldr	r2, [pc, #120]	@ (80045fc <HAL_DMA_IRQHandler+0x41c>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d01d      	beq.n	80045c2 <HAL_DMA_IRQHandler+0x3e2>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a1d      	ldr	r2, [pc, #116]	@ (8004600 <HAL_DMA_IRQHandler+0x420>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d018      	beq.n	80045c2 <HAL_DMA_IRQHandler+0x3e2>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a1b      	ldr	r2, [pc, #108]	@ (8004604 <HAL_DMA_IRQHandler+0x424>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d013      	beq.n	80045c2 <HAL_DMA_IRQHandler+0x3e2>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a1a      	ldr	r2, [pc, #104]	@ (8004608 <HAL_DMA_IRQHandler+0x428>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d00e      	beq.n	80045c2 <HAL_DMA_IRQHandler+0x3e2>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a18      	ldr	r2, [pc, #96]	@ (800460c <HAL_DMA_IRQHandler+0x42c>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d009      	beq.n	80045c2 <HAL_DMA_IRQHandler+0x3e2>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a17      	ldr	r2, [pc, #92]	@ (8004610 <HAL_DMA_IRQHandler+0x430>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d004      	beq.n	80045c2 <HAL_DMA_IRQHandler+0x3e2>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a15      	ldr	r2, [pc, #84]	@ (8004614 <HAL_DMA_IRQHandler+0x434>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d12a      	bne.n	8004618 <HAL_DMA_IRQHandler+0x438>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0302 	and.w	r3, r3, #2
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	bf14      	ite	ne
 80045d0:	2301      	movne	r3, #1
 80045d2:	2300      	moveq	r3, #0
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	e023      	b.n	8004620 <HAL_DMA_IRQHandler+0x440>
 80045d8:	40020010 	.word	0x40020010
 80045dc:	40020028 	.word	0x40020028
 80045e0:	40020040 	.word	0x40020040
 80045e4:	40020058 	.word	0x40020058
 80045e8:	40020070 	.word	0x40020070
 80045ec:	40020088 	.word	0x40020088
 80045f0:	400200a0 	.word	0x400200a0
 80045f4:	400200b8 	.word	0x400200b8
 80045f8:	40020410 	.word	0x40020410
 80045fc:	40020428 	.word	0x40020428
 8004600:	40020440 	.word	0x40020440
 8004604:	40020458 	.word	0x40020458
 8004608:	40020470 	.word	0x40020470
 800460c:	40020488 	.word	0x40020488
 8004610:	400204a0 	.word	0x400204a0
 8004614:	400204b8 	.word	0x400204b8
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	2300      	movs	r3, #0
 8004620:	2b00      	cmp	r3, #0
 8004622:	d00d      	beq.n	8004640 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004628:	f003 031f 	and.w	r3, r3, #31
 800462c:	2204      	movs	r2, #4
 800462e:	409a      	lsls	r2, r3
 8004630:	6a3b      	ldr	r3, [r7, #32]
 8004632:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004638:	f043 0204 	orr.w	r2, r3, #4
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004644:	f003 031f 	and.w	r3, r3, #31
 8004648:	2210      	movs	r2, #16
 800464a:	409a      	lsls	r2, r3
 800464c:	69bb      	ldr	r3, [r7, #24]
 800464e:	4013      	ands	r3, r2
 8004650:	2b00      	cmp	r3, #0
 8004652:	f000 80a6 	beq.w	80047a2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a85      	ldr	r2, [pc, #532]	@ (8004870 <HAL_DMA_IRQHandler+0x690>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d04a      	beq.n	80046f6 <HAL_DMA_IRQHandler+0x516>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a83      	ldr	r2, [pc, #524]	@ (8004874 <HAL_DMA_IRQHandler+0x694>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d045      	beq.n	80046f6 <HAL_DMA_IRQHandler+0x516>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a82      	ldr	r2, [pc, #520]	@ (8004878 <HAL_DMA_IRQHandler+0x698>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d040      	beq.n	80046f6 <HAL_DMA_IRQHandler+0x516>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a80      	ldr	r2, [pc, #512]	@ (800487c <HAL_DMA_IRQHandler+0x69c>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d03b      	beq.n	80046f6 <HAL_DMA_IRQHandler+0x516>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a7f      	ldr	r2, [pc, #508]	@ (8004880 <HAL_DMA_IRQHandler+0x6a0>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d036      	beq.n	80046f6 <HAL_DMA_IRQHandler+0x516>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a7d      	ldr	r2, [pc, #500]	@ (8004884 <HAL_DMA_IRQHandler+0x6a4>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d031      	beq.n	80046f6 <HAL_DMA_IRQHandler+0x516>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a7c      	ldr	r2, [pc, #496]	@ (8004888 <HAL_DMA_IRQHandler+0x6a8>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d02c      	beq.n	80046f6 <HAL_DMA_IRQHandler+0x516>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a7a      	ldr	r2, [pc, #488]	@ (800488c <HAL_DMA_IRQHandler+0x6ac>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d027      	beq.n	80046f6 <HAL_DMA_IRQHandler+0x516>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a79      	ldr	r2, [pc, #484]	@ (8004890 <HAL_DMA_IRQHandler+0x6b0>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d022      	beq.n	80046f6 <HAL_DMA_IRQHandler+0x516>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a77      	ldr	r2, [pc, #476]	@ (8004894 <HAL_DMA_IRQHandler+0x6b4>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d01d      	beq.n	80046f6 <HAL_DMA_IRQHandler+0x516>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a76      	ldr	r2, [pc, #472]	@ (8004898 <HAL_DMA_IRQHandler+0x6b8>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d018      	beq.n	80046f6 <HAL_DMA_IRQHandler+0x516>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a74      	ldr	r2, [pc, #464]	@ (800489c <HAL_DMA_IRQHandler+0x6bc>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d013      	beq.n	80046f6 <HAL_DMA_IRQHandler+0x516>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a73      	ldr	r2, [pc, #460]	@ (80048a0 <HAL_DMA_IRQHandler+0x6c0>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d00e      	beq.n	80046f6 <HAL_DMA_IRQHandler+0x516>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a71      	ldr	r2, [pc, #452]	@ (80048a4 <HAL_DMA_IRQHandler+0x6c4>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d009      	beq.n	80046f6 <HAL_DMA_IRQHandler+0x516>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a70      	ldr	r2, [pc, #448]	@ (80048a8 <HAL_DMA_IRQHandler+0x6c8>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d004      	beq.n	80046f6 <HAL_DMA_IRQHandler+0x516>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a6e      	ldr	r2, [pc, #440]	@ (80048ac <HAL_DMA_IRQHandler+0x6cc>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d10a      	bne.n	800470c <HAL_DMA_IRQHandler+0x52c>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 0308 	and.w	r3, r3, #8
 8004700:	2b00      	cmp	r3, #0
 8004702:	bf14      	ite	ne
 8004704:	2301      	movne	r3, #1
 8004706:	2300      	moveq	r3, #0
 8004708:	b2db      	uxtb	r3, r3
 800470a:	e009      	b.n	8004720 <HAL_DMA_IRQHandler+0x540>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f003 0304 	and.w	r3, r3, #4
 8004716:	2b00      	cmp	r3, #0
 8004718:	bf14      	ite	ne
 800471a:	2301      	movne	r3, #1
 800471c:	2300      	moveq	r3, #0
 800471e:	b2db      	uxtb	r3, r3
 8004720:	2b00      	cmp	r3, #0
 8004722:	d03e      	beq.n	80047a2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004728:	f003 031f 	and.w	r3, r3, #31
 800472c:	2210      	movs	r2, #16
 800472e:	409a      	lsls	r2, r3
 8004730:	6a3b      	ldr	r3, [r7, #32]
 8004732:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800473e:	2b00      	cmp	r3, #0
 8004740:	d018      	beq.n	8004774 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800474c:	2b00      	cmp	r3, #0
 800474e:	d108      	bne.n	8004762 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004754:	2b00      	cmp	r3, #0
 8004756:	d024      	beq.n	80047a2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	4798      	blx	r3
 8004760:	e01f      	b.n	80047a2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004766:	2b00      	cmp	r3, #0
 8004768:	d01b      	beq.n	80047a2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	4798      	blx	r3
 8004772:	e016      	b.n	80047a2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800477e:	2b00      	cmp	r3, #0
 8004780:	d107      	bne.n	8004792 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f022 0208 	bic.w	r2, r2, #8
 8004790:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004796:	2b00      	cmp	r3, #0
 8004798:	d003      	beq.n	80047a2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047a6:	f003 031f 	and.w	r3, r3, #31
 80047aa:	2220      	movs	r2, #32
 80047ac:	409a      	lsls	r2, r3
 80047ae:	69bb      	ldr	r3, [r7, #24]
 80047b0:	4013      	ands	r3, r2
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	f000 8110 	beq.w	80049d8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a2c      	ldr	r2, [pc, #176]	@ (8004870 <HAL_DMA_IRQHandler+0x690>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d04a      	beq.n	8004858 <HAL_DMA_IRQHandler+0x678>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a2b      	ldr	r2, [pc, #172]	@ (8004874 <HAL_DMA_IRQHandler+0x694>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d045      	beq.n	8004858 <HAL_DMA_IRQHandler+0x678>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a29      	ldr	r2, [pc, #164]	@ (8004878 <HAL_DMA_IRQHandler+0x698>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d040      	beq.n	8004858 <HAL_DMA_IRQHandler+0x678>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a28      	ldr	r2, [pc, #160]	@ (800487c <HAL_DMA_IRQHandler+0x69c>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d03b      	beq.n	8004858 <HAL_DMA_IRQHandler+0x678>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a26      	ldr	r2, [pc, #152]	@ (8004880 <HAL_DMA_IRQHandler+0x6a0>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d036      	beq.n	8004858 <HAL_DMA_IRQHandler+0x678>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a25      	ldr	r2, [pc, #148]	@ (8004884 <HAL_DMA_IRQHandler+0x6a4>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d031      	beq.n	8004858 <HAL_DMA_IRQHandler+0x678>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a23      	ldr	r2, [pc, #140]	@ (8004888 <HAL_DMA_IRQHandler+0x6a8>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d02c      	beq.n	8004858 <HAL_DMA_IRQHandler+0x678>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a22      	ldr	r2, [pc, #136]	@ (800488c <HAL_DMA_IRQHandler+0x6ac>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d027      	beq.n	8004858 <HAL_DMA_IRQHandler+0x678>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a20      	ldr	r2, [pc, #128]	@ (8004890 <HAL_DMA_IRQHandler+0x6b0>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d022      	beq.n	8004858 <HAL_DMA_IRQHandler+0x678>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a1f      	ldr	r2, [pc, #124]	@ (8004894 <HAL_DMA_IRQHandler+0x6b4>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d01d      	beq.n	8004858 <HAL_DMA_IRQHandler+0x678>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a1d      	ldr	r2, [pc, #116]	@ (8004898 <HAL_DMA_IRQHandler+0x6b8>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d018      	beq.n	8004858 <HAL_DMA_IRQHandler+0x678>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a1c      	ldr	r2, [pc, #112]	@ (800489c <HAL_DMA_IRQHandler+0x6bc>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d013      	beq.n	8004858 <HAL_DMA_IRQHandler+0x678>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a1a      	ldr	r2, [pc, #104]	@ (80048a0 <HAL_DMA_IRQHandler+0x6c0>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d00e      	beq.n	8004858 <HAL_DMA_IRQHandler+0x678>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a19      	ldr	r2, [pc, #100]	@ (80048a4 <HAL_DMA_IRQHandler+0x6c4>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d009      	beq.n	8004858 <HAL_DMA_IRQHandler+0x678>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a17      	ldr	r2, [pc, #92]	@ (80048a8 <HAL_DMA_IRQHandler+0x6c8>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d004      	beq.n	8004858 <HAL_DMA_IRQHandler+0x678>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a16      	ldr	r2, [pc, #88]	@ (80048ac <HAL_DMA_IRQHandler+0x6cc>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d12b      	bne.n	80048b0 <HAL_DMA_IRQHandler+0x6d0>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 0310 	and.w	r3, r3, #16
 8004862:	2b00      	cmp	r3, #0
 8004864:	bf14      	ite	ne
 8004866:	2301      	movne	r3, #1
 8004868:	2300      	moveq	r3, #0
 800486a:	b2db      	uxtb	r3, r3
 800486c:	e02a      	b.n	80048c4 <HAL_DMA_IRQHandler+0x6e4>
 800486e:	bf00      	nop
 8004870:	40020010 	.word	0x40020010
 8004874:	40020028 	.word	0x40020028
 8004878:	40020040 	.word	0x40020040
 800487c:	40020058 	.word	0x40020058
 8004880:	40020070 	.word	0x40020070
 8004884:	40020088 	.word	0x40020088
 8004888:	400200a0 	.word	0x400200a0
 800488c:	400200b8 	.word	0x400200b8
 8004890:	40020410 	.word	0x40020410
 8004894:	40020428 	.word	0x40020428
 8004898:	40020440 	.word	0x40020440
 800489c:	40020458 	.word	0x40020458
 80048a0:	40020470 	.word	0x40020470
 80048a4:	40020488 	.word	0x40020488
 80048a8:	400204a0 	.word	0x400204a0
 80048ac:	400204b8 	.word	0x400204b8
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 0302 	and.w	r3, r3, #2
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	bf14      	ite	ne
 80048be:	2301      	movne	r3, #1
 80048c0:	2300      	moveq	r3, #0
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	f000 8087 	beq.w	80049d8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048ce:	f003 031f 	and.w	r3, r3, #31
 80048d2:	2220      	movs	r2, #32
 80048d4:	409a      	lsls	r2, r3
 80048d6:	6a3b      	ldr	r3, [r7, #32]
 80048d8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	2b04      	cmp	r3, #4
 80048e4:	d139      	bne.n	800495a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f022 0216 	bic.w	r2, r2, #22
 80048f4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	695a      	ldr	r2, [r3, #20]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004904:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800490a:	2b00      	cmp	r3, #0
 800490c:	d103      	bne.n	8004916 <HAL_DMA_IRQHandler+0x736>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004912:	2b00      	cmp	r3, #0
 8004914:	d007      	beq.n	8004926 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f022 0208 	bic.w	r2, r2, #8
 8004924:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800492a:	f003 031f 	and.w	r3, r3, #31
 800492e:	223f      	movs	r2, #63	@ 0x3f
 8004930:	409a      	lsls	r2, r3
 8004932:	6a3b      	ldr	r3, [r7, #32]
 8004934:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2201      	movs	r2, #1
 800493a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800494a:	2b00      	cmp	r3, #0
 800494c:	f000 834a 	beq.w	8004fe4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	4798      	blx	r3
          }
          return;
 8004958:	e344      	b.n	8004fe4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004964:	2b00      	cmp	r3, #0
 8004966:	d018      	beq.n	800499a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d108      	bne.n	8004988 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800497a:	2b00      	cmp	r3, #0
 800497c:	d02c      	beq.n	80049d8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	4798      	blx	r3
 8004986:	e027      	b.n	80049d8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800498c:	2b00      	cmp	r3, #0
 800498e:	d023      	beq.n	80049d8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	4798      	blx	r3
 8004998:	e01e      	b.n	80049d8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d10f      	bne.n	80049c8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f022 0210 	bic.w	r2, r2, #16
 80049b6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2201      	movs	r2, #1
 80049bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2200      	movs	r2, #0
 80049c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d003      	beq.n	80049d8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049dc:	2b00      	cmp	r3, #0
 80049de:	f000 8306 	beq.w	8004fee <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049e6:	f003 0301 	and.w	r3, r3, #1
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	f000 8088 	beq.w	8004b00 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2204      	movs	r2, #4
 80049f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a7a      	ldr	r2, [pc, #488]	@ (8004be8 <HAL_DMA_IRQHandler+0xa08>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d04a      	beq.n	8004a98 <HAL_DMA_IRQHandler+0x8b8>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a79      	ldr	r2, [pc, #484]	@ (8004bec <HAL_DMA_IRQHandler+0xa0c>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d045      	beq.n	8004a98 <HAL_DMA_IRQHandler+0x8b8>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a77      	ldr	r2, [pc, #476]	@ (8004bf0 <HAL_DMA_IRQHandler+0xa10>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d040      	beq.n	8004a98 <HAL_DMA_IRQHandler+0x8b8>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a76      	ldr	r2, [pc, #472]	@ (8004bf4 <HAL_DMA_IRQHandler+0xa14>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d03b      	beq.n	8004a98 <HAL_DMA_IRQHandler+0x8b8>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a74      	ldr	r2, [pc, #464]	@ (8004bf8 <HAL_DMA_IRQHandler+0xa18>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d036      	beq.n	8004a98 <HAL_DMA_IRQHandler+0x8b8>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a73      	ldr	r2, [pc, #460]	@ (8004bfc <HAL_DMA_IRQHandler+0xa1c>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d031      	beq.n	8004a98 <HAL_DMA_IRQHandler+0x8b8>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a71      	ldr	r2, [pc, #452]	@ (8004c00 <HAL_DMA_IRQHandler+0xa20>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d02c      	beq.n	8004a98 <HAL_DMA_IRQHandler+0x8b8>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a70      	ldr	r2, [pc, #448]	@ (8004c04 <HAL_DMA_IRQHandler+0xa24>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d027      	beq.n	8004a98 <HAL_DMA_IRQHandler+0x8b8>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a6e      	ldr	r2, [pc, #440]	@ (8004c08 <HAL_DMA_IRQHandler+0xa28>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d022      	beq.n	8004a98 <HAL_DMA_IRQHandler+0x8b8>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a6d      	ldr	r2, [pc, #436]	@ (8004c0c <HAL_DMA_IRQHandler+0xa2c>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d01d      	beq.n	8004a98 <HAL_DMA_IRQHandler+0x8b8>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a6b      	ldr	r2, [pc, #428]	@ (8004c10 <HAL_DMA_IRQHandler+0xa30>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d018      	beq.n	8004a98 <HAL_DMA_IRQHandler+0x8b8>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a6a      	ldr	r2, [pc, #424]	@ (8004c14 <HAL_DMA_IRQHandler+0xa34>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d013      	beq.n	8004a98 <HAL_DMA_IRQHandler+0x8b8>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a68      	ldr	r2, [pc, #416]	@ (8004c18 <HAL_DMA_IRQHandler+0xa38>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d00e      	beq.n	8004a98 <HAL_DMA_IRQHandler+0x8b8>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a67      	ldr	r2, [pc, #412]	@ (8004c1c <HAL_DMA_IRQHandler+0xa3c>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d009      	beq.n	8004a98 <HAL_DMA_IRQHandler+0x8b8>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a65      	ldr	r2, [pc, #404]	@ (8004c20 <HAL_DMA_IRQHandler+0xa40>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d004      	beq.n	8004a98 <HAL_DMA_IRQHandler+0x8b8>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a64      	ldr	r2, [pc, #400]	@ (8004c24 <HAL_DMA_IRQHandler+0xa44>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d108      	bne.n	8004aaa <HAL_DMA_IRQHandler+0x8ca>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f022 0201 	bic.w	r2, r2, #1
 8004aa6:	601a      	str	r2, [r3, #0]
 8004aa8:	e007      	b.n	8004aba <HAL_DMA_IRQHandler+0x8da>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f022 0201 	bic.w	r2, r2, #1
 8004ab8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	3301      	adds	r3, #1
 8004abe:	60fb      	str	r3, [r7, #12]
 8004ac0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d307      	bcc.n	8004ad6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 0301 	and.w	r3, r3, #1
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d1f2      	bne.n	8004aba <HAL_DMA_IRQHandler+0x8da>
 8004ad4:	e000      	b.n	8004ad8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004ad6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 0301 	and.w	r3, r3, #1
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d004      	beq.n	8004af0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2203      	movs	r2, #3
 8004aea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8004aee:	e003      	b.n	8004af8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2201      	movs	r2, #1
 8004af4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2200      	movs	r2, #0
 8004afc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	f000 8272 	beq.w	8004fee <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	4798      	blx	r3
 8004b12:	e26c      	b.n	8004fee <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a43      	ldr	r2, [pc, #268]	@ (8004c28 <HAL_DMA_IRQHandler+0xa48>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d022      	beq.n	8004b64 <HAL_DMA_IRQHandler+0x984>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a42      	ldr	r2, [pc, #264]	@ (8004c2c <HAL_DMA_IRQHandler+0xa4c>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d01d      	beq.n	8004b64 <HAL_DMA_IRQHandler+0x984>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a40      	ldr	r2, [pc, #256]	@ (8004c30 <HAL_DMA_IRQHandler+0xa50>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d018      	beq.n	8004b64 <HAL_DMA_IRQHandler+0x984>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a3f      	ldr	r2, [pc, #252]	@ (8004c34 <HAL_DMA_IRQHandler+0xa54>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d013      	beq.n	8004b64 <HAL_DMA_IRQHandler+0x984>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a3d      	ldr	r2, [pc, #244]	@ (8004c38 <HAL_DMA_IRQHandler+0xa58>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d00e      	beq.n	8004b64 <HAL_DMA_IRQHandler+0x984>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a3c      	ldr	r2, [pc, #240]	@ (8004c3c <HAL_DMA_IRQHandler+0xa5c>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d009      	beq.n	8004b64 <HAL_DMA_IRQHandler+0x984>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a3a      	ldr	r2, [pc, #232]	@ (8004c40 <HAL_DMA_IRQHandler+0xa60>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d004      	beq.n	8004b64 <HAL_DMA_IRQHandler+0x984>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a39      	ldr	r2, [pc, #228]	@ (8004c44 <HAL_DMA_IRQHandler+0xa64>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d101      	bne.n	8004b68 <HAL_DMA_IRQHandler+0x988>
 8004b64:	2301      	movs	r3, #1
 8004b66:	e000      	b.n	8004b6a <HAL_DMA_IRQHandler+0x98a>
 8004b68:	2300      	movs	r3, #0
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	f000 823f 	beq.w	8004fee <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b7c:	f003 031f 	and.w	r3, r3, #31
 8004b80:	2204      	movs	r2, #4
 8004b82:	409a      	lsls	r2, r3
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	4013      	ands	r3, r2
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	f000 80cd 	beq.w	8004d28 <HAL_DMA_IRQHandler+0xb48>
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	f003 0304 	and.w	r3, r3, #4
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	f000 80c7 	beq.w	8004d28 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b9e:	f003 031f 	and.w	r3, r3, #31
 8004ba2:	2204      	movs	r2, #4
 8004ba4:	409a      	lsls	r2, r3
 8004ba6:	69fb      	ldr	r3, [r7, #28]
 8004ba8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d049      	beq.n	8004c48 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d109      	bne.n	8004bd2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	f000 8210 	beq.w	8004fe8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004bd0:	e20a      	b.n	8004fe8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	f000 8206 	beq.w	8004fe8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004be4:	e200      	b.n	8004fe8 <HAL_DMA_IRQHandler+0xe08>
 8004be6:	bf00      	nop
 8004be8:	40020010 	.word	0x40020010
 8004bec:	40020028 	.word	0x40020028
 8004bf0:	40020040 	.word	0x40020040
 8004bf4:	40020058 	.word	0x40020058
 8004bf8:	40020070 	.word	0x40020070
 8004bfc:	40020088 	.word	0x40020088
 8004c00:	400200a0 	.word	0x400200a0
 8004c04:	400200b8 	.word	0x400200b8
 8004c08:	40020410 	.word	0x40020410
 8004c0c:	40020428 	.word	0x40020428
 8004c10:	40020440 	.word	0x40020440
 8004c14:	40020458 	.word	0x40020458
 8004c18:	40020470 	.word	0x40020470
 8004c1c:	40020488 	.word	0x40020488
 8004c20:	400204a0 	.word	0x400204a0
 8004c24:	400204b8 	.word	0x400204b8
 8004c28:	58025408 	.word	0x58025408
 8004c2c:	5802541c 	.word	0x5802541c
 8004c30:	58025430 	.word	0x58025430
 8004c34:	58025444 	.word	0x58025444
 8004c38:	58025458 	.word	0x58025458
 8004c3c:	5802546c 	.word	0x5802546c
 8004c40:	58025480 	.word	0x58025480
 8004c44:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	f003 0320 	and.w	r3, r3, #32
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d160      	bne.n	8004d14 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a7f      	ldr	r2, [pc, #508]	@ (8004e54 <HAL_DMA_IRQHandler+0xc74>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d04a      	beq.n	8004cf2 <HAL_DMA_IRQHandler+0xb12>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a7d      	ldr	r2, [pc, #500]	@ (8004e58 <HAL_DMA_IRQHandler+0xc78>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d045      	beq.n	8004cf2 <HAL_DMA_IRQHandler+0xb12>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a7c      	ldr	r2, [pc, #496]	@ (8004e5c <HAL_DMA_IRQHandler+0xc7c>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d040      	beq.n	8004cf2 <HAL_DMA_IRQHandler+0xb12>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a7a      	ldr	r2, [pc, #488]	@ (8004e60 <HAL_DMA_IRQHandler+0xc80>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d03b      	beq.n	8004cf2 <HAL_DMA_IRQHandler+0xb12>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a79      	ldr	r2, [pc, #484]	@ (8004e64 <HAL_DMA_IRQHandler+0xc84>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d036      	beq.n	8004cf2 <HAL_DMA_IRQHandler+0xb12>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a77      	ldr	r2, [pc, #476]	@ (8004e68 <HAL_DMA_IRQHandler+0xc88>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d031      	beq.n	8004cf2 <HAL_DMA_IRQHandler+0xb12>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a76      	ldr	r2, [pc, #472]	@ (8004e6c <HAL_DMA_IRQHandler+0xc8c>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d02c      	beq.n	8004cf2 <HAL_DMA_IRQHandler+0xb12>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a74      	ldr	r2, [pc, #464]	@ (8004e70 <HAL_DMA_IRQHandler+0xc90>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d027      	beq.n	8004cf2 <HAL_DMA_IRQHandler+0xb12>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a73      	ldr	r2, [pc, #460]	@ (8004e74 <HAL_DMA_IRQHandler+0xc94>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d022      	beq.n	8004cf2 <HAL_DMA_IRQHandler+0xb12>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a71      	ldr	r2, [pc, #452]	@ (8004e78 <HAL_DMA_IRQHandler+0xc98>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d01d      	beq.n	8004cf2 <HAL_DMA_IRQHandler+0xb12>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a70      	ldr	r2, [pc, #448]	@ (8004e7c <HAL_DMA_IRQHandler+0xc9c>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d018      	beq.n	8004cf2 <HAL_DMA_IRQHandler+0xb12>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a6e      	ldr	r2, [pc, #440]	@ (8004e80 <HAL_DMA_IRQHandler+0xca0>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d013      	beq.n	8004cf2 <HAL_DMA_IRQHandler+0xb12>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a6d      	ldr	r2, [pc, #436]	@ (8004e84 <HAL_DMA_IRQHandler+0xca4>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d00e      	beq.n	8004cf2 <HAL_DMA_IRQHandler+0xb12>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a6b      	ldr	r2, [pc, #428]	@ (8004e88 <HAL_DMA_IRQHandler+0xca8>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d009      	beq.n	8004cf2 <HAL_DMA_IRQHandler+0xb12>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a6a      	ldr	r2, [pc, #424]	@ (8004e8c <HAL_DMA_IRQHandler+0xcac>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d004      	beq.n	8004cf2 <HAL_DMA_IRQHandler+0xb12>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a68      	ldr	r2, [pc, #416]	@ (8004e90 <HAL_DMA_IRQHandler+0xcb0>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d108      	bne.n	8004d04 <HAL_DMA_IRQHandler+0xb24>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f022 0208 	bic.w	r2, r2, #8
 8004d00:	601a      	str	r2, [r3, #0]
 8004d02:	e007      	b.n	8004d14 <HAL_DMA_IRQHandler+0xb34>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f022 0204 	bic.w	r2, r2, #4
 8004d12:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	f000 8165 	beq.w	8004fe8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d26:	e15f      	b.n	8004fe8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d2c:	f003 031f 	and.w	r3, r3, #31
 8004d30:	2202      	movs	r2, #2
 8004d32:	409a      	lsls	r2, r3
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	4013      	ands	r3, r2
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	f000 80c5 	beq.w	8004ec8 <HAL_DMA_IRQHandler+0xce8>
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	f003 0302 	and.w	r3, r3, #2
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	f000 80bf 	beq.w	8004ec8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d4e:	f003 031f 	and.w	r3, r3, #31
 8004d52:	2202      	movs	r2, #2
 8004d54:	409a      	lsls	r2, r3
 8004d56:	69fb      	ldr	r3, [r7, #28]
 8004d58:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d018      	beq.n	8004d96 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d109      	bne.n	8004d82 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	f000 813a 	beq.w	8004fec <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d80:	e134      	b.n	8004fec <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	f000 8130 	beq.w	8004fec <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d94:	e12a      	b.n	8004fec <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	f003 0320 	and.w	r3, r3, #32
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	f040 8089 	bne.w	8004eb4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a2b      	ldr	r2, [pc, #172]	@ (8004e54 <HAL_DMA_IRQHandler+0xc74>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d04a      	beq.n	8004e42 <HAL_DMA_IRQHandler+0xc62>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a29      	ldr	r2, [pc, #164]	@ (8004e58 <HAL_DMA_IRQHandler+0xc78>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d045      	beq.n	8004e42 <HAL_DMA_IRQHandler+0xc62>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a28      	ldr	r2, [pc, #160]	@ (8004e5c <HAL_DMA_IRQHandler+0xc7c>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d040      	beq.n	8004e42 <HAL_DMA_IRQHandler+0xc62>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a26      	ldr	r2, [pc, #152]	@ (8004e60 <HAL_DMA_IRQHandler+0xc80>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d03b      	beq.n	8004e42 <HAL_DMA_IRQHandler+0xc62>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a25      	ldr	r2, [pc, #148]	@ (8004e64 <HAL_DMA_IRQHandler+0xc84>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d036      	beq.n	8004e42 <HAL_DMA_IRQHandler+0xc62>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a23      	ldr	r2, [pc, #140]	@ (8004e68 <HAL_DMA_IRQHandler+0xc88>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d031      	beq.n	8004e42 <HAL_DMA_IRQHandler+0xc62>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a22      	ldr	r2, [pc, #136]	@ (8004e6c <HAL_DMA_IRQHandler+0xc8c>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d02c      	beq.n	8004e42 <HAL_DMA_IRQHandler+0xc62>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a20      	ldr	r2, [pc, #128]	@ (8004e70 <HAL_DMA_IRQHandler+0xc90>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d027      	beq.n	8004e42 <HAL_DMA_IRQHandler+0xc62>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a1f      	ldr	r2, [pc, #124]	@ (8004e74 <HAL_DMA_IRQHandler+0xc94>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d022      	beq.n	8004e42 <HAL_DMA_IRQHandler+0xc62>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a1d      	ldr	r2, [pc, #116]	@ (8004e78 <HAL_DMA_IRQHandler+0xc98>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d01d      	beq.n	8004e42 <HAL_DMA_IRQHandler+0xc62>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a1c      	ldr	r2, [pc, #112]	@ (8004e7c <HAL_DMA_IRQHandler+0xc9c>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d018      	beq.n	8004e42 <HAL_DMA_IRQHandler+0xc62>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a1a      	ldr	r2, [pc, #104]	@ (8004e80 <HAL_DMA_IRQHandler+0xca0>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d013      	beq.n	8004e42 <HAL_DMA_IRQHandler+0xc62>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a19      	ldr	r2, [pc, #100]	@ (8004e84 <HAL_DMA_IRQHandler+0xca4>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d00e      	beq.n	8004e42 <HAL_DMA_IRQHandler+0xc62>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a17      	ldr	r2, [pc, #92]	@ (8004e88 <HAL_DMA_IRQHandler+0xca8>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d009      	beq.n	8004e42 <HAL_DMA_IRQHandler+0xc62>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a16      	ldr	r2, [pc, #88]	@ (8004e8c <HAL_DMA_IRQHandler+0xcac>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d004      	beq.n	8004e42 <HAL_DMA_IRQHandler+0xc62>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a14      	ldr	r2, [pc, #80]	@ (8004e90 <HAL_DMA_IRQHandler+0xcb0>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d128      	bne.n	8004e94 <HAL_DMA_IRQHandler+0xcb4>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f022 0214 	bic.w	r2, r2, #20
 8004e50:	601a      	str	r2, [r3, #0]
 8004e52:	e027      	b.n	8004ea4 <HAL_DMA_IRQHandler+0xcc4>
 8004e54:	40020010 	.word	0x40020010
 8004e58:	40020028 	.word	0x40020028
 8004e5c:	40020040 	.word	0x40020040
 8004e60:	40020058 	.word	0x40020058
 8004e64:	40020070 	.word	0x40020070
 8004e68:	40020088 	.word	0x40020088
 8004e6c:	400200a0 	.word	0x400200a0
 8004e70:	400200b8 	.word	0x400200b8
 8004e74:	40020410 	.word	0x40020410
 8004e78:	40020428 	.word	0x40020428
 8004e7c:	40020440 	.word	0x40020440
 8004e80:	40020458 	.word	0x40020458
 8004e84:	40020470 	.word	0x40020470
 8004e88:	40020488 	.word	0x40020488
 8004e8c:	400204a0 	.word	0x400204a0
 8004e90:	400204b8 	.word	0x400204b8
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f022 020a 	bic.w	r2, r2, #10
 8004ea2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	f000 8097 	beq.w	8004fec <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ec6:	e091      	b.n	8004fec <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ecc:	f003 031f 	and.w	r3, r3, #31
 8004ed0:	2208      	movs	r2, #8
 8004ed2:	409a      	lsls	r2, r3
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	4013      	ands	r3, r2
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	f000 8088 	beq.w	8004fee <HAL_DMA_IRQHandler+0xe0e>
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	f003 0308 	and.w	r3, r3, #8
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	f000 8082 	beq.w	8004fee <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a41      	ldr	r2, [pc, #260]	@ (8004ff4 <HAL_DMA_IRQHandler+0xe14>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d04a      	beq.n	8004f8a <HAL_DMA_IRQHandler+0xdaa>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a3f      	ldr	r2, [pc, #252]	@ (8004ff8 <HAL_DMA_IRQHandler+0xe18>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d045      	beq.n	8004f8a <HAL_DMA_IRQHandler+0xdaa>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a3e      	ldr	r2, [pc, #248]	@ (8004ffc <HAL_DMA_IRQHandler+0xe1c>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d040      	beq.n	8004f8a <HAL_DMA_IRQHandler+0xdaa>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a3c      	ldr	r2, [pc, #240]	@ (8005000 <HAL_DMA_IRQHandler+0xe20>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d03b      	beq.n	8004f8a <HAL_DMA_IRQHandler+0xdaa>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a3b      	ldr	r2, [pc, #236]	@ (8005004 <HAL_DMA_IRQHandler+0xe24>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d036      	beq.n	8004f8a <HAL_DMA_IRQHandler+0xdaa>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a39      	ldr	r2, [pc, #228]	@ (8005008 <HAL_DMA_IRQHandler+0xe28>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d031      	beq.n	8004f8a <HAL_DMA_IRQHandler+0xdaa>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a38      	ldr	r2, [pc, #224]	@ (800500c <HAL_DMA_IRQHandler+0xe2c>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d02c      	beq.n	8004f8a <HAL_DMA_IRQHandler+0xdaa>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a36      	ldr	r2, [pc, #216]	@ (8005010 <HAL_DMA_IRQHandler+0xe30>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d027      	beq.n	8004f8a <HAL_DMA_IRQHandler+0xdaa>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a35      	ldr	r2, [pc, #212]	@ (8005014 <HAL_DMA_IRQHandler+0xe34>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d022      	beq.n	8004f8a <HAL_DMA_IRQHandler+0xdaa>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a33      	ldr	r2, [pc, #204]	@ (8005018 <HAL_DMA_IRQHandler+0xe38>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d01d      	beq.n	8004f8a <HAL_DMA_IRQHandler+0xdaa>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a32      	ldr	r2, [pc, #200]	@ (800501c <HAL_DMA_IRQHandler+0xe3c>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d018      	beq.n	8004f8a <HAL_DMA_IRQHandler+0xdaa>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a30      	ldr	r2, [pc, #192]	@ (8005020 <HAL_DMA_IRQHandler+0xe40>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d013      	beq.n	8004f8a <HAL_DMA_IRQHandler+0xdaa>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a2f      	ldr	r2, [pc, #188]	@ (8005024 <HAL_DMA_IRQHandler+0xe44>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d00e      	beq.n	8004f8a <HAL_DMA_IRQHandler+0xdaa>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a2d      	ldr	r2, [pc, #180]	@ (8005028 <HAL_DMA_IRQHandler+0xe48>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d009      	beq.n	8004f8a <HAL_DMA_IRQHandler+0xdaa>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a2c      	ldr	r2, [pc, #176]	@ (800502c <HAL_DMA_IRQHandler+0xe4c>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d004      	beq.n	8004f8a <HAL_DMA_IRQHandler+0xdaa>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a2a      	ldr	r2, [pc, #168]	@ (8005030 <HAL_DMA_IRQHandler+0xe50>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d108      	bne.n	8004f9c <HAL_DMA_IRQHandler+0xdbc>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f022 021c 	bic.w	r2, r2, #28
 8004f98:	601a      	str	r2, [r3, #0]
 8004f9a:	e007      	b.n	8004fac <HAL_DMA_IRQHandler+0xdcc>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f022 020e 	bic.w	r2, r2, #14
 8004faa:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fb0:	f003 031f 	and.w	r3, r3, #31
 8004fb4:	2201      	movs	r2, #1
 8004fb6:	409a      	lsls	r2, r3
 8004fb8:	69fb      	ldr	r3, [r7, #28]
 8004fba:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d009      	beq.n	8004fee <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	4798      	blx	r3
 8004fe2:	e004      	b.n	8004fee <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004fe4:	bf00      	nop
 8004fe6:	e002      	b.n	8004fee <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004fe8:	bf00      	nop
 8004fea:	e000      	b.n	8004fee <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004fec:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004fee:	3728      	adds	r7, #40	@ 0x28
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}
 8004ff4:	40020010 	.word	0x40020010
 8004ff8:	40020028 	.word	0x40020028
 8004ffc:	40020040 	.word	0x40020040
 8005000:	40020058 	.word	0x40020058
 8005004:	40020070 	.word	0x40020070
 8005008:	40020088 	.word	0x40020088
 800500c:	400200a0 	.word	0x400200a0
 8005010:	400200b8 	.word	0x400200b8
 8005014:	40020410 	.word	0x40020410
 8005018:	40020428 	.word	0x40020428
 800501c:	40020440 	.word	0x40020440
 8005020:	40020458 	.word	0x40020458
 8005024:	40020470 	.word	0x40020470
 8005028:	40020488 	.word	0x40020488
 800502c:	400204a0 	.word	0x400204a0
 8005030:	400204b8 	.word	0x400204b8

08005034 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005034:	b480      	push	{r7}
 8005036:	b085      	sub	sp, #20
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a42      	ldr	r2, [pc, #264]	@ (800514c <DMA_CalcBaseAndBitshift+0x118>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d04a      	beq.n	80050dc <DMA_CalcBaseAndBitshift+0xa8>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a41      	ldr	r2, [pc, #260]	@ (8005150 <DMA_CalcBaseAndBitshift+0x11c>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d045      	beq.n	80050dc <DMA_CalcBaseAndBitshift+0xa8>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a3f      	ldr	r2, [pc, #252]	@ (8005154 <DMA_CalcBaseAndBitshift+0x120>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d040      	beq.n	80050dc <DMA_CalcBaseAndBitshift+0xa8>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a3e      	ldr	r2, [pc, #248]	@ (8005158 <DMA_CalcBaseAndBitshift+0x124>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d03b      	beq.n	80050dc <DMA_CalcBaseAndBitshift+0xa8>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a3c      	ldr	r2, [pc, #240]	@ (800515c <DMA_CalcBaseAndBitshift+0x128>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d036      	beq.n	80050dc <DMA_CalcBaseAndBitshift+0xa8>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a3b      	ldr	r2, [pc, #236]	@ (8005160 <DMA_CalcBaseAndBitshift+0x12c>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d031      	beq.n	80050dc <DMA_CalcBaseAndBitshift+0xa8>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a39      	ldr	r2, [pc, #228]	@ (8005164 <DMA_CalcBaseAndBitshift+0x130>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d02c      	beq.n	80050dc <DMA_CalcBaseAndBitshift+0xa8>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a38      	ldr	r2, [pc, #224]	@ (8005168 <DMA_CalcBaseAndBitshift+0x134>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d027      	beq.n	80050dc <DMA_CalcBaseAndBitshift+0xa8>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a36      	ldr	r2, [pc, #216]	@ (800516c <DMA_CalcBaseAndBitshift+0x138>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d022      	beq.n	80050dc <DMA_CalcBaseAndBitshift+0xa8>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a35      	ldr	r2, [pc, #212]	@ (8005170 <DMA_CalcBaseAndBitshift+0x13c>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d01d      	beq.n	80050dc <DMA_CalcBaseAndBitshift+0xa8>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a33      	ldr	r2, [pc, #204]	@ (8005174 <DMA_CalcBaseAndBitshift+0x140>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d018      	beq.n	80050dc <DMA_CalcBaseAndBitshift+0xa8>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a32      	ldr	r2, [pc, #200]	@ (8005178 <DMA_CalcBaseAndBitshift+0x144>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d013      	beq.n	80050dc <DMA_CalcBaseAndBitshift+0xa8>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a30      	ldr	r2, [pc, #192]	@ (800517c <DMA_CalcBaseAndBitshift+0x148>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d00e      	beq.n	80050dc <DMA_CalcBaseAndBitshift+0xa8>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a2f      	ldr	r2, [pc, #188]	@ (8005180 <DMA_CalcBaseAndBitshift+0x14c>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d009      	beq.n	80050dc <DMA_CalcBaseAndBitshift+0xa8>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a2d      	ldr	r2, [pc, #180]	@ (8005184 <DMA_CalcBaseAndBitshift+0x150>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d004      	beq.n	80050dc <DMA_CalcBaseAndBitshift+0xa8>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a2c      	ldr	r2, [pc, #176]	@ (8005188 <DMA_CalcBaseAndBitshift+0x154>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d101      	bne.n	80050e0 <DMA_CalcBaseAndBitshift+0xac>
 80050dc:	2301      	movs	r3, #1
 80050de:	e000      	b.n	80050e2 <DMA_CalcBaseAndBitshift+0xae>
 80050e0:	2300      	movs	r3, #0
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d024      	beq.n	8005130 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	3b10      	subs	r3, #16
 80050ee:	4a27      	ldr	r2, [pc, #156]	@ (800518c <DMA_CalcBaseAndBitshift+0x158>)
 80050f0:	fba2 2303 	umull	r2, r3, r2, r3
 80050f4:	091b      	lsrs	r3, r3, #4
 80050f6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f003 0307 	and.w	r3, r3, #7
 80050fe:	4a24      	ldr	r2, [pc, #144]	@ (8005190 <DMA_CalcBaseAndBitshift+0x15c>)
 8005100:	5cd3      	ldrb	r3, [r2, r3]
 8005102:	461a      	mov	r2, r3
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2b03      	cmp	r3, #3
 800510c:	d908      	bls.n	8005120 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	461a      	mov	r2, r3
 8005114:	4b1f      	ldr	r3, [pc, #124]	@ (8005194 <DMA_CalcBaseAndBitshift+0x160>)
 8005116:	4013      	ands	r3, r2
 8005118:	1d1a      	adds	r2, r3, #4
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	659a      	str	r2, [r3, #88]	@ 0x58
 800511e:	e00d      	b.n	800513c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	461a      	mov	r2, r3
 8005126:	4b1b      	ldr	r3, [pc, #108]	@ (8005194 <DMA_CalcBaseAndBitshift+0x160>)
 8005128:	4013      	ands	r3, r2
 800512a:	687a      	ldr	r2, [r7, #4]
 800512c:	6593      	str	r3, [r2, #88]	@ 0x58
 800512e:	e005      	b.n	800513c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005140:	4618      	mov	r0, r3
 8005142:	3714      	adds	r7, #20
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr
 800514c:	40020010 	.word	0x40020010
 8005150:	40020028 	.word	0x40020028
 8005154:	40020040 	.word	0x40020040
 8005158:	40020058 	.word	0x40020058
 800515c:	40020070 	.word	0x40020070
 8005160:	40020088 	.word	0x40020088
 8005164:	400200a0 	.word	0x400200a0
 8005168:	400200b8 	.word	0x400200b8
 800516c:	40020410 	.word	0x40020410
 8005170:	40020428 	.word	0x40020428
 8005174:	40020440 	.word	0x40020440
 8005178:	40020458 	.word	0x40020458
 800517c:	40020470 	.word	0x40020470
 8005180:	40020488 	.word	0x40020488
 8005184:	400204a0 	.word	0x400204a0
 8005188:	400204b8 	.word	0x400204b8
 800518c:	aaaaaaab 	.word	0xaaaaaaab
 8005190:	0800eaf0 	.word	0x0800eaf0
 8005194:	fffffc00 	.word	0xfffffc00

08005198 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005198:	b480      	push	{r7}
 800519a:	b085      	sub	sp, #20
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051a0:	2300      	movs	r3, #0
 80051a2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	699b      	ldr	r3, [r3, #24]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d120      	bne.n	80051ee <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051b0:	2b03      	cmp	r3, #3
 80051b2:	d858      	bhi.n	8005266 <DMA_CheckFifoParam+0xce>
 80051b4:	a201      	add	r2, pc, #4	@ (adr r2, 80051bc <DMA_CheckFifoParam+0x24>)
 80051b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ba:	bf00      	nop
 80051bc:	080051cd 	.word	0x080051cd
 80051c0:	080051df 	.word	0x080051df
 80051c4:	080051cd 	.word	0x080051cd
 80051c8:	08005267 	.word	0x08005267
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d048      	beq.n	800526a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80051d8:	2301      	movs	r3, #1
 80051da:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80051dc:	e045      	b.n	800526a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051e2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80051e6:	d142      	bne.n	800526e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80051ec:	e03f      	b.n	800526e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	699b      	ldr	r3, [r3, #24]
 80051f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051f6:	d123      	bne.n	8005240 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051fc:	2b03      	cmp	r3, #3
 80051fe:	d838      	bhi.n	8005272 <DMA_CheckFifoParam+0xda>
 8005200:	a201      	add	r2, pc, #4	@ (adr r2, 8005208 <DMA_CheckFifoParam+0x70>)
 8005202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005206:	bf00      	nop
 8005208:	08005219 	.word	0x08005219
 800520c:	0800521f 	.word	0x0800521f
 8005210:	08005219 	.word	0x08005219
 8005214:	08005231 	.word	0x08005231
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005218:	2301      	movs	r3, #1
 800521a:	73fb      	strb	r3, [r7, #15]
        break;
 800521c:	e030      	b.n	8005280 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005222:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005226:	2b00      	cmp	r3, #0
 8005228:	d025      	beq.n	8005276 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800522e:	e022      	b.n	8005276 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005234:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005238:	d11f      	bne.n	800527a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800523e:	e01c      	b.n	800527a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005244:	2b02      	cmp	r3, #2
 8005246:	d902      	bls.n	800524e <DMA_CheckFifoParam+0xb6>
 8005248:	2b03      	cmp	r3, #3
 800524a:	d003      	beq.n	8005254 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800524c:	e018      	b.n	8005280 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	73fb      	strb	r3, [r7, #15]
        break;
 8005252:	e015      	b.n	8005280 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005258:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800525c:	2b00      	cmp	r3, #0
 800525e:	d00e      	beq.n	800527e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	73fb      	strb	r3, [r7, #15]
    break;
 8005264:	e00b      	b.n	800527e <DMA_CheckFifoParam+0xe6>
        break;
 8005266:	bf00      	nop
 8005268:	e00a      	b.n	8005280 <DMA_CheckFifoParam+0xe8>
        break;
 800526a:	bf00      	nop
 800526c:	e008      	b.n	8005280 <DMA_CheckFifoParam+0xe8>
        break;
 800526e:	bf00      	nop
 8005270:	e006      	b.n	8005280 <DMA_CheckFifoParam+0xe8>
        break;
 8005272:	bf00      	nop
 8005274:	e004      	b.n	8005280 <DMA_CheckFifoParam+0xe8>
        break;
 8005276:	bf00      	nop
 8005278:	e002      	b.n	8005280 <DMA_CheckFifoParam+0xe8>
        break;
 800527a:	bf00      	nop
 800527c:	e000      	b.n	8005280 <DMA_CheckFifoParam+0xe8>
    break;
 800527e:	bf00      	nop
    }
  }

  return status;
 8005280:	7bfb      	ldrb	r3, [r7, #15]
}
 8005282:	4618      	mov	r0, r3
 8005284:	3714      	adds	r7, #20
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr
 800528e:	bf00      	nop

08005290 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005290:	b480      	push	{r7}
 8005292:	b085      	sub	sp, #20
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a38      	ldr	r2, [pc, #224]	@ (8005384 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d022      	beq.n	80052ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a36      	ldr	r2, [pc, #216]	@ (8005388 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d01d      	beq.n	80052ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a35      	ldr	r2, [pc, #212]	@ (800538c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d018      	beq.n	80052ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a33      	ldr	r2, [pc, #204]	@ (8005390 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d013      	beq.n	80052ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a32      	ldr	r2, [pc, #200]	@ (8005394 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d00e      	beq.n	80052ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a30      	ldr	r2, [pc, #192]	@ (8005398 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d009      	beq.n	80052ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a2f      	ldr	r2, [pc, #188]	@ (800539c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d004      	beq.n	80052ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a2d      	ldr	r2, [pc, #180]	@ (80053a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d101      	bne.n	80052f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80052ee:	2301      	movs	r3, #1
 80052f0:	e000      	b.n	80052f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80052f2:	2300      	movs	r3, #0
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d01a      	beq.n	800532e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	3b08      	subs	r3, #8
 8005300:	4a28      	ldr	r2, [pc, #160]	@ (80053a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005302:	fba2 2303 	umull	r2, r3, r2, r3
 8005306:	091b      	lsrs	r3, r3, #4
 8005308:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800530a:	68fa      	ldr	r2, [r7, #12]
 800530c:	4b26      	ldr	r3, [pc, #152]	@ (80053a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800530e:	4413      	add	r3, r2
 8005310:	009b      	lsls	r3, r3, #2
 8005312:	461a      	mov	r2, r3
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	4a24      	ldr	r2, [pc, #144]	@ (80053ac <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800531c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	f003 031f 	and.w	r3, r3, #31
 8005324:	2201      	movs	r2, #1
 8005326:	409a      	lsls	r2, r3
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800532c:	e024      	b.n	8005378 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	b2db      	uxtb	r3, r3
 8005334:	3b10      	subs	r3, #16
 8005336:	4a1e      	ldr	r2, [pc, #120]	@ (80053b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005338:	fba2 2303 	umull	r2, r3, r2, r3
 800533c:	091b      	lsrs	r3, r3, #4
 800533e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	4a1c      	ldr	r2, [pc, #112]	@ (80053b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d806      	bhi.n	8005356 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	4a1b      	ldr	r2, [pc, #108]	@ (80053b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d902      	bls.n	8005356 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	3308      	adds	r3, #8
 8005354:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005356:	68fa      	ldr	r2, [r7, #12]
 8005358:	4b18      	ldr	r3, [pc, #96]	@ (80053bc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800535a:	4413      	add	r3, r2
 800535c:	009b      	lsls	r3, r3, #2
 800535e:	461a      	mov	r2, r3
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	4a16      	ldr	r2, [pc, #88]	@ (80053c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005368:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	f003 031f 	and.w	r3, r3, #31
 8005370:	2201      	movs	r2, #1
 8005372:	409a      	lsls	r2, r3
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005378:	bf00      	nop
 800537a:	3714      	adds	r7, #20
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr
 8005384:	58025408 	.word	0x58025408
 8005388:	5802541c 	.word	0x5802541c
 800538c:	58025430 	.word	0x58025430
 8005390:	58025444 	.word	0x58025444
 8005394:	58025458 	.word	0x58025458
 8005398:	5802546c 	.word	0x5802546c
 800539c:	58025480 	.word	0x58025480
 80053a0:	58025494 	.word	0x58025494
 80053a4:	cccccccd 	.word	0xcccccccd
 80053a8:	16009600 	.word	0x16009600
 80053ac:	58025880 	.word	0x58025880
 80053b0:	aaaaaaab 	.word	0xaaaaaaab
 80053b4:	400204b8 	.word	0x400204b8
 80053b8:	4002040f 	.word	0x4002040f
 80053bc:	10008200 	.word	0x10008200
 80053c0:	40020880 	.word	0x40020880

080053c4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b085      	sub	sp, #20
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	b2db      	uxtb	r3, r3
 80053d2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d04a      	beq.n	8005470 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2b08      	cmp	r3, #8
 80053de:	d847      	bhi.n	8005470 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a25      	ldr	r2, [pc, #148]	@ (800547c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d022      	beq.n	8005430 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a24      	ldr	r2, [pc, #144]	@ (8005480 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d01d      	beq.n	8005430 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a22      	ldr	r2, [pc, #136]	@ (8005484 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d018      	beq.n	8005430 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a21      	ldr	r2, [pc, #132]	@ (8005488 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d013      	beq.n	8005430 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a1f      	ldr	r2, [pc, #124]	@ (800548c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d00e      	beq.n	8005430 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a1e      	ldr	r2, [pc, #120]	@ (8005490 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d009      	beq.n	8005430 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a1c      	ldr	r2, [pc, #112]	@ (8005494 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d004      	beq.n	8005430 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a1b      	ldr	r2, [pc, #108]	@ (8005498 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d101      	bne.n	8005434 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005430:	2301      	movs	r3, #1
 8005432:	e000      	b.n	8005436 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005434:	2300      	movs	r3, #0
 8005436:	2b00      	cmp	r3, #0
 8005438:	d00a      	beq.n	8005450 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800543a:	68fa      	ldr	r2, [r7, #12]
 800543c:	4b17      	ldr	r3, [pc, #92]	@ (800549c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800543e:	4413      	add	r3, r2
 8005440:	009b      	lsls	r3, r3, #2
 8005442:	461a      	mov	r2, r3
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	4a15      	ldr	r2, [pc, #84]	@ (80054a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800544c:	671a      	str	r2, [r3, #112]	@ 0x70
 800544e:	e009      	b.n	8005464 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005450:	68fa      	ldr	r2, [r7, #12]
 8005452:	4b14      	ldr	r3, [pc, #80]	@ (80054a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005454:	4413      	add	r3, r2
 8005456:	009b      	lsls	r3, r3, #2
 8005458:	461a      	mov	r2, r3
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	4a11      	ldr	r2, [pc, #68]	@ (80054a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005462:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	3b01      	subs	r3, #1
 8005468:	2201      	movs	r2, #1
 800546a:	409a      	lsls	r2, r3
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8005470:	bf00      	nop
 8005472:	3714      	adds	r7, #20
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr
 800547c:	58025408 	.word	0x58025408
 8005480:	5802541c 	.word	0x5802541c
 8005484:	58025430 	.word	0x58025430
 8005488:	58025444 	.word	0x58025444
 800548c:	58025458 	.word	0x58025458
 8005490:	5802546c 	.word	0x5802546c
 8005494:	58025480 	.word	0x58025480
 8005498:	58025494 	.word	0x58025494
 800549c:	1600963f 	.word	0x1600963f
 80054a0:	58025940 	.word	0x58025940
 80054a4:	1000823f 	.word	0x1000823f
 80054a8:	40020940 	.word	0x40020940

080054ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b089      	sub	sp, #36	@ 0x24
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
 80054b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80054b6:	2300      	movs	r3, #0
 80054b8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80054ba:	4b89      	ldr	r3, [pc, #548]	@ (80056e0 <HAL_GPIO_Init+0x234>)
 80054bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80054be:	e194      	b.n	80057ea <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	2101      	movs	r1, #1
 80054c6:	69fb      	ldr	r3, [r7, #28]
 80054c8:	fa01 f303 	lsl.w	r3, r1, r3
 80054cc:	4013      	ands	r3, r2
 80054ce:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	f000 8186 	beq.w	80057e4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	f003 0303 	and.w	r3, r3, #3
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d005      	beq.n	80054f0 <HAL_GPIO_Init+0x44>
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	f003 0303 	and.w	r3, r3, #3
 80054ec:	2b02      	cmp	r3, #2
 80054ee:	d130      	bne.n	8005552 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80054f6:	69fb      	ldr	r3, [r7, #28]
 80054f8:	005b      	lsls	r3, r3, #1
 80054fa:	2203      	movs	r2, #3
 80054fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005500:	43db      	mvns	r3, r3
 8005502:	69ba      	ldr	r2, [r7, #24]
 8005504:	4013      	ands	r3, r2
 8005506:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	68da      	ldr	r2, [r3, #12]
 800550c:	69fb      	ldr	r3, [r7, #28]
 800550e:	005b      	lsls	r3, r3, #1
 8005510:	fa02 f303 	lsl.w	r3, r2, r3
 8005514:	69ba      	ldr	r2, [r7, #24]
 8005516:	4313      	orrs	r3, r2
 8005518:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	69ba      	ldr	r2, [r7, #24]
 800551e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005526:	2201      	movs	r2, #1
 8005528:	69fb      	ldr	r3, [r7, #28]
 800552a:	fa02 f303 	lsl.w	r3, r2, r3
 800552e:	43db      	mvns	r3, r3
 8005530:	69ba      	ldr	r2, [r7, #24]
 8005532:	4013      	ands	r3, r2
 8005534:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	091b      	lsrs	r3, r3, #4
 800553c:	f003 0201 	and.w	r2, r3, #1
 8005540:	69fb      	ldr	r3, [r7, #28]
 8005542:	fa02 f303 	lsl.w	r3, r2, r3
 8005546:	69ba      	ldr	r2, [r7, #24]
 8005548:	4313      	orrs	r3, r2
 800554a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	69ba      	ldr	r2, [r7, #24]
 8005550:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	f003 0303 	and.w	r3, r3, #3
 800555a:	2b03      	cmp	r3, #3
 800555c:	d017      	beq.n	800558e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	68db      	ldr	r3, [r3, #12]
 8005562:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005564:	69fb      	ldr	r3, [r7, #28]
 8005566:	005b      	lsls	r3, r3, #1
 8005568:	2203      	movs	r2, #3
 800556a:	fa02 f303 	lsl.w	r3, r2, r3
 800556e:	43db      	mvns	r3, r3
 8005570:	69ba      	ldr	r2, [r7, #24]
 8005572:	4013      	ands	r3, r2
 8005574:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	689a      	ldr	r2, [r3, #8]
 800557a:	69fb      	ldr	r3, [r7, #28]
 800557c:	005b      	lsls	r3, r3, #1
 800557e:	fa02 f303 	lsl.w	r3, r2, r3
 8005582:	69ba      	ldr	r2, [r7, #24]
 8005584:	4313      	orrs	r3, r2
 8005586:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	69ba      	ldr	r2, [r7, #24]
 800558c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	f003 0303 	and.w	r3, r3, #3
 8005596:	2b02      	cmp	r3, #2
 8005598:	d123      	bne.n	80055e2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800559a:	69fb      	ldr	r3, [r7, #28]
 800559c:	08da      	lsrs	r2, r3, #3
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	3208      	adds	r2, #8
 80055a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80055a8:	69fb      	ldr	r3, [r7, #28]
 80055aa:	f003 0307 	and.w	r3, r3, #7
 80055ae:	009b      	lsls	r3, r3, #2
 80055b0:	220f      	movs	r2, #15
 80055b2:	fa02 f303 	lsl.w	r3, r2, r3
 80055b6:	43db      	mvns	r3, r3
 80055b8:	69ba      	ldr	r2, [r7, #24]
 80055ba:	4013      	ands	r3, r2
 80055bc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	691a      	ldr	r2, [r3, #16]
 80055c2:	69fb      	ldr	r3, [r7, #28]
 80055c4:	f003 0307 	and.w	r3, r3, #7
 80055c8:	009b      	lsls	r3, r3, #2
 80055ca:	fa02 f303 	lsl.w	r3, r2, r3
 80055ce:	69ba      	ldr	r2, [r7, #24]
 80055d0:	4313      	orrs	r3, r2
 80055d2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80055d4:	69fb      	ldr	r3, [r7, #28]
 80055d6:	08da      	lsrs	r2, r3, #3
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	3208      	adds	r2, #8
 80055dc:	69b9      	ldr	r1, [r7, #24]
 80055de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80055e8:	69fb      	ldr	r3, [r7, #28]
 80055ea:	005b      	lsls	r3, r3, #1
 80055ec:	2203      	movs	r2, #3
 80055ee:	fa02 f303 	lsl.w	r3, r2, r3
 80055f2:	43db      	mvns	r3, r3
 80055f4:	69ba      	ldr	r2, [r7, #24]
 80055f6:	4013      	ands	r3, r2
 80055f8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	f003 0203 	and.w	r2, r3, #3
 8005602:	69fb      	ldr	r3, [r7, #28]
 8005604:	005b      	lsls	r3, r3, #1
 8005606:	fa02 f303 	lsl.w	r3, r2, r3
 800560a:	69ba      	ldr	r2, [r7, #24]
 800560c:	4313      	orrs	r3, r2
 800560e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	69ba      	ldr	r2, [r7, #24]
 8005614:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800561e:	2b00      	cmp	r3, #0
 8005620:	f000 80e0 	beq.w	80057e4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005624:	4b2f      	ldr	r3, [pc, #188]	@ (80056e4 <HAL_GPIO_Init+0x238>)
 8005626:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800562a:	4a2e      	ldr	r2, [pc, #184]	@ (80056e4 <HAL_GPIO_Init+0x238>)
 800562c:	f043 0302 	orr.w	r3, r3, #2
 8005630:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005634:	4b2b      	ldr	r3, [pc, #172]	@ (80056e4 <HAL_GPIO_Init+0x238>)
 8005636:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800563a:	f003 0302 	and.w	r3, r3, #2
 800563e:	60fb      	str	r3, [r7, #12]
 8005640:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005642:	4a29      	ldr	r2, [pc, #164]	@ (80056e8 <HAL_GPIO_Init+0x23c>)
 8005644:	69fb      	ldr	r3, [r7, #28]
 8005646:	089b      	lsrs	r3, r3, #2
 8005648:	3302      	adds	r3, #2
 800564a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800564e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005650:	69fb      	ldr	r3, [r7, #28]
 8005652:	f003 0303 	and.w	r3, r3, #3
 8005656:	009b      	lsls	r3, r3, #2
 8005658:	220f      	movs	r2, #15
 800565a:	fa02 f303 	lsl.w	r3, r2, r3
 800565e:	43db      	mvns	r3, r3
 8005660:	69ba      	ldr	r2, [r7, #24]
 8005662:	4013      	ands	r3, r2
 8005664:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	4a20      	ldr	r2, [pc, #128]	@ (80056ec <HAL_GPIO_Init+0x240>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d052      	beq.n	8005714 <HAL_GPIO_Init+0x268>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	4a1f      	ldr	r2, [pc, #124]	@ (80056f0 <HAL_GPIO_Init+0x244>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d031      	beq.n	80056da <HAL_GPIO_Init+0x22e>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	4a1e      	ldr	r2, [pc, #120]	@ (80056f4 <HAL_GPIO_Init+0x248>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d02b      	beq.n	80056d6 <HAL_GPIO_Init+0x22a>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	4a1d      	ldr	r2, [pc, #116]	@ (80056f8 <HAL_GPIO_Init+0x24c>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d025      	beq.n	80056d2 <HAL_GPIO_Init+0x226>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	4a1c      	ldr	r2, [pc, #112]	@ (80056fc <HAL_GPIO_Init+0x250>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d01f      	beq.n	80056ce <HAL_GPIO_Init+0x222>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	4a1b      	ldr	r2, [pc, #108]	@ (8005700 <HAL_GPIO_Init+0x254>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d019      	beq.n	80056ca <HAL_GPIO_Init+0x21e>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	4a1a      	ldr	r2, [pc, #104]	@ (8005704 <HAL_GPIO_Init+0x258>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d013      	beq.n	80056c6 <HAL_GPIO_Init+0x21a>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	4a19      	ldr	r2, [pc, #100]	@ (8005708 <HAL_GPIO_Init+0x25c>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d00d      	beq.n	80056c2 <HAL_GPIO_Init+0x216>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	4a18      	ldr	r2, [pc, #96]	@ (800570c <HAL_GPIO_Init+0x260>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d007      	beq.n	80056be <HAL_GPIO_Init+0x212>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	4a17      	ldr	r2, [pc, #92]	@ (8005710 <HAL_GPIO_Init+0x264>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d101      	bne.n	80056ba <HAL_GPIO_Init+0x20e>
 80056b6:	2309      	movs	r3, #9
 80056b8:	e02d      	b.n	8005716 <HAL_GPIO_Init+0x26a>
 80056ba:	230a      	movs	r3, #10
 80056bc:	e02b      	b.n	8005716 <HAL_GPIO_Init+0x26a>
 80056be:	2308      	movs	r3, #8
 80056c0:	e029      	b.n	8005716 <HAL_GPIO_Init+0x26a>
 80056c2:	2307      	movs	r3, #7
 80056c4:	e027      	b.n	8005716 <HAL_GPIO_Init+0x26a>
 80056c6:	2306      	movs	r3, #6
 80056c8:	e025      	b.n	8005716 <HAL_GPIO_Init+0x26a>
 80056ca:	2305      	movs	r3, #5
 80056cc:	e023      	b.n	8005716 <HAL_GPIO_Init+0x26a>
 80056ce:	2304      	movs	r3, #4
 80056d0:	e021      	b.n	8005716 <HAL_GPIO_Init+0x26a>
 80056d2:	2303      	movs	r3, #3
 80056d4:	e01f      	b.n	8005716 <HAL_GPIO_Init+0x26a>
 80056d6:	2302      	movs	r3, #2
 80056d8:	e01d      	b.n	8005716 <HAL_GPIO_Init+0x26a>
 80056da:	2301      	movs	r3, #1
 80056dc:	e01b      	b.n	8005716 <HAL_GPIO_Init+0x26a>
 80056de:	bf00      	nop
 80056e0:	58000080 	.word	0x58000080
 80056e4:	58024400 	.word	0x58024400
 80056e8:	58000400 	.word	0x58000400
 80056ec:	58020000 	.word	0x58020000
 80056f0:	58020400 	.word	0x58020400
 80056f4:	58020800 	.word	0x58020800
 80056f8:	58020c00 	.word	0x58020c00
 80056fc:	58021000 	.word	0x58021000
 8005700:	58021400 	.word	0x58021400
 8005704:	58021800 	.word	0x58021800
 8005708:	58021c00 	.word	0x58021c00
 800570c:	58022000 	.word	0x58022000
 8005710:	58022400 	.word	0x58022400
 8005714:	2300      	movs	r3, #0
 8005716:	69fa      	ldr	r2, [r7, #28]
 8005718:	f002 0203 	and.w	r2, r2, #3
 800571c:	0092      	lsls	r2, r2, #2
 800571e:	4093      	lsls	r3, r2
 8005720:	69ba      	ldr	r2, [r7, #24]
 8005722:	4313      	orrs	r3, r2
 8005724:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005726:	4938      	ldr	r1, [pc, #224]	@ (8005808 <HAL_GPIO_Init+0x35c>)
 8005728:	69fb      	ldr	r3, [r7, #28]
 800572a:	089b      	lsrs	r3, r3, #2
 800572c:	3302      	adds	r3, #2
 800572e:	69ba      	ldr	r2, [r7, #24]
 8005730:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005734:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	43db      	mvns	r3, r3
 8005740:	69ba      	ldr	r2, [r7, #24]
 8005742:	4013      	ands	r3, r2
 8005744:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800574e:	2b00      	cmp	r3, #0
 8005750:	d003      	beq.n	800575a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005752:	69ba      	ldr	r2, [r7, #24]
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	4313      	orrs	r3, r2
 8005758:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800575a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800575e:	69bb      	ldr	r3, [r7, #24]
 8005760:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005762:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	43db      	mvns	r3, r3
 800576e:	69ba      	ldr	r2, [r7, #24]
 8005770:	4013      	ands	r3, r2
 8005772:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800577c:	2b00      	cmp	r3, #0
 800577e:	d003      	beq.n	8005788 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005780:	69ba      	ldr	r2, [r7, #24]
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	4313      	orrs	r3, r2
 8005786:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005788:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800578c:	69bb      	ldr	r3, [r7, #24]
 800578e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	43db      	mvns	r3, r3
 800579a:	69ba      	ldr	r2, [r7, #24]
 800579c:	4013      	ands	r3, r2
 800579e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d003      	beq.n	80057b4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80057ac:	69ba      	ldr	r2, [r7, #24]
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	4313      	orrs	r3, r2
 80057b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	69ba      	ldr	r2, [r7, #24]
 80057b8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	43db      	mvns	r3, r3
 80057c4:	69ba      	ldr	r2, [r7, #24]
 80057c6:	4013      	ands	r3, r2
 80057c8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d003      	beq.n	80057de <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80057d6:	69ba      	ldr	r2, [r7, #24]
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	4313      	orrs	r3, r2
 80057dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	69ba      	ldr	r2, [r7, #24]
 80057e2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80057e4:	69fb      	ldr	r3, [r7, #28]
 80057e6:	3301      	adds	r3, #1
 80057e8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	69fb      	ldr	r3, [r7, #28]
 80057f0:	fa22 f303 	lsr.w	r3, r2, r3
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	f47f ae63 	bne.w	80054c0 <HAL_GPIO_Init+0x14>
  }
}
 80057fa:	bf00      	nop
 80057fc:	bf00      	nop
 80057fe:	3724      	adds	r7, #36	@ 0x24
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr
 8005808:	58000400 	.word	0x58000400

0800580c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800580c:	b480      	push	{r7}
 800580e:	b083      	sub	sp, #12
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	460b      	mov	r3, r1
 8005816:	807b      	strh	r3, [r7, #2]
 8005818:	4613      	mov	r3, r2
 800581a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800581c:	787b      	ldrb	r3, [r7, #1]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d003      	beq.n	800582a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005822:	887a      	ldrh	r2, [r7, #2]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005828:	e003      	b.n	8005832 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800582a:	887b      	ldrh	r3, [r7, #2]
 800582c:	041a      	lsls	r2, r3, #16
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	619a      	str	r2, [r3, #24]
}
 8005832:	bf00      	nop
 8005834:	370c      	adds	r7, #12
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr
	...

08005840 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b082      	sub	sp, #8
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d101      	bne.n	8005852 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	e08b      	b.n	800596a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005858:	b2db      	uxtb	r3, r3
 800585a:	2b00      	cmp	r3, #0
 800585c:	d106      	bne.n	800586c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2200      	movs	r2, #0
 8005862:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f7fb fd38 	bl	80012dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2224      	movs	r2, #36	@ 0x24
 8005870:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f022 0201 	bic.w	r2, r2, #1
 8005882:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	685a      	ldr	r2, [r3, #4]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005890:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	689a      	ldr	r2, [r3, #8]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80058a0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	68db      	ldr	r3, [r3, #12]
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	d107      	bne.n	80058ba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	689a      	ldr	r2, [r3, #8]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80058b6:	609a      	str	r2, [r3, #8]
 80058b8:	e006      	b.n	80058c8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	689a      	ldr	r2, [r3, #8]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80058c6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	68db      	ldr	r3, [r3, #12]
 80058cc:	2b02      	cmp	r3, #2
 80058ce:	d108      	bne.n	80058e2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	685a      	ldr	r2, [r3, #4]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80058de:	605a      	str	r2, [r3, #4]
 80058e0:	e007      	b.n	80058f2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	685a      	ldr	r2, [r3, #4]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80058f0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	6859      	ldr	r1, [r3, #4]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	4b1d      	ldr	r3, [pc, #116]	@ (8005974 <HAL_I2C_Init+0x134>)
 80058fe:	430b      	orrs	r3, r1
 8005900:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	68da      	ldr	r2, [r3, #12]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005910:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	691a      	ldr	r2, [r3, #16]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	695b      	ldr	r3, [r3, #20]
 800591a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	699b      	ldr	r3, [r3, #24]
 8005922:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	430a      	orrs	r2, r1
 800592a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	69d9      	ldr	r1, [r3, #28]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6a1a      	ldr	r2, [r3, #32]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	430a      	orrs	r2, r1
 800593a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f042 0201 	orr.w	r2, r2, #1
 800594a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2220      	movs	r2, #32
 8005956:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2200      	movs	r2, #0
 800595e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2200      	movs	r2, #0
 8005964:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005968:	2300      	movs	r3, #0
}
 800596a:	4618      	mov	r0, r3
 800596c:	3708      	adds	r7, #8
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}
 8005972:	bf00      	nop
 8005974:	02008000 	.word	0x02008000

08005978 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005978:	b480      	push	{r7}
 800597a:	b083      	sub	sp, #12
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005988:	b2db      	uxtb	r3, r3
 800598a:	2b20      	cmp	r3, #32
 800598c:	d138      	bne.n	8005a00 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005994:	2b01      	cmp	r3, #1
 8005996:	d101      	bne.n	800599c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005998:	2302      	movs	r3, #2
 800599a:	e032      	b.n	8005a02 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2201      	movs	r2, #1
 80059a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2224      	movs	r2, #36	@ 0x24
 80059a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f022 0201 	bic.w	r2, r2, #1
 80059ba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	681a      	ldr	r2, [r3, #0]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80059ca:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	6819      	ldr	r1, [r3, #0]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	683a      	ldr	r2, [r7, #0]
 80059d8:	430a      	orrs	r2, r1
 80059da:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f042 0201 	orr.w	r2, r2, #1
 80059ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2220      	movs	r2, #32
 80059f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2200      	movs	r2, #0
 80059f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80059fc:	2300      	movs	r3, #0
 80059fe:	e000      	b.n	8005a02 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005a00:	2302      	movs	r3, #2
  }
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	370c      	adds	r7, #12
 8005a06:	46bd      	mov	sp, r7
 8005a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0c:	4770      	bx	lr

08005a0e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005a0e:	b480      	push	{r7}
 8005a10:	b085      	sub	sp, #20
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	6078      	str	r0, [r7, #4]
 8005a16:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a1e:	b2db      	uxtb	r3, r3
 8005a20:	2b20      	cmp	r3, #32
 8005a22:	d139      	bne.n	8005a98 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	d101      	bne.n	8005a32 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005a2e:	2302      	movs	r3, #2
 8005a30:	e033      	b.n	8005a9a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2201      	movs	r2, #1
 8005a36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2224      	movs	r2, #36	@ 0x24
 8005a3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f022 0201 	bic.w	r2, r2, #1
 8005a50:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005a60:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	021b      	lsls	r3, r3, #8
 8005a66:	68fa      	ldr	r2, [r7, #12]
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	68fa      	ldr	r2, [r7, #12]
 8005a72:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	681a      	ldr	r2, [r3, #0]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f042 0201 	orr.w	r2, r2, #1
 8005a82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2220      	movs	r2, #32
 8005a88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005a94:	2300      	movs	r3, #0
 8005a96:	e000      	b.n	8005a9a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005a98:	2302      	movs	r3, #2
  }
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3714      	adds	r7, #20
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa4:	4770      	bx	lr
	...

08005aa8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b084      	sub	sp, #16
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005ab0:	4b19      	ldr	r3, [pc, #100]	@ (8005b18 <HAL_PWREx_ConfigSupply+0x70>)
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	f003 0304 	and.w	r3, r3, #4
 8005ab8:	2b04      	cmp	r3, #4
 8005aba:	d00a      	beq.n	8005ad2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005abc:	4b16      	ldr	r3, [pc, #88]	@ (8005b18 <HAL_PWREx_ConfigSupply+0x70>)
 8005abe:	68db      	ldr	r3, [r3, #12]
 8005ac0:	f003 0307 	and.w	r3, r3, #7
 8005ac4:	687a      	ldr	r2, [r7, #4]
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	d001      	beq.n	8005ace <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	e01f      	b.n	8005b0e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	e01d      	b.n	8005b0e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005ad2:	4b11      	ldr	r3, [pc, #68]	@ (8005b18 <HAL_PWREx_ConfigSupply+0x70>)
 8005ad4:	68db      	ldr	r3, [r3, #12]
 8005ad6:	f023 0207 	bic.w	r2, r3, #7
 8005ada:	490f      	ldr	r1, [pc, #60]	@ (8005b18 <HAL_PWREx_ConfigSupply+0x70>)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005ae2:	f7fc f883 	bl	8001bec <HAL_GetTick>
 8005ae6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005ae8:	e009      	b.n	8005afe <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005aea:	f7fc f87f 	bl	8001bec <HAL_GetTick>
 8005aee:	4602      	mov	r2, r0
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	1ad3      	subs	r3, r2, r3
 8005af4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005af8:	d901      	bls.n	8005afe <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005afa:	2301      	movs	r3, #1
 8005afc:	e007      	b.n	8005b0e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005afe:	4b06      	ldr	r3, [pc, #24]	@ (8005b18 <HAL_PWREx_ConfigSupply+0x70>)
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005b06:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b0a:	d1ee      	bne.n	8005aea <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005b0c:	2300      	movs	r3, #0
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3710      	adds	r7, #16
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}
 8005b16:	bf00      	nop
 8005b18:	58024800 	.word	0x58024800

08005b1c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b08c      	sub	sp, #48	@ 0x30
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d102      	bne.n	8005b30 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	f000 bc48 	b.w	80063c0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f003 0301 	and.w	r3, r3, #1
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	f000 8088 	beq.w	8005c4e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b3e:	4b99      	ldr	r3, [pc, #612]	@ (8005da4 <HAL_RCC_OscConfig+0x288>)
 8005b40:	691b      	ldr	r3, [r3, #16]
 8005b42:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005b46:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005b48:	4b96      	ldr	r3, [pc, #600]	@ (8005da4 <HAL_RCC_OscConfig+0x288>)
 8005b4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b4c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005b4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b50:	2b10      	cmp	r3, #16
 8005b52:	d007      	beq.n	8005b64 <HAL_RCC_OscConfig+0x48>
 8005b54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b56:	2b18      	cmp	r3, #24
 8005b58:	d111      	bne.n	8005b7e <HAL_RCC_OscConfig+0x62>
 8005b5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b5c:	f003 0303 	and.w	r3, r3, #3
 8005b60:	2b02      	cmp	r3, #2
 8005b62:	d10c      	bne.n	8005b7e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b64:	4b8f      	ldr	r3, [pc, #572]	@ (8005da4 <HAL_RCC_OscConfig+0x288>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d06d      	beq.n	8005c4c <HAL_RCC_OscConfig+0x130>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d169      	bne.n	8005c4c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005b78:	2301      	movs	r3, #1
 8005b7a:	f000 bc21 	b.w	80063c0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b86:	d106      	bne.n	8005b96 <HAL_RCC_OscConfig+0x7a>
 8005b88:	4b86      	ldr	r3, [pc, #536]	@ (8005da4 <HAL_RCC_OscConfig+0x288>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a85      	ldr	r2, [pc, #532]	@ (8005da4 <HAL_RCC_OscConfig+0x288>)
 8005b8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b92:	6013      	str	r3, [r2, #0]
 8005b94:	e02e      	b.n	8005bf4 <HAL_RCC_OscConfig+0xd8>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d10c      	bne.n	8005bb8 <HAL_RCC_OscConfig+0x9c>
 8005b9e:	4b81      	ldr	r3, [pc, #516]	@ (8005da4 <HAL_RCC_OscConfig+0x288>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a80      	ldr	r2, [pc, #512]	@ (8005da4 <HAL_RCC_OscConfig+0x288>)
 8005ba4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ba8:	6013      	str	r3, [r2, #0]
 8005baa:	4b7e      	ldr	r3, [pc, #504]	@ (8005da4 <HAL_RCC_OscConfig+0x288>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a7d      	ldr	r2, [pc, #500]	@ (8005da4 <HAL_RCC_OscConfig+0x288>)
 8005bb0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005bb4:	6013      	str	r3, [r2, #0]
 8005bb6:	e01d      	b.n	8005bf4 <HAL_RCC_OscConfig+0xd8>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005bc0:	d10c      	bne.n	8005bdc <HAL_RCC_OscConfig+0xc0>
 8005bc2:	4b78      	ldr	r3, [pc, #480]	@ (8005da4 <HAL_RCC_OscConfig+0x288>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a77      	ldr	r2, [pc, #476]	@ (8005da4 <HAL_RCC_OscConfig+0x288>)
 8005bc8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005bcc:	6013      	str	r3, [r2, #0]
 8005bce:	4b75      	ldr	r3, [pc, #468]	@ (8005da4 <HAL_RCC_OscConfig+0x288>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a74      	ldr	r2, [pc, #464]	@ (8005da4 <HAL_RCC_OscConfig+0x288>)
 8005bd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005bd8:	6013      	str	r3, [r2, #0]
 8005bda:	e00b      	b.n	8005bf4 <HAL_RCC_OscConfig+0xd8>
 8005bdc:	4b71      	ldr	r3, [pc, #452]	@ (8005da4 <HAL_RCC_OscConfig+0x288>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a70      	ldr	r2, [pc, #448]	@ (8005da4 <HAL_RCC_OscConfig+0x288>)
 8005be2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005be6:	6013      	str	r3, [r2, #0]
 8005be8:	4b6e      	ldr	r3, [pc, #440]	@ (8005da4 <HAL_RCC_OscConfig+0x288>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a6d      	ldr	r2, [pc, #436]	@ (8005da4 <HAL_RCC_OscConfig+0x288>)
 8005bee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005bf2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d013      	beq.n	8005c24 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bfc:	f7fb fff6 	bl	8001bec <HAL_GetTick>
 8005c00:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005c02:	e008      	b.n	8005c16 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c04:	f7fb fff2 	bl	8001bec <HAL_GetTick>
 8005c08:	4602      	mov	r2, r0
 8005c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c0c:	1ad3      	subs	r3, r2, r3
 8005c0e:	2b64      	cmp	r3, #100	@ 0x64
 8005c10:	d901      	bls.n	8005c16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005c12:	2303      	movs	r3, #3
 8005c14:	e3d4      	b.n	80063c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005c16:	4b63      	ldr	r3, [pc, #396]	@ (8005da4 <HAL_RCC_OscConfig+0x288>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d0f0      	beq.n	8005c04 <HAL_RCC_OscConfig+0xe8>
 8005c22:	e014      	b.n	8005c4e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c24:	f7fb ffe2 	bl	8001bec <HAL_GetTick>
 8005c28:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005c2a:	e008      	b.n	8005c3e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c2c:	f7fb ffde 	bl	8001bec <HAL_GetTick>
 8005c30:	4602      	mov	r2, r0
 8005c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c34:	1ad3      	subs	r3, r2, r3
 8005c36:	2b64      	cmp	r3, #100	@ 0x64
 8005c38:	d901      	bls.n	8005c3e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005c3a:	2303      	movs	r3, #3
 8005c3c:	e3c0      	b.n	80063c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005c3e:	4b59      	ldr	r3, [pc, #356]	@ (8005da4 <HAL_RCC_OscConfig+0x288>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d1f0      	bne.n	8005c2c <HAL_RCC_OscConfig+0x110>
 8005c4a:	e000      	b.n	8005c4e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f003 0302 	and.w	r3, r3, #2
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	f000 80ca 	beq.w	8005df0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c5c:	4b51      	ldr	r3, [pc, #324]	@ (8005da4 <HAL_RCC_OscConfig+0x288>)
 8005c5e:	691b      	ldr	r3, [r3, #16]
 8005c60:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005c64:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005c66:	4b4f      	ldr	r3, [pc, #316]	@ (8005da4 <HAL_RCC_OscConfig+0x288>)
 8005c68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c6a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005c6c:	6a3b      	ldr	r3, [r7, #32]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d007      	beq.n	8005c82 <HAL_RCC_OscConfig+0x166>
 8005c72:	6a3b      	ldr	r3, [r7, #32]
 8005c74:	2b18      	cmp	r3, #24
 8005c76:	d156      	bne.n	8005d26 <HAL_RCC_OscConfig+0x20a>
 8005c78:	69fb      	ldr	r3, [r7, #28]
 8005c7a:	f003 0303 	and.w	r3, r3, #3
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d151      	bne.n	8005d26 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005c82:	4b48      	ldr	r3, [pc, #288]	@ (8005da4 <HAL_RCC_OscConfig+0x288>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f003 0304 	and.w	r3, r3, #4
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d005      	beq.n	8005c9a <HAL_RCC_OscConfig+0x17e>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	68db      	ldr	r3, [r3, #12]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d101      	bne.n	8005c9a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8005c96:	2301      	movs	r3, #1
 8005c98:	e392      	b.n	80063c0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005c9a:	4b42      	ldr	r3, [pc, #264]	@ (8005da4 <HAL_RCC_OscConfig+0x288>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f023 0219 	bic.w	r2, r3, #25
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	68db      	ldr	r3, [r3, #12]
 8005ca6:	493f      	ldr	r1, [pc, #252]	@ (8005da4 <HAL_RCC_OscConfig+0x288>)
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cac:	f7fb ff9e 	bl	8001bec <HAL_GetTick>
 8005cb0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005cb2:	e008      	b.n	8005cc6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005cb4:	f7fb ff9a 	bl	8001bec <HAL_GetTick>
 8005cb8:	4602      	mov	r2, r0
 8005cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cbc:	1ad3      	subs	r3, r2, r3
 8005cbe:	2b02      	cmp	r3, #2
 8005cc0:	d901      	bls.n	8005cc6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005cc2:	2303      	movs	r3, #3
 8005cc4:	e37c      	b.n	80063c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005cc6:	4b37      	ldr	r3, [pc, #220]	@ (8005da4 <HAL_RCC_OscConfig+0x288>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f003 0304 	and.w	r3, r3, #4
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d0f0      	beq.n	8005cb4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cd2:	f7fb ff97 	bl	8001c04 <HAL_GetREVID>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d817      	bhi.n	8005d10 <HAL_RCC_OscConfig+0x1f4>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	691b      	ldr	r3, [r3, #16]
 8005ce4:	2b40      	cmp	r3, #64	@ 0x40
 8005ce6:	d108      	bne.n	8005cfa <HAL_RCC_OscConfig+0x1de>
 8005ce8:	4b2e      	ldr	r3, [pc, #184]	@ (8005da4 <HAL_RCC_OscConfig+0x288>)
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005cf0:	4a2c      	ldr	r2, [pc, #176]	@ (8005da4 <HAL_RCC_OscConfig+0x288>)
 8005cf2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005cf6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005cf8:	e07a      	b.n	8005df0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cfa:	4b2a      	ldr	r3, [pc, #168]	@ (8005da4 <HAL_RCC_OscConfig+0x288>)
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	691b      	ldr	r3, [r3, #16]
 8005d06:	031b      	lsls	r3, r3, #12
 8005d08:	4926      	ldr	r1, [pc, #152]	@ (8005da4 <HAL_RCC_OscConfig+0x288>)
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005d0e:	e06f      	b.n	8005df0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d10:	4b24      	ldr	r3, [pc, #144]	@ (8005da4 <HAL_RCC_OscConfig+0x288>)
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	691b      	ldr	r3, [r3, #16]
 8005d1c:	061b      	lsls	r3, r3, #24
 8005d1e:	4921      	ldr	r1, [pc, #132]	@ (8005da4 <HAL_RCC_OscConfig+0x288>)
 8005d20:	4313      	orrs	r3, r2
 8005d22:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005d24:	e064      	b.n	8005df0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	68db      	ldr	r3, [r3, #12]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d047      	beq.n	8005dbe <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005d2e:	4b1d      	ldr	r3, [pc, #116]	@ (8005da4 <HAL_RCC_OscConfig+0x288>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f023 0219 	bic.w	r2, r3, #25
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	68db      	ldr	r3, [r3, #12]
 8005d3a:	491a      	ldr	r1, [pc, #104]	@ (8005da4 <HAL_RCC_OscConfig+0x288>)
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d40:	f7fb ff54 	bl	8001bec <HAL_GetTick>
 8005d44:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005d46:	e008      	b.n	8005d5a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d48:	f7fb ff50 	bl	8001bec <HAL_GetTick>
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d50:	1ad3      	subs	r3, r2, r3
 8005d52:	2b02      	cmp	r3, #2
 8005d54:	d901      	bls.n	8005d5a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8005d56:	2303      	movs	r3, #3
 8005d58:	e332      	b.n	80063c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005d5a:	4b12      	ldr	r3, [pc, #72]	@ (8005da4 <HAL_RCC_OscConfig+0x288>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f003 0304 	and.w	r3, r3, #4
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d0f0      	beq.n	8005d48 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d66:	f7fb ff4d 	bl	8001c04 <HAL_GetREVID>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d819      	bhi.n	8005da8 <HAL_RCC_OscConfig+0x28c>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	691b      	ldr	r3, [r3, #16]
 8005d78:	2b40      	cmp	r3, #64	@ 0x40
 8005d7a:	d108      	bne.n	8005d8e <HAL_RCC_OscConfig+0x272>
 8005d7c:	4b09      	ldr	r3, [pc, #36]	@ (8005da4 <HAL_RCC_OscConfig+0x288>)
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005d84:	4a07      	ldr	r2, [pc, #28]	@ (8005da4 <HAL_RCC_OscConfig+0x288>)
 8005d86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d8a:	6053      	str	r3, [r2, #4]
 8005d8c:	e030      	b.n	8005df0 <HAL_RCC_OscConfig+0x2d4>
 8005d8e:	4b05      	ldr	r3, [pc, #20]	@ (8005da4 <HAL_RCC_OscConfig+0x288>)
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	691b      	ldr	r3, [r3, #16]
 8005d9a:	031b      	lsls	r3, r3, #12
 8005d9c:	4901      	ldr	r1, [pc, #4]	@ (8005da4 <HAL_RCC_OscConfig+0x288>)
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	604b      	str	r3, [r1, #4]
 8005da2:	e025      	b.n	8005df0 <HAL_RCC_OscConfig+0x2d4>
 8005da4:	58024400 	.word	0x58024400
 8005da8:	4b9a      	ldr	r3, [pc, #616]	@ (8006014 <HAL_RCC_OscConfig+0x4f8>)
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	691b      	ldr	r3, [r3, #16]
 8005db4:	061b      	lsls	r3, r3, #24
 8005db6:	4997      	ldr	r1, [pc, #604]	@ (8006014 <HAL_RCC_OscConfig+0x4f8>)
 8005db8:	4313      	orrs	r3, r2
 8005dba:	604b      	str	r3, [r1, #4]
 8005dbc:	e018      	b.n	8005df0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005dbe:	4b95      	ldr	r3, [pc, #596]	@ (8006014 <HAL_RCC_OscConfig+0x4f8>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a94      	ldr	r2, [pc, #592]	@ (8006014 <HAL_RCC_OscConfig+0x4f8>)
 8005dc4:	f023 0301 	bic.w	r3, r3, #1
 8005dc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dca:	f7fb ff0f 	bl	8001bec <HAL_GetTick>
 8005dce:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005dd0:	e008      	b.n	8005de4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005dd2:	f7fb ff0b 	bl	8001bec <HAL_GetTick>
 8005dd6:	4602      	mov	r2, r0
 8005dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dda:	1ad3      	subs	r3, r2, r3
 8005ddc:	2b02      	cmp	r3, #2
 8005dde:	d901      	bls.n	8005de4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005de0:	2303      	movs	r3, #3
 8005de2:	e2ed      	b.n	80063c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005de4:	4b8b      	ldr	r3, [pc, #556]	@ (8006014 <HAL_RCC_OscConfig+0x4f8>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f003 0304 	and.w	r3, r3, #4
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d1f0      	bne.n	8005dd2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f003 0310 	and.w	r3, r3, #16
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	f000 80a9 	beq.w	8005f50 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005dfe:	4b85      	ldr	r3, [pc, #532]	@ (8006014 <HAL_RCC_OscConfig+0x4f8>)
 8005e00:	691b      	ldr	r3, [r3, #16]
 8005e02:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005e06:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005e08:	4b82      	ldr	r3, [pc, #520]	@ (8006014 <HAL_RCC_OscConfig+0x4f8>)
 8005e0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e0c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005e0e:	69bb      	ldr	r3, [r7, #24]
 8005e10:	2b08      	cmp	r3, #8
 8005e12:	d007      	beq.n	8005e24 <HAL_RCC_OscConfig+0x308>
 8005e14:	69bb      	ldr	r3, [r7, #24]
 8005e16:	2b18      	cmp	r3, #24
 8005e18:	d13a      	bne.n	8005e90 <HAL_RCC_OscConfig+0x374>
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	f003 0303 	and.w	r3, r3, #3
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	d135      	bne.n	8005e90 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005e24:	4b7b      	ldr	r3, [pc, #492]	@ (8006014 <HAL_RCC_OscConfig+0x4f8>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d005      	beq.n	8005e3c <HAL_RCC_OscConfig+0x320>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	69db      	ldr	r3, [r3, #28]
 8005e34:	2b80      	cmp	r3, #128	@ 0x80
 8005e36:	d001      	beq.n	8005e3c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	e2c1      	b.n	80063c0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005e3c:	f7fb fee2 	bl	8001c04 <HAL_GetREVID>
 8005e40:	4603      	mov	r3, r0
 8005e42:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d817      	bhi.n	8005e7a <HAL_RCC_OscConfig+0x35e>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6a1b      	ldr	r3, [r3, #32]
 8005e4e:	2b20      	cmp	r3, #32
 8005e50:	d108      	bne.n	8005e64 <HAL_RCC_OscConfig+0x348>
 8005e52:	4b70      	ldr	r3, [pc, #448]	@ (8006014 <HAL_RCC_OscConfig+0x4f8>)
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005e5a:	4a6e      	ldr	r2, [pc, #440]	@ (8006014 <HAL_RCC_OscConfig+0x4f8>)
 8005e5c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005e60:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005e62:	e075      	b.n	8005f50 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005e64:	4b6b      	ldr	r3, [pc, #428]	@ (8006014 <HAL_RCC_OscConfig+0x4f8>)
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6a1b      	ldr	r3, [r3, #32]
 8005e70:	069b      	lsls	r3, r3, #26
 8005e72:	4968      	ldr	r1, [pc, #416]	@ (8006014 <HAL_RCC_OscConfig+0x4f8>)
 8005e74:	4313      	orrs	r3, r2
 8005e76:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005e78:	e06a      	b.n	8005f50 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005e7a:	4b66      	ldr	r3, [pc, #408]	@ (8006014 <HAL_RCC_OscConfig+0x4f8>)
 8005e7c:	68db      	ldr	r3, [r3, #12]
 8005e7e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6a1b      	ldr	r3, [r3, #32]
 8005e86:	061b      	lsls	r3, r3, #24
 8005e88:	4962      	ldr	r1, [pc, #392]	@ (8006014 <HAL_RCC_OscConfig+0x4f8>)
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005e8e:	e05f      	b.n	8005f50 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	69db      	ldr	r3, [r3, #28]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d042      	beq.n	8005f1e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005e98:	4b5e      	ldr	r3, [pc, #376]	@ (8006014 <HAL_RCC_OscConfig+0x4f8>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a5d      	ldr	r2, [pc, #372]	@ (8006014 <HAL_RCC_OscConfig+0x4f8>)
 8005e9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ea2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ea4:	f7fb fea2 	bl	8001bec <HAL_GetTick>
 8005ea8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005eaa:	e008      	b.n	8005ebe <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005eac:	f7fb fe9e 	bl	8001bec <HAL_GetTick>
 8005eb0:	4602      	mov	r2, r0
 8005eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eb4:	1ad3      	subs	r3, r2, r3
 8005eb6:	2b02      	cmp	r3, #2
 8005eb8:	d901      	bls.n	8005ebe <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005eba:	2303      	movs	r3, #3
 8005ebc:	e280      	b.n	80063c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005ebe:	4b55      	ldr	r3, [pc, #340]	@ (8006014 <HAL_RCC_OscConfig+0x4f8>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d0f0      	beq.n	8005eac <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005eca:	f7fb fe9b 	bl	8001c04 <HAL_GetREVID>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d817      	bhi.n	8005f08 <HAL_RCC_OscConfig+0x3ec>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6a1b      	ldr	r3, [r3, #32]
 8005edc:	2b20      	cmp	r3, #32
 8005ede:	d108      	bne.n	8005ef2 <HAL_RCC_OscConfig+0x3d6>
 8005ee0:	4b4c      	ldr	r3, [pc, #304]	@ (8006014 <HAL_RCC_OscConfig+0x4f8>)
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005ee8:	4a4a      	ldr	r2, [pc, #296]	@ (8006014 <HAL_RCC_OscConfig+0x4f8>)
 8005eea:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005eee:	6053      	str	r3, [r2, #4]
 8005ef0:	e02e      	b.n	8005f50 <HAL_RCC_OscConfig+0x434>
 8005ef2:	4b48      	ldr	r3, [pc, #288]	@ (8006014 <HAL_RCC_OscConfig+0x4f8>)
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6a1b      	ldr	r3, [r3, #32]
 8005efe:	069b      	lsls	r3, r3, #26
 8005f00:	4944      	ldr	r1, [pc, #272]	@ (8006014 <HAL_RCC_OscConfig+0x4f8>)
 8005f02:	4313      	orrs	r3, r2
 8005f04:	604b      	str	r3, [r1, #4]
 8005f06:	e023      	b.n	8005f50 <HAL_RCC_OscConfig+0x434>
 8005f08:	4b42      	ldr	r3, [pc, #264]	@ (8006014 <HAL_RCC_OscConfig+0x4f8>)
 8005f0a:	68db      	ldr	r3, [r3, #12]
 8005f0c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6a1b      	ldr	r3, [r3, #32]
 8005f14:	061b      	lsls	r3, r3, #24
 8005f16:	493f      	ldr	r1, [pc, #252]	@ (8006014 <HAL_RCC_OscConfig+0x4f8>)
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	60cb      	str	r3, [r1, #12]
 8005f1c:	e018      	b.n	8005f50 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005f1e:	4b3d      	ldr	r3, [pc, #244]	@ (8006014 <HAL_RCC_OscConfig+0x4f8>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a3c      	ldr	r2, [pc, #240]	@ (8006014 <HAL_RCC_OscConfig+0x4f8>)
 8005f24:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005f28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f2a:	f7fb fe5f 	bl	8001bec <HAL_GetTick>
 8005f2e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005f30:	e008      	b.n	8005f44 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005f32:	f7fb fe5b 	bl	8001bec <HAL_GetTick>
 8005f36:	4602      	mov	r2, r0
 8005f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f3a:	1ad3      	subs	r3, r2, r3
 8005f3c:	2b02      	cmp	r3, #2
 8005f3e:	d901      	bls.n	8005f44 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005f40:	2303      	movs	r3, #3
 8005f42:	e23d      	b.n	80063c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005f44:	4b33      	ldr	r3, [pc, #204]	@ (8006014 <HAL_RCC_OscConfig+0x4f8>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d1f0      	bne.n	8005f32 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f003 0308 	and.w	r3, r3, #8
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d036      	beq.n	8005fca <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	695b      	ldr	r3, [r3, #20]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d019      	beq.n	8005f98 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f64:	4b2b      	ldr	r3, [pc, #172]	@ (8006014 <HAL_RCC_OscConfig+0x4f8>)
 8005f66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f68:	4a2a      	ldr	r2, [pc, #168]	@ (8006014 <HAL_RCC_OscConfig+0x4f8>)
 8005f6a:	f043 0301 	orr.w	r3, r3, #1
 8005f6e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f70:	f7fb fe3c 	bl	8001bec <HAL_GetTick>
 8005f74:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005f76:	e008      	b.n	8005f8a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f78:	f7fb fe38 	bl	8001bec <HAL_GetTick>
 8005f7c:	4602      	mov	r2, r0
 8005f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f80:	1ad3      	subs	r3, r2, r3
 8005f82:	2b02      	cmp	r3, #2
 8005f84:	d901      	bls.n	8005f8a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005f86:	2303      	movs	r3, #3
 8005f88:	e21a      	b.n	80063c0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005f8a:	4b22      	ldr	r3, [pc, #136]	@ (8006014 <HAL_RCC_OscConfig+0x4f8>)
 8005f8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f8e:	f003 0302 	and.w	r3, r3, #2
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d0f0      	beq.n	8005f78 <HAL_RCC_OscConfig+0x45c>
 8005f96:	e018      	b.n	8005fca <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f98:	4b1e      	ldr	r3, [pc, #120]	@ (8006014 <HAL_RCC_OscConfig+0x4f8>)
 8005f9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f9c:	4a1d      	ldr	r2, [pc, #116]	@ (8006014 <HAL_RCC_OscConfig+0x4f8>)
 8005f9e:	f023 0301 	bic.w	r3, r3, #1
 8005fa2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fa4:	f7fb fe22 	bl	8001bec <HAL_GetTick>
 8005fa8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005faa:	e008      	b.n	8005fbe <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005fac:	f7fb fe1e 	bl	8001bec <HAL_GetTick>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fb4:	1ad3      	subs	r3, r2, r3
 8005fb6:	2b02      	cmp	r3, #2
 8005fb8:	d901      	bls.n	8005fbe <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005fba:	2303      	movs	r3, #3
 8005fbc:	e200      	b.n	80063c0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005fbe:	4b15      	ldr	r3, [pc, #84]	@ (8006014 <HAL_RCC_OscConfig+0x4f8>)
 8005fc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005fc2:	f003 0302 	and.w	r3, r3, #2
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d1f0      	bne.n	8005fac <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f003 0320 	and.w	r3, r3, #32
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d039      	beq.n	800604a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	699b      	ldr	r3, [r3, #24]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d01c      	beq.n	8006018 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005fde:	4b0d      	ldr	r3, [pc, #52]	@ (8006014 <HAL_RCC_OscConfig+0x4f8>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a0c      	ldr	r2, [pc, #48]	@ (8006014 <HAL_RCC_OscConfig+0x4f8>)
 8005fe4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005fe8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005fea:	f7fb fdff 	bl	8001bec <HAL_GetTick>
 8005fee:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005ff0:	e008      	b.n	8006004 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005ff2:	f7fb fdfb 	bl	8001bec <HAL_GetTick>
 8005ff6:	4602      	mov	r2, r0
 8005ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ffa:	1ad3      	subs	r3, r2, r3
 8005ffc:	2b02      	cmp	r3, #2
 8005ffe:	d901      	bls.n	8006004 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006000:	2303      	movs	r3, #3
 8006002:	e1dd      	b.n	80063c0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006004:	4b03      	ldr	r3, [pc, #12]	@ (8006014 <HAL_RCC_OscConfig+0x4f8>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800600c:	2b00      	cmp	r3, #0
 800600e:	d0f0      	beq.n	8005ff2 <HAL_RCC_OscConfig+0x4d6>
 8006010:	e01b      	b.n	800604a <HAL_RCC_OscConfig+0x52e>
 8006012:	bf00      	nop
 8006014:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006018:	4b9b      	ldr	r3, [pc, #620]	@ (8006288 <HAL_RCC_OscConfig+0x76c>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a9a      	ldr	r2, [pc, #616]	@ (8006288 <HAL_RCC_OscConfig+0x76c>)
 800601e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006022:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006024:	f7fb fde2 	bl	8001bec <HAL_GetTick>
 8006028:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800602a:	e008      	b.n	800603e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800602c:	f7fb fdde 	bl	8001bec <HAL_GetTick>
 8006030:	4602      	mov	r2, r0
 8006032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006034:	1ad3      	subs	r3, r2, r3
 8006036:	2b02      	cmp	r3, #2
 8006038:	d901      	bls.n	800603e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800603a:	2303      	movs	r3, #3
 800603c:	e1c0      	b.n	80063c0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800603e:	4b92      	ldr	r3, [pc, #584]	@ (8006288 <HAL_RCC_OscConfig+0x76c>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006046:	2b00      	cmp	r3, #0
 8006048:	d1f0      	bne.n	800602c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f003 0304 	and.w	r3, r3, #4
 8006052:	2b00      	cmp	r3, #0
 8006054:	f000 8081 	beq.w	800615a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006058:	4b8c      	ldr	r3, [pc, #560]	@ (800628c <HAL_RCC_OscConfig+0x770>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a8b      	ldr	r2, [pc, #556]	@ (800628c <HAL_RCC_OscConfig+0x770>)
 800605e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006062:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006064:	f7fb fdc2 	bl	8001bec <HAL_GetTick>
 8006068:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800606a:	e008      	b.n	800607e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800606c:	f7fb fdbe 	bl	8001bec <HAL_GetTick>
 8006070:	4602      	mov	r2, r0
 8006072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006074:	1ad3      	subs	r3, r2, r3
 8006076:	2b64      	cmp	r3, #100	@ 0x64
 8006078:	d901      	bls.n	800607e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800607a:	2303      	movs	r3, #3
 800607c:	e1a0      	b.n	80063c0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800607e:	4b83      	ldr	r3, [pc, #524]	@ (800628c <HAL_RCC_OscConfig+0x770>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006086:	2b00      	cmp	r3, #0
 8006088:	d0f0      	beq.n	800606c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	689b      	ldr	r3, [r3, #8]
 800608e:	2b01      	cmp	r3, #1
 8006090:	d106      	bne.n	80060a0 <HAL_RCC_OscConfig+0x584>
 8006092:	4b7d      	ldr	r3, [pc, #500]	@ (8006288 <HAL_RCC_OscConfig+0x76c>)
 8006094:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006096:	4a7c      	ldr	r2, [pc, #496]	@ (8006288 <HAL_RCC_OscConfig+0x76c>)
 8006098:	f043 0301 	orr.w	r3, r3, #1
 800609c:	6713      	str	r3, [r2, #112]	@ 0x70
 800609e:	e02d      	b.n	80060fc <HAL_RCC_OscConfig+0x5e0>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d10c      	bne.n	80060c2 <HAL_RCC_OscConfig+0x5a6>
 80060a8:	4b77      	ldr	r3, [pc, #476]	@ (8006288 <HAL_RCC_OscConfig+0x76c>)
 80060aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060ac:	4a76      	ldr	r2, [pc, #472]	@ (8006288 <HAL_RCC_OscConfig+0x76c>)
 80060ae:	f023 0301 	bic.w	r3, r3, #1
 80060b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80060b4:	4b74      	ldr	r3, [pc, #464]	@ (8006288 <HAL_RCC_OscConfig+0x76c>)
 80060b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060b8:	4a73      	ldr	r2, [pc, #460]	@ (8006288 <HAL_RCC_OscConfig+0x76c>)
 80060ba:	f023 0304 	bic.w	r3, r3, #4
 80060be:	6713      	str	r3, [r2, #112]	@ 0x70
 80060c0:	e01c      	b.n	80060fc <HAL_RCC_OscConfig+0x5e0>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	689b      	ldr	r3, [r3, #8]
 80060c6:	2b05      	cmp	r3, #5
 80060c8:	d10c      	bne.n	80060e4 <HAL_RCC_OscConfig+0x5c8>
 80060ca:	4b6f      	ldr	r3, [pc, #444]	@ (8006288 <HAL_RCC_OscConfig+0x76c>)
 80060cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060ce:	4a6e      	ldr	r2, [pc, #440]	@ (8006288 <HAL_RCC_OscConfig+0x76c>)
 80060d0:	f043 0304 	orr.w	r3, r3, #4
 80060d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80060d6:	4b6c      	ldr	r3, [pc, #432]	@ (8006288 <HAL_RCC_OscConfig+0x76c>)
 80060d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060da:	4a6b      	ldr	r2, [pc, #428]	@ (8006288 <HAL_RCC_OscConfig+0x76c>)
 80060dc:	f043 0301 	orr.w	r3, r3, #1
 80060e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80060e2:	e00b      	b.n	80060fc <HAL_RCC_OscConfig+0x5e0>
 80060e4:	4b68      	ldr	r3, [pc, #416]	@ (8006288 <HAL_RCC_OscConfig+0x76c>)
 80060e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060e8:	4a67      	ldr	r2, [pc, #412]	@ (8006288 <HAL_RCC_OscConfig+0x76c>)
 80060ea:	f023 0301 	bic.w	r3, r3, #1
 80060ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80060f0:	4b65      	ldr	r3, [pc, #404]	@ (8006288 <HAL_RCC_OscConfig+0x76c>)
 80060f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060f4:	4a64      	ldr	r2, [pc, #400]	@ (8006288 <HAL_RCC_OscConfig+0x76c>)
 80060f6:	f023 0304 	bic.w	r3, r3, #4
 80060fa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	689b      	ldr	r3, [r3, #8]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d015      	beq.n	8006130 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006104:	f7fb fd72 	bl	8001bec <HAL_GetTick>
 8006108:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800610a:	e00a      	b.n	8006122 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800610c:	f7fb fd6e 	bl	8001bec <HAL_GetTick>
 8006110:	4602      	mov	r2, r0
 8006112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006114:	1ad3      	subs	r3, r2, r3
 8006116:	f241 3288 	movw	r2, #5000	@ 0x1388
 800611a:	4293      	cmp	r3, r2
 800611c:	d901      	bls.n	8006122 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800611e:	2303      	movs	r3, #3
 8006120:	e14e      	b.n	80063c0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006122:	4b59      	ldr	r3, [pc, #356]	@ (8006288 <HAL_RCC_OscConfig+0x76c>)
 8006124:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006126:	f003 0302 	and.w	r3, r3, #2
 800612a:	2b00      	cmp	r3, #0
 800612c:	d0ee      	beq.n	800610c <HAL_RCC_OscConfig+0x5f0>
 800612e:	e014      	b.n	800615a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006130:	f7fb fd5c 	bl	8001bec <HAL_GetTick>
 8006134:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006136:	e00a      	b.n	800614e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006138:	f7fb fd58 	bl	8001bec <HAL_GetTick>
 800613c:	4602      	mov	r2, r0
 800613e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006140:	1ad3      	subs	r3, r2, r3
 8006142:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006146:	4293      	cmp	r3, r2
 8006148:	d901      	bls.n	800614e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800614a:	2303      	movs	r3, #3
 800614c:	e138      	b.n	80063c0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800614e:	4b4e      	ldr	r3, [pc, #312]	@ (8006288 <HAL_RCC_OscConfig+0x76c>)
 8006150:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006152:	f003 0302 	and.w	r3, r3, #2
 8006156:	2b00      	cmp	r3, #0
 8006158:	d1ee      	bne.n	8006138 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800615e:	2b00      	cmp	r3, #0
 8006160:	f000 812d 	beq.w	80063be <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006164:	4b48      	ldr	r3, [pc, #288]	@ (8006288 <HAL_RCC_OscConfig+0x76c>)
 8006166:	691b      	ldr	r3, [r3, #16]
 8006168:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800616c:	2b18      	cmp	r3, #24
 800616e:	f000 80bd 	beq.w	80062ec <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006176:	2b02      	cmp	r3, #2
 8006178:	f040 809e 	bne.w	80062b8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800617c:	4b42      	ldr	r3, [pc, #264]	@ (8006288 <HAL_RCC_OscConfig+0x76c>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a41      	ldr	r2, [pc, #260]	@ (8006288 <HAL_RCC_OscConfig+0x76c>)
 8006182:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006186:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006188:	f7fb fd30 	bl	8001bec <HAL_GetTick>
 800618c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800618e:	e008      	b.n	80061a2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006190:	f7fb fd2c 	bl	8001bec <HAL_GetTick>
 8006194:	4602      	mov	r2, r0
 8006196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006198:	1ad3      	subs	r3, r2, r3
 800619a:	2b02      	cmp	r3, #2
 800619c:	d901      	bls.n	80061a2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800619e:	2303      	movs	r3, #3
 80061a0:	e10e      	b.n	80063c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80061a2:	4b39      	ldr	r3, [pc, #228]	@ (8006288 <HAL_RCC_OscConfig+0x76c>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d1f0      	bne.n	8006190 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80061ae:	4b36      	ldr	r3, [pc, #216]	@ (8006288 <HAL_RCC_OscConfig+0x76c>)
 80061b0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80061b2:	4b37      	ldr	r3, [pc, #220]	@ (8006290 <HAL_RCC_OscConfig+0x774>)
 80061b4:	4013      	ands	r3, r2
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80061ba:	687a      	ldr	r2, [r7, #4]
 80061bc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80061be:	0112      	lsls	r2, r2, #4
 80061c0:	430a      	orrs	r2, r1
 80061c2:	4931      	ldr	r1, [pc, #196]	@ (8006288 <HAL_RCC_OscConfig+0x76c>)
 80061c4:	4313      	orrs	r3, r2
 80061c6:	628b      	str	r3, [r1, #40]	@ 0x28
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061cc:	3b01      	subs	r3, #1
 80061ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061d6:	3b01      	subs	r3, #1
 80061d8:	025b      	lsls	r3, r3, #9
 80061da:	b29b      	uxth	r3, r3
 80061dc:	431a      	orrs	r2, r3
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061e2:	3b01      	subs	r3, #1
 80061e4:	041b      	lsls	r3, r3, #16
 80061e6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80061ea:	431a      	orrs	r2, r3
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061f0:	3b01      	subs	r3, #1
 80061f2:	061b      	lsls	r3, r3, #24
 80061f4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80061f8:	4923      	ldr	r1, [pc, #140]	@ (8006288 <HAL_RCC_OscConfig+0x76c>)
 80061fa:	4313      	orrs	r3, r2
 80061fc:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80061fe:	4b22      	ldr	r3, [pc, #136]	@ (8006288 <HAL_RCC_OscConfig+0x76c>)
 8006200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006202:	4a21      	ldr	r2, [pc, #132]	@ (8006288 <HAL_RCC_OscConfig+0x76c>)
 8006204:	f023 0301 	bic.w	r3, r3, #1
 8006208:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800620a:	4b1f      	ldr	r3, [pc, #124]	@ (8006288 <HAL_RCC_OscConfig+0x76c>)
 800620c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800620e:	4b21      	ldr	r3, [pc, #132]	@ (8006294 <HAL_RCC_OscConfig+0x778>)
 8006210:	4013      	ands	r3, r2
 8006212:	687a      	ldr	r2, [r7, #4]
 8006214:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006216:	00d2      	lsls	r2, r2, #3
 8006218:	491b      	ldr	r1, [pc, #108]	@ (8006288 <HAL_RCC_OscConfig+0x76c>)
 800621a:	4313      	orrs	r3, r2
 800621c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800621e:	4b1a      	ldr	r3, [pc, #104]	@ (8006288 <HAL_RCC_OscConfig+0x76c>)
 8006220:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006222:	f023 020c 	bic.w	r2, r3, #12
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800622a:	4917      	ldr	r1, [pc, #92]	@ (8006288 <HAL_RCC_OscConfig+0x76c>)
 800622c:	4313      	orrs	r3, r2
 800622e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006230:	4b15      	ldr	r3, [pc, #84]	@ (8006288 <HAL_RCC_OscConfig+0x76c>)
 8006232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006234:	f023 0202 	bic.w	r2, r3, #2
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800623c:	4912      	ldr	r1, [pc, #72]	@ (8006288 <HAL_RCC_OscConfig+0x76c>)
 800623e:	4313      	orrs	r3, r2
 8006240:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006242:	4b11      	ldr	r3, [pc, #68]	@ (8006288 <HAL_RCC_OscConfig+0x76c>)
 8006244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006246:	4a10      	ldr	r2, [pc, #64]	@ (8006288 <HAL_RCC_OscConfig+0x76c>)
 8006248:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800624c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800624e:	4b0e      	ldr	r3, [pc, #56]	@ (8006288 <HAL_RCC_OscConfig+0x76c>)
 8006250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006252:	4a0d      	ldr	r2, [pc, #52]	@ (8006288 <HAL_RCC_OscConfig+0x76c>)
 8006254:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006258:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800625a:	4b0b      	ldr	r3, [pc, #44]	@ (8006288 <HAL_RCC_OscConfig+0x76c>)
 800625c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800625e:	4a0a      	ldr	r2, [pc, #40]	@ (8006288 <HAL_RCC_OscConfig+0x76c>)
 8006260:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006264:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006266:	4b08      	ldr	r3, [pc, #32]	@ (8006288 <HAL_RCC_OscConfig+0x76c>)
 8006268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800626a:	4a07      	ldr	r2, [pc, #28]	@ (8006288 <HAL_RCC_OscConfig+0x76c>)
 800626c:	f043 0301 	orr.w	r3, r3, #1
 8006270:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006272:	4b05      	ldr	r3, [pc, #20]	@ (8006288 <HAL_RCC_OscConfig+0x76c>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a04      	ldr	r2, [pc, #16]	@ (8006288 <HAL_RCC_OscConfig+0x76c>)
 8006278:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800627c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800627e:	f7fb fcb5 	bl	8001bec <HAL_GetTick>
 8006282:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006284:	e011      	b.n	80062aa <HAL_RCC_OscConfig+0x78e>
 8006286:	bf00      	nop
 8006288:	58024400 	.word	0x58024400
 800628c:	58024800 	.word	0x58024800
 8006290:	fffffc0c 	.word	0xfffffc0c
 8006294:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006298:	f7fb fca8 	bl	8001bec <HAL_GetTick>
 800629c:	4602      	mov	r2, r0
 800629e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062a0:	1ad3      	subs	r3, r2, r3
 80062a2:	2b02      	cmp	r3, #2
 80062a4:	d901      	bls.n	80062aa <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80062a6:	2303      	movs	r3, #3
 80062a8:	e08a      	b.n	80063c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80062aa:	4b47      	ldr	r3, [pc, #284]	@ (80063c8 <HAL_RCC_OscConfig+0x8ac>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d0f0      	beq.n	8006298 <HAL_RCC_OscConfig+0x77c>
 80062b6:	e082      	b.n	80063be <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062b8:	4b43      	ldr	r3, [pc, #268]	@ (80063c8 <HAL_RCC_OscConfig+0x8ac>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a42      	ldr	r2, [pc, #264]	@ (80063c8 <HAL_RCC_OscConfig+0x8ac>)
 80062be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80062c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062c4:	f7fb fc92 	bl	8001bec <HAL_GetTick>
 80062c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80062ca:	e008      	b.n	80062de <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062cc:	f7fb fc8e 	bl	8001bec <HAL_GetTick>
 80062d0:	4602      	mov	r2, r0
 80062d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062d4:	1ad3      	subs	r3, r2, r3
 80062d6:	2b02      	cmp	r3, #2
 80062d8:	d901      	bls.n	80062de <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80062da:	2303      	movs	r3, #3
 80062dc:	e070      	b.n	80063c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80062de:	4b3a      	ldr	r3, [pc, #232]	@ (80063c8 <HAL_RCC_OscConfig+0x8ac>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d1f0      	bne.n	80062cc <HAL_RCC_OscConfig+0x7b0>
 80062ea:	e068      	b.n	80063be <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80062ec:	4b36      	ldr	r3, [pc, #216]	@ (80063c8 <HAL_RCC_OscConfig+0x8ac>)
 80062ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062f0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80062f2:	4b35      	ldr	r3, [pc, #212]	@ (80063c8 <HAL_RCC_OscConfig+0x8ac>)
 80062f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062f6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d031      	beq.n	8006364 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	f003 0203 	and.w	r2, r3, #3
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800630a:	429a      	cmp	r2, r3
 800630c:	d12a      	bne.n	8006364 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	091b      	lsrs	r3, r3, #4
 8006312:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800631a:	429a      	cmp	r2, r3
 800631c:	d122      	bne.n	8006364 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006328:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800632a:	429a      	cmp	r2, r3
 800632c:	d11a      	bne.n	8006364 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	0a5b      	lsrs	r3, r3, #9
 8006332:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800633a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800633c:	429a      	cmp	r2, r3
 800633e:	d111      	bne.n	8006364 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	0c1b      	lsrs	r3, r3, #16
 8006344:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800634c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800634e:	429a      	cmp	r2, r3
 8006350:	d108      	bne.n	8006364 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	0e1b      	lsrs	r3, r3, #24
 8006356:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800635e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006360:	429a      	cmp	r2, r3
 8006362:	d001      	beq.n	8006368 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006364:	2301      	movs	r3, #1
 8006366:	e02b      	b.n	80063c0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006368:	4b17      	ldr	r3, [pc, #92]	@ (80063c8 <HAL_RCC_OscConfig+0x8ac>)
 800636a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800636c:	08db      	lsrs	r3, r3, #3
 800636e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006372:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006378:	693a      	ldr	r2, [r7, #16]
 800637a:	429a      	cmp	r2, r3
 800637c:	d01f      	beq.n	80063be <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800637e:	4b12      	ldr	r3, [pc, #72]	@ (80063c8 <HAL_RCC_OscConfig+0x8ac>)
 8006380:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006382:	4a11      	ldr	r2, [pc, #68]	@ (80063c8 <HAL_RCC_OscConfig+0x8ac>)
 8006384:	f023 0301 	bic.w	r3, r3, #1
 8006388:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800638a:	f7fb fc2f 	bl	8001bec <HAL_GetTick>
 800638e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006390:	bf00      	nop
 8006392:	f7fb fc2b 	bl	8001bec <HAL_GetTick>
 8006396:	4602      	mov	r2, r0
 8006398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800639a:	4293      	cmp	r3, r2
 800639c:	d0f9      	beq.n	8006392 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800639e:	4b0a      	ldr	r3, [pc, #40]	@ (80063c8 <HAL_RCC_OscConfig+0x8ac>)
 80063a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80063a2:	4b0a      	ldr	r3, [pc, #40]	@ (80063cc <HAL_RCC_OscConfig+0x8b0>)
 80063a4:	4013      	ands	r3, r2
 80063a6:	687a      	ldr	r2, [r7, #4]
 80063a8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80063aa:	00d2      	lsls	r2, r2, #3
 80063ac:	4906      	ldr	r1, [pc, #24]	@ (80063c8 <HAL_RCC_OscConfig+0x8ac>)
 80063ae:	4313      	orrs	r3, r2
 80063b0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80063b2:	4b05      	ldr	r3, [pc, #20]	@ (80063c8 <HAL_RCC_OscConfig+0x8ac>)
 80063b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063b6:	4a04      	ldr	r2, [pc, #16]	@ (80063c8 <HAL_RCC_OscConfig+0x8ac>)
 80063b8:	f043 0301 	orr.w	r3, r3, #1
 80063bc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80063be:	2300      	movs	r3, #0
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	3730      	adds	r7, #48	@ 0x30
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}
 80063c8:	58024400 	.word	0x58024400
 80063cc:	ffff0007 	.word	0xffff0007

080063d0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b086      	sub	sp, #24
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d101      	bne.n	80063e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80063e0:	2301      	movs	r3, #1
 80063e2:	e19c      	b.n	800671e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80063e4:	4b8a      	ldr	r3, [pc, #552]	@ (8006610 <HAL_RCC_ClockConfig+0x240>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f003 030f 	and.w	r3, r3, #15
 80063ec:	683a      	ldr	r2, [r7, #0]
 80063ee:	429a      	cmp	r2, r3
 80063f0:	d910      	bls.n	8006414 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063f2:	4b87      	ldr	r3, [pc, #540]	@ (8006610 <HAL_RCC_ClockConfig+0x240>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f023 020f 	bic.w	r2, r3, #15
 80063fa:	4985      	ldr	r1, [pc, #532]	@ (8006610 <HAL_RCC_ClockConfig+0x240>)
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	4313      	orrs	r3, r2
 8006400:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006402:	4b83      	ldr	r3, [pc, #524]	@ (8006610 <HAL_RCC_ClockConfig+0x240>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f003 030f 	and.w	r3, r3, #15
 800640a:	683a      	ldr	r2, [r7, #0]
 800640c:	429a      	cmp	r2, r3
 800640e:	d001      	beq.n	8006414 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006410:	2301      	movs	r3, #1
 8006412:	e184      	b.n	800671e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f003 0304 	and.w	r3, r3, #4
 800641c:	2b00      	cmp	r3, #0
 800641e:	d010      	beq.n	8006442 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	691a      	ldr	r2, [r3, #16]
 8006424:	4b7b      	ldr	r3, [pc, #492]	@ (8006614 <HAL_RCC_ClockConfig+0x244>)
 8006426:	699b      	ldr	r3, [r3, #24]
 8006428:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800642c:	429a      	cmp	r2, r3
 800642e:	d908      	bls.n	8006442 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006430:	4b78      	ldr	r3, [pc, #480]	@ (8006614 <HAL_RCC_ClockConfig+0x244>)
 8006432:	699b      	ldr	r3, [r3, #24]
 8006434:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	691b      	ldr	r3, [r3, #16]
 800643c:	4975      	ldr	r1, [pc, #468]	@ (8006614 <HAL_RCC_ClockConfig+0x244>)
 800643e:	4313      	orrs	r3, r2
 8006440:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f003 0308 	and.w	r3, r3, #8
 800644a:	2b00      	cmp	r3, #0
 800644c:	d010      	beq.n	8006470 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	695a      	ldr	r2, [r3, #20]
 8006452:	4b70      	ldr	r3, [pc, #448]	@ (8006614 <HAL_RCC_ClockConfig+0x244>)
 8006454:	69db      	ldr	r3, [r3, #28]
 8006456:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800645a:	429a      	cmp	r2, r3
 800645c:	d908      	bls.n	8006470 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800645e:	4b6d      	ldr	r3, [pc, #436]	@ (8006614 <HAL_RCC_ClockConfig+0x244>)
 8006460:	69db      	ldr	r3, [r3, #28]
 8006462:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	695b      	ldr	r3, [r3, #20]
 800646a:	496a      	ldr	r1, [pc, #424]	@ (8006614 <HAL_RCC_ClockConfig+0x244>)
 800646c:	4313      	orrs	r3, r2
 800646e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f003 0310 	and.w	r3, r3, #16
 8006478:	2b00      	cmp	r3, #0
 800647a:	d010      	beq.n	800649e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	699a      	ldr	r2, [r3, #24]
 8006480:	4b64      	ldr	r3, [pc, #400]	@ (8006614 <HAL_RCC_ClockConfig+0x244>)
 8006482:	69db      	ldr	r3, [r3, #28]
 8006484:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006488:	429a      	cmp	r2, r3
 800648a:	d908      	bls.n	800649e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800648c:	4b61      	ldr	r3, [pc, #388]	@ (8006614 <HAL_RCC_ClockConfig+0x244>)
 800648e:	69db      	ldr	r3, [r3, #28]
 8006490:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	699b      	ldr	r3, [r3, #24]
 8006498:	495e      	ldr	r1, [pc, #376]	@ (8006614 <HAL_RCC_ClockConfig+0x244>)
 800649a:	4313      	orrs	r3, r2
 800649c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f003 0320 	and.w	r3, r3, #32
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d010      	beq.n	80064cc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	69da      	ldr	r2, [r3, #28]
 80064ae:	4b59      	ldr	r3, [pc, #356]	@ (8006614 <HAL_RCC_ClockConfig+0x244>)
 80064b0:	6a1b      	ldr	r3, [r3, #32]
 80064b2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80064b6:	429a      	cmp	r2, r3
 80064b8:	d908      	bls.n	80064cc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80064ba:	4b56      	ldr	r3, [pc, #344]	@ (8006614 <HAL_RCC_ClockConfig+0x244>)
 80064bc:	6a1b      	ldr	r3, [r3, #32]
 80064be:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	69db      	ldr	r3, [r3, #28]
 80064c6:	4953      	ldr	r1, [pc, #332]	@ (8006614 <HAL_RCC_ClockConfig+0x244>)
 80064c8:	4313      	orrs	r3, r2
 80064ca:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f003 0302 	and.w	r3, r3, #2
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d010      	beq.n	80064fa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	68da      	ldr	r2, [r3, #12]
 80064dc:	4b4d      	ldr	r3, [pc, #308]	@ (8006614 <HAL_RCC_ClockConfig+0x244>)
 80064de:	699b      	ldr	r3, [r3, #24]
 80064e0:	f003 030f 	and.w	r3, r3, #15
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d908      	bls.n	80064fa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80064e8:	4b4a      	ldr	r3, [pc, #296]	@ (8006614 <HAL_RCC_ClockConfig+0x244>)
 80064ea:	699b      	ldr	r3, [r3, #24]
 80064ec:	f023 020f 	bic.w	r2, r3, #15
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	68db      	ldr	r3, [r3, #12]
 80064f4:	4947      	ldr	r1, [pc, #284]	@ (8006614 <HAL_RCC_ClockConfig+0x244>)
 80064f6:	4313      	orrs	r3, r2
 80064f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f003 0301 	and.w	r3, r3, #1
 8006502:	2b00      	cmp	r3, #0
 8006504:	d055      	beq.n	80065b2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006506:	4b43      	ldr	r3, [pc, #268]	@ (8006614 <HAL_RCC_ClockConfig+0x244>)
 8006508:	699b      	ldr	r3, [r3, #24]
 800650a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	689b      	ldr	r3, [r3, #8]
 8006512:	4940      	ldr	r1, [pc, #256]	@ (8006614 <HAL_RCC_ClockConfig+0x244>)
 8006514:	4313      	orrs	r3, r2
 8006516:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	2b02      	cmp	r3, #2
 800651e:	d107      	bne.n	8006530 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006520:	4b3c      	ldr	r3, [pc, #240]	@ (8006614 <HAL_RCC_ClockConfig+0x244>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006528:	2b00      	cmp	r3, #0
 800652a:	d121      	bne.n	8006570 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800652c:	2301      	movs	r3, #1
 800652e:	e0f6      	b.n	800671e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	2b03      	cmp	r3, #3
 8006536:	d107      	bne.n	8006548 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006538:	4b36      	ldr	r3, [pc, #216]	@ (8006614 <HAL_RCC_ClockConfig+0x244>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006540:	2b00      	cmp	r3, #0
 8006542:	d115      	bne.n	8006570 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006544:	2301      	movs	r3, #1
 8006546:	e0ea      	b.n	800671e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	2b01      	cmp	r3, #1
 800654e:	d107      	bne.n	8006560 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006550:	4b30      	ldr	r3, [pc, #192]	@ (8006614 <HAL_RCC_ClockConfig+0x244>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006558:	2b00      	cmp	r3, #0
 800655a:	d109      	bne.n	8006570 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800655c:	2301      	movs	r3, #1
 800655e:	e0de      	b.n	800671e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006560:	4b2c      	ldr	r3, [pc, #176]	@ (8006614 <HAL_RCC_ClockConfig+0x244>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f003 0304 	and.w	r3, r3, #4
 8006568:	2b00      	cmp	r3, #0
 800656a:	d101      	bne.n	8006570 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800656c:	2301      	movs	r3, #1
 800656e:	e0d6      	b.n	800671e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006570:	4b28      	ldr	r3, [pc, #160]	@ (8006614 <HAL_RCC_ClockConfig+0x244>)
 8006572:	691b      	ldr	r3, [r3, #16]
 8006574:	f023 0207 	bic.w	r2, r3, #7
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	4925      	ldr	r1, [pc, #148]	@ (8006614 <HAL_RCC_ClockConfig+0x244>)
 800657e:	4313      	orrs	r3, r2
 8006580:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006582:	f7fb fb33 	bl	8001bec <HAL_GetTick>
 8006586:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006588:	e00a      	b.n	80065a0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800658a:	f7fb fb2f 	bl	8001bec <HAL_GetTick>
 800658e:	4602      	mov	r2, r0
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	1ad3      	subs	r3, r2, r3
 8006594:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006598:	4293      	cmp	r3, r2
 800659a:	d901      	bls.n	80065a0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800659c:	2303      	movs	r3, #3
 800659e:	e0be      	b.n	800671e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065a0:	4b1c      	ldr	r3, [pc, #112]	@ (8006614 <HAL_RCC_ClockConfig+0x244>)
 80065a2:	691b      	ldr	r3, [r3, #16]
 80065a4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	00db      	lsls	r3, r3, #3
 80065ae:	429a      	cmp	r2, r3
 80065b0:	d1eb      	bne.n	800658a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f003 0302 	and.w	r3, r3, #2
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d010      	beq.n	80065e0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	68da      	ldr	r2, [r3, #12]
 80065c2:	4b14      	ldr	r3, [pc, #80]	@ (8006614 <HAL_RCC_ClockConfig+0x244>)
 80065c4:	699b      	ldr	r3, [r3, #24]
 80065c6:	f003 030f 	and.w	r3, r3, #15
 80065ca:	429a      	cmp	r2, r3
 80065cc:	d208      	bcs.n	80065e0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80065ce:	4b11      	ldr	r3, [pc, #68]	@ (8006614 <HAL_RCC_ClockConfig+0x244>)
 80065d0:	699b      	ldr	r3, [r3, #24]
 80065d2:	f023 020f 	bic.w	r2, r3, #15
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	68db      	ldr	r3, [r3, #12]
 80065da:	490e      	ldr	r1, [pc, #56]	@ (8006614 <HAL_RCC_ClockConfig+0x244>)
 80065dc:	4313      	orrs	r3, r2
 80065de:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80065e0:	4b0b      	ldr	r3, [pc, #44]	@ (8006610 <HAL_RCC_ClockConfig+0x240>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f003 030f 	and.w	r3, r3, #15
 80065e8:	683a      	ldr	r2, [r7, #0]
 80065ea:	429a      	cmp	r2, r3
 80065ec:	d214      	bcs.n	8006618 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065ee:	4b08      	ldr	r3, [pc, #32]	@ (8006610 <HAL_RCC_ClockConfig+0x240>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f023 020f 	bic.w	r2, r3, #15
 80065f6:	4906      	ldr	r1, [pc, #24]	@ (8006610 <HAL_RCC_ClockConfig+0x240>)
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	4313      	orrs	r3, r2
 80065fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065fe:	4b04      	ldr	r3, [pc, #16]	@ (8006610 <HAL_RCC_ClockConfig+0x240>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f003 030f 	and.w	r3, r3, #15
 8006606:	683a      	ldr	r2, [r7, #0]
 8006608:	429a      	cmp	r2, r3
 800660a:	d005      	beq.n	8006618 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800660c:	2301      	movs	r3, #1
 800660e:	e086      	b.n	800671e <HAL_RCC_ClockConfig+0x34e>
 8006610:	52002000 	.word	0x52002000
 8006614:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f003 0304 	and.w	r3, r3, #4
 8006620:	2b00      	cmp	r3, #0
 8006622:	d010      	beq.n	8006646 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	691a      	ldr	r2, [r3, #16]
 8006628:	4b3f      	ldr	r3, [pc, #252]	@ (8006728 <HAL_RCC_ClockConfig+0x358>)
 800662a:	699b      	ldr	r3, [r3, #24]
 800662c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006630:	429a      	cmp	r2, r3
 8006632:	d208      	bcs.n	8006646 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006634:	4b3c      	ldr	r3, [pc, #240]	@ (8006728 <HAL_RCC_ClockConfig+0x358>)
 8006636:	699b      	ldr	r3, [r3, #24]
 8006638:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	691b      	ldr	r3, [r3, #16]
 8006640:	4939      	ldr	r1, [pc, #228]	@ (8006728 <HAL_RCC_ClockConfig+0x358>)
 8006642:	4313      	orrs	r3, r2
 8006644:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f003 0308 	and.w	r3, r3, #8
 800664e:	2b00      	cmp	r3, #0
 8006650:	d010      	beq.n	8006674 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	695a      	ldr	r2, [r3, #20]
 8006656:	4b34      	ldr	r3, [pc, #208]	@ (8006728 <HAL_RCC_ClockConfig+0x358>)
 8006658:	69db      	ldr	r3, [r3, #28]
 800665a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800665e:	429a      	cmp	r2, r3
 8006660:	d208      	bcs.n	8006674 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006662:	4b31      	ldr	r3, [pc, #196]	@ (8006728 <HAL_RCC_ClockConfig+0x358>)
 8006664:	69db      	ldr	r3, [r3, #28]
 8006666:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	695b      	ldr	r3, [r3, #20]
 800666e:	492e      	ldr	r1, [pc, #184]	@ (8006728 <HAL_RCC_ClockConfig+0x358>)
 8006670:	4313      	orrs	r3, r2
 8006672:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f003 0310 	and.w	r3, r3, #16
 800667c:	2b00      	cmp	r3, #0
 800667e:	d010      	beq.n	80066a2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	699a      	ldr	r2, [r3, #24]
 8006684:	4b28      	ldr	r3, [pc, #160]	@ (8006728 <HAL_RCC_ClockConfig+0x358>)
 8006686:	69db      	ldr	r3, [r3, #28]
 8006688:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800668c:	429a      	cmp	r2, r3
 800668e:	d208      	bcs.n	80066a2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006690:	4b25      	ldr	r3, [pc, #148]	@ (8006728 <HAL_RCC_ClockConfig+0x358>)
 8006692:	69db      	ldr	r3, [r3, #28]
 8006694:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	699b      	ldr	r3, [r3, #24]
 800669c:	4922      	ldr	r1, [pc, #136]	@ (8006728 <HAL_RCC_ClockConfig+0x358>)
 800669e:	4313      	orrs	r3, r2
 80066a0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f003 0320 	and.w	r3, r3, #32
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d010      	beq.n	80066d0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	69da      	ldr	r2, [r3, #28]
 80066b2:	4b1d      	ldr	r3, [pc, #116]	@ (8006728 <HAL_RCC_ClockConfig+0x358>)
 80066b4:	6a1b      	ldr	r3, [r3, #32]
 80066b6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80066ba:	429a      	cmp	r2, r3
 80066bc:	d208      	bcs.n	80066d0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80066be:	4b1a      	ldr	r3, [pc, #104]	@ (8006728 <HAL_RCC_ClockConfig+0x358>)
 80066c0:	6a1b      	ldr	r3, [r3, #32]
 80066c2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	69db      	ldr	r3, [r3, #28]
 80066ca:	4917      	ldr	r1, [pc, #92]	@ (8006728 <HAL_RCC_ClockConfig+0x358>)
 80066cc:	4313      	orrs	r3, r2
 80066ce:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80066d0:	f000 f834 	bl	800673c <HAL_RCC_GetSysClockFreq>
 80066d4:	4602      	mov	r2, r0
 80066d6:	4b14      	ldr	r3, [pc, #80]	@ (8006728 <HAL_RCC_ClockConfig+0x358>)
 80066d8:	699b      	ldr	r3, [r3, #24]
 80066da:	0a1b      	lsrs	r3, r3, #8
 80066dc:	f003 030f 	and.w	r3, r3, #15
 80066e0:	4912      	ldr	r1, [pc, #72]	@ (800672c <HAL_RCC_ClockConfig+0x35c>)
 80066e2:	5ccb      	ldrb	r3, [r1, r3]
 80066e4:	f003 031f 	and.w	r3, r3, #31
 80066e8:	fa22 f303 	lsr.w	r3, r2, r3
 80066ec:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80066ee:	4b0e      	ldr	r3, [pc, #56]	@ (8006728 <HAL_RCC_ClockConfig+0x358>)
 80066f0:	699b      	ldr	r3, [r3, #24]
 80066f2:	f003 030f 	and.w	r3, r3, #15
 80066f6:	4a0d      	ldr	r2, [pc, #52]	@ (800672c <HAL_RCC_ClockConfig+0x35c>)
 80066f8:	5cd3      	ldrb	r3, [r2, r3]
 80066fa:	f003 031f 	and.w	r3, r3, #31
 80066fe:	693a      	ldr	r2, [r7, #16]
 8006700:	fa22 f303 	lsr.w	r3, r2, r3
 8006704:	4a0a      	ldr	r2, [pc, #40]	@ (8006730 <HAL_RCC_ClockConfig+0x360>)
 8006706:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006708:	4a0a      	ldr	r2, [pc, #40]	@ (8006734 <HAL_RCC_ClockConfig+0x364>)
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800670e:	4b0a      	ldr	r3, [pc, #40]	@ (8006738 <HAL_RCC_ClockConfig+0x368>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4618      	mov	r0, r3
 8006714:	f7fb fa20 	bl	8001b58 <HAL_InitTick>
 8006718:	4603      	mov	r3, r0
 800671a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800671c:	7bfb      	ldrb	r3, [r7, #15]
}
 800671e:	4618      	mov	r0, r3
 8006720:	3718      	adds	r7, #24
 8006722:	46bd      	mov	sp, r7
 8006724:	bd80      	pop	{r7, pc}
 8006726:	bf00      	nop
 8006728:	58024400 	.word	0x58024400
 800672c:	0800eae0 	.word	0x0800eae0
 8006730:	24000004 	.word	0x24000004
 8006734:	24000000 	.word	0x24000000
 8006738:	24000008 	.word	0x24000008

0800673c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800673c:	b480      	push	{r7}
 800673e:	b089      	sub	sp, #36	@ 0x24
 8006740:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006742:	4bb3      	ldr	r3, [pc, #716]	@ (8006a10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006744:	691b      	ldr	r3, [r3, #16]
 8006746:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800674a:	2b18      	cmp	r3, #24
 800674c:	f200 8155 	bhi.w	80069fa <HAL_RCC_GetSysClockFreq+0x2be>
 8006750:	a201      	add	r2, pc, #4	@ (adr r2, 8006758 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006756:	bf00      	nop
 8006758:	080067bd 	.word	0x080067bd
 800675c:	080069fb 	.word	0x080069fb
 8006760:	080069fb 	.word	0x080069fb
 8006764:	080069fb 	.word	0x080069fb
 8006768:	080069fb 	.word	0x080069fb
 800676c:	080069fb 	.word	0x080069fb
 8006770:	080069fb 	.word	0x080069fb
 8006774:	080069fb 	.word	0x080069fb
 8006778:	080067e3 	.word	0x080067e3
 800677c:	080069fb 	.word	0x080069fb
 8006780:	080069fb 	.word	0x080069fb
 8006784:	080069fb 	.word	0x080069fb
 8006788:	080069fb 	.word	0x080069fb
 800678c:	080069fb 	.word	0x080069fb
 8006790:	080069fb 	.word	0x080069fb
 8006794:	080069fb 	.word	0x080069fb
 8006798:	080067e9 	.word	0x080067e9
 800679c:	080069fb 	.word	0x080069fb
 80067a0:	080069fb 	.word	0x080069fb
 80067a4:	080069fb 	.word	0x080069fb
 80067a8:	080069fb 	.word	0x080069fb
 80067ac:	080069fb 	.word	0x080069fb
 80067b0:	080069fb 	.word	0x080069fb
 80067b4:	080069fb 	.word	0x080069fb
 80067b8:	080067ef 	.word	0x080067ef
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80067bc:	4b94      	ldr	r3, [pc, #592]	@ (8006a10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f003 0320 	and.w	r3, r3, #32
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d009      	beq.n	80067dc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80067c8:	4b91      	ldr	r3, [pc, #580]	@ (8006a10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	08db      	lsrs	r3, r3, #3
 80067ce:	f003 0303 	and.w	r3, r3, #3
 80067d2:	4a90      	ldr	r2, [pc, #576]	@ (8006a14 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80067d4:	fa22 f303 	lsr.w	r3, r2, r3
 80067d8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80067da:	e111      	b.n	8006a00 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80067dc:	4b8d      	ldr	r3, [pc, #564]	@ (8006a14 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80067de:	61bb      	str	r3, [r7, #24]
      break;
 80067e0:	e10e      	b.n	8006a00 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80067e2:	4b8d      	ldr	r3, [pc, #564]	@ (8006a18 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80067e4:	61bb      	str	r3, [r7, #24]
      break;
 80067e6:	e10b      	b.n	8006a00 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80067e8:	4b8c      	ldr	r3, [pc, #560]	@ (8006a1c <HAL_RCC_GetSysClockFreq+0x2e0>)
 80067ea:	61bb      	str	r3, [r7, #24]
      break;
 80067ec:	e108      	b.n	8006a00 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80067ee:	4b88      	ldr	r3, [pc, #544]	@ (8006a10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067f2:	f003 0303 	and.w	r3, r3, #3
 80067f6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80067f8:	4b85      	ldr	r3, [pc, #532]	@ (8006a10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067fc:	091b      	lsrs	r3, r3, #4
 80067fe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006802:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006804:	4b82      	ldr	r3, [pc, #520]	@ (8006a10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006808:	f003 0301 	and.w	r3, r3, #1
 800680c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800680e:	4b80      	ldr	r3, [pc, #512]	@ (8006a10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006810:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006812:	08db      	lsrs	r3, r3, #3
 8006814:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006818:	68fa      	ldr	r2, [r7, #12]
 800681a:	fb02 f303 	mul.w	r3, r2, r3
 800681e:	ee07 3a90 	vmov	s15, r3
 8006822:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006826:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	2b00      	cmp	r3, #0
 800682e:	f000 80e1 	beq.w	80069f4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	2b02      	cmp	r3, #2
 8006836:	f000 8083 	beq.w	8006940 <HAL_RCC_GetSysClockFreq+0x204>
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	2b02      	cmp	r3, #2
 800683e:	f200 80a1 	bhi.w	8006984 <HAL_RCC_GetSysClockFreq+0x248>
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d003      	beq.n	8006850 <HAL_RCC_GetSysClockFreq+0x114>
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	2b01      	cmp	r3, #1
 800684c:	d056      	beq.n	80068fc <HAL_RCC_GetSysClockFreq+0x1c0>
 800684e:	e099      	b.n	8006984 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006850:	4b6f      	ldr	r3, [pc, #444]	@ (8006a10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f003 0320 	and.w	r3, r3, #32
 8006858:	2b00      	cmp	r3, #0
 800685a:	d02d      	beq.n	80068b8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800685c:	4b6c      	ldr	r3, [pc, #432]	@ (8006a10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	08db      	lsrs	r3, r3, #3
 8006862:	f003 0303 	and.w	r3, r3, #3
 8006866:	4a6b      	ldr	r2, [pc, #428]	@ (8006a14 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006868:	fa22 f303 	lsr.w	r3, r2, r3
 800686c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	ee07 3a90 	vmov	s15, r3
 8006874:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	ee07 3a90 	vmov	s15, r3
 800687e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006882:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006886:	4b62      	ldr	r3, [pc, #392]	@ (8006a10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800688a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800688e:	ee07 3a90 	vmov	s15, r3
 8006892:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006896:	ed97 6a02 	vldr	s12, [r7, #8]
 800689a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006a20 <HAL_RCC_GetSysClockFreq+0x2e4>
 800689e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80068aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068b2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80068b6:	e087      	b.n	80069c8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	ee07 3a90 	vmov	s15, r3
 80068be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068c2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006a24 <HAL_RCC_GetSysClockFreq+0x2e8>
 80068c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068ca:	4b51      	ldr	r3, [pc, #324]	@ (8006a10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068d2:	ee07 3a90 	vmov	s15, r3
 80068d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068da:	ed97 6a02 	vldr	s12, [r7, #8]
 80068de:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006a20 <HAL_RCC_GetSysClockFreq+0x2e4>
 80068e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80068ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068f6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80068fa:	e065      	b.n	80069c8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	ee07 3a90 	vmov	s15, r3
 8006902:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006906:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006a28 <HAL_RCC_GetSysClockFreq+0x2ec>
 800690a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800690e:	4b40      	ldr	r3, [pc, #256]	@ (8006a10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006912:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006916:	ee07 3a90 	vmov	s15, r3
 800691a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800691e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006922:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006a20 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006926:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800692a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800692e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006932:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006936:	ee67 7a27 	vmul.f32	s15, s14, s15
 800693a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800693e:	e043      	b.n	80069c8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	ee07 3a90 	vmov	s15, r3
 8006946:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800694a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006a2c <HAL_RCC_GetSysClockFreq+0x2f0>
 800694e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006952:	4b2f      	ldr	r3, [pc, #188]	@ (8006a10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006956:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800695a:	ee07 3a90 	vmov	s15, r3
 800695e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006962:	ed97 6a02 	vldr	s12, [r7, #8]
 8006966:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006a20 <HAL_RCC_GetSysClockFreq+0x2e4>
 800696a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800696e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006972:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006976:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800697a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800697e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006982:	e021      	b.n	80069c8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	ee07 3a90 	vmov	s15, r3
 800698a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800698e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006a28 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006992:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006996:	4b1e      	ldr	r3, [pc, #120]	@ (8006a10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800699a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800699e:	ee07 3a90 	vmov	s15, r3
 80069a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80069aa:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006a20 <HAL_RCC_GetSysClockFreq+0x2e4>
 80069ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80069ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069c2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80069c6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80069c8:	4b11      	ldr	r3, [pc, #68]	@ (8006a10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069cc:	0a5b      	lsrs	r3, r3, #9
 80069ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80069d2:	3301      	adds	r3, #1
 80069d4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	ee07 3a90 	vmov	s15, r3
 80069dc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80069e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80069e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80069e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80069ec:	ee17 3a90 	vmov	r3, s15
 80069f0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80069f2:	e005      	b.n	8006a00 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80069f4:	2300      	movs	r3, #0
 80069f6:	61bb      	str	r3, [r7, #24]
      break;
 80069f8:	e002      	b.n	8006a00 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80069fa:	4b07      	ldr	r3, [pc, #28]	@ (8006a18 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80069fc:	61bb      	str	r3, [r7, #24]
      break;
 80069fe:	bf00      	nop
  }

  return sysclockfreq;
 8006a00:	69bb      	ldr	r3, [r7, #24]
}
 8006a02:	4618      	mov	r0, r3
 8006a04:	3724      	adds	r7, #36	@ 0x24
 8006a06:	46bd      	mov	sp, r7
 8006a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0c:	4770      	bx	lr
 8006a0e:	bf00      	nop
 8006a10:	58024400 	.word	0x58024400
 8006a14:	03d09000 	.word	0x03d09000
 8006a18:	003d0900 	.word	0x003d0900
 8006a1c:	007a1200 	.word	0x007a1200
 8006a20:	46000000 	.word	0x46000000
 8006a24:	4c742400 	.word	0x4c742400
 8006a28:	4a742400 	.word	0x4a742400
 8006a2c:	4af42400 	.word	0x4af42400

08006a30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b082      	sub	sp, #8
 8006a34:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006a36:	f7ff fe81 	bl	800673c <HAL_RCC_GetSysClockFreq>
 8006a3a:	4602      	mov	r2, r0
 8006a3c:	4b10      	ldr	r3, [pc, #64]	@ (8006a80 <HAL_RCC_GetHCLKFreq+0x50>)
 8006a3e:	699b      	ldr	r3, [r3, #24]
 8006a40:	0a1b      	lsrs	r3, r3, #8
 8006a42:	f003 030f 	and.w	r3, r3, #15
 8006a46:	490f      	ldr	r1, [pc, #60]	@ (8006a84 <HAL_RCC_GetHCLKFreq+0x54>)
 8006a48:	5ccb      	ldrb	r3, [r1, r3]
 8006a4a:	f003 031f 	and.w	r3, r3, #31
 8006a4e:	fa22 f303 	lsr.w	r3, r2, r3
 8006a52:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006a54:	4b0a      	ldr	r3, [pc, #40]	@ (8006a80 <HAL_RCC_GetHCLKFreq+0x50>)
 8006a56:	699b      	ldr	r3, [r3, #24]
 8006a58:	f003 030f 	and.w	r3, r3, #15
 8006a5c:	4a09      	ldr	r2, [pc, #36]	@ (8006a84 <HAL_RCC_GetHCLKFreq+0x54>)
 8006a5e:	5cd3      	ldrb	r3, [r2, r3]
 8006a60:	f003 031f 	and.w	r3, r3, #31
 8006a64:	687a      	ldr	r2, [r7, #4]
 8006a66:	fa22 f303 	lsr.w	r3, r2, r3
 8006a6a:	4a07      	ldr	r2, [pc, #28]	@ (8006a88 <HAL_RCC_GetHCLKFreq+0x58>)
 8006a6c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006a6e:	4a07      	ldr	r2, [pc, #28]	@ (8006a8c <HAL_RCC_GetHCLKFreq+0x5c>)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006a74:	4b04      	ldr	r3, [pc, #16]	@ (8006a88 <HAL_RCC_GetHCLKFreq+0x58>)
 8006a76:	681b      	ldr	r3, [r3, #0]
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	3708      	adds	r7, #8
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}
 8006a80:	58024400 	.word	0x58024400
 8006a84:	0800eae0 	.word	0x0800eae0
 8006a88:	24000004 	.word	0x24000004
 8006a8c:	24000000 	.word	0x24000000

08006a90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006a94:	f7ff ffcc 	bl	8006a30 <HAL_RCC_GetHCLKFreq>
 8006a98:	4602      	mov	r2, r0
 8006a9a:	4b06      	ldr	r3, [pc, #24]	@ (8006ab4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006a9c:	69db      	ldr	r3, [r3, #28]
 8006a9e:	091b      	lsrs	r3, r3, #4
 8006aa0:	f003 0307 	and.w	r3, r3, #7
 8006aa4:	4904      	ldr	r1, [pc, #16]	@ (8006ab8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006aa6:	5ccb      	ldrb	r3, [r1, r3]
 8006aa8:	f003 031f 	and.w	r3, r3, #31
 8006aac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	bd80      	pop	{r7, pc}
 8006ab4:	58024400 	.word	0x58024400
 8006ab8:	0800eae0 	.word	0x0800eae0

08006abc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006ac0:	f7ff ffb6 	bl	8006a30 <HAL_RCC_GetHCLKFreq>
 8006ac4:	4602      	mov	r2, r0
 8006ac6:	4b06      	ldr	r3, [pc, #24]	@ (8006ae0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006ac8:	69db      	ldr	r3, [r3, #28]
 8006aca:	0a1b      	lsrs	r3, r3, #8
 8006acc:	f003 0307 	and.w	r3, r3, #7
 8006ad0:	4904      	ldr	r1, [pc, #16]	@ (8006ae4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006ad2:	5ccb      	ldrb	r3, [r1, r3]
 8006ad4:	f003 031f 	and.w	r3, r3, #31
 8006ad8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	bd80      	pop	{r7, pc}
 8006ae0:	58024400 	.word	0x58024400
 8006ae4:	0800eae0 	.word	0x0800eae0

08006ae8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006ae8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006aec:	b0ca      	sub	sp, #296	@ 0x128
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006af4:	2300      	movs	r3, #0
 8006af6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006afa:	2300      	movs	r3, #0
 8006afc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006b00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b08:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006b0c:	2500      	movs	r5, #0
 8006b0e:	ea54 0305 	orrs.w	r3, r4, r5
 8006b12:	d049      	beq.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006b14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b18:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006b1a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006b1e:	d02f      	beq.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006b20:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006b24:	d828      	bhi.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006b26:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006b2a:	d01a      	beq.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006b2c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006b30:	d822      	bhi.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d003      	beq.n	8006b3e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006b36:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006b3a:	d007      	beq.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006b3c:	e01c      	b.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b3e:	4bb8      	ldr	r3, [pc, #736]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006b40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b42:	4ab7      	ldr	r2, [pc, #732]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006b44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b48:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006b4a:	e01a      	b.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006b4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b50:	3308      	adds	r3, #8
 8006b52:	2102      	movs	r1, #2
 8006b54:	4618      	mov	r0, r3
 8006b56:	f002 fb61 	bl	800921c <RCCEx_PLL2_Config>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006b60:	e00f      	b.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006b62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b66:	3328      	adds	r3, #40	@ 0x28
 8006b68:	2102      	movs	r1, #2
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f002 fc08 	bl	8009380 <RCCEx_PLL3_Config>
 8006b70:	4603      	mov	r3, r0
 8006b72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006b76:	e004      	b.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b78:	2301      	movs	r3, #1
 8006b7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006b7e:	e000      	b.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006b80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d10a      	bne.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006b8a:	4ba5      	ldr	r3, [pc, #660]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006b8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b8e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006b92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b96:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006b98:	4aa1      	ldr	r2, [pc, #644]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006b9a:	430b      	orrs	r3, r1
 8006b9c:	6513      	str	r3, [r2, #80]	@ 0x50
 8006b9e:	e003      	b.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ba0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ba4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006ba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bb0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006bb4:	f04f 0900 	mov.w	r9, #0
 8006bb8:	ea58 0309 	orrs.w	r3, r8, r9
 8006bbc:	d047      	beq.n	8006c4e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006bbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006bc4:	2b04      	cmp	r3, #4
 8006bc6:	d82a      	bhi.n	8006c1e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006bc8:	a201      	add	r2, pc, #4	@ (adr r2, 8006bd0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bce:	bf00      	nop
 8006bd0:	08006be5 	.word	0x08006be5
 8006bd4:	08006bf3 	.word	0x08006bf3
 8006bd8:	08006c09 	.word	0x08006c09
 8006bdc:	08006c27 	.word	0x08006c27
 8006be0:	08006c27 	.word	0x08006c27
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006be4:	4b8e      	ldr	r3, [pc, #568]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006be6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006be8:	4a8d      	ldr	r2, [pc, #564]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006bea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006bee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006bf0:	e01a      	b.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006bf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bf6:	3308      	adds	r3, #8
 8006bf8:	2100      	movs	r1, #0
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f002 fb0e 	bl	800921c <RCCEx_PLL2_Config>
 8006c00:	4603      	mov	r3, r0
 8006c02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006c06:	e00f      	b.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006c08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c0c:	3328      	adds	r3, #40	@ 0x28
 8006c0e:	2100      	movs	r1, #0
 8006c10:	4618      	mov	r0, r3
 8006c12:	f002 fbb5 	bl	8009380 <RCCEx_PLL3_Config>
 8006c16:	4603      	mov	r3, r0
 8006c18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006c1c:	e004      	b.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006c24:	e000      	b.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006c26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d10a      	bne.n	8006c46 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006c30:	4b7b      	ldr	r3, [pc, #492]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006c32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c34:	f023 0107 	bic.w	r1, r3, #7
 8006c38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c3e:	4a78      	ldr	r2, [pc, #480]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006c40:	430b      	orrs	r3, r1
 8006c42:	6513      	str	r3, [r2, #80]	@ 0x50
 8006c44:	e003      	b.n	8006c4e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c4a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006c4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c56:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8006c5a:	f04f 0b00 	mov.w	fp, #0
 8006c5e:	ea5a 030b 	orrs.w	r3, sl, fp
 8006c62:	d04c      	beq.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8006c64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c6e:	d030      	beq.n	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8006c70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c74:	d829      	bhi.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006c76:	2bc0      	cmp	r3, #192	@ 0xc0
 8006c78:	d02d      	beq.n	8006cd6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006c7a:	2bc0      	cmp	r3, #192	@ 0xc0
 8006c7c:	d825      	bhi.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006c7e:	2b80      	cmp	r3, #128	@ 0x80
 8006c80:	d018      	beq.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006c82:	2b80      	cmp	r3, #128	@ 0x80
 8006c84:	d821      	bhi.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d002      	beq.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8006c8a:	2b40      	cmp	r3, #64	@ 0x40
 8006c8c:	d007      	beq.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8006c8e:	e01c      	b.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c90:	4b63      	ldr	r3, [pc, #396]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006c92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c94:	4a62      	ldr	r2, [pc, #392]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006c96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c9a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006c9c:	e01c      	b.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ca2:	3308      	adds	r3, #8
 8006ca4:	2100      	movs	r1, #0
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f002 fab8 	bl	800921c <RCCEx_PLL2_Config>
 8006cac:	4603      	mov	r3, r0
 8006cae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006cb2:	e011      	b.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006cb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cb8:	3328      	adds	r3, #40	@ 0x28
 8006cba:	2100      	movs	r1, #0
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	f002 fb5f 	bl	8009380 <RCCEx_PLL3_Config>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006cc8:	e006      	b.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006cd0:	e002      	b.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006cd2:	bf00      	nop
 8006cd4:	e000      	b.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006cd6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cd8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d10a      	bne.n	8006cf6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006ce0:	4b4f      	ldr	r3, [pc, #316]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006ce2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ce4:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8006ce8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006cee:	4a4c      	ldr	r2, [pc, #304]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006cf0:	430b      	orrs	r3, r1
 8006cf2:	6513      	str	r3, [r2, #80]	@ 0x50
 8006cf4:	e003      	b.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cf6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cfa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006cfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d06:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8006d0a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8006d0e:	2300      	movs	r3, #0
 8006d10:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8006d14:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8006d18:	460b      	mov	r3, r1
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	d053      	beq.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006d1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d22:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006d26:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006d2a:	d035      	beq.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006d2c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006d30:	d82e      	bhi.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006d32:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006d36:	d031      	beq.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006d38:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006d3c:	d828      	bhi.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006d3e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006d42:	d01a      	beq.n	8006d7a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006d44:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006d48:	d822      	bhi.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d003      	beq.n	8006d56 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8006d4e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006d52:	d007      	beq.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8006d54:	e01c      	b.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d56:	4b32      	ldr	r3, [pc, #200]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006d58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d5a:	4a31      	ldr	r2, [pc, #196]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006d5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006d60:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006d62:	e01c      	b.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006d64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d68:	3308      	adds	r3, #8
 8006d6a:	2100      	movs	r1, #0
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f002 fa55 	bl	800921c <RCCEx_PLL2_Config>
 8006d72:	4603      	mov	r3, r0
 8006d74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006d78:	e011      	b.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006d7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d7e:	3328      	adds	r3, #40	@ 0x28
 8006d80:	2100      	movs	r1, #0
 8006d82:	4618      	mov	r0, r3
 8006d84:	f002 fafc 	bl	8009380 <RCCEx_PLL3_Config>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006d8e:	e006      	b.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006d90:	2301      	movs	r3, #1
 8006d92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006d96:	e002      	b.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006d98:	bf00      	nop
 8006d9a:	e000      	b.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006d9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d10b      	bne.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006da6:	4b1e      	ldr	r3, [pc, #120]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006da8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006daa:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8006dae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006db2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006db6:	4a1a      	ldr	r2, [pc, #104]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006db8:	430b      	orrs	r3, r1
 8006dba:	6593      	str	r3, [r2, #88]	@ 0x58
 8006dbc:	e003      	b.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006dc2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006dc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dce:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006dd2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006ddc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8006de0:	460b      	mov	r3, r1
 8006de2:	4313      	orrs	r3, r2
 8006de4:	d056      	beq.n	8006e94 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006de6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dea:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006dee:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006df2:	d038      	beq.n	8006e66 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006df4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006df8:	d831      	bhi.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006dfa:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006dfe:	d034      	beq.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8006e00:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006e04:	d82b      	bhi.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006e06:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006e0a:	d01d      	beq.n	8006e48 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8006e0c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006e10:	d825      	bhi.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d006      	beq.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8006e16:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006e1a:	d00a      	beq.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006e1c:	e01f      	b.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006e1e:	bf00      	nop
 8006e20:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e24:	4ba2      	ldr	r3, [pc, #648]	@ (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e28:	4aa1      	ldr	r2, [pc, #644]	@ (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006e2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006e30:	e01c      	b.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006e32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e36:	3308      	adds	r3, #8
 8006e38:	2100      	movs	r1, #0
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f002 f9ee 	bl	800921c <RCCEx_PLL2_Config>
 8006e40:	4603      	mov	r3, r0
 8006e42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006e46:	e011      	b.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006e48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e4c:	3328      	adds	r3, #40	@ 0x28
 8006e4e:	2100      	movs	r1, #0
 8006e50:	4618      	mov	r0, r3
 8006e52:	f002 fa95 	bl	8009380 <RCCEx_PLL3_Config>
 8006e56:	4603      	mov	r3, r0
 8006e58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006e5c:	e006      	b.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006e64:	e002      	b.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006e66:	bf00      	nop
 8006e68:	e000      	b.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006e6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d10b      	bne.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006e74:	4b8e      	ldr	r3, [pc, #568]	@ (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006e76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e78:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006e7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e80:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006e84:	4a8a      	ldr	r2, [pc, #552]	@ (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006e86:	430b      	orrs	r3, r1
 8006e88:	6593      	str	r3, [r2, #88]	@ 0x58
 8006e8a:	e003      	b.n	8006e94 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e90:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006e94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e9c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006ea0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006eaa:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8006eae:	460b      	mov	r3, r1
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	d03a      	beq.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8006eb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006eb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006eba:	2b30      	cmp	r3, #48	@ 0x30
 8006ebc:	d01f      	beq.n	8006efe <HAL_RCCEx_PeriphCLKConfig+0x416>
 8006ebe:	2b30      	cmp	r3, #48	@ 0x30
 8006ec0:	d819      	bhi.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006ec2:	2b20      	cmp	r3, #32
 8006ec4:	d00c      	beq.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8006ec6:	2b20      	cmp	r3, #32
 8006ec8:	d815      	bhi.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d019      	beq.n	8006f02 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006ece:	2b10      	cmp	r3, #16
 8006ed0:	d111      	bne.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ed2:	4b77      	ldr	r3, [pc, #476]	@ (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006ed4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ed6:	4a76      	ldr	r2, [pc, #472]	@ (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006ed8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006edc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006ede:	e011      	b.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006ee0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ee4:	3308      	adds	r3, #8
 8006ee6:	2102      	movs	r1, #2
 8006ee8:	4618      	mov	r0, r3
 8006eea:	f002 f997 	bl	800921c <RCCEx_PLL2_Config>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006ef4:	e006      	b.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006efc:	e002      	b.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006efe:	bf00      	nop
 8006f00:	e000      	b.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006f02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d10a      	bne.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006f0c:	4b68      	ldr	r3, [pc, #416]	@ (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006f0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f10:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006f14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f1a:	4a65      	ldr	r2, [pc, #404]	@ (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006f1c:	430b      	orrs	r3, r1
 8006f1e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006f20:	e003      	b.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f26:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006f2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f32:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8006f36:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006f40:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8006f44:	460b      	mov	r3, r1
 8006f46:	4313      	orrs	r3, r2
 8006f48:	d051      	beq.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006f4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f50:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006f54:	d035      	beq.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8006f56:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006f5a:	d82e      	bhi.n	8006fba <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006f5c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006f60:	d031      	beq.n	8006fc6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8006f62:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006f66:	d828      	bhi.n	8006fba <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006f68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006f6c:	d01a      	beq.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8006f6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006f72:	d822      	bhi.n	8006fba <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d003      	beq.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8006f78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f7c:	d007      	beq.n	8006f8e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8006f7e:	e01c      	b.n	8006fba <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f80:	4b4b      	ldr	r3, [pc, #300]	@ (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006f82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f84:	4a4a      	ldr	r2, [pc, #296]	@ (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006f86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f8a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006f8c:	e01c      	b.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006f8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f92:	3308      	adds	r3, #8
 8006f94:	2100      	movs	r1, #0
 8006f96:	4618      	mov	r0, r3
 8006f98:	f002 f940 	bl	800921c <RCCEx_PLL2_Config>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006fa2:	e011      	b.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006fa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fa8:	3328      	adds	r3, #40	@ 0x28
 8006faa:	2100      	movs	r1, #0
 8006fac:	4618      	mov	r0, r3
 8006fae:	f002 f9e7 	bl	8009380 <RCCEx_PLL3_Config>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006fb8:	e006      	b.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006fba:	2301      	movs	r3, #1
 8006fbc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006fc0:	e002      	b.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006fc2:	bf00      	nop
 8006fc4:	e000      	b.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006fc6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fc8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d10a      	bne.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006fd0:	4b37      	ldr	r3, [pc, #220]	@ (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006fd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006fd4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006fd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006fde:	4a34      	ldr	r2, [pc, #208]	@ (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006fe0:	430b      	orrs	r3, r1
 8006fe2:	6513      	str	r3, [r2, #80]	@ 0x50
 8006fe4:	e003      	b.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fe6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006fee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ff6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006ffa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006ffe:	2300      	movs	r3, #0
 8007000:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007004:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8007008:	460b      	mov	r3, r1
 800700a:	4313      	orrs	r3, r2
 800700c:	d056      	beq.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800700e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007012:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007014:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007018:	d033      	beq.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800701a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800701e:	d82c      	bhi.n	800707a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007020:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007024:	d02f      	beq.n	8007086 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8007026:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800702a:	d826      	bhi.n	800707a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800702c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007030:	d02b      	beq.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8007032:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007036:	d820      	bhi.n	800707a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007038:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800703c:	d012      	beq.n	8007064 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800703e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007042:	d81a      	bhi.n	800707a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007044:	2b00      	cmp	r3, #0
 8007046:	d022      	beq.n	800708e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007048:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800704c:	d115      	bne.n	800707a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800704e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007052:	3308      	adds	r3, #8
 8007054:	2101      	movs	r1, #1
 8007056:	4618      	mov	r0, r3
 8007058:	f002 f8e0 	bl	800921c <RCCEx_PLL2_Config>
 800705c:	4603      	mov	r3, r0
 800705e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007062:	e015      	b.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007064:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007068:	3328      	adds	r3, #40	@ 0x28
 800706a:	2101      	movs	r1, #1
 800706c:	4618      	mov	r0, r3
 800706e:	f002 f987 	bl	8009380 <RCCEx_PLL3_Config>
 8007072:	4603      	mov	r3, r0
 8007074:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007078:	e00a      	b.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800707a:	2301      	movs	r3, #1
 800707c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007080:	e006      	b.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007082:	bf00      	nop
 8007084:	e004      	b.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007086:	bf00      	nop
 8007088:	e002      	b.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800708a:	bf00      	nop
 800708c:	e000      	b.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800708e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007090:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007094:	2b00      	cmp	r3, #0
 8007096:	d10d      	bne.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007098:	4b05      	ldr	r3, [pc, #20]	@ (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800709a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800709c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80070a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80070a6:	4a02      	ldr	r2, [pc, #8]	@ (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80070a8:	430b      	orrs	r3, r1
 80070aa:	6513      	str	r3, [r2, #80]	@ 0x50
 80070ac:	e006      	b.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80070ae:	bf00      	nop
 80070b0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80070bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070c4:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80070c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80070cc:	2300      	movs	r3, #0
 80070ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80070d2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80070d6:	460b      	mov	r3, r1
 80070d8:	4313      	orrs	r3, r2
 80070da:	d055      	beq.n	8007188 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80070dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070e0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80070e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80070e8:	d033      	beq.n	8007152 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80070ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80070ee:	d82c      	bhi.n	800714a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80070f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070f4:	d02f      	beq.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80070f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070fa:	d826      	bhi.n	800714a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80070fc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007100:	d02b      	beq.n	800715a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8007102:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007106:	d820      	bhi.n	800714a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007108:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800710c:	d012      	beq.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800710e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007112:	d81a      	bhi.n	800714a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007114:	2b00      	cmp	r3, #0
 8007116:	d022      	beq.n	800715e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8007118:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800711c:	d115      	bne.n	800714a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800711e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007122:	3308      	adds	r3, #8
 8007124:	2101      	movs	r1, #1
 8007126:	4618      	mov	r0, r3
 8007128:	f002 f878 	bl	800921c <RCCEx_PLL2_Config>
 800712c:	4603      	mov	r3, r0
 800712e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007132:	e015      	b.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007134:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007138:	3328      	adds	r3, #40	@ 0x28
 800713a:	2101      	movs	r1, #1
 800713c:	4618      	mov	r0, r3
 800713e:	f002 f91f 	bl	8009380 <RCCEx_PLL3_Config>
 8007142:	4603      	mov	r3, r0
 8007144:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007148:	e00a      	b.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800714a:	2301      	movs	r3, #1
 800714c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007150:	e006      	b.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007152:	bf00      	nop
 8007154:	e004      	b.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007156:	bf00      	nop
 8007158:	e002      	b.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800715a:	bf00      	nop
 800715c:	e000      	b.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800715e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007160:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007164:	2b00      	cmp	r3, #0
 8007166:	d10b      	bne.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007168:	4ba3      	ldr	r3, [pc, #652]	@ (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800716a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800716c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007170:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007174:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007178:	4a9f      	ldr	r2, [pc, #636]	@ (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800717a:	430b      	orrs	r3, r1
 800717c:	6593      	str	r3, [r2, #88]	@ 0x58
 800717e:	e003      	b.n	8007188 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007180:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007184:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007188:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800718c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007190:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007194:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007198:	2300      	movs	r3, #0
 800719a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800719e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80071a2:	460b      	mov	r3, r1
 80071a4:	4313      	orrs	r3, r2
 80071a6:	d037      	beq.n	8007218 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80071a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80071b2:	d00e      	beq.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80071b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80071b8:	d816      	bhi.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d018      	beq.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80071be:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80071c2:	d111      	bne.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071c4:	4b8c      	ldr	r3, [pc, #560]	@ (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80071c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071c8:	4a8b      	ldr	r2, [pc, #556]	@ (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80071ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80071ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80071d0:	e00f      	b.n	80071f2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80071d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071d6:	3308      	adds	r3, #8
 80071d8:	2101      	movs	r1, #1
 80071da:	4618      	mov	r0, r3
 80071dc:	f002 f81e 	bl	800921c <RCCEx_PLL2_Config>
 80071e0:	4603      	mov	r3, r0
 80071e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80071e6:	e004      	b.n	80071f2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80071e8:	2301      	movs	r3, #1
 80071ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80071ee:	e000      	b.n	80071f2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80071f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d10a      	bne.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80071fa:	4b7f      	ldr	r3, [pc, #508]	@ (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80071fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071fe:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007202:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007206:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007208:	4a7b      	ldr	r2, [pc, #492]	@ (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800720a:	430b      	orrs	r3, r1
 800720c:	6513      	str	r3, [r2, #80]	@ 0x50
 800720e:	e003      	b.n	8007218 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007210:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007214:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007218:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800721c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007220:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007224:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007228:	2300      	movs	r3, #0
 800722a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800722e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8007232:	460b      	mov	r3, r1
 8007234:	4313      	orrs	r3, r2
 8007236:	d039      	beq.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007238:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800723c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800723e:	2b03      	cmp	r3, #3
 8007240:	d81c      	bhi.n	800727c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8007242:	a201      	add	r2, pc, #4	@ (adr r2, 8007248 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8007244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007248:	08007285 	.word	0x08007285
 800724c:	08007259 	.word	0x08007259
 8007250:	08007267 	.word	0x08007267
 8007254:	08007285 	.word	0x08007285
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007258:	4b67      	ldr	r3, [pc, #412]	@ (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800725a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800725c:	4a66      	ldr	r2, [pc, #408]	@ (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800725e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007262:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007264:	e00f      	b.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007266:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800726a:	3308      	adds	r3, #8
 800726c:	2102      	movs	r1, #2
 800726e:	4618      	mov	r0, r3
 8007270:	f001 ffd4 	bl	800921c <RCCEx_PLL2_Config>
 8007274:	4603      	mov	r3, r0
 8007276:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800727a:	e004      	b.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800727c:	2301      	movs	r3, #1
 800727e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007282:	e000      	b.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8007284:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007286:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800728a:	2b00      	cmp	r3, #0
 800728c:	d10a      	bne.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800728e:	4b5a      	ldr	r3, [pc, #360]	@ (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007290:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007292:	f023 0103 	bic.w	r1, r3, #3
 8007296:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800729a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800729c:	4a56      	ldr	r2, [pc, #344]	@ (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800729e:	430b      	orrs	r3, r1
 80072a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80072a2:	e003      	b.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80072ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072b4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80072b8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80072bc:	2300      	movs	r3, #0
 80072be:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80072c2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80072c6:	460b      	mov	r3, r1
 80072c8:	4313      	orrs	r3, r2
 80072ca:	f000 809f 	beq.w	800740c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80072ce:	4b4b      	ldr	r3, [pc, #300]	@ (80073fc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a4a      	ldr	r2, [pc, #296]	@ (80073fc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80072d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80072d8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80072da:	f7fa fc87 	bl	8001bec <HAL_GetTick>
 80072de:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80072e2:	e00b      	b.n	80072fc <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80072e4:	f7fa fc82 	bl	8001bec <HAL_GetTick>
 80072e8:	4602      	mov	r2, r0
 80072ea:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80072ee:	1ad3      	subs	r3, r2, r3
 80072f0:	2b64      	cmp	r3, #100	@ 0x64
 80072f2:	d903      	bls.n	80072fc <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80072f4:	2303      	movs	r3, #3
 80072f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80072fa:	e005      	b.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80072fc:	4b3f      	ldr	r3, [pc, #252]	@ (80073fc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007304:	2b00      	cmp	r3, #0
 8007306:	d0ed      	beq.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8007308:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800730c:	2b00      	cmp	r3, #0
 800730e:	d179      	bne.n	8007404 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007310:	4b39      	ldr	r3, [pc, #228]	@ (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007312:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007314:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007318:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800731c:	4053      	eors	r3, r2
 800731e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007322:	2b00      	cmp	r3, #0
 8007324:	d015      	beq.n	8007352 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007326:	4b34      	ldr	r3, [pc, #208]	@ (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007328:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800732a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800732e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007332:	4b31      	ldr	r3, [pc, #196]	@ (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007334:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007336:	4a30      	ldr	r2, [pc, #192]	@ (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007338:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800733c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800733e:	4b2e      	ldr	r3, [pc, #184]	@ (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007340:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007342:	4a2d      	ldr	r2, [pc, #180]	@ (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007344:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007348:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800734a:	4a2b      	ldr	r2, [pc, #172]	@ (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800734c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007350:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007352:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007356:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800735a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800735e:	d118      	bne.n	8007392 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007360:	f7fa fc44 	bl	8001bec <HAL_GetTick>
 8007364:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007368:	e00d      	b.n	8007386 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800736a:	f7fa fc3f 	bl	8001bec <HAL_GetTick>
 800736e:	4602      	mov	r2, r0
 8007370:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007374:	1ad2      	subs	r2, r2, r3
 8007376:	f241 3388 	movw	r3, #5000	@ 0x1388
 800737a:	429a      	cmp	r2, r3
 800737c:	d903      	bls.n	8007386 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800737e:	2303      	movs	r3, #3
 8007380:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8007384:	e005      	b.n	8007392 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007386:	4b1c      	ldr	r3, [pc, #112]	@ (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007388:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800738a:	f003 0302 	and.w	r3, r3, #2
 800738e:	2b00      	cmp	r3, #0
 8007390:	d0eb      	beq.n	800736a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8007392:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007396:	2b00      	cmp	r3, #0
 8007398:	d129      	bne.n	80073ee <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800739a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800739e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80073a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80073a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80073aa:	d10e      	bne.n	80073ca <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80073ac:	4b12      	ldr	r3, [pc, #72]	@ (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80073ae:	691b      	ldr	r3, [r3, #16]
 80073b0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80073b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073b8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80073bc:	091a      	lsrs	r2, r3, #4
 80073be:	4b10      	ldr	r3, [pc, #64]	@ (8007400 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80073c0:	4013      	ands	r3, r2
 80073c2:	4a0d      	ldr	r2, [pc, #52]	@ (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80073c4:	430b      	orrs	r3, r1
 80073c6:	6113      	str	r3, [r2, #16]
 80073c8:	e005      	b.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80073ca:	4b0b      	ldr	r3, [pc, #44]	@ (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80073cc:	691b      	ldr	r3, [r3, #16]
 80073ce:	4a0a      	ldr	r2, [pc, #40]	@ (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80073d0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80073d4:	6113      	str	r3, [r2, #16]
 80073d6:	4b08      	ldr	r3, [pc, #32]	@ (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80073d8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80073da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073de:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80073e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80073e6:	4a04      	ldr	r2, [pc, #16]	@ (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80073e8:	430b      	orrs	r3, r1
 80073ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80073ec:	e00e      	b.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80073ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80073f6:	e009      	b.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x924>
 80073f8:	58024400 	.word	0x58024400
 80073fc:	58024800 	.word	0x58024800
 8007400:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007404:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007408:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800740c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007414:	f002 0301 	and.w	r3, r2, #1
 8007418:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800741c:	2300      	movs	r3, #0
 800741e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007422:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007426:	460b      	mov	r3, r1
 8007428:	4313      	orrs	r3, r2
 800742a:	f000 8089 	beq.w	8007540 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800742e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007432:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007434:	2b28      	cmp	r3, #40	@ 0x28
 8007436:	d86b      	bhi.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8007438:	a201      	add	r2, pc, #4	@ (adr r2, 8007440 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800743a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800743e:	bf00      	nop
 8007440:	08007519 	.word	0x08007519
 8007444:	08007511 	.word	0x08007511
 8007448:	08007511 	.word	0x08007511
 800744c:	08007511 	.word	0x08007511
 8007450:	08007511 	.word	0x08007511
 8007454:	08007511 	.word	0x08007511
 8007458:	08007511 	.word	0x08007511
 800745c:	08007511 	.word	0x08007511
 8007460:	080074e5 	.word	0x080074e5
 8007464:	08007511 	.word	0x08007511
 8007468:	08007511 	.word	0x08007511
 800746c:	08007511 	.word	0x08007511
 8007470:	08007511 	.word	0x08007511
 8007474:	08007511 	.word	0x08007511
 8007478:	08007511 	.word	0x08007511
 800747c:	08007511 	.word	0x08007511
 8007480:	080074fb 	.word	0x080074fb
 8007484:	08007511 	.word	0x08007511
 8007488:	08007511 	.word	0x08007511
 800748c:	08007511 	.word	0x08007511
 8007490:	08007511 	.word	0x08007511
 8007494:	08007511 	.word	0x08007511
 8007498:	08007511 	.word	0x08007511
 800749c:	08007511 	.word	0x08007511
 80074a0:	08007519 	.word	0x08007519
 80074a4:	08007511 	.word	0x08007511
 80074a8:	08007511 	.word	0x08007511
 80074ac:	08007511 	.word	0x08007511
 80074b0:	08007511 	.word	0x08007511
 80074b4:	08007511 	.word	0x08007511
 80074b8:	08007511 	.word	0x08007511
 80074bc:	08007511 	.word	0x08007511
 80074c0:	08007519 	.word	0x08007519
 80074c4:	08007511 	.word	0x08007511
 80074c8:	08007511 	.word	0x08007511
 80074cc:	08007511 	.word	0x08007511
 80074d0:	08007511 	.word	0x08007511
 80074d4:	08007511 	.word	0x08007511
 80074d8:	08007511 	.word	0x08007511
 80074dc:	08007511 	.word	0x08007511
 80074e0:	08007519 	.word	0x08007519
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80074e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074e8:	3308      	adds	r3, #8
 80074ea:	2101      	movs	r1, #1
 80074ec:	4618      	mov	r0, r3
 80074ee:	f001 fe95 	bl	800921c <RCCEx_PLL2_Config>
 80074f2:	4603      	mov	r3, r0
 80074f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80074f8:	e00f      	b.n	800751a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80074fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074fe:	3328      	adds	r3, #40	@ 0x28
 8007500:	2101      	movs	r1, #1
 8007502:	4618      	mov	r0, r3
 8007504:	f001 ff3c 	bl	8009380 <RCCEx_PLL3_Config>
 8007508:	4603      	mov	r3, r0
 800750a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800750e:	e004      	b.n	800751a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007510:	2301      	movs	r3, #1
 8007512:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007516:	e000      	b.n	800751a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8007518:	bf00      	nop
    }

    if (ret == HAL_OK)
 800751a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800751e:	2b00      	cmp	r3, #0
 8007520:	d10a      	bne.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007522:	4bbf      	ldr	r3, [pc, #764]	@ (8007820 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007524:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007526:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800752a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800752e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007530:	4abb      	ldr	r2, [pc, #748]	@ (8007820 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007532:	430b      	orrs	r3, r1
 8007534:	6553      	str	r3, [r2, #84]	@ 0x54
 8007536:	e003      	b.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007538:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800753c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007540:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007548:	f002 0302 	and.w	r3, r2, #2
 800754c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007550:	2300      	movs	r3, #0
 8007552:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007556:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800755a:	460b      	mov	r3, r1
 800755c:	4313      	orrs	r3, r2
 800755e:	d041      	beq.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007560:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007564:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007566:	2b05      	cmp	r3, #5
 8007568:	d824      	bhi.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800756a:	a201      	add	r2, pc, #4	@ (adr r2, 8007570 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800756c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007570:	080075bd 	.word	0x080075bd
 8007574:	08007589 	.word	0x08007589
 8007578:	0800759f 	.word	0x0800759f
 800757c:	080075bd 	.word	0x080075bd
 8007580:	080075bd 	.word	0x080075bd
 8007584:	080075bd 	.word	0x080075bd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007588:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800758c:	3308      	adds	r3, #8
 800758e:	2101      	movs	r1, #1
 8007590:	4618      	mov	r0, r3
 8007592:	f001 fe43 	bl	800921c <RCCEx_PLL2_Config>
 8007596:	4603      	mov	r3, r0
 8007598:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800759c:	e00f      	b.n	80075be <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800759e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075a2:	3328      	adds	r3, #40	@ 0x28
 80075a4:	2101      	movs	r1, #1
 80075a6:	4618      	mov	r0, r3
 80075a8:	f001 feea 	bl	8009380 <RCCEx_PLL3_Config>
 80075ac:	4603      	mov	r3, r0
 80075ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80075b2:	e004      	b.n	80075be <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80075b4:	2301      	movs	r3, #1
 80075b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80075ba:	e000      	b.n	80075be <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80075bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d10a      	bne.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80075c6:	4b96      	ldr	r3, [pc, #600]	@ (8007820 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80075c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075ca:	f023 0107 	bic.w	r1, r3, #7
 80075ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075d2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80075d4:	4a92      	ldr	r2, [pc, #584]	@ (8007820 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80075d6:	430b      	orrs	r3, r1
 80075d8:	6553      	str	r3, [r2, #84]	@ 0x54
 80075da:	e003      	b.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80075e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ec:	f002 0304 	and.w	r3, r2, #4
 80075f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80075f4:	2300      	movs	r3, #0
 80075f6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80075fa:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80075fe:	460b      	mov	r3, r1
 8007600:	4313      	orrs	r3, r2
 8007602:	d044      	beq.n	800768e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007604:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007608:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800760c:	2b05      	cmp	r3, #5
 800760e:	d825      	bhi.n	800765c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8007610:	a201      	add	r2, pc, #4	@ (adr r2, 8007618 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8007612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007616:	bf00      	nop
 8007618:	08007665 	.word	0x08007665
 800761c:	08007631 	.word	0x08007631
 8007620:	08007647 	.word	0x08007647
 8007624:	08007665 	.word	0x08007665
 8007628:	08007665 	.word	0x08007665
 800762c:	08007665 	.word	0x08007665
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007630:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007634:	3308      	adds	r3, #8
 8007636:	2101      	movs	r1, #1
 8007638:	4618      	mov	r0, r3
 800763a:	f001 fdef 	bl	800921c <RCCEx_PLL2_Config>
 800763e:	4603      	mov	r3, r0
 8007640:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007644:	e00f      	b.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007646:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800764a:	3328      	adds	r3, #40	@ 0x28
 800764c:	2101      	movs	r1, #1
 800764e:	4618      	mov	r0, r3
 8007650:	f001 fe96 	bl	8009380 <RCCEx_PLL3_Config>
 8007654:	4603      	mov	r3, r0
 8007656:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800765a:	e004      	b.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800765c:	2301      	movs	r3, #1
 800765e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007662:	e000      	b.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8007664:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007666:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800766a:	2b00      	cmp	r3, #0
 800766c:	d10b      	bne.n	8007686 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800766e:	4b6c      	ldr	r3, [pc, #432]	@ (8007820 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007670:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007672:	f023 0107 	bic.w	r1, r3, #7
 8007676:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800767a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800767e:	4a68      	ldr	r2, [pc, #416]	@ (8007820 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007680:	430b      	orrs	r3, r1
 8007682:	6593      	str	r3, [r2, #88]	@ 0x58
 8007684:	e003      	b.n	800768e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007686:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800768a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800768e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007696:	f002 0320 	and.w	r3, r2, #32
 800769a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800769e:	2300      	movs	r3, #0
 80076a0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80076a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80076a8:	460b      	mov	r3, r1
 80076aa:	4313      	orrs	r3, r2
 80076ac:	d055      	beq.n	800775a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80076ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80076b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80076ba:	d033      	beq.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80076bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80076c0:	d82c      	bhi.n	800771c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80076c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076c6:	d02f      	beq.n	8007728 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80076c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076cc:	d826      	bhi.n	800771c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80076ce:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80076d2:	d02b      	beq.n	800772c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80076d4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80076d8:	d820      	bhi.n	800771c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80076da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80076de:	d012      	beq.n	8007706 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80076e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80076e4:	d81a      	bhi.n	800771c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d022      	beq.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80076ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80076ee:	d115      	bne.n	800771c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80076f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076f4:	3308      	adds	r3, #8
 80076f6:	2100      	movs	r1, #0
 80076f8:	4618      	mov	r0, r3
 80076fa:	f001 fd8f 	bl	800921c <RCCEx_PLL2_Config>
 80076fe:	4603      	mov	r3, r0
 8007700:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007704:	e015      	b.n	8007732 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007706:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800770a:	3328      	adds	r3, #40	@ 0x28
 800770c:	2102      	movs	r1, #2
 800770e:	4618      	mov	r0, r3
 8007710:	f001 fe36 	bl	8009380 <RCCEx_PLL3_Config>
 8007714:	4603      	mov	r3, r0
 8007716:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800771a:	e00a      	b.n	8007732 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800771c:	2301      	movs	r3, #1
 800771e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007722:	e006      	b.n	8007732 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007724:	bf00      	nop
 8007726:	e004      	b.n	8007732 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007728:	bf00      	nop
 800772a:	e002      	b.n	8007732 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800772c:	bf00      	nop
 800772e:	e000      	b.n	8007732 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007730:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007732:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007736:	2b00      	cmp	r3, #0
 8007738:	d10b      	bne.n	8007752 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800773a:	4b39      	ldr	r3, [pc, #228]	@ (8007820 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800773c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800773e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007742:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007746:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800774a:	4a35      	ldr	r2, [pc, #212]	@ (8007820 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800774c:	430b      	orrs	r3, r1
 800774e:	6553      	str	r3, [r2, #84]	@ 0x54
 8007750:	e003      	b.n	800775a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007752:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007756:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800775a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800775e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007762:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007766:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800776a:	2300      	movs	r3, #0
 800776c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007770:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007774:	460b      	mov	r3, r1
 8007776:	4313      	orrs	r3, r2
 8007778:	d058      	beq.n	800782c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800777a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800777e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007782:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007786:	d033      	beq.n	80077f0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8007788:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800778c:	d82c      	bhi.n	80077e8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800778e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007792:	d02f      	beq.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8007794:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007798:	d826      	bhi.n	80077e8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800779a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800779e:	d02b      	beq.n	80077f8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80077a0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80077a4:	d820      	bhi.n	80077e8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80077a6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80077aa:	d012      	beq.n	80077d2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80077ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80077b0:	d81a      	bhi.n	80077e8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d022      	beq.n	80077fc <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80077b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80077ba:	d115      	bne.n	80077e8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80077bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077c0:	3308      	adds	r3, #8
 80077c2:	2100      	movs	r1, #0
 80077c4:	4618      	mov	r0, r3
 80077c6:	f001 fd29 	bl	800921c <RCCEx_PLL2_Config>
 80077ca:	4603      	mov	r3, r0
 80077cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80077d0:	e015      	b.n	80077fe <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80077d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077d6:	3328      	adds	r3, #40	@ 0x28
 80077d8:	2102      	movs	r1, #2
 80077da:	4618      	mov	r0, r3
 80077dc:	f001 fdd0 	bl	8009380 <RCCEx_PLL3_Config>
 80077e0:	4603      	mov	r3, r0
 80077e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80077e6:	e00a      	b.n	80077fe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80077e8:	2301      	movs	r3, #1
 80077ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80077ee:	e006      	b.n	80077fe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80077f0:	bf00      	nop
 80077f2:	e004      	b.n	80077fe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80077f4:	bf00      	nop
 80077f6:	e002      	b.n	80077fe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80077f8:	bf00      	nop
 80077fa:	e000      	b.n	80077fe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80077fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007802:	2b00      	cmp	r3, #0
 8007804:	d10e      	bne.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007806:	4b06      	ldr	r3, [pc, #24]	@ (8007820 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007808:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800780a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800780e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007812:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007816:	4a02      	ldr	r2, [pc, #8]	@ (8007820 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007818:	430b      	orrs	r3, r1
 800781a:	6593      	str	r3, [r2, #88]	@ 0x58
 800781c:	e006      	b.n	800782c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800781e:	bf00      	nop
 8007820:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007824:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007828:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800782c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007834:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007838:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800783c:	2300      	movs	r3, #0
 800783e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007842:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007846:	460b      	mov	r3, r1
 8007848:	4313      	orrs	r3, r2
 800784a:	d055      	beq.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800784c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007850:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007854:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007858:	d033      	beq.n	80078c2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800785a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800785e:	d82c      	bhi.n	80078ba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007860:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007864:	d02f      	beq.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8007866:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800786a:	d826      	bhi.n	80078ba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800786c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007870:	d02b      	beq.n	80078ca <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8007872:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007876:	d820      	bhi.n	80078ba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007878:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800787c:	d012      	beq.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800787e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007882:	d81a      	bhi.n	80078ba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007884:	2b00      	cmp	r3, #0
 8007886:	d022      	beq.n	80078ce <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8007888:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800788c:	d115      	bne.n	80078ba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800788e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007892:	3308      	adds	r3, #8
 8007894:	2100      	movs	r1, #0
 8007896:	4618      	mov	r0, r3
 8007898:	f001 fcc0 	bl	800921c <RCCEx_PLL2_Config>
 800789c:	4603      	mov	r3, r0
 800789e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80078a2:	e015      	b.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80078a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078a8:	3328      	adds	r3, #40	@ 0x28
 80078aa:	2102      	movs	r1, #2
 80078ac:	4618      	mov	r0, r3
 80078ae:	f001 fd67 	bl	8009380 <RCCEx_PLL3_Config>
 80078b2:	4603      	mov	r3, r0
 80078b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80078b8:	e00a      	b.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80078ba:	2301      	movs	r3, #1
 80078bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80078c0:	e006      	b.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80078c2:	bf00      	nop
 80078c4:	e004      	b.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80078c6:	bf00      	nop
 80078c8:	e002      	b.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80078ca:	bf00      	nop
 80078cc:	e000      	b.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80078ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d10b      	bne.n	80078f0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80078d8:	4ba1      	ldr	r3, [pc, #644]	@ (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80078da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078dc:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80078e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078e4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80078e8:	4a9d      	ldr	r2, [pc, #628]	@ (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80078ea:	430b      	orrs	r3, r1
 80078ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80078ee:	e003      	b.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80078f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007900:	f002 0308 	and.w	r3, r2, #8
 8007904:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007908:	2300      	movs	r3, #0
 800790a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800790e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007912:	460b      	mov	r3, r1
 8007914:	4313      	orrs	r3, r2
 8007916:	d01e      	beq.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007918:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800791c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007920:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007924:	d10c      	bne.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007926:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800792a:	3328      	adds	r3, #40	@ 0x28
 800792c:	2102      	movs	r1, #2
 800792e:	4618      	mov	r0, r3
 8007930:	f001 fd26 	bl	8009380 <RCCEx_PLL3_Config>
 8007934:	4603      	mov	r3, r0
 8007936:	2b00      	cmp	r3, #0
 8007938:	d002      	beq.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800793a:	2301      	movs	r3, #1
 800793c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007940:	4b87      	ldr	r3, [pc, #540]	@ (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007942:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007944:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007948:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800794c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007950:	4a83      	ldr	r2, [pc, #524]	@ (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007952:	430b      	orrs	r3, r1
 8007954:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007956:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800795a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800795e:	f002 0310 	and.w	r3, r2, #16
 8007962:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007966:	2300      	movs	r3, #0
 8007968:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800796c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007970:	460b      	mov	r3, r1
 8007972:	4313      	orrs	r3, r2
 8007974:	d01e      	beq.n	80079b4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007976:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800797a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800797e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007982:	d10c      	bne.n	800799e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007984:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007988:	3328      	adds	r3, #40	@ 0x28
 800798a:	2102      	movs	r1, #2
 800798c:	4618      	mov	r0, r3
 800798e:	f001 fcf7 	bl	8009380 <RCCEx_PLL3_Config>
 8007992:	4603      	mov	r3, r0
 8007994:	2b00      	cmp	r3, #0
 8007996:	d002      	beq.n	800799e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8007998:	2301      	movs	r3, #1
 800799a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800799e:	4b70      	ldr	r3, [pc, #448]	@ (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80079a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079a2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80079a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80079ae:	4a6c      	ldr	r2, [pc, #432]	@ (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80079b0:	430b      	orrs	r3, r1
 80079b2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80079b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079bc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80079c0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80079c4:	2300      	movs	r3, #0
 80079c6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80079ca:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80079ce:	460b      	mov	r3, r1
 80079d0:	4313      	orrs	r3, r2
 80079d2:	d03e      	beq.n	8007a52 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80079d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079d8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80079dc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80079e0:	d022      	beq.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80079e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80079e6:	d81b      	bhi.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d003      	beq.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80079ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80079f0:	d00b      	beq.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80079f2:	e015      	b.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80079f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079f8:	3308      	adds	r3, #8
 80079fa:	2100      	movs	r1, #0
 80079fc:	4618      	mov	r0, r3
 80079fe:	f001 fc0d 	bl	800921c <RCCEx_PLL2_Config>
 8007a02:	4603      	mov	r3, r0
 8007a04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007a08:	e00f      	b.n	8007a2a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007a0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a0e:	3328      	adds	r3, #40	@ 0x28
 8007a10:	2102      	movs	r1, #2
 8007a12:	4618      	mov	r0, r3
 8007a14:	f001 fcb4 	bl	8009380 <RCCEx_PLL3_Config>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007a1e:	e004      	b.n	8007a2a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a20:	2301      	movs	r3, #1
 8007a22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007a26:	e000      	b.n	8007a2a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8007a28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d10b      	bne.n	8007a4a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007a32:	4b4b      	ldr	r3, [pc, #300]	@ (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007a34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a36:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a3e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007a42:	4a47      	ldr	r2, [pc, #284]	@ (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007a44:	430b      	orrs	r3, r1
 8007a46:	6593      	str	r3, [r2, #88]	@ 0x58
 8007a48:	e003      	b.n	8007a52 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a4e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007a52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a5a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007a5e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007a60:	2300      	movs	r3, #0
 8007a62:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007a64:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007a68:	460b      	mov	r3, r1
 8007a6a:	4313      	orrs	r3, r2
 8007a6c:	d03b      	beq.n	8007ae6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007a6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a76:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007a7a:	d01f      	beq.n	8007abc <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8007a7c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007a80:	d818      	bhi.n	8007ab4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8007a82:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007a86:	d003      	beq.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8007a88:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007a8c:	d007      	beq.n	8007a9e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8007a8e:	e011      	b.n	8007ab4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a90:	4b33      	ldr	r3, [pc, #204]	@ (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007a92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a94:	4a32      	ldr	r2, [pc, #200]	@ (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007a96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007a9a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007a9c:	e00f      	b.n	8007abe <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007a9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007aa2:	3328      	adds	r3, #40	@ 0x28
 8007aa4:	2101      	movs	r1, #1
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	f001 fc6a 	bl	8009380 <RCCEx_PLL3_Config>
 8007aac:	4603      	mov	r3, r0
 8007aae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8007ab2:	e004      	b.n	8007abe <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007aba:	e000      	b.n	8007abe <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8007abc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007abe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d10b      	bne.n	8007ade <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007ac6:	4b26      	ldr	r3, [pc, #152]	@ (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007ac8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007aca:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007ace:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ad6:	4a22      	ldr	r2, [pc, #136]	@ (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007ad8:	430b      	orrs	r3, r1
 8007ada:	6553      	str	r3, [r2, #84]	@ 0x54
 8007adc:	e003      	b.n	8007ae6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ade:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ae2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007ae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aee:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007af2:	673b      	str	r3, [r7, #112]	@ 0x70
 8007af4:	2300      	movs	r3, #0
 8007af6:	677b      	str	r3, [r7, #116]	@ 0x74
 8007af8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007afc:	460b      	mov	r3, r1
 8007afe:	4313      	orrs	r3, r2
 8007b00:	d034      	beq.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007b02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d003      	beq.n	8007b14 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8007b0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b10:	d007      	beq.n	8007b22 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8007b12:	e011      	b.n	8007b38 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b14:	4b12      	ldr	r3, [pc, #72]	@ (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007b16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b18:	4a11      	ldr	r2, [pc, #68]	@ (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007b1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007b1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007b20:	e00e      	b.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007b22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b26:	3308      	adds	r3, #8
 8007b28:	2102      	movs	r1, #2
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	f001 fb76 	bl	800921c <RCCEx_PLL2_Config>
 8007b30:	4603      	mov	r3, r0
 8007b32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007b36:	e003      	b.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8007b38:	2301      	movs	r3, #1
 8007b3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007b3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b40:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d10d      	bne.n	8007b64 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007b48:	4b05      	ldr	r3, [pc, #20]	@ (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007b4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b4c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007b50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b56:	4a02      	ldr	r2, [pc, #8]	@ (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007b58:	430b      	orrs	r3, r1
 8007b5a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007b5c:	e006      	b.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8007b5e:	bf00      	nop
 8007b60:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b68:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007b6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b74:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007b78:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007b7e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007b82:	460b      	mov	r3, r1
 8007b84:	4313      	orrs	r3, r2
 8007b86:	d00c      	beq.n	8007ba2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007b88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b8c:	3328      	adds	r3, #40	@ 0x28
 8007b8e:	2102      	movs	r1, #2
 8007b90:	4618      	mov	r0, r3
 8007b92:	f001 fbf5 	bl	8009380 <RCCEx_PLL3_Config>
 8007b96:	4603      	mov	r3, r0
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d002      	beq.n	8007ba2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007ba2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007baa:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007bae:	663b      	str	r3, [r7, #96]	@ 0x60
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	667b      	str	r3, [r7, #100]	@ 0x64
 8007bb4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007bb8:	460b      	mov	r3, r1
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	d038      	beq.n	8007c30 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007bbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007bc6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007bca:	d018      	beq.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8007bcc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007bd0:	d811      	bhi.n	8007bf6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007bd2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007bd6:	d014      	beq.n	8007c02 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8007bd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007bdc:	d80b      	bhi.n	8007bf6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d011      	beq.n	8007c06 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8007be2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007be6:	d106      	bne.n	8007bf6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007be8:	4bc3      	ldr	r3, [pc, #780]	@ (8007ef8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007bea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bec:	4ac2      	ldr	r2, [pc, #776]	@ (8007ef8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007bee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007bf2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007bf4:	e008      	b.n	8007c08 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007bfc:	e004      	b.n	8007c08 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007bfe:	bf00      	nop
 8007c00:	e002      	b.n	8007c08 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007c02:	bf00      	nop
 8007c04:	e000      	b.n	8007c08 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007c06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d10b      	bne.n	8007c28 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007c10:	4bb9      	ldr	r3, [pc, #740]	@ (8007ef8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007c12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c14:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007c18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c20:	4ab5      	ldr	r2, [pc, #724]	@ (8007ef8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007c22:	430b      	orrs	r3, r1
 8007c24:	6553      	str	r3, [r2, #84]	@ 0x54
 8007c26:	e003      	b.n	8007c30 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c2c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007c30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c38:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007c3c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007c3e:	2300      	movs	r3, #0
 8007c40:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007c42:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007c46:	460b      	mov	r3, r1
 8007c48:	4313      	orrs	r3, r2
 8007c4a:	d009      	beq.n	8007c60 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007c4c:	4baa      	ldr	r3, [pc, #680]	@ (8007ef8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007c4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c50:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007c54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007c5a:	4aa7      	ldr	r2, [pc, #668]	@ (8007ef8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007c5c:	430b      	orrs	r3, r1
 8007c5e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007c60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c68:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8007c6c:	653b      	str	r3, [r7, #80]	@ 0x50
 8007c6e:	2300      	movs	r3, #0
 8007c70:	657b      	str	r3, [r7, #84]	@ 0x54
 8007c72:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007c76:	460b      	mov	r3, r1
 8007c78:	4313      	orrs	r3, r2
 8007c7a:	d00a      	beq.n	8007c92 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007c7c:	4b9e      	ldr	r3, [pc, #632]	@ (8007ef8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007c7e:	691b      	ldr	r3, [r3, #16]
 8007c80:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8007c84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c88:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007c8c:	4a9a      	ldr	r2, [pc, #616]	@ (8007ef8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007c8e:	430b      	orrs	r3, r1
 8007c90:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007c92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c9a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007c9e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ca4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007ca8:	460b      	mov	r3, r1
 8007caa:	4313      	orrs	r3, r2
 8007cac:	d009      	beq.n	8007cc2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007cae:	4b92      	ldr	r3, [pc, #584]	@ (8007ef8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007cb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007cb2:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8007cb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007cbc:	4a8e      	ldr	r2, [pc, #568]	@ (8007ef8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007cbe:	430b      	orrs	r3, r1
 8007cc0:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007cc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cca:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007cce:	643b      	str	r3, [r7, #64]	@ 0x40
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	647b      	str	r3, [r7, #68]	@ 0x44
 8007cd4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007cd8:	460b      	mov	r3, r1
 8007cda:	4313      	orrs	r3, r2
 8007cdc:	d00e      	beq.n	8007cfc <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007cde:	4b86      	ldr	r3, [pc, #536]	@ (8007ef8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ce0:	691b      	ldr	r3, [r3, #16]
 8007ce2:	4a85      	ldr	r2, [pc, #532]	@ (8007ef8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ce4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007ce8:	6113      	str	r3, [r2, #16]
 8007cea:	4b83      	ldr	r3, [pc, #524]	@ (8007ef8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007cec:	6919      	ldr	r1, [r3, #16]
 8007cee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cf2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007cf6:	4a80      	ldr	r2, [pc, #512]	@ (8007ef8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007cf8:	430b      	orrs	r3, r1
 8007cfa:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007cfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d04:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8007d08:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007d0e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007d12:	460b      	mov	r3, r1
 8007d14:	4313      	orrs	r3, r2
 8007d16:	d009      	beq.n	8007d2c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007d18:	4b77      	ldr	r3, [pc, #476]	@ (8007ef8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007d1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d1c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007d20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d26:	4a74      	ldr	r2, [pc, #464]	@ (8007ef8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007d28:	430b      	orrs	r3, r1
 8007d2a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007d2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d34:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007d38:	633b      	str	r3, [r7, #48]	@ 0x30
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d3e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007d42:	460b      	mov	r3, r1
 8007d44:	4313      	orrs	r3, r2
 8007d46:	d00a      	beq.n	8007d5e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007d48:	4b6b      	ldr	r3, [pc, #428]	@ (8007ef8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007d4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d4c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8007d50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007d58:	4a67      	ldr	r2, [pc, #412]	@ (8007ef8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007d5a:	430b      	orrs	r3, r1
 8007d5c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007d5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d66:	2100      	movs	r1, #0
 8007d68:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007d6a:	f003 0301 	and.w	r3, r3, #1
 8007d6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007d70:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007d74:	460b      	mov	r3, r1
 8007d76:	4313      	orrs	r3, r2
 8007d78:	d011      	beq.n	8007d9e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007d7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d7e:	3308      	adds	r3, #8
 8007d80:	2100      	movs	r1, #0
 8007d82:	4618      	mov	r0, r3
 8007d84:	f001 fa4a 	bl	800921c <RCCEx_PLL2_Config>
 8007d88:	4603      	mov	r3, r0
 8007d8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007d8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d003      	beq.n	8007d9e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d9a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007d9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007da6:	2100      	movs	r1, #0
 8007da8:	6239      	str	r1, [r7, #32]
 8007daa:	f003 0302 	and.w	r3, r3, #2
 8007dae:	627b      	str	r3, [r7, #36]	@ 0x24
 8007db0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007db4:	460b      	mov	r3, r1
 8007db6:	4313      	orrs	r3, r2
 8007db8:	d011      	beq.n	8007dde <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007dba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dbe:	3308      	adds	r3, #8
 8007dc0:	2101      	movs	r1, #1
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	f001 fa2a 	bl	800921c <RCCEx_PLL2_Config>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007dce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d003      	beq.n	8007dde <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007dda:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007dde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007de6:	2100      	movs	r1, #0
 8007de8:	61b9      	str	r1, [r7, #24]
 8007dea:	f003 0304 	and.w	r3, r3, #4
 8007dee:	61fb      	str	r3, [r7, #28]
 8007df0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007df4:	460b      	mov	r3, r1
 8007df6:	4313      	orrs	r3, r2
 8007df8:	d011      	beq.n	8007e1e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007dfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dfe:	3308      	adds	r3, #8
 8007e00:	2102      	movs	r1, #2
 8007e02:	4618      	mov	r0, r3
 8007e04:	f001 fa0a 	bl	800921c <RCCEx_PLL2_Config>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007e0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d003      	beq.n	8007e1e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e1a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007e1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e26:	2100      	movs	r1, #0
 8007e28:	6139      	str	r1, [r7, #16]
 8007e2a:	f003 0308 	and.w	r3, r3, #8
 8007e2e:	617b      	str	r3, [r7, #20]
 8007e30:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007e34:	460b      	mov	r3, r1
 8007e36:	4313      	orrs	r3, r2
 8007e38:	d011      	beq.n	8007e5e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007e3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e3e:	3328      	adds	r3, #40	@ 0x28
 8007e40:	2100      	movs	r1, #0
 8007e42:	4618      	mov	r0, r3
 8007e44:	f001 fa9c 	bl	8009380 <RCCEx_PLL3_Config>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8007e4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d003      	beq.n	8007e5e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007e5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e66:	2100      	movs	r1, #0
 8007e68:	60b9      	str	r1, [r7, #8]
 8007e6a:	f003 0310 	and.w	r3, r3, #16
 8007e6e:	60fb      	str	r3, [r7, #12]
 8007e70:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007e74:	460b      	mov	r3, r1
 8007e76:	4313      	orrs	r3, r2
 8007e78:	d011      	beq.n	8007e9e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007e7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e7e:	3328      	adds	r3, #40	@ 0x28
 8007e80:	2101      	movs	r1, #1
 8007e82:	4618      	mov	r0, r3
 8007e84:	f001 fa7c 	bl	8009380 <RCCEx_PLL3_Config>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007e8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d003      	beq.n	8007e9e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e9a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007e9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ea6:	2100      	movs	r1, #0
 8007ea8:	6039      	str	r1, [r7, #0]
 8007eaa:	f003 0320 	and.w	r3, r3, #32
 8007eae:	607b      	str	r3, [r7, #4]
 8007eb0:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007eb4:	460b      	mov	r3, r1
 8007eb6:	4313      	orrs	r3, r2
 8007eb8:	d011      	beq.n	8007ede <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007eba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ebe:	3328      	adds	r3, #40	@ 0x28
 8007ec0:	2102      	movs	r1, #2
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f001 fa5c 	bl	8009380 <RCCEx_PLL3_Config>
 8007ec8:	4603      	mov	r3, r0
 8007eca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007ece:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d003      	beq.n	8007ede <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ed6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007eda:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8007ede:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d101      	bne.n	8007eea <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	e000      	b.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8007eea:	2301      	movs	r3, #1
}
 8007eec:	4618      	mov	r0, r3
 8007eee:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007ef8:	58024400 	.word	0x58024400

08007efc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b090      	sub	sp, #64	@ 0x40
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007f06:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f0a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8007f0e:	430b      	orrs	r3, r1
 8007f10:	f040 8094 	bne.w	800803c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8007f14:	4b9e      	ldr	r3, [pc, #632]	@ (8008190 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007f16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f18:	f003 0307 	and.w	r3, r3, #7
 8007f1c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007f1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f20:	2b04      	cmp	r3, #4
 8007f22:	f200 8087 	bhi.w	8008034 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8007f26:	a201      	add	r2, pc, #4	@ (adr r2, 8007f2c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8007f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f2c:	08007f41 	.word	0x08007f41
 8007f30:	08007f69 	.word	0x08007f69
 8007f34:	08007f91 	.word	0x08007f91
 8007f38:	0800802d 	.word	0x0800802d
 8007f3c:	08007fb9 	.word	0x08007fb9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007f40:	4b93      	ldr	r3, [pc, #588]	@ (8008190 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f48:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007f4c:	d108      	bne.n	8007f60 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007f4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007f52:	4618      	mov	r0, r3
 8007f54:	f001 f810 	bl	8008f78 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007f58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f5c:	f000 bd45 	b.w	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007f60:	2300      	movs	r3, #0
 8007f62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f64:	f000 bd41 	b.w	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007f68:	4b89      	ldr	r3, [pc, #548]	@ (8008190 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007f70:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007f74:	d108      	bne.n	8007f88 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f76:	f107 0318 	add.w	r3, r7, #24
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	f000 fd54 	bl	8008a28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007f80:	69bb      	ldr	r3, [r7, #24]
 8007f82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f84:	f000 bd31 	b.w	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007f88:	2300      	movs	r3, #0
 8007f8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f8c:	f000 bd2d 	b.w	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007f90:	4b7f      	ldr	r3, [pc, #508]	@ (8008190 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007f98:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f9c:	d108      	bne.n	8007fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f9e:	f107 030c 	add.w	r3, r7, #12
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	f000 fe94 	bl	8008cd0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007fac:	f000 bd1d 	b.w	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007fb4:	f000 bd19 	b.w	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007fb8:	4b75      	ldr	r3, [pc, #468]	@ (8008190 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007fba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007fbc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007fc0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007fc2:	4b73      	ldr	r3, [pc, #460]	@ (8008190 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f003 0304 	and.w	r3, r3, #4
 8007fca:	2b04      	cmp	r3, #4
 8007fcc:	d10c      	bne.n	8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8007fce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d109      	bne.n	8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007fd4:	4b6e      	ldr	r3, [pc, #440]	@ (8008190 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	08db      	lsrs	r3, r3, #3
 8007fda:	f003 0303 	and.w	r3, r3, #3
 8007fde:	4a6d      	ldr	r2, [pc, #436]	@ (8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007fe0:	fa22 f303 	lsr.w	r3, r2, r3
 8007fe4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007fe6:	e01f      	b.n	8008028 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007fe8:	4b69      	ldr	r3, [pc, #420]	@ (8008190 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ff0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ff4:	d106      	bne.n	8008004 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8007ff6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ff8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007ffc:	d102      	bne.n	8008004 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007ffe:	4b66      	ldr	r3, [pc, #408]	@ (8008198 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008000:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008002:	e011      	b.n	8008028 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008004:	4b62      	ldr	r3, [pc, #392]	@ (8008190 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800800c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008010:	d106      	bne.n	8008020 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8008012:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008014:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008018:	d102      	bne.n	8008020 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800801a:	4b60      	ldr	r3, [pc, #384]	@ (800819c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800801c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800801e:	e003      	b.n	8008028 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008020:	2300      	movs	r3, #0
 8008022:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008024:	f000 bce1 	b.w	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008028:	f000 bcdf 	b.w	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800802c:	4b5c      	ldr	r3, [pc, #368]	@ (80081a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800802e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008030:	f000 bcdb 	b.w	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008034:	2300      	movs	r3, #0
 8008036:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008038:	f000 bcd7 	b.w	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800803c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008040:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8008044:	430b      	orrs	r3, r1
 8008046:	f040 80ad 	bne.w	80081a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800804a:	4b51      	ldr	r3, [pc, #324]	@ (8008190 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800804c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800804e:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8008052:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008056:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800805a:	d056      	beq.n	800810a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800805c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800805e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008062:	f200 8090 	bhi.w	8008186 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008068:	2bc0      	cmp	r3, #192	@ 0xc0
 800806a:	f000 8088 	beq.w	800817e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800806e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008070:	2bc0      	cmp	r3, #192	@ 0xc0
 8008072:	f200 8088 	bhi.w	8008186 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008078:	2b80      	cmp	r3, #128	@ 0x80
 800807a:	d032      	beq.n	80080e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800807c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800807e:	2b80      	cmp	r3, #128	@ 0x80
 8008080:	f200 8081 	bhi.w	8008186 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008086:	2b00      	cmp	r3, #0
 8008088:	d003      	beq.n	8008092 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800808a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800808c:	2b40      	cmp	r3, #64	@ 0x40
 800808e:	d014      	beq.n	80080ba <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8008090:	e079      	b.n	8008186 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008092:	4b3f      	ldr	r3, [pc, #252]	@ (8008190 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800809a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800809e:	d108      	bne.n	80080b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80080a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80080a4:	4618      	mov	r0, r3
 80080a6:	f000 ff67 	bl	8008f78 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80080aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80080ae:	f000 bc9c 	b.w	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80080b2:	2300      	movs	r3, #0
 80080b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080b6:	f000 bc98 	b.w	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80080ba:	4b35      	ldr	r3, [pc, #212]	@ (8008190 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80080c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80080c6:	d108      	bne.n	80080da <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80080c8:	f107 0318 	add.w	r3, r7, #24
 80080cc:	4618      	mov	r0, r3
 80080ce:	f000 fcab 	bl	8008a28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80080d2:	69bb      	ldr	r3, [r7, #24]
 80080d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80080d6:	f000 bc88 	b.w	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80080da:	2300      	movs	r3, #0
 80080dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080de:	f000 bc84 	b.w	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80080e2:	4b2b      	ldr	r3, [pc, #172]	@ (8008190 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80080ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80080ee:	d108      	bne.n	8008102 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80080f0:	f107 030c 	add.w	r3, r7, #12
 80080f4:	4618      	mov	r0, r3
 80080f6:	f000 fdeb 	bl	8008cd0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80080fe:	f000 bc74 	b.w	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008102:	2300      	movs	r3, #0
 8008104:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008106:	f000 bc70 	b.w	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800810a:	4b21      	ldr	r3, [pc, #132]	@ (8008190 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800810c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800810e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008112:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008114:	4b1e      	ldr	r3, [pc, #120]	@ (8008190 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f003 0304 	and.w	r3, r3, #4
 800811c:	2b04      	cmp	r3, #4
 800811e:	d10c      	bne.n	800813a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8008120:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008122:	2b00      	cmp	r3, #0
 8008124:	d109      	bne.n	800813a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008126:	4b1a      	ldr	r3, [pc, #104]	@ (8008190 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	08db      	lsrs	r3, r3, #3
 800812c:	f003 0303 	and.w	r3, r3, #3
 8008130:	4a18      	ldr	r2, [pc, #96]	@ (8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008132:	fa22 f303 	lsr.w	r3, r2, r3
 8008136:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008138:	e01f      	b.n	800817a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800813a:	4b15      	ldr	r3, [pc, #84]	@ (8008190 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008142:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008146:	d106      	bne.n	8008156 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8008148:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800814a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800814e:	d102      	bne.n	8008156 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008150:	4b11      	ldr	r3, [pc, #68]	@ (8008198 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008152:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008154:	e011      	b.n	800817a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008156:	4b0e      	ldr	r3, [pc, #56]	@ (8008190 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800815e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008162:	d106      	bne.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8008164:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008166:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800816a:	d102      	bne.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800816c:	4b0b      	ldr	r3, [pc, #44]	@ (800819c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800816e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008170:	e003      	b.n	800817a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008172:	2300      	movs	r3, #0
 8008174:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008176:	f000 bc38 	b.w	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800817a:	f000 bc36 	b.w	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800817e:	4b08      	ldr	r3, [pc, #32]	@ (80081a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008180:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008182:	f000 bc32 	b.w	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008186:	2300      	movs	r3, #0
 8008188:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800818a:	f000 bc2e 	b.w	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800818e:	bf00      	nop
 8008190:	58024400 	.word	0x58024400
 8008194:	03d09000 	.word	0x03d09000
 8008198:	003d0900 	.word	0x003d0900
 800819c:	007a1200 	.word	0x007a1200
 80081a0:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80081a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081a8:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 80081ac:	430b      	orrs	r3, r1
 80081ae:	f040 809c 	bne.w	80082ea <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80081b2:	4b9e      	ldr	r3, [pc, #632]	@ (800842c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80081b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80081b6:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 80081ba:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80081bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081be:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80081c2:	d054      	beq.n	800826e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80081c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081c6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80081ca:	f200 808b 	bhi.w	80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80081ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081d0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80081d4:	f000 8083 	beq.w	80082de <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80081d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081da:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80081de:	f200 8081 	bhi.w	80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80081e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081e4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80081e8:	d02f      	beq.n	800824a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 80081ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081ec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80081f0:	d878      	bhi.n	80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80081f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d004      	beq.n	8008202 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80081f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081fa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80081fe:	d012      	beq.n	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8008200:	e070      	b.n	80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008202:	4b8a      	ldr	r3, [pc, #552]	@ (800842c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800820a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800820e:	d107      	bne.n	8008220 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008210:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008214:	4618      	mov	r0, r3
 8008216:	f000 feaf 	bl	8008f78 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800821a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800821c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800821e:	e3e4      	b.n	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008220:	2300      	movs	r3, #0
 8008222:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008224:	e3e1      	b.n	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008226:	4b81      	ldr	r3, [pc, #516]	@ (800842c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800822e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008232:	d107      	bne.n	8008244 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008234:	f107 0318 	add.w	r3, r7, #24
 8008238:	4618      	mov	r0, r3
 800823a:	f000 fbf5 	bl	8008a28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800823e:	69bb      	ldr	r3, [r7, #24]
 8008240:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008242:	e3d2      	b.n	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008244:	2300      	movs	r3, #0
 8008246:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008248:	e3cf      	b.n	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800824a:	4b78      	ldr	r3, [pc, #480]	@ (800842c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008252:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008256:	d107      	bne.n	8008268 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008258:	f107 030c 	add.w	r3, r7, #12
 800825c:	4618      	mov	r0, r3
 800825e:	f000 fd37 	bl	8008cd0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008266:	e3c0      	b.n	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008268:	2300      	movs	r3, #0
 800826a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800826c:	e3bd      	b.n	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800826e:	4b6f      	ldr	r3, [pc, #444]	@ (800842c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008270:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008272:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008276:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008278:	4b6c      	ldr	r3, [pc, #432]	@ (800842c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f003 0304 	and.w	r3, r3, #4
 8008280:	2b04      	cmp	r3, #4
 8008282:	d10c      	bne.n	800829e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8008284:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008286:	2b00      	cmp	r3, #0
 8008288:	d109      	bne.n	800829e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800828a:	4b68      	ldr	r3, [pc, #416]	@ (800842c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	08db      	lsrs	r3, r3, #3
 8008290:	f003 0303 	and.w	r3, r3, #3
 8008294:	4a66      	ldr	r2, [pc, #408]	@ (8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008296:	fa22 f303 	lsr.w	r3, r2, r3
 800829a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800829c:	e01e      	b.n	80082dc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800829e:	4b63      	ldr	r3, [pc, #396]	@ (800842c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80082a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80082aa:	d106      	bne.n	80082ba <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80082ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80082b2:	d102      	bne.n	80082ba <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80082b4:	4b5f      	ldr	r3, [pc, #380]	@ (8008434 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80082b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80082b8:	e010      	b.n	80082dc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80082ba:	4b5c      	ldr	r3, [pc, #368]	@ (800842c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80082c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80082c6:	d106      	bne.n	80082d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 80082c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80082ce:	d102      	bne.n	80082d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80082d0:	4b59      	ldr	r3, [pc, #356]	@ (8008438 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80082d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80082d4:	e002      	b.n	80082dc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80082d6:	2300      	movs	r3, #0
 80082d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80082da:	e386      	b.n	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80082dc:	e385      	b.n	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80082de:	4b57      	ldr	r3, [pc, #348]	@ (800843c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80082e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082e2:	e382      	b.n	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80082e4:	2300      	movs	r3, #0
 80082e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082e8:	e37f      	b.n	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80082ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082ee:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80082f2:	430b      	orrs	r3, r1
 80082f4:	f040 80a7 	bne.w	8008446 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80082f8:	4b4c      	ldr	r3, [pc, #304]	@ (800842c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80082fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80082fc:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8008300:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008304:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008308:	d055      	beq.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800830a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800830c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008310:	f200 8096 	bhi.w	8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008316:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800831a:	f000 8084 	beq.w	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800831e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008320:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008324:	f200 808c 	bhi.w	8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800832a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800832e:	d030      	beq.n	8008392 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8008330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008332:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008336:	f200 8083 	bhi.w	8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800833a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800833c:	2b00      	cmp	r3, #0
 800833e:	d004      	beq.n	800834a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8008340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008342:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008346:	d012      	beq.n	800836e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8008348:	e07a      	b.n	8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800834a:	4b38      	ldr	r3, [pc, #224]	@ (800842c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008352:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008356:	d107      	bne.n	8008368 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008358:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800835c:	4618      	mov	r0, r3
 800835e:	f000 fe0b 	bl	8008f78 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008364:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008366:	e340      	b.n	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008368:	2300      	movs	r3, #0
 800836a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800836c:	e33d      	b.n	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800836e:	4b2f      	ldr	r3, [pc, #188]	@ (800842c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008376:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800837a:	d107      	bne.n	800838c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800837c:	f107 0318 	add.w	r3, r7, #24
 8008380:	4618      	mov	r0, r3
 8008382:	f000 fb51 	bl	8008a28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008386:	69bb      	ldr	r3, [r7, #24]
 8008388:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800838a:	e32e      	b.n	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800838c:	2300      	movs	r3, #0
 800838e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008390:	e32b      	b.n	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008392:	4b26      	ldr	r3, [pc, #152]	@ (800842c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800839a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800839e:	d107      	bne.n	80083b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80083a0:	f107 030c 	add.w	r3, r7, #12
 80083a4:	4618      	mov	r0, r3
 80083a6:	f000 fc93 	bl	8008cd0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083ae:	e31c      	b.n	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80083b0:	2300      	movs	r3, #0
 80083b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083b4:	e319      	b.n	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80083b6:	4b1d      	ldr	r3, [pc, #116]	@ (800842c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80083b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80083ba:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80083be:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80083c0:	4b1a      	ldr	r3, [pc, #104]	@ (800842c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f003 0304 	and.w	r3, r3, #4
 80083c8:	2b04      	cmp	r3, #4
 80083ca:	d10c      	bne.n	80083e6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80083cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d109      	bne.n	80083e6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80083d2:	4b16      	ldr	r3, [pc, #88]	@ (800842c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	08db      	lsrs	r3, r3, #3
 80083d8:	f003 0303 	and.w	r3, r3, #3
 80083dc:	4a14      	ldr	r2, [pc, #80]	@ (8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80083de:	fa22 f303 	lsr.w	r3, r2, r3
 80083e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80083e4:	e01e      	b.n	8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80083e6:	4b11      	ldr	r3, [pc, #68]	@ (800842c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80083ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80083f2:	d106      	bne.n	8008402 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80083f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80083fa:	d102      	bne.n	8008402 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80083fc:	4b0d      	ldr	r3, [pc, #52]	@ (8008434 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80083fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008400:	e010      	b.n	8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008402:	4b0a      	ldr	r3, [pc, #40]	@ (800842c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800840a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800840e:	d106      	bne.n	800841e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8008410:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008412:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008416:	d102      	bne.n	800841e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008418:	4b07      	ldr	r3, [pc, #28]	@ (8008438 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800841a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800841c:	e002      	b.n	8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800841e:	2300      	movs	r3, #0
 8008420:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008422:	e2e2      	b.n	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008424:	e2e1      	b.n	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008426:	4b05      	ldr	r3, [pc, #20]	@ (800843c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008428:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800842a:	e2de      	b.n	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800842c:	58024400 	.word	0x58024400
 8008430:	03d09000 	.word	0x03d09000
 8008434:	003d0900 	.word	0x003d0900
 8008438:	007a1200 	.word	0x007a1200
 800843c:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8008440:	2300      	movs	r3, #0
 8008442:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008444:	e2d1      	b.n	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008446:	e9d7 2300 	ldrd	r2, r3, [r7]
 800844a:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800844e:	430b      	orrs	r3, r1
 8008450:	f040 809c 	bne.w	800858c <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8008454:	4b93      	ldr	r3, [pc, #588]	@ (80086a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008456:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008458:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800845c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800845e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008460:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008464:	d054      	beq.n	8008510 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8008466:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008468:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800846c:	f200 808b 	bhi.w	8008586 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008472:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008476:	f000 8083 	beq.w	8008580 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800847a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800847c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008480:	f200 8081 	bhi.w	8008586 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008484:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008486:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800848a:	d02f      	beq.n	80084ec <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800848c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800848e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008492:	d878      	bhi.n	8008586 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008494:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008496:	2b00      	cmp	r3, #0
 8008498:	d004      	beq.n	80084a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800849a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800849c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80084a0:	d012      	beq.n	80084c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80084a2:	e070      	b.n	8008586 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80084a4:	4b7f      	ldr	r3, [pc, #508]	@ (80086a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80084ac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80084b0:	d107      	bne.n	80084c2 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80084b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80084b6:	4618      	mov	r0, r3
 80084b8:	f000 fd5e 	bl	8008f78 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80084bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80084c0:	e293      	b.n	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80084c2:	2300      	movs	r3, #0
 80084c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80084c6:	e290      	b.n	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80084c8:	4b76      	ldr	r3, [pc, #472]	@ (80086a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80084d0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80084d4:	d107      	bne.n	80084e6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80084d6:	f107 0318 	add.w	r3, r7, #24
 80084da:	4618      	mov	r0, r3
 80084dc:	f000 faa4 	bl	8008a28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80084e0:	69bb      	ldr	r3, [r7, #24]
 80084e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80084e4:	e281      	b.n	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80084e6:	2300      	movs	r3, #0
 80084e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80084ea:	e27e      	b.n	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80084ec:	4b6d      	ldr	r3, [pc, #436]	@ (80086a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80084f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80084f8:	d107      	bne.n	800850a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80084fa:	f107 030c 	add.w	r3, r7, #12
 80084fe:	4618      	mov	r0, r3
 8008500:	f000 fbe6 	bl	8008cd0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008508:	e26f      	b.n	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800850a:	2300      	movs	r3, #0
 800850c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800850e:	e26c      	b.n	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008510:	4b64      	ldr	r3, [pc, #400]	@ (80086a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008512:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008514:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008518:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800851a:	4b62      	ldr	r3, [pc, #392]	@ (80086a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f003 0304 	and.w	r3, r3, #4
 8008522:	2b04      	cmp	r3, #4
 8008524:	d10c      	bne.n	8008540 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8008526:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008528:	2b00      	cmp	r3, #0
 800852a:	d109      	bne.n	8008540 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800852c:	4b5d      	ldr	r3, [pc, #372]	@ (80086a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	08db      	lsrs	r3, r3, #3
 8008532:	f003 0303 	and.w	r3, r3, #3
 8008536:	4a5c      	ldr	r2, [pc, #368]	@ (80086a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008538:	fa22 f303 	lsr.w	r3, r2, r3
 800853c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800853e:	e01e      	b.n	800857e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008540:	4b58      	ldr	r3, [pc, #352]	@ (80086a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008548:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800854c:	d106      	bne.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800854e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008550:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008554:	d102      	bne.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008556:	4b55      	ldr	r3, [pc, #340]	@ (80086ac <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008558:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800855a:	e010      	b.n	800857e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800855c:	4b51      	ldr	r3, [pc, #324]	@ (80086a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008564:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008568:	d106      	bne.n	8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800856a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800856c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008570:	d102      	bne.n	8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008572:	4b4f      	ldr	r3, [pc, #316]	@ (80086b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008574:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008576:	e002      	b.n	800857e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008578:	2300      	movs	r3, #0
 800857a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800857c:	e235      	b.n	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800857e:	e234      	b.n	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008580:	4b4c      	ldr	r3, [pc, #304]	@ (80086b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8008582:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008584:	e231      	b.n	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008586:	2300      	movs	r3, #0
 8008588:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800858a:	e22e      	b.n	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800858c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008590:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8008594:	430b      	orrs	r3, r1
 8008596:	f040 808f 	bne.w	80086b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800859a:	4b42      	ldr	r3, [pc, #264]	@ (80086a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800859c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800859e:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80085a2:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 80085a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085a6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80085aa:	d06b      	beq.n	8008684 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 80085ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085ae:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80085b2:	d874      	bhi.n	800869e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80085b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085b6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80085ba:	d056      	beq.n	800866a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 80085bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085be:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80085c2:	d86c      	bhi.n	800869e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80085c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085c6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80085ca:	d03b      	beq.n	8008644 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 80085cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085ce:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80085d2:	d864      	bhi.n	800869e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80085d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085d6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80085da:	d021      	beq.n	8008620 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80085dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80085e2:	d85c      	bhi.n	800869e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80085e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d004      	beq.n	80085f4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 80085ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80085f0:	d004      	beq.n	80085fc <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 80085f2:	e054      	b.n	800869e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80085f4:	f7fe fa4c 	bl	8006a90 <HAL_RCC_GetPCLK1Freq>
 80085f8:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80085fa:	e1f6      	b.n	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80085fc:	4b29      	ldr	r3, [pc, #164]	@ (80086a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008604:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008608:	d107      	bne.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800860a:	f107 0318 	add.w	r3, r7, #24
 800860e:	4618      	mov	r0, r3
 8008610:	f000 fa0a 	bl	8008a28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008614:	69fb      	ldr	r3, [r7, #28]
 8008616:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008618:	e1e7      	b.n	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800861a:	2300      	movs	r3, #0
 800861c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800861e:	e1e4      	b.n	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008620:	4b20      	ldr	r3, [pc, #128]	@ (80086a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008628:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800862c:	d107      	bne.n	800863e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800862e:	f107 030c 	add.w	r3, r7, #12
 8008632:	4618      	mov	r0, r3
 8008634:	f000 fb4c 	bl	8008cd0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008638:	693b      	ldr	r3, [r7, #16]
 800863a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800863c:	e1d5      	b.n	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800863e:	2300      	movs	r3, #0
 8008640:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008642:	e1d2      	b.n	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008644:	4b17      	ldr	r3, [pc, #92]	@ (80086a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f003 0304 	and.w	r3, r3, #4
 800864c:	2b04      	cmp	r3, #4
 800864e:	d109      	bne.n	8008664 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008650:	4b14      	ldr	r3, [pc, #80]	@ (80086a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	08db      	lsrs	r3, r3, #3
 8008656:	f003 0303 	and.w	r3, r3, #3
 800865a:	4a13      	ldr	r2, [pc, #76]	@ (80086a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800865c:	fa22 f303 	lsr.w	r3, r2, r3
 8008660:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008662:	e1c2      	b.n	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008664:	2300      	movs	r3, #0
 8008666:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008668:	e1bf      	b.n	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800866a:	4b0e      	ldr	r3, [pc, #56]	@ (80086a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008672:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008676:	d102      	bne.n	800867e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8008678:	4b0c      	ldr	r3, [pc, #48]	@ (80086ac <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800867a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800867c:	e1b5      	b.n	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800867e:	2300      	movs	r3, #0
 8008680:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008682:	e1b2      	b.n	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008684:	4b07      	ldr	r3, [pc, #28]	@ (80086a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800868c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008690:	d102      	bne.n	8008698 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8008692:	4b07      	ldr	r3, [pc, #28]	@ (80086b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008694:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008696:	e1a8      	b.n	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008698:	2300      	movs	r3, #0
 800869a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800869c:	e1a5      	b.n	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800869e:	2300      	movs	r3, #0
 80086a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086a2:	e1a2      	b.n	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80086a4:	58024400 	.word	0x58024400
 80086a8:	03d09000 	.word	0x03d09000
 80086ac:	003d0900 	.word	0x003d0900
 80086b0:	007a1200 	.word	0x007a1200
 80086b4:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80086b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086bc:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 80086c0:	430b      	orrs	r3, r1
 80086c2:	d173      	bne.n	80087ac <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80086c4:	4b9c      	ldr	r3, [pc, #624]	@ (8008938 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80086c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80086c8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80086cc:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80086ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80086d4:	d02f      	beq.n	8008736 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80086d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80086dc:	d863      	bhi.n	80087a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 80086de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d004      	beq.n	80086ee <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 80086e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80086ea:	d012      	beq.n	8008712 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 80086ec:	e05b      	b.n	80087a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80086ee:	4b92      	ldr	r3, [pc, #584]	@ (8008938 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80086f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80086fa:	d107      	bne.n	800870c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80086fc:	f107 0318 	add.w	r3, r7, #24
 8008700:	4618      	mov	r0, r3
 8008702:	f000 f991 	bl	8008a28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008706:	69bb      	ldr	r3, [r7, #24]
 8008708:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800870a:	e16e      	b.n	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800870c:	2300      	movs	r3, #0
 800870e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008710:	e16b      	b.n	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008712:	4b89      	ldr	r3, [pc, #548]	@ (8008938 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800871a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800871e:	d107      	bne.n	8008730 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008720:	f107 030c 	add.w	r3, r7, #12
 8008724:	4618      	mov	r0, r3
 8008726:	f000 fad3 	bl	8008cd0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800872a:	697b      	ldr	r3, [r7, #20]
 800872c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800872e:	e15c      	b.n	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008730:	2300      	movs	r3, #0
 8008732:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008734:	e159      	b.n	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008736:	4b80      	ldr	r3, [pc, #512]	@ (8008938 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008738:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800873a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800873e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008740:	4b7d      	ldr	r3, [pc, #500]	@ (8008938 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f003 0304 	and.w	r3, r3, #4
 8008748:	2b04      	cmp	r3, #4
 800874a:	d10c      	bne.n	8008766 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800874c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800874e:	2b00      	cmp	r3, #0
 8008750:	d109      	bne.n	8008766 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008752:	4b79      	ldr	r3, [pc, #484]	@ (8008938 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	08db      	lsrs	r3, r3, #3
 8008758:	f003 0303 	and.w	r3, r3, #3
 800875c:	4a77      	ldr	r2, [pc, #476]	@ (800893c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800875e:	fa22 f303 	lsr.w	r3, r2, r3
 8008762:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008764:	e01e      	b.n	80087a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008766:	4b74      	ldr	r3, [pc, #464]	@ (8008938 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800876e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008772:	d106      	bne.n	8008782 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8008774:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008776:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800877a:	d102      	bne.n	8008782 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800877c:	4b70      	ldr	r3, [pc, #448]	@ (8008940 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800877e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008780:	e010      	b.n	80087a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008782:	4b6d      	ldr	r3, [pc, #436]	@ (8008938 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800878a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800878e:	d106      	bne.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8008790:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008792:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008796:	d102      	bne.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008798:	4b6a      	ldr	r3, [pc, #424]	@ (8008944 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800879a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800879c:	e002      	b.n	80087a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800879e:	2300      	movs	r3, #0
 80087a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80087a2:	e122      	b.n	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80087a4:	e121      	b.n	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80087a6:	2300      	movs	r3, #0
 80087a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087aa:	e11e      	b.n	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80087ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087b0:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80087b4:	430b      	orrs	r3, r1
 80087b6:	d133      	bne.n	8008820 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80087b8:	4b5f      	ldr	r3, [pc, #380]	@ (8008938 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80087ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80087bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80087c0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80087c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d004      	beq.n	80087d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 80087c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80087ce:	d012      	beq.n	80087f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 80087d0:	e023      	b.n	800881a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80087d2:	4b59      	ldr	r3, [pc, #356]	@ (8008938 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80087da:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80087de:	d107      	bne.n	80087f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80087e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80087e4:	4618      	mov	r0, r3
 80087e6:	f000 fbc7 	bl	8008f78 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80087ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087ee:	e0fc      	b.n	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80087f0:	2300      	movs	r3, #0
 80087f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087f4:	e0f9      	b.n	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80087f6:	4b50      	ldr	r3, [pc, #320]	@ (8008938 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80087fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008802:	d107      	bne.n	8008814 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008804:	f107 0318 	add.w	r3, r7, #24
 8008808:	4618      	mov	r0, r3
 800880a:	f000 f90d 	bl	8008a28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800880e:	6a3b      	ldr	r3, [r7, #32]
 8008810:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008812:	e0ea      	b.n	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008814:	2300      	movs	r3, #0
 8008816:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008818:	e0e7      	b.n	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800881a:	2300      	movs	r3, #0
 800881c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800881e:	e0e4      	b.n	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008820:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008824:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8008828:	430b      	orrs	r3, r1
 800882a:	f040 808d 	bne.w	8008948 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800882e:	4b42      	ldr	r3, [pc, #264]	@ (8008938 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008830:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008832:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8008836:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800883a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800883e:	d06b      	beq.n	8008918 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8008840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008842:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008846:	d874      	bhi.n	8008932 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008848:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800884a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800884e:	d056      	beq.n	80088fe <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8008850:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008852:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008856:	d86c      	bhi.n	8008932 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008858:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800885a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800885e:	d03b      	beq.n	80088d8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8008860:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008862:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008866:	d864      	bhi.n	8008932 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008868:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800886a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800886e:	d021      	beq.n	80088b4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8008870:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008872:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008876:	d85c      	bhi.n	8008932 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008878:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800887a:	2b00      	cmp	r3, #0
 800887c:	d004      	beq.n	8008888 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800887e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008880:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008884:	d004      	beq.n	8008890 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8008886:	e054      	b.n	8008932 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008888:	f000 f8b8 	bl	80089fc <HAL_RCCEx_GetD3PCLK1Freq>
 800888c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800888e:	e0ac      	b.n	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008890:	4b29      	ldr	r3, [pc, #164]	@ (8008938 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008898:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800889c:	d107      	bne.n	80088ae <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800889e:	f107 0318 	add.w	r3, r7, #24
 80088a2:	4618      	mov	r0, r3
 80088a4:	f000 f8c0 	bl	8008a28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80088a8:	69fb      	ldr	r3, [r7, #28]
 80088aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80088ac:	e09d      	b.n	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80088ae:	2300      	movs	r3, #0
 80088b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088b2:	e09a      	b.n	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80088b4:	4b20      	ldr	r3, [pc, #128]	@ (8008938 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80088bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80088c0:	d107      	bne.n	80088d2 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80088c2:	f107 030c 	add.w	r3, r7, #12
 80088c6:	4618      	mov	r0, r3
 80088c8:	f000 fa02 	bl	8008cd0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80088cc:	693b      	ldr	r3, [r7, #16]
 80088ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80088d0:	e08b      	b.n	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80088d2:	2300      	movs	r3, #0
 80088d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088d6:	e088      	b.n	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80088d8:	4b17      	ldr	r3, [pc, #92]	@ (8008938 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f003 0304 	and.w	r3, r3, #4
 80088e0:	2b04      	cmp	r3, #4
 80088e2:	d109      	bne.n	80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80088e4:	4b14      	ldr	r3, [pc, #80]	@ (8008938 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	08db      	lsrs	r3, r3, #3
 80088ea:	f003 0303 	and.w	r3, r3, #3
 80088ee:	4a13      	ldr	r2, [pc, #76]	@ (800893c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80088f0:	fa22 f303 	lsr.w	r3, r2, r3
 80088f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80088f6:	e078      	b.n	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80088f8:	2300      	movs	r3, #0
 80088fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088fc:	e075      	b.n	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80088fe:	4b0e      	ldr	r3, [pc, #56]	@ (8008938 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008906:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800890a:	d102      	bne.n	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800890c:	4b0c      	ldr	r3, [pc, #48]	@ (8008940 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800890e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008910:	e06b      	b.n	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008912:	2300      	movs	r3, #0
 8008914:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008916:	e068      	b.n	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008918:	4b07      	ldr	r3, [pc, #28]	@ (8008938 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008920:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008924:	d102      	bne.n	800892c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8008926:	4b07      	ldr	r3, [pc, #28]	@ (8008944 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8008928:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800892a:	e05e      	b.n	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800892c:	2300      	movs	r3, #0
 800892e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008930:	e05b      	b.n	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8008932:	2300      	movs	r3, #0
 8008934:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008936:	e058      	b.n	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008938:	58024400 	.word	0x58024400
 800893c:	03d09000 	.word	0x03d09000
 8008940:	003d0900 	.word	0x003d0900
 8008944:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008948:	e9d7 2300 	ldrd	r2, r3, [r7]
 800894c:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8008950:	430b      	orrs	r3, r1
 8008952:	d148      	bne.n	80089e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008954:	4b27      	ldr	r3, [pc, #156]	@ (80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008956:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008958:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800895c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800895e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008960:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008964:	d02a      	beq.n	80089bc <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8008966:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008968:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800896c:	d838      	bhi.n	80089e0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800896e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008970:	2b00      	cmp	r3, #0
 8008972:	d004      	beq.n	800897e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8008974:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008976:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800897a:	d00d      	beq.n	8008998 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800897c:	e030      	b.n	80089e0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800897e:	4b1d      	ldr	r3, [pc, #116]	@ (80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008986:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800898a:	d102      	bne.n	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800898c:	4b1a      	ldr	r3, [pc, #104]	@ (80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800898e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008990:	e02b      	b.n	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008992:	2300      	movs	r3, #0
 8008994:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008996:	e028      	b.n	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008998:	4b16      	ldr	r3, [pc, #88]	@ (80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80089a0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80089a4:	d107      	bne.n	80089b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80089a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80089aa:	4618      	mov	r0, r3
 80089ac:	f000 fae4 	bl	8008f78 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80089b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80089b4:	e019      	b.n	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80089b6:	2300      	movs	r3, #0
 80089b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089ba:	e016      	b.n	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80089bc:	4b0d      	ldr	r3, [pc, #52]	@ (80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80089c4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80089c8:	d107      	bne.n	80089da <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80089ca:	f107 0318 	add.w	r3, r7, #24
 80089ce:	4618      	mov	r0, r3
 80089d0:	f000 f82a 	bl	8008a28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80089d4:	69fb      	ldr	r3, [r7, #28]
 80089d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80089d8:	e007      	b.n	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80089da:	2300      	movs	r3, #0
 80089dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089de:	e004      	b.n	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80089e0:	2300      	movs	r3, #0
 80089e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089e4:	e001      	b.n	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 80089e6:	2300      	movs	r3, #0
 80089e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 80089ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80089ec:	4618      	mov	r0, r3
 80089ee:	3740      	adds	r7, #64	@ 0x40
 80089f0:	46bd      	mov	sp, r7
 80089f2:	bd80      	pop	{r7, pc}
 80089f4:	58024400 	.word	0x58024400
 80089f8:	007a1200 	.word	0x007a1200

080089fc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008a00:	f7fe f816 	bl	8006a30 <HAL_RCC_GetHCLKFreq>
 8008a04:	4602      	mov	r2, r0
 8008a06:	4b06      	ldr	r3, [pc, #24]	@ (8008a20 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008a08:	6a1b      	ldr	r3, [r3, #32]
 8008a0a:	091b      	lsrs	r3, r3, #4
 8008a0c:	f003 0307 	and.w	r3, r3, #7
 8008a10:	4904      	ldr	r1, [pc, #16]	@ (8008a24 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008a12:	5ccb      	ldrb	r3, [r1, r3]
 8008a14:	f003 031f 	and.w	r3, r3, #31
 8008a18:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	bd80      	pop	{r7, pc}
 8008a20:	58024400 	.word	0x58024400
 8008a24:	0800eae0 	.word	0x0800eae0

08008a28 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008a28:	b480      	push	{r7}
 8008a2a:	b089      	sub	sp, #36	@ 0x24
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008a30:	4ba1      	ldr	r3, [pc, #644]	@ (8008cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a34:	f003 0303 	and.w	r3, r3, #3
 8008a38:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008a3a:	4b9f      	ldr	r3, [pc, #636]	@ (8008cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a3e:	0b1b      	lsrs	r3, r3, #12
 8008a40:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008a44:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008a46:	4b9c      	ldr	r3, [pc, #624]	@ (8008cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a4a:	091b      	lsrs	r3, r3, #4
 8008a4c:	f003 0301 	and.w	r3, r3, #1
 8008a50:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008a52:	4b99      	ldr	r3, [pc, #612]	@ (8008cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a56:	08db      	lsrs	r3, r3, #3
 8008a58:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008a5c:	693a      	ldr	r2, [r7, #16]
 8008a5e:	fb02 f303 	mul.w	r3, r2, r3
 8008a62:	ee07 3a90 	vmov	s15, r3
 8008a66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a6a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008a6e:	697b      	ldr	r3, [r7, #20]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	f000 8111 	beq.w	8008c98 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008a76:	69bb      	ldr	r3, [r7, #24]
 8008a78:	2b02      	cmp	r3, #2
 8008a7a:	f000 8083 	beq.w	8008b84 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008a7e:	69bb      	ldr	r3, [r7, #24]
 8008a80:	2b02      	cmp	r3, #2
 8008a82:	f200 80a1 	bhi.w	8008bc8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008a86:	69bb      	ldr	r3, [r7, #24]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d003      	beq.n	8008a94 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008a8c:	69bb      	ldr	r3, [r7, #24]
 8008a8e:	2b01      	cmp	r3, #1
 8008a90:	d056      	beq.n	8008b40 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008a92:	e099      	b.n	8008bc8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008a94:	4b88      	ldr	r3, [pc, #544]	@ (8008cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f003 0320 	and.w	r3, r3, #32
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d02d      	beq.n	8008afc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008aa0:	4b85      	ldr	r3, [pc, #532]	@ (8008cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	08db      	lsrs	r3, r3, #3
 8008aa6:	f003 0303 	and.w	r3, r3, #3
 8008aaa:	4a84      	ldr	r2, [pc, #528]	@ (8008cbc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008aac:	fa22 f303 	lsr.w	r3, r2, r3
 8008ab0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	ee07 3a90 	vmov	s15, r3
 8008ab8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008abc:	697b      	ldr	r3, [r7, #20]
 8008abe:	ee07 3a90 	vmov	s15, r3
 8008ac2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ac6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008aca:	4b7b      	ldr	r3, [pc, #492]	@ (8008cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008acc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ace:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ad2:	ee07 3a90 	vmov	s15, r3
 8008ad6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ada:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ade:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008cc0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008ae2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ae6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008aea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008aee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008af2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008af6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008afa:	e087      	b.n	8008c0c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008afc:	697b      	ldr	r3, [r7, #20]
 8008afe:	ee07 3a90 	vmov	s15, r3
 8008b02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b06:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008b0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b0e:	4b6a      	ldr	r3, [pc, #424]	@ (8008cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b16:	ee07 3a90 	vmov	s15, r3
 8008b1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b22:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008cc0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008b26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b3e:	e065      	b.n	8008c0c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008b40:	697b      	ldr	r3, [r7, #20]
 8008b42:	ee07 3a90 	vmov	s15, r3
 8008b46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b4a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008cc8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008b4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b52:	4b59      	ldr	r3, [pc, #356]	@ (8008cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b5a:	ee07 3a90 	vmov	s15, r3
 8008b5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b62:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b66:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008cc0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008b6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b82:	e043      	b.n	8008c0c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008b84:	697b      	ldr	r3, [r7, #20]
 8008b86:	ee07 3a90 	vmov	s15, r3
 8008b8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b8e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008ccc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008b92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b96:	4b48      	ldr	r3, [pc, #288]	@ (8008cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b9e:	ee07 3a90 	vmov	s15, r3
 8008ba2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ba6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008baa:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008cc0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008bae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008bba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008bbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bc2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008bc6:	e021      	b.n	8008c0c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008bc8:	697b      	ldr	r3, [r7, #20]
 8008bca:	ee07 3a90 	vmov	s15, r3
 8008bce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bd2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008cc8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008bd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bda:	4b37      	ldr	r3, [pc, #220]	@ (8008cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008bdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008be2:	ee07 3a90 	vmov	s15, r3
 8008be6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bea:	ed97 6a03 	vldr	s12, [r7, #12]
 8008bee:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008cc0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008bf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bfa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008bfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008c0a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008c0c:	4b2a      	ldr	r3, [pc, #168]	@ (8008cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c10:	0a5b      	lsrs	r3, r3, #9
 8008c12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c16:	ee07 3a90 	vmov	s15, r3
 8008c1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c1e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008c22:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008c26:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c32:	ee17 2a90 	vmov	r2, s15
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008c3a:	4b1f      	ldr	r3, [pc, #124]	@ (8008cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c3e:	0c1b      	lsrs	r3, r3, #16
 8008c40:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c44:	ee07 3a90 	vmov	s15, r3
 8008c48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c4c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008c50:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008c54:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c60:	ee17 2a90 	vmov	r2, s15
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008c68:	4b13      	ldr	r3, [pc, #76]	@ (8008cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c6c:	0e1b      	lsrs	r3, r3, #24
 8008c6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c72:	ee07 3a90 	vmov	s15, r3
 8008c76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c7a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008c7e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008c82:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c8e:	ee17 2a90 	vmov	r2, s15
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008c96:	e008      	b.n	8008caa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	609a      	str	r2, [r3, #8]
}
 8008caa:	bf00      	nop
 8008cac:	3724      	adds	r7, #36	@ 0x24
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb4:	4770      	bx	lr
 8008cb6:	bf00      	nop
 8008cb8:	58024400 	.word	0x58024400
 8008cbc:	03d09000 	.word	0x03d09000
 8008cc0:	46000000 	.word	0x46000000
 8008cc4:	4c742400 	.word	0x4c742400
 8008cc8:	4a742400 	.word	0x4a742400
 8008ccc:	4af42400 	.word	0x4af42400

08008cd0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008cd0:	b480      	push	{r7}
 8008cd2:	b089      	sub	sp, #36	@ 0x24
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008cd8:	4ba1      	ldr	r3, [pc, #644]	@ (8008f60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008cda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cdc:	f003 0303 	and.w	r3, r3, #3
 8008ce0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008ce2:	4b9f      	ldr	r3, [pc, #636]	@ (8008f60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ce4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ce6:	0d1b      	lsrs	r3, r3, #20
 8008ce8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008cec:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008cee:	4b9c      	ldr	r3, [pc, #624]	@ (8008f60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008cf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cf2:	0a1b      	lsrs	r3, r3, #8
 8008cf4:	f003 0301 	and.w	r3, r3, #1
 8008cf8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008cfa:	4b99      	ldr	r3, [pc, #612]	@ (8008f60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008cfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008cfe:	08db      	lsrs	r3, r3, #3
 8008d00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008d04:	693a      	ldr	r2, [r7, #16]
 8008d06:	fb02 f303 	mul.w	r3, r2, r3
 8008d0a:	ee07 3a90 	vmov	s15, r3
 8008d0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d12:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008d16:	697b      	ldr	r3, [r7, #20]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	f000 8111 	beq.w	8008f40 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008d1e:	69bb      	ldr	r3, [r7, #24]
 8008d20:	2b02      	cmp	r3, #2
 8008d22:	f000 8083 	beq.w	8008e2c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008d26:	69bb      	ldr	r3, [r7, #24]
 8008d28:	2b02      	cmp	r3, #2
 8008d2a:	f200 80a1 	bhi.w	8008e70 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008d2e:	69bb      	ldr	r3, [r7, #24]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d003      	beq.n	8008d3c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008d34:	69bb      	ldr	r3, [r7, #24]
 8008d36:	2b01      	cmp	r3, #1
 8008d38:	d056      	beq.n	8008de8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008d3a:	e099      	b.n	8008e70 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008d3c:	4b88      	ldr	r3, [pc, #544]	@ (8008f60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	f003 0320 	and.w	r3, r3, #32
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d02d      	beq.n	8008da4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008d48:	4b85      	ldr	r3, [pc, #532]	@ (8008f60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	08db      	lsrs	r3, r3, #3
 8008d4e:	f003 0303 	and.w	r3, r3, #3
 8008d52:	4a84      	ldr	r2, [pc, #528]	@ (8008f64 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008d54:	fa22 f303 	lsr.w	r3, r2, r3
 8008d58:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008d5a:	68bb      	ldr	r3, [r7, #8]
 8008d5c:	ee07 3a90 	vmov	s15, r3
 8008d60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d64:	697b      	ldr	r3, [r7, #20]
 8008d66:	ee07 3a90 	vmov	s15, r3
 8008d6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d72:	4b7b      	ldr	r3, [pc, #492]	@ (8008f60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d7a:	ee07 3a90 	vmov	s15, r3
 8008d7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d82:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d86:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008f68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008d8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d9e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008da2:	e087      	b.n	8008eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008da4:	697b      	ldr	r3, [r7, #20]
 8008da6:	ee07 3a90 	vmov	s15, r3
 8008daa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dae:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008f6c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008db2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008db6:	4b6a      	ldr	r3, [pc, #424]	@ (8008f60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008dba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dbe:	ee07 3a90 	vmov	s15, r3
 8008dc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008dca:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008f68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008dce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008dd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008dd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008dda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008dde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008de2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008de6:	e065      	b.n	8008eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008de8:	697b      	ldr	r3, [r7, #20]
 8008dea:	ee07 3a90 	vmov	s15, r3
 8008dee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008df2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008f70 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008df6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008dfa:	4b59      	ldr	r3, [pc, #356]	@ (8008f60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008dfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e02:	ee07 3a90 	vmov	s15, r3
 8008e06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e0e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008f68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008e12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008e1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e2a:	e043      	b.n	8008eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008e2c:	697b      	ldr	r3, [r7, #20]
 8008e2e:	ee07 3a90 	vmov	s15, r3
 8008e32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e36:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008f74 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008e3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e3e:	4b48      	ldr	r3, [pc, #288]	@ (8008f60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e46:	ee07 3a90 	vmov	s15, r3
 8008e4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e52:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008f68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008e56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008e62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e6e:	e021      	b.n	8008eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008e70:	697b      	ldr	r3, [r7, #20]
 8008e72:	ee07 3a90 	vmov	s15, r3
 8008e76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e7a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008f70 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008e7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e82:	4b37      	ldr	r3, [pc, #220]	@ (8008f60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e8a:	ee07 3a90 	vmov	s15, r3
 8008e8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e92:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e96:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008f68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008e9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ea2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008ea6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008eaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008eae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008eb2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008eb4:	4b2a      	ldr	r3, [pc, #168]	@ (8008f60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008eb8:	0a5b      	lsrs	r3, r3, #9
 8008eba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ebe:	ee07 3a90 	vmov	s15, r3
 8008ec2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ec6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008eca:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ece:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ed2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ed6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008eda:	ee17 2a90 	vmov	r2, s15
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008ee2:	4b1f      	ldr	r3, [pc, #124]	@ (8008f60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ee6:	0c1b      	lsrs	r3, r3, #16
 8008ee8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008eec:	ee07 3a90 	vmov	s15, r3
 8008ef0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ef4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008ef8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008efc:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f08:	ee17 2a90 	vmov	r2, s15
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008f10:	4b13      	ldr	r3, [pc, #76]	@ (8008f60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f14:	0e1b      	lsrs	r3, r3, #24
 8008f16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f1a:	ee07 3a90 	vmov	s15, r3
 8008f1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f22:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008f26:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f2a:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f36:	ee17 2a90 	vmov	r2, s15
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008f3e:	e008      	b.n	8008f52 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2200      	movs	r2, #0
 8008f44:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2200      	movs	r2, #0
 8008f4a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2200      	movs	r2, #0
 8008f50:	609a      	str	r2, [r3, #8]
}
 8008f52:	bf00      	nop
 8008f54:	3724      	adds	r7, #36	@ 0x24
 8008f56:	46bd      	mov	sp, r7
 8008f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5c:	4770      	bx	lr
 8008f5e:	bf00      	nop
 8008f60:	58024400 	.word	0x58024400
 8008f64:	03d09000 	.word	0x03d09000
 8008f68:	46000000 	.word	0x46000000
 8008f6c:	4c742400 	.word	0x4c742400
 8008f70:	4a742400 	.word	0x4a742400
 8008f74:	4af42400 	.word	0x4af42400

08008f78 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8008f78:	b480      	push	{r7}
 8008f7a:	b089      	sub	sp, #36	@ 0x24
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008f80:	4ba0      	ldr	r3, [pc, #640]	@ (8009204 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008f82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f84:	f003 0303 	and.w	r3, r3, #3
 8008f88:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8008f8a:	4b9e      	ldr	r3, [pc, #632]	@ (8009204 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008f8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f8e:	091b      	lsrs	r3, r3, #4
 8008f90:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008f94:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008f96:	4b9b      	ldr	r3, [pc, #620]	@ (8009204 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008f98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f9a:	f003 0301 	and.w	r3, r3, #1
 8008f9e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008fa0:	4b98      	ldr	r3, [pc, #608]	@ (8009204 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008fa2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008fa4:	08db      	lsrs	r3, r3, #3
 8008fa6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008faa:	693a      	ldr	r2, [r7, #16]
 8008fac:	fb02 f303 	mul.w	r3, r2, r3
 8008fb0:	ee07 3a90 	vmov	s15, r3
 8008fb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fb8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008fbc:	697b      	ldr	r3, [r7, #20]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	f000 8111 	beq.w	80091e6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008fc4:	69bb      	ldr	r3, [r7, #24]
 8008fc6:	2b02      	cmp	r3, #2
 8008fc8:	f000 8083 	beq.w	80090d2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008fcc:	69bb      	ldr	r3, [r7, #24]
 8008fce:	2b02      	cmp	r3, #2
 8008fd0:	f200 80a1 	bhi.w	8009116 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008fd4:	69bb      	ldr	r3, [r7, #24]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d003      	beq.n	8008fe2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8008fda:	69bb      	ldr	r3, [r7, #24]
 8008fdc:	2b01      	cmp	r3, #1
 8008fde:	d056      	beq.n	800908e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8008fe0:	e099      	b.n	8009116 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008fe2:	4b88      	ldr	r3, [pc, #544]	@ (8009204 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	f003 0320 	and.w	r3, r3, #32
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d02d      	beq.n	800904a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008fee:	4b85      	ldr	r3, [pc, #532]	@ (8009204 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	08db      	lsrs	r3, r3, #3
 8008ff4:	f003 0303 	and.w	r3, r3, #3
 8008ff8:	4a83      	ldr	r2, [pc, #524]	@ (8009208 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8008ffa:	fa22 f303 	lsr.w	r3, r2, r3
 8008ffe:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	ee07 3a90 	vmov	s15, r3
 8009006:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800900a:	697b      	ldr	r3, [r7, #20]
 800900c:	ee07 3a90 	vmov	s15, r3
 8009010:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009014:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009018:	4b7a      	ldr	r3, [pc, #488]	@ (8009204 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800901a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800901c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009020:	ee07 3a90 	vmov	s15, r3
 8009024:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009028:	ed97 6a03 	vldr	s12, [r7, #12]
 800902c:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800920c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009030:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009034:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009038:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800903c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009040:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009044:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009048:	e087      	b.n	800915a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800904a:	697b      	ldr	r3, [r7, #20]
 800904c:	ee07 3a90 	vmov	s15, r3
 8009050:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009054:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8009210 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009058:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800905c:	4b69      	ldr	r3, [pc, #420]	@ (8009204 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800905e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009060:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009064:	ee07 3a90 	vmov	s15, r3
 8009068:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800906c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009070:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800920c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009074:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009078:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800907c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009080:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009084:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009088:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800908c:	e065      	b.n	800915a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800908e:	697b      	ldr	r3, [r7, #20]
 8009090:	ee07 3a90 	vmov	s15, r3
 8009094:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009098:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8009214 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800909c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090a0:	4b58      	ldr	r3, [pc, #352]	@ (8009204 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80090a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090a8:	ee07 3a90 	vmov	s15, r3
 80090ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090b0:	ed97 6a03 	vldr	s12, [r7, #12]
 80090b4:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800920c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80090b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090c0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80090c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090cc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80090d0:	e043      	b.n	800915a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80090d2:	697b      	ldr	r3, [r7, #20]
 80090d4:	ee07 3a90 	vmov	s15, r3
 80090d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090dc:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8009218 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80090e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090e4:	4b47      	ldr	r3, [pc, #284]	@ (8009204 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80090e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090ec:	ee07 3a90 	vmov	s15, r3
 80090f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090f4:	ed97 6a03 	vldr	s12, [r7, #12]
 80090f8:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800920c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80090fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009100:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009104:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009108:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800910c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009110:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009114:	e021      	b.n	800915a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009116:	697b      	ldr	r3, [r7, #20]
 8009118:	ee07 3a90 	vmov	s15, r3
 800911c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009120:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8009210 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009124:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009128:	4b36      	ldr	r3, [pc, #216]	@ (8009204 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800912a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800912c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009130:	ee07 3a90 	vmov	s15, r3
 8009134:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009138:	ed97 6a03 	vldr	s12, [r7, #12]
 800913c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800920c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009140:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009144:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009148:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800914c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009150:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009154:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009158:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800915a:	4b2a      	ldr	r3, [pc, #168]	@ (8009204 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800915c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800915e:	0a5b      	lsrs	r3, r3, #9
 8009160:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009164:	ee07 3a90 	vmov	s15, r3
 8009168:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800916c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009170:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009174:	edd7 6a07 	vldr	s13, [r7, #28]
 8009178:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800917c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009180:	ee17 2a90 	vmov	r2, s15
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8009188:	4b1e      	ldr	r3, [pc, #120]	@ (8009204 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800918a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800918c:	0c1b      	lsrs	r3, r3, #16
 800918e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009192:	ee07 3a90 	vmov	s15, r3
 8009196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800919a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800919e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80091a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80091a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80091aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80091ae:	ee17 2a90 	vmov	r2, s15
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80091b6:	4b13      	ldr	r3, [pc, #76]	@ (8009204 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80091b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091ba:	0e1b      	lsrs	r3, r3, #24
 80091bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80091c0:	ee07 3a90 	vmov	s15, r3
 80091c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091c8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80091cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80091d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80091d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80091d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80091dc:	ee17 2a90 	vmov	r2, s15
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80091e4:	e008      	b.n	80091f8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2200      	movs	r2, #0
 80091ea:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2200      	movs	r2, #0
 80091f0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2200      	movs	r2, #0
 80091f6:	609a      	str	r2, [r3, #8]
}
 80091f8:	bf00      	nop
 80091fa:	3724      	adds	r7, #36	@ 0x24
 80091fc:	46bd      	mov	sp, r7
 80091fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009202:	4770      	bx	lr
 8009204:	58024400 	.word	0x58024400
 8009208:	03d09000 	.word	0x03d09000
 800920c:	46000000 	.word	0x46000000
 8009210:	4c742400 	.word	0x4c742400
 8009214:	4a742400 	.word	0x4a742400
 8009218:	4af42400 	.word	0x4af42400

0800921c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b084      	sub	sp, #16
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
 8009224:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009226:	2300      	movs	r3, #0
 8009228:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800922a:	4b53      	ldr	r3, [pc, #332]	@ (8009378 <RCCEx_PLL2_Config+0x15c>)
 800922c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800922e:	f003 0303 	and.w	r3, r3, #3
 8009232:	2b03      	cmp	r3, #3
 8009234:	d101      	bne.n	800923a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009236:	2301      	movs	r3, #1
 8009238:	e099      	b.n	800936e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800923a:	4b4f      	ldr	r3, [pc, #316]	@ (8009378 <RCCEx_PLL2_Config+0x15c>)
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	4a4e      	ldr	r2, [pc, #312]	@ (8009378 <RCCEx_PLL2_Config+0x15c>)
 8009240:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009244:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009246:	f7f8 fcd1 	bl	8001bec <HAL_GetTick>
 800924a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800924c:	e008      	b.n	8009260 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800924e:	f7f8 fccd 	bl	8001bec <HAL_GetTick>
 8009252:	4602      	mov	r2, r0
 8009254:	68bb      	ldr	r3, [r7, #8]
 8009256:	1ad3      	subs	r3, r2, r3
 8009258:	2b02      	cmp	r3, #2
 800925a:	d901      	bls.n	8009260 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800925c:	2303      	movs	r3, #3
 800925e:	e086      	b.n	800936e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009260:	4b45      	ldr	r3, [pc, #276]	@ (8009378 <RCCEx_PLL2_Config+0x15c>)
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009268:	2b00      	cmp	r3, #0
 800926a:	d1f0      	bne.n	800924e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800926c:	4b42      	ldr	r3, [pc, #264]	@ (8009378 <RCCEx_PLL2_Config+0x15c>)
 800926e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009270:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	031b      	lsls	r3, r3, #12
 800927a:	493f      	ldr	r1, [pc, #252]	@ (8009378 <RCCEx_PLL2_Config+0x15c>)
 800927c:	4313      	orrs	r3, r2
 800927e:	628b      	str	r3, [r1, #40]	@ 0x28
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	685b      	ldr	r3, [r3, #4]
 8009284:	3b01      	subs	r3, #1
 8009286:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	689b      	ldr	r3, [r3, #8]
 800928e:	3b01      	subs	r3, #1
 8009290:	025b      	lsls	r3, r3, #9
 8009292:	b29b      	uxth	r3, r3
 8009294:	431a      	orrs	r2, r3
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	68db      	ldr	r3, [r3, #12]
 800929a:	3b01      	subs	r3, #1
 800929c:	041b      	lsls	r3, r3, #16
 800929e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80092a2:	431a      	orrs	r2, r3
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	691b      	ldr	r3, [r3, #16]
 80092a8:	3b01      	subs	r3, #1
 80092aa:	061b      	lsls	r3, r3, #24
 80092ac:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80092b0:	4931      	ldr	r1, [pc, #196]	@ (8009378 <RCCEx_PLL2_Config+0x15c>)
 80092b2:	4313      	orrs	r3, r2
 80092b4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80092b6:	4b30      	ldr	r3, [pc, #192]	@ (8009378 <RCCEx_PLL2_Config+0x15c>)
 80092b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092ba:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	695b      	ldr	r3, [r3, #20]
 80092c2:	492d      	ldr	r1, [pc, #180]	@ (8009378 <RCCEx_PLL2_Config+0x15c>)
 80092c4:	4313      	orrs	r3, r2
 80092c6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80092c8:	4b2b      	ldr	r3, [pc, #172]	@ (8009378 <RCCEx_PLL2_Config+0x15c>)
 80092ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092cc:	f023 0220 	bic.w	r2, r3, #32
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	699b      	ldr	r3, [r3, #24]
 80092d4:	4928      	ldr	r1, [pc, #160]	@ (8009378 <RCCEx_PLL2_Config+0x15c>)
 80092d6:	4313      	orrs	r3, r2
 80092d8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80092da:	4b27      	ldr	r3, [pc, #156]	@ (8009378 <RCCEx_PLL2_Config+0x15c>)
 80092dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092de:	4a26      	ldr	r2, [pc, #152]	@ (8009378 <RCCEx_PLL2_Config+0x15c>)
 80092e0:	f023 0310 	bic.w	r3, r3, #16
 80092e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80092e6:	4b24      	ldr	r3, [pc, #144]	@ (8009378 <RCCEx_PLL2_Config+0x15c>)
 80092e8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80092ea:	4b24      	ldr	r3, [pc, #144]	@ (800937c <RCCEx_PLL2_Config+0x160>)
 80092ec:	4013      	ands	r3, r2
 80092ee:	687a      	ldr	r2, [r7, #4]
 80092f0:	69d2      	ldr	r2, [r2, #28]
 80092f2:	00d2      	lsls	r2, r2, #3
 80092f4:	4920      	ldr	r1, [pc, #128]	@ (8009378 <RCCEx_PLL2_Config+0x15c>)
 80092f6:	4313      	orrs	r3, r2
 80092f8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80092fa:	4b1f      	ldr	r3, [pc, #124]	@ (8009378 <RCCEx_PLL2_Config+0x15c>)
 80092fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092fe:	4a1e      	ldr	r2, [pc, #120]	@ (8009378 <RCCEx_PLL2_Config+0x15c>)
 8009300:	f043 0310 	orr.w	r3, r3, #16
 8009304:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d106      	bne.n	800931a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800930c:	4b1a      	ldr	r3, [pc, #104]	@ (8009378 <RCCEx_PLL2_Config+0x15c>)
 800930e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009310:	4a19      	ldr	r2, [pc, #100]	@ (8009378 <RCCEx_PLL2_Config+0x15c>)
 8009312:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009316:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009318:	e00f      	b.n	800933a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	2b01      	cmp	r3, #1
 800931e:	d106      	bne.n	800932e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009320:	4b15      	ldr	r3, [pc, #84]	@ (8009378 <RCCEx_PLL2_Config+0x15c>)
 8009322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009324:	4a14      	ldr	r2, [pc, #80]	@ (8009378 <RCCEx_PLL2_Config+0x15c>)
 8009326:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800932a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800932c:	e005      	b.n	800933a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800932e:	4b12      	ldr	r3, [pc, #72]	@ (8009378 <RCCEx_PLL2_Config+0x15c>)
 8009330:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009332:	4a11      	ldr	r2, [pc, #68]	@ (8009378 <RCCEx_PLL2_Config+0x15c>)
 8009334:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009338:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800933a:	4b0f      	ldr	r3, [pc, #60]	@ (8009378 <RCCEx_PLL2_Config+0x15c>)
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	4a0e      	ldr	r2, [pc, #56]	@ (8009378 <RCCEx_PLL2_Config+0x15c>)
 8009340:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009344:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009346:	f7f8 fc51 	bl	8001bec <HAL_GetTick>
 800934a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800934c:	e008      	b.n	8009360 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800934e:	f7f8 fc4d 	bl	8001bec <HAL_GetTick>
 8009352:	4602      	mov	r2, r0
 8009354:	68bb      	ldr	r3, [r7, #8]
 8009356:	1ad3      	subs	r3, r2, r3
 8009358:	2b02      	cmp	r3, #2
 800935a:	d901      	bls.n	8009360 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800935c:	2303      	movs	r3, #3
 800935e:	e006      	b.n	800936e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009360:	4b05      	ldr	r3, [pc, #20]	@ (8009378 <RCCEx_PLL2_Config+0x15c>)
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009368:	2b00      	cmp	r3, #0
 800936a:	d0f0      	beq.n	800934e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800936c:	7bfb      	ldrb	r3, [r7, #15]
}
 800936e:	4618      	mov	r0, r3
 8009370:	3710      	adds	r7, #16
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}
 8009376:	bf00      	nop
 8009378:	58024400 	.word	0x58024400
 800937c:	ffff0007 	.word	0xffff0007

08009380 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b084      	sub	sp, #16
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
 8009388:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800938a:	2300      	movs	r3, #0
 800938c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800938e:	4b53      	ldr	r3, [pc, #332]	@ (80094dc <RCCEx_PLL3_Config+0x15c>)
 8009390:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009392:	f003 0303 	and.w	r3, r3, #3
 8009396:	2b03      	cmp	r3, #3
 8009398:	d101      	bne.n	800939e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800939a:	2301      	movs	r3, #1
 800939c:	e099      	b.n	80094d2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800939e:	4b4f      	ldr	r3, [pc, #316]	@ (80094dc <RCCEx_PLL3_Config+0x15c>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	4a4e      	ldr	r2, [pc, #312]	@ (80094dc <RCCEx_PLL3_Config+0x15c>)
 80093a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80093a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80093aa:	f7f8 fc1f 	bl	8001bec <HAL_GetTick>
 80093ae:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80093b0:	e008      	b.n	80093c4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80093b2:	f7f8 fc1b 	bl	8001bec <HAL_GetTick>
 80093b6:	4602      	mov	r2, r0
 80093b8:	68bb      	ldr	r3, [r7, #8]
 80093ba:	1ad3      	subs	r3, r2, r3
 80093bc:	2b02      	cmp	r3, #2
 80093be:	d901      	bls.n	80093c4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80093c0:	2303      	movs	r3, #3
 80093c2:	e086      	b.n	80094d2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80093c4:	4b45      	ldr	r3, [pc, #276]	@ (80094dc <RCCEx_PLL3_Config+0x15c>)
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d1f0      	bne.n	80093b2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80093d0:	4b42      	ldr	r3, [pc, #264]	@ (80094dc <RCCEx_PLL3_Config+0x15c>)
 80093d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093d4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	051b      	lsls	r3, r3, #20
 80093de:	493f      	ldr	r1, [pc, #252]	@ (80094dc <RCCEx_PLL3_Config+0x15c>)
 80093e0:	4313      	orrs	r3, r2
 80093e2:	628b      	str	r3, [r1, #40]	@ 0x28
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	685b      	ldr	r3, [r3, #4]
 80093e8:	3b01      	subs	r3, #1
 80093ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	689b      	ldr	r3, [r3, #8]
 80093f2:	3b01      	subs	r3, #1
 80093f4:	025b      	lsls	r3, r3, #9
 80093f6:	b29b      	uxth	r3, r3
 80093f8:	431a      	orrs	r2, r3
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	68db      	ldr	r3, [r3, #12]
 80093fe:	3b01      	subs	r3, #1
 8009400:	041b      	lsls	r3, r3, #16
 8009402:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009406:	431a      	orrs	r2, r3
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	691b      	ldr	r3, [r3, #16]
 800940c:	3b01      	subs	r3, #1
 800940e:	061b      	lsls	r3, r3, #24
 8009410:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009414:	4931      	ldr	r1, [pc, #196]	@ (80094dc <RCCEx_PLL3_Config+0x15c>)
 8009416:	4313      	orrs	r3, r2
 8009418:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800941a:	4b30      	ldr	r3, [pc, #192]	@ (80094dc <RCCEx_PLL3_Config+0x15c>)
 800941c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800941e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	695b      	ldr	r3, [r3, #20]
 8009426:	492d      	ldr	r1, [pc, #180]	@ (80094dc <RCCEx_PLL3_Config+0x15c>)
 8009428:	4313      	orrs	r3, r2
 800942a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800942c:	4b2b      	ldr	r3, [pc, #172]	@ (80094dc <RCCEx_PLL3_Config+0x15c>)
 800942e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009430:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	699b      	ldr	r3, [r3, #24]
 8009438:	4928      	ldr	r1, [pc, #160]	@ (80094dc <RCCEx_PLL3_Config+0x15c>)
 800943a:	4313      	orrs	r3, r2
 800943c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800943e:	4b27      	ldr	r3, [pc, #156]	@ (80094dc <RCCEx_PLL3_Config+0x15c>)
 8009440:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009442:	4a26      	ldr	r2, [pc, #152]	@ (80094dc <RCCEx_PLL3_Config+0x15c>)
 8009444:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009448:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800944a:	4b24      	ldr	r3, [pc, #144]	@ (80094dc <RCCEx_PLL3_Config+0x15c>)
 800944c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800944e:	4b24      	ldr	r3, [pc, #144]	@ (80094e0 <RCCEx_PLL3_Config+0x160>)
 8009450:	4013      	ands	r3, r2
 8009452:	687a      	ldr	r2, [r7, #4]
 8009454:	69d2      	ldr	r2, [r2, #28]
 8009456:	00d2      	lsls	r2, r2, #3
 8009458:	4920      	ldr	r1, [pc, #128]	@ (80094dc <RCCEx_PLL3_Config+0x15c>)
 800945a:	4313      	orrs	r3, r2
 800945c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800945e:	4b1f      	ldr	r3, [pc, #124]	@ (80094dc <RCCEx_PLL3_Config+0x15c>)
 8009460:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009462:	4a1e      	ldr	r2, [pc, #120]	@ (80094dc <RCCEx_PLL3_Config+0x15c>)
 8009464:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009468:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d106      	bne.n	800947e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009470:	4b1a      	ldr	r3, [pc, #104]	@ (80094dc <RCCEx_PLL3_Config+0x15c>)
 8009472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009474:	4a19      	ldr	r2, [pc, #100]	@ (80094dc <RCCEx_PLL3_Config+0x15c>)
 8009476:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800947a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800947c:	e00f      	b.n	800949e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	2b01      	cmp	r3, #1
 8009482:	d106      	bne.n	8009492 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009484:	4b15      	ldr	r3, [pc, #84]	@ (80094dc <RCCEx_PLL3_Config+0x15c>)
 8009486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009488:	4a14      	ldr	r2, [pc, #80]	@ (80094dc <RCCEx_PLL3_Config+0x15c>)
 800948a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800948e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009490:	e005      	b.n	800949e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009492:	4b12      	ldr	r3, [pc, #72]	@ (80094dc <RCCEx_PLL3_Config+0x15c>)
 8009494:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009496:	4a11      	ldr	r2, [pc, #68]	@ (80094dc <RCCEx_PLL3_Config+0x15c>)
 8009498:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800949c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800949e:	4b0f      	ldr	r3, [pc, #60]	@ (80094dc <RCCEx_PLL3_Config+0x15c>)
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	4a0e      	ldr	r2, [pc, #56]	@ (80094dc <RCCEx_PLL3_Config+0x15c>)
 80094a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80094a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80094aa:	f7f8 fb9f 	bl	8001bec <HAL_GetTick>
 80094ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80094b0:	e008      	b.n	80094c4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80094b2:	f7f8 fb9b 	bl	8001bec <HAL_GetTick>
 80094b6:	4602      	mov	r2, r0
 80094b8:	68bb      	ldr	r3, [r7, #8]
 80094ba:	1ad3      	subs	r3, r2, r3
 80094bc:	2b02      	cmp	r3, #2
 80094be:	d901      	bls.n	80094c4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80094c0:	2303      	movs	r3, #3
 80094c2:	e006      	b.n	80094d2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80094c4:	4b05      	ldr	r3, [pc, #20]	@ (80094dc <RCCEx_PLL3_Config+0x15c>)
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d0f0      	beq.n	80094b2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80094d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80094d2:	4618      	mov	r0, r3
 80094d4:	3710      	adds	r7, #16
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bd80      	pop	{r7, pc}
 80094da:	bf00      	nop
 80094dc:	58024400 	.word	0x58024400
 80094e0:	ffff0007 	.word	0xffff0007

080094e4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b084      	sub	sp, #16
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d101      	bne.n	80094f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80094f2:	2301      	movs	r3, #1
 80094f4:	e10f      	b.n	8009716 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2200      	movs	r2, #0
 80094fa:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	4a87      	ldr	r2, [pc, #540]	@ (8009720 <HAL_SPI_Init+0x23c>)
 8009502:	4293      	cmp	r3, r2
 8009504:	d00f      	beq.n	8009526 <HAL_SPI_Init+0x42>
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	4a86      	ldr	r2, [pc, #536]	@ (8009724 <HAL_SPI_Init+0x240>)
 800950c:	4293      	cmp	r3, r2
 800950e:	d00a      	beq.n	8009526 <HAL_SPI_Init+0x42>
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	4a84      	ldr	r2, [pc, #528]	@ (8009728 <HAL_SPI_Init+0x244>)
 8009516:	4293      	cmp	r3, r2
 8009518:	d005      	beq.n	8009526 <HAL_SPI_Init+0x42>
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	68db      	ldr	r3, [r3, #12]
 800951e:	2b0f      	cmp	r3, #15
 8009520:	d901      	bls.n	8009526 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8009522:	2301      	movs	r3, #1
 8009524:	e0f7      	b.n	8009716 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8009526:	6878      	ldr	r0, [r7, #4]
 8009528:	f000 fbba 	bl	8009ca0 <SPI_GetPacketSize>
 800952c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	4a7b      	ldr	r2, [pc, #492]	@ (8009720 <HAL_SPI_Init+0x23c>)
 8009534:	4293      	cmp	r3, r2
 8009536:	d00c      	beq.n	8009552 <HAL_SPI_Init+0x6e>
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	4a79      	ldr	r2, [pc, #484]	@ (8009724 <HAL_SPI_Init+0x240>)
 800953e:	4293      	cmp	r3, r2
 8009540:	d007      	beq.n	8009552 <HAL_SPI_Init+0x6e>
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	4a78      	ldr	r2, [pc, #480]	@ (8009728 <HAL_SPI_Init+0x244>)
 8009548:	4293      	cmp	r3, r2
 800954a:	d002      	beq.n	8009552 <HAL_SPI_Init+0x6e>
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	2b08      	cmp	r3, #8
 8009550:	d811      	bhi.n	8009576 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009556:	4a72      	ldr	r2, [pc, #456]	@ (8009720 <HAL_SPI_Init+0x23c>)
 8009558:	4293      	cmp	r3, r2
 800955a:	d009      	beq.n	8009570 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	4a70      	ldr	r2, [pc, #448]	@ (8009724 <HAL_SPI_Init+0x240>)
 8009562:	4293      	cmp	r3, r2
 8009564:	d004      	beq.n	8009570 <HAL_SPI_Init+0x8c>
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	4a6f      	ldr	r2, [pc, #444]	@ (8009728 <HAL_SPI_Init+0x244>)
 800956c:	4293      	cmp	r3, r2
 800956e:	d104      	bne.n	800957a <HAL_SPI_Init+0x96>
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	2b10      	cmp	r3, #16
 8009574:	d901      	bls.n	800957a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8009576:	2301      	movs	r3, #1
 8009578:	e0cd      	b.n	8009716 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009580:	b2db      	uxtb	r3, r3
 8009582:	2b00      	cmp	r3, #0
 8009584:	d106      	bne.n	8009594 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2200      	movs	r2, #0
 800958a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800958e:	6878      	ldr	r0, [r7, #4]
 8009590:	f7f7 ff0c 	bl	80013ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2202      	movs	r2, #2
 8009598:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	681a      	ldr	r2, [r3, #0]
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	f022 0201 	bic.w	r2, r2, #1
 80095aa:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	689b      	ldr	r3, [r3, #8]
 80095b2:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80095b6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	699b      	ldr	r3, [r3, #24]
 80095bc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80095c0:	d119      	bne.n	80095f6 <HAL_SPI_Init+0x112>
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	685b      	ldr	r3, [r3, #4]
 80095c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80095ca:	d103      	bne.n	80095d4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d008      	beq.n	80095e6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d10c      	bne.n	80095f6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80095e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80095e4:	d107      	bne.n	80095f6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	681a      	ldr	r2, [r3, #0]
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80095f4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	685b      	ldr	r3, [r3, #4]
 80095fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d00f      	beq.n	8009622 <HAL_SPI_Init+0x13e>
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	68db      	ldr	r3, [r3, #12]
 8009606:	2b06      	cmp	r3, #6
 8009608:	d90b      	bls.n	8009622 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	430a      	orrs	r2, r1
 800961e:	601a      	str	r2, [r3, #0]
 8009620:	e007      	b.n	8009632 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	681a      	ldr	r2, [r3, #0]
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009630:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	69da      	ldr	r2, [r3, #28]
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800963a:	431a      	orrs	r2, r3
 800963c:	68bb      	ldr	r3, [r7, #8]
 800963e:	431a      	orrs	r2, r3
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009644:	ea42 0103 	orr.w	r1, r2, r3
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	68da      	ldr	r2, [r3, #12]
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	430a      	orrs	r2, r1
 8009652:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800965c:	431a      	orrs	r2, r3
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009662:	431a      	orrs	r2, r3
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	699b      	ldr	r3, [r3, #24]
 8009668:	431a      	orrs	r2, r3
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	691b      	ldr	r3, [r3, #16]
 800966e:	431a      	orrs	r2, r3
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	695b      	ldr	r3, [r3, #20]
 8009674:	431a      	orrs	r2, r3
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	6a1b      	ldr	r3, [r3, #32]
 800967a:	431a      	orrs	r2, r3
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	685b      	ldr	r3, [r3, #4]
 8009680:	431a      	orrs	r2, r3
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009686:	431a      	orrs	r2, r3
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	689b      	ldr	r3, [r3, #8]
 800968c:	431a      	orrs	r2, r3
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009692:	ea42 0103 	orr.w	r1, r2, r3
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	430a      	orrs	r2, r1
 80096a0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	685b      	ldr	r3, [r3, #4]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d113      	bne.n	80096d2 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	689b      	ldr	r3, [r3, #8]
 80096b0:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80096bc:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	689b      	ldr	r3, [r3, #8]
 80096c4:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80096d0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	f022 0201 	bic.w	r2, r2, #1
 80096e0:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	685b      	ldr	r3, [r3, #4]
 80096e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d00a      	beq.n	8009704 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	68db      	ldr	r3, [r3, #12]
 80096f4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	430a      	orrs	r2, r1
 8009702:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2200      	movs	r2, #0
 8009708:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2201      	movs	r2, #1
 8009710:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8009714:	2300      	movs	r3, #0
}
 8009716:	4618      	mov	r0, r3
 8009718:	3710      	adds	r7, #16
 800971a:	46bd      	mov	sp, r7
 800971c:	bd80      	pop	{r7, pc}
 800971e:	bf00      	nop
 8009720:	40013000 	.word	0x40013000
 8009724:	40003800 	.word	0x40003800
 8009728:	40003c00 	.word	0x40003c00

0800972c <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b08a      	sub	sp, #40	@ 0x28
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	691b      	ldr	r3, [r3, #16]
 800973a:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	695b      	ldr	r3, [r3, #20]
 8009742:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8009744:	6a3a      	ldr	r2, [r7, #32]
 8009746:	69fb      	ldr	r3, [r7, #28]
 8009748:	4013      	ands	r3, r2
 800974a:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	689b      	ldr	r3, [r3, #8]
 8009752:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8009754:	2300      	movs	r3, #0
 8009756:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800975e:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	3330      	adds	r3, #48	@ 0x30
 8009766:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8009768:	69fb      	ldr	r3, [r7, #28]
 800976a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800976e:	2b00      	cmp	r3, #0
 8009770:	d010      	beq.n	8009794 <HAL_SPI_IRQHandler+0x68>
 8009772:	6a3b      	ldr	r3, [r7, #32]
 8009774:	f003 0308 	and.w	r3, r3, #8
 8009778:	2b00      	cmp	r3, #0
 800977a:	d00b      	beq.n	8009794 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	699a      	ldr	r2, [r3, #24]
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800978a:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 800978c:	6878      	ldr	r0, [r7, #4]
 800978e:	f000 f9c3 	bl	8009b18 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8009792:	e192      	b.n	8009aba <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8009794:	69bb      	ldr	r3, [r7, #24]
 8009796:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800979a:	2b00      	cmp	r3, #0
 800979c:	d113      	bne.n	80097c6 <HAL_SPI_IRQHandler+0x9a>
 800979e:	69bb      	ldr	r3, [r7, #24]
 80097a0:	f003 0320 	and.w	r3, r3, #32
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d10e      	bne.n	80097c6 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 80097a8:	69bb      	ldr	r3, [r7, #24]
 80097aa:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d009      	beq.n	80097c6 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80097b6:	6878      	ldr	r0, [r7, #4]
 80097b8:	4798      	blx	r3
    hspi->RxISR(hspi);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80097be:	6878      	ldr	r0, [r7, #4]
 80097c0:	4798      	blx	r3
    handled = 1UL;
 80097c2:	2301      	movs	r3, #1
 80097c4:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80097c6:	69bb      	ldr	r3, [r7, #24]
 80097c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d10f      	bne.n	80097f0 <HAL_SPI_IRQHandler+0xc4>
 80097d0:	69bb      	ldr	r3, [r7, #24]
 80097d2:	f003 0301 	and.w	r3, r3, #1
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d00a      	beq.n	80097f0 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80097da:	69bb      	ldr	r3, [r7, #24]
 80097dc:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d105      	bne.n	80097f0 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80097e8:	6878      	ldr	r0, [r7, #4]
 80097ea:	4798      	blx	r3
    handled = 1UL;
 80097ec:	2301      	movs	r3, #1
 80097ee:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80097f0:	69bb      	ldr	r3, [r7, #24]
 80097f2:	f003 0320 	and.w	r3, r3, #32
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d10f      	bne.n	800981a <HAL_SPI_IRQHandler+0xee>
 80097fa:	69bb      	ldr	r3, [r7, #24]
 80097fc:	f003 0302 	and.w	r3, r3, #2
 8009800:	2b00      	cmp	r3, #0
 8009802:	d00a      	beq.n	800981a <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8009804:	69bb      	ldr	r3, [r7, #24]
 8009806:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800980a:	2b00      	cmp	r3, #0
 800980c:	d105      	bne.n	800981a <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	4798      	blx	r3
    handled = 1UL;
 8009816:	2301      	movs	r3, #1
 8009818:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800981a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800981c:	2b00      	cmp	r3, #0
 800981e:	f040 8147 	bne.w	8009ab0 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8009822:	69bb      	ldr	r3, [r7, #24]
 8009824:	f003 0308 	and.w	r3, r3, #8
 8009828:	2b00      	cmp	r3, #0
 800982a:	f000 808b 	beq.w	8009944 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	699a      	ldr	r2, [r3, #24]
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	f042 0208 	orr.w	r2, r2, #8
 800983c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	699a      	ldr	r2, [r3, #24]
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	f042 0210 	orr.w	r2, r2, #16
 800984c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	699a      	ldr	r2, [r3, #24]
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800985c:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	691a      	ldr	r2, [r3, #16]
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	f022 0208 	bic.w	r2, r2, #8
 800986c:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	689b      	ldr	r3, [r3, #8]
 8009874:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8009878:	2b00      	cmp	r3, #0
 800987a:	d13d      	bne.n	80098f8 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 800987c:	e036      	b.n	80098ec <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	68db      	ldr	r3, [r3, #12]
 8009882:	2b0f      	cmp	r3, #15
 8009884:	d90b      	bls.n	800989e <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681a      	ldr	r2, [r3, #0]
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800988e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8009890:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009896:	1d1a      	adds	r2, r3, #4
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	665a      	str	r2, [r3, #100]	@ 0x64
 800989c:	e01d      	b.n	80098da <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	68db      	ldr	r3, [r3, #12]
 80098a2:	2b07      	cmp	r3, #7
 80098a4:	d90b      	bls.n	80098be <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80098aa:	68fa      	ldr	r2, [r7, #12]
 80098ac:	8812      	ldrh	r2, [r2, #0]
 80098ae:	b292      	uxth	r2, r2
 80098b0:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80098b6:	1c9a      	adds	r2, r3, #2
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	665a      	str	r2, [r3, #100]	@ 0x64
 80098bc:	e00d      	b.n	80098da <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80098ca:	7812      	ldrb	r2, [r2, #0]
 80098cc:	b2d2      	uxtb	r2, r2
 80098ce:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80098d4:	1c5a      	adds	r2, r3, #1
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80098e0:	b29b      	uxth	r3, r3
 80098e2:	3b01      	subs	r3, #1
 80098e4:	b29a      	uxth	r2, r3
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80098f2:	b29b      	uxth	r3, r3
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d1c2      	bne.n	800987e <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 80098f8:	6878      	ldr	r0, [r7, #4]
 80098fa:	f000 f931 	bl	8009b60 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	2201      	movs	r2, #1
 8009902:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800990c:	2b00      	cmp	r3, #0
 800990e:	d003      	beq.n	8009918 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8009910:	6878      	ldr	r0, [r7, #4]
 8009912:	f000 f8f7 	bl	8009b04 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8009916:	e0d0      	b.n	8009aba <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8009918:	7cfb      	ldrb	r3, [r7, #19]
 800991a:	2b05      	cmp	r3, #5
 800991c:	d103      	bne.n	8009926 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800991e:	6878      	ldr	r0, [r7, #4]
 8009920:	f000 f8e6 	bl	8009af0 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8009924:	e0c6      	b.n	8009ab4 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8009926:	7cfb      	ldrb	r3, [r7, #19]
 8009928:	2b04      	cmp	r3, #4
 800992a:	d103      	bne.n	8009934 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 800992c:	6878      	ldr	r0, [r7, #4]
 800992e:	f000 f8d5 	bl	8009adc <HAL_SPI_RxCpltCallback>
    return;
 8009932:	e0bf      	b.n	8009ab4 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8009934:	7cfb      	ldrb	r3, [r7, #19]
 8009936:	2b03      	cmp	r3, #3
 8009938:	f040 80bc 	bne.w	8009ab4 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 800993c:	6878      	ldr	r0, [r7, #4]
 800993e:	f000 f8c3 	bl	8009ac8 <HAL_SPI_TxCpltCallback>
    return;
 8009942:	e0b7      	b.n	8009ab4 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8009944:	69bb      	ldr	r3, [r7, #24]
 8009946:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 800994a:	2b00      	cmp	r3, #0
 800994c:	f000 80b5 	beq.w	8009aba <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8009950:	69bb      	ldr	r3, [r7, #24]
 8009952:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009956:	2b00      	cmp	r3, #0
 8009958:	d00f      	beq.n	800997a <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009960:	f043 0204 	orr.w	r2, r3, #4
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	699a      	ldr	r2, [r3, #24]
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009978:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800997a:	69bb      	ldr	r3, [r7, #24]
 800997c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009980:	2b00      	cmp	r3, #0
 8009982:	d00f      	beq.n	80099a4 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800998a:	f043 0201 	orr.w	r2, r3, #1
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	699a      	ldr	r2, [r3, #24]
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80099a2:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 80099a4:	69bb      	ldr	r3, [r7, #24]
 80099a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d00f      	beq.n	80099ce <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80099b4:	f043 0208 	orr.w	r2, r3, #8
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	699a      	ldr	r2, [r3, #24]
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80099cc:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 80099ce:	69bb      	ldr	r3, [r7, #24]
 80099d0:	f003 0320 	and.w	r3, r3, #32
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d00f      	beq.n	80099f8 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80099de:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	699a      	ldr	r2, [r3, #24]
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	f042 0220 	orr.w	r2, r2, #32
 80099f6:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d05a      	beq.n	8009ab8 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	681a      	ldr	r2, [r3, #0]
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	f022 0201 	bic.w	r2, r2, #1
 8009a10:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	6919      	ldr	r1, [r3, #16]
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681a      	ldr	r2, [r3, #0]
 8009a1c:	4b28      	ldr	r3, [pc, #160]	@ (8009ac0 <HAL_SPI_IRQHandler+0x394>)
 8009a1e:	400b      	ands	r3, r1
 8009a20:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8009a22:	697b      	ldr	r3, [r7, #20]
 8009a24:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8009a28:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8009a2c:	d138      	bne.n	8009aa0 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	689a      	ldr	r2, [r3, #8]
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8009a3c:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d013      	beq.n	8009a6e <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009a4a:	4a1e      	ldr	r2, [pc, #120]	@ (8009ac4 <HAL_SPI_IRQHandler+0x398>)
 8009a4c:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009a52:	4618      	mov	r0, r3
 8009a54:	f7fa f97e 	bl	8003d54 <HAL_DMA_Abort_IT>
 8009a58:	4603      	mov	r3, r0
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d007      	beq.n	8009a6e <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009a64:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d020      	beq.n	8009ab8 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009a7a:	4a12      	ldr	r2, [pc, #72]	@ (8009ac4 <HAL_SPI_IRQHandler+0x398>)
 8009a7c:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009a82:	4618      	mov	r0, r3
 8009a84:	f7fa f966 	bl	8003d54 <HAL_DMA_Abort_IT>
 8009a88:	4603      	mov	r3, r0
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d014      	beq.n	8009ab8 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009a94:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009a9e:	e00b      	b.n	8009ab8 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2201      	movs	r2, #1
 8009aa4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 8009aa8:	6878      	ldr	r0, [r7, #4]
 8009aaa:	f000 f82b 	bl	8009b04 <HAL_SPI_ErrorCallback>
    return;
 8009aae:	e003      	b.n	8009ab8 <HAL_SPI_IRQHandler+0x38c>
    return;
 8009ab0:	bf00      	nop
 8009ab2:	e002      	b.n	8009aba <HAL_SPI_IRQHandler+0x38e>
    return;
 8009ab4:	bf00      	nop
 8009ab6:	e000      	b.n	8009aba <HAL_SPI_IRQHandler+0x38e>
    return;
 8009ab8:	bf00      	nop
  }
}
 8009aba:	3728      	adds	r7, #40	@ 0x28
 8009abc:	46bd      	mov	sp, r7
 8009abe:	bd80      	pop	{r7, pc}
 8009ac0:	fffffc94 	.word	0xfffffc94
 8009ac4:	08009b2d 	.word	0x08009b2d

08009ac8 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8009ac8:	b480      	push	{r7}
 8009aca:	b083      	sub	sp, #12
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8009ad0:	bf00      	nop
 8009ad2:	370c      	adds	r7, #12
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ada:	4770      	bx	lr

08009adc <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8009adc:	b480      	push	{r7}
 8009ade:	b083      	sub	sp, #12
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8009ae4:	bf00      	nop
 8009ae6:	370c      	adds	r7, #12
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aee:	4770      	bx	lr

08009af0 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8009af0:	b480      	push	{r7}
 8009af2:	b083      	sub	sp, #12
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8009af8:	bf00      	nop
 8009afa:	370c      	adds	r7, #12
 8009afc:	46bd      	mov	sp, r7
 8009afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b02:	4770      	bx	lr

08009b04 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8009b04:	b480      	push	{r7}
 8009b06:	b083      	sub	sp, #12
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009b0c:	bf00      	nop
 8009b0e:	370c      	adds	r7, #12
 8009b10:	46bd      	mov	sp, r7
 8009b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b16:	4770      	bx	lr

08009b18 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8009b18:	b480      	push	{r7}
 8009b1a:	b083      	sub	sp, #12
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8009b20:	bf00      	nop
 8009b22:	370c      	adds	r7, #12
 8009b24:	46bd      	mov	sp, r7
 8009b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2a:	4770      	bx	lr

08009b2c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b084      	sub	sp, #16
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b38:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	2200      	movs	r2, #0
 8009b46:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	2201      	movs	r2, #1
 8009b4e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009b52:	68f8      	ldr	r0, [r7, #12]
 8009b54:	f7ff ffd6 	bl	8009b04 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009b58:	bf00      	nop
 8009b5a:	3710      	adds	r7, #16
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	bd80      	pop	{r7, pc}

08009b60 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8009b60:	b480      	push	{r7}
 8009b62:	b085      	sub	sp, #20
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	695b      	ldr	r3, [r3, #20]
 8009b6e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	699a      	ldr	r2, [r3, #24]
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	f042 0208 	orr.w	r2, r2, #8
 8009b7e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	699a      	ldr	r2, [r3, #24]
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	f042 0210 	orr.w	r2, r2, #16
 8009b8e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	681a      	ldr	r2, [r3, #0]
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	f022 0201 	bic.w	r2, r2, #1
 8009b9e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	6919      	ldr	r1, [r3, #16]
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681a      	ldr	r2, [r3, #0]
 8009baa:	4b3c      	ldr	r3, [pc, #240]	@ (8009c9c <SPI_CloseTransfer+0x13c>)
 8009bac:	400b      	ands	r3, r1
 8009bae:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	689a      	ldr	r2, [r3, #8]
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8009bbe:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009bc6:	b2db      	uxtb	r3, r3
 8009bc8:	2b04      	cmp	r3, #4
 8009bca:	d014      	beq.n	8009bf6 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	f003 0320 	and.w	r3, r3, #32
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d00f      	beq.n	8009bf6 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009bdc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	699a      	ldr	r2, [r3, #24]
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	f042 0220 	orr.w	r2, r2, #32
 8009bf4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009bfc:	b2db      	uxtb	r3, r3
 8009bfe:	2b03      	cmp	r3, #3
 8009c00:	d014      	beq.n	8009c2c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d00f      	beq.n	8009c2c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009c12:	f043 0204 	orr.w	r2, r3, #4
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	699a      	ldr	r2, [r3, #24]
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009c2a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d00f      	beq.n	8009c56 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009c3c:	f043 0201 	orr.w	r2, r3, #1
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	699a      	ldr	r2, [r3, #24]
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009c54:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d00f      	beq.n	8009c80 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009c66:	f043 0208 	orr.w	r2, r3, #8
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	699a      	ldr	r2, [r3, #24]
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009c7e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	2200      	movs	r2, #0
 8009c84:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8009c90:	bf00      	nop
 8009c92:	3714      	adds	r7, #20
 8009c94:	46bd      	mov	sp, r7
 8009c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9a:	4770      	bx	lr
 8009c9c:	fffffc90 	.word	0xfffffc90

08009ca0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8009ca0:	b480      	push	{r7}
 8009ca2:	b085      	sub	sp, #20
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009cac:	095b      	lsrs	r3, r3, #5
 8009cae:	3301      	adds	r3, #1
 8009cb0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	68db      	ldr	r3, [r3, #12]
 8009cb6:	3301      	adds	r3, #1
 8009cb8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8009cba:	68bb      	ldr	r3, [r7, #8]
 8009cbc:	3307      	adds	r3, #7
 8009cbe:	08db      	lsrs	r3, r3, #3
 8009cc0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8009cc2:	68bb      	ldr	r3, [r7, #8]
 8009cc4:	68fa      	ldr	r2, [r7, #12]
 8009cc6:	fb02 f303 	mul.w	r3, r2, r3
}
 8009cca:	4618      	mov	r0, r3
 8009ccc:	3714      	adds	r7, #20
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd4:	4770      	bx	lr

08009cd6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009cd6:	b580      	push	{r7, lr}
 8009cd8:	b082      	sub	sp, #8
 8009cda:	af00      	add	r7, sp, #0
 8009cdc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d101      	bne.n	8009ce8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009ce4:	2301      	movs	r3, #1
 8009ce6:	e049      	b.n	8009d7c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009cee:	b2db      	uxtb	r3, r3
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d106      	bne.n	8009d02 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009cfc:	6878      	ldr	r0, [r7, #4]
 8009cfe:	f7f7 fbc5 	bl	800148c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	2202      	movs	r2, #2
 8009d06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681a      	ldr	r2, [r3, #0]
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	3304      	adds	r3, #4
 8009d12:	4619      	mov	r1, r3
 8009d14:	4610      	mov	r0, r2
 8009d16:	f000 fa5d 	bl	800a1d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	2201      	movs	r2, #1
 8009d1e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	2201      	movs	r2, #1
 8009d26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	2201      	movs	r2, #1
 8009d2e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	2201      	movs	r2, #1
 8009d36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	2201      	movs	r2, #1
 8009d3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	2201      	movs	r2, #1
 8009d46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	2201      	movs	r2, #1
 8009d4e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	2201      	movs	r2, #1
 8009d56:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	2201      	movs	r2, #1
 8009d5e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2201      	movs	r2, #1
 8009d66:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2201      	movs	r2, #1
 8009d6e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	2201      	movs	r2, #1
 8009d76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009d7a:	2300      	movs	r3, #0
}
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	3708      	adds	r7, #8
 8009d80:	46bd      	mov	sp, r7
 8009d82:	bd80      	pop	{r7, pc}

08009d84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b084      	sub	sp, #16
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	68db      	ldr	r3, [r3, #12]
 8009d92:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	691b      	ldr	r3, [r3, #16]
 8009d9a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009d9c:	68bb      	ldr	r3, [r7, #8]
 8009d9e:	f003 0302 	and.w	r3, r3, #2
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d020      	beq.n	8009de8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	f003 0302 	and.w	r3, r3, #2
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d01b      	beq.n	8009de8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	f06f 0202 	mvn.w	r2, #2
 8009db8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	2201      	movs	r2, #1
 8009dbe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	699b      	ldr	r3, [r3, #24]
 8009dc6:	f003 0303 	and.w	r3, r3, #3
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d003      	beq.n	8009dd6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009dce:	6878      	ldr	r0, [r7, #4]
 8009dd0:	f000 f9e2 	bl	800a198 <HAL_TIM_IC_CaptureCallback>
 8009dd4:	e005      	b.n	8009de2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009dd6:	6878      	ldr	r0, [r7, #4]
 8009dd8:	f000 f9d4 	bl	800a184 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ddc:	6878      	ldr	r0, [r7, #4]
 8009dde:	f000 f9e5 	bl	800a1ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	2200      	movs	r2, #0
 8009de6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009de8:	68bb      	ldr	r3, [r7, #8]
 8009dea:	f003 0304 	and.w	r3, r3, #4
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d020      	beq.n	8009e34 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	f003 0304 	and.w	r3, r3, #4
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d01b      	beq.n	8009e34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	f06f 0204 	mvn.w	r2, #4
 8009e04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	2202      	movs	r2, #2
 8009e0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	699b      	ldr	r3, [r3, #24]
 8009e12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d003      	beq.n	8009e22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009e1a:	6878      	ldr	r0, [r7, #4]
 8009e1c:	f000 f9bc 	bl	800a198 <HAL_TIM_IC_CaptureCallback>
 8009e20:	e005      	b.n	8009e2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e22:	6878      	ldr	r0, [r7, #4]
 8009e24:	f000 f9ae 	bl	800a184 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e28:	6878      	ldr	r0, [r7, #4]
 8009e2a:	f000 f9bf 	bl	800a1ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	2200      	movs	r2, #0
 8009e32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009e34:	68bb      	ldr	r3, [r7, #8]
 8009e36:	f003 0308 	and.w	r3, r3, #8
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d020      	beq.n	8009e80 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	f003 0308 	and.w	r3, r3, #8
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d01b      	beq.n	8009e80 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	f06f 0208 	mvn.w	r2, #8
 8009e50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	2204      	movs	r2, #4
 8009e56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	69db      	ldr	r3, [r3, #28]
 8009e5e:	f003 0303 	and.w	r3, r3, #3
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d003      	beq.n	8009e6e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009e66:	6878      	ldr	r0, [r7, #4]
 8009e68:	f000 f996 	bl	800a198 <HAL_TIM_IC_CaptureCallback>
 8009e6c:	e005      	b.n	8009e7a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e6e:	6878      	ldr	r0, [r7, #4]
 8009e70:	f000 f988 	bl	800a184 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e74:	6878      	ldr	r0, [r7, #4]
 8009e76:	f000 f999 	bl	800a1ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009e80:	68bb      	ldr	r3, [r7, #8]
 8009e82:	f003 0310 	and.w	r3, r3, #16
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d020      	beq.n	8009ecc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	f003 0310 	and.w	r3, r3, #16
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d01b      	beq.n	8009ecc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	f06f 0210 	mvn.w	r2, #16
 8009e9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2208      	movs	r2, #8
 8009ea2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	69db      	ldr	r3, [r3, #28]
 8009eaa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d003      	beq.n	8009eba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009eb2:	6878      	ldr	r0, [r7, #4]
 8009eb4:	f000 f970 	bl	800a198 <HAL_TIM_IC_CaptureCallback>
 8009eb8:	e005      	b.n	8009ec6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009eba:	6878      	ldr	r0, [r7, #4]
 8009ebc:	f000 f962 	bl	800a184 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ec0:	6878      	ldr	r0, [r7, #4]
 8009ec2:	f000 f973 	bl	800a1ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	2200      	movs	r2, #0
 8009eca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009ecc:	68bb      	ldr	r3, [r7, #8]
 8009ece:	f003 0301 	and.w	r3, r3, #1
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d00c      	beq.n	8009ef0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	f003 0301 	and.w	r3, r3, #1
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d007      	beq.n	8009ef0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	f06f 0201 	mvn.w	r2, #1
 8009ee8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009eea:	6878      	ldr	r0, [r7, #4]
 8009eec:	f7f7 fd74 	bl	80019d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009ef0:	68bb      	ldr	r3, [r7, #8]
 8009ef2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d104      	bne.n	8009f04 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009efa:	68bb      	ldr	r3, [r7, #8]
 8009efc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d00c      	beq.n	8009f1e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d007      	beq.n	8009f1e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8009f16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009f18:	6878      	ldr	r0, [r7, #4]
 8009f1a:	f000 fb37 	bl	800a58c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009f1e:	68bb      	ldr	r3, [r7, #8]
 8009f20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d00c      	beq.n	8009f42 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d007      	beq.n	8009f42 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009f3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009f3c:	6878      	ldr	r0, [r7, #4]
 8009f3e:	f000 fb2f 	bl	800a5a0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009f42:	68bb      	ldr	r3, [r7, #8]
 8009f44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d00c      	beq.n	8009f66 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d007      	beq.n	8009f66 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009f5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009f60:	6878      	ldr	r0, [r7, #4]
 8009f62:	f000 f92d 	bl	800a1c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009f66:	68bb      	ldr	r3, [r7, #8]
 8009f68:	f003 0320 	and.w	r3, r3, #32
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d00c      	beq.n	8009f8a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	f003 0320 	and.w	r3, r3, #32
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d007      	beq.n	8009f8a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	f06f 0220 	mvn.w	r2, #32
 8009f82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009f84:	6878      	ldr	r0, [r7, #4]
 8009f86:	f000 faf7 	bl	800a578 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009f8a:	bf00      	nop
 8009f8c:	3710      	adds	r7, #16
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	bd80      	pop	{r7, pc}
	...

08009f94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b084      	sub	sp, #16
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
 8009f9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009fa8:	2b01      	cmp	r3, #1
 8009faa:	d101      	bne.n	8009fb0 <HAL_TIM_ConfigClockSource+0x1c>
 8009fac:	2302      	movs	r3, #2
 8009fae:	e0dc      	b.n	800a16a <HAL_TIM_ConfigClockSource+0x1d6>
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	2201      	movs	r2, #1
 8009fb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2202      	movs	r2, #2
 8009fbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	689b      	ldr	r3, [r3, #8]
 8009fc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009fc8:	68ba      	ldr	r2, [r7, #8]
 8009fca:	4b6a      	ldr	r3, [pc, #424]	@ (800a174 <HAL_TIM_ConfigClockSource+0x1e0>)
 8009fcc:	4013      	ands	r3, r2
 8009fce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009fd0:	68bb      	ldr	r3, [r7, #8]
 8009fd2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009fd6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	68ba      	ldr	r2, [r7, #8]
 8009fde:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	4a64      	ldr	r2, [pc, #400]	@ (800a178 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009fe6:	4293      	cmp	r3, r2
 8009fe8:	f000 80a9 	beq.w	800a13e <HAL_TIM_ConfigClockSource+0x1aa>
 8009fec:	4a62      	ldr	r2, [pc, #392]	@ (800a178 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009fee:	4293      	cmp	r3, r2
 8009ff0:	f200 80ae 	bhi.w	800a150 <HAL_TIM_ConfigClockSource+0x1bc>
 8009ff4:	4a61      	ldr	r2, [pc, #388]	@ (800a17c <HAL_TIM_ConfigClockSource+0x1e8>)
 8009ff6:	4293      	cmp	r3, r2
 8009ff8:	f000 80a1 	beq.w	800a13e <HAL_TIM_ConfigClockSource+0x1aa>
 8009ffc:	4a5f      	ldr	r2, [pc, #380]	@ (800a17c <HAL_TIM_ConfigClockSource+0x1e8>)
 8009ffe:	4293      	cmp	r3, r2
 800a000:	f200 80a6 	bhi.w	800a150 <HAL_TIM_ConfigClockSource+0x1bc>
 800a004:	4a5e      	ldr	r2, [pc, #376]	@ (800a180 <HAL_TIM_ConfigClockSource+0x1ec>)
 800a006:	4293      	cmp	r3, r2
 800a008:	f000 8099 	beq.w	800a13e <HAL_TIM_ConfigClockSource+0x1aa>
 800a00c:	4a5c      	ldr	r2, [pc, #368]	@ (800a180 <HAL_TIM_ConfigClockSource+0x1ec>)
 800a00e:	4293      	cmp	r3, r2
 800a010:	f200 809e 	bhi.w	800a150 <HAL_TIM_ConfigClockSource+0x1bc>
 800a014:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a018:	f000 8091 	beq.w	800a13e <HAL_TIM_ConfigClockSource+0x1aa>
 800a01c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a020:	f200 8096 	bhi.w	800a150 <HAL_TIM_ConfigClockSource+0x1bc>
 800a024:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a028:	f000 8089 	beq.w	800a13e <HAL_TIM_ConfigClockSource+0x1aa>
 800a02c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a030:	f200 808e 	bhi.w	800a150 <HAL_TIM_ConfigClockSource+0x1bc>
 800a034:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a038:	d03e      	beq.n	800a0b8 <HAL_TIM_ConfigClockSource+0x124>
 800a03a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a03e:	f200 8087 	bhi.w	800a150 <HAL_TIM_ConfigClockSource+0x1bc>
 800a042:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a046:	f000 8086 	beq.w	800a156 <HAL_TIM_ConfigClockSource+0x1c2>
 800a04a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a04e:	d87f      	bhi.n	800a150 <HAL_TIM_ConfigClockSource+0x1bc>
 800a050:	2b70      	cmp	r3, #112	@ 0x70
 800a052:	d01a      	beq.n	800a08a <HAL_TIM_ConfigClockSource+0xf6>
 800a054:	2b70      	cmp	r3, #112	@ 0x70
 800a056:	d87b      	bhi.n	800a150 <HAL_TIM_ConfigClockSource+0x1bc>
 800a058:	2b60      	cmp	r3, #96	@ 0x60
 800a05a:	d050      	beq.n	800a0fe <HAL_TIM_ConfigClockSource+0x16a>
 800a05c:	2b60      	cmp	r3, #96	@ 0x60
 800a05e:	d877      	bhi.n	800a150 <HAL_TIM_ConfigClockSource+0x1bc>
 800a060:	2b50      	cmp	r3, #80	@ 0x50
 800a062:	d03c      	beq.n	800a0de <HAL_TIM_ConfigClockSource+0x14a>
 800a064:	2b50      	cmp	r3, #80	@ 0x50
 800a066:	d873      	bhi.n	800a150 <HAL_TIM_ConfigClockSource+0x1bc>
 800a068:	2b40      	cmp	r3, #64	@ 0x40
 800a06a:	d058      	beq.n	800a11e <HAL_TIM_ConfigClockSource+0x18a>
 800a06c:	2b40      	cmp	r3, #64	@ 0x40
 800a06e:	d86f      	bhi.n	800a150 <HAL_TIM_ConfigClockSource+0x1bc>
 800a070:	2b30      	cmp	r3, #48	@ 0x30
 800a072:	d064      	beq.n	800a13e <HAL_TIM_ConfigClockSource+0x1aa>
 800a074:	2b30      	cmp	r3, #48	@ 0x30
 800a076:	d86b      	bhi.n	800a150 <HAL_TIM_ConfigClockSource+0x1bc>
 800a078:	2b20      	cmp	r3, #32
 800a07a:	d060      	beq.n	800a13e <HAL_TIM_ConfigClockSource+0x1aa>
 800a07c:	2b20      	cmp	r3, #32
 800a07e:	d867      	bhi.n	800a150 <HAL_TIM_ConfigClockSource+0x1bc>
 800a080:	2b00      	cmp	r3, #0
 800a082:	d05c      	beq.n	800a13e <HAL_TIM_ConfigClockSource+0x1aa>
 800a084:	2b10      	cmp	r3, #16
 800a086:	d05a      	beq.n	800a13e <HAL_TIM_ConfigClockSource+0x1aa>
 800a088:	e062      	b.n	800a150 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a08e:	683b      	ldr	r3, [r7, #0]
 800a090:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a092:	683b      	ldr	r3, [r7, #0]
 800a094:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a096:	683b      	ldr	r3, [r7, #0]
 800a098:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a09a:	f000 f9bf 	bl	800a41c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	689b      	ldr	r3, [r3, #8]
 800a0a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a0a6:	68bb      	ldr	r3, [r7, #8]
 800a0a8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a0ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	68ba      	ldr	r2, [r7, #8]
 800a0b4:	609a      	str	r2, [r3, #8]
      break;
 800a0b6:	e04f      	b.n	800a158 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a0bc:	683b      	ldr	r3, [r7, #0]
 800a0be:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a0c0:	683b      	ldr	r3, [r7, #0]
 800a0c2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a0c4:	683b      	ldr	r3, [r7, #0]
 800a0c6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a0c8:	f000 f9a8 	bl	800a41c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	689a      	ldr	r2, [r3, #8]
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a0da:	609a      	str	r2, [r3, #8]
      break;
 800a0dc:	e03c      	b.n	800a158 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a0ea:	461a      	mov	r2, r3
 800a0ec:	f000 f918 	bl	800a320 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	2150      	movs	r1, #80	@ 0x50
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	f000 f972 	bl	800a3e0 <TIM_ITRx_SetConfig>
      break;
 800a0fc:	e02c      	b.n	800a158 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a10a:	461a      	mov	r2, r3
 800a10c:	f000 f937 	bl	800a37e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	2160      	movs	r1, #96	@ 0x60
 800a116:	4618      	mov	r0, r3
 800a118:	f000 f962 	bl	800a3e0 <TIM_ITRx_SetConfig>
      break;
 800a11c:	e01c      	b.n	800a158 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a126:	683b      	ldr	r3, [r7, #0]
 800a128:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a12a:	461a      	mov	r2, r3
 800a12c:	f000 f8f8 	bl	800a320 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	2140      	movs	r1, #64	@ 0x40
 800a136:	4618      	mov	r0, r3
 800a138:	f000 f952 	bl	800a3e0 <TIM_ITRx_SetConfig>
      break;
 800a13c:	e00c      	b.n	800a158 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681a      	ldr	r2, [r3, #0]
 800a142:	683b      	ldr	r3, [r7, #0]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	4619      	mov	r1, r3
 800a148:	4610      	mov	r0, r2
 800a14a:	f000 f949 	bl	800a3e0 <TIM_ITRx_SetConfig>
      break;
 800a14e:	e003      	b.n	800a158 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800a150:	2301      	movs	r3, #1
 800a152:	73fb      	strb	r3, [r7, #15]
      break;
 800a154:	e000      	b.n	800a158 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800a156:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2201      	movs	r2, #1
 800a15c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	2200      	movs	r2, #0
 800a164:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a168:	7bfb      	ldrb	r3, [r7, #15]
}
 800a16a:	4618      	mov	r0, r3
 800a16c:	3710      	adds	r7, #16
 800a16e:	46bd      	mov	sp, r7
 800a170:	bd80      	pop	{r7, pc}
 800a172:	bf00      	nop
 800a174:	ffceff88 	.word	0xffceff88
 800a178:	00100040 	.word	0x00100040
 800a17c:	00100030 	.word	0x00100030
 800a180:	00100020 	.word	0x00100020

0800a184 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a184:	b480      	push	{r7}
 800a186:	b083      	sub	sp, #12
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a18c:	bf00      	nop
 800a18e:	370c      	adds	r7, #12
 800a190:	46bd      	mov	sp, r7
 800a192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a196:	4770      	bx	lr

0800a198 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a198:	b480      	push	{r7}
 800a19a:	b083      	sub	sp, #12
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a1a0:	bf00      	nop
 800a1a2:	370c      	adds	r7, #12
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1aa:	4770      	bx	lr

0800a1ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a1ac:	b480      	push	{r7}
 800a1ae:	b083      	sub	sp, #12
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a1b4:	bf00      	nop
 800a1b6:	370c      	adds	r7, #12
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1be:	4770      	bx	lr

0800a1c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a1c0:	b480      	push	{r7}
 800a1c2:	b083      	sub	sp, #12
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a1c8:	bf00      	nop
 800a1ca:	370c      	adds	r7, #12
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d2:	4770      	bx	lr

0800a1d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a1d4:	b480      	push	{r7}
 800a1d6:	b085      	sub	sp, #20
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
 800a1dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	4a46      	ldr	r2, [pc, #280]	@ (800a300 <TIM_Base_SetConfig+0x12c>)
 800a1e8:	4293      	cmp	r3, r2
 800a1ea:	d013      	beq.n	800a214 <TIM_Base_SetConfig+0x40>
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a1f2:	d00f      	beq.n	800a214 <TIM_Base_SetConfig+0x40>
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	4a43      	ldr	r2, [pc, #268]	@ (800a304 <TIM_Base_SetConfig+0x130>)
 800a1f8:	4293      	cmp	r3, r2
 800a1fa:	d00b      	beq.n	800a214 <TIM_Base_SetConfig+0x40>
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	4a42      	ldr	r2, [pc, #264]	@ (800a308 <TIM_Base_SetConfig+0x134>)
 800a200:	4293      	cmp	r3, r2
 800a202:	d007      	beq.n	800a214 <TIM_Base_SetConfig+0x40>
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	4a41      	ldr	r2, [pc, #260]	@ (800a30c <TIM_Base_SetConfig+0x138>)
 800a208:	4293      	cmp	r3, r2
 800a20a:	d003      	beq.n	800a214 <TIM_Base_SetConfig+0x40>
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	4a40      	ldr	r2, [pc, #256]	@ (800a310 <TIM_Base_SetConfig+0x13c>)
 800a210:	4293      	cmp	r3, r2
 800a212:	d108      	bne.n	800a226 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a21a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a21c:	683b      	ldr	r3, [r7, #0]
 800a21e:	685b      	ldr	r3, [r3, #4]
 800a220:	68fa      	ldr	r2, [r7, #12]
 800a222:	4313      	orrs	r3, r2
 800a224:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	4a35      	ldr	r2, [pc, #212]	@ (800a300 <TIM_Base_SetConfig+0x12c>)
 800a22a:	4293      	cmp	r3, r2
 800a22c:	d01f      	beq.n	800a26e <TIM_Base_SetConfig+0x9a>
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a234:	d01b      	beq.n	800a26e <TIM_Base_SetConfig+0x9a>
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	4a32      	ldr	r2, [pc, #200]	@ (800a304 <TIM_Base_SetConfig+0x130>)
 800a23a:	4293      	cmp	r3, r2
 800a23c:	d017      	beq.n	800a26e <TIM_Base_SetConfig+0x9a>
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	4a31      	ldr	r2, [pc, #196]	@ (800a308 <TIM_Base_SetConfig+0x134>)
 800a242:	4293      	cmp	r3, r2
 800a244:	d013      	beq.n	800a26e <TIM_Base_SetConfig+0x9a>
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	4a30      	ldr	r2, [pc, #192]	@ (800a30c <TIM_Base_SetConfig+0x138>)
 800a24a:	4293      	cmp	r3, r2
 800a24c:	d00f      	beq.n	800a26e <TIM_Base_SetConfig+0x9a>
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	4a2f      	ldr	r2, [pc, #188]	@ (800a310 <TIM_Base_SetConfig+0x13c>)
 800a252:	4293      	cmp	r3, r2
 800a254:	d00b      	beq.n	800a26e <TIM_Base_SetConfig+0x9a>
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	4a2e      	ldr	r2, [pc, #184]	@ (800a314 <TIM_Base_SetConfig+0x140>)
 800a25a:	4293      	cmp	r3, r2
 800a25c:	d007      	beq.n	800a26e <TIM_Base_SetConfig+0x9a>
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	4a2d      	ldr	r2, [pc, #180]	@ (800a318 <TIM_Base_SetConfig+0x144>)
 800a262:	4293      	cmp	r3, r2
 800a264:	d003      	beq.n	800a26e <TIM_Base_SetConfig+0x9a>
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	4a2c      	ldr	r2, [pc, #176]	@ (800a31c <TIM_Base_SetConfig+0x148>)
 800a26a:	4293      	cmp	r3, r2
 800a26c:	d108      	bne.n	800a280 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a274:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a276:	683b      	ldr	r3, [r7, #0]
 800a278:	68db      	ldr	r3, [r3, #12]
 800a27a:	68fa      	ldr	r2, [r7, #12]
 800a27c:	4313      	orrs	r3, r2
 800a27e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a286:	683b      	ldr	r3, [r7, #0]
 800a288:	695b      	ldr	r3, [r3, #20]
 800a28a:	4313      	orrs	r3, r2
 800a28c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	68fa      	ldr	r2, [r7, #12]
 800a292:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a294:	683b      	ldr	r3, [r7, #0]
 800a296:	689a      	ldr	r2, [r3, #8]
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	681a      	ldr	r2, [r3, #0]
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	4a16      	ldr	r2, [pc, #88]	@ (800a300 <TIM_Base_SetConfig+0x12c>)
 800a2a8:	4293      	cmp	r3, r2
 800a2aa:	d00f      	beq.n	800a2cc <TIM_Base_SetConfig+0xf8>
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	4a18      	ldr	r2, [pc, #96]	@ (800a310 <TIM_Base_SetConfig+0x13c>)
 800a2b0:	4293      	cmp	r3, r2
 800a2b2:	d00b      	beq.n	800a2cc <TIM_Base_SetConfig+0xf8>
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	4a17      	ldr	r2, [pc, #92]	@ (800a314 <TIM_Base_SetConfig+0x140>)
 800a2b8:	4293      	cmp	r3, r2
 800a2ba:	d007      	beq.n	800a2cc <TIM_Base_SetConfig+0xf8>
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	4a16      	ldr	r2, [pc, #88]	@ (800a318 <TIM_Base_SetConfig+0x144>)
 800a2c0:	4293      	cmp	r3, r2
 800a2c2:	d003      	beq.n	800a2cc <TIM_Base_SetConfig+0xf8>
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	4a15      	ldr	r2, [pc, #84]	@ (800a31c <TIM_Base_SetConfig+0x148>)
 800a2c8:	4293      	cmp	r3, r2
 800a2ca:	d103      	bne.n	800a2d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a2cc:	683b      	ldr	r3, [r7, #0]
 800a2ce:	691a      	ldr	r2, [r3, #16]
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2201      	movs	r2, #1
 800a2d8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	691b      	ldr	r3, [r3, #16]
 800a2de:	f003 0301 	and.w	r3, r3, #1
 800a2e2:	2b01      	cmp	r3, #1
 800a2e4:	d105      	bne.n	800a2f2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	691b      	ldr	r3, [r3, #16]
 800a2ea:	f023 0201 	bic.w	r2, r3, #1
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	611a      	str	r2, [r3, #16]
  }
}
 800a2f2:	bf00      	nop
 800a2f4:	3714      	adds	r7, #20
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fc:	4770      	bx	lr
 800a2fe:	bf00      	nop
 800a300:	40010000 	.word	0x40010000
 800a304:	40000400 	.word	0x40000400
 800a308:	40000800 	.word	0x40000800
 800a30c:	40000c00 	.word	0x40000c00
 800a310:	40010400 	.word	0x40010400
 800a314:	40014000 	.word	0x40014000
 800a318:	40014400 	.word	0x40014400
 800a31c:	40014800 	.word	0x40014800

0800a320 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a320:	b480      	push	{r7}
 800a322:	b087      	sub	sp, #28
 800a324:	af00      	add	r7, sp, #0
 800a326:	60f8      	str	r0, [r7, #12]
 800a328:	60b9      	str	r1, [r7, #8]
 800a32a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	6a1b      	ldr	r3, [r3, #32]
 800a330:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	6a1b      	ldr	r3, [r3, #32]
 800a336:	f023 0201 	bic.w	r2, r3, #1
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	699b      	ldr	r3, [r3, #24]
 800a342:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a344:	693b      	ldr	r3, [r7, #16]
 800a346:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a34a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	011b      	lsls	r3, r3, #4
 800a350:	693a      	ldr	r2, [r7, #16]
 800a352:	4313      	orrs	r3, r2
 800a354:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a356:	697b      	ldr	r3, [r7, #20]
 800a358:	f023 030a 	bic.w	r3, r3, #10
 800a35c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a35e:	697a      	ldr	r2, [r7, #20]
 800a360:	68bb      	ldr	r3, [r7, #8]
 800a362:	4313      	orrs	r3, r2
 800a364:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	693a      	ldr	r2, [r7, #16]
 800a36a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	697a      	ldr	r2, [r7, #20]
 800a370:	621a      	str	r2, [r3, #32]
}
 800a372:	bf00      	nop
 800a374:	371c      	adds	r7, #28
 800a376:	46bd      	mov	sp, r7
 800a378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37c:	4770      	bx	lr

0800a37e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a37e:	b480      	push	{r7}
 800a380:	b087      	sub	sp, #28
 800a382:	af00      	add	r7, sp, #0
 800a384:	60f8      	str	r0, [r7, #12]
 800a386:	60b9      	str	r1, [r7, #8]
 800a388:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	6a1b      	ldr	r3, [r3, #32]
 800a38e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	6a1b      	ldr	r3, [r3, #32]
 800a394:	f023 0210 	bic.w	r2, r3, #16
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	699b      	ldr	r3, [r3, #24]
 800a3a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a3a2:	693b      	ldr	r3, [r7, #16]
 800a3a4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a3a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	031b      	lsls	r3, r3, #12
 800a3ae:	693a      	ldr	r2, [r7, #16]
 800a3b0:	4313      	orrs	r3, r2
 800a3b2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a3b4:	697b      	ldr	r3, [r7, #20]
 800a3b6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a3ba:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a3bc:	68bb      	ldr	r3, [r7, #8]
 800a3be:	011b      	lsls	r3, r3, #4
 800a3c0:	697a      	ldr	r2, [r7, #20]
 800a3c2:	4313      	orrs	r3, r2
 800a3c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	693a      	ldr	r2, [r7, #16]
 800a3ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	697a      	ldr	r2, [r7, #20]
 800a3d0:	621a      	str	r2, [r3, #32]
}
 800a3d2:	bf00      	nop
 800a3d4:	371c      	adds	r7, #28
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3dc:	4770      	bx	lr
	...

0800a3e0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a3e0:	b480      	push	{r7}
 800a3e2:	b085      	sub	sp, #20
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
 800a3e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	689b      	ldr	r3, [r3, #8]
 800a3ee:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a3f0:	68fa      	ldr	r2, [r7, #12]
 800a3f2:	4b09      	ldr	r3, [pc, #36]	@ (800a418 <TIM_ITRx_SetConfig+0x38>)
 800a3f4:	4013      	ands	r3, r2
 800a3f6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a3f8:	683a      	ldr	r2, [r7, #0]
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	4313      	orrs	r3, r2
 800a3fe:	f043 0307 	orr.w	r3, r3, #7
 800a402:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	68fa      	ldr	r2, [r7, #12]
 800a408:	609a      	str	r2, [r3, #8]
}
 800a40a:	bf00      	nop
 800a40c:	3714      	adds	r7, #20
 800a40e:	46bd      	mov	sp, r7
 800a410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a414:	4770      	bx	lr
 800a416:	bf00      	nop
 800a418:	ffcfff8f 	.word	0xffcfff8f

0800a41c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a41c:	b480      	push	{r7}
 800a41e:	b087      	sub	sp, #28
 800a420:	af00      	add	r7, sp, #0
 800a422:	60f8      	str	r0, [r7, #12]
 800a424:	60b9      	str	r1, [r7, #8]
 800a426:	607a      	str	r2, [r7, #4]
 800a428:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	689b      	ldr	r3, [r3, #8]
 800a42e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a430:	697b      	ldr	r3, [r7, #20]
 800a432:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a436:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a438:	683b      	ldr	r3, [r7, #0]
 800a43a:	021a      	lsls	r2, r3, #8
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	431a      	orrs	r2, r3
 800a440:	68bb      	ldr	r3, [r7, #8]
 800a442:	4313      	orrs	r3, r2
 800a444:	697a      	ldr	r2, [r7, #20]
 800a446:	4313      	orrs	r3, r2
 800a448:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	697a      	ldr	r2, [r7, #20]
 800a44e:	609a      	str	r2, [r3, #8]
}
 800a450:	bf00      	nop
 800a452:	371c      	adds	r7, #28
 800a454:	46bd      	mov	sp, r7
 800a456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45a:	4770      	bx	lr

0800a45c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a45c:	b480      	push	{r7}
 800a45e:	b085      	sub	sp, #20
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
 800a464:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a46c:	2b01      	cmp	r3, #1
 800a46e:	d101      	bne.n	800a474 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a470:	2302      	movs	r3, #2
 800a472:	e06d      	b.n	800a550 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	2201      	movs	r2, #1
 800a478:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2202      	movs	r2, #2
 800a480:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	685b      	ldr	r3, [r3, #4]
 800a48a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	689b      	ldr	r3, [r3, #8]
 800a492:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	4a30      	ldr	r2, [pc, #192]	@ (800a55c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a49a:	4293      	cmp	r3, r2
 800a49c:	d004      	beq.n	800a4a8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	4a2f      	ldr	r2, [pc, #188]	@ (800a560 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a4a4:	4293      	cmp	r3, r2
 800a4a6:	d108      	bne.n	800a4ba <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a4ae:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a4b0:	683b      	ldr	r3, [r7, #0]
 800a4b2:	685b      	ldr	r3, [r3, #4]
 800a4b4:	68fa      	ldr	r2, [r7, #12]
 800a4b6:	4313      	orrs	r3, r2
 800a4b8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a4c0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a4c2:	683b      	ldr	r3, [r7, #0]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	68fa      	ldr	r2, [r7, #12]
 800a4c8:	4313      	orrs	r3, r2
 800a4ca:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	68fa      	ldr	r2, [r7, #12]
 800a4d2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	4a20      	ldr	r2, [pc, #128]	@ (800a55c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a4da:	4293      	cmp	r3, r2
 800a4dc:	d022      	beq.n	800a524 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a4e6:	d01d      	beq.n	800a524 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	4a1d      	ldr	r2, [pc, #116]	@ (800a564 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a4ee:	4293      	cmp	r3, r2
 800a4f0:	d018      	beq.n	800a524 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	4a1c      	ldr	r2, [pc, #112]	@ (800a568 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a4f8:	4293      	cmp	r3, r2
 800a4fa:	d013      	beq.n	800a524 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	4a1a      	ldr	r2, [pc, #104]	@ (800a56c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a502:	4293      	cmp	r3, r2
 800a504:	d00e      	beq.n	800a524 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	4a15      	ldr	r2, [pc, #84]	@ (800a560 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a50c:	4293      	cmp	r3, r2
 800a50e:	d009      	beq.n	800a524 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	4a16      	ldr	r2, [pc, #88]	@ (800a570 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a516:	4293      	cmp	r3, r2
 800a518:	d004      	beq.n	800a524 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	4a15      	ldr	r2, [pc, #84]	@ (800a574 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a520:	4293      	cmp	r3, r2
 800a522:	d10c      	bne.n	800a53e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a524:	68bb      	ldr	r3, [r7, #8]
 800a526:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a52a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a52c:	683b      	ldr	r3, [r7, #0]
 800a52e:	689b      	ldr	r3, [r3, #8]
 800a530:	68ba      	ldr	r2, [r7, #8]
 800a532:	4313      	orrs	r3, r2
 800a534:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	68ba      	ldr	r2, [r7, #8]
 800a53c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	2201      	movs	r2, #1
 800a542:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	2200      	movs	r2, #0
 800a54a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a54e:	2300      	movs	r3, #0
}
 800a550:	4618      	mov	r0, r3
 800a552:	3714      	adds	r7, #20
 800a554:	46bd      	mov	sp, r7
 800a556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55a:	4770      	bx	lr
 800a55c:	40010000 	.word	0x40010000
 800a560:	40010400 	.word	0x40010400
 800a564:	40000400 	.word	0x40000400
 800a568:	40000800 	.word	0x40000800
 800a56c:	40000c00 	.word	0x40000c00
 800a570:	40001800 	.word	0x40001800
 800a574:	40014000 	.word	0x40014000

0800a578 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a578:	b480      	push	{r7}
 800a57a:	b083      	sub	sp, #12
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a580:	bf00      	nop
 800a582:	370c      	adds	r7, #12
 800a584:	46bd      	mov	sp, r7
 800a586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58a:	4770      	bx	lr

0800a58c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a58c:	b480      	push	{r7}
 800a58e:	b083      	sub	sp, #12
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a594:	bf00      	nop
 800a596:	370c      	adds	r7, #12
 800a598:	46bd      	mov	sp, r7
 800a59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59e:	4770      	bx	lr

0800a5a0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a5a0:	b480      	push	{r7}
 800a5a2:	b083      	sub	sp, #12
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a5a8:	bf00      	nop
 800a5aa:	370c      	adds	r7, #12
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b2:	4770      	bx	lr

0800a5b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a5b4:	b580      	push	{r7, lr}
 800a5b6:	b082      	sub	sp, #8
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d101      	bne.n	800a5c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a5c2:	2301      	movs	r3, #1
 800a5c4:	e042      	b.n	800a64c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d106      	bne.n	800a5de <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a5d8:	6878      	ldr	r0, [r7, #4]
 800a5da:	f7f6 ff97 	bl	800150c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	2224      	movs	r2, #36	@ 0x24
 800a5e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	681a      	ldr	r2, [r3, #0]
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	f022 0201 	bic.w	r2, r2, #1
 800a5f4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d002      	beq.n	800a604 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a5fe:	6878      	ldr	r0, [r7, #4]
 800a600:	f001 f9ec 	bl	800b9dc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a604:	6878      	ldr	r0, [r7, #4]
 800a606:	f000 fc81 	bl	800af0c <UART_SetConfig>
 800a60a:	4603      	mov	r3, r0
 800a60c:	2b01      	cmp	r3, #1
 800a60e:	d101      	bne.n	800a614 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a610:	2301      	movs	r3, #1
 800a612:	e01b      	b.n	800a64c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	685a      	ldr	r2, [r3, #4]
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a622:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	689a      	ldr	r2, [r3, #8]
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a632:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	681a      	ldr	r2, [r3, #0]
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	f042 0201 	orr.w	r2, r2, #1
 800a642:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a644:	6878      	ldr	r0, [r7, #4]
 800a646:	f001 fa6b 	bl	800bb20 <UART_CheckIdleState>
 800a64a:	4603      	mov	r3, r0
}
 800a64c:	4618      	mov	r0, r3
 800a64e:	3708      	adds	r7, #8
 800a650:	46bd      	mov	sp, r7
 800a652:	bd80      	pop	{r7, pc}

0800a654 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b08a      	sub	sp, #40	@ 0x28
 800a658:	af02      	add	r7, sp, #8
 800a65a:	60f8      	str	r0, [r7, #12]
 800a65c:	60b9      	str	r1, [r7, #8]
 800a65e:	603b      	str	r3, [r7, #0]
 800a660:	4613      	mov	r3, r2
 800a662:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a66a:	2b20      	cmp	r3, #32
 800a66c:	d17b      	bne.n	800a766 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800a66e:	68bb      	ldr	r3, [r7, #8]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d002      	beq.n	800a67a <HAL_UART_Transmit+0x26>
 800a674:	88fb      	ldrh	r3, [r7, #6]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d101      	bne.n	800a67e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a67a:	2301      	movs	r3, #1
 800a67c:	e074      	b.n	800a768 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	2200      	movs	r2, #0
 800a682:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	2221      	movs	r2, #33	@ 0x21
 800a68a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a68e:	f7f7 faad 	bl	8001bec <HAL_GetTick>
 800a692:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	88fa      	ldrh	r2, [r7, #6]
 800a698:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	88fa      	ldrh	r2, [r7, #6]
 800a6a0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	689b      	ldr	r3, [r3, #8]
 800a6a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a6ac:	d108      	bne.n	800a6c0 <HAL_UART_Transmit+0x6c>
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	691b      	ldr	r3, [r3, #16]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d104      	bne.n	800a6c0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a6ba:	68bb      	ldr	r3, [r7, #8]
 800a6bc:	61bb      	str	r3, [r7, #24]
 800a6be:	e003      	b.n	800a6c8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a6c0:	68bb      	ldr	r3, [r7, #8]
 800a6c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a6c8:	e030      	b.n	800a72c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a6ca:	683b      	ldr	r3, [r7, #0]
 800a6cc:	9300      	str	r3, [sp, #0]
 800a6ce:	697b      	ldr	r3, [r7, #20]
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	2180      	movs	r1, #128	@ 0x80
 800a6d4:	68f8      	ldr	r0, [r7, #12]
 800a6d6:	f001 facd 	bl	800bc74 <UART_WaitOnFlagUntilTimeout>
 800a6da:	4603      	mov	r3, r0
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d005      	beq.n	800a6ec <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	2220      	movs	r2, #32
 800a6e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800a6e8:	2303      	movs	r3, #3
 800a6ea:	e03d      	b.n	800a768 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800a6ec:	69fb      	ldr	r3, [r7, #28]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d10b      	bne.n	800a70a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a6f2:	69bb      	ldr	r3, [r7, #24]
 800a6f4:	881b      	ldrh	r3, [r3, #0]
 800a6f6:	461a      	mov	r2, r3
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a700:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800a702:	69bb      	ldr	r3, [r7, #24]
 800a704:	3302      	adds	r3, #2
 800a706:	61bb      	str	r3, [r7, #24]
 800a708:	e007      	b.n	800a71a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a70a:	69fb      	ldr	r3, [r7, #28]
 800a70c:	781a      	ldrb	r2, [r3, #0]
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800a714:	69fb      	ldr	r3, [r7, #28]
 800a716:	3301      	adds	r3, #1
 800a718:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a720:	b29b      	uxth	r3, r3
 800a722:	3b01      	subs	r3, #1
 800a724:	b29a      	uxth	r2, r3
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a732:	b29b      	uxth	r3, r3
 800a734:	2b00      	cmp	r3, #0
 800a736:	d1c8      	bne.n	800a6ca <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a738:	683b      	ldr	r3, [r7, #0]
 800a73a:	9300      	str	r3, [sp, #0]
 800a73c:	697b      	ldr	r3, [r7, #20]
 800a73e:	2200      	movs	r2, #0
 800a740:	2140      	movs	r1, #64	@ 0x40
 800a742:	68f8      	ldr	r0, [r7, #12]
 800a744:	f001 fa96 	bl	800bc74 <UART_WaitOnFlagUntilTimeout>
 800a748:	4603      	mov	r3, r0
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d005      	beq.n	800a75a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	2220      	movs	r2, #32
 800a752:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800a756:	2303      	movs	r3, #3
 800a758:	e006      	b.n	800a768 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	2220      	movs	r2, #32
 800a75e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800a762:	2300      	movs	r3, #0
 800a764:	e000      	b.n	800a768 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800a766:	2302      	movs	r3, #2
  }
}
 800a768:	4618      	mov	r0, r3
 800a76a:	3720      	adds	r7, #32
 800a76c:	46bd      	mov	sp, r7
 800a76e:	bd80      	pop	{r7, pc}

0800a770 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a770:	b580      	push	{r7, lr}
 800a772:	b0ba      	sub	sp, #232	@ 0xe8
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	69db      	ldr	r3, [r3, #28]
 800a77e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	689b      	ldr	r3, [r3, #8]
 800a792:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a796:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800a79a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800a79e:	4013      	ands	r3, r2
 800a7a0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800a7a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d11b      	bne.n	800a7e4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a7ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a7b0:	f003 0320 	and.w	r3, r3, #32
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d015      	beq.n	800a7e4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a7b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a7bc:	f003 0320 	and.w	r3, r3, #32
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d105      	bne.n	800a7d0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a7c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a7c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d009      	beq.n	800a7e4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	f000 8377 	beq.w	800aec8 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a7de:	6878      	ldr	r0, [r7, #4]
 800a7e0:	4798      	blx	r3
      }
      return;
 800a7e2:	e371      	b.n	800aec8 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a7e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	f000 8123 	beq.w	800aa34 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a7ee:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a7f2:	4b8d      	ldr	r3, [pc, #564]	@ (800aa28 <HAL_UART_IRQHandler+0x2b8>)
 800a7f4:	4013      	ands	r3, r2
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d106      	bne.n	800a808 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a7fa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800a7fe:	4b8b      	ldr	r3, [pc, #556]	@ (800aa2c <HAL_UART_IRQHandler+0x2bc>)
 800a800:	4013      	ands	r3, r2
 800a802:	2b00      	cmp	r3, #0
 800a804:	f000 8116 	beq.w	800aa34 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a808:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a80c:	f003 0301 	and.w	r3, r3, #1
 800a810:	2b00      	cmp	r3, #0
 800a812:	d011      	beq.n	800a838 <HAL_UART_IRQHandler+0xc8>
 800a814:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a818:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d00b      	beq.n	800a838 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	2201      	movs	r2, #1
 800a826:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a82e:	f043 0201 	orr.w	r2, r3, #1
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a838:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a83c:	f003 0302 	and.w	r3, r3, #2
 800a840:	2b00      	cmp	r3, #0
 800a842:	d011      	beq.n	800a868 <HAL_UART_IRQHandler+0xf8>
 800a844:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a848:	f003 0301 	and.w	r3, r3, #1
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d00b      	beq.n	800a868 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	2202      	movs	r2, #2
 800a856:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a85e:	f043 0204 	orr.w	r2, r3, #4
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a868:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a86c:	f003 0304 	and.w	r3, r3, #4
 800a870:	2b00      	cmp	r3, #0
 800a872:	d011      	beq.n	800a898 <HAL_UART_IRQHandler+0x128>
 800a874:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a878:	f003 0301 	and.w	r3, r3, #1
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d00b      	beq.n	800a898 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	2204      	movs	r2, #4
 800a886:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a88e:	f043 0202 	orr.w	r2, r3, #2
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a898:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a89c:	f003 0308 	and.w	r3, r3, #8
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d017      	beq.n	800a8d4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a8a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a8a8:	f003 0320 	and.w	r3, r3, #32
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d105      	bne.n	800a8bc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a8b0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a8b4:	4b5c      	ldr	r3, [pc, #368]	@ (800aa28 <HAL_UART_IRQHandler+0x2b8>)
 800a8b6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d00b      	beq.n	800a8d4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	2208      	movs	r2, #8
 800a8c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a8ca:	f043 0208 	orr.w	r2, r3, #8
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a8d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a8d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d012      	beq.n	800a906 <HAL_UART_IRQHandler+0x196>
 800a8e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a8e4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d00c      	beq.n	800a906 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a8f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a8fc:	f043 0220 	orr.w	r2, r3, #32
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	f000 82dd 	beq.w	800aecc <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a912:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a916:	f003 0320 	and.w	r3, r3, #32
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d013      	beq.n	800a946 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a91e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a922:	f003 0320 	and.w	r3, r3, #32
 800a926:	2b00      	cmp	r3, #0
 800a928:	d105      	bne.n	800a936 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a92a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a92e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a932:	2b00      	cmp	r3, #0
 800a934:	d007      	beq.n	800a946 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d003      	beq.n	800a946 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a942:	6878      	ldr	r0, [r7, #4]
 800a944:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a94c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	689b      	ldr	r3, [r3, #8]
 800a956:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a95a:	2b40      	cmp	r3, #64	@ 0x40
 800a95c:	d005      	beq.n	800a96a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a95e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a962:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a966:	2b00      	cmp	r3, #0
 800a968:	d054      	beq.n	800aa14 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a96a:	6878      	ldr	r0, [r7, #4]
 800a96c:	f001 f9f0 	bl	800bd50 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	689b      	ldr	r3, [r3, #8]
 800a976:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a97a:	2b40      	cmp	r3, #64	@ 0x40
 800a97c:	d146      	bne.n	800aa0c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	3308      	adds	r3, #8
 800a984:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a988:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a98c:	e853 3f00 	ldrex	r3, [r3]
 800a990:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a994:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a998:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a99c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	3308      	adds	r3, #8
 800a9a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a9aa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a9ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a9b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a9ba:	e841 2300 	strex	r3, r2, [r1]
 800a9be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a9c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d1d9      	bne.n	800a97e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d017      	beq.n	800aa04 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a9da:	4a15      	ldr	r2, [pc, #84]	@ (800aa30 <HAL_UART_IRQHandler+0x2c0>)
 800a9dc:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	f7f9 f9b5 	bl	8003d54 <HAL_DMA_Abort_IT>
 800a9ea:	4603      	mov	r3, r0
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d019      	beq.n	800aa24 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a9f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a9f8:	687a      	ldr	r2, [r7, #4]
 800a9fa:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800a9fe:	4610      	mov	r0, r2
 800aa00:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa02:	e00f      	b.n	800aa24 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800aa04:	6878      	ldr	r0, [r7, #4]
 800aa06:	f000 fa77 	bl	800aef8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa0a:	e00b      	b.n	800aa24 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800aa0c:	6878      	ldr	r0, [r7, #4]
 800aa0e:	f000 fa73 	bl	800aef8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa12:	e007      	b.n	800aa24 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800aa14:	6878      	ldr	r0, [r7, #4]
 800aa16:	f000 fa6f 	bl	800aef8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800aa22:	e253      	b.n	800aecc <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa24:	bf00      	nop
    return;
 800aa26:	e251      	b.n	800aecc <HAL_UART_IRQHandler+0x75c>
 800aa28:	10000001 	.word	0x10000001
 800aa2c:	04000120 	.word	0x04000120
 800aa30:	0800be1d 	.word	0x0800be1d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aa38:	2b01      	cmp	r3, #1
 800aa3a:	f040 81e7 	bne.w	800ae0c <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800aa3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aa42:	f003 0310 	and.w	r3, r3, #16
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	f000 81e0 	beq.w	800ae0c <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800aa4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aa50:	f003 0310 	and.w	r3, r3, #16
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	f000 81d9 	beq.w	800ae0c <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	2210      	movs	r2, #16
 800aa60:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	689b      	ldr	r3, [r3, #8]
 800aa68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa6c:	2b40      	cmp	r3, #64	@ 0x40
 800aa6e:	f040 8151 	bne.w	800ad14 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	4a96      	ldr	r2, [pc, #600]	@ (800acd4 <HAL_UART_IRQHandler+0x564>)
 800aa7c:	4293      	cmp	r3, r2
 800aa7e:	d068      	beq.n	800ab52 <HAL_UART_IRQHandler+0x3e2>
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	4a93      	ldr	r2, [pc, #588]	@ (800acd8 <HAL_UART_IRQHandler+0x568>)
 800aa8a:	4293      	cmp	r3, r2
 800aa8c:	d061      	beq.n	800ab52 <HAL_UART_IRQHandler+0x3e2>
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	4a91      	ldr	r2, [pc, #580]	@ (800acdc <HAL_UART_IRQHandler+0x56c>)
 800aa98:	4293      	cmp	r3, r2
 800aa9a:	d05a      	beq.n	800ab52 <HAL_UART_IRQHandler+0x3e2>
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	4a8e      	ldr	r2, [pc, #568]	@ (800ace0 <HAL_UART_IRQHandler+0x570>)
 800aaa6:	4293      	cmp	r3, r2
 800aaa8:	d053      	beq.n	800ab52 <HAL_UART_IRQHandler+0x3e2>
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	4a8c      	ldr	r2, [pc, #560]	@ (800ace4 <HAL_UART_IRQHandler+0x574>)
 800aab4:	4293      	cmp	r3, r2
 800aab6:	d04c      	beq.n	800ab52 <HAL_UART_IRQHandler+0x3e2>
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	4a89      	ldr	r2, [pc, #548]	@ (800ace8 <HAL_UART_IRQHandler+0x578>)
 800aac2:	4293      	cmp	r3, r2
 800aac4:	d045      	beq.n	800ab52 <HAL_UART_IRQHandler+0x3e2>
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	4a87      	ldr	r2, [pc, #540]	@ (800acec <HAL_UART_IRQHandler+0x57c>)
 800aad0:	4293      	cmp	r3, r2
 800aad2:	d03e      	beq.n	800ab52 <HAL_UART_IRQHandler+0x3e2>
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	4a84      	ldr	r2, [pc, #528]	@ (800acf0 <HAL_UART_IRQHandler+0x580>)
 800aade:	4293      	cmp	r3, r2
 800aae0:	d037      	beq.n	800ab52 <HAL_UART_IRQHandler+0x3e2>
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	4a82      	ldr	r2, [pc, #520]	@ (800acf4 <HAL_UART_IRQHandler+0x584>)
 800aaec:	4293      	cmp	r3, r2
 800aaee:	d030      	beq.n	800ab52 <HAL_UART_IRQHandler+0x3e2>
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	4a7f      	ldr	r2, [pc, #508]	@ (800acf8 <HAL_UART_IRQHandler+0x588>)
 800aafa:	4293      	cmp	r3, r2
 800aafc:	d029      	beq.n	800ab52 <HAL_UART_IRQHandler+0x3e2>
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	4a7d      	ldr	r2, [pc, #500]	@ (800acfc <HAL_UART_IRQHandler+0x58c>)
 800ab08:	4293      	cmp	r3, r2
 800ab0a:	d022      	beq.n	800ab52 <HAL_UART_IRQHandler+0x3e2>
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	4a7a      	ldr	r2, [pc, #488]	@ (800ad00 <HAL_UART_IRQHandler+0x590>)
 800ab16:	4293      	cmp	r3, r2
 800ab18:	d01b      	beq.n	800ab52 <HAL_UART_IRQHandler+0x3e2>
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	4a78      	ldr	r2, [pc, #480]	@ (800ad04 <HAL_UART_IRQHandler+0x594>)
 800ab24:	4293      	cmp	r3, r2
 800ab26:	d014      	beq.n	800ab52 <HAL_UART_IRQHandler+0x3e2>
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	4a75      	ldr	r2, [pc, #468]	@ (800ad08 <HAL_UART_IRQHandler+0x598>)
 800ab32:	4293      	cmp	r3, r2
 800ab34:	d00d      	beq.n	800ab52 <HAL_UART_IRQHandler+0x3e2>
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	4a73      	ldr	r2, [pc, #460]	@ (800ad0c <HAL_UART_IRQHandler+0x59c>)
 800ab40:	4293      	cmp	r3, r2
 800ab42:	d006      	beq.n	800ab52 <HAL_UART_IRQHandler+0x3e2>
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	4a70      	ldr	r2, [pc, #448]	@ (800ad10 <HAL_UART_IRQHandler+0x5a0>)
 800ab4e:	4293      	cmp	r3, r2
 800ab50:	d106      	bne.n	800ab60 <HAL_UART_IRQHandler+0x3f0>
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	685b      	ldr	r3, [r3, #4]
 800ab5c:	b29b      	uxth	r3, r3
 800ab5e:	e005      	b.n	800ab6c <HAL_UART_IRQHandler+0x3fc>
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	685b      	ldr	r3, [r3, #4]
 800ab6a:	b29b      	uxth	r3, r3
 800ab6c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ab70:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	f000 81ab 	beq.w	800aed0 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ab80:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ab84:	429a      	cmp	r2, r3
 800ab86:	f080 81a3 	bcs.w	800aed0 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ab90:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ab9a:	69db      	ldr	r3, [r3, #28]
 800ab9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aba0:	f000 8087 	beq.w	800acb2 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800abb0:	e853 3f00 	ldrex	r3, [r3]
 800abb4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800abb8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800abbc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800abc0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	461a      	mov	r2, r3
 800abca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800abce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800abd2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abd6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800abda:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800abde:	e841 2300 	strex	r3, r2, [r1]
 800abe2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800abe6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800abea:	2b00      	cmp	r3, #0
 800abec:	d1da      	bne.n	800aba4 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	3308      	adds	r3, #8
 800abf4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abf6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800abf8:	e853 3f00 	ldrex	r3, [r3]
 800abfc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800abfe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ac00:	f023 0301 	bic.w	r3, r3, #1
 800ac04:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	3308      	adds	r3, #8
 800ac0e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800ac12:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800ac16:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac18:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800ac1a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800ac1e:	e841 2300 	strex	r3, r2, [r1]
 800ac22:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800ac24:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d1e1      	bne.n	800abee <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	3308      	adds	r3, #8
 800ac30:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac32:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ac34:	e853 3f00 	ldrex	r3, [r3]
 800ac38:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800ac3a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ac3c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ac40:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	3308      	adds	r3, #8
 800ac4a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800ac4e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800ac50:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac52:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800ac54:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ac56:	e841 2300 	strex	r3, r2, [r1]
 800ac5a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800ac5c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d1e3      	bne.n	800ac2a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	2220      	movs	r2, #32
 800ac66:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ac78:	e853 3f00 	ldrex	r3, [r3]
 800ac7c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ac7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ac80:	f023 0310 	bic.w	r3, r3, #16
 800ac84:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	461a      	mov	r2, r3
 800ac8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ac92:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ac94:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac96:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ac98:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ac9a:	e841 2300 	strex	r3, r2, [r1]
 800ac9e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800aca0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d1e4      	bne.n	800ac70 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800acac:	4618      	mov	r0, r3
 800acae:	f7f8 fd33 	bl	8003718 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	2202      	movs	r2, #2
 800acb6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800acc4:	b29b      	uxth	r3, r3
 800acc6:	1ad3      	subs	r3, r2, r3
 800acc8:	b29b      	uxth	r3, r3
 800acca:	4619      	mov	r1, r3
 800accc:	6878      	ldr	r0, [r7, #4]
 800acce:	f7f6 f9ab 	bl	8001028 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800acd2:	e0fd      	b.n	800aed0 <HAL_UART_IRQHandler+0x760>
 800acd4:	40020010 	.word	0x40020010
 800acd8:	40020028 	.word	0x40020028
 800acdc:	40020040 	.word	0x40020040
 800ace0:	40020058 	.word	0x40020058
 800ace4:	40020070 	.word	0x40020070
 800ace8:	40020088 	.word	0x40020088
 800acec:	400200a0 	.word	0x400200a0
 800acf0:	400200b8 	.word	0x400200b8
 800acf4:	40020410 	.word	0x40020410
 800acf8:	40020428 	.word	0x40020428
 800acfc:	40020440 	.word	0x40020440
 800ad00:	40020458 	.word	0x40020458
 800ad04:	40020470 	.word	0x40020470
 800ad08:	40020488 	.word	0x40020488
 800ad0c:	400204a0 	.word	0x400204a0
 800ad10:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ad20:	b29b      	uxth	r3, r3
 800ad22:	1ad3      	subs	r3, r2, r3
 800ad24:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ad2e:	b29b      	uxth	r3, r3
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	f000 80cf 	beq.w	800aed4 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800ad36:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	f000 80ca 	beq.w	800aed4 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad48:	e853 3f00 	ldrex	r3, [r3]
 800ad4c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ad4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad50:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ad54:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	461a      	mov	r2, r3
 800ad5e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ad62:	647b      	str	r3, [r7, #68]	@ 0x44
 800ad64:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad66:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ad68:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ad6a:	e841 2300 	strex	r3, r2, [r1]
 800ad6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ad70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d1e4      	bne.n	800ad40 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	3308      	adds	r3, #8
 800ad7c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad80:	e853 3f00 	ldrex	r3, [r3]
 800ad84:	623b      	str	r3, [r7, #32]
   return(result);
 800ad86:	6a3a      	ldr	r2, [r7, #32]
 800ad88:	4b55      	ldr	r3, [pc, #340]	@ (800aee0 <HAL_UART_IRQHandler+0x770>)
 800ad8a:	4013      	ands	r3, r2
 800ad8c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	3308      	adds	r3, #8
 800ad96:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800ad9a:	633a      	str	r2, [r7, #48]	@ 0x30
 800ad9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad9e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ada0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ada2:	e841 2300 	strex	r3, r2, [r1]
 800ada6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ada8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d1e3      	bne.n	800ad76 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	2220      	movs	r2, #32
 800adb2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	2200      	movs	r2, #0
 800adba:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	2200      	movs	r2, #0
 800adc0:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adc8:	693b      	ldr	r3, [r7, #16]
 800adca:	e853 3f00 	ldrex	r3, [r3]
 800adce:	60fb      	str	r3, [r7, #12]
   return(result);
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	f023 0310 	bic.w	r3, r3, #16
 800add6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	461a      	mov	r2, r3
 800ade0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800ade4:	61fb      	str	r3, [r7, #28]
 800ade6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ade8:	69b9      	ldr	r1, [r7, #24]
 800adea:	69fa      	ldr	r2, [r7, #28]
 800adec:	e841 2300 	strex	r3, r2, [r1]
 800adf0:	617b      	str	r3, [r7, #20]
   return(result);
 800adf2:	697b      	ldr	r3, [r7, #20]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d1e4      	bne.n	800adc2 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	2202      	movs	r2, #2
 800adfc:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800adfe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ae02:	4619      	mov	r1, r3
 800ae04:	6878      	ldr	r0, [r7, #4]
 800ae06:	f7f6 f90f 	bl	8001028 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ae0a:	e063      	b.n	800aed4 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ae0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ae10:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d00e      	beq.n	800ae36 <HAL_UART_IRQHandler+0x6c6>
 800ae18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ae1c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d008      	beq.n	800ae36 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800ae2c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800ae2e:	6878      	ldr	r0, [r7, #4]
 800ae30:	f001 f835 	bl	800be9e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ae34:	e051      	b.n	800aeda <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800ae36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ae3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d014      	beq.n	800ae6c <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800ae42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ae46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d105      	bne.n	800ae5a <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800ae4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ae52:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d008      	beq.n	800ae6c <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d03a      	beq.n	800aed8 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ae66:	6878      	ldr	r0, [r7, #4]
 800ae68:	4798      	blx	r3
    }
    return;
 800ae6a:	e035      	b.n	800aed8 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ae6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ae70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d009      	beq.n	800ae8c <HAL_UART_IRQHandler+0x71c>
 800ae78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ae7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d003      	beq.n	800ae8c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800ae84:	6878      	ldr	r0, [r7, #4]
 800ae86:	f000 ffdf 	bl	800be48 <UART_EndTransmit_IT>
    return;
 800ae8a:	e026      	b.n	800aeda <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800ae8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ae90:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d009      	beq.n	800aeac <HAL_UART_IRQHandler+0x73c>
 800ae98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ae9c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d003      	beq.n	800aeac <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800aea4:	6878      	ldr	r0, [r7, #4]
 800aea6:	f001 f80e 	bl	800bec6 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800aeaa:	e016      	b.n	800aeda <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800aeac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aeb0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d010      	beq.n	800aeda <HAL_UART_IRQHandler+0x76a>
 800aeb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	da0c      	bge.n	800aeda <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800aec0:	6878      	ldr	r0, [r7, #4]
 800aec2:	f000 fff6 	bl	800beb2 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800aec6:	e008      	b.n	800aeda <HAL_UART_IRQHandler+0x76a>
      return;
 800aec8:	bf00      	nop
 800aeca:	e006      	b.n	800aeda <HAL_UART_IRQHandler+0x76a>
    return;
 800aecc:	bf00      	nop
 800aece:	e004      	b.n	800aeda <HAL_UART_IRQHandler+0x76a>
      return;
 800aed0:	bf00      	nop
 800aed2:	e002      	b.n	800aeda <HAL_UART_IRQHandler+0x76a>
      return;
 800aed4:	bf00      	nop
 800aed6:	e000      	b.n	800aeda <HAL_UART_IRQHandler+0x76a>
    return;
 800aed8:	bf00      	nop
  }
}
 800aeda:	37e8      	adds	r7, #232	@ 0xe8
 800aedc:	46bd      	mov	sp, r7
 800aede:	bd80      	pop	{r7, pc}
 800aee0:	effffffe 	.word	0xeffffffe

0800aee4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800aee4:	b480      	push	{r7}
 800aee6:	b083      	sub	sp, #12
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800aeec:	bf00      	nop
 800aeee:	370c      	adds	r7, #12
 800aef0:	46bd      	mov	sp, r7
 800aef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef6:	4770      	bx	lr

0800aef8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800aef8:	b480      	push	{r7}
 800aefa:	b083      	sub	sp, #12
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800af00:	bf00      	nop
 800af02:	370c      	adds	r7, #12
 800af04:	46bd      	mov	sp, r7
 800af06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af0a:	4770      	bx	lr

0800af0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800af0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800af10:	b092      	sub	sp, #72	@ 0x48
 800af12:	af00      	add	r7, sp, #0
 800af14:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800af16:	2300      	movs	r3, #0
 800af18:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800af1c:	697b      	ldr	r3, [r7, #20]
 800af1e:	689a      	ldr	r2, [r3, #8]
 800af20:	697b      	ldr	r3, [r7, #20]
 800af22:	691b      	ldr	r3, [r3, #16]
 800af24:	431a      	orrs	r2, r3
 800af26:	697b      	ldr	r3, [r7, #20]
 800af28:	695b      	ldr	r3, [r3, #20]
 800af2a:	431a      	orrs	r2, r3
 800af2c:	697b      	ldr	r3, [r7, #20]
 800af2e:	69db      	ldr	r3, [r3, #28]
 800af30:	4313      	orrs	r3, r2
 800af32:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800af34:	697b      	ldr	r3, [r7, #20]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	681a      	ldr	r2, [r3, #0]
 800af3a:	4bbe      	ldr	r3, [pc, #760]	@ (800b234 <UART_SetConfig+0x328>)
 800af3c:	4013      	ands	r3, r2
 800af3e:	697a      	ldr	r2, [r7, #20]
 800af40:	6812      	ldr	r2, [r2, #0]
 800af42:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800af44:	430b      	orrs	r3, r1
 800af46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800af48:	697b      	ldr	r3, [r7, #20]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	685b      	ldr	r3, [r3, #4]
 800af4e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800af52:	697b      	ldr	r3, [r7, #20]
 800af54:	68da      	ldr	r2, [r3, #12]
 800af56:	697b      	ldr	r3, [r7, #20]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	430a      	orrs	r2, r1
 800af5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800af5e:	697b      	ldr	r3, [r7, #20]
 800af60:	699b      	ldr	r3, [r3, #24]
 800af62:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800af64:	697b      	ldr	r3, [r7, #20]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	4ab3      	ldr	r2, [pc, #716]	@ (800b238 <UART_SetConfig+0x32c>)
 800af6a:	4293      	cmp	r3, r2
 800af6c:	d004      	beq.n	800af78 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800af6e:	697b      	ldr	r3, [r7, #20]
 800af70:	6a1b      	ldr	r3, [r3, #32]
 800af72:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800af74:	4313      	orrs	r3, r2
 800af76:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800af78:	697b      	ldr	r3, [r7, #20]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	689a      	ldr	r2, [r3, #8]
 800af7e:	4baf      	ldr	r3, [pc, #700]	@ (800b23c <UART_SetConfig+0x330>)
 800af80:	4013      	ands	r3, r2
 800af82:	697a      	ldr	r2, [r7, #20]
 800af84:	6812      	ldr	r2, [r2, #0]
 800af86:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800af88:	430b      	orrs	r3, r1
 800af8a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800af8c:	697b      	ldr	r3, [r7, #20]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af92:	f023 010f 	bic.w	r1, r3, #15
 800af96:	697b      	ldr	r3, [r7, #20]
 800af98:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800af9a:	697b      	ldr	r3, [r7, #20]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	430a      	orrs	r2, r1
 800afa0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800afa2:	697b      	ldr	r3, [r7, #20]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	4aa6      	ldr	r2, [pc, #664]	@ (800b240 <UART_SetConfig+0x334>)
 800afa8:	4293      	cmp	r3, r2
 800afaa:	d177      	bne.n	800b09c <UART_SetConfig+0x190>
 800afac:	4ba5      	ldr	r3, [pc, #660]	@ (800b244 <UART_SetConfig+0x338>)
 800afae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800afb0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800afb4:	2b28      	cmp	r3, #40	@ 0x28
 800afb6:	d86d      	bhi.n	800b094 <UART_SetConfig+0x188>
 800afb8:	a201      	add	r2, pc, #4	@ (adr r2, 800afc0 <UART_SetConfig+0xb4>)
 800afba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afbe:	bf00      	nop
 800afc0:	0800b065 	.word	0x0800b065
 800afc4:	0800b095 	.word	0x0800b095
 800afc8:	0800b095 	.word	0x0800b095
 800afcc:	0800b095 	.word	0x0800b095
 800afd0:	0800b095 	.word	0x0800b095
 800afd4:	0800b095 	.word	0x0800b095
 800afd8:	0800b095 	.word	0x0800b095
 800afdc:	0800b095 	.word	0x0800b095
 800afe0:	0800b06d 	.word	0x0800b06d
 800afe4:	0800b095 	.word	0x0800b095
 800afe8:	0800b095 	.word	0x0800b095
 800afec:	0800b095 	.word	0x0800b095
 800aff0:	0800b095 	.word	0x0800b095
 800aff4:	0800b095 	.word	0x0800b095
 800aff8:	0800b095 	.word	0x0800b095
 800affc:	0800b095 	.word	0x0800b095
 800b000:	0800b075 	.word	0x0800b075
 800b004:	0800b095 	.word	0x0800b095
 800b008:	0800b095 	.word	0x0800b095
 800b00c:	0800b095 	.word	0x0800b095
 800b010:	0800b095 	.word	0x0800b095
 800b014:	0800b095 	.word	0x0800b095
 800b018:	0800b095 	.word	0x0800b095
 800b01c:	0800b095 	.word	0x0800b095
 800b020:	0800b07d 	.word	0x0800b07d
 800b024:	0800b095 	.word	0x0800b095
 800b028:	0800b095 	.word	0x0800b095
 800b02c:	0800b095 	.word	0x0800b095
 800b030:	0800b095 	.word	0x0800b095
 800b034:	0800b095 	.word	0x0800b095
 800b038:	0800b095 	.word	0x0800b095
 800b03c:	0800b095 	.word	0x0800b095
 800b040:	0800b085 	.word	0x0800b085
 800b044:	0800b095 	.word	0x0800b095
 800b048:	0800b095 	.word	0x0800b095
 800b04c:	0800b095 	.word	0x0800b095
 800b050:	0800b095 	.word	0x0800b095
 800b054:	0800b095 	.word	0x0800b095
 800b058:	0800b095 	.word	0x0800b095
 800b05c:	0800b095 	.word	0x0800b095
 800b060:	0800b08d 	.word	0x0800b08d
 800b064:	2301      	movs	r3, #1
 800b066:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b06a:	e222      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b06c:	2304      	movs	r3, #4
 800b06e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b072:	e21e      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b074:	2308      	movs	r3, #8
 800b076:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b07a:	e21a      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b07c:	2310      	movs	r3, #16
 800b07e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b082:	e216      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b084:	2320      	movs	r3, #32
 800b086:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b08a:	e212      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b08c:	2340      	movs	r3, #64	@ 0x40
 800b08e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b092:	e20e      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b094:	2380      	movs	r3, #128	@ 0x80
 800b096:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b09a:	e20a      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b09c:	697b      	ldr	r3, [r7, #20]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	4a69      	ldr	r2, [pc, #420]	@ (800b248 <UART_SetConfig+0x33c>)
 800b0a2:	4293      	cmp	r3, r2
 800b0a4:	d130      	bne.n	800b108 <UART_SetConfig+0x1fc>
 800b0a6:	4b67      	ldr	r3, [pc, #412]	@ (800b244 <UART_SetConfig+0x338>)
 800b0a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b0aa:	f003 0307 	and.w	r3, r3, #7
 800b0ae:	2b05      	cmp	r3, #5
 800b0b0:	d826      	bhi.n	800b100 <UART_SetConfig+0x1f4>
 800b0b2:	a201      	add	r2, pc, #4	@ (adr r2, 800b0b8 <UART_SetConfig+0x1ac>)
 800b0b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0b8:	0800b0d1 	.word	0x0800b0d1
 800b0bc:	0800b0d9 	.word	0x0800b0d9
 800b0c0:	0800b0e1 	.word	0x0800b0e1
 800b0c4:	0800b0e9 	.word	0x0800b0e9
 800b0c8:	0800b0f1 	.word	0x0800b0f1
 800b0cc:	0800b0f9 	.word	0x0800b0f9
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0d6:	e1ec      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b0d8:	2304      	movs	r3, #4
 800b0da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0de:	e1e8      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b0e0:	2308      	movs	r3, #8
 800b0e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0e6:	e1e4      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b0e8:	2310      	movs	r3, #16
 800b0ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0ee:	e1e0      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b0f0:	2320      	movs	r3, #32
 800b0f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0f6:	e1dc      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b0f8:	2340      	movs	r3, #64	@ 0x40
 800b0fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0fe:	e1d8      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b100:	2380      	movs	r3, #128	@ 0x80
 800b102:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b106:	e1d4      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b108:	697b      	ldr	r3, [r7, #20]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	4a4f      	ldr	r2, [pc, #316]	@ (800b24c <UART_SetConfig+0x340>)
 800b10e:	4293      	cmp	r3, r2
 800b110:	d130      	bne.n	800b174 <UART_SetConfig+0x268>
 800b112:	4b4c      	ldr	r3, [pc, #304]	@ (800b244 <UART_SetConfig+0x338>)
 800b114:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b116:	f003 0307 	and.w	r3, r3, #7
 800b11a:	2b05      	cmp	r3, #5
 800b11c:	d826      	bhi.n	800b16c <UART_SetConfig+0x260>
 800b11e:	a201      	add	r2, pc, #4	@ (adr r2, 800b124 <UART_SetConfig+0x218>)
 800b120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b124:	0800b13d 	.word	0x0800b13d
 800b128:	0800b145 	.word	0x0800b145
 800b12c:	0800b14d 	.word	0x0800b14d
 800b130:	0800b155 	.word	0x0800b155
 800b134:	0800b15d 	.word	0x0800b15d
 800b138:	0800b165 	.word	0x0800b165
 800b13c:	2300      	movs	r3, #0
 800b13e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b142:	e1b6      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b144:	2304      	movs	r3, #4
 800b146:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b14a:	e1b2      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b14c:	2308      	movs	r3, #8
 800b14e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b152:	e1ae      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b154:	2310      	movs	r3, #16
 800b156:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b15a:	e1aa      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b15c:	2320      	movs	r3, #32
 800b15e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b162:	e1a6      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b164:	2340      	movs	r3, #64	@ 0x40
 800b166:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b16a:	e1a2      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b16c:	2380      	movs	r3, #128	@ 0x80
 800b16e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b172:	e19e      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b174:	697b      	ldr	r3, [r7, #20]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	4a35      	ldr	r2, [pc, #212]	@ (800b250 <UART_SetConfig+0x344>)
 800b17a:	4293      	cmp	r3, r2
 800b17c:	d130      	bne.n	800b1e0 <UART_SetConfig+0x2d4>
 800b17e:	4b31      	ldr	r3, [pc, #196]	@ (800b244 <UART_SetConfig+0x338>)
 800b180:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b182:	f003 0307 	and.w	r3, r3, #7
 800b186:	2b05      	cmp	r3, #5
 800b188:	d826      	bhi.n	800b1d8 <UART_SetConfig+0x2cc>
 800b18a:	a201      	add	r2, pc, #4	@ (adr r2, 800b190 <UART_SetConfig+0x284>)
 800b18c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b190:	0800b1a9 	.word	0x0800b1a9
 800b194:	0800b1b1 	.word	0x0800b1b1
 800b198:	0800b1b9 	.word	0x0800b1b9
 800b19c:	0800b1c1 	.word	0x0800b1c1
 800b1a0:	0800b1c9 	.word	0x0800b1c9
 800b1a4:	0800b1d1 	.word	0x0800b1d1
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b1ae:	e180      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b1b0:	2304      	movs	r3, #4
 800b1b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b1b6:	e17c      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b1b8:	2308      	movs	r3, #8
 800b1ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b1be:	e178      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b1c0:	2310      	movs	r3, #16
 800b1c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b1c6:	e174      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b1c8:	2320      	movs	r3, #32
 800b1ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b1ce:	e170      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b1d0:	2340      	movs	r3, #64	@ 0x40
 800b1d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b1d6:	e16c      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b1d8:	2380      	movs	r3, #128	@ 0x80
 800b1da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b1de:	e168      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b1e0:	697b      	ldr	r3, [r7, #20]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	4a1b      	ldr	r2, [pc, #108]	@ (800b254 <UART_SetConfig+0x348>)
 800b1e6:	4293      	cmp	r3, r2
 800b1e8:	d142      	bne.n	800b270 <UART_SetConfig+0x364>
 800b1ea:	4b16      	ldr	r3, [pc, #88]	@ (800b244 <UART_SetConfig+0x338>)
 800b1ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b1ee:	f003 0307 	and.w	r3, r3, #7
 800b1f2:	2b05      	cmp	r3, #5
 800b1f4:	d838      	bhi.n	800b268 <UART_SetConfig+0x35c>
 800b1f6:	a201      	add	r2, pc, #4	@ (adr r2, 800b1fc <UART_SetConfig+0x2f0>)
 800b1f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1fc:	0800b215 	.word	0x0800b215
 800b200:	0800b21d 	.word	0x0800b21d
 800b204:	0800b225 	.word	0x0800b225
 800b208:	0800b22d 	.word	0x0800b22d
 800b20c:	0800b259 	.word	0x0800b259
 800b210:	0800b261 	.word	0x0800b261
 800b214:	2300      	movs	r3, #0
 800b216:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b21a:	e14a      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b21c:	2304      	movs	r3, #4
 800b21e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b222:	e146      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b224:	2308      	movs	r3, #8
 800b226:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b22a:	e142      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b22c:	2310      	movs	r3, #16
 800b22e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b232:	e13e      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b234:	cfff69f3 	.word	0xcfff69f3
 800b238:	58000c00 	.word	0x58000c00
 800b23c:	11fff4ff 	.word	0x11fff4ff
 800b240:	40011000 	.word	0x40011000
 800b244:	58024400 	.word	0x58024400
 800b248:	40004400 	.word	0x40004400
 800b24c:	40004800 	.word	0x40004800
 800b250:	40004c00 	.word	0x40004c00
 800b254:	40005000 	.word	0x40005000
 800b258:	2320      	movs	r3, #32
 800b25a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b25e:	e128      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b260:	2340      	movs	r3, #64	@ 0x40
 800b262:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b266:	e124      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b268:	2380      	movs	r3, #128	@ 0x80
 800b26a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b26e:	e120      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b270:	697b      	ldr	r3, [r7, #20]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	4acb      	ldr	r2, [pc, #812]	@ (800b5a4 <UART_SetConfig+0x698>)
 800b276:	4293      	cmp	r3, r2
 800b278:	d176      	bne.n	800b368 <UART_SetConfig+0x45c>
 800b27a:	4bcb      	ldr	r3, [pc, #812]	@ (800b5a8 <UART_SetConfig+0x69c>)
 800b27c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b27e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b282:	2b28      	cmp	r3, #40	@ 0x28
 800b284:	d86c      	bhi.n	800b360 <UART_SetConfig+0x454>
 800b286:	a201      	add	r2, pc, #4	@ (adr r2, 800b28c <UART_SetConfig+0x380>)
 800b288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b28c:	0800b331 	.word	0x0800b331
 800b290:	0800b361 	.word	0x0800b361
 800b294:	0800b361 	.word	0x0800b361
 800b298:	0800b361 	.word	0x0800b361
 800b29c:	0800b361 	.word	0x0800b361
 800b2a0:	0800b361 	.word	0x0800b361
 800b2a4:	0800b361 	.word	0x0800b361
 800b2a8:	0800b361 	.word	0x0800b361
 800b2ac:	0800b339 	.word	0x0800b339
 800b2b0:	0800b361 	.word	0x0800b361
 800b2b4:	0800b361 	.word	0x0800b361
 800b2b8:	0800b361 	.word	0x0800b361
 800b2bc:	0800b361 	.word	0x0800b361
 800b2c0:	0800b361 	.word	0x0800b361
 800b2c4:	0800b361 	.word	0x0800b361
 800b2c8:	0800b361 	.word	0x0800b361
 800b2cc:	0800b341 	.word	0x0800b341
 800b2d0:	0800b361 	.word	0x0800b361
 800b2d4:	0800b361 	.word	0x0800b361
 800b2d8:	0800b361 	.word	0x0800b361
 800b2dc:	0800b361 	.word	0x0800b361
 800b2e0:	0800b361 	.word	0x0800b361
 800b2e4:	0800b361 	.word	0x0800b361
 800b2e8:	0800b361 	.word	0x0800b361
 800b2ec:	0800b349 	.word	0x0800b349
 800b2f0:	0800b361 	.word	0x0800b361
 800b2f4:	0800b361 	.word	0x0800b361
 800b2f8:	0800b361 	.word	0x0800b361
 800b2fc:	0800b361 	.word	0x0800b361
 800b300:	0800b361 	.word	0x0800b361
 800b304:	0800b361 	.word	0x0800b361
 800b308:	0800b361 	.word	0x0800b361
 800b30c:	0800b351 	.word	0x0800b351
 800b310:	0800b361 	.word	0x0800b361
 800b314:	0800b361 	.word	0x0800b361
 800b318:	0800b361 	.word	0x0800b361
 800b31c:	0800b361 	.word	0x0800b361
 800b320:	0800b361 	.word	0x0800b361
 800b324:	0800b361 	.word	0x0800b361
 800b328:	0800b361 	.word	0x0800b361
 800b32c:	0800b359 	.word	0x0800b359
 800b330:	2301      	movs	r3, #1
 800b332:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b336:	e0bc      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b338:	2304      	movs	r3, #4
 800b33a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b33e:	e0b8      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b340:	2308      	movs	r3, #8
 800b342:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b346:	e0b4      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b348:	2310      	movs	r3, #16
 800b34a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b34e:	e0b0      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b350:	2320      	movs	r3, #32
 800b352:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b356:	e0ac      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b358:	2340      	movs	r3, #64	@ 0x40
 800b35a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b35e:	e0a8      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b360:	2380      	movs	r3, #128	@ 0x80
 800b362:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b366:	e0a4      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b368:	697b      	ldr	r3, [r7, #20]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	4a8f      	ldr	r2, [pc, #572]	@ (800b5ac <UART_SetConfig+0x6a0>)
 800b36e:	4293      	cmp	r3, r2
 800b370:	d130      	bne.n	800b3d4 <UART_SetConfig+0x4c8>
 800b372:	4b8d      	ldr	r3, [pc, #564]	@ (800b5a8 <UART_SetConfig+0x69c>)
 800b374:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b376:	f003 0307 	and.w	r3, r3, #7
 800b37a:	2b05      	cmp	r3, #5
 800b37c:	d826      	bhi.n	800b3cc <UART_SetConfig+0x4c0>
 800b37e:	a201      	add	r2, pc, #4	@ (adr r2, 800b384 <UART_SetConfig+0x478>)
 800b380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b384:	0800b39d 	.word	0x0800b39d
 800b388:	0800b3a5 	.word	0x0800b3a5
 800b38c:	0800b3ad 	.word	0x0800b3ad
 800b390:	0800b3b5 	.word	0x0800b3b5
 800b394:	0800b3bd 	.word	0x0800b3bd
 800b398:	0800b3c5 	.word	0x0800b3c5
 800b39c:	2300      	movs	r3, #0
 800b39e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b3a2:	e086      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b3a4:	2304      	movs	r3, #4
 800b3a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b3aa:	e082      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b3ac:	2308      	movs	r3, #8
 800b3ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b3b2:	e07e      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b3b4:	2310      	movs	r3, #16
 800b3b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b3ba:	e07a      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b3bc:	2320      	movs	r3, #32
 800b3be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b3c2:	e076      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b3c4:	2340      	movs	r3, #64	@ 0x40
 800b3c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b3ca:	e072      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b3cc:	2380      	movs	r3, #128	@ 0x80
 800b3ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b3d2:	e06e      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b3d4:	697b      	ldr	r3, [r7, #20]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	4a75      	ldr	r2, [pc, #468]	@ (800b5b0 <UART_SetConfig+0x6a4>)
 800b3da:	4293      	cmp	r3, r2
 800b3dc:	d130      	bne.n	800b440 <UART_SetConfig+0x534>
 800b3de:	4b72      	ldr	r3, [pc, #456]	@ (800b5a8 <UART_SetConfig+0x69c>)
 800b3e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b3e2:	f003 0307 	and.w	r3, r3, #7
 800b3e6:	2b05      	cmp	r3, #5
 800b3e8:	d826      	bhi.n	800b438 <UART_SetConfig+0x52c>
 800b3ea:	a201      	add	r2, pc, #4	@ (adr r2, 800b3f0 <UART_SetConfig+0x4e4>)
 800b3ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3f0:	0800b409 	.word	0x0800b409
 800b3f4:	0800b411 	.word	0x0800b411
 800b3f8:	0800b419 	.word	0x0800b419
 800b3fc:	0800b421 	.word	0x0800b421
 800b400:	0800b429 	.word	0x0800b429
 800b404:	0800b431 	.word	0x0800b431
 800b408:	2300      	movs	r3, #0
 800b40a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b40e:	e050      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b410:	2304      	movs	r3, #4
 800b412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b416:	e04c      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b418:	2308      	movs	r3, #8
 800b41a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b41e:	e048      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b420:	2310      	movs	r3, #16
 800b422:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b426:	e044      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b428:	2320      	movs	r3, #32
 800b42a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b42e:	e040      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b430:	2340      	movs	r3, #64	@ 0x40
 800b432:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b436:	e03c      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b438:	2380      	movs	r3, #128	@ 0x80
 800b43a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b43e:	e038      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b440:	697b      	ldr	r3, [r7, #20]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	4a5b      	ldr	r2, [pc, #364]	@ (800b5b4 <UART_SetConfig+0x6a8>)
 800b446:	4293      	cmp	r3, r2
 800b448:	d130      	bne.n	800b4ac <UART_SetConfig+0x5a0>
 800b44a:	4b57      	ldr	r3, [pc, #348]	@ (800b5a8 <UART_SetConfig+0x69c>)
 800b44c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b44e:	f003 0307 	and.w	r3, r3, #7
 800b452:	2b05      	cmp	r3, #5
 800b454:	d826      	bhi.n	800b4a4 <UART_SetConfig+0x598>
 800b456:	a201      	add	r2, pc, #4	@ (adr r2, 800b45c <UART_SetConfig+0x550>)
 800b458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b45c:	0800b475 	.word	0x0800b475
 800b460:	0800b47d 	.word	0x0800b47d
 800b464:	0800b485 	.word	0x0800b485
 800b468:	0800b48d 	.word	0x0800b48d
 800b46c:	0800b495 	.word	0x0800b495
 800b470:	0800b49d 	.word	0x0800b49d
 800b474:	2302      	movs	r3, #2
 800b476:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b47a:	e01a      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b47c:	2304      	movs	r3, #4
 800b47e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b482:	e016      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b484:	2308      	movs	r3, #8
 800b486:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b48a:	e012      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b48c:	2310      	movs	r3, #16
 800b48e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b492:	e00e      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b494:	2320      	movs	r3, #32
 800b496:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b49a:	e00a      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b49c:	2340      	movs	r3, #64	@ 0x40
 800b49e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4a2:	e006      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b4a4:	2380      	movs	r3, #128	@ 0x80
 800b4a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4aa:	e002      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b4ac:	2380      	movs	r3, #128	@ 0x80
 800b4ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b4b2:	697b      	ldr	r3, [r7, #20]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	4a3f      	ldr	r2, [pc, #252]	@ (800b5b4 <UART_SetConfig+0x6a8>)
 800b4b8:	4293      	cmp	r3, r2
 800b4ba:	f040 80f8 	bne.w	800b6ae <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b4be:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b4c2:	2b20      	cmp	r3, #32
 800b4c4:	dc46      	bgt.n	800b554 <UART_SetConfig+0x648>
 800b4c6:	2b02      	cmp	r3, #2
 800b4c8:	f2c0 8082 	blt.w	800b5d0 <UART_SetConfig+0x6c4>
 800b4cc:	3b02      	subs	r3, #2
 800b4ce:	2b1e      	cmp	r3, #30
 800b4d0:	d87e      	bhi.n	800b5d0 <UART_SetConfig+0x6c4>
 800b4d2:	a201      	add	r2, pc, #4	@ (adr r2, 800b4d8 <UART_SetConfig+0x5cc>)
 800b4d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4d8:	0800b55b 	.word	0x0800b55b
 800b4dc:	0800b5d1 	.word	0x0800b5d1
 800b4e0:	0800b563 	.word	0x0800b563
 800b4e4:	0800b5d1 	.word	0x0800b5d1
 800b4e8:	0800b5d1 	.word	0x0800b5d1
 800b4ec:	0800b5d1 	.word	0x0800b5d1
 800b4f0:	0800b573 	.word	0x0800b573
 800b4f4:	0800b5d1 	.word	0x0800b5d1
 800b4f8:	0800b5d1 	.word	0x0800b5d1
 800b4fc:	0800b5d1 	.word	0x0800b5d1
 800b500:	0800b5d1 	.word	0x0800b5d1
 800b504:	0800b5d1 	.word	0x0800b5d1
 800b508:	0800b5d1 	.word	0x0800b5d1
 800b50c:	0800b5d1 	.word	0x0800b5d1
 800b510:	0800b583 	.word	0x0800b583
 800b514:	0800b5d1 	.word	0x0800b5d1
 800b518:	0800b5d1 	.word	0x0800b5d1
 800b51c:	0800b5d1 	.word	0x0800b5d1
 800b520:	0800b5d1 	.word	0x0800b5d1
 800b524:	0800b5d1 	.word	0x0800b5d1
 800b528:	0800b5d1 	.word	0x0800b5d1
 800b52c:	0800b5d1 	.word	0x0800b5d1
 800b530:	0800b5d1 	.word	0x0800b5d1
 800b534:	0800b5d1 	.word	0x0800b5d1
 800b538:	0800b5d1 	.word	0x0800b5d1
 800b53c:	0800b5d1 	.word	0x0800b5d1
 800b540:	0800b5d1 	.word	0x0800b5d1
 800b544:	0800b5d1 	.word	0x0800b5d1
 800b548:	0800b5d1 	.word	0x0800b5d1
 800b54c:	0800b5d1 	.word	0x0800b5d1
 800b550:	0800b5c3 	.word	0x0800b5c3
 800b554:	2b40      	cmp	r3, #64	@ 0x40
 800b556:	d037      	beq.n	800b5c8 <UART_SetConfig+0x6bc>
 800b558:	e03a      	b.n	800b5d0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b55a:	f7fd fa4f 	bl	80089fc <HAL_RCCEx_GetD3PCLK1Freq>
 800b55e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b560:	e03c      	b.n	800b5dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b562:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b566:	4618      	mov	r0, r3
 800b568:	f7fd fa5e 	bl	8008a28 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b56c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b56e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b570:	e034      	b.n	800b5dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b572:	f107 0318 	add.w	r3, r7, #24
 800b576:	4618      	mov	r0, r3
 800b578:	f7fd fbaa 	bl	8008cd0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b57c:	69fb      	ldr	r3, [r7, #28]
 800b57e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b580:	e02c      	b.n	800b5dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b582:	4b09      	ldr	r3, [pc, #36]	@ (800b5a8 <UART_SetConfig+0x69c>)
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	f003 0320 	and.w	r3, r3, #32
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d016      	beq.n	800b5bc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b58e:	4b06      	ldr	r3, [pc, #24]	@ (800b5a8 <UART_SetConfig+0x69c>)
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	08db      	lsrs	r3, r3, #3
 800b594:	f003 0303 	and.w	r3, r3, #3
 800b598:	4a07      	ldr	r2, [pc, #28]	@ (800b5b8 <UART_SetConfig+0x6ac>)
 800b59a:	fa22 f303 	lsr.w	r3, r2, r3
 800b59e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b5a0:	e01c      	b.n	800b5dc <UART_SetConfig+0x6d0>
 800b5a2:	bf00      	nop
 800b5a4:	40011400 	.word	0x40011400
 800b5a8:	58024400 	.word	0x58024400
 800b5ac:	40007800 	.word	0x40007800
 800b5b0:	40007c00 	.word	0x40007c00
 800b5b4:	58000c00 	.word	0x58000c00
 800b5b8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800b5bc:	4b9d      	ldr	r3, [pc, #628]	@ (800b834 <UART_SetConfig+0x928>)
 800b5be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b5c0:	e00c      	b.n	800b5dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b5c2:	4b9d      	ldr	r3, [pc, #628]	@ (800b838 <UART_SetConfig+0x92c>)
 800b5c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b5c6:	e009      	b.n	800b5dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b5c8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b5cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b5ce:	e005      	b.n	800b5dc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b5d4:	2301      	movs	r3, #1
 800b5d6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b5da:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b5dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	f000 81de 	beq.w	800b9a0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b5e4:	697b      	ldr	r3, [r7, #20]
 800b5e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5e8:	4a94      	ldr	r2, [pc, #592]	@ (800b83c <UART_SetConfig+0x930>)
 800b5ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b5ee:	461a      	mov	r2, r3
 800b5f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b5f2:	fbb3 f3f2 	udiv	r3, r3, r2
 800b5f6:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b5f8:	697b      	ldr	r3, [r7, #20]
 800b5fa:	685a      	ldr	r2, [r3, #4]
 800b5fc:	4613      	mov	r3, r2
 800b5fe:	005b      	lsls	r3, r3, #1
 800b600:	4413      	add	r3, r2
 800b602:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b604:	429a      	cmp	r2, r3
 800b606:	d305      	bcc.n	800b614 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b608:	697b      	ldr	r3, [r7, #20]
 800b60a:	685b      	ldr	r3, [r3, #4]
 800b60c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b60e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b610:	429a      	cmp	r2, r3
 800b612:	d903      	bls.n	800b61c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800b614:	2301      	movs	r3, #1
 800b616:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b61a:	e1c1      	b.n	800b9a0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b61c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b61e:	2200      	movs	r2, #0
 800b620:	60bb      	str	r3, [r7, #8]
 800b622:	60fa      	str	r2, [r7, #12]
 800b624:	697b      	ldr	r3, [r7, #20]
 800b626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b628:	4a84      	ldr	r2, [pc, #528]	@ (800b83c <UART_SetConfig+0x930>)
 800b62a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b62e:	b29b      	uxth	r3, r3
 800b630:	2200      	movs	r2, #0
 800b632:	603b      	str	r3, [r7, #0]
 800b634:	607a      	str	r2, [r7, #4]
 800b636:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b63a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b63e:	f7f4 fea7 	bl	8000390 <__aeabi_uldivmod>
 800b642:	4602      	mov	r2, r0
 800b644:	460b      	mov	r3, r1
 800b646:	4610      	mov	r0, r2
 800b648:	4619      	mov	r1, r3
 800b64a:	f04f 0200 	mov.w	r2, #0
 800b64e:	f04f 0300 	mov.w	r3, #0
 800b652:	020b      	lsls	r3, r1, #8
 800b654:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b658:	0202      	lsls	r2, r0, #8
 800b65a:	6979      	ldr	r1, [r7, #20]
 800b65c:	6849      	ldr	r1, [r1, #4]
 800b65e:	0849      	lsrs	r1, r1, #1
 800b660:	2000      	movs	r0, #0
 800b662:	460c      	mov	r4, r1
 800b664:	4605      	mov	r5, r0
 800b666:	eb12 0804 	adds.w	r8, r2, r4
 800b66a:	eb43 0905 	adc.w	r9, r3, r5
 800b66e:	697b      	ldr	r3, [r7, #20]
 800b670:	685b      	ldr	r3, [r3, #4]
 800b672:	2200      	movs	r2, #0
 800b674:	469a      	mov	sl, r3
 800b676:	4693      	mov	fp, r2
 800b678:	4652      	mov	r2, sl
 800b67a:	465b      	mov	r3, fp
 800b67c:	4640      	mov	r0, r8
 800b67e:	4649      	mov	r1, r9
 800b680:	f7f4 fe86 	bl	8000390 <__aeabi_uldivmod>
 800b684:	4602      	mov	r2, r0
 800b686:	460b      	mov	r3, r1
 800b688:	4613      	mov	r3, r2
 800b68a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b68c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b68e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b692:	d308      	bcc.n	800b6a6 <UART_SetConfig+0x79a>
 800b694:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b696:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b69a:	d204      	bcs.n	800b6a6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800b69c:	697b      	ldr	r3, [r7, #20]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b6a2:	60da      	str	r2, [r3, #12]
 800b6a4:	e17c      	b.n	800b9a0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800b6a6:	2301      	movs	r3, #1
 800b6a8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b6ac:	e178      	b.n	800b9a0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b6ae:	697b      	ldr	r3, [r7, #20]
 800b6b0:	69db      	ldr	r3, [r3, #28]
 800b6b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b6b6:	f040 80c5 	bne.w	800b844 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800b6ba:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b6be:	2b20      	cmp	r3, #32
 800b6c0:	dc48      	bgt.n	800b754 <UART_SetConfig+0x848>
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	db7b      	blt.n	800b7be <UART_SetConfig+0x8b2>
 800b6c6:	2b20      	cmp	r3, #32
 800b6c8:	d879      	bhi.n	800b7be <UART_SetConfig+0x8b2>
 800b6ca:	a201      	add	r2, pc, #4	@ (adr r2, 800b6d0 <UART_SetConfig+0x7c4>)
 800b6cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6d0:	0800b75b 	.word	0x0800b75b
 800b6d4:	0800b763 	.word	0x0800b763
 800b6d8:	0800b7bf 	.word	0x0800b7bf
 800b6dc:	0800b7bf 	.word	0x0800b7bf
 800b6e0:	0800b76b 	.word	0x0800b76b
 800b6e4:	0800b7bf 	.word	0x0800b7bf
 800b6e8:	0800b7bf 	.word	0x0800b7bf
 800b6ec:	0800b7bf 	.word	0x0800b7bf
 800b6f0:	0800b77b 	.word	0x0800b77b
 800b6f4:	0800b7bf 	.word	0x0800b7bf
 800b6f8:	0800b7bf 	.word	0x0800b7bf
 800b6fc:	0800b7bf 	.word	0x0800b7bf
 800b700:	0800b7bf 	.word	0x0800b7bf
 800b704:	0800b7bf 	.word	0x0800b7bf
 800b708:	0800b7bf 	.word	0x0800b7bf
 800b70c:	0800b7bf 	.word	0x0800b7bf
 800b710:	0800b78b 	.word	0x0800b78b
 800b714:	0800b7bf 	.word	0x0800b7bf
 800b718:	0800b7bf 	.word	0x0800b7bf
 800b71c:	0800b7bf 	.word	0x0800b7bf
 800b720:	0800b7bf 	.word	0x0800b7bf
 800b724:	0800b7bf 	.word	0x0800b7bf
 800b728:	0800b7bf 	.word	0x0800b7bf
 800b72c:	0800b7bf 	.word	0x0800b7bf
 800b730:	0800b7bf 	.word	0x0800b7bf
 800b734:	0800b7bf 	.word	0x0800b7bf
 800b738:	0800b7bf 	.word	0x0800b7bf
 800b73c:	0800b7bf 	.word	0x0800b7bf
 800b740:	0800b7bf 	.word	0x0800b7bf
 800b744:	0800b7bf 	.word	0x0800b7bf
 800b748:	0800b7bf 	.word	0x0800b7bf
 800b74c:	0800b7bf 	.word	0x0800b7bf
 800b750:	0800b7b1 	.word	0x0800b7b1
 800b754:	2b40      	cmp	r3, #64	@ 0x40
 800b756:	d02e      	beq.n	800b7b6 <UART_SetConfig+0x8aa>
 800b758:	e031      	b.n	800b7be <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b75a:	f7fb f999 	bl	8006a90 <HAL_RCC_GetPCLK1Freq>
 800b75e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b760:	e033      	b.n	800b7ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b762:	f7fb f9ab 	bl	8006abc <HAL_RCC_GetPCLK2Freq>
 800b766:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b768:	e02f      	b.n	800b7ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b76a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b76e:	4618      	mov	r0, r3
 800b770:	f7fd f95a 	bl	8008a28 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b774:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b776:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b778:	e027      	b.n	800b7ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b77a:	f107 0318 	add.w	r3, r7, #24
 800b77e:	4618      	mov	r0, r3
 800b780:	f7fd faa6 	bl	8008cd0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b784:	69fb      	ldr	r3, [r7, #28]
 800b786:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b788:	e01f      	b.n	800b7ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b78a:	4b2d      	ldr	r3, [pc, #180]	@ (800b840 <UART_SetConfig+0x934>)
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	f003 0320 	and.w	r3, r3, #32
 800b792:	2b00      	cmp	r3, #0
 800b794:	d009      	beq.n	800b7aa <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b796:	4b2a      	ldr	r3, [pc, #168]	@ (800b840 <UART_SetConfig+0x934>)
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	08db      	lsrs	r3, r3, #3
 800b79c:	f003 0303 	and.w	r3, r3, #3
 800b7a0:	4a24      	ldr	r2, [pc, #144]	@ (800b834 <UART_SetConfig+0x928>)
 800b7a2:	fa22 f303 	lsr.w	r3, r2, r3
 800b7a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b7a8:	e00f      	b.n	800b7ca <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800b7aa:	4b22      	ldr	r3, [pc, #136]	@ (800b834 <UART_SetConfig+0x928>)
 800b7ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b7ae:	e00c      	b.n	800b7ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b7b0:	4b21      	ldr	r3, [pc, #132]	@ (800b838 <UART_SetConfig+0x92c>)
 800b7b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b7b4:	e009      	b.n	800b7ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b7b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b7ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b7bc:	e005      	b.n	800b7ca <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800b7be:	2300      	movs	r3, #0
 800b7c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b7c2:	2301      	movs	r3, #1
 800b7c4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b7c8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b7ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	f000 80e7 	beq.w	800b9a0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b7d2:	697b      	ldr	r3, [r7, #20]
 800b7d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b7d6:	4a19      	ldr	r2, [pc, #100]	@ (800b83c <UART_SetConfig+0x930>)
 800b7d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b7dc:	461a      	mov	r2, r3
 800b7de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7e0:	fbb3 f3f2 	udiv	r3, r3, r2
 800b7e4:	005a      	lsls	r2, r3, #1
 800b7e6:	697b      	ldr	r3, [r7, #20]
 800b7e8:	685b      	ldr	r3, [r3, #4]
 800b7ea:	085b      	lsrs	r3, r3, #1
 800b7ec:	441a      	add	r2, r3
 800b7ee:	697b      	ldr	r3, [r7, #20]
 800b7f0:	685b      	ldr	r3, [r3, #4]
 800b7f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7f6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b7f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7fa:	2b0f      	cmp	r3, #15
 800b7fc:	d916      	bls.n	800b82c <UART_SetConfig+0x920>
 800b7fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b800:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b804:	d212      	bcs.n	800b82c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b808:	b29b      	uxth	r3, r3
 800b80a:	f023 030f 	bic.w	r3, r3, #15
 800b80e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b810:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b812:	085b      	lsrs	r3, r3, #1
 800b814:	b29b      	uxth	r3, r3
 800b816:	f003 0307 	and.w	r3, r3, #7
 800b81a:	b29a      	uxth	r2, r3
 800b81c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b81e:	4313      	orrs	r3, r2
 800b820:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800b822:	697b      	ldr	r3, [r7, #20]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800b828:	60da      	str	r2, [r3, #12]
 800b82a:	e0b9      	b.n	800b9a0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b82c:	2301      	movs	r3, #1
 800b82e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b832:	e0b5      	b.n	800b9a0 <UART_SetConfig+0xa94>
 800b834:	03d09000 	.word	0x03d09000
 800b838:	003d0900 	.word	0x003d0900
 800b83c:	0800eaf8 	.word	0x0800eaf8
 800b840:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800b844:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b848:	2b20      	cmp	r3, #32
 800b84a:	dc49      	bgt.n	800b8e0 <UART_SetConfig+0x9d4>
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	db7c      	blt.n	800b94a <UART_SetConfig+0xa3e>
 800b850:	2b20      	cmp	r3, #32
 800b852:	d87a      	bhi.n	800b94a <UART_SetConfig+0xa3e>
 800b854:	a201      	add	r2, pc, #4	@ (adr r2, 800b85c <UART_SetConfig+0x950>)
 800b856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b85a:	bf00      	nop
 800b85c:	0800b8e7 	.word	0x0800b8e7
 800b860:	0800b8ef 	.word	0x0800b8ef
 800b864:	0800b94b 	.word	0x0800b94b
 800b868:	0800b94b 	.word	0x0800b94b
 800b86c:	0800b8f7 	.word	0x0800b8f7
 800b870:	0800b94b 	.word	0x0800b94b
 800b874:	0800b94b 	.word	0x0800b94b
 800b878:	0800b94b 	.word	0x0800b94b
 800b87c:	0800b907 	.word	0x0800b907
 800b880:	0800b94b 	.word	0x0800b94b
 800b884:	0800b94b 	.word	0x0800b94b
 800b888:	0800b94b 	.word	0x0800b94b
 800b88c:	0800b94b 	.word	0x0800b94b
 800b890:	0800b94b 	.word	0x0800b94b
 800b894:	0800b94b 	.word	0x0800b94b
 800b898:	0800b94b 	.word	0x0800b94b
 800b89c:	0800b917 	.word	0x0800b917
 800b8a0:	0800b94b 	.word	0x0800b94b
 800b8a4:	0800b94b 	.word	0x0800b94b
 800b8a8:	0800b94b 	.word	0x0800b94b
 800b8ac:	0800b94b 	.word	0x0800b94b
 800b8b0:	0800b94b 	.word	0x0800b94b
 800b8b4:	0800b94b 	.word	0x0800b94b
 800b8b8:	0800b94b 	.word	0x0800b94b
 800b8bc:	0800b94b 	.word	0x0800b94b
 800b8c0:	0800b94b 	.word	0x0800b94b
 800b8c4:	0800b94b 	.word	0x0800b94b
 800b8c8:	0800b94b 	.word	0x0800b94b
 800b8cc:	0800b94b 	.word	0x0800b94b
 800b8d0:	0800b94b 	.word	0x0800b94b
 800b8d4:	0800b94b 	.word	0x0800b94b
 800b8d8:	0800b94b 	.word	0x0800b94b
 800b8dc:	0800b93d 	.word	0x0800b93d
 800b8e0:	2b40      	cmp	r3, #64	@ 0x40
 800b8e2:	d02e      	beq.n	800b942 <UART_SetConfig+0xa36>
 800b8e4:	e031      	b.n	800b94a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b8e6:	f7fb f8d3 	bl	8006a90 <HAL_RCC_GetPCLK1Freq>
 800b8ea:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b8ec:	e033      	b.n	800b956 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b8ee:	f7fb f8e5 	bl	8006abc <HAL_RCC_GetPCLK2Freq>
 800b8f2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b8f4:	e02f      	b.n	800b956 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b8f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	f7fd f894 	bl	8008a28 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b900:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b902:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b904:	e027      	b.n	800b956 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b906:	f107 0318 	add.w	r3, r7, #24
 800b90a:	4618      	mov	r0, r3
 800b90c:	f7fd f9e0 	bl	8008cd0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b910:	69fb      	ldr	r3, [r7, #28]
 800b912:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b914:	e01f      	b.n	800b956 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b916:	4b2d      	ldr	r3, [pc, #180]	@ (800b9cc <UART_SetConfig+0xac0>)
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	f003 0320 	and.w	r3, r3, #32
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d009      	beq.n	800b936 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b922:	4b2a      	ldr	r3, [pc, #168]	@ (800b9cc <UART_SetConfig+0xac0>)
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	08db      	lsrs	r3, r3, #3
 800b928:	f003 0303 	and.w	r3, r3, #3
 800b92c:	4a28      	ldr	r2, [pc, #160]	@ (800b9d0 <UART_SetConfig+0xac4>)
 800b92e:	fa22 f303 	lsr.w	r3, r2, r3
 800b932:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b934:	e00f      	b.n	800b956 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800b936:	4b26      	ldr	r3, [pc, #152]	@ (800b9d0 <UART_SetConfig+0xac4>)
 800b938:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b93a:	e00c      	b.n	800b956 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b93c:	4b25      	ldr	r3, [pc, #148]	@ (800b9d4 <UART_SetConfig+0xac8>)
 800b93e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b940:	e009      	b.n	800b956 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b942:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b946:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b948:	e005      	b.n	800b956 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800b94a:	2300      	movs	r3, #0
 800b94c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b94e:	2301      	movs	r3, #1
 800b950:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b954:	bf00      	nop
    }

    if (pclk != 0U)
 800b956:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d021      	beq.n	800b9a0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b95c:	697b      	ldr	r3, [r7, #20]
 800b95e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b960:	4a1d      	ldr	r2, [pc, #116]	@ (800b9d8 <UART_SetConfig+0xacc>)
 800b962:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b966:	461a      	mov	r2, r3
 800b968:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b96a:	fbb3 f2f2 	udiv	r2, r3, r2
 800b96e:	697b      	ldr	r3, [r7, #20]
 800b970:	685b      	ldr	r3, [r3, #4]
 800b972:	085b      	lsrs	r3, r3, #1
 800b974:	441a      	add	r2, r3
 800b976:	697b      	ldr	r3, [r7, #20]
 800b978:	685b      	ldr	r3, [r3, #4]
 800b97a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b97e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b980:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b982:	2b0f      	cmp	r3, #15
 800b984:	d909      	bls.n	800b99a <UART_SetConfig+0xa8e>
 800b986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b988:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b98c:	d205      	bcs.n	800b99a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b98e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b990:	b29a      	uxth	r2, r3
 800b992:	697b      	ldr	r3, [r7, #20]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	60da      	str	r2, [r3, #12]
 800b998:	e002      	b.n	800b9a0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b99a:	2301      	movs	r3, #1
 800b99c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b9a0:	697b      	ldr	r3, [r7, #20]
 800b9a2:	2201      	movs	r2, #1
 800b9a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b9a8:	697b      	ldr	r3, [r7, #20]
 800b9aa:	2201      	movs	r2, #1
 800b9ac:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b9b0:	697b      	ldr	r3, [r7, #20]
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b9b6:	697b      	ldr	r3, [r7, #20]
 800b9b8:	2200      	movs	r2, #0
 800b9ba:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b9bc:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	3748      	adds	r7, #72	@ 0x48
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b9ca:	bf00      	nop
 800b9cc:	58024400 	.word	0x58024400
 800b9d0:	03d09000 	.word	0x03d09000
 800b9d4:	003d0900 	.word	0x003d0900
 800b9d8:	0800eaf8 	.word	0x0800eaf8

0800b9dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b9dc:	b480      	push	{r7}
 800b9de:	b083      	sub	sp, #12
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9e8:	f003 0308 	and.w	r3, r3, #8
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d00a      	beq.n	800ba06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	685b      	ldr	r3, [r3, #4]
 800b9f6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	430a      	orrs	r2, r1
 800ba04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba0a:	f003 0301 	and.w	r3, r3, #1
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d00a      	beq.n	800ba28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	685b      	ldr	r3, [r3, #4]
 800ba18:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	430a      	orrs	r2, r1
 800ba26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba2c:	f003 0302 	and.w	r3, r3, #2
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d00a      	beq.n	800ba4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	685b      	ldr	r3, [r3, #4]
 800ba3a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	430a      	orrs	r2, r1
 800ba48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba4e:	f003 0304 	and.w	r3, r3, #4
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d00a      	beq.n	800ba6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	685b      	ldr	r3, [r3, #4]
 800ba5c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	430a      	orrs	r2, r1
 800ba6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba70:	f003 0310 	and.w	r3, r3, #16
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d00a      	beq.n	800ba8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	689b      	ldr	r3, [r3, #8]
 800ba7e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	430a      	orrs	r2, r1
 800ba8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba92:	f003 0320 	and.w	r3, r3, #32
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d00a      	beq.n	800bab0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	689b      	ldr	r3, [r3, #8]
 800baa0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	430a      	orrs	r2, r1
 800baae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bab4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d01a      	beq.n	800baf2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	685b      	ldr	r3, [r3, #4]
 800bac2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	430a      	orrs	r2, r1
 800bad0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bad6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bada:	d10a      	bne.n	800baf2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	685b      	ldr	r3, [r3, #4]
 800bae2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	430a      	orrs	r2, r1
 800baf0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800baf6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d00a      	beq.n	800bb14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	685b      	ldr	r3, [r3, #4]
 800bb04:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	430a      	orrs	r2, r1
 800bb12:	605a      	str	r2, [r3, #4]
  }
}
 800bb14:	bf00      	nop
 800bb16:	370c      	adds	r7, #12
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1e:	4770      	bx	lr

0800bb20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bb20:	b580      	push	{r7, lr}
 800bb22:	b098      	sub	sp, #96	@ 0x60
 800bb24:	af02      	add	r7, sp, #8
 800bb26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	2200      	movs	r2, #0
 800bb2c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bb30:	f7f6 f85c 	bl	8001bec <HAL_GetTick>
 800bb34:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	f003 0308 	and.w	r3, r3, #8
 800bb40:	2b08      	cmp	r3, #8
 800bb42:	d12f      	bne.n	800bba4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bb44:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800bb48:	9300      	str	r3, [sp, #0]
 800bb4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bb4c:	2200      	movs	r2, #0
 800bb4e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800bb52:	6878      	ldr	r0, [r7, #4]
 800bb54:	f000 f88e 	bl	800bc74 <UART_WaitOnFlagUntilTimeout>
 800bb58:	4603      	mov	r3, r0
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d022      	beq.n	800bba4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb66:	e853 3f00 	ldrex	r3, [r3]
 800bb6a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bb6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb6e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bb72:	653b      	str	r3, [r7, #80]	@ 0x50
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	461a      	mov	r2, r3
 800bb7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bb7c:	647b      	str	r3, [r7, #68]	@ 0x44
 800bb7e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb80:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bb82:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bb84:	e841 2300 	strex	r3, r2, [r1]
 800bb88:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bb8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d1e6      	bne.n	800bb5e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	2220      	movs	r2, #32
 800bb94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bba0:	2303      	movs	r3, #3
 800bba2:	e063      	b.n	800bc6c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	f003 0304 	and.w	r3, r3, #4
 800bbae:	2b04      	cmp	r3, #4
 800bbb0:	d149      	bne.n	800bc46 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bbb2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800bbb6:	9300      	str	r3, [sp, #0]
 800bbb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bbba:	2200      	movs	r2, #0
 800bbbc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800bbc0:	6878      	ldr	r0, [r7, #4]
 800bbc2:	f000 f857 	bl	800bc74 <UART_WaitOnFlagUntilTimeout>
 800bbc6:	4603      	mov	r3, r0
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d03c      	beq.n	800bc46 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbd4:	e853 3f00 	ldrex	r3, [r3]
 800bbd8:	623b      	str	r3, [r7, #32]
   return(result);
 800bbda:	6a3b      	ldr	r3, [r7, #32]
 800bbdc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bbe0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	461a      	mov	r2, r3
 800bbe8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bbea:	633b      	str	r3, [r7, #48]	@ 0x30
 800bbec:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bbf0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bbf2:	e841 2300 	strex	r3, r2, [r1]
 800bbf6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bbf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d1e6      	bne.n	800bbcc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	3308      	adds	r3, #8
 800bc04:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc06:	693b      	ldr	r3, [r7, #16]
 800bc08:	e853 3f00 	ldrex	r3, [r3]
 800bc0c:	60fb      	str	r3, [r7, #12]
   return(result);
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	f023 0301 	bic.w	r3, r3, #1
 800bc14:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	3308      	adds	r3, #8
 800bc1c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bc1e:	61fa      	str	r2, [r7, #28]
 800bc20:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc22:	69b9      	ldr	r1, [r7, #24]
 800bc24:	69fa      	ldr	r2, [r7, #28]
 800bc26:	e841 2300 	strex	r3, r2, [r1]
 800bc2a:	617b      	str	r3, [r7, #20]
   return(result);
 800bc2c:	697b      	ldr	r3, [r7, #20]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d1e5      	bne.n	800bbfe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	2220      	movs	r2, #32
 800bc36:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	2200      	movs	r2, #0
 800bc3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bc42:	2303      	movs	r3, #3
 800bc44:	e012      	b.n	800bc6c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	2220      	movs	r2, #32
 800bc4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	2220      	movs	r2, #32
 800bc52:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	2200      	movs	r2, #0
 800bc5a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	2200      	movs	r2, #0
 800bc60:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	2200      	movs	r2, #0
 800bc66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bc6a:	2300      	movs	r3, #0
}
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	3758      	adds	r7, #88	@ 0x58
 800bc70:	46bd      	mov	sp, r7
 800bc72:	bd80      	pop	{r7, pc}

0800bc74 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bc74:	b580      	push	{r7, lr}
 800bc76:	b084      	sub	sp, #16
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	60f8      	str	r0, [r7, #12]
 800bc7c:	60b9      	str	r1, [r7, #8]
 800bc7e:	603b      	str	r3, [r7, #0]
 800bc80:	4613      	mov	r3, r2
 800bc82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bc84:	e04f      	b.n	800bd26 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bc86:	69bb      	ldr	r3, [r7, #24]
 800bc88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc8c:	d04b      	beq.n	800bd26 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bc8e:	f7f5 ffad 	bl	8001bec <HAL_GetTick>
 800bc92:	4602      	mov	r2, r0
 800bc94:	683b      	ldr	r3, [r7, #0]
 800bc96:	1ad3      	subs	r3, r2, r3
 800bc98:	69ba      	ldr	r2, [r7, #24]
 800bc9a:	429a      	cmp	r2, r3
 800bc9c:	d302      	bcc.n	800bca4 <UART_WaitOnFlagUntilTimeout+0x30>
 800bc9e:	69bb      	ldr	r3, [r7, #24]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d101      	bne.n	800bca8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800bca4:	2303      	movs	r3, #3
 800bca6:	e04e      	b.n	800bd46 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	f003 0304 	and.w	r3, r3, #4
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d037      	beq.n	800bd26 <UART_WaitOnFlagUntilTimeout+0xb2>
 800bcb6:	68bb      	ldr	r3, [r7, #8]
 800bcb8:	2b80      	cmp	r3, #128	@ 0x80
 800bcba:	d034      	beq.n	800bd26 <UART_WaitOnFlagUntilTimeout+0xb2>
 800bcbc:	68bb      	ldr	r3, [r7, #8]
 800bcbe:	2b40      	cmp	r3, #64	@ 0x40
 800bcc0:	d031      	beq.n	800bd26 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	69db      	ldr	r3, [r3, #28]
 800bcc8:	f003 0308 	and.w	r3, r3, #8
 800bccc:	2b08      	cmp	r3, #8
 800bcce:	d110      	bne.n	800bcf2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	2208      	movs	r2, #8
 800bcd6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bcd8:	68f8      	ldr	r0, [r7, #12]
 800bcda:	f000 f839 	bl	800bd50 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	2208      	movs	r2, #8
 800bce2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	2200      	movs	r2, #0
 800bcea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800bcee:	2301      	movs	r3, #1
 800bcf0:	e029      	b.n	800bd46 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	69db      	ldr	r3, [r3, #28]
 800bcf8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bcfc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bd00:	d111      	bne.n	800bd26 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bd0a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bd0c:	68f8      	ldr	r0, [r7, #12]
 800bd0e:	f000 f81f 	bl	800bd50 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	2220      	movs	r2, #32
 800bd16:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	2200      	movs	r2, #0
 800bd1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800bd22:	2303      	movs	r3, #3
 800bd24:	e00f      	b.n	800bd46 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	69da      	ldr	r2, [r3, #28]
 800bd2c:	68bb      	ldr	r3, [r7, #8]
 800bd2e:	4013      	ands	r3, r2
 800bd30:	68ba      	ldr	r2, [r7, #8]
 800bd32:	429a      	cmp	r2, r3
 800bd34:	bf0c      	ite	eq
 800bd36:	2301      	moveq	r3, #1
 800bd38:	2300      	movne	r3, #0
 800bd3a:	b2db      	uxtb	r3, r3
 800bd3c:	461a      	mov	r2, r3
 800bd3e:	79fb      	ldrb	r3, [r7, #7]
 800bd40:	429a      	cmp	r2, r3
 800bd42:	d0a0      	beq.n	800bc86 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bd44:	2300      	movs	r3, #0
}
 800bd46:	4618      	mov	r0, r3
 800bd48:	3710      	adds	r7, #16
 800bd4a:	46bd      	mov	sp, r7
 800bd4c:	bd80      	pop	{r7, pc}
	...

0800bd50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bd50:	b480      	push	{r7}
 800bd52:	b095      	sub	sp, #84	@ 0x54
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd60:	e853 3f00 	ldrex	r3, [r3]
 800bd64:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800bd66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd68:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bd6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	461a      	mov	r2, r3
 800bd74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bd76:	643b      	str	r3, [r7, #64]	@ 0x40
 800bd78:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd7a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800bd7c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bd7e:	e841 2300 	strex	r3, r2, [r1]
 800bd82:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bd84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d1e6      	bne.n	800bd58 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	3308      	adds	r3, #8
 800bd90:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd92:	6a3b      	ldr	r3, [r7, #32]
 800bd94:	e853 3f00 	ldrex	r3, [r3]
 800bd98:	61fb      	str	r3, [r7, #28]
   return(result);
 800bd9a:	69fa      	ldr	r2, [r7, #28]
 800bd9c:	4b1e      	ldr	r3, [pc, #120]	@ (800be18 <UART_EndRxTransfer+0xc8>)
 800bd9e:	4013      	ands	r3, r2
 800bda0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	3308      	adds	r3, #8
 800bda8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bdaa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800bdac:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bdb0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bdb2:	e841 2300 	strex	r3, r2, [r1]
 800bdb6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bdb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d1e5      	bne.n	800bd8a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bdc2:	2b01      	cmp	r3, #1
 800bdc4:	d118      	bne.n	800bdf8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	e853 3f00 	ldrex	r3, [r3]
 800bdd2:	60bb      	str	r3, [r7, #8]
   return(result);
 800bdd4:	68bb      	ldr	r3, [r7, #8]
 800bdd6:	f023 0310 	bic.w	r3, r3, #16
 800bdda:	647b      	str	r3, [r7, #68]	@ 0x44
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	461a      	mov	r2, r3
 800bde2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bde4:	61bb      	str	r3, [r7, #24]
 800bde6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bde8:	6979      	ldr	r1, [r7, #20]
 800bdea:	69ba      	ldr	r2, [r7, #24]
 800bdec:	e841 2300 	strex	r3, r2, [r1]
 800bdf0:	613b      	str	r3, [r7, #16]
   return(result);
 800bdf2:	693b      	ldr	r3, [r7, #16]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d1e6      	bne.n	800bdc6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	2220      	movs	r2, #32
 800bdfc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	2200      	movs	r2, #0
 800be04:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	2200      	movs	r2, #0
 800be0a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800be0c:	bf00      	nop
 800be0e:	3754      	adds	r7, #84	@ 0x54
 800be10:	46bd      	mov	sp, r7
 800be12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be16:	4770      	bx	lr
 800be18:	effffffe 	.word	0xeffffffe

0800be1c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800be1c:	b580      	push	{r7, lr}
 800be1e:	b084      	sub	sp, #16
 800be20:	af00      	add	r7, sp, #0
 800be22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be28:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	2200      	movs	r2, #0
 800be2e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	2200      	movs	r2, #0
 800be36:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800be3a:	68f8      	ldr	r0, [r7, #12]
 800be3c:	f7ff f85c 	bl	800aef8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800be40:	bf00      	nop
 800be42:	3710      	adds	r7, #16
 800be44:	46bd      	mov	sp, r7
 800be46:	bd80      	pop	{r7, pc}

0800be48 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800be48:	b580      	push	{r7, lr}
 800be4a:	b088      	sub	sp, #32
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	e853 3f00 	ldrex	r3, [r3]
 800be5c:	60bb      	str	r3, [r7, #8]
   return(result);
 800be5e:	68bb      	ldr	r3, [r7, #8]
 800be60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800be64:	61fb      	str	r3, [r7, #28]
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	461a      	mov	r2, r3
 800be6c:	69fb      	ldr	r3, [r7, #28]
 800be6e:	61bb      	str	r3, [r7, #24]
 800be70:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be72:	6979      	ldr	r1, [r7, #20]
 800be74:	69ba      	ldr	r2, [r7, #24]
 800be76:	e841 2300 	strex	r3, r2, [r1]
 800be7a:	613b      	str	r3, [r7, #16]
   return(result);
 800be7c:	693b      	ldr	r3, [r7, #16]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d1e6      	bne.n	800be50 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	2220      	movs	r2, #32
 800be86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	2200      	movs	r2, #0
 800be8e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800be90:	6878      	ldr	r0, [r7, #4]
 800be92:	f7ff f827 	bl	800aee4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800be96:	bf00      	nop
 800be98:	3720      	adds	r7, #32
 800be9a:	46bd      	mov	sp, r7
 800be9c:	bd80      	pop	{r7, pc}

0800be9e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800be9e:	b480      	push	{r7}
 800bea0:	b083      	sub	sp, #12
 800bea2:	af00      	add	r7, sp, #0
 800bea4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800bea6:	bf00      	nop
 800bea8:	370c      	adds	r7, #12
 800beaa:	46bd      	mov	sp, r7
 800beac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb0:	4770      	bx	lr

0800beb2 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800beb2:	b480      	push	{r7}
 800beb4:	b083      	sub	sp, #12
 800beb6:	af00      	add	r7, sp, #0
 800beb8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800beba:	bf00      	nop
 800bebc:	370c      	adds	r7, #12
 800bebe:	46bd      	mov	sp, r7
 800bec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec4:	4770      	bx	lr

0800bec6 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800bec6:	b480      	push	{r7}
 800bec8:	b083      	sub	sp, #12
 800beca:	af00      	add	r7, sp, #0
 800becc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800bece:	bf00      	nop
 800bed0:	370c      	adds	r7, #12
 800bed2:	46bd      	mov	sp, r7
 800bed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed8:	4770      	bx	lr

0800beda <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800beda:	b480      	push	{r7}
 800bedc:	b085      	sub	sp, #20
 800bede:	af00      	add	r7, sp, #0
 800bee0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bee8:	2b01      	cmp	r3, #1
 800beea:	d101      	bne.n	800bef0 <HAL_UARTEx_DisableFifoMode+0x16>
 800beec:	2302      	movs	r3, #2
 800beee:	e027      	b.n	800bf40 <HAL_UARTEx_DisableFifoMode+0x66>
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	2201      	movs	r2, #1
 800bef4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	2224      	movs	r2, #36	@ 0x24
 800befc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	681a      	ldr	r2, [r3, #0]
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	f022 0201 	bic.w	r2, r2, #1
 800bf16:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800bf1e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	2200      	movs	r2, #0
 800bf24:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	68fa      	ldr	r2, [r7, #12]
 800bf2c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	2220      	movs	r2, #32
 800bf32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	2200      	movs	r2, #0
 800bf3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bf3e:	2300      	movs	r3, #0
}
 800bf40:	4618      	mov	r0, r3
 800bf42:	3714      	adds	r7, #20
 800bf44:	46bd      	mov	sp, r7
 800bf46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf4a:	4770      	bx	lr

0800bf4c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bf4c:	b580      	push	{r7, lr}
 800bf4e:	b084      	sub	sp, #16
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	6078      	str	r0, [r7, #4]
 800bf54:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bf5c:	2b01      	cmp	r3, #1
 800bf5e:	d101      	bne.n	800bf64 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bf60:	2302      	movs	r3, #2
 800bf62:	e02d      	b.n	800bfc0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	2201      	movs	r2, #1
 800bf68:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	2224      	movs	r2, #36	@ 0x24
 800bf70:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	681a      	ldr	r2, [r3, #0]
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	f022 0201 	bic.w	r2, r2, #1
 800bf8a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	689b      	ldr	r3, [r3, #8]
 800bf92:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	683a      	ldr	r2, [r7, #0]
 800bf9c:	430a      	orrs	r2, r1
 800bf9e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bfa0:	6878      	ldr	r0, [r7, #4]
 800bfa2:	f000 f84f 	bl	800c044 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	68fa      	ldr	r2, [r7, #12]
 800bfac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	2220      	movs	r2, #32
 800bfb2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	2200      	movs	r2, #0
 800bfba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bfbe:	2300      	movs	r3, #0
}
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	3710      	adds	r7, #16
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	bd80      	pop	{r7, pc}

0800bfc8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bfc8:	b580      	push	{r7, lr}
 800bfca:	b084      	sub	sp, #16
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	6078      	str	r0, [r7, #4]
 800bfd0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bfd8:	2b01      	cmp	r3, #1
 800bfda:	d101      	bne.n	800bfe0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bfdc:	2302      	movs	r3, #2
 800bfde:	e02d      	b.n	800c03c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	2201      	movs	r2, #1
 800bfe4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	2224      	movs	r2, #36	@ 0x24
 800bfec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	681a      	ldr	r2, [r3, #0]
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	f022 0201 	bic.w	r2, r2, #1
 800c006:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	689b      	ldr	r3, [r3, #8]
 800c00e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	683a      	ldr	r2, [r7, #0]
 800c018:	430a      	orrs	r2, r1
 800c01a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c01c:	6878      	ldr	r0, [r7, #4]
 800c01e:	f000 f811 	bl	800c044 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	68fa      	ldr	r2, [r7, #12]
 800c028:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	2220      	movs	r2, #32
 800c02e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	2200      	movs	r2, #0
 800c036:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c03a:	2300      	movs	r3, #0
}
 800c03c:	4618      	mov	r0, r3
 800c03e:	3710      	adds	r7, #16
 800c040:	46bd      	mov	sp, r7
 800c042:	bd80      	pop	{r7, pc}

0800c044 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c044:	b480      	push	{r7}
 800c046:	b085      	sub	sp, #20
 800c048:	af00      	add	r7, sp, #0
 800c04a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c050:	2b00      	cmp	r3, #0
 800c052:	d108      	bne.n	800c066 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	2201      	movs	r2, #1
 800c058:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	2201      	movs	r2, #1
 800c060:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c064:	e031      	b.n	800c0ca <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c066:	2310      	movs	r3, #16
 800c068:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c06a:	2310      	movs	r3, #16
 800c06c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	689b      	ldr	r3, [r3, #8]
 800c074:	0e5b      	lsrs	r3, r3, #25
 800c076:	b2db      	uxtb	r3, r3
 800c078:	f003 0307 	and.w	r3, r3, #7
 800c07c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	689b      	ldr	r3, [r3, #8]
 800c084:	0f5b      	lsrs	r3, r3, #29
 800c086:	b2db      	uxtb	r3, r3
 800c088:	f003 0307 	and.w	r3, r3, #7
 800c08c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c08e:	7bbb      	ldrb	r3, [r7, #14]
 800c090:	7b3a      	ldrb	r2, [r7, #12]
 800c092:	4911      	ldr	r1, [pc, #68]	@ (800c0d8 <UARTEx_SetNbDataToProcess+0x94>)
 800c094:	5c8a      	ldrb	r2, [r1, r2]
 800c096:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c09a:	7b3a      	ldrb	r2, [r7, #12]
 800c09c:	490f      	ldr	r1, [pc, #60]	@ (800c0dc <UARTEx_SetNbDataToProcess+0x98>)
 800c09e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c0a0:	fb93 f3f2 	sdiv	r3, r3, r2
 800c0a4:	b29a      	uxth	r2, r3
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c0ac:	7bfb      	ldrb	r3, [r7, #15]
 800c0ae:	7b7a      	ldrb	r2, [r7, #13]
 800c0b0:	4909      	ldr	r1, [pc, #36]	@ (800c0d8 <UARTEx_SetNbDataToProcess+0x94>)
 800c0b2:	5c8a      	ldrb	r2, [r1, r2]
 800c0b4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c0b8:	7b7a      	ldrb	r2, [r7, #13]
 800c0ba:	4908      	ldr	r1, [pc, #32]	@ (800c0dc <UARTEx_SetNbDataToProcess+0x98>)
 800c0bc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c0be:	fb93 f3f2 	sdiv	r3, r3, r2
 800c0c2:	b29a      	uxth	r2, r3
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800c0ca:	bf00      	nop
 800c0cc:	3714      	adds	r7, #20
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d4:	4770      	bx	lr
 800c0d6:	bf00      	nop
 800c0d8:	0800eb10 	.word	0x0800eb10
 800c0dc:	0800eb18 	.word	0x0800eb18

0800c0e0 <__cvt>:
 800c0e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c0e2:	ed2d 8b02 	vpush	{d8}
 800c0e6:	eeb0 8b40 	vmov.f64	d8, d0
 800c0ea:	b085      	sub	sp, #20
 800c0ec:	4617      	mov	r7, r2
 800c0ee:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800c0f0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c0f2:	ee18 2a90 	vmov	r2, s17
 800c0f6:	f025 0520 	bic.w	r5, r5, #32
 800c0fa:	2a00      	cmp	r2, #0
 800c0fc:	bfb6      	itet	lt
 800c0fe:	222d      	movlt	r2, #45	@ 0x2d
 800c100:	2200      	movge	r2, #0
 800c102:	eeb1 8b40 	vneglt.f64	d8, d0
 800c106:	2d46      	cmp	r5, #70	@ 0x46
 800c108:	460c      	mov	r4, r1
 800c10a:	701a      	strb	r2, [r3, #0]
 800c10c:	d004      	beq.n	800c118 <__cvt+0x38>
 800c10e:	2d45      	cmp	r5, #69	@ 0x45
 800c110:	d100      	bne.n	800c114 <__cvt+0x34>
 800c112:	3401      	adds	r4, #1
 800c114:	2102      	movs	r1, #2
 800c116:	e000      	b.n	800c11a <__cvt+0x3a>
 800c118:	2103      	movs	r1, #3
 800c11a:	ab03      	add	r3, sp, #12
 800c11c:	9301      	str	r3, [sp, #4]
 800c11e:	ab02      	add	r3, sp, #8
 800c120:	9300      	str	r3, [sp, #0]
 800c122:	4622      	mov	r2, r4
 800c124:	4633      	mov	r3, r6
 800c126:	eeb0 0b48 	vmov.f64	d0, d8
 800c12a:	f000 fe21 	bl	800cd70 <_dtoa_r>
 800c12e:	2d47      	cmp	r5, #71	@ 0x47
 800c130:	d114      	bne.n	800c15c <__cvt+0x7c>
 800c132:	07fb      	lsls	r3, r7, #31
 800c134:	d50a      	bpl.n	800c14c <__cvt+0x6c>
 800c136:	1902      	adds	r2, r0, r4
 800c138:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c13c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c140:	bf08      	it	eq
 800c142:	9203      	streq	r2, [sp, #12]
 800c144:	2130      	movs	r1, #48	@ 0x30
 800c146:	9b03      	ldr	r3, [sp, #12]
 800c148:	4293      	cmp	r3, r2
 800c14a:	d319      	bcc.n	800c180 <__cvt+0xa0>
 800c14c:	9b03      	ldr	r3, [sp, #12]
 800c14e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c150:	1a1b      	subs	r3, r3, r0
 800c152:	6013      	str	r3, [r2, #0]
 800c154:	b005      	add	sp, #20
 800c156:	ecbd 8b02 	vpop	{d8}
 800c15a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c15c:	2d46      	cmp	r5, #70	@ 0x46
 800c15e:	eb00 0204 	add.w	r2, r0, r4
 800c162:	d1e9      	bne.n	800c138 <__cvt+0x58>
 800c164:	7803      	ldrb	r3, [r0, #0]
 800c166:	2b30      	cmp	r3, #48	@ 0x30
 800c168:	d107      	bne.n	800c17a <__cvt+0x9a>
 800c16a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c16e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c172:	bf1c      	itt	ne
 800c174:	f1c4 0401 	rsbne	r4, r4, #1
 800c178:	6034      	strne	r4, [r6, #0]
 800c17a:	6833      	ldr	r3, [r6, #0]
 800c17c:	441a      	add	r2, r3
 800c17e:	e7db      	b.n	800c138 <__cvt+0x58>
 800c180:	1c5c      	adds	r4, r3, #1
 800c182:	9403      	str	r4, [sp, #12]
 800c184:	7019      	strb	r1, [r3, #0]
 800c186:	e7de      	b.n	800c146 <__cvt+0x66>

0800c188 <__exponent>:
 800c188:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c18a:	2900      	cmp	r1, #0
 800c18c:	bfba      	itte	lt
 800c18e:	4249      	neglt	r1, r1
 800c190:	232d      	movlt	r3, #45	@ 0x2d
 800c192:	232b      	movge	r3, #43	@ 0x2b
 800c194:	2909      	cmp	r1, #9
 800c196:	7002      	strb	r2, [r0, #0]
 800c198:	7043      	strb	r3, [r0, #1]
 800c19a:	dd29      	ble.n	800c1f0 <__exponent+0x68>
 800c19c:	f10d 0307 	add.w	r3, sp, #7
 800c1a0:	461d      	mov	r5, r3
 800c1a2:	270a      	movs	r7, #10
 800c1a4:	461a      	mov	r2, r3
 800c1a6:	fbb1 f6f7 	udiv	r6, r1, r7
 800c1aa:	fb07 1416 	mls	r4, r7, r6, r1
 800c1ae:	3430      	adds	r4, #48	@ 0x30
 800c1b0:	f802 4c01 	strb.w	r4, [r2, #-1]
 800c1b4:	460c      	mov	r4, r1
 800c1b6:	2c63      	cmp	r4, #99	@ 0x63
 800c1b8:	f103 33ff 	add.w	r3, r3, #4294967295
 800c1bc:	4631      	mov	r1, r6
 800c1be:	dcf1      	bgt.n	800c1a4 <__exponent+0x1c>
 800c1c0:	3130      	adds	r1, #48	@ 0x30
 800c1c2:	1e94      	subs	r4, r2, #2
 800c1c4:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c1c8:	1c41      	adds	r1, r0, #1
 800c1ca:	4623      	mov	r3, r4
 800c1cc:	42ab      	cmp	r3, r5
 800c1ce:	d30a      	bcc.n	800c1e6 <__exponent+0x5e>
 800c1d0:	f10d 0309 	add.w	r3, sp, #9
 800c1d4:	1a9b      	subs	r3, r3, r2
 800c1d6:	42ac      	cmp	r4, r5
 800c1d8:	bf88      	it	hi
 800c1da:	2300      	movhi	r3, #0
 800c1dc:	3302      	adds	r3, #2
 800c1de:	4403      	add	r3, r0
 800c1e0:	1a18      	subs	r0, r3, r0
 800c1e2:	b003      	add	sp, #12
 800c1e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c1e6:	f813 6b01 	ldrb.w	r6, [r3], #1
 800c1ea:	f801 6f01 	strb.w	r6, [r1, #1]!
 800c1ee:	e7ed      	b.n	800c1cc <__exponent+0x44>
 800c1f0:	2330      	movs	r3, #48	@ 0x30
 800c1f2:	3130      	adds	r1, #48	@ 0x30
 800c1f4:	7083      	strb	r3, [r0, #2]
 800c1f6:	70c1      	strb	r1, [r0, #3]
 800c1f8:	1d03      	adds	r3, r0, #4
 800c1fa:	e7f1      	b.n	800c1e0 <__exponent+0x58>
 800c1fc:	0000      	movs	r0, r0
	...

0800c200 <_printf_float>:
 800c200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c204:	b08d      	sub	sp, #52	@ 0x34
 800c206:	460c      	mov	r4, r1
 800c208:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800c20c:	4616      	mov	r6, r2
 800c20e:	461f      	mov	r7, r3
 800c210:	4605      	mov	r5, r0
 800c212:	f000 fcab 	bl	800cb6c <_localeconv_r>
 800c216:	f8d0 b000 	ldr.w	fp, [r0]
 800c21a:	4658      	mov	r0, fp
 800c21c:	f7f4 f8b0 	bl	8000380 <strlen>
 800c220:	2300      	movs	r3, #0
 800c222:	930a      	str	r3, [sp, #40]	@ 0x28
 800c224:	f8d8 3000 	ldr.w	r3, [r8]
 800c228:	f894 9018 	ldrb.w	r9, [r4, #24]
 800c22c:	6822      	ldr	r2, [r4, #0]
 800c22e:	9005      	str	r0, [sp, #20]
 800c230:	3307      	adds	r3, #7
 800c232:	f023 0307 	bic.w	r3, r3, #7
 800c236:	f103 0108 	add.w	r1, r3, #8
 800c23a:	f8c8 1000 	str.w	r1, [r8]
 800c23e:	ed93 0b00 	vldr	d0, [r3]
 800c242:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800c4a0 <_printf_float+0x2a0>
 800c246:	eeb0 7bc0 	vabs.f64	d7, d0
 800c24a:	eeb4 7b46 	vcmp.f64	d7, d6
 800c24e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c252:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800c256:	dd24      	ble.n	800c2a2 <_printf_float+0xa2>
 800c258:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800c25c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c260:	d502      	bpl.n	800c268 <_printf_float+0x68>
 800c262:	232d      	movs	r3, #45	@ 0x2d
 800c264:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c268:	498f      	ldr	r1, [pc, #572]	@ (800c4a8 <_printf_float+0x2a8>)
 800c26a:	4b90      	ldr	r3, [pc, #576]	@ (800c4ac <_printf_float+0x2ac>)
 800c26c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800c270:	bf94      	ite	ls
 800c272:	4688      	movls	r8, r1
 800c274:	4698      	movhi	r8, r3
 800c276:	f022 0204 	bic.w	r2, r2, #4
 800c27a:	2303      	movs	r3, #3
 800c27c:	6123      	str	r3, [r4, #16]
 800c27e:	6022      	str	r2, [r4, #0]
 800c280:	f04f 0a00 	mov.w	sl, #0
 800c284:	9700      	str	r7, [sp, #0]
 800c286:	4633      	mov	r3, r6
 800c288:	aa0b      	add	r2, sp, #44	@ 0x2c
 800c28a:	4621      	mov	r1, r4
 800c28c:	4628      	mov	r0, r5
 800c28e:	f000 f9d1 	bl	800c634 <_printf_common>
 800c292:	3001      	adds	r0, #1
 800c294:	f040 8089 	bne.w	800c3aa <_printf_float+0x1aa>
 800c298:	f04f 30ff 	mov.w	r0, #4294967295
 800c29c:	b00d      	add	sp, #52	@ 0x34
 800c29e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2a2:	eeb4 0b40 	vcmp.f64	d0, d0
 800c2a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2aa:	d709      	bvc.n	800c2c0 <_printf_float+0xc0>
 800c2ac:	ee10 3a90 	vmov	r3, s1
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	bfbc      	itt	lt
 800c2b4:	232d      	movlt	r3, #45	@ 0x2d
 800c2b6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800c2ba:	497d      	ldr	r1, [pc, #500]	@ (800c4b0 <_printf_float+0x2b0>)
 800c2bc:	4b7d      	ldr	r3, [pc, #500]	@ (800c4b4 <_printf_float+0x2b4>)
 800c2be:	e7d5      	b.n	800c26c <_printf_float+0x6c>
 800c2c0:	6863      	ldr	r3, [r4, #4]
 800c2c2:	1c59      	adds	r1, r3, #1
 800c2c4:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800c2c8:	d139      	bne.n	800c33e <_printf_float+0x13e>
 800c2ca:	2306      	movs	r3, #6
 800c2cc:	6063      	str	r3, [r4, #4]
 800c2ce:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	6022      	str	r2, [r4, #0]
 800c2d6:	9303      	str	r3, [sp, #12]
 800c2d8:	ab0a      	add	r3, sp, #40	@ 0x28
 800c2da:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800c2de:	ab09      	add	r3, sp, #36	@ 0x24
 800c2e0:	9300      	str	r3, [sp, #0]
 800c2e2:	6861      	ldr	r1, [r4, #4]
 800c2e4:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800c2e8:	4628      	mov	r0, r5
 800c2ea:	f7ff fef9 	bl	800c0e0 <__cvt>
 800c2ee:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c2f2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c2f4:	4680      	mov	r8, r0
 800c2f6:	d129      	bne.n	800c34c <_printf_float+0x14c>
 800c2f8:	1cc8      	adds	r0, r1, #3
 800c2fa:	db02      	blt.n	800c302 <_printf_float+0x102>
 800c2fc:	6863      	ldr	r3, [r4, #4]
 800c2fe:	4299      	cmp	r1, r3
 800c300:	dd41      	ble.n	800c386 <_printf_float+0x186>
 800c302:	f1a9 0902 	sub.w	r9, r9, #2
 800c306:	fa5f f989 	uxtb.w	r9, r9
 800c30a:	3901      	subs	r1, #1
 800c30c:	464a      	mov	r2, r9
 800c30e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800c312:	9109      	str	r1, [sp, #36]	@ 0x24
 800c314:	f7ff ff38 	bl	800c188 <__exponent>
 800c318:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c31a:	1813      	adds	r3, r2, r0
 800c31c:	2a01      	cmp	r2, #1
 800c31e:	4682      	mov	sl, r0
 800c320:	6123      	str	r3, [r4, #16]
 800c322:	dc02      	bgt.n	800c32a <_printf_float+0x12a>
 800c324:	6822      	ldr	r2, [r4, #0]
 800c326:	07d2      	lsls	r2, r2, #31
 800c328:	d501      	bpl.n	800c32e <_printf_float+0x12e>
 800c32a:	3301      	adds	r3, #1
 800c32c:	6123      	str	r3, [r4, #16]
 800c32e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800c332:	2b00      	cmp	r3, #0
 800c334:	d0a6      	beq.n	800c284 <_printf_float+0x84>
 800c336:	232d      	movs	r3, #45	@ 0x2d
 800c338:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c33c:	e7a2      	b.n	800c284 <_printf_float+0x84>
 800c33e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c342:	d1c4      	bne.n	800c2ce <_printf_float+0xce>
 800c344:	2b00      	cmp	r3, #0
 800c346:	d1c2      	bne.n	800c2ce <_printf_float+0xce>
 800c348:	2301      	movs	r3, #1
 800c34a:	e7bf      	b.n	800c2cc <_printf_float+0xcc>
 800c34c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800c350:	d9db      	bls.n	800c30a <_printf_float+0x10a>
 800c352:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800c356:	d118      	bne.n	800c38a <_printf_float+0x18a>
 800c358:	2900      	cmp	r1, #0
 800c35a:	6863      	ldr	r3, [r4, #4]
 800c35c:	dd0b      	ble.n	800c376 <_printf_float+0x176>
 800c35e:	6121      	str	r1, [r4, #16]
 800c360:	b913      	cbnz	r3, 800c368 <_printf_float+0x168>
 800c362:	6822      	ldr	r2, [r4, #0]
 800c364:	07d0      	lsls	r0, r2, #31
 800c366:	d502      	bpl.n	800c36e <_printf_float+0x16e>
 800c368:	3301      	adds	r3, #1
 800c36a:	440b      	add	r3, r1
 800c36c:	6123      	str	r3, [r4, #16]
 800c36e:	65a1      	str	r1, [r4, #88]	@ 0x58
 800c370:	f04f 0a00 	mov.w	sl, #0
 800c374:	e7db      	b.n	800c32e <_printf_float+0x12e>
 800c376:	b913      	cbnz	r3, 800c37e <_printf_float+0x17e>
 800c378:	6822      	ldr	r2, [r4, #0]
 800c37a:	07d2      	lsls	r2, r2, #31
 800c37c:	d501      	bpl.n	800c382 <_printf_float+0x182>
 800c37e:	3302      	adds	r3, #2
 800c380:	e7f4      	b.n	800c36c <_printf_float+0x16c>
 800c382:	2301      	movs	r3, #1
 800c384:	e7f2      	b.n	800c36c <_printf_float+0x16c>
 800c386:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800c38a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c38c:	4299      	cmp	r1, r3
 800c38e:	db05      	blt.n	800c39c <_printf_float+0x19c>
 800c390:	6823      	ldr	r3, [r4, #0]
 800c392:	6121      	str	r1, [r4, #16]
 800c394:	07d8      	lsls	r0, r3, #31
 800c396:	d5ea      	bpl.n	800c36e <_printf_float+0x16e>
 800c398:	1c4b      	adds	r3, r1, #1
 800c39a:	e7e7      	b.n	800c36c <_printf_float+0x16c>
 800c39c:	2900      	cmp	r1, #0
 800c39e:	bfd4      	ite	le
 800c3a0:	f1c1 0202 	rsble	r2, r1, #2
 800c3a4:	2201      	movgt	r2, #1
 800c3a6:	4413      	add	r3, r2
 800c3a8:	e7e0      	b.n	800c36c <_printf_float+0x16c>
 800c3aa:	6823      	ldr	r3, [r4, #0]
 800c3ac:	055a      	lsls	r2, r3, #21
 800c3ae:	d407      	bmi.n	800c3c0 <_printf_float+0x1c0>
 800c3b0:	6923      	ldr	r3, [r4, #16]
 800c3b2:	4642      	mov	r2, r8
 800c3b4:	4631      	mov	r1, r6
 800c3b6:	4628      	mov	r0, r5
 800c3b8:	47b8      	blx	r7
 800c3ba:	3001      	adds	r0, #1
 800c3bc:	d12a      	bne.n	800c414 <_printf_float+0x214>
 800c3be:	e76b      	b.n	800c298 <_printf_float+0x98>
 800c3c0:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800c3c4:	f240 80e0 	bls.w	800c588 <_printf_float+0x388>
 800c3c8:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800c3cc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c3d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3d4:	d133      	bne.n	800c43e <_printf_float+0x23e>
 800c3d6:	4a38      	ldr	r2, [pc, #224]	@ (800c4b8 <_printf_float+0x2b8>)
 800c3d8:	2301      	movs	r3, #1
 800c3da:	4631      	mov	r1, r6
 800c3dc:	4628      	mov	r0, r5
 800c3de:	47b8      	blx	r7
 800c3e0:	3001      	adds	r0, #1
 800c3e2:	f43f af59 	beq.w	800c298 <_printf_float+0x98>
 800c3e6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800c3ea:	4543      	cmp	r3, r8
 800c3ec:	db02      	blt.n	800c3f4 <_printf_float+0x1f4>
 800c3ee:	6823      	ldr	r3, [r4, #0]
 800c3f0:	07d8      	lsls	r0, r3, #31
 800c3f2:	d50f      	bpl.n	800c414 <_printf_float+0x214>
 800c3f4:	9b05      	ldr	r3, [sp, #20]
 800c3f6:	465a      	mov	r2, fp
 800c3f8:	4631      	mov	r1, r6
 800c3fa:	4628      	mov	r0, r5
 800c3fc:	47b8      	blx	r7
 800c3fe:	3001      	adds	r0, #1
 800c400:	f43f af4a 	beq.w	800c298 <_printf_float+0x98>
 800c404:	f04f 0900 	mov.w	r9, #0
 800c408:	f108 38ff 	add.w	r8, r8, #4294967295
 800c40c:	f104 0a1a 	add.w	sl, r4, #26
 800c410:	45c8      	cmp	r8, r9
 800c412:	dc09      	bgt.n	800c428 <_printf_float+0x228>
 800c414:	6823      	ldr	r3, [r4, #0]
 800c416:	079b      	lsls	r3, r3, #30
 800c418:	f100 8107 	bmi.w	800c62a <_printf_float+0x42a>
 800c41c:	68e0      	ldr	r0, [r4, #12]
 800c41e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c420:	4298      	cmp	r0, r3
 800c422:	bfb8      	it	lt
 800c424:	4618      	movlt	r0, r3
 800c426:	e739      	b.n	800c29c <_printf_float+0x9c>
 800c428:	2301      	movs	r3, #1
 800c42a:	4652      	mov	r2, sl
 800c42c:	4631      	mov	r1, r6
 800c42e:	4628      	mov	r0, r5
 800c430:	47b8      	blx	r7
 800c432:	3001      	adds	r0, #1
 800c434:	f43f af30 	beq.w	800c298 <_printf_float+0x98>
 800c438:	f109 0901 	add.w	r9, r9, #1
 800c43c:	e7e8      	b.n	800c410 <_printf_float+0x210>
 800c43e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c440:	2b00      	cmp	r3, #0
 800c442:	dc3b      	bgt.n	800c4bc <_printf_float+0x2bc>
 800c444:	4a1c      	ldr	r2, [pc, #112]	@ (800c4b8 <_printf_float+0x2b8>)
 800c446:	2301      	movs	r3, #1
 800c448:	4631      	mov	r1, r6
 800c44a:	4628      	mov	r0, r5
 800c44c:	47b8      	blx	r7
 800c44e:	3001      	adds	r0, #1
 800c450:	f43f af22 	beq.w	800c298 <_printf_float+0x98>
 800c454:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c458:	ea59 0303 	orrs.w	r3, r9, r3
 800c45c:	d102      	bne.n	800c464 <_printf_float+0x264>
 800c45e:	6823      	ldr	r3, [r4, #0]
 800c460:	07d9      	lsls	r1, r3, #31
 800c462:	d5d7      	bpl.n	800c414 <_printf_float+0x214>
 800c464:	9b05      	ldr	r3, [sp, #20]
 800c466:	465a      	mov	r2, fp
 800c468:	4631      	mov	r1, r6
 800c46a:	4628      	mov	r0, r5
 800c46c:	47b8      	blx	r7
 800c46e:	3001      	adds	r0, #1
 800c470:	f43f af12 	beq.w	800c298 <_printf_float+0x98>
 800c474:	f04f 0a00 	mov.w	sl, #0
 800c478:	f104 0b1a 	add.w	fp, r4, #26
 800c47c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c47e:	425b      	negs	r3, r3
 800c480:	4553      	cmp	r3, sl
 800c482:	dc01      	bgt.n	800c488 <_printf_float+0x288>
 800c484:	464b      	mov	r3, r9
 800c486:	e794      	b.n	800c3b2 <_printf_float+0x1b2>
 800c488:	2301      	movs	r3, #1
 800c48a:	465a      	mov	r2, fp
 800c48c:	4631      	mov	r1, r6
 800c48e:	4628      	mov	r0, r5
 800c490:	47b8      	blx	r7
 800c492:	3001      	adds	r0, #1
 800c494:	f43f af00 	beq.w	800c298 <_printf_float+0x98>
 800c498:	f10a 0a01 	add.w	sl, sl, #1
 800c49c:	e7ee      	b.n	800c47c <_printf_float+0x27c>
 800c49e:	bf00      	nop
 800c4a0:	ffffffff 	.word	0xffffffff
 800c4a4:	7fefffff 	.word	0x7fefffff
 800c4a8:	0800eb20 	.word	0x0800eb20
 800c4ac:	0800eb24 	.word	0x0800eb24
 800c4b0:	0800eb28 	.word	0x0800eb28
 800c4b4:	0800eb2c 	.word	0x0800eb2c
 800c4b8:	0800eb30 	.word	0x0800eb30
 800c4bc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c4be:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c4c2:	4553      	cmp	r3, sl
 800c4c4:	bfa8      	it	ge
 800c4c6:	4653      	movge	r3, sl
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	4699      	mov	r9, r3
 800c4cc:	dc37      	bgt.n	800c53e <_printf_float+0x33e>
 800c4ce:	2300      	movs	r3, #0
 800c4d0:	9307      	str	r3, [sp, #28]
 800c4d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c4d6:	f104 021a 	add.w	r2, r4, #26
 800c4da:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c4dc:	9907      	ldr	r1, [sp, #28]
 800c4de:	9306      	str	r3, [sp, #24]
 800c4e0:	eba3 0309 	sub.w	r3, r3, r9
 800c4e4:	428b      	cmp	r3, r1
 800c4e6:	dc31      	bgt.n	800c54c <_printf_float+0x34c>
 800c4e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c4ea:	459a      	cmp	sl, r3
 800c4ec:	dc3b      	bgt.n	800c566 <_printf_float+0x366>
 800c4ee:	6823      	ldr	r3, [r4, #0]
 800c4f0:	07da      	lsls	r2, r3, #31
 800c4f2:	d438      	bmi.n	800c566 <_printf_float+0x366>
 800c4f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c4f6:	ebaa 0903 	sub.w	r9, sl, r3
 800c4fa:	9b06      	ldr	r3, [sp, #24]
 800c4fc:	ebaa 0303 	sub.w	r3, sl, r3
 800c500:	4599      	cmp	r9, r3
 800c502:	bfa8      	it	ge
 800c504:	4699      	movge	r9, r3
 800c506:	f1b9 0f00 	cmp.w	r9, #0
 800c50a:	dc34      	bgt.n	800c576 <_printf_float+0x376>
 800c50c:	f04f 0800 	mov.w	r8, #0
 800c510:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c514:	f104 0b1a 	add.w	fp, r4, #26
 800c518:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c51a:	ebaa 0303 	sub.w	r3, sl, r3
 800c51e:	eba3 0309 	sub.w	r3, r3, r9
 800c522:	4543      	cmp	r3, r8
 800c524:	f77f af76 	ble.w	800c414 <_printf_float+0x214>
 800c528:	2301      	movs	r3, #1
 800c52a:	465a      	mov	r2, fp
 800c52c:	4631      	mov	r1, r6
 800c52e:	4628      	mov	r0, r5
 800c530:	47b8      	blx	r7
 800c532:	3001      	adds	r0, #1
 800c534:	f43f aeb0 	beq.w	800c298 <_printf_float+0x98>
 800c538:	f108 0801 	add.w	r8, r8, #1
 800c53c:	e7ec      	b.n	800c518 <_printf_float+0x318>
 800c53e:	4642      	mov	r2, r8
 800c540:	4631      	mov	r1, r6
 800c542:	4628      	mov	r0, r5
 800c544:	47b8      	blx	r7
 800c546:	3001      	adds	r0, #1
 800c548:	d1c1      	bne.n	800c4ce <_printf_float+0x2ce>
 800c54a:	e6a5      	b.n	800c298 <_printf_float+0x98>
 800c54c:	2301      	movs	r3, #1
 800c54e:	4631      	mov	r1, r6
 800c550:	4628      	mov	r0, r5
 800c552:	9206      	str	r2, [sp, #24]
 800c554:	47b8      	blx	r7
 800c556:	3001      	adds	r0, #1
 800c558:	f43f ae9e 	beq.w	800c298 <_printf_float+0x98>
 800c55c:	9b07      	ldr	r3, [sp, #28]
 800c55e:	9a06      	ldr	r2, [sp, #24]
 800c560:	3301      	adds	r3, #1
 800c562:	9307      	str	r3, [sp, #28]
 800c564:	e7b9      	b.n	800c4da <_printf_float+0x2da>
 800c566:	9b05      	ldr	r3, [sp, #20]
 800c568:	465a      	mov	r2, fp
 800c56a:	4631      	mov	r1, r6
 800c56c:	4628      	mov	r0, r5
 800c56e:	47b8      	blx	r7
 800c570:	3001      	adds	r0, #1
 800c572:	d1bf      	bne.n	800c4f4 <_printf_float+0x2f4>
 800c574:	e690      	b.n	800c298 <_printf_float+0x98>
 800c576:	9a06      	ldr	r2, [sp, #24]
 800c578:	464b      	mov	r3, r9
 800c57a:	4442      	add	r2, r8
 800c57c:	4631      	mov	r1, r6
 800c57e:	4628      	mov	r0, r5
 800c580:	47b8      	blx	r7
 800c582:	3001      	adds	r0, #1
 800c584:	d1c2      	bne.n	800c50c <_printf_float+0x30c>
 800c586:	e687      	b.n	800c298 <_printf_float+0x98>
 800c588:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800c58c:	f1b9 0f01 	cmp.w	r9, #1
 800c590:	dc01      	bgt.n	800c596 <_printf_float+0x396>
 800c592:	07db      	lsls	r3, r3, #31
 800c594:	d536      	bpl.n	800c604 <_printf_float+0x404>
 800c596:	2301      	movs	r3, #1
 800c598:	4642      	mov	r2, r8
 800c59a:	4631      	mov	r1, r6
 800c59c:	4628      	mov	r0, r5
 800c59e:	47b8      	blx	r7
 800c5a0:	3001      	adds	r0, #1
 800c5a2:	f43f ae79 	beq.w	800c298 <_printf_float+0x98>
 800c5a6:	9b05      	ldr	r3, [sp, #20]
 800c5a8:	465a      	mov	r2, fp
 800c5aa:	4631      	mov	r1, r6
 800c5ac:	4628      	mov	r0, r5
 800c5ae:	47b8      	blx	r7
 800c5b0:	3001      	adds	r0, #1
 800c5b2:	f43f ae71 	beq.w	800c298 <_printf_float+0x98>
 800c5b6:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800c5ba:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c5be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5c2:	f109 39ff 	add.w	r9, r9, #4294967295
 800c5c6:	d018      	beq.n	800c5fa <_printf_float+0x3fa>
 800c5c8:	464b      	mov	r3, r9
 800c5ca:	f108 0201 	add.w	r2, r8, #1
 800c5ce:	4631      	mov	r1, r6
 800c5d0:	4628      	mov	r0, r5
 800c5d2:	47b8      	blx	r7
 800c5d4:	3001      	adds	r0, #1
 800c5d6:	d10c      	bne.n	800c5f2 <_printf_float+0x3f2>
 800c5d8:	e65e      	b.n	800c298 <_printf_float+0x98>
 800c5da:	2301      	movs	r3, #1
 800c5dc:	465a      	mov	r2, fp
 800c5de:	4631      	mov	r1, r6
 800c5e0:	4628      	mov	r0, r5
 800c5e2:	47b8      	blx	r7
 800c5e4:	3001      	adds	r0, #1
 800c5e6:	f43f ae57 	beq.w	800c298 <_printf_float+0x98>
 800c5ea:	f108 0801 	add.w	r8, r8, #1
 800c5ee:	45c8      	cmp	r8, r9
 800c5f0:	dbf3      	blt.n	800c5da <_printf_float+0x3da>
 800c5f2:	4653      	mov	r3, sl
 800c5f4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c5f8:	e6dc      	b.n	800c3b4 <_printf_float+0x1b4>
 800c5fa:	f04f 0800 	mov.w	r8, #0
 800c5fe:	f104 0b1a 	add.w	fp, r4, #26
 800c602:	e7f4      	b.n	800c5ee <_printf_float+0x3ee>
 800c604:	2301      	movs	r3, #1
 800c606:	4642      	mov	r2, r8
 800c608:	e7e1      	b.n	800c5ce <_printf_float+0x3ce>
 800c60a:	2301      	movs	r3, #1
 800c60c:	464a      	mov	r2, r9
 800c60e:	4631      	mov	r1, r6
 800c610:	4628      	mov	r0, r5
 800c612:	47b8      	blx	r7
 800c614:	3001      	adds	r0, #1
 800c616:	f43f ae3f 	beq.w	800c298 <_printf_float+0x98>
 800c61a:	f108 0801 	add.w	r8, r8, #1
 800c61e:	68e3      	ldr	r3, [r4, #12]
 800c620:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c622:	1a5b      	subs	r3, r3, r1
 800c624:	4543      	cmp	r3, r8
 800c626:	dcf0      	bgt.n	800c60a <_printf_float+0x40a>
 800c628:	e6f8      	b.n	800c41c <_printf_float+0x21c>
 800c62a:	f04f 0800 	mov.w	r8, #0
 800c62e:	f104 0919 	add.w	r9, r4, #25
 800c632:	e7f4      	b.n	800c61e <_printf_float+0x41e>

0800c634 <_printf_common>:
 800c634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c638:	4616      	mov	r6, r2
 800c63a:	4698      	mov	r8, r3
 800c63c:	688a      	ldr	r2, [r1, #8]
 800c63e:	690b      	ldr	r3, [r1, #16]
 800c640:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c644:	4293      	cmp	r3, r2
 800c646:	bfb8      	it	lt
 800c648:	4613      	movlt	r3, r2
 800c64a:	6033      	str	r3, [r6, #0]
 800c64c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c650:	4607      	mov	r7, r0
 800c652:	460c      	mov	r4, r1
 800c654:	b10a      	cbz	r2, 800c65a <_printf_common+0x26>
 800c656:	3301      	adds	r3, #1
 800c658:	6033      	str	r3, [r6, #0]
 800c65a:	6823      	ldr	r3, [r4, #0]
 800c65c:	0699      	lsls	r1, r3, #26
 800c65e:	bf42      	ittt	mi
 800c660:	6833      	ldrmi	r3, [r6, #0]
 800c662:	3302      	addmi	r3, #2
 800c664:	6033      	strmi	r3, [r6, #0]
 800c666:	6825      	ldr	r5, [r4, #0]
 800c668:	f015 0506 	ands.w	r5, r5, #6
 800c66c:	d106      	bne.n	800c67c <_printf_common+0x48>
 800c66e:	f104 0a19 	add.w	sl, r4, #25
 800c672:	68e3      	ldr	r3, [r4, #12]
 800c674:	6832      	ldr	r2, [r6, #0]
 800c676:	1a9b      	subs	r3, r3, r2
 800c678:	42ab      	cmp	r3, r5
 800c67a:	dc26      	bgt.n	800c6ca <_printf_common+0x96>
 800c67c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c680:	6822      	ldr	r2, [r4, #0]
 800c682:	3b00      	subs	r3, #0
 800c684:	bf18      	it	ne
 800c686:	2301      	movne	r3, #1
 800c688:	0692      	lsls	r2, r2, #26
 800c68a:	d42b      	bmi.n	800c6e4 <_printf_common+0xb0>
 800c68c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c690:	4641      	mov	r1, r8
 800c692:	4638      	mov	r0, r7
 800c694:	47c8      	blx	r9
 800c696:	3001      	adds	r0, #1
 800c698:	d01e      	beq.n	800c6d8 <_printf_common+0xa4>
 800c69a:	6823      	ldr	r3, [r4, #0]
 800c69c:	6922      	ldr	r2, [r4, #16]
 800c69e:	f003 0306 	and.w	r3, r3, #6
 800c6a2:	2b04      	cmp	r3, #4
 800c6a4:	bf02      	ittt	eq
 800c6a6:	68e5      	ldreq	r5, [r4, #12]
 800c6a8:	6833      	ldreq	r3, [r6, #0]
 800c6aa:	1aed      	subeq	r5, r5, r3
 800c6ac:	68a3      	ldr	r3, [r4, #8]
 800c6ae:	bf0c      	ite	eq
 800c6b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c6b4:	2500      	movne	r5, #0
 800c6b6:	4293      	cmp	r3, r2
 800c6b8:	bfc4      	itt	gt
 800c6ba:	1a9b      	subgt	r3, r3, r2
 800c6bc:	18ed      	addgt	r5, r5, r3
 800c6be:	2600      	movs	r6, #0
 800c6c0:	341a      	adds	r4, #26
 800c6c2:	42b5      	cmp	r5, r6
 800c6c4:	d11a      	bne.n	800c6fc <_printf_common+0xc8>
 800c6c6:	2000      	movs	r0, #0
 800c6c8:	e008      	b.n	800c6dc <_printf_common+0xa8>
 800c6ca:	2301      	movs	r3, #1
 800c6cc:	4652      	mov	r2, sl
 800c6ce:	4641      	mov	r1, r8
 800c6d0:	4638      	mov	r0, r7
 800c6d2:	47c8      	blx	r9
 800c6d4:	3001      	adds	r0, #1
 800c6d6:	d103      	bne.n	800c6e0 <_printf_common+0xac>
 800c6d8:	f04f 30ff 	mov.w	r0, #4294967295
 800c6dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6e0:	3501      	adds	r5, #1
 800c6e2:	e7c6      	b.n	800c672 <_printf_common+0x3e>
 800c6e4:	18e1      	adds	r1, r4, r3
 800c6e6:	1c5a      	adds	r2, r3, #1
 800c6e8:	2030      	movs	r0, #48	@ 0x30
 800c6ea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c6ee:	4422      	add	r2, r4
 800c6f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c6f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c6f8:	3302      	adds	r3, #2
 800c6fa:	e7c7      	b.n	800c68c <_printf_common+0x58>
 800c6fc:	2301      	movs	r3, #1
 800c6fe:	4622      	mov	r2, r4
 800c700:	4641      	mov	r1, r8
 800c702:	4638      	mov	r0, r7
 800c704:	47c8      	blx	r9
 800c706:	3001      	adds	r0, #1
 800c708:	d0e6      	beq.n	800c6d8 <_printf_common+0xa4>
 800c70a:	3601      	adds	r6, #1
 800c70c:	e7d9      	b.n	800c6c2 <_printf_common+0x8e>
	...

0800c710 <_printf_i>:
 800c710:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c714:	7e0f      	ldrb	r7, [r1, #24]
 800c716:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c718:	2f78      	cmp	r7, #120	@ 0x78
 800c71a:	4691      	mov	r9, r2
 800c71c:	4680      	mov	r8, r0
 800c71e:	460c      	mov	r4, r1
 800c720:	469a      	mov	sl, r3
 800c722:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c726:	d807      	bhi.n	800c738 <_printf_i+0x28>
 800c728:	2f62      	cmp	r7, #98	@ 0x62
 800c72a:	d80a      	bhi.n	800c742 <_printf_i+0x32>
 800c72c:	2f00      	cmp	r7, #0
 800c72e:	f000 80d2 	beq.w	800c8d6 <_printf_i+0x1c6>
 800c732:	2f58      	cmp	r7, #88	@ 0x58
 800c734:	f000 80b9 	beq.w	800c8aa <_printf_i+0x19a>
 800c738:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c73c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c740:	e03a      	b.n	800c7b8 <_printf_i+0xa8>
 800c742:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c746:	2b15      	cmp	r3, #21
 800c748:	d8f6      	bhi.n	800c738 <_printf_i+0x28>
 800c74a:	a101      	add	r1, pc, #4	@ (adr r1, 800c750 <_printf_i+0x40>)
 800c74c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c750:	0800c7a9 	.word	0x0800c7a9
 800c754:	0800c7bd 	.word	0x0800c7bd
 800c758:	0800c739 	.word	0x0800c739
 800c75c:	0800c739 	.word	0x0800c739
 800c760:	0800c739 	.word	0x0800c739
 800c764:	0800c739 	.word	0x0800c739
 800c768:	0800c7bd 	.word	0x0800c7bd
 800c76c:	0800c739 	.word	0x0800c739
 800c770:	0800c739 	.word	0x0800c739
 800c774:	0800c739 	.word	0x0800c739
 800c778:	0800c739 	.word	0x0800c739
 800c77c:	0800c8bd 	.word	0x0800c8bd
 800c780:	0800c7e7 	.word	0x0800c7e7
 800c784:	0800c877 	.word	0x0800c877
 800c788:	0800c739 	.word	0x0800c739
 800c78c:	0800c739 	.word	0x0800c739
 800c790:	0800c8df 	.word	0x0800c8df
 800c794:	0800c739 	.word	0x0800c739
 800c798:	0800c7e7 	.word	0x0800c7e7
 800c79c:	0800c739 	.word	0x0800c739
 800c7a0:	0800c739 	.word	0x0800c739
 800c7a4:	0800c87f 	.word	0x0800c87f
 800c7a8:	6833      	ldr	r3, [r6, #0]
 800c7aa:	1d1a      	adds	r2, r3, #4
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	6032      	str	r2, [r6, #0]
 800c7b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c7b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c7b8:	2301      	movs	r3, #1
 800c7ba:	e09d      	b.n	800c8f8 <_printf_i+0x1e8>
 800c7bc:	6833      	ldr	r3, [r6, #0]
 800c7be:	6820      	ldr	r0, [r4, #0]
 800c7c0:	1d19      	adds	r1, r3, #4
 800c7c2:	6031      	str	r1, [r6, #0]
 800c7c4:	0606      	lsls	r6, r0, #24
 800c7c6:	d501      	bpl.n	800c7cc <_printf_i+0xbc>
 800c7c8:	681d      	ldr	r5, [r3, #0]
 800c7ca:	e003      	b.n	800c7d4 <_printf_i+0xc4>
 800c7cc:	0645      	lsls	r5, r0, #25
 800c7ce:	d5fb      	bpl.n	800c7c8 <_printf_i+0xb8>
 800c7d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c7d4:	2d00      	cmp	r5, #0
 800c7d6:	da03      	bge.n	800c7e0 <_printf_i+0xd0>
 800c7d8:	232d      	movs	r3, #45	@ 0x2d
 800c7da:	426d      	negs	r5, r5
 800c7dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c7e0:	4859      	ldr	r0, [pc, #356]	@ (800c948 <_printf_i+0x238>)
 800c7e2:	230a      	movs	r3, #10
 800c7e4:	e011      	b.n	800c80a <_printf_i+0xfa>
 800c7e6:	6821      	ldr	r1, [r4, #0]
 800c7e8:	6833      	ldr	r3, [r6, #0]
 800c7ea:	0608      	lsls	r0, r1, #24
 800c7ec:	f853 5b04 	ldr.w	r5, [r3], #4
 800c7f0:	d402      	bmi.n	800c7f8 <_printf_i+0xe8>
 800c7f2:	0649      	lsls	r1, r1, #25
 800c7f4:	bf48      	it	mi
 800c7f6:	b2ad      	uxthmi	r5, r5
 800c7f8:	2f6f      	cmp	r7, #111	@ 0x6f
 800c7fa:	4853      	ldr	r0, [pc, #332]	@ (800c948 <_printf_i+0x238>)
 800c7fc:	6033      	str	r3, [r6, #0]
 800c7fe:	bf14      	ite	ne
 800c800:	230a      	movne	r3, #10
 800c802:	2308      	moveq	r3, #8
 800c804:	2100      	movs	r1, #0
 800c806:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c80a:	6866      	ldr	r6, [r4, #4]
 800c80c:	60a6      	str	r6, [r4, #8]
 800c80e:	2e00      	cmp	r6, #0
 800c810:	bfa2      	ittt	ge
 800c812:	6821      	ldrge	r1, [r4, #0]
 800c814:	f021 0104 	bicge.w	r1, r1, #4
 800c818:	6021      	strge	r1, [r4, #0]
 800c81a:	b90d      	cbnz	r5, 800c820 <_printf_i+0x110>
 800c81c:	2e00      	cmp	r6, #0
 800c81e:	d04b      	beq.n	800c8b8 <_printf_i+0x1a8>
 800c820:	4616      	mov	r6, r2
 800c822:	fbb5 f1f3 	udiv	r1, r5, r3
 800c826:	fb03 5711 	mls	r7, r3, r1, r5
 800c82a:	5dc7      	ldrb	r7, [r0, r7]
 800c82c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c830:	462f      	mov	r7, r5
 800c832:	42bb      	cmp	r3, r7
 800c834:	460d      	mov	r5, r1
 800c836:	d9f4      	bls.n	800c822 <_printf_i+0x112>
 800c838:	2b08      	cmp	r3, #8
 800c83a:	d10b      	bne.n	800c854 <_printf_i+0x144>
 800c83c:	6823      	ldr	r3, [r4, #0]
 800c83e:	07df      	lsls	r7, r3, #31
 800c840:	d508      	bpl.n	800c854 <_printf_i+0x144>
 800c842:	6923      	ldr	r3, [r4, #16]
 800c844:	6861      	ldr	r1, [r4, #4]
 800c846:	4299      	cmp	r1, r3
 800c848:	bfde      	ittt	le
 800c84a:	2330      	movle	r3, #48	@ 0x30
 800c84c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c850:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c854:	1b92      	subs	r2, r2, r6
 800c856:	6122      	str	r2, [r4, #16]
 800c858:	f8cd a000 	str.w	sl, [sp]
 800c85c:	464b      	mov	r3, r9
 800c85e:	aa03      	add	r2, sp, #12
 800c860:	4621      	mov	r1, r4
 800c862:	4640      	mov	r0, r8
 800c864:	f7ff fee6 	bl	800c634 <_printf_common>
 800c868:	3001      	adds	r0, #1
 800c86a:	d14a      	bne.n	800c902 <_printf_i+0x1f2>
 800c86c:	f04f 30ff 	mov.w	r0, #4294967295
 800c870:	b004      	add	sp, #16
 800c872:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c876:	6823      	ldr	r3, [r4, #0]
 800c878:	f043 0320 	orr.w	r3, r3, #32
 800c87c:	6023      	str	r3, [r4, #0]
 800c87e:	4833      	ldr	r0, [pc, #204]	@ (800c94c <_printf_i+0x23c>)
 800c880:	2778      	movs	r7, #120	@ 0x78
 800c882:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c886:	6823      	ldr	r3, [r4, #0]
 800c888:	6831      	ldr	r1, [r6, #0]
 800c88a:	061f      	lsls	r7, r3, #24
 800c88c:	f851 5b04 	ldr.w	r5, [r1], #4
 800c890:	d402      	bmi.n	800c898 <_printf_i+0x188>
 800c892:	065f      	lsls	r7, r3, #25
 800c894:	bf48      	it	mi
 800c896:	b2ad      	uxthmi	r5, r5
 800c898:	6031      	str	r1, [r6, #0]
 800c89a:	07d9      	lsls	r1, r3, #31
 800c89c:	bf44      	itt	mi
 800c89e:	f043 0320 	orrmi.w	r3, r3, #32
 800c8a2:	6023      	strmi	r3, [r4, #0]
 800c8a4:	b11d      	cbz	r5, 800c8ae <_printf_i+0x19e>
 800c8a6:	2310      	movs	r3, #16
 800c8a8:	e7ac      	b.n	800c804 <_printf_i+0xf4>
 800c8aa:	4827      	ldr	r0, [pc, #156]	@ (800c948 <_printf_i+0x238>)
 800c8ac:	e7e9      	b.n	800c882 <_printf_i+0x172>
 800c8ae:	6823      	ldr	r3, [r4, #0]
 800c8b0:	f023 0320 	bic.w	r3, r3, #32
 800c8b4:	6023      	str	r3, [r4, #0]
 800c8b6:	e7f6      	b.n	800c8a6 <_printf_i+0x196>
 800c8b8:	4616      	mov	r6, r2
 800c8ba:	e7bd      	b.n	800c838 <_printf_i+0x128>
 800c8bc:	6833      	ldr	r3, [r6, #0]
 800c8be:	6825      	ldr	r5, [r4, #0]
 800c8c0:	6961      	ldr	r1, [r4, #20]
 800c8c2:	1d18      	adds	r0, r3, #4
 800c8c4:	6030      	str	r0, [r6, #0]
 800c8c6:	062e      	lsls	r6, r5, #24
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	d501      	bpl.n	800c8d0 <_printf_i+0x1c0>
 800c8cc:	6019      	str	r1, [r3, #0]
 800c8ce:	e002      	b.n	800c8d6 <_printf_i+0x1c6>
 800c8d0:	0668      	lsls	r0, r5, #25
 800c8d2:	d5fb      	bpl.n	800c8cc <_printf_i+0x1bc>
 800c8d4:	8019      	strh	r1, [r3, #0]
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	6123      	str	r3, [r4, #16]
 800c8da:	4616      	mov	r6, r2
 800c8dc:	e7bc      	b.n	800c858 <_printf_i+0x148>
 800c8de:	6833      	ldr	r3, [r6, #0]
 800c8e0:	1d1a      	adds	r2, r3, #4
 800c8e2:	6032      	str	r2, [r6, #0]
 800c8e4:	681e      	ldr	r6, [r3, #0]
 800c8e6:	6862      	ldr	r2, [r4, #4]
 800c8e8:	2100      	movs	r1, #0
 800c8ea:	4630      	mov	r0, r6
 800c8ec:	f7f3 fcf8 	bl	80002e0 <memchr>
 800c8f0:	b108      	cbz	r0, 800c8f6 <_printf_i+0x1e6>
 800c8f2:	1b80      	subs	r0, r0, r6
 800c8f4:	6060      	str	r0, [r4, #4]
 800c8f6:	6863      	ldr	r3, [r4, #4]
 800c8f8:	6123      	str	r3, [r4, #16]
 800c8fa:	2300      	movs	r3, #0
 800c8fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c900:	e7aa      	b.n	800c858 <_printf_i+0x148>
 800c902:	6923      	ldr	r3, [r4, #16]
 800c904:	4632      	mov	r2, r6
 800c906:	4649      	mov	r1, r9
 800c908:	4640      	mov	r0, r8
 800c90a:	47d0      	blx	sl
 800c90c:	3001      	adds	r0, #1
 800c90e:	d0ad      	beq.n	800c86c <_printf_i+0x15c>
 800c910:	6823      	ldr	r3, [r4, #0]
 800c912:	079b      	lsls	r3, r3, #30
 800c914:	d413      	bmi.n	800c93e <_printf_i+0x22e>
 800c916:	68e0      	ldr	r0, [r4, #12]
 800c918:	9b03      	ldr	r3, [sp, #12]
 800c91a:	4298      	cmp	r0, r3
 800c91c:	bfb8      	it	lt
 800c91e:	4618      	movlt	r0, r3
 800c920:	e7a6      	b.n	800c870 <_printf_i+0x160>
 800c922:	2301      	movs	r3, #1
 800c924:	4632      	mov	r2, r6
 800c926:	4649      	mov	r1, r9
 800c928:	4640      	mov	r0, r8
 800c92a:	47d0      	blx	sl
 800c92c:	3001      	adds	r0, #1
 800c92e:	d09d      	beq.n	800c86c <_printf_i+0x15c>
 800c930:	3501      	adds	r5, #1
 800c932:	68e3      	ldr	r3, [r4, #12]
 800c934:	9903      	ldr	r1, [sp, #12]
 800c936:	1a5b      	subs	r3, r3, r1
 800c938:	42ab      	cmp	r3, r5
 800c93a:	dcf2      	bgt.n	800c922 <_printf_i+0x212>
 800c93c:	e7eb      	b.n	800c916 <_printf_i+0x206>
 800c93e:	2500      	movs	r5, #0
 800c940:	f104 0619 	add.w	r6, r4, #25
 800c944:	e7f5      	b.n	800c932 <_printf_i+0x222>
 800c946:	bf00      	nop
 800c948:	0800eb32 	.word	0x0800eb32
 800c94c:	0800eb43 	.word	0x0800eb43

0800c950 <std>:
 800c950:	2300      	movs	r3, #0
 800c952:	b510      	push	{r4, lr}
 800c954:	4604      	mov	r4, r0
 800c956:	e9c0 3300 	strd	r3, r3, [r0]
 800c95a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c95e:	6083      	str	r3, [r0, #8]
 800c960:	8181      	strh	r1, [r0, #12]
 800c962:	6643      	str	r3, [r0, #100]	@ 0x64
 800c964:	81c2      	strh	r2, [r0, #14]
 800c966:	6183      	str	r3, [r0, #24]
 800c968:	4619      	mov	r1, r3
 800c96a:	2208      	movs	r2, #8
 800c96c:	305c      	adds	r0, #92	@ 0x5c
 800c96e:	f000 f8f4 	bl	800cb5a <memset>
 800c972:	4b0d      	ldr	r3, [pc, #52]	@ (800c9a8 <std+0x58>)
 800c974:	6263      	str	r3, [r4, #36]	@ 0x24
 800c976:	4b0d      	ldr	r3, [pc, #52]	@ (800c9ac <std+0x5c>)
 800c978:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c97a:	4b0d      	ldr	r3, [pc, #52]	@ (800c9b0 <std+0x60>)
 800c97c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c97e:	4b0d      	ldr	r3, [pc, #52]	@ (800c9b4 <std+0x64>)
 800c980:	6323      	str	r3, [r4, #48]	@ 0x30
 800c982:	4b0d      	ldr	r3, [pc, #52]	@ (800c9b8 <std+0x68>)
 800c984:	6224      	str	r4, [r4, #32]
 800c986:	429c      	cmp	r4, r3
 800c988:	d006      	beq.n	800c998 <std+0x48>
 800c98a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c98e:	4294      	cmp	r4, r2
 800c990:	d002      	beq.n	800c998 <std+0x48>
 800c992:	33d0      	adds	r3, #208	@ 0xd0
 800c994:	429c      	cmp	r4, r3
 800c996:	d105      	bne.n	800c9a4 <std+0x54>
 800c998:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c99c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c9a0:	f000 b958 	b.w	800cc54 <__retarget_lock_init_recursive>
 800c9a4:	bd10      	pop	{r4, pc}
 800c9a6:	bf00      	nop
 800c9a8:	0800cad5 	.word	0x0800cad5
 800c9ac:	0800caf7 	.word	0x0800caf7
 800c9b0:	0800cb2f 	.word	0x0800cb2f
 800c9b4:	0800cb53 	.word	0x0800cb53
 800c9b8:	240005f0 	.word	0x240005f0

0800c9bc <stdio_exit_handler>:
 800c9bc:	4a02      	ldr	r2, [pc, #8]	@ (800c9c8 <stdio_exit_handler+0xc>)
 800c9be:	4903      	ldr	r1, [pc, #12]	@ (800c9cc <stdio_exit_handler+0x10>)
 800c9c0:	4803      	ldr	r0, [pc, #12]	@ (800c9d0 <stdio_exit_handler+0x14>)
 800c9c2:	f000 b869 	b.w	800ca98 <_fwalk_sglue>
 800c9c6:	bf00      	nop
 800c9c8:	24000010 	.word	0x24000010
 800c9cc:	0800e229 	.word	0x0800e229
 800c9d0:	24000020 	.word	0x24000020

0800c9d4 <cleanup_stdio>:
 800c9d4:	6841      	ldr	r1, [r0, #4]
 800c9d6:	4b0c      	ldr	r3, [pc, #48]	@ (800ca08 <cleanup_stdio+0x34>)
 800c9d8:	4299      	cmp	r1, r3
 800c9da:	b510      	push	{r4, lr}
 800c9dc:	4604      	mov	r4, r0
 800c9de:	d001      	beq.n	800c9e4 <cleanup_stdio+0x10>
 800c9e0:	f001 fc22 	bl	800e228 <_fflush_r>
 800c9e4:	68a1      	ldr	r1, [r4, #8]
 800c9e6:	4b09      	ldr	r3, [pc, #36]	@ (800ca0c <cleanup_stdio+0x38>)
 800c9e8:	4299      	cmp	r1, r3
 800c9ea:	d002      	beq.n	800c9f2 <cleanup_stdio+0x1e>
 800c9ec:	4620      	mov	r0, r4
 800c9ee:	f001 fc1b 	bl	800e228 <_fflush_r>
 800c9f2:	68e1      	ldr	r1, [r4, #12]
 800c9f4:	4b06      	ldr	r3, [pc, #24]	@ (800ca10 <cleanup_stdio+0x3c>)
 800c9f6:	4299      	cmp	r1, r3
 800c9f8:	d004      	beq.n	800ca04 <cleanup_stdio+0x30>
 800c9fa:	4620      	mov	r0, r4
 800c9fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ca00:	f001 bc12 	b.w	800e228 <_fflush_r>
 800ca04:	bd10      	pop	{r4, pc}
 800ca06:	bf00      	nop
 800ca08:	240005f0 	.word	0x240005f0
 800ca0c:	24000658 	.word	0x24000658
 800ca10:	240006c0 	.word	0x240006c0

0800ca14 <global_stdio_init.part.0>:
 800ca14:	b510      	push	{r4, lr}
 800ca16:	4b0b      	ldr	r3, [pc, #44]	@ (800ca44 <global_stdio_init.part.0+0x30>)
 800ca18:	4c0b      	ldr	r4, [pc, #44]	@ (800ca48 <global_stdio_init.part.0+0x34>)
 800ca1a:	4a0c      	ldr	r2, [pc, #48]	@ (800ca4c <global_stdio_init.part.0+0x38>)
 800ca1c:	601a      	str	r2, [r3, #0]
 800ca1e:	4620      	mov	r0, r4
 800ca20:	2200      	movs	r2, #0
 800ca22:	2104      	movs	r1, #4
 800ca24:	f7ff ff94 	bl	800c950 <std>
 800ca28:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ca2c:	2201      	movs	r2, #1
 800ca2e:	2109      	movs	r1, #9
 800ca30:	f7ff ff8e 	bl	800c950 <std>
 800ca34:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ca38:	2202      	movs	r2, #2
 800ca3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ca3e:	2112      	movs	r1, #18
 800ca40:	f7ff bf86 	b.w	800c950 <std>
 800ca44:	24000728 	.word	0x24000728
 800ca48:	240005f0 	.word	0x240005f0
 800ca4c:	0800c9bd 	.word	0x0800c9bd

0800ca50 <__sfp_lock_acquire>:
 800ca50:	4801      	ldr	r0, [pc, #4]	@ (800ca58 <__sfp_lock_acquire+0x8>)
 800ca52:	f000 b900 	b.w	800cc56 <__retarget_lock_acquire_recursive>
 800ca56:	bf00      	nop
 800ca58:	24000731 	.word	0x24000731

0800ca5c <__sfp_lock_release>:
 800ca5c:	4801      	ldr	r0, [pc, #4]	@ (800ca64 <__sfp_lock_release+0x8>)
 800ca5e:	f000 b8fb 	b.w	800cc58 <__retarget_lock_release_recursive>
 800ca62:	bf00      	nop
 800ca64:	24000731 	.word	0x24000731

0800ca68 <__sinit>:
 800ca68:	b510      	push	{r4, lr}
 800ca6a:	4604      	mov	r4, r0
 800ca6c:	f7ff fff0 	bl	800ca50 <__sfp_lock_acquire>
 800ca70:	6a23      	ldr	r3, [r4, #32]
 800ca72:	b11b      	cbz	r3, 800ca7c <__sinit+0x14>
 800ca74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ca78:	f7ff bff0 	b.w	800ca5c <__sfp_lock_release>
 800ca7c:	4b04      	ldr	r3, [pc, #16]	@ (800ca90 <__sinit+0x28>)
 800ca7e:	6223      	str	r3, [r4, #32]
 800ca80:	4b04      	ldr	r3, [pc, #16]	@ (800ca94 <__sinit+0x2c>)
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d1f5      	bne.n	800ca74 <__sinit+0xc>
 800ca88:	f7ff ffc4 	bl	800ca14 <global_stdio_init.part.0>
 800ca8c:	e7f2      	b.n	800ca74 <__sinit+0xc>
 800ca8e:	bf00      	nop
 800ca90:	0800c9d5 	.word	0x0800c9d5
 800ca94:	24000728 	.word	0x24000728

0800ca98 <_fwalk_sglue>:
 800ca98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca9c:	4607      	mov	r7, r0
 800ca9e:	4688      	mov	r8, r1
 800caa0:	4614      	mov	r4, r2
 800caa2:	2600      	movs	r6, #0
 800caa4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800caa8:	f1b9 0901 	subs.w	r9, r9, #1
 800caac:	d505      	bpl.n	800caba <_fwalk_sglue+0x22>
 800caae:	6824      	ldr	r4, [r4, #0]
 800cab0:	2c00      	cmp	r4, #0
 800cab2:	d1f7      	bne.n	800caa4 <_fwalk_sglue+0xc>
 800cab4:	4630      	mov	r0, r6
 800cab6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800caba:	89ab      	ldrh	r3, [r5, #12]
 800cabc:	2b01      	cmp	r3, #1
 800cabe:	d907      	bls.n	800cad0 <_fwalk_sglue+0x38>
 800cac0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cac4:	3301      	adds	r3, #1
 800cac6:	d003      	beq.n	800cad0 <_fwalk_sglue+0x38>
 800cac8:	4629      	mov	r1, r5
 800caca:	4638      	mov	r0, r7
 800cacc:	47c0      	blx	r8
 800cace:	4306      	orrs	r6, r0
 800cad0:	3568      	adds	r5, #104	@ 0x68
 800cad2:	e7e9      	b.n	800caa8 <_fwalk_sglue+0x10>

0800cad4 <__sread>:
 800cad4:	b510      	push	{r4, lr}
 800cad6:	460c      	mov	r4, r1
 800cad8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cadc:	f000 f86c 	bl	800cbb8 <_read_r>
 800cae0:	2800      	cmp	r0, #0
 800cae2:	bfab      	itete	ge
 800cae4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800cae6:	89a3      	ldrhlt	r3, [r4, #12]
 800cae8:	181b      	addge	r3, r3, r0
 800caea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800caee:	bfac      	ite	ge
 800caf0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800caf2:	81a3      	strhlt	r3, [r4, #12]
 800caf4:	bd10      	pop	{r4, pc}

0800caf6 <__swrite>:
 800caf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cafa:	461f      	mov	r7, r3
 800cafc:	898b      	ldrh	r3, [r1, #12]
 800cafe:	05db      	lsls	r3, r3, #23
 800cb00:	4605      	mov	r5, r0
 800cb02:	460c      	mov	r4, r1
 800cb04:	4616      	mov	r6, r2
 800cb06:	d505      	bpl.n	800cb14 <__swrite+0x1e>
 800cb08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb0c:	2302      	movs	r3, #2
 800cb0e:	2200      	movs	r2, #0
 800cb10:	f000 f840 	bl	800cb94 <_lseek_r>
 800cb14:	89a3      	ldrh	r3, [r4, #12]
 800cb16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cb1a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800cb1e:	81a3      	strh	r3, [r4, #12]
 800cb20:	4632      	mov	r2, r6
 800cb22:	463b      	mov	r3, r7
 800cb24:	4628      	mov	r0, r5
 800cb26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cb2a:	f000 b857 	b.w	800cbdc <_write_r>

0800cb2e <__sseek>:
 800cb2e:	b510      	push	{r4, lr}
 800cb30:	460c      	mov	r4, r1
 800cb32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb36:	f000 f82d 	bl	800cb94 <_lseek_r>
 800cb3a:	1c43      	adds	r3, r0, #1
 800cb3c:	89a3      	ldrh	r3, [r4, #12]
 800cb3e:	bf15      	itete	ne
 800cb40:	6560      	strne	r0, [r4, #84]	@ 0x54
 800cb42:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800cb46:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800cb4a:	81a3      	strheq	r3, [r4, #12]
 800cb4c:	bf18      	it	ne
 800cb4e:	81a3      	strhne	r3, [r4, #12]
 800cb50:	bd10      	pop	{r4, pc}

0800cb52 <__sclose>:
 800cb52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb56:	f000 b80d 	b.w	800cb74 <_close_r>

0800cb5a <memset>:
 800cb5a:	4402      	add	r2, r0
 800cb5c:	4603      	mov	r3, r0
 800cb5e:	4293      	cmp	r3, r2
 800cb60:	d100      	bne.n	800cb64 <memset+0xa>
 800cb62:	4770      	bx	lr
 800cb64:	f803 1b01 	strb.w	r1, [r3], #1
 800cb68:	e7f9      	b.n	800cb5e <memset+0x4>
	...

0800cb6c <_localeconv_r>:
 800cb6c:	4800      	ldr	r0, [pc, #0]	@ (800cb70 <_localeconv_r+0x4>)
 800cb6e:	4770      	bx	lr
 800cb70:	2400015c 	.word	0x2400015c

0800cb74 <_close_r>:
 800cb74:	b538      	push	{r3, r4, r5, lr}
 800cb76:	4d06      	ldr	r5, [pc, #24]	@ (800cb90 <_close_r+0x1c>)
 800cb78:	2300      	movs	r3, #0
 800cb7a:	4604      	mov	r4, r0
 800cb7c:	4608      	mov	r0, r1
 800cb7e:	602b      	str	r3, [r5, #0]
 800cb80:	f7f4 fe38 	bl	80017f4 <_close>
 800cb84:	1c43      	adds	r3, r0, #1
 800cb86:	d102      	bne.n	800cb8e <_close_r+0x1a>
 800cb88:	682b      	ldr	r3, [r5, #0]
 800cb8a:	b103      	cbz	r3, 800cb8e <_close_r+0x1a>
 800cb8c:	6023      	str	r3, [r4, #0]
 800cb8e:	bd38      	pop	{r3, r4, r5, pc}
 800cb90:	2400072c 	.word	0x2400072c

0800cb94 <_lseek_r>:
 800cb94:	b538      	push	{r3, r4, r5, lr}
 800cb96:	4d07      	ldr	r5, [pc, #28]	@ (800cbb4 <_lseek_r+0x20>)
 800cb98:	4604      	mov	r4, r0
 800cb9a:	4608      	mov	r0, r1
 800cb9c:	4611      	mov	r1, r2
 800cb9e:	2200      	movs	r2, #0
 800cba0:	602a      	str	r2, [r5, #0]
 800cba2:	461a      	mov	r2, r3
 800cba4:	f7f4 fe4d 	bl	8001842 <_lseek>
 800cba8:	1c43      	adds	r3, r0, #1
 800cbaa:	d102      	bne.n	800cbb2 <_lseek_r+0x1e>
 800cbac:	682b      	ldr	r3, [r5, #0]
 800cbae:	b103      	cbz	r3, 800cbb2 <_lseek_r+0x1e>
 800cbb0:	6023      	str	r3, [r4, #0]
 800cbb2:	bd38      	pop	{r3, r4, r5, pc}
 800cbb4:	2400072c 	.word	0x2400072c

0800cbb8 <_read_r>:
 800cbb8:	b538      	push	{r3, r4, r5, lr}
 800cbba:	4d07      	ldr	r5, [pc, #28]	@ (800cbd8 <_read_r+0x20>)
 800cbbc:	4604      	mov	r4, r0
 800cbbe:	4608      	mov	r0, r1
 800cbc0:	4611      	mov	r1, r2
 800cbc2:	2200      	movs	r2, #0
 800cbc4:	602a      	str	r2, [r5, #0]
 800cbc6:	461a      	mov	r2, r3
 800cbc8:	f7f4 fddb 	bl	8001782 <_read>
 800cbcc:	1c43      	adds	r3, r0, #1
 800cbce:	d102      	bne.n	800cbd6 <_read_r+0x1e>
 800cbd0:	682b      	ldr	r3, [r5, #0]
 800cbd2:	b103      	cbz	r3, 800cbd6 <_read_r+0x1e>
 800cbd4:	6023      	str	r3, [r4, #0]
 800cbd6:	bd38      	pop	{r3, r4, r5, pc}
 800cbd8:	2400072c 	.word	0x2400072c

0800cbdc <_write_r>:
 800cbdc:	b538      	push	{r3, r4, r5, lr}
 800cbde:	4d07      	ldr	r5, [pc, #28]	@ (800cbfc <_write_r+0x20>)
 800cbe0:	4604      	mov	r4, r0
 800cbe2:	4608      	mov	r0, r1
 800cbe4:	4611      	mov	r1, r2
 800cbe6:	2200      	movs	r2, #0
 800cbe8:	602a      	str	r2, [r5, #0]
 800cbea:	461a      	mov	r2, r3
 800cbec:	f7f4 fde6 	bl	80017bc <_write>
 800cbf0:	1c43      	adds	r3, r0, #1
 800cbf2:	d102      	bne.n	800cbfa <_write_r+0x1e>
 800cbf4:	682b      	ldr	r3, [r5, #0]
 800cbf6:	b103      	cbz	r3, 800cbfa <_write_r+0x1e>
 800cbf8:	6023      	str	r3, [r4, #0]
 800cbfa:	bd38      	pop	{r3, r4, r5, pc}
 800cbfc:	2400072c 	.word	0x2400072c

0800cc00 <__errno>:
 800cc00:	4b01      	ldr	r3, [pc, #4]	@ (800cc08 <__errno+0x8>)
 800cc02:	6818      	ldr	r0, [r3, #0]
 800cc04:	4770      	bx	lr
 800cc06:	bf00      	nop
 800cc08:	2400001c 	.word	0x2400001c

0800cc0c <__libc_init_array>:
 800cc0c:	b570      	push	{r4, r5, r6, lr}
 800cc0e:	4d0d      	ldr	r5, [pc, #52]	@ (800cc44 <__libc_init_array+0x38>)
 800cc10:	4c0d      	ldr	r4, [pc, #52]	@ (800cc48 <__libc_init_array+0x3c>)
 800cc12:	1b64      	subs	r4, r4, r5
 800cc14:	10a4      	asrs	r4, r4, #2
 800cc16:	2600      	movs	r6, #0
 800cc18:	42a6      	cmp	r6, r4
 800cc1a:	d109      	bne.n	800cc30 <__libc_init_array+0x24>
 800cc1c:	4d0b      	ldr	r5, [pc, #44]	@ (800cc4c <__libc_init_array+0x40>)
 800cc1e:	4c0c      	ldr	r4, [pc, #48]	@ (800cc50 <__libc_init_array+0x44>)
 800cc20:	f001 fe50 	bl	800e8c4 <_init>
 800cc24:	1b64      	subs	r4, r4, r5
 800cc26:	10a4      	asrs	r4, r4, #2
 800cc28:	2600      	movs	r6, #0
 800cc2a:	42a6      	cmp	r6, r4
 800cc2c:	d105      	bne.n	800cc3a <__libc_init_array+0x2e>
 800cc2e:	bd70      	pop	{r4, r5, r6, pc}
 800cc30:	f855 3b04 	ldr.w	r3, [r5], #4
 800cc34:	4798      	blx	r3
 800cc36:	3601      	adds	r6, #1
 800cc38:	e7ee      	b.n	800cc18 <__libc_init_array+0xc>
 800cc3a:	f855 3b04 	ldr.w	r3, [r5], #4
 800cc3e:	4798      	blx	r3
 800cc40:	3601      	adds	r6, #1
 800cc42:	e7f2      	b.n	800cc2a <__libc_init_array+0x1e>
 800cc44:	0800ee98 	.word	0x0800ee98
 800cc48:	0800ee98 	.word	0x0800ee98
 800cc4c:	0800ee98 	.word	0x0800ee98
 800cc50:	0800ee9c 	.word	0x0800ee9c

0800cc54 <__retarget_lock_init_recursive>:
 800cc54:	4770      	bx	lr

0800cc56 <__retarget_lock_acquire_recursive>:
 800cc56:	4770      	bx	lr

0800cc58 <__retarget_lock_release_recursive>:
 800cc58:	4770      	bx	lr

0800cc5a <quorem>:
 800cc5a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc5e:	6903      	ldr	r3, [r0, #16]
 800cc60:	690c      	ldr	r4, [r1, #16]
 800cc62:	42a3      	cmp	r3, r4
 800cc64:	4607      	mov	r7, r0
 800cc66:	db7e      	blt.n	800cd66 <quorem+0x10c>
 800cc68:	3c01      	subs	r4, #1
 800cc6a:	f101 0814 	add.w	r8, r1, #20
 800cc6e:	00a3      	lsls	r3, r4, #2
 800cc70:	f100 0514 	add.w	r5, r0, #20
 800cc74:	9300      	str	r3, [sp, #0]
 800cc76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cc7a:	9301      	str	r3, [sp, #4]
 800cc7c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800cc80:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cc84:	3301      	adds	r3, #1
 800cc86:	429a      	cmp	r2, r3
 800cc88:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800cc8c:	fbb2 f6f3 	udiv	r6, r2, r3
 800cc90:	d32e      	bcc.n	800ccf0 <quorem+0x96>
 800cc92:	f04f 0a00 	mov.w	sl, #0
 800cc96:	46c4      	mov	ip, r8
 800cc98:	46ae      	mov	lr, r5
 800cc9a:	46d3      	mov	fp, sl
 800cc9c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800cca0:	b298      	uxth	r0, r3
 800cca2:	fb06 a000 	mla	r0, r6, r0, sl
 800cca6:	0c02      	lsrs	r2, r0, #16
 800cca8:	0c1b      	lsrs	r3, r3, #16
 800ccaa:	fb06 2303 	mla	r3, r6, r3, r2
 800ccae:	f8de 2000 	ldr.w	r2, [lr]
 800ccb2:	b280      	uxth	r0, r0
 800ccb4:	b292      	uxth	r2, r2
 800ccb6:	1a12      	subs	r2, r2, r0
 800ccb8:	445a      	add	r2, fp
 800ccba:	f8de 0000 	ldr.w	r0, [lr]
 800ccbe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ccc2:	b29b      	uxth	r3, r3
 800ccc4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800ccc8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800cccc:	b292      	uxth	r2, r2
 800ccce:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ccd2:	45e1      	cmp	r9, ip
 800ccd4:	f84e 2b04 	str.w	r2, [lr], #4
 800ccd8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ccdc:	d2de      	bcs.n	800cc9c <quorem+0x42>
 800ccde:	9b00      	ldr	r3, [sp, #0]
 800cce0:	58eb      	ldr	r3, [r5, r3]
 800cce2:	b92b      	cbnz	r3, 800ccf0 <quorem+0x96>
 800cce4:	9b01      	ldr	r3, [sp, #4]
 800cce6:	3b04      	subs	r3, #4
 800cce8:	429d      	cmp	r5, r3
 800ccea:	461a      	mov	r2, r3
 800ccec:	d32f      	bcc.n	800cd4e <quorem+0xf4>
 800ccee:	613c      	str	r4, [r7, #16]
 800ccf0:	4638      	mov	r0, r7
 800ccf2:	f001 f90d 	bl	800df10 <__mcmp>
 800ccf6:	2800      	cmp	r0, #0
 800ccf8:	db25      	blt.n	800cd46 <quorem+0xec>
 800ccfa:	4629      	mov	r1, r5
 800ccfc:	2000      	movs	r0, #0
 800ccfe:	f858 2b04 	ldr.w	r2, [r8], #4
 800cd02:	f8d1 c000 	ldr.w	ip, [r1]
 800cd06:	fa1f fe82 	uxth.w	lr, r2
 800cd0a:	fa1f f38c 	uxth.w	r3, ip
 800cd0e:	eba3 030e 	sub.w	r3, r3, lr
 800cd12:	4403      	add	r3, r0
 800cd14:	0c12      	lsrs	r2, r2, #16
 800cd16:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800cd1a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800cd1e:	b29b      	uxth	r3, r3
 800cd20:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cd24:	45c1      	cmp	r9, r8
 800cd26:	f841 3b04 	str.w	r3, [r1], #4
 800cd2a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800cd2e:	d2e6      	bcs.n	800ccfe <quorem+0xa4>
 800cd30:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cd34:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cd38:	b922      	cbnz	r2, 800cd44 <quorem+0xea>
 800cd3a:	3b04      	subs	r3, #4
 800cd3c:	429d      	cmp	r5, r3
 800cd3e:	461a      	mov	r2, r3
 800cd40:	d30b      	bcc.n	800cd5a <quorem+0x100>
 800cd42:	613c      	str	r4, [r7, #16]
 800cd44:	3601      	adds	r6, #1
 800cd46:	4630      	mov	r0, r6
 800cd48:	b003      	add	sp, #12
 800cd4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd4e:	6812      	ldr	r2, [r2, #0]
 800cd50:	3b04      	subs	r3, #4
 800cd52:	2a00      	cmp	r2, #0
 800cd54:	d1cb      	bne.n	800ccee <quorem+0x94>
 800cd56:	3c01      	subs	r4, #1
 800cd58:	e7c6      	b.n	800cce8 <quorem+0x8e>
 800cd5a:	6812      	ldr	r2, [r2, #0]
 800cd5c:	3b04      	subs	r3, #4
 800cd5e:	2a00      	cmp	r2, #0
 800cd60:	d1ef      	bne.n	800cd42 <quorem+0xe8>
 800cd62:	3c01      	subs	r4, #1
 800cd64:	e7ea      	b.n	800cd3c <quorem+0xe2>
 800cd66:	2000      	movs	r0, #0
 800cd68:	e7ee      	b.n	800cd48 <quorem+0xee>
 800cd6a:	0000      	movs	r0, r0
 800cd6c:	0000      	movs	r0, r0
	...

0800cd70 <_dtoa_r>:
 800cd70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd74:	ed2d 8b02 	vpush	{d8}
 800cd78:	69c7      	ldr	r7, [r0, #28]
 800cd7a:	b091      	sub	sp, #68	@ 0x44
 800cd7c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800cd80:	ec55 4b10 	vmov	r4, r5, d0
 800cd84:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800cd86:	9107      	str	r1, [sp, #28]
 800cd88:	4681      	mov	r9, r0
 800cd8a:	9209      	str	r2, [sp, #36]	@ 0x24
 800cd8c:	930d      	str	r3, [sp, #52]	@ 0x34
 800cd8e:	b97f      	cbnz	r7, 800cdb0 <_dtoa_r+0x40>
 800cd90:	2010      	movs	r0, #16
 800cd92:	f000 fd8d 	bl	800d8b0 <malloc>
 800cd96:	4602      	mov	r2, r0
 800cd98:	f8c9 001c 	str.w	r0, [r9, #28]
 800cd9c:	b920      	cbnz	r0, 800cda8 <_dtoa_r+0x38>
 800cd9e:	4ba0      	ldr	r3, [pc, #640]	@ (800d020 <_dtoa_r+0x2b0>)
 800cda0:	21ef      	movs	r1, #239	@ 0xef
 800cda2:	48a0      	ldr	r0, [pc, #640]	@ (800d024 <_dtoa_r+0x2b4>)
 800cda4:	f001 fa86 	bl	800e2b4 <__assert_func>
 800cda8:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800cdac:	6007      	str	r7, [r0, #0]
 800cdae:	60c7      	str	r7, [r0, #12]
 800cdb0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800cdb4:	6819      	ldr	r1, [r3, #0]
 800cdb6:	b159      	cbz	r1, 800cdd0 <_dtoa_r+0x60>
 800cdb8:	685a      	ldr	r2, [r3, #4]
 800cdba:	604a      	str	r2, [r1, #4]
 800cdbc:	2301      	movs	r3, #1
 800cdbe:	4093      	lsls	r3, r2
 800cdc0:	608b      	str	r3, [r1, #8]
 800cdc2:	4648      	mov	r0, r9
 800cdc4:	f000 fe6a 	bl	800da9c <_Bfree>
 800cdc8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800cdcc:	2200      	movs	r2, #0
 800cdce:	601a      	str	r2, [r3, #0]
 800cdd0:	1e2b      	subs	r3, r5, #0
 800cdd2:	bfbb      	ittet	lt
 800cdd4:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800cdd8:	9303      	strlt	r3, [sp, #12]
 800cdda:	2300      	movge	r3, #0
 800cddc:	2201      	movlt	r2, #1
 800cdde:	bfac      	ite	ge
 800cde0:	6033      	strge	r3, [r6, #0]
 800cde2:	6032      	strlt	r2, [r6, #0]
 800cde4:	4b90      	ldr	r3, [pc, #576]	@ (800d028 <_dtoa_r+0x2b8>)
 800cde6:	9e03      	ldr	r6, [sp, #12]
 800cde8:	43b3      	bics	r3, r6
 800cdea:	d110      	bne.n	800ce0e <_dtoa_r+0x9e>
 800cdec:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800cdee:	f242 730f 	movw	r3, #9999	@ 0x270f
 800cdf2:	6013      	str	r3, [r2, #0]
 800cdf4:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800cdf8:	4323      	orrs	r3, r4
 800cdfa:	f000 84de 	beq.w	800d7ba <_dtoa_r+0xa4a>
 800cdfe:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ce00:	4f8a      	ldr	r7, [pc, #552]	@ (800d02c <_dtoa_r+0x2bc>)
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	f000 84e0 	beq.w	800d7c8 <_dtoa_r+0xa58>
 800ce08:	1cfb      	adds	r3, r7, #3
 800ce0a:	f000 bcdb 	b.w	800d7c4 <_dtoa_r+0xa54>
 800ce0e:	ed9d 8b02 	vldr	d8, [sp, #8]
 800ce12:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ce16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce1a:	d10a      	bne.n	800ce32 <_dtoa_r+0xc2>
 800ce1c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ce1e:	2301      	movs	r3, #1
 800ce20:	6013      	str	r3, [r2, #0]
 800ce22:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ce24:	b113      	cbz	r3, 800ce2c <_dtoa_r+0xbc>
 800ce26:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800ce28:	4b81      	ldr	r3, [pc, #516]	@ (800d030 <_dtoa_r+0x2c0>)
 800ce2a:	6013      	str	r3, [r2, #0]
 800ce2c:	4f81      	ldr	r7, [pc, #516]	@ (800d034 <_dtoa_r+0x2c4>)
 800ce2e:	f000 bccb 	b.w	800d7c8 <_dtoa_r+0xa58>
 800ce32:	aa0e      	add	r2, sp, #56	@ 0x38
 800ce34:	a90f      	add	r1, sp, #60	@ 0x3c
 800ce36:	4648      	mov	r0, r9
 800ce38:	eeb0 0b48 	vmov.f64	d0, d8
 800ce3c:	f001 f918 	bl	800e070 <__d2b>
 800ce40:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800ce44:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ce46:	9001      	str	r0, [sp, #4]
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d045      	beq.n	800ced8 <_dtoa_r+0x168>
 800ce4c:	eeb0 7b48 	vmov.f64	d7, d8
 800ce50:	ee18 1a90 	vmov	r1, s17
 800ce54:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800ce58:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800ce5c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800ce60:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800ce64:	2500      	movs	r5, #0
 800ce66:	ee07 1a90 	vmov	s15, r1
 800ce6a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800ce6e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800d008 <_dtoa_r+0x298>
 800ce72:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ce76:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800d010 <_dtoa_r+0x2a0>
 800ce7a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800ce7e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800d018 <_dtoa_r+0x2a8>
 800ce82:	ee07 3a90 	vmov	s15, r3
 800ce86:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800ce8a:	eeb0 7b46 	vmov.f64	d7, d6
 800ce8e:	eea4 7b05 	vfma.f64	d7, d4, d5
 800ce92:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800ce96:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800ce9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce9e:	ee16 8a90 	vmov	r8, s13
 800cea2:	d508      	bpl.n	800ceb6 <_dtoa_r+0x146>
 800cea4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800cea8:	eeb4 6b47 	vcmp.f64	d6, d7
 800ceac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ceb0:	bf18      	it	ne
 800ceb2:	f108 38ff 	addne.w	r8, r8, #4294967295
 800ceb6:	f1b8 0f16 	cmp.w	r8, #22
 800ceba:	d82b      	bhi.n	800cf14 <_dtoa_r+0x1a4>
 800cebc:	495e      	ldr	r1, [pc, #376]	@ (800d038 <_dtoa_r+0x2c8>)
 800cebe:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800cec2:	ed91 7b00 	vldr	d7, [r1]
 800cec6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800ceca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cece:	d501      	bpl.n	800ced4 <_dtoa_r+0x164>
 800ced0:	f108 38ff 	add.w	r8, r8, #4294967295
 800ced4:	2100      	movs	r1, #0
 800ced6:	e01e      	b.n	800cf16 <_dtoa_r+0x1a6>
 800ced8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ceda:	4413      	add	r3, r2
 800cedc:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800cee0:	2920      	cmp	r1, #32
 800cee2:	bfc1      	itttt	gt
 800cee4:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800cee8:	408e      	lslgt	r6, r1
 800ceea:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800ceee:	fa24 f101 	lsrgt.w	r1, r4, r1
 800cef2:	bfd6      	itet	le
 800cef4:	f1c1 0120 	rsble	r1, r1, #32
 800cef8:	4331      	orrgt	r1, r6
 800cefa:	fa04 f101 	lslle.w	r1, r4, r1
 800cefe:	ee07 1a90 	vmov	s15, r1
 800cf02:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800cf06:	3b01      	subs	r3, #1
 800cf08:	ee17 1a90 	vmov	r1, s15
 800cf0c:	2501      	movs	r5, #1
 800cf0e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800cf12:	e7a8      	b.n	800ce66 <_dtoa_r+0xf6>
 800cf14:	2101      	movs	r1, #1
 800cf16:	1ad2      	subs	r2, r2, r3
 800cf18:	1e53      	subs	r3, r2, #1
 800cf1a:	9306      	str	r3, [sp, #24]
 800cf1c:	bf45      	ittet	mi
 800cf1e:	f1c2 0301 	rsbmi	r3, r2, #1
 800cf22:	9305      	strmi	r3, [sp, #20]
 800cf24:	2300      	movpl	r3, #0
 800cf26:	2300      	movmi	r3, #0
 800cf28:	bf4c      	ite	mi
 800cf2a:	9306      	strmi	r3, [sp, #24]
 800cf2c:	9305      	strpl	r3, [sp, #20]
 800cf2e:	f1b8 0f00 	cmp.w	r8, #0
 800cf32:	910c      	str	r1, [sp, #48]	@ 0x30
 800cf34:	db18      	blt.n	800cf68 <_dtoa_r+0x1f8>
 800cf36:	9b06      	ldr	r3, [sp, #24]
 800cf38:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800cf3c:	4443      	add	r3, r8
 800cf3e:	9306      	str	r3, [sp, #24]
 800cf40:	2300      	movs	r3, #0
 800cf42:	9a07      	ldr	r2, [sp, #28]
 800cf44:	2a09      	cmp	r2, #9
 800cf46:	d849      	bhi.n	800cfdc <_dtoa_r+0x26c>
 800cf48:	2a05      	cmp	r2, #5
 800cf4a:	bfc4      	itt	gt
 800cf4c:	3a04      	subgt	r2, #4
 800cf4e:	9207      	strgt	r2, [sp, #28]
 800cf50:	9a07      	ldr	r2, [sp, #28]
 800cf52:	f1a2 0202 	sub.w	r2, r2, #2
 800cf56:	bfcc      	ite	gt
 800cf58:	2400      	movgt	r4, #0
 800cf5a:	2401      	movle	r4, #1
 800cf5c:	2a03      	cmp	r2, #3
 800cf5e:	d848      	bhi.n	800cff2 <_dtoa_r+0x282>
 800cf60:	e8df f002 	tbb	[pc, r2]
 800cf64:	3a2c2e0b 	.word	0x3a2c2e0b
 800cf68:	9b05      	ldr	r3, [sp, #20]
 800cf6a:	2200      	movs	r2, #0
 800cf6c:	eba3 0308 	sub.w	r3, r3, r8
 800cf70:	9305      	str	r3, [sp, #20]
 800cf72:	920a      	str	r2, [sp, #40]	@ 0x28
 800cf74:	f1c8 0300 	rsb	r3, r8, #0
 800cf78:	e7e3      	b.n	800cf42 <_dtoa_r+0x1d2>
 800cf7a:	2200      	movs	r2, #0
 800cf7c:	9208      	str	r2, [sp, #32]
 800cf7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cf80:	2a00      	cmp	r2, #0
 800cf82:	dc39      	bgt.n	800cff8 <_dtoa_r+0x288>
 800cf84:	f04f 0b01 	mov.w	fp, #1
 800cf88:	46da      	mov	sl, fp
 800cf8a:	465a      	mov	r2, fp
 800cf8c:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800cf90:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800cf94:	2100      	movs	r1, #0
 800cf96:	2004      	movs	r0, #4
 800cf98:	f100 0614 	add.w	r6, r0, #20
 800cf9c:	4296      	cmp	r6, r2
 800cf9e:	d930      	bls.n	800d002 <_dtoa_r+0x292>
 800cfa0:	6079      	str	r1, [r7, #4]
 800cfa2:	4648      	mov	r0, r9
 800cfa4:	9304      	str	r3, [sp, #16]
 800cfa6:	f000 fd39 	bl	800da1c <_Balloc>
 800cfaa:	9b04      	ldr	r3, [sp, #16]
 800cfac:	4607      	mov	r7, r0
 800cfae:	2800      	cmp	r0, #0
 800cfb0:	d146      	bne.n	800d040 <_dtoa_r+0x2d0>
 800cfb2:	4b22      	ldr	r3, [pc, #136]	@ (800d03c <_dtoa_r+0x2cc>)
 800cfb4:	4602      	mov	r2, r0
 800cfb6:	f240 11af 	movw	r1, #431	@ 0x1af
 800cfba:	e6f2      	b.n	800cda2 <_dtoa_r+0x32>
 800cfbc:	2201      	movs	r2, #1
 800cfbe:	e7dd      	b.n	800cf7c <_dtoa_r+0x20c>
 800cfc0:	2200      	movs	r2, #0
 800cfc2:	9208      	str	r2, [sp, #32]
 800cfc4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cfc6:	eb08 0b02 	add.w	fp, r8, r2
 800cfca:	f10b 0a01 	add.w	sl, fp, #1
 800cfce:	4652      	mov	r2, sl
 800cfd0:	2a01      	cmp	r2, #1
 800cfd2:	bfb8      	it	lt
 800cfd4:	2201      	movlt	r2, #1
 800cfd6:	e7db      	b.n	800cf90 <_dtoa_r+0x220>
 800cfd8:	2201      	movs	r2, #1
 800cfda:	e7f2      	b.n	800cfc2 <_dtoa_r+0x252>
 800cfdc:	2401      	movs	r4, #1
 800cfde:	2200      	movs	r2, #0
 800cfe0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800cfe4:	f04f 3bff 	mov.w	fp, #4294967295
 800cfe8:	2100      	movs	r1, #0
 800cfea:	46da      	mov	sl, fp
 800cfec:	2212      	movs	r2, #18
 800cfee:	9109      	str	r1, [sp, #36]	@ 0x24
 800cff0:	e7ce      	b.n	800cf90 <_dtoa_r+0x220>
 800cff2:	2201      	movs	r2, #1
 800cff4:	9208      	str	r2, [sp, #32]
 800cff6:	e7f5      	b.n	800cfe4 <_dtoa_r+0x274>
 800cff8:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800cffc:	46da      	mov	sl, fp
 800cffe:	465a      	mov	r2, fp
 800d000:	e7c6      	b.n	800cf90 <_dtoa_r+0x220>
 800d002:	3101      	adds	r1, #1
 800d004:	0040      	lsls	r0, r0, #1
 800d006:	e7c7      	b.n	800cf98 <_dtoa_r+0x228>
 800d008:	636f4361 	.word	0x636f4361
 800d00c:	3fd287a7 	.word	0x3fd287a7
 800d010:	8b60c8b3 	.word	0x8b60c8b3
 800d014:	3fc68a28 	.word	0x3fc68a28
 800d018:	509f79fb 	.word	0x509f79fb
 800d01c:	3fd34413 	.word	0x3fd34413
 800d020:	0800eb61 	.word	0x0800eb61
 800d024:	0800eb78 	.word	0x0800eb78
 800d028:	7ff00000 	.word	0x7ff00000
 800d02c:	0800eb5d 	.word	0x0800eb5d
 800d030:	0800eb31 	.word	0x0800eb31
 800d034:	0800eb30 	.word	0x0800eb30
 800d038:	0800ec70 	.word	0x0800ec70
 800d03c:	0800ebd0 	.word	0x0800ebd0
 800d040:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800d044:	f1ba 0f0e 	cmp.w	sl, #14
 800d048:	6010      	str	r0, [r2, #0]
 800d04a:	d86f      	bhi.n	800d12c <_dtoa_r+0x3bc>
 800d04c:	2c00      	cmp	r4, #0
 800d04e:	d06d      	beq.n	800d12c <_dtoa_r+0x3bc>
 800d050:	f1b8 0f00 	cmp.w	r8, #0
 800d054:	f340 80c2 	ble.w	800d1dc <_dtoa_r+0x46c>
 800d058:	4aca      	ldr	r2, [pc, #808]	@ (800d384 <_dtoa_r+0x614>)
 800d05a:	f008 010f 	and.w	r1, r8, #15
 800d05e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800d062:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800d066:	ed92 7b00 	vldr	d7, [r2]
 800d06a:	ea4f 1128 	mov.w	r1, r8, asr #4
 800d06e:	f000 80a9 	beq.w	800d1c4 <_dtoa_r+0x454>
 800d072:	4ac5      	ldr	r2, [pc, #788]	@ (800d388 <_dtoa_r+0x618>)
 800d074:	ed92 6b08 	vldr	d6, [r2, #32]
 800d078:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800d07c:	ed8d 6b02 	vstr	d6, [sp, #8]
 800d080:	f001 010f 	and.w	r1, r1, #15
 800d084:	2203      	movs	r2, #3
 800d086:	48c0      	ldr	r0, [pc, #768]	@ (800d388 <_dtoa_r+0x618>)
 800d088:	2900      	cmp	r1, #0
 800d08a:	f040 809d 	bne.w	800d1c8 <_dtoa_r+0x458>
 800d08e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d092:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800d096:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d09a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800d09c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d0a0:	2900      	cmp	r1, #0
 800d0a2:	f000 80c1 	beq.w	800d228 <_dtoa_r+0x4b8>
 800d0a6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800d0aa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d0ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0b2:	f140 80b9 	bpl.w	800d228 <_dtoa_r+0x4b8>
 800d0b6:	f1ba 0f00 	cmp.w	sl, #0
 800d0ba:	f000 80b5 	beq.w	800d228 <_dtoa_r+0x4b8>
 800d0be:	f1bb 0f00 	cmp.w	fp, #0
 800d0c2:	dd31      	ble.n	800d128 <_dtoa_r+0x3b8>
 800d0c4:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800d0c8:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d0cc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d0d0:	f108 31ff 	add.w	r1, r8, #4294967295
 800d0d4:	9104      	str	r1, [sp, #16]
 800d0d6:	3201      	adds	r2, #1
 800d0d8:	465c      	mov	r4, fp
 800d0da:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d0de:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800d0e2:	ee07 2a90 	vmov	s15, r2
 800d0e6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d0ea:	eea7 5b06 	vfma.f64	d5, d7, d6
 800d0ee:	ee15 2a90 	vmov	r2, s11
 800d0f2:	ec51 0b15 	vmov	r0, r1, d5
 800d0f6:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800d0fa:	2c00      	cmp	r4, #0
 800d0fc:	f040 8098 	bne.w	800d230 <_dtoa_r+0x4c0>
 800d100:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800d104:	ee36 6b47 	vsub.f64	d6, d6, d7
 800d108:	ec41 0b17 	vmov	d7, r0, r1
 800d10c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d114:	f300 8261 	bgt.w	800d5da <_dtoa_r+0x86a>
 800d118:	eeb1 7b47 	vneg.f64	d7, d7
 800d11c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d124:	f100 80f5 	bmi.w	800d312 <_dtoa_r+0x5a2>
 800d128:	ed8d 8b02 	vstr	d8, [sp, #8]
 800d12c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d12e:	2a00      	cmp	r2, #0
 800d130:	f2c0 812c 	blt.w	800d38c <_dtoa_r+0x61c>
 800d134:	f1b8 0f0e 	cmp.w	r8, #14
 800d138:	f300 8128 	bgt.w	800d38c <_dtoa_r+0x61c>
 800d13c:	4b91      	ldr	r3, [pc, #580]	@ (800d384 <_dtoa_r+0x614>)
 800d13e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d142:	ed93 6b00 	vldr	d6, [r3]
 800d146:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d148:	2b00      	cmp	r3, #0
 800d14a:	da03      	bge.n	800d154 <_dtoa_r+0x3e4>
 800d14c:	f1ba 0f00 	cmp.w	sl, #0
 800d150:	f340 80d2 	ble.w	800d2f8 <_dtoa_r+0x588>
 800d154:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800d158:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d15c:	463e      	mov	r6, r7
 800d15e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800d162:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800d166:	ee15 3a10 	vmov	r3, s10
 800d16a:	3330      	adds	r3, #48	@ 0x30
 800d16c:	f806 3b01 	strb.w	r3, [r6], #1
 800d170:	1bf3      	subs	r3, r6, r7
 800d172:	459a      	cmp	sl, r3
 800d174:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800d178:	eea3 7b46 	vfms.f64	d7, d3, d6
 800d17c:	f040 80f8 	bne.w	800d370 <_dtoa_r+0x600>
 800d180:	ee37 7b07 	vadd.f64	d7, d7, d7
 800d184:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d18c:	f300 80dd 	bgt.w	800d34a <_dtoa_r+0x5da>
 800d190:	eeb4 7b46 	vcmp.f64	d7, d6
 800d194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d198:	d104      	bne.n	800d1a4 <_dtoa_r+0x434>
 800d19a:	ee15 3a10 	vmov	r3, s10
 800d19e:	07db      	lsls	r3, r3, #31
 800d1a0:	f100 80d3 	bmi.w	800d34a <_dtoa_r+0x5da>
 800d1a4:	9901      	ldr	r1, [sp, #4]
 800d1a6:	4648      	mov	r0, r9
 800d1a8:	f000 fc78 	bl	800da9c <_Bfree>
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d1b0:	7033      	strb	r3, [r6, #0]
 800d1b2:	f108 0301 	add.w	r3, r8, #1
 800d1b6:	6013      	str	r3, [r2, #0]
 800d1b8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	f000 8304 	beq.w	800d7c8 <_dtoa_r+0xa58>
 800d1c0:	601e      	str	r6, [r3, #0]
 800d1c2:	e301      	b.n	800d7c8 <_dtoa_r+0xa58>
 800d1c4:	2202      	movs	r2, #2
 800d1c6:	e75e      	b.n	800d086 <_dtoa_r+0x316>
 800d1c8:	07cc      	lsls	r4, r1, #31
 800d1ca:	d504      	bpl.n	800d1d6 <_dtoa_r+0x466>
 800d1cc:	ed90 6b00 	vldr	d6, [r0]
 800d1d0:	3201      	adds	r2, #1
 800d1d2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d1d6:	1049      	asrs	r1, r1, #1
 800d1d8:	3008      	adds	r0, #8
 800d1da:	e755      	b.n	800d088 <_dtoa_r+0x318>
 800d1dc:	d022      	beq.n	800d224 <_dtoa_r+0x4b4>
 800d1de:	f1c8 0100 	rsb	r1, r8, #0
 800d1e2:	4a68      	ldr	r2, [pc, #416]	@ (800d384 <_dtoa_r+0x614>)
 800d1e4:	f001 000f 	and.w	r0, r1, #15
 800d1e8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800d1ec:	ed92 7b00 	vldr	d7, [r2]
 800d1f0:	ee28 7b07 	vmul.f64	d7, d8, d7
 800d1f4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d1f8:	4863      	ldr	r0, [pc, #396]	@ (800d388 <_dtoa_r+0x618>)
 800d1fa:	1109      	asrs	r1, r1, #4
 800d1fc:	2400      	movs	r4, #0
 800d1fe:	2202      	movs	r2, #2
 800d200:	b929      	cbnz	r1, 800d20e <_dtoa_r+0x49e>
 800d202:	2c00      	cmp	r4, #0
 800d204:	f43f af49 	beq.w	800d09a <_dtoa_r+0x32a>
 800d208:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d20c:	e745      	b.n	800d09a <_dtoa_r+0x32a>
 800d20e:	07ce      	lsls	r6, r1, #31
 800d210:	d505      	bpl.n	800d21e <_dtoa_r+0x4ae>
 800d212:	ed90 6b00 	vldr	d6, [r0]
 800d216:	3201      	adds	r2, #1
 800d218:	2401      	movs	r4, #1
 800d21a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d21e:	1049      	asrs	r1, r1, #1
 800d220:	3008      	adds	r0, #8
 800d222:	e7ed      	b.n	800d200 <_dtoa_r+0x490>
 800d224:	2202      	movs	r2, #2
 800d226:	e738      	b.n	800d09a <_dtoa_r+0x32a>
 800d228:	f8cd 8010 	str.w	r8, [sp, #16]
 800d22c:	4654      	mov	r4, sl
 800d22e:	e754      	b.n	800d0da <_dtoa_r+0x36a>
 800d230:	4a54      	ldr	r2, [pc, #336]	@ (800d384 <_dtoa_r+0x614>)
 800d232:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800d236:	ed12 4b02 	vldr	d4, [r2, #-8]
 800d23a:	9a08      	ldr	r2, [sp, #32]
 800d23c:	ec41 0b17 	vmov	d7, r0, r1
 800d240:	443c      	add	r4, r7
 800d242:	b34a      	cbz	r2, 800d298 <_dtoa_r+0x528>
 800d244:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800d248:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800d24c:	463e      	mov	r6, r7
 800d24e:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800d252:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800d256:	ee35 7b47 	vsub.f64	d7, d5, d7
 800d25a:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800d25e:	ee14 2a90 	vmov	r2, s9
 800d262:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800d266:	3230      	adds	r2, #48	@ 0x30
 800d268:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d26c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d274:	f806 2b01 	strb.w	r2, [r6], #1
 800d278:	d438      	bmi.n	800d2ec <_dtoa_r+0x57c>
 800d27a:	ee32 5b46 	vsub.f64	d5, d2, d6
 800d27e:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800d282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d286:	d462      	bmi.n	800d34e <_dtoa_r+0x5de>
 800d288:	42a6      	cmp	r6, r4
 800d28a:	f43f af4d 	beq.w	800d128 <_dtoa_r+0x3b8>
 800d28e:	ee27 7b03 	vmul.f64	d7, d7, d3
 800d292:	ee26 6b03 	vmul.f64	d6, d6, d3
 800d296:	e7e0      	b.n	800d25a <_dtoa_r+0x4ea>
 800d298:	4621      	mov	r1, r4
 800d29a:	463e      	mov	r6, r7
 800d29c:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d2a0:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800d2a4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800d2a8:	ee14 2a90 	vmov	r2, s9
 800d2ac:	3230      	adds	r2, #48	@ 0x30
 800d2ae:	f806 2b01 	strb.w	r2, [r6], #1
 800d2b2:	42a6      	cmp	r6, r4
 800d2b4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800d2b8:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d2bc:	d119      	bne.n	800d2f2 <_dtoa_r+0x582>
 800d2be:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800d2c2:	ee37 4b05 	vadd.f64	d4, d7, d5
 800d2c6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800d2ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2ce:	dc3e      	bgt.n	800d34e <_dtoa_r+0x5de>
 800d2d0:	ee35 5b47 	vsub.f64	d5, d5, d7
 800d2d4:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800d2d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2dc:	f57f af24 	bpl.w	800d128 <_dtoa_r+0x3b8>
 800d2e0:	460e      	mov	r6, r1
 800d2e2:	3901      	subs	r1, #1
 800d2e4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d2e8:	2b30      	cmp	r3, #48	@ 0x30
 800d2ea:	d0f9      	beq.n	800d2e0 <_dtoa_r+0x570>
 800d2ec:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800d2f0:	e758      	b.n	800d1a4 <_dtoa_r+0x434>
 800d2f2:	ee26 6b03 	vmul.f64	d6, d6, d3
 800d2f6:	e7d5      	b.n	800d2a4 <_dtoa_r+0x534>
 800d2f8:	d10b      	bne.n	800d312 <_dtoa_r+0x5a2>
 800d2fa:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800d2fe:	ee26 6b07 	vmul.f64	d6, d6, d7
 800d302:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d306:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d30a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d30e:	f2c0 8161 	blt.w	800d5d4 <_dtoa_r+0x864>
 800d312:	2400      	movs	r4, #0
 800d314:	4625      	mov	r5, r4
 800d316:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d318:	43db      	mvns	r3, r3
 800d31a:	9304      	str	r3, [sp, #16]
 800d31c:	463e      	mov	r6, r7
 800d31e:	f04f 0800 	mov.w	r8, #0
 800d322:	4621      	mov	r1, r4
 800d324:	4648      	mov	r0, r9
 800d326:	f000 fbb9 	bl	800da9c <_Bfree>
 800d32a:	2d00      	cmp	r5, #0
 800d32c:	d0de      	beq.n	800d2ec <_dtoa_r+0x57c>
 800d32e:	f1b8 0f00 	cmp.w	r8, #0
 800d332:	d005      	beq.n	800d340 <_dtoa_r+0x5d0>
 800d334:	45a8      	cmp	r8, r5
 800d336:	d003      	beq.n	800d340 <_dtoa_r+0x5d0>
 800d338:	4641      	mov	r1, r8
 800d33a:	4648      	mov	r0, r9
 800d33c:	f000 fbae 	bl	800da9c <_Bfree>
 800d340:	4629      	mov	r1, r5
 800d342:	4648      	mov	r0, r9
 800d344:	f000 fbaa 	bl	800da9c <_Bfree>
 800d348:	e7d0      	b.n	800d2ec <_dtoa_r+0x57c>
 800d34a:	f8cd 8010 	str.w	r8, [sp, #16]
 800d34e:	4633      	mov	r3, r6
 800d350:	461e      	mov	r6, r3
 800d352:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d356:	2a39      	cmp	r2, #57	@ 0x39
 800d358:	d106      	bne.n	800d368 <_dtoa_r+0x5f8>
 800d35a:	429f      	cmp	r7, r3
 800d35c:	d1f8      	bne.n	800d350 <_dtoa_r+0x5e0>
 800d35e:	9a04      	ldr	r2, [sp, #16]
 800d360:	3201      	adds	r2, #1
 800d362:	9204      	str	r2, [sp, #16]
 800d364:	2230      	movs	r2, #48	@ 0x30
 800d366:	703a      	strb	r2, [r7, #0]
 800d368:	781a      	ldrb	r2, [r3, #0]
 800d36a:	3201      	adds	r2, #1
 800d36c:	701a      	strb	r2, [r3, #0]
 800d36e:	e7bd      	b.n	800d2ec <_dtoa_r+0x57c>
 800d370:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d374:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d37c:	f47f aeef 	bne.w	800d15e <_dtoa_r+0x3ee>
 800d380:	e710      	b.n	800d1a4 <_dtoa_r+0x434>
 800d382:	bf00      	nop
 800d384:	0800ec70 	.word	0x0800ec70
 800d388:	0800ec48 	.word	0x0800ec48
 800d38c:	9908      	ldr	r1, [sp, #32]
 800d38e:	2900      	cmp	r1, #0
 800d390:	f000 80e3 	beq.w	800d55a <_dtoa_r+0x7ea>
 800d394:	9907      	ldr	r1, [sp, #28]
 800d396:	2901      	cmp	r1, #1
 800d398:	f300 80c8 	bgt.w	800d52c <_dtoa_r+0x7bc>
 800d39c:	2d00      	cmp	r5, #0
 800d39e:	f000 80c1 	beq.w	800d524 <_dtoa_r+0x7b4>
 800d3a2:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800d3a6:	9e05      	ldr	r6, [sp, #20]
 800d3a8:	461c      	mov	r4, r3
 800d3aa:	9304      	str	r3, [sp, #16]
 800d3ac:	9b05      	ldr	r3, [sp, #20]
 800d3ae:	4413      	add	r3, r2
 800d3b0:	9305      	str	r3, [sp, #20]
 800d3b2:	9b06      	ldr	r3, [sp, #24]
 800d3b4:	2101      	movs	r1, #1
 800d3b6:	4413      	add	r3, r2
 800d3b8:	4648      	mov	r0, r9
 800d3ba:	9306      	str	r3, [sp, #24]
 800d3bc:	f000 fc22 	bl	800dc04 <__i2b>
 800d3c0:	9b04      	ldr	r3, [sp, #16]
 800d3c2:	4605      	mov	r5, r0
 800d3c4:	b166      	cbz	r6, 800d3e0 <_dtoa_r+0x670>
 800d3c6:	9a06      	ldr	r2, [sp, #24]
 800d3c8:	2a00      	cmp	r2, #0
 800d3ca:	dd09      	ble.n	800d3e0 <_dtoa_r+0x670>
 800d3cc:	42b2      	cmp	r2, r6
 800d3ce:	9905      	ldr	r1, [sp, #20]
 800d3d0:	bfa8      	it	ge
 800d3d2:	4632      	movge	r2, r6
 800d3d4:	1a89      	subs	r1, r1, r2
 800d3d6:	9105      	str	r1, [sp, #20]
 800d3d8:	9906      	ldr	r1, [sp, #24]
 800d3da:	1ab6      	subs	r6, r6, r2
 800d3dc:	1a8a      	subs	r2, r1, r2
 800d3de:	9206      	str	r2, [sp, #24]
 800d3e0:	b1fb      	cbz	r3, 800d422 <_dtoa_r+0x6b2>
 800d3e2:	9a08      	ldr	r2, [sp, #32]
 800d3e4:	2a00      	cmp	r2, #0
 800d3e6:	f000 80bc 	beq.w	800d562 <_dtoa_r+0x7f2>
 800d3ea:	b19c      	cbz	r4, 800d414 <_dtoa_r+0x6a4>
 800d3ec:	4629      	mov	r1, r5
 800d3ee:	4622      	mov	r2, r4
 800d3f0:	4648      	mov	r0, r9
 800d3f2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d3f4:	f000 fcc6 	bl	800dd84 <__pow5mult>
 800d3f8:	9a01      	ldr	r2, [sp, #4]
 800d3fa:	4601      	mov	r1, r0
 800d3fc:	4605      	mov	r5, r0
 800d3fe:	4648      	mov	r0, r9
 800d400:	f000 fc16 	bl	800dc30 <__multiply>
 800d404:	9901      	ldr	r1, [sp, #4]
 800d406:	9004      	str	r0, [sp, #16]
 800d408:	4648      	mov	r0, r9
 800d40a:	f000 fb47 	bl	800da9c <_Bfree>
 800d40e:	9a04      	ldr	r2, [sp, #16]
 800d410:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d412:	9201      	str	r2, [sp, #4]
 800d414:	1b1a      	subs	r2, r3, r4
 800d416:	d004      	beq.n	800d422 <_dtoa_r+0x6b2>
 800d418:	9901      	ldr	r1, [sp, #4]
 800d41a:	4648      	mov	r0, r9
 800d41c:	f000 fcb2 	bl	800dd84 <__pow5mult>
 800d420:	9001      	str	r0, [sp, #4]
 800d422:	2101      	movs	r1, #1
 800d424:	4648      	mov	r0, r9
 800d426:	f000 fbed 	bl	800dc04 <__i2b>
 800d42a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d42c:	4604      	mov	r4, r0
 800d42e:	2b00      	cmp	r3, #0
 800d430:	f000 81d0 	beq.w	800d7d4 <_dtoa_r+0xa64>
 800d434:	461a      	mov	r2, r3
 800d436:	4601      	mov	r1, r0
 800d438:	4648      	mov	r0, r9
 800d43a:	f000 fca3 	bl	800dd84 <__pow5mult>
 800d43e:	9b07      	ldr	r3, [sp, #28]
 800d440:	2b01      	cmp	r3, #1
 800d442:	4604      	mov	r4, r0
 800d444:	f300 8095 	bgt.w	800d572 <_dtoa_r+0x802>
 800d448:	9b02      	ldr	r3, [sp, #8]
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	f040 808b 	bne.w	800d566 <_dtoa_r+0x7f6>
 800d450:	9b03      	ldr	r3, [sp, #12]
 800d452:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800d456:	2a00      	cmp	r2, #0
 800d458:	f040 8087 	bne.w	800d56a <_dtoa_r+0x7fa>
 800d45c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800d460:	0d12      	lsrs	r2, r2, #20
 800d462:	0512      	lsls	r2, r2, #20
 800d464:	2a00      	cmp	r2, #0
 800d466:	f000 8082 	beq.w	800d56e <_dtoa_r+0x7fe>
 800d46a:	9b05      	ldr	r3, [sp, #20]
 800d46c:	3301      	adds	r3, #1
 800d46e:	9305      	str	r3, [sp, #20]
 800d470:	9b06      	ldr	r3, [sp, #24]
 800d472:	3301      	adds	r3, #1
 800d474:	9306      	str	r3, [sp, #24]
 800d476:	2301      	movs	r3, #1
 800d478:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d47a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	f000 81af 	beq.w	800d7e0 <_dtoa_r+0xa70>
 800d482:	6922      	ldr	r2, [r4, #16]
 800d484:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800d488:	6910      	ldr	r0, [r2, #16]
 800d48a:	f000 fb6f 	bl	800db6c <__hi0bits>
 800d48e:	f1c0 0020 	rsb	r0, r0, #32
 800d492:	9b06      	ldr	r3, [sp, #24]
 800d494:	4418      	add	r0, r3
 800d496:	f010 001f 	ands.w	r0, r0, #31
 800d49a:	d076      	beq.n	800d58a <_dtoa_r+0x81a>
 800d49c:	f1c0 0220 	rsb	r2, r0, #32
 800d4a0:	2a04      	cmp	r2, #4
 800d4a2:	dd69      	ble.n	800d578 <_dtoa_r+0x808>
 800d4a4:	9b05      	ldr	r3, [sp, #20]
 800d4a6:	f1c0 001c 	rsb	r0, r0, #28
 800d4aa:	4403      	add	r3, r0
 800d4ac:	9305      	str	r3, [sp, #20]
 800d4ae:	9b06      	ldr	r3, [sp, #24]
 800d4b0:	4406      	add	r6, r0
 800d4b2:	4403      	add	r3, r0
 800d4b4:	9306      	str	r3, [sp, #24]
 800d4b6:	9b05      	ldr	r3, [sp, #20]
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	dd05      	ble.n	800d4c8 <_dtoa_r+0x758>
 800d4bc:	9901      	ldr	r1, [sp, #4]
 800d4be:	461a      	mov	r2, r3
 800d4c0:	4648      	mov	r0, r9
 800d4c2:	f000 fcb9 	bl	800de38 <__lshift>
 800d4c6:	9001      	str	r0, [sp, #4]
 800d4c8:	9b06      	ldr	r3, [sp, #24]
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	dd05      	ble.n	800d4da <_dtoa_r+0x76a>
 800d4ce:	4621      	mov	r1, r4
 800d4d0:	461a      	mov	r2, r3
 800d4d2:	4648      	mov	r0, r9
 800d4d4:	f000 fcb0 	bl	800de38 <__lshift>
 800d4d8:	4604      	mov	r4, r0
 800d4da:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d056      	beq.n	800d58e <_dtoa_r+0x81e>
 800d4e0:	9801      	ldr	r0, [sp, #4]
 800d4e2:	4621      	mov	r1, r4
 800d4e4:	f000 fd14 	bl	800df10 <__mcmp>
 800d4e8:	2800      	cmp	r0, #0
 800d4ea:	da50      	bge.n	800d58e <_dtoa_r+0x81e>
 800d4ec:	f108 33ff 	add.w	r3, r8, #4294967295
 800d4f0:	9304      	str	r3, [sp, #16]
 800d4f2:	9901      	ldr	r1, [sp, #4]
 800d4f4:	2300      	movs	r3, #0
 800d4f6:	220a      	movs	r2, #10
 800d4f8:	4648      	mov	r0, r9
 800d4fa:	f000 faf1 	bl	800dae0 <__multadd>
 800d4fe:	9b08      	ldr	r3, [sp, #32]
 800d500:	9001      	str	r0, [sp, #4]
 800d502:	2b00      	cmp	r3, #0
 800d504:	f000 816e 	beq.w	800d7e4 <_dtoa_r+0xa74>
 800d508:	4629      	mov	r1, r5
 800d50a:	2300      	movs	r3, #0
 800d50c:	220a      	movs	r2, #10
 800d50e:	4648      	mov	r0, r9
 800d510:	f000 fae6 	bl	800dae0 <__multadd>
 800d514:	f1bb 0f00 	cmp.w	fp, #0
 800d518:	4605      	mov	r5, r0
 800d51a:	dc64      	bgt.n	800d5e6 <_dtoa_r+0x876>
 800d51c:	9b07      	ldr	r3, [sp, #28]
 800d51e:	2b02      	cmp	r3, #2
 800d520:	dc3e      	bgt.n	800d5a0 <_dtoa_r+0x830>
 800d522:	e060      	b.n	800d5e6 <_dtoa_r+0x876>
 800d524:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d526:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800d52a:	e73c      	b.n	800d3a6 <_dtoa_r+0x636>
 800d52c:	f10a 34ff 	add.w	r4, sl, #4294967295
 800d530:	42a3      	cmp	r3, r4
 800d532:	bfbf      	itttt	lt
 800d534:	1ae2      	sublt	r2, r4, r3
 800d536:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800d538:	189b      	addlt	r3, r3, r2
 800d53a:	930a      	strlt	r3, [sp, #40]	@ 0x28
 800d53c:	bfae      	itee	ge
 800d53e:	1b1c      	subge	r4, r3, r4
 800d540:	4623      	movlt	r3, r4
 800d542:	2400      	movlt	r4, #0
 800d544:	f1ba 0f00 	cmp.w	sl, #0
 800d548:	bfb5      	itete	lt
 800d54a:	9a05      	ldrlt	r2, [sp, #20]
 800d54c:	9e05      	ldrge	r6, [sp, #20]
 800d54e:	eba2 060a 	sublt.w	r6, r2, sl
 800d552:	4652      	movge	r2, sl
 800d554:	bfb8      	it	lt
 800d556:	2200      	movlt	r2, #0
 800d558:	e727      	b.n	800d3aa <_dtoa_r+0x63a>
 800d55a:	9e05      	ldr	r6, [sp, #20]
 800d55c:	9d08      	ldr	r5, [sp, #32]
 800d55e:	461c      	mov	r4, r3
 800d560:	e730      	b.n	800d3c4 <_dtoa_r+0x654>
 800d562:	461a      	mov	r2, r3
 800d564:	e758      	b.n	800d418 <_dtoa_r+0x6a8>
 800d566:	2300      	movs	r3, #0
 800d568:	e786      	b.n	800d478 <_dtoa_r+0x708>
 800d56a:	9b02      	ldr	r3, [sp, #8]
 800d56c:	e784      	b.n	800d478 <_dtoa_r+0x708>
 800d56e:	920b      	str	r2, [sp, #44]	@ 0x2c
 800d570:	e783      	b.n	800d47a <_dtoa_r+0x70a>
 800d572:	2300      	movs	r3, #0
 800d574:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d576:	e784      	b.n	800d482 <_dtoa_r+0x712>
 800d578:	d09d      	beq.n	800d4b6 <_dtoa_r+0x746>
 800d57a:	9b05      	ldr	r3, [sp, #20]
 800d57c:	321c      	adds	r2, #28
 800d57e:	4413      	add	r3, r2
 800d580:	9305      	str	r3, [sp, #20]
 800d582:	9b06      	ldr	r3, [sp, #24]
 800d584:	4416      	add	r6, r2
 800d586:	4413      	add	r3, r2
 800d588:	e794      	b.n	800d4b4 <_dtoa_r+0x744>
 800d58a:	4602      	mov	r2, r0
 800d58c:	e7f5      	b.n	800d57a <_dtoa_r+0x80a>
 800d58e:	f1ba 0f00 	cmp.w	sl, #0
 800d592:	f8cd 8010 	str.w	r8, [sp, #16]
 800d596:	46d3      	mov	fp, sl
 800d598:	dc21      	bgt.n	800d5de <_dtoa_r+0x86e>
 800d59a:	9b07      	ldr	r3, [sp, #28]
 800d59c:	2b02      	cmp	r3, #2
 800d59e:	dd1e      	ble.n	800d5de <_dtoa_r+0x86e>
 800d5a0:	f1bb 0f00 	cmp.w	fp, #0
 800d5a4:	f47f aeb7 	bne.w	800d316 <_dtoa_r+0x5a6>
 800d5a8:	4621      	mov	r1, r4
 800d5aa:	465b      	mov	r3, fp
 800d5ac:	2205      	movs	r2, #5
 800d5ae:	4648      	mov	r0, r9
 800d5b0:	f000 fa96 	bl	800dae0 <__multadd>
 800d5b4:	4601      	mov	r1, r0
 800d5b6:	4604      	mov	r4, r0
 800d5b8:	9801      	ldr	r0, [sp, #4]
 800d5ba:	f000 fca9 	bl	800df10 <__mcmp>
 800d5be:	2800      	cmp	r0, #0
 800d5c0:	f77f aea9 	ble.w	800d316 <_dtoa_r+0x5a6>
 800d5c4:	463e      	mov	r6, r7
 800d5c6:	2331      	movs	r3, #49	@ 0x31
 800d5c8:	f806 3b01 	strb.w	r3, [r6], #1
 800d5cc:	9b04      	ldr	r3, [sp, #16]
 800d5ce:	3301      	adds	r3, #1
 800d5d0:	9304      	str	r3, [sp, #16]
 800d5d2:	e6a4      	b.n	800d31e <_dtoa_r+0x5ae>
 800d5d4:	f8cd 8010 	str.w	r8, [sp, #16]
 800d5d8:	4654      	mov	r4, sl
 800d5da:	4625      	mov	r5, r4
 800d5dc:	e7f2      	b.n	800d5c4 <_dtoa_r+0x854>
 800d5de:	9b08      	ldr	r3, [sp, #32]
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	f000 8103 	beq.w	800d7ec <_dtoa_r+0xa7c>
 800d5e6:	2e00      	cmp	r6, #0
 800d5e8:	dd05      	ble.n	800d5f6 <_dtoa_r+0x886>
 800d5ea:	4629      	mov	r1, r5
 800d5ec:	4632      	mov	r2, r6
 800d5ee:	4648      	mov	r0, r9
 800d5f0:	f000 fc22 	bl	800de38 <__lshift>
 800d5f4:	4605      	mov	r5, r0
 800d5f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d058      	beq.n	800d6ae <_dtoa_r+0x93e>
 800d5fc:	6869      	ldr	r1, [r5, #4]
 800d5fe:	4648      	mov	r0, r9
 800d600:	f000 fa0c 	bl	800da1c <_Balloc>
 800d604:	4606      	mov	r6, r0
 800d606:	b928      	cbnz	r0, 800d614 <_dtoa_r+0x8a4>
 800d608:	4b82      	ldr	r3, [pc, #520]	@ (800d814 <_dtoa_r+0xaa4>)
 800d60a:	4602      	mov	r2, r0
 800d60c:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800d610:	f7ff bbc7 	b.w	800cda2 <_dtoa_r+0x32>
 800d614:	692a      	ldr	r2, [r5, #16]
 800d616:	3202      	adds	r2, #2
 800d618:	0092      	lsls	r2, r2, #2
 800d61a:	f105 010c 	add.w	r1, r5, #12
 800d61e:	300c      	adds	r0, #12
 800d620:	f000 fe3a 	bl	800e298 <memcpy>
 800d624:	2201      	movs	r2, #1
 800d626:	4631      	mov	r1, r6
 800d628:	4648      	mov	r0, r9
 800d62a:	f000 fc05 	bl	800de38 <__lshift>
 800d62e:	1c7b      	adds	r3, r7, #1
 800d630:	9305      	str	r3, [sp, #20]
 800d632:	eb07 030b 	add.w	r3, r7, fp
 800d636:	9309      	str	r3, [sp, #36]	@ 0x24
 800d638:	9b02      	ldr	r3, [sp, #8]
 800d63a:	f003 0301 	and.w	r3, r3, #1
 800d63e:	46a8      	mov	r8, r5
 800d640:	9308      	str	r3, [sp, #32]
 800d642:	4605      	mov	r5, r0
 800d644:	9b05      	ldr	r3, [sp, #20]
 800d646:	9801      	ldr	r0, [sp, #4]
 800d648:	4621      	mov	r1, r4
 800d64a:	f103 3bff 	add.w	fp, r3, #4294967295
 800d64e:	f7ff fb04 	bl	800cc5a <quorem>
 800d652:	4641      	mov	r1, r8
 800d654:	9002      	str	r0, [sp, #8]
 800d656:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800d65a:	9801      	ldr	r0, [sp, #4]
 800d65c:	f000 fc58 	bl	800df10 <__mcmp>
 800d660:	462a      	mov	r2, r5
 800d662:	9006      	str	r0, [sp, #24]
 800d664:	4621      	mov	r1, r4
 800d666:	4648      	mov	r0, r9
 800d668:	f000 fc6e 	bl	800df48 <__mdiff>
 800d66c:	68c2      	ldr	r2, [r0, #12]
 800d66e:	4606      	mov	r6, r0
 800d670:	b9fa      	cbnz	r2, 800d6b2 <_dtoa_r+0x942>
 800d672:	4601      	mov	r1, r0
 800d674:	9801      	ldr	r0, [sp, #4]
 800d676:	f000 fc4b 	bl	800df10 <__mcmp>
 800d67a:	4602      	mov	r2, r0
 800d67c:	4631      	mov	r1, r6
 800d67e:	4648      	mov	r0, r9
 800d680:	920a      	str	r2, [sp, #40]	@ 0x28
 800d682:	f000 fa0b 	bl	800da9c <_Bfree>
 800d686:	9b07      	ldr	r3, [sp, #28]
 800d688:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d68a:	9e05      	ldr	r6, [sp, #20]
 800d68c:	ea43 0102 	orr.w	r1, r3, r2
 800d690:	9b08      	ldr	r3, [sp, #32]
 800d692:	4319      	orrs	r1, r3
 800d694:	d10f      	bne.n	800d6b6 <_dtoa_r+0x946>
 800d696:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800d69a:	d028      	beq.n	800d6ee <_dtoa_r+0x97e>
 800d69c:	9b06      	ldr	r3, [sp, #24]
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	dd02      	ble.n	800d6a8 <_dtoa_r+0x938>
 800d6a2:	9b02      	ldr	r3, [sp, #8]
 800d6a4:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800d6a8:	f88b a000 	strb.w	sl, [fp]
 800d6ac:	e639      	b.n	800d322 <_dtoa_r+0x5b2>
 800d6ae:	4628      	mov	r0, r5
 800d6b0:	e7bd      	b.n	800d62e <_dtoa_r+0x8be>
 800d6b2:	2201      	movs	r2, #1
 800d6b4:	e7e2      	b.n	800d67c <_dtoa_r+0x90c>
 800d6b6:	9b06      	ldr	r3, [sp, #24]
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	db04      	blt.n	800d6c6 <_dtoa_r+0x956>
 800d6bc:	9907      	ldr	r1, [sp, #28]
 800d6be:	430b      	orrs	r3, r1
 800d6c0:	9908      	ldr	r1, [sp, #32]
 800d6c2:	430b      	orrs	r3, r1
 800d6c4:	d120      	bne.n	800d708 <_dtoa_r+0x998>
 800d6c6:	2a00      	cmp	r2, #0
 800d6c8:	ddee      	ble.n	800d6a8 <_dtoa_r+0x938>
 800d6ca:	9901      	ldr	r1, [sp, #4]
 800d6cc:	2201      	movs	r2, #1
 800d6ce:	4648      	mov	r0, r9
 800d6d0:	f000 fbb2 	bl	800de38 <__lshift>
 800d6d4:	4621      	mov	r1, r4
 800d6d6:	9001      	str	r0, [sp, #4]
 800d6d8:	f000 fc1a 	bl	800df10 <__mcmp>
 800d6dc:	2800      	cmp	r0, #0
 800d6de:	dc03      	bgt.n	800d6e8 <_dtoa_r+0x978>
 800d6e0:	d1e2      	bne.n	800d6a8 <_dtoa_r+0x938>
 800d6e2:	f01a 0f01 	tst.w	sl, #1
 800d6e6:	d0df      	beq.n	800d6a8 <_dtoa_r+0x938>
 800d6e8:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800d6ec:	d1d9      	bne.n	800d6a2 <_dtoa_r+0x932>
 800d6ee:	2339      	movs	r3, #57	@ 0x39
 800d6f0:	f88b 3000 	strb.w	r3, [fp]
 800d6f4:	4633      	mov	r3, r6
 800d6f6:	461e      	mov	r6, r3
 800d6f8:	3b01      	subs	r3, #1
 800d6fa:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d6fe:	2a39      	cmp	r2, #57	@ 0x39
 800d700:	d053      	beq.n	800d7aa <_dtoa_r+0xa3a>
 800d702:	3201      	adds	r2, #1
 800d704:	701a      	strb	r2, [r3, #0]
 800d706:	e60c      	b.n	800d322 <_dtoa_r+0x5b2>
 800d708:	2a00      	cmp	r2, #0
 800d70a:	dd07      	ble.n	800d71c <_dtoa_r+0x9ac>
 800d70c:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800d710:	d0ed      	beq.n	800d6ee <_dtoa_r+0x97e>
 800d712:	f10a 0301 	add.w	r3, sl, #1
 800d716:	f88b 3000 	strb.w	r3, [fp]
 800d71a:	e602      	b.n	800d322 <_dtoa_r+0x5b2>
 800d71c:	9b05      	ldr	r3, [sp, #20]
 800d71e:	9a05      	ldr	r2, [sp, #20]
 800d720:	f803 ac01 	strb.w	sl, [r3, #-1]
 800d724:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d726:	4293      	cmp	r3, r2
 800d728:	d029      	beq.n	800d77e <_dtoa_r+0xa0e>
 800d72a:	9901      	ldr	r1, [sp, #4]
 800d72c:	2300      	movs	r3, #0
 800d72e:	220a      	movs	r2, #10
 800d730:	4648      	mov	r0, r9
 800d732:	f000 f9d5 	bl	800dae0 <__multadd>
 800d736:	45a8      	cmp	r8, r5
 800d738:	9001      	str	r0, [sp, #4]
 800d73a:	f04f 0300 	mov.w	r3, #0
 800d73e:	f04f 020a 	mov.w	r2, #10
 800d742:	4641      	mov	r1, r8
 800d744:	4648      	mov	r0, r9
 800d746:	d107      	bne.n	800d758 <_dtoa_r+0x9e8>
 800d748:	f000 f9ca 	bl	800dae0 <__multadd>
 800d74c:	4680      	mov	r8, r0
 800d74e:	4605      	mov	r5, r0
 800d750:	9b05      	ldr	r3, [sp, #20]
 800d752:	3301      	adds	r3, #1
 800d754:	9305      	str	r3, [sp, #20]
 800d756:	e775      	b.n	800d644 <_dtoa_r+0x8d4>
 800d758:	f000 f9c2 	bl	800dae0 <__multadd>
 800d75c:	4629      	mov	r1, r5
 800d75e:	4680      	mov	r8, r0
 800d760:	2300      	movs	r3, #0
 800d762:	220a      	movs	r2, #10
 800d764:	4648      	mov	r0, r9
 800d766:	f000 f9bb 	bl	800dae0 <__multadd>
 800d76a:	4605      	mov	r5, r0
 800d76c:	e7f0      	b.n	800d750 <_dtoa_r+0x9e0>
 800d76e:	f1bb 0f00 	cmp.w	fp, #0
 800d772:	bfcc      	ite	gt
 800d774:	465e      	movgt	r6, fp
 800d776:	2601      	movle	r6, #1
 800d778:	443e      	add	r6, r7
 800d77a:	f04f 0800 	mov.w	r8, #0
 800d77e:	9901      	ldr	r1, [sp, #4]
 800d780:	2201      	movs	r2, #1
 800d782:	4648      	mov	r0, r9
 800d784:	f000 fb58 	bl	800de38 <__lshift>
 800d788:	4621      	mov	r1, r4
 800d78a:	9001      	str	r0, [sp, #4]
 800d78c:	f000 fbc0 	bl	800df10 <__mcmp>
 800d790:	2800      	cmp	r0, #0
 800d792:	dcaf      	bgt.n	800d6f4 <_dtoa_r+0x984>
 800d794:	d102      	bne.n	800d79c <_dtoa_r+0xa2c>
 800d796:	f01a 0f01 	tst.w	sl, #1
 800d79a:	d1ab      	bne.n	800d6f4 <_dtoa_r+0x984>
 800d79c:	4633      	mov	r3, r6
 800d79e:	461e      	mov	r6, r3
 800d7a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d7a4:	2a30      	cmp	r2, #48	@ 0x30
 800d7a6:	d0fa      	beq.n	800d79e <_dtoa_r+0xa2e>
 800d7a8:	e5bb      	b.n	800d322 <_dtoa_r+0x5b2>
 800d7aa:	429f      	cmp	r7, r3
 800d7ac:	d1a3      	bne.n	800d6f6 <_dtoa_r+0x986>
 800d7ae:	9b04      	ldr	r3, [sp, #16]
 800d7b0:	3301      	adds	r3, #1
 800d7b2:	9304      	str	r3, [sp, #16]
 800d7b4:	2331      	movs	r3, #49	@ 0x31
 800d7b6:	703b      	strb	r3, [r7, #0]
 800d7b8:	e5b3      	b.n	800d322 <_dtoa_r+0x5b2>
 800d7ba:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d7bc:	4f16      	ldr	r7, [pc, #88]	@ (800d818 <_dtoa_r+0xaa8>)
 800d7be:	b11b      	cbz	r3, 800d7c8 <_dtoa_r+0xa58>
 800d7c0:	f107 0308 	add.w	r3, r7, #8
 800d7c4:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800d7c6:	6013      	str	r3, [r2, #0]
 800d7c8:	4638      	mov	r0, r7
 800d7ca:	b011      	add	sp, #68	@ 0x44
 800d7cc:	ecbd 8b02 	vpop	{d8}
 800d7d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7d4:	9b07      	ldr	r3, [sp, #28]
 800d7d6:	2b01      	cmp	r3, #1
 800d7d8:	f77f ae36 	ble.w	800d448 <_dtoa_r+0x6d8>
 800d7dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d7de:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d7e0:	2001      	movs	r0, #1
 800d7e2:	e656      	b.n	800d492 <_dtoa_r+0x722>
 800d7e4:	f1bb 0f00 	cmp.w	fp, #0
 800d7e8:	f77f aed7 	ble.w	800d59a <_dtoa_r+0x82a>
 800d7ec:	463e      	mov	r6, r7
 800d7ee:	9801      	ldr	r0, [sp, #4]
 800d7f0:	4621      	mov	r1, r4
 800d7f2:	f7ff fa32 	bl	800cc5a <quorem>
 800d7f6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800d7fa:	f806 ab01 	strb.w	sl, [r6], #1
 800d7fe:	1bf2      	subs	r2, r6, r7
 800d800:	4593      	cmp	fp, r2
 800d802:	ddb4      	ble.n	800d76e <_dtoa_r+0x9fe>
 800d804:	9901      	ldr	r1, [sp, #4]
 800d806:	2300      	movs	r3, #0
 800d808:	220a      	movs	r2, #10
 800d80a:	4648      	mov	r0, r9
 800d80c:	f000 f968 	bl	800dae0 <__multadd>
 800d810:	9001      	str	r0, [sp, #4]
 800d812:	e7ec      	b.n	800d7ee <_dtoa_r+0xa7e>
 800d814:	0800ebd0 	.word	0x0800ebd0
 800d818:	0800eb54 	.word	0x0800eb54

0800d81c <_free_r>:
 800d81c:	b538      	push	{r3, r4, r5, lr}
 800d81e:	4605      	mov	r5, r0
 800d820:	2900      	cmp	r1, #0
 800d822:	d041      	beq.n	800d8a8 <_free_r+0x8c>
 800d824:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d828:	1f0c      	subs	r4, r1, #4
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	bfb8      	it	lt
 800d82e:	18e4      	addlt	r4, r4, r3
 800d830:	f000 f8e8 	bl	800da04 <__malloc_lock>
 800d834:	4a1d      	ldr	r2, [pc, #116]	@ (800d8ac <_free_r+0x90>)
 800d836:	6813      	ldr	r3, [r2, #0]
 800d838:	b933      	cbnz	r3, 800d848 <_free_r+0x2c>
 800d83a:	6063      	str	r3, [r4, #4]
 800d83c:	6014      	str	r4, [r2, #0]
 800d83e:	4628      	mov	r0, r5
 800d840:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d844:	f000 b8e4 	b.w	800da10 <__malloc_unlock>
 800d848:	42a3      	cmp	r3, r4
 800d84a:	d908      	bls.n	800d85e <_free_r+0x42>
 800d84c:	6820      	ldr	r0, [r4, #0]
 800d84e:	1821      	adds	r1, r4, r0
 800d850:	428b      	cmp	r3, r1
 800d852:	bf01      	itttt	eq
 800d854:	6819      	ldreq	r1, [r3, #0]
 800d856:	685b      	ldreq	r3, [r3, #4]
 800d858:	1809      	addeq	r1, r1, r0
 800d85a:	6021      	streq	r1, [r4, #0]
 800d85c:	e7ed      	b.n	800d83a <_free_r+0x1e>
 800d85e:	461a      	mov	r2, r3
 800d860:	685b      	ldr	r3, [r3, #4]
 800d862:	b10b      	cbz	r3, 800d868 <_free_r+0x4c>
 800d864:	42a3      	cmp	r3, r4
 800d866:	d9fa      	bls.n	800d85e <_free_r+0x42>
 800d868:	6811      	ldr	r1, [r2, #0]
 800d86a:	1850      	adds	r0, r2, r1
 800d86c:	42a0      	cmp	r0, r4
 800d86e:	d10b      	bne.n	800d888 <_free_r+0x6c>
 800d870:	6820      	ldr	r0, [r4, #0]
 800d872:	4401      	add	r1, r0
 800d874:	1850      	adds	r0, r2, r1
 800d876:	4283      	cmp	r3, r0
 800d878:	6011      	str	r1, [r2, #0]
 800d87a:	d1e0      	bne.n	800d83e <_free_r+0x22>
 800d87c:	6818      	ldr	r0, [r3, #0]
 800d87e:	685b      	ldr	r3, [r3, #4]
 800d880:	6053      	str	r3, [r2, #4]
 800d882:	4408      	add	r0, r1
 800d884:	6010      	str	r0, [r2, #0]
 800d886:	e7da      	b.n	800d83e <_free_r+0x22>
 800d888:	d902      	bls.n	800d890 <_free_r+0x74>
 800d88a:	230c      	movs	r3, #12
 800d88c:	602b      	str	r3, [r5, #0]
 800d88e:	e7d6      	b.n	800d83e <_free_r+0x22>
 800d890:	6820      	ldr	r0, [r4, #0]
 800d892:	1821      	adds	r1, r4, r0
 800d894:	428b      	cmp	r3, r1
 800d896:	bf04      	itt	eq
 800d898:	6819      	ldreq	r1, [r3, #0]
 800d89a:	685b      	ldreq	r3, [r3, #4]
 800d89c:	6063      	str	r3, [r4, #4]
 800d89e:	bf04      	itt	eq
 800d8a0:	1809      	addeq	r1, r1, r0
 800d8a2:	6021      	streq	r1, [r4, #0]
 800d8a4:	6054      	str	r4, [r2, #4]
 800d8a6:	e7ca      	b.n	800d83e <_free_r+0x22>
 800d8a8:	bd38      	pop	{r3, r4, r5, pc}
 800d8aa:	bf00      	nop
 800d8ac:	24000738 	.word	0x24000738

0800d8b0 <malloc>:
 800d8b0:	4b02      	ldr	r3, [pc, #8]	@ (800d8bc <malloc+0xc>)
 800d8b2:	4601      	mov	r1, r0
 800d8b4:	6818      	ldr	r0, [r3, #0]
 800d8b6:	f000 b825 	b.w	800d904 <_malloc_r>
 800d8ba:	bf00      	nop
 800d8bc:	2400001c 	.word	0x2400001c

0800d8c0 <sbrk_aligned>:
 800d8c0:	b570      	push	{r4, r5, r6, lr}
 800d8c2:	4e0f      	ldr	r6, [pc, #60]	@ (800d900 <sbrk_aligned+0x40>)
 800d8c4:	460c      	mov	r4, r1
 800d8c6:	6831      	ldr	r1, [r6, #0]
 800d8c8:	4605      	mov	r5, r0
 800d8ca:	b911      	cbnz	r1, 800d8d2 <sbrk_aligned+0x12>
 800d8cc:	f000 fcd4 	bl	800e278 <_sbrk_r>
 800d8d0:	6030      	str	r0, [r6, #0]
 800d8d2:	4621      	mov	r1, r4
 800d8d4:	4628      	mov	r0, r5
 800d8d6:	f000 fccf 	bl	800e278 <_sbrk_r>
 800d8da:	1c43      	adds	r3, r0, #1
 800d8dc:	d103      	bne.n	800d8e6 <sbrk_aligned+0x26>
 800d8de:	f04f 34ff 	mov.w	r4, #4294967295
 800d8e2:	4620      	mov	r0, r4
 800d8e4:	bd70      	pop	{r4, r5, r6, pc}
 800d8e6:	1cc4      	adds	r4, r0, #3
 800d8e8:	f024 0403 	bic.w	r4, r4, #3
 800d8ec:	42a0      	cmp	r0, r4
 800d8ee:	d0f8      	beq.n	800d8e2 <sbrk_aligned+0x22>
 800d8f0:	1a21      	subs	r1, r4, r0
 800d8f2:	4628      	mov	r0, r5
 800d8f4:	f000 fcc0 	bl	800e278 <_sbrk_r>
 800d8f8:	3001      	adds	r0, #1
 800d8fa:	d1f2      	bne.n	800d8e2 <sbrk_aligned+0x22>
 800d8fc:	e7ef      	b.n	800d8de <sbrk_aligned+0x1e>
 800d8fe:	bf00      	nop
 800d900:	24000734 	.word	0x24000734

0800d904 <_malloc_r>:
 800d904:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d908:	1ccd      	adds	r5, r1, #3
 800d90a:	f025 0503 	bic.w	r5, r5, #3
 800d90e:	3508      	adds	r5, #8
 800d910:	2d0c      	cmp	r5, #12
 800d912:	bf38      	it	cc
 800d914:	250c      	movcc	r5, #12
 800d916:	2d00      	cmp	r5, #0
 800d918:	4606      	mov	r6, r0
 800d91a:	db01      	blt.n	800d920 <_malloc_r+0x1c>
 800d91c:	42a9      	cmp	r1, r5
 800d91e:	d904      	bls.n	800d92a <_malloc_r+0x26>
 800d920:	230c      	movs	r3, #12
 800d922:	6033      	str	r3, [r6, #0]
 800d924:	2000      	movs	r0, #0
 800d926:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d92a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800da00 <_malloc_r+0xfc>
 800d92e:	f000 f869 	bl	800da04 <__malloc_lock>
 800d932:	f8d8 3000 	ldr.w	r3, [r8]
 800d936:	461c      	mov	r4, r3
 800d938:	bb44      	cbnz	r4, 800d98c <_malloc_r+0x88>
 800d93a:	4629      	mov	r1, r5
 800d93c:	4630      	mov	r0, r6
 800d93e:	f7ff ffbf 	bl	800d8c0 <sbrk_aligned>
 800d942:	1c43      	adds	r3, r0, #1
 800d944:	4604      	mov	r4, r0
 800d946:	d158      	bne.n	800d9fa <_malloc_r+0xf6>
 800d948:	f8d8 4000 	ldr.w	r4, [r8]
 800d94c:	4627      	mov	r7, r4
 800d94e:	2f00      	cmp	r7, #0
 800d950:	d143      	bne.n	800d9da <_malloc_r+0xd6>
 800d952:	2c00      	cmp	r4, #0
 800d954:	d04b      	beq.n	800d9ee <_malloc_r+0xea>
 800d956:	6823      	ldr	r3, [r4, #0]
 800d958:	4639      	mov	r1, r7
 800d95a:	4630      	mov	r0, r6
 800d95c:	eb04 0903 	add.w	r9, r4, r3
 800d960:	f000 fc8a 	bl	800e278 <_sbrk_r>
 800d964:	4581      	cmp	r9, r0
 800d966:	d142      	bne.n	800d9ee <_malloc_r+0xea>
 800d968:	6821      	ldr	r1, [r4, #0]
 800d96a:	1a6d      	subs	r5, r5, r1
 800d96c:	4629      	mov	r1, r5
 800d96e:	4630      	mov	r0, r6
 800d970:	f7ff ffa6 	bl	800d8c0 <sbrk_aligned>
 800d974:	3001      	adds	r0, #1
 800d976:	d03a      	beq.n	800d9ee <_malloc_r+0xea>
 800d978:	6823      	ldr	r3, [r4, #0]
 800d97a:	442b      	add	r3, r5
 800d97c:	6023      	str	r3, [r4, #0]
 800d97e:	f8d8 3000 	ldr.w	r3, [r8]
 800d982:	685a      	ldr	r2, [r3, #4]
 800d984:	bb62      	cbnz	r2, 800d9e0 <_malloc_r+0xdc>
 800d986:	f8c8 7000 	str.w	r7, [r8]
 800d98a:	e00f      	b.n	800d9ac <_malloc_r+0xa8>
 800d98c:	6822      	ldr	r2, [r4, #0]
 800d98e:	1b52      	subs	r2, r2, r5
 800d990:	d420      	bmi.n	800d9d4 <_malloc_r+0xd0>
 800d992:	2a0b      	cmp	r2, #11
 800d994:	d917      	bls.n	800d9c6 <_malloc_r+0xc2>
 800d996:	1961      	adds	r1, r4, r5
 800d998:	42a3      	cmp	r3, r4
 800d99a:	6025      	str	r5, [r4, #0]
 800d99c:	bf18      	it	ne
 800d99e:	6059      	strne	r1, [r3, #4]
 800d9a0:	6863      	ldr	r3, [r4, #4]
 800d9a2:	bf08      	it	eq
 800d9a4:	f8c8 1000 	streq.w	r1, [r8]
 800d9a8:	5162      	str	r2, [r4, r5]
 800d9aa:	604b      	str	r3, [r1, #4]
 800d9ac:	4630      	mov	r0, r6
 800d9ae:	f000 f82f 	bl	800da10 <__malloc_unlock>
 800d9b2:	f104 000b 	add.w	r0, r4, #11
 800d9b6:	1d23      	adds	r3, r4, #4
 800d9b8:	f020 0007 	bic.w	r0, r0, #7
 800d9bc:	1ac2      	subs	r2, r0, r3
 800d9be:	bf1c      	itt	ne
 800d9c0:	1a1b      	subne	r3, r3, r0
 800d9c2:	50a3      	strne	r3, [r4, r2]
 800d9c4:	e7af      	b.n	800d926 <_malloc_r+0x22>
 800d9c6:	6862      	ldr	r2, [r4, #4]
 800d9c8:	42a3      	cmp	r3, r4
 800d9ca:	bf0c      	ite	eq
 800d9cc:	f8c8 2000 	streq.w	r2, [r8]
 800d9d0:	605a      	strne	r2, [r3, #4]
 800d9d2:	e7eb      	b.n	800d9ac <_malloc_r+0xa8>
 800d9d4:	4623      	mov	r3, r4
 800d9d6:	6864      	ldr	r4, [r4, #4]
 800d9d8:	e7ae      	b.n	800d938 <_malloc_r+0x34>
 800d9da:	463c      	mov	r4, r7
 800d9dc:	687f      	ldr	r7, [r7, #4]
 800d9de:	e7b6      	b.n	800d94e <_malloc_r+0x4a>
 800d9e0:	461a      	mov	r2, r3
 800d9e2:	685b      	ldr	r3, [r3, #4]
 800d9e4:	42a3      	cmp	r3, r4
 800d9e6:	d1fb      	bne.n	800d9e0 <_malloc_r+0xdc>
 800d9e8:	2300      	movs	r3, #0
 800d9ea:	6053      	str	r3, [r2, #4]
 800d9ec:	e7de      	b.n	800d9ac <_malloc_r+0xa8>
 800d9ee:	230c      	movs	r3, #12
 800d9f0:	6033      	str	r3, [r6, #0]
 800d9f2:	4630      	mov	r0, r6
 800d9f4:	f000 f80c 	bl	800da10 <__malloc_unlock>
 800d9f8:	e794      	b.n	800d924 <_malloc_r+0x20>
 800d9fa:	6005      	str	r5, [r0, #0]
 800d9fc:	e7d6      	b.n	800d9ac <_malloc_r+0xa8>
 800d9fe:	bf00      	nop
 800da00:	24000738 	.word	0x24000738

0800da04 <__malloc_lock>:
 800da04:	4801      	ldr	r0, [pc, #4]	@ (800da0c <__malloc_lock+0x8>)
 800da06:	f7ff b926 	b.w	800cc56 <__retarget_lock_acquire_recursive>
 800da0a:	bf00      	nop
 800da0c:	24000730 	.word	0x24000730

0800da10 <__malloc_unlock>:
 800da10:	4801      	ldr	r0, [pc, #4]	@ (800da18 <__malloc_unlock+0x8>)
 800da12:	f7ff b921 	b.w	800cc58 <__retarget_lock_release_recursive>
 800da16:	bf00      	nop
 800da18:	24000730 	.word	0x24000730

0800da1c <_Balloc>:
 800da1c:	b570      	push	{r4, r5, r6, lr}
 800da1e:	69c6      	ldr	r6, [r0, #28]
 800da20:	4604      	mov	r4, r0
 800da22:	460d      	mov	r5, r1
 800da24:	b976      	cbnz	r6, 800da44 <_Balloc+0x28>
 800da26:	2010      	movs	r0, #16
 800da28:	f7ff ff42 	bl	800d8b0 <malloc>
 800da2c:	4602      	mov	r2, r0
 800da2e:	61e0      	str	r0, [r4, #28]
 800da30:	b920      	cbnz	r0, 800da3c <_Balloc+0x20>
 800da32:	4b18      	ldr	r3, [pc, #96]	@ (800da94 <_Balloc+0x78>)
 800da34:	4818      	ldr	r0, [pc, #96]	@ (800da98 <_Balloc+0x7c>)
 800da36:	216b      	movs	r1, #107	@ 0x6b
 800da38:	f000 fc3c 	bl	800e2b4 <__assert_func>
 800da3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800da40:	6006      	str	r6, [r0, #0]
 800da42:	60c6      	str	r6, [r0, #12]
 800da44:	69e6      	ldr	r6, [r4, #28]
 800da46:	68f3      	ldr	r3, [r6, #12]
 800da48:	b183      	cbz	r3, 800da6c <_Balloc+0x50>
 800da4a:	69e3      	ldr	r3, [r4, #28]
 800da4c:	68db      	ldr	r3, [r3, #12]
 800da4e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800da52:	b9b8      	cbnz	r0, 800da84 <_Balloc+0x68>
 800da54:	2101      	movs	r1, #1
 800da56:	fa01 f605 	lsl.w	r6, r1, r5
 800da5a:	1d72      	adds	r2, r6, #5
 800da5c:	0092      	lsls	r2, r2, #2
 800da5e:	4620      	mov	r0, r4
 800da60:	f000 fc46 	bl	800e2f0 <_calloc_r>
 800da64:	b160      	cbz	r0, 800da80 <_Balloc+0x64>
 800da66:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800da6a:	e00e      	b.n	800da8a <_Balloc+0x6e>
 800da6c:	2221      	movs	r2, #33	@ 0x21
 800da6e:	2104      	movs	r1, #4
 800da70:	4620      	mov	r0, r4
 800da72:	f000 fc3d 	bl	800e2f0 <_calloc_r>
 800da76:	69e3      	ldr	r3, [r4, #28]
 800da78:	60f0      	str	r0, [r6, #12]
 800da7a:	68db      	ldr	r3, [r3, #12]
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d1e4      	bne.n	800da4a <_Balloc+0x2e>
 800da80:	2000      	movs	r0, #0
 800da82:	bd70      	pop	{r4, r5, r6, pc}
 800da84:	6802      	ldr	r2, [r0, #0]
 800da86:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800da8a:	2300      	movs	r3, #0
 800da8c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800da90:	e7f7      	b.n	800da82 <_Balloc+0x66>
 800da92:	bf00      	nop
 800da94:	0800eb61 	.word	0x0800eb61
 800da98:	0800ebe1 	.word	0x0800ebe1

0800da9c <_Bfree>:
 800da9c:	b570      	push	{r4, r5, r6, lr}
 800da9e:	69c6      	ldr	r6, [r0, #28]
 800daa0:	4605      	mov	r5, r0
 800daa2:	460c      	mov	r4, r1
 800daa4:	b976      	cbnz	r6, 800dac4 <_Bfree+0x28>
 800daa6:	2010      	movs	r0, #16
 800daa8:	f7ff ff02 	bl	800d8b0 <malloc>
 800daac:	4602      	mov	r2, r0
 800daae:	61e8      	str	r0, [r5, #28]
 800dab0:	b920      	cbnz	r0, 800dabc <_Bfree+0x20>
 800dab2:	4b09      	ldr	r3, [pc, #36]	@ (800dad8 <_Bfree+0x3c>)
 800dab4:	4809      	ldr	r0, [pc, #36]	@ (800dadc <_Bfree+0x40>)
 800dab6:	218f      	movs	r1, #143	@ 0x8f
 800dab8:	f000 fbfc 	bl	800e2b4 <__assert_func>
 800dabc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dac0:	6006      	str	r6, [r0, #0]
 800dac2:	60c6      	str	r6, [r0, #12]
 800dac4:	b13c      	cbz	r4, 800dad6 <_Bfree+0x3a>
 800dac6:	69eb      	ldr	r3, [r5, #28]
 800dac8:	6862      	ldr	r2, [r4, #4]
 800daca:	68db      	ldr	r3, [r3, #12]
 800dacc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800dad0:	6021      	str	r1, [r4, #0]
 800dad2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800dad6:	bd70      	pop	{r4, r5, r6, pc}
 800dad8:	0800eb61 	.word	0x0800eb61
 800dadc:	0800ebe1 	.word	0x0800ebe1

0800dae0 <__multadd>:
 800dae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dae4:	690d      	ldr	r5, [r1, #16]
 800dae6:	4607      	mov	r7, r0
 800dae8:	460c      	mov	r4, r1
 800daea:	461e      	mov	r6, r3
 800daec:	f101 0c14 	add.w	ip, r1, #20
 800daf0:	2000      	movs	r0, #0
 800daf2:	f8dc 3000 	ldr.w	r3, [ip]
 800daf6:	b299      	uxth	r1, r3
 800daf8:	fb02 6101 	mla	r1, r2, r1, r6
 800dafc:	0c1e      	lsrs	r6, r3, #16
 800dafe:	0c0b      	lsrs	r3, r1, #16
 800db00:	fb02 3306 	mla	r3, r2, r6, r3
 800db04:	b289      	uxth	r1, r1
 800db06:	3001      	adds	r0, #1
 800db08:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800db0c:	4285      	cmp	r5, r0
 800db0e:	f84c 1b04 	str.w	r1, [ip], #4
 800db12:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800db16:	dcec      	bgt.n	800daf2 <__multadd+0x12>
 800db18:	b30e      	cbz	r6, 800db5e <__multadd+0x7e>
 800db1a:	68a3      	ldr	r3, [r4, #8]
 800db1c:	42ab      	cmp	r3, r5
 800db1e:	dc19      	bgt.n	800db54 <__multadd+0x74>
 800db20:	6861      	ldr	r1, [r4, #4]
 800db22:	4638      	mov	r0, r7
 800db24:	3101      	adds	r1, #1
 800db26:	f7ff ff79 	bl	800da1c <_Balloc>
 800db2a:	4680      	mov	r8, r0
 800db2c:	b928      	cbnz	r0, 800db3a <__multadd+0x5a>
 800db2e:	4602      	mov	r2, r0
 800db30:	4b0c      	ldr	r3, [pc, #48]	@ (800db64 <__multadd+0x84>)
 800db32:	480d      	ldr	r0, [pc, #52]	@ (800db68 <__multadd+0x88>)
 800db34:	21ba      	movs	r1, #186	@ 0xba
 800db36:	f000 fbbd 	bl	800e2b4 <__assert_func>
 800db3a:	6922      	ldr	r2, [r4, #16]
 800db3c:	3202      	adds	r2, #2
 800db3e:	f104 010c 	add.w	r1, r4, #12
 800db42:	0092      	lsls	r2, r2, #2
 800db44:	300c      	adds	r0, #12
 800db46:	f000 fba7 	bl	800e298 <memcpy>
 800db4a:	4621      	mov	r1, r4
 800db4c:	4638      	mov	r0, r7
 800db4e:	f7ff ffa5 	bl	800da9c <_Bfree>
 800db52:	4644      	mov	r4, r8
 800db54:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800db58:	3501      	adds	r5, #1
 800db5a:	615e      	str	r6, [r3, #20]
 800db5c:	6125      	str	r5, [r4, #16]
 800db5e:	4620      	mov	r0, r4
 800db60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db64:	0800ebd0 	.word	0x0800ebd0
 800db68:	0800ebe1 	.word	0x0800ebe1

0800db6c <__hi0bits>:
 800db6c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800db70:	4603      	mov	r3, r0
 800db72:	bf36      	itet	cc
 800db74:	0403      	lslcc	r3, r0, #16
 800db76:	2000      	movcs	r0, #0
 800db78:	2010      	movcc	r0, #16
 800db7a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800db7e:	bf3c      	itt	cc
 800db80:	021b      	lslcc	r3, r3, #8
 800db82:	3008      	addcc	r0, #8
 800db84:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800db88:	bf3c      	itt	cc
 800db8a:	011b      	lslcc	r3, r3, #4
 800db8c:	3004      	addcc	r0, #4
 800db8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800db92:	bf3c      	itt	cc
 800db94:	009b      	lslcc	r3, r3, #2
 800db96:	3002      	addcc	r0, #2
 800db98:	2b00      	cmp	r3, #0
 800db9a:	db05      	blt.n	800dba8 <__hi0bits+0x3c>
 800db9c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800dba0:	f100 0001 	add.w	r0, r0, #1
 800dba4:	bf08      	it	eq
 800dba6:	2020      	moveq	r0, #32
 800dba8:	4770      	bx	lr

0800dbaa <__lo0bits>:
 800dbaa:	6803      	ldr	r3, [r0, #0]
 800dbac:	4602      	mov	r2, r0
 800dbae:	f013 0007 	ands.w	r0, r3, #7
 800dbb2:	d00b      	beq.n	800dbcc <__lo0bits+0x22>
 800dbb4:	07d9      	lsls	r1, r3, #31
 800dbb6:	d421      	bmi.n	800dbfc <__lo0bits+0x52>
 800dbb8:	0798      	lsls	r0, r3, #30
 800dbba:	bf49      	itett	mi
 800dbbc:	085b      	lsrmi	r3, r3, #1
 800dbbe:	089b      	lsrpl	r3, r3, #2
 800dbc0:	2001      	movmi	r0, #1
 800dbc2:	6013      	strmi	r3, [r2, #0]
 800dbc4:	bf5c      	itt	pl
 800dbc6:	6013      	strpl	r3, [r2, #0]
 800dbc8:	2002      	movpl	r0, #2
 800dbca:	4770      	bx	lr
 800dbcc:	b299      	uxth	r1, r3
 800dbce:	b909      	cbnz	r1, 800dbd4 <__lo0bits+0x2a>
 800dbd0:	0c1b      	lsrs	r3, r3, #16
 800dbd2:	2010      	movs	r0, #16
 800dbd4:	b2d9      	uxtb	r1, r3
 800dbd6:	b909      	cbnz	r1, 800dbdc <__lo0bits+0x32>
 800dbd8:	3008      	adds	r0, #8
 800dbda:	0a1b      	lsrs	r3, r3, #8
 800dbdc:	0719      	lsls	r1, r3, #28
 800dbde:	bf04      	itt	eq
 800dbe0:	091b      	lsreq	r3, r3, #4
 800dbe2:	3004      	addeq	r0, #4
 800dbe4:	0799      	lsls	r1, r3, #30
 800dbe6:	bf04      	itt	eq
 800dbe8:	089b      	lsreq	r3, r3, #2
 800dbea:	3002      	addeq	r0, #2
 800dbec:	07d9      	lsls	r1, r3, #31
 800dbee:	d403      	bmi.n	800dbf8 <__lo0bits+0x4e>
 800dbf0:	085b      	lsrs	r3, r3, #1
 800dbf2:	f100 0001 	add.w	r0, r0, #1
 800dbf6:	d003      	beq.n	800dc00 <__lo0bits+0x56>
 800dbf8:	6013      	str	r3, [r2, #0]
 800dbfa:	4770      	bx	lr
 800dbfc:	2000      	movs	r0, #0
 800dbfe:	4770      	bx	lr
 800dc00:	2020      	movs	r0, #32
 800dc02:	4770      	bx	lr

0800dc04 <__i2b>:
 800dc04:	b510      	push	{r4, lr}
 800dc06:	460c      	mov	r4, r1
 800dc08:	2101      	movs	r1, #1
 800dc0a:	f7ff ff07 	bl	800da1c <_Balloc>
 800dc0e:	4602      	mov	r2, r0
 800dc10:	b928      	cbnz	r0, 800dc1e <__i2b+0x1a>
 800dc12:	4b05      	ldr	r3, [pc, #20]	@ (800dc28 <__i2b+0x24>)
 800dc14:	4805      	ldr	r0, [pc, #20]	@ (800dc2c <__i2b+0x28>)
 800dc16:	f240 1145 	movw	r1, #325	@ 0x145
 800dc1a:	f000 fb4b 	bl	800e2b4 <__assert_func>
 800dc1e:	2301      	movs	r3, #1
 800dc20:	6144      	str	r4, [r0, #20]
 800dc22:	6103      	str	r3, [r0, #16]
 800dc24:	bd10      	pop	{r4, pc}
 800dc26:	bf00      	nop
 800dc28:	0800ebd0 	.word	0x0800ebd0
 800dc2c:	0800ebe1 	.word	0x0800ebe1

0800dc30 <__multiply>:
 800dc30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc34:	4614      	mov	r4, r2
 800dc36:	690a      	ldr	r2, [r1, #16]
 800dc38:	6923      	ldr	r3, [r4, #16]
 800dc3a:	429a      	cmp	r2, r3
 800dc3c:	bfa8      	it	ge
 800dc3e:	4623      	movge	r3, r4
 800dc40:	460f      	mov	r7, r1
 800dc42:	bfa4      	itt	ge
 800dc44:	460c      	movge	r4, r1
 800dc46:	461f      	movge	r7, r3
 800dc48:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800dc4c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800dc50:	68a3      	ldr	r3, [r4, #8]
 800dc52:	6861      	ldr	r1, [r4, #4]
 800dc54:	eb0a 0609 	add.w	r6, sl, r9
 800dc58:	42b3      	cmp	r3, r6
 800dc5a:	b085      	sub	sp, #20
 800dc5c:	bfb8      	it	lt
 800dc5e:	3101      	addlt	r1, #1
 800dc60:	f7ff fedc 	bl	800da1c <_Balloc>
 800dc64:	b930      	cbnz	r0, 800dc74 <__multiply+0x44>
 800dc66:	4602      	mov	r2, r0
 800dc68:	4b44      	ldr	r3, [pc, #272]	@ (800dd7c <__multiply+0x14c>)
 800dc6a:	4845      	ldr	r0, [pc, #276]	@ (800dd80 <__multiply+0x150>)
 800dc6c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800dc70:	f000 fb20 	bl	800e2b4 <__assert_func>
 800dc74:	f100 0514 	add.w	r5, r0, #20
 800dc78:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800dc7c:	462b      	mov	r3, r5
 800dc7e:	2200      	movs	r2, #0
 800dc80:	4543      	cmp	r3, r8
 800dc82:	d321      	bcc.n	800dcc8 <__multiply+0x98>
 800dc84:	f107 0114 	add.w	r1, r7, #20
 800dc88:	f104 0214 	add.w	r2, r4, #20
 800dc8c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800dc90:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800dc94:	9302      	str	r3, [sp, #8]
 800dc96:	1b13      	subs	r3, r2, r4
 800dc98:	3b15      	subs	r3, #21
 800dc9a:	f023 0303 	bic.w	r3, r3, #3
 800dc9e:	3304      	adds	r3, #4
 800dca0:	f104 0715 	add.w	r7, r4, #21
 800dca4:	42ba      	cmp	r2, r7
 800dca6:	bf38      	it	cc
 800dca8:	2304      	movcc	r3, #4
 800dcaa:	9301      	str	r3, [sp, #4]
 800dcac:	9b02      	ldr	r3, [sp, #8]
 800dcae:	9103      	str	r1, [sp, #12]
 800dcb0:	428b      	cmp	r3, r1
 800dcb2:	d80c      	bhi.n	800dcce <__multiply+0x9e>
 800dcb4:	2e00      	cmp	r6, #0
 800dcb6:	dd03      	ble.n	800dcc0 <__multiply+0x90>
 800dcb8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d05b      	beq.n	800dd78 <__multiply+0x148>
 800dcc0:	6106      	str	r6, [r0, #16]
 800dcc2:	b005      	add	sp, #20
 800dcc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcc8:	f843 2b04 	str.w	r2, [r3], #4
 800dccc:	e7d8      	b.n	800dc80 <__multiply+0x50>
 800dcce:	f8b1 a000 	ldrh.w	sl, [r1]
 800dcd2:	f1ba 0f00 	cmp.w	sl, #0
 800dcd6:	d024      	beq.n	800dd22 <__multiply+0xf2>
 800dcd8:	f104 0e14 	add.w	lr, r4, #20
 800dcdc:	46a9      	mov	r9, r5
 800dcde:	f04f 0c00 	mov.w	ip, #0
 800dce2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800dce6:	f8d9 3000 	ldr.w	r3, [r9]
 800dcea:	fa1f fb87 	uxth.w	fp, r7
 800dcee:	b29b      	uxth	r3, r3
 800dcf0:	fb0a 330b 	mla	r3, sl, fp, r3
 800dcf4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800dcf8:	f8d9 7000 	ldr.w	r7, [r9]
 800dcfc:	4463      	add	r3, ip
 800dcfe:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800dd02:	fb0a c70b 	mla	r7, sl, fp, ip
 800dd06:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800dd0a:	b29b      	uxth	r3, r3
 800dd0c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800dd10:	4572      	cmp	r2, lr
 800dd12:	f849 3b04 	str.w	r3, [r9], #4
 800dd16:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800dd1a:	d8e2      	bhi.n	800dce2 <__multiply+0xb2>
 800dd1c:	9b01      	ldr	r3, [sp, #4]
 800dd1e:	f845 c003 	str.w	ip, [r5, r3]
 800dd22:	9b03      	ldr	r3, [sp, #12]
 800dd24:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800dd28:	3104      	adds	r1, #4
 800dd2a:	f1b9 0f00 	cmp.w	r9, #0
 800dd2e:	d021      	beq.n	800dd74 <__multiply+0x144>
 800dd30:	682b      	ldr	r3, [r5, #0]
 800dd32:	f104 0c14 	add.w	ip, r4, #20
 800dd36:	46ae      	mov	lr, r5
 800dd38:	f04f 0a00 	mov.w	sl, #0
 800dd3c:	f8bc b000 	ldrh.w	fp, [ip]
 800dd40:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800dd44:	fb09 770b 	mla	r7, r9, fp, r7
 800dd48:	4457      	add	r7, sl
 800dd4a:	b29b      	uxth	r3, r3
 800dd4c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800dd50:	f84e 3b04 	str.w	r3, [lr], #4
 800dd54:	f85c 3b04 	ldr.w	r3, [ip], #4
 800dd58:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800dd5c:	f8be 3000 	ldrh.w	r3, [lr]
 800dd60:	fb09 330a 	mla	r3, r9, sl, r3
 800dd64:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800dd68:	4562      	cmp	r2, ip
 800dd6a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800dd6e:	d8e5      	bhi.n	800dd3c <__multiply+0x10c>
 800dd70:	9f01      	ldr	r7, [sp, #4]
 800dd72:	51eb      	str	r3, [r5, r7]
 800dd74:	3504      	adds	r5, #4
 800dd76:	e799      	b.n	800dcac <__multiply+0x7c>
 800dd78:	3e01      	subs	r6, #1
 800dd7a:	e79b      	b.n	800dcb4 <__multiply+0x84>
 800dd7c:	0800ebd0 	.word	0x0800ebd0
 800dd80:	0800ebe1 	.word	0x0800ebe1

0800dd84 <__pow5mult>:
 800dd84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dd88:	4615      	mov	r5, r2
 800dd8a:	f012 0203 	ands.w	r2, r2, #3
 800dd8e:	4607      	mov	r7, r0
 800dd90:	460e      	mov	r6, r1
 800dd92:	d007      	beq.n	800dda4 <__pow5mult+0x20>
 800dd94:	4c25      	ldr	r4, [pc, #148]	@ (800de2c <__pow5mult+0xa8>)
 800dd96:	3a01      	subs	r2, #1
 800dd98:	2300      	movs	r3, #0
 800dd9a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800dd9e:	f7ff fe9f 	bl	800dae0 <__multadd>
 800dda2:	4606      	mov	r6, r0
 800dda4:	10ad      	asrs	r5, r5, #2
 800dda6:	d03d      	beq.n	800de24 <__pow5mult+0xa0>
 800dda8:	69fc      	ldr	r4, [r7, #28]
 800ddaa:	b97c      	cbnz	r4, 800ddcc <__pow5mult+0x48>
 800ddac:	2010      	movs	r0, #16
 800ddae:	f7ff fd7f 	bl	800d8b0 <malloc>
 800ddb2:	4602      	mov	r2, r0
 800ddb4:	61f8      	str	r0, [r7, #28]
 800ddb6:	b928      	cbnz	r0, 800ddc4 <__pow5mult+0x40>
 800ddb8:	4b1d      	ldr	r3, [pc, #116]	@ (800de30 <__pow5mult+0xac>)
 800ddba:	481e      	ldr	r0, [pc, #120]	@ (800de34 <__pow5mult+0xb0>)
 800ddbc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ddc0:	f000 fa78 	bl	800e2b4 <__assert_func>
 800ddc4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ddc8:	6004      	str	r4, [r0, #0]
 800ddca:	60c4      	str	r4, [r0, #12]
 800ddcc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ddd0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ddd4:	b94c      	cbnz	r4, 800ddea <__pow5mult+0x66>
 800ddd6:	f240 2171 	movw	r1, #625	@ 0x271
 800ddda:	4638      	mov	r0, r7
 800dddc:	f7ff ff12 	bl	800dc04 <__i2b>
 800dde0:	2300      	movs	r3, #0
 800dde2:	f8c8 0008 	str.w	r0, [r8, #8]
 800dde6:	4604      	mov	r4, r0
 800dde8:	6003      	str	r3, [r0, #0]
 800ddea:	f04f 0900 	mov.w	r9, #0
 800ddee:	07eb      	lsls	r3, r5, #31
 800ddf0:	d50a      	bpl.n	800de08 <__pow5mult+0x84>
 800ddf2:	4631      	mov	r1, r6
 800ddf4:	4622      	mov	r2, r4
 800ddf6:	4638      	mov	r0, r7
 800ddf8:	f7ff ff1a 	bl	800dc30 <__multiply>
 800ddfc:	4631      	mov	r1, r6
 800ddfe:	4680      	mov	r8, r0
 800de00:	4638      	mov	r0, r7
 800de02:	f7ff fe4b 	bl	800da9c <_Bfree>
 800de06:	4646      	mov	r6, r8
 800de08:	106d      	asrs	r5, r5, #1
 800de0a:	d00b      	beq.n	800de24 <__pow5mult+0xa0>
 800de0c:	6820      	ldr	r0, [r4, #0]
 800de0e:	b938      	cbnz	r0, 800de20 <__pow5mult+0x9c>
 800de10:	4622      	mov	r2, r4
 800de12:	4621      	mov	r1, r4
 800de14:	4638      	mov	r0, r7
 800de16:	f7ff ff0b 	bl	800dc30 <__multiply>
 800de1a:	6020      	str	r0, [r4, #0]
 800de1c:	f8c0 9000 	str.w	r9, [r0]
 800de20:	4604      	mov	r4, r0
 800de22:	e7e4      	b.n	800ddee <__pow5mult+0x6a>
 800de24:	4630      	mov	r0, r6
 800de26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de2a:	bf00      	nop
 800de2c:	0800ec3c 	.word	0x0800ec3c
 800de30:	0800eb61 	.word	0x0800eb61
 800de34:	0800ebe1 	.word	0x0800ebe1

0800de38 <__lshift>:
 800de38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de3c:	460c      	mov	r4, r1
 800de3e:	6849      	ldr	r1, [r1, #4]
 800de40:	6923      	ldr	r3, [r4, #16]
 800de42:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800de46:	68a3      	ldr	r3, [r4, #8]
 800de48:	4607      	mov	r7, r0
 800de4a:	4691      	mov	r9, r2
 800de4c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800de50:	f108 0601 	add.w	r6, r8, #1
 800de54:	42b3      	cmp	r3, r6
 800de56:	db0b      	blt.n	800de70 <__lshift+0x38>
 800de58:	4638      	mov	r0, r7
 800de5a:	f7ff fddf 	bl	800da1c <_Balloc>
 800de5e:	4605      	mov	r5, r0
 800de60:	b948      	cbnz	r0, 800de76 <__lshift+0x3e>
 800de62:	4602      	mov	r2, r0
 800de64:	4b28      	ldr	r3, [pc, #160]	@ (800df08 <__lshift+0xd0>)
 800de66:	4829      	ldr	r0, [pc, #164]	@ (800df0c <__lshift+0xd4>)
 800de68:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800de6c:	f000 fa22 	bl	800e2b4 <__assert_func>
 800de70:	3101      	adds	r1, #1
 800de72:	005b      	lsls	r3, r3, #1
 800de74:	e7ee      	b.n	800de54 <__lshift+0x1c>
 800de76:	2300      	movs	r3, #0
 800de78:	f100 0114 	add.w	r1, r0, #20
 800de7c:	f100 0210 	add.w	r2, r0, #16
 800de80:	4618      	mov	r0, r3
 800de82:	4553      	cmp	r3, sl
 800de84:	db33      	blt.n	800deee <__lshift+0xb6>
 800de86:	6920      	ldr	r0, [r4, #16]
 800de88:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800de8c:	f104 0314 	add.w	r3, r4, #20
 800de90:	f019 091f 	ands.w	r9, r9, #31
 800de94:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800de98:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800de9c:	d02b      	beq.n	800def6 <__lshift+0xbe>
 800de9e:	f1c9 0e20 	rsb	lr, r9, #32
 800dea2:	468a      	mov	sl, r1
 800dea4:	2200      	movs	r2, #0
 800dea6:	6818      	ldr	r0, [r3, #0]
 800dea8:	fa00 f009 	lsl.w	r0, r0, r9
 800deac:	4310      	orrs	r0, r2
 800deae:	f84a 0b04 	str.w	r0, [sl], #4
 800deb2:	f853 2b04 	ldr.w	r2, [r3], #4
 800deb6:	459c      	cmp	ip, r3
 800deb8:	fa22 f20e 	lsr.w	r2, r2, lr
 800debc:	d8f3      	bhi.n	800dea6 <__lshift+0x6e>
 800debe:	ebac 0304 	sub.w	r3, ip, r4
 800dec2:	3b15      	subs	r3, #21
 800dec4:	f023 0303 	bic.w	r3, r3, #3
 800dec8:	3304      	adds	r3, #4
 800deca:	f104 0015 	add.w	r0, r4, #21
 800dece:	4584      	cmp	ip, r0
 800ded0:	bf38      	it	cc
 800ded2:	2304      	movcc	r3, #4
 800ded4:	50ca      	str	r2, [r1, r3]
 800ded6:	b10a      	cbz	r2, 800dedc <__lshift+0xa4>
 800ded8:	f108 0602 	add.w	r6, r8, #2
 800dedc:	3e01      	subs	r6, #1
 800dede:	4638      	mov	r0, r7
 800dee0:	612e      	str	r6, [r5, #16]
 800dee2:	4621      	mov	r1, r4
 800dee4:	f7ff fdda 	bl	800da9c <_Bfree>
 800dee8:	4628      	mov	r0, r5
 800deea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800deee:	f842 0f04 	str.w	r0, [r2, #4]!
 800def2:	3301      	adds	r3, #1
 800def4:	e7c5      	b.n	800de82 <__lshift+0x4a>
 800def6:	3904      	subs	r1, #4
 800def8:	f853 2b04 	ldr.w	r2, [r3], #4
 800defc:	f841 2f04 	str.w	r2, [r1, #4]!
 800df00:	459c      	cmp	ip, r3
 800df02:	d8f9      	bhi.n	800def8 <__lshift+0xc0>
 800df04:	e7ea      	b.n	800dedc <__lshift+0xa4>
 800df06:	bf00      	nop
 800df08:	0800ebd0 	.word	0x0800ebd0
 800df0c:	0800ebe1 	.word	0x0800ebe1

0800df10 <__mcmp>:
 800df10:	690a      	ldr	r2, [r1, #16]
 800df12:	4603      	mov	r3, r0
 800df14:	6900      	ldr	r0, [r0, #16]
 800df16:	1a80      	subs	r0, r0, r2
 800df18:	b530      	push	{r4, r5, lr}
 800df1a:	d10e      	bne.n	800df3a <__mcmp+0x2a>
 800df1c:	3314      	adds	r3, #20
 800df1e:	3114      	adds	r1, #20
 800df20:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800df24:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800df28:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800df2c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800df30:	4295      	cmp	r5, r2
 800df32:	d003      	beq.n	800df3c <__mcmp+0x2c>
 800df34:	d205      	bcs.n	800df42 <__mcmp+0x32>
 800df36:	f04f 30ff 	mov.w	r0, #4294967295
 800df3a:	bd30      	pop	{r4, r5, pc}
 800df3c:	42a3      	cmp	r3, r4
 800df3e:	d3f3      	bcc.n	800df28 <__mcmp+0x18>
 800df40:	e7fb      	b.n	800df3a <__mcmp+0x2a>
 800df42:	2001      	movs	r0, #1
 800df44:	e7f9      	b.n	800df3a <__mcmp+0x2a>
	...

0800df48 <__mdiff>:
 800df48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df4c:	4689      	mov	r9, r1
 800df4e:	4606      	mov	r6, r0
 800df50:	4611      	mov	r1, r2
 800df52:	4648      	mov	r0, r9
 800df54:	4614      	mov	r4, r2
 800df56:	f7ff ffdb 	bl	800df10 <__mcmp>
 800df5a:	1e05      	subs	r5, r0, #0
 800df5c:	d112      	bne.n	800df84 <__mdiff+0x3c>
 800df5e:	4629      	mov	r1, r5
 800df60:	4630      	mov	r0, r6
 800df62:	f7ff fd5b 	bl	800da1c <_Balloc>
 800df66:	4602      	mov	r2, r0
 800df68:	b928      	cbnz	r0, 800df76 <__mdiff+0x2e>
 800df6a:	4b3f      	ldr	r3, [pc, #252]	@ (800e068 <__mdiff+0x120>)
 800df6c:	f240 2137 	movw	r1, #567	@ 0x237
 800df70:	483e      	ldr	r0, [pc, #248]	@ (800e06c <__mdiff+0x124>)
 800df72:	f000 f99f 	bl	800e2b4 <__assert_func>
 800df76:	2301      	movs	r3, #1
 800df78:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800df7c:	4610      	mov	r0, r2
 800df7e:	b003      	add	sp, #12
 800df80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df84:	bfbc      	itt	lt
 800df86:	464b      	movlt	r3, r9
 800df88:	46a1      	movlt	r9, r4
 800df8a:	4630      	mov	r0, r6
 800df8c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800df90:	bfba      	itte	lt
 800df92:	461c      	movlt	r4, r3
 800df94:	2501      	movlt	r5, #1
 800df96:	2500      	movge	r5, #0
 800df98:	f7ff fd40 	bl	800da1c <_Balloc>
 800df9c:	4602      	mov	r2, r0
 800df9e:	b918      	cbnz	r0, 800dfa8 <__mdiff+0x60>
 800dfa0:	4b31      	ldr	r3, [pc, #196]	@ (800e068 <__mdiff+0x120>)
 800dfa2:	f240 2145 	movw	r1, #581	@ 0x245
 800dfa6:	e7e3      	b.n	800df70 <__mdiff+0x28>
 800dfa8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800dfac:	6926      	ldr	r6, [r4, #16]
 800dfae:	60c5      	str	r5, [r0, #12]
 800dfb0:	f109 0310 	add.w	r3, r9, #16
 800dfb4:	f109 0514 	add.w	r5, r9, #20
 800dfb8:	f104 0e14 	add.w	lr, r4, #20
 800dfbc:	f100 0b14 	add.w	fp, r0, #20
 800dfc0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800dfc4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800dfc8:	9301      	str	r3, [sp, #4]
 800dfca:	46d9      	mov	r9, fp
 800dfcc:	f04f 0c00 	mov.w	ip, #0
 800dfd0:	9b01      	ldr	r3, [sp, #4]
 800dfd2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800dfd6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800dfda:	9301      	str	r3, [sp, #4]
 800dfdc:	fa1f f38a 	uxth.w	r3, sl
 800dfe0:	4619      	mov	r1, r3
 800dfe2:	b283      	uxth	r3, r0
 800dfe4:	1acb      	subs	r3, r1, r3
 800dfe6:	0c00      	lsrs	r0, r0, #16
 800dfe8:	4463      	add	r3, ip
 800dfea:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800dfee:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800dff2:	b29b      	uxth	r3, r3
 800dff4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800dff8:	4576      	cmp	r6, lr
 800dffa:	f849 3b04 	str.w	r3, [r9], #4
 800dffe:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e002:	d8e5      	bhi.n	800dfd0 <__mdiff+0x88>
 800e004:	1b33      	subs	r3, r6, r4
 800e006:	3b15      	subs	r3, #21
 800e008:	f023 0303 	bic.w	r3, r3, #3
 800e00c:	3415      	adds	r4, #21
 800e00e:	3304      	adds	r3, #4
 800e010:	42a6      	cmp	r6, r4
 800e012:	bf38      	it	cc
 800e014:	2304      	movcc	r3, #4
 800e016:	441d      	add	r5, r3
 800e018:	445b      	add	r3, fp
 800e01a:	461e      	mov	r6, r3
 800e01c:	462c      	mov	r4, r5
 800e01e:	4544      	cmp	r4, r8
 800e020:	d30e      	bcc.n	800e040 <__mdiff+0xf8>
 800e022:	f108 0103 	add.w	r1, r8, #3
 800e026:	1b49      	subs	r1, r1, r5
 800e028:	f021 0103 	bic.w	r1, r1, #3
 800e02c:	3d03      	subs	r5, #3
 800e02e:	45a8      	cmp	r8, r5
 800e030:	bf38      	it	cc
 800e032:	2100      	movcc	r1, #0
 800e034:	440b      	add	r3, r1
 800e036:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e03a:	b191      	cbz	r1, 800e062 <__mdiff+0x11a>
 800e03c:	6117      	str	r7, [r2, #16]
 800e03e:	e79d      	b.n	800df7c <__mdiff+0x34>
 800e040:	f854 1b04 	ldr.w	r1, [r4], #4
 800e044:	46e6      	mov	lr, ip
 800e046:	0c08      	lsrs	r0, r1, #16
 800e048:	fa1c fc81 	uxtah	ip, ip, r1
 800e04c:	4471      	add	r1, lr
 800e04e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e052:	b289      	uxth	r1, r1
 800e054:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e058:	f846 1b04 	str.w	r1, [r6], #4
 800e05c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e060:	e7dd      	b.n	800e01e <__mdiff+0xd6>
 800e062:	3f01      	subs	r7, #1
 800e064:	e7e7      	b.n	800e036 <__mdiff+0xee>
 800e066:	bf00      	nop
 800e068:	0800ebd0 	.word	0x0800ebd0
 800e06c:	0800ebe1 	.word	0x0800ebe1

0800e070 <__d2b>:
 800e070:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e074:	460f      	mov	r7, r1
 800e076:	2101      	movs	r1, #1
 800e078:	ec59 8b10 	vmov	r8, r9, d0
 800e07c:	4616      	mov	r6, r2
 800e07e:	f7ff fccd 	bl	800da1c <_Balloc>
 800e082:	4604      	mov	r4, r0
 800e084:	b930      	cbnz	r0, 800e094 <__d2b+0x24>
 800e086:	4602      	mov	r2, r0
 800e088:	4b23      	ldr	r3, [pc, #140]	@ (800e118 <__d2b+0xa8>)
 800e08a:	4824      	ldr	r0, [pc, #144]	@ (800e11c <__d2b+0xac>)
 800e08c:	f240 310f 	movw	r1, #783	@ 0x30f
 800e090:	f000 f910 	bl	800e2b4 <__assert_func>
 800e094:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e098:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e09c:	b10d      	cbz	r5, 800e0a2 <__d2b+0x32>
 800e09e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e0a2:	9301      	str	r3, [sp, #4]
 800e0a4:	f1b8 0300 	subs.w	r3, r8, #0
 800e0a8:	d023      	beq.n	800e0f2 <__d2b+0x82>
 800e0aa:	4668      	mov	r0, sp
 800e0ac:	9300      	str	r3, [sp, #0]
 800e0ae:	f7ff fd7c 	bl	800dbaa <__lo0bits>
 800e0b2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e0b6:	b1d0      	cbz	r0, 800e0ee <__d2b+0x7e>
 800e0b8:	f1c0 0320 	rsb	r3, r0, #32
 800e0bc:	fa02 f303 	lsl.w	r3, r2, r3
 800e0c0:	430b      	orrs	r3, r1
 800e0c2:	40c2      	lsrs	r2, r0
 800e0c4:	6163      	str	r3, [r4, #20]
 800e0c6:	9201      	str	r2, [sp, #4]
 800e0c8:	9b01      	ldr	r3, [sp, #4]
 800e0ca:	61a3      	str	r3, [r4, #24]
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	bf0c      	ite	eq
 800e0d0:	2201      	moveq	r2, #1
 800e0d2:	2202      	movne	r2, #2
 800e0d4:	6122      	str	r2, [r4, #16]
 800e0d6:	b1a5      	cbz	r5, 800e102 <__d2b+0x92>
 800e0d8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e0dc:	4405      	add	r5, r0
 800e0de:	603d      	str	r5, [r7, #0]
 800e0e0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e0e4:	6030      	str	r0, [r6, #0]
 800e0e6:	4620      	mov	r0, r4
 800e0e8:	b003      	add	sp, #12
 800e0ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e0ee:	6161      	str	r1, [r4, #20]
 800e0f0:	e7ea      	b.n	800e0c8 <__d2b+0x58>
 800e0f2:	a801      	add	r0, sp, #4
 800e0f4:	f7ff fd59 	bl	800dbaa <__lo0bits>
 800e0f8:	9b01      	ldr	r3, [sp, #4]
 800e0fa:	6163      	str	r3, [r4, #20]
 800e0fc:	3020      	adds	r0, #32
 800e0fe:	2201      	movs	r2, #1
 800e100:	e7e8      	b.n	800e0d4 <__d2b+0x64>
 800e102:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e106:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e10a:	6038      	str	r0, [r7, #0]
 800e10c:	6918      	ldr	r0, [r3, #16]
 800e10e:	f7ff fd2d 	bl	800db6c <__hi0bits>
 800e112:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e116:	e7e5      	b.n	800e0e4 <__d2b+0x74>
 800e118:	0800ebd0 	.word	0x0800ebd0
 800e11c:	0800ebe1 	.word	0x0800ebe1

0800e120 <__sflush_r>:
 800e120:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e128:	0716      	lsls	r6, r2, #28
 800e12a:	4605      	mov	r5, r0
 800e12c:	460c      	mov	r4, r1
 800e12e:	d454      	bmi.n	800e1da <__sflush_r+0xba>
 800e130:	684b      	ldr	r3, [r1, #4]
 800e132:	2b00      	cmp	r3, #0
 800e134:	dc02      	bgt.n	800e13c <__sflush_r+0x1c>
 800e136:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e138:	2b00      	cmp	r3, #0
 800e13a:	dd48      	ble.n	800e1ce <__sflush_r+0xae>
 800e13c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e13e:	2e00      	cmp	r6, #0
 800e140:	d045      	beq.n	800e1ce <__sflush_r+0xae>
 800e142:	2300      	movs	r3, #0
 800e144:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e148:	682f      	ldr	r7, [r5, #0]
 800e14a:	6a21      	ldr	r1, [r4, #32]
 800e14c:	602b      	str	r3, [r5, #0]
 800e14e:	d030      	beq.n	800e1b2 <__sflush_r+0x92>
 800e150:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e152:	89a3      	ldrh	r3, [r4, #12]
 800e154:	0759      	lsls	r1, r3, #29
 800e156:	d505      	bpl.n	800e164 <__sflush_r+0x44>
 800e158:	6863      	ldr	r3, [r4, #4]
 800e15a:	1ad2      	subs	r2, r2, r3
 800e15c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e15e:	b10b      	cbz	r3, 800e164 <__sflush_r+0x44>
 800e160:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e162:	1ad2      	subs	r2, r2, r3
 800e164:	2300      	movs	r3, #0
 800e166:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e168:	6a21      	ldr	r1, [r4, #32]
 800e16a:	4628      	mov	r0, r5
 800e16c:	47b0      	blx	r6
 800e16e:	1c43      	adds	r3, r0, #1
 800e170:	89a3      	ldrh	r3, [r4, #12]
 800e172:	d106      	bne.n	800e182 <__sflush_r+0x62>
 800e174:	6829      	ldr	r1, [r5, #0]
 800e176:	291d      	cmp	r1, #29
 800e178:	d82b      	bhi.n	800e1d2 <__sflush_r+0xb2>
 800e17a:	4a2a      	ldr	r2, [pc, #168]	@ (800e224 <__sflush_r+0x104>)
 800e17c:	410a      	asrs	r2, r1
 800e17e:	07d6      	lsls	r6, r2, #31
 800e180:	d427      	bmi.n	800e1d2 <__sflush_r+0xb2>
 800e182:	2200      	movs	r2, #0
 800e184:	6062      	str	r2, [r4, #4]
 800e186:	04d9      	lsls	r1, r3, #19
 800e188:	6922      	ldr	r2, [r4, #16]
 800e18a:	6022      	str	r2, [r4, #0]
 800e18c:	d504      	bpl.n	800e198 <__sflush_r+0x78>
 800e18e:	1c42      	adds	r2, r0, #1
 800e190:	d101      	bne.n	800e196 <__sflush_r+0x76>
 800e192:	682b      	ldr	r3, [r5, #0]
 800e194:	b903      	cbnz	r3, 800e198 <__sflush_r+0x78>
 800e196:	6560      	str	r0, [r4, #84]	@ 0x54
 800e198:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e19a:	602f      	str	r7, [r5, #0]
 800e19c:	b1b9      	cbz	r1, 800e1ce <__sflush_r+0xae>
 800e19e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e1a2:	4299      	cmp	r1, r3
 800e1a4:	d002      	beq.n	800e1ac <__sflush_r+0x8c>
 800e1a6:	4628      	mov	r0, r5
 800e1a8:	f7ff fb38 	bl	800d81c <_free_r>
 800e1ac:	2300      	movs	r3, #0
 800e1ae:	6363      	str	r3, [r4, #52]	@ 0x34
 800e1b0:	e00d      	b.n	800e1ce <__sflush_r+0xae>
 800e1b2:	2301      	movs	r3, #1
 800e1b4:	4628      	mov	r0, r5
 800e1b6:	47b0      	blx	r6
 800e1b8:	4602      	mov	r2, r0
 800e1ba:	1c50      	adds	r0, r2, #1
 800e1bc:	d1c9      	bne.n	800e152 <__sflush_r+0x32>
 800e1be:	682b      	ldr	r3, [r5, #0]
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d0c6      	beq.n	800e152 <__sflush_r+0x32>
 800e1c4:	2b1d      	cmp	r3, #29
 800e1c6:	d001      	beq.n	800e1cc <__sflush_r+0xac>
 800e1c8:	2b16      	cmp	r3, #22
 800e1ca:	d11e      	bne.n	800e20a <__sflush_r+0xea>
 800e1cc:	602f      	str	r7, [r5, #0]
 800e1ce:	2000      	movs	r0, #0
 800e1d0:	e022      	b.n	800e218 <__sflush_r+0xf8>
 800e1d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e1d6:	b21b      	sxth	r3, r3
 800e1d8:	e01b      	b.n	800e212 <__sflush_r+0xf2>
 800e1da:	690f      	ldr	r7, [r1, #16]
 800e1dc:	2f00      	cmp	r7, #0
 800e1de:	d0f6      	beq.n	800e1ce <__sflush_r+0xae>
 800e1e0:	0793      	lsls	r3, r2, #30
 800e1e2:	680e      	ldr	r6, [r1, #0]
 800e1e4:	bf08      	it	eq
 800e1e6:	694b      	ldreq	r3, [r1, #20]
 800e1e8:	600f      	str	r7, [r1, #0]
 800e1ea:	bf18      	it	ne
 800e1ec:	2300      	movne	r3, #0
 800e1ee:	eba6 0807 	sub.w	r8, r6, r7
 800e1f2:	608b      	str	r3, [r1, #8]
 800e1f4:	f1b8 0f00 	cmp.w	r8, #0
 800e1f8:	dde9      	ble.n	800e1ce <__sflush_r+0xae>
 800e1fa:	6a21      	ldr	r1, [r4, #32]
 800e1fc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e1fe:	4643      	mov	r3, r8
 800e200:	463a      	mov	r2, r7
 800e202:	4628      	mov	r0, r5
 800e204:	47b0      	blx	r6
 800e206:	2800      	cmp	r0, #0
 800e208:	dc08      	bgt.n	800e21c <__sflush_r+0xfc>
 800e20a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e20e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e212:	81a3      	strh	r3, [r4, #12]
 800e214:	f04f 30ff 	mov.w	r0, #4294967295
 800e218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e21c:	4407      	add	r7, r0
 800e21e:	eba8 0800 	sub.w	r8, r8, r0
 800e222:	e7e7      	b.n	800e1f4 <__sflush_r+0xd4>
 800e224:	dfbffffe 	.word	0xdfbffffe

0800e228 <_fflush_r>:
 800e228:	b538      	push	{r3, r4, r5, lr}
 800e22a:	690b      	ldr	r3, [r1, #16]
 800e22c:	4605      	mov	r5, r0
 800e22e:	460c      	mov	r4, r1
 800e230:	b913      	cbnz	r3, 800e238 <_fflush_r+0x10>
 800e232:	2500      	movs	r5, #0
 800e234:	4628      	mov	r0, r5
 800e236:	bd38      	pop	{r3, r4, r5, pc}
 800e238:	b118      	cbz	r0, 800e242 <_fflush_r+0x1a>
 800e23a:	6a03      	ldr	r3, [r0, #32]
 800e23c:	b90b      	cbnz	r3, 800e242 <_fflush_r+0x1a>
 800e23e:	f7fe fc13 	bl	800ca68 <__sinit>
 800e242:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e246:	2b00      	cmp	r3, #0
 800e248:	d0f3      	beq.n	800e232 <_fflush_r+0xa>
 800e24a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e24c:	07d0      	lsls	r0, r2, #31
 800e24e:	d404      	bmi.n	800e25a <_fflush_r+0x32>
 800e250:	0599      	lsls	r1, r3, #22
 800e252:	d402      	bmi.n	800e25a <_fflush_r+0x32>
 800e254:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e256:	f7fe fcfe 	bl	800cc56 <__retarget_lock_acquire_recursive>
 800e25a:	4628      	mov	r0, r5
 800e25c:	4621      	mov	r1, r4
 800e25e:	f7ff ff5f 	bl	800e120 <__sflush_r>
 800e262:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e264:	07da      	lsls	r2, r3, #31
 800e266:	4605      	mov	r5, r0
 800e268:	d4e4      	bmi.n	800e234 <_fflush_r+0xc>
 800e26a:	89a3      	ldrh	r3, [r4, #12]
 800e26c:	059b      	lsls	r3, r3, #22
 800e26e:	d4e1      	bmi.n	800e234 <_fflush_r+0xc>
 800e270:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e272:	f7fe fcf1 	bl	800cc58 <__retarget_lock_release_recursive>
 800e276:	e7dd      	b.n	800e234 <_fflush_r+0xc>

0800e278 <_sbrk_r>:
 800e278:	b538      	push	{r3, r4, r5, lr}
 800e27a:	4d06      	ldr	r5, [pc, #24]	@ (800e294 <_sbrk_r+0x1c>)
 800e27c:	2300      	movs	r3, #0
 800e27e:	4604      	mov	r4, r0
 800e280:	4608      	mov	r0, r1
 800e282:	602b      	str	r3, [r5, #0]
 800e284:	f7f3 faea 	bl	800185c <_sbrk>
 800e288:	1c43      	adds	r3, r0, #1
 800e28a:	d102      	bne.n	800e292 <_sbrk_r+0x1a>
 800e28c:	682b      	ldr	r3, [r5, #0]
 800e28e:	b103      	cbz	r3, 800e292 <_sbrk_r+0x1a>
 800e290:	6023      	str	r3, [r4, #0]
 800e292:	bd38      	pop	{r3, r4, r5, pc}
 800e294:	2400072c 	.word	0x2400072c

0800e298 <memcpy>:
 800e298:	440a      	add	r2, r1
 800e29a:	4291      	cmp	r1, r2
 800e29c:	f100 33ff 	add.w	r3, r0, #4294967295
 800e2a0:	d100      	bne.n	800e2a4 <memcpy+0xc>
 800e2a2:	4770      	bx	lr
 800e2a4:	b510      	push	{r4, lr}
 800e2a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e2aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e2ae:	4291      	cmp	r1, r2
 800e2b0:	d1f9      	bne.n	800e2a6 <memcpy+0xe>
 800e2b2:	bd10      	pop	{r4, pc}

0800e2b4 <__assert_func>:
 800e2b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e2b6:	4614      	mov	r4, r2
 800e2b8:	461a      	mov	r2, r3
 800e2ba:	4b09      	ldr	r3, [pc, #36]	@ (800e2e0 <__assert_func+0x2c>)
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	4605      	mov	r5, r0
 800e2c0:	68d8      	ldr	r0, [r3, #12]
 800e2c2:	b954      	cbnz	r4, 800e2da <__assert_func+0x26>
 800e2c4:	4b07      	ldr	r3, [pc, #28]	@ (800e2e4 <__assert_func+0x30>)
 800e2c6:	461c      	mov	r4, r3
 800e2c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e2cc:	9100      	str	r1, [sp, #0]
 800e2ce:	462b      	mov	r3, r5
 800e2d0:	4905      	ldr	r1, [pc, #20]	@ (800e2e8 <__assert_func+0x34>)
 800e2d2:	f000 f841 	bl	800e358 <fiprintf>
 800e2d6:	f000 f851 	bl	800e37c <abort>
 800e2da:	4b04      	ldr	r3, [pc, #16]	@ (800e2ec <__assert_func+0x38>)
 800e2dc:	e7f4      	b.n	800e2c8 <__assert_func+0x14>
 800e2de:	bf00      	nop
 800e2e0:	2400001c 	.word	0x2400001c
 800e2e4:	0800ed7d 	.word	0x0800ed7d
 800e2e8:	0800ed4f 	.word	0x0800ed4f
 800e2ec:	0800ed42 	.word	0x0800ed42

0800e2f0 <_calloc_r>:
 800e2f0:	b570      	push	{r4, r5, r6, lr}
 800e2f2:	fba1 5402 	umull	r5, r4, r1, r2
 800e2f6:	b93c      	cbnz	r4, 800e308 <_calloc_r+0x18>
 800e2f8:	4629      	mov	r1, r5
 800e2fa:	f7ff fb03 	bl	800d904 <_malloc_r>
 800e2fe:	4606      	mov	r6, r0
 800e300:	b928      	cbnz	r0, 800e30e <_calloc_r+0x1e>
 800e302:	2600      	movs	r6, #0
 800e304:	4630      	mov	r0, r6
 800e306:	bd70      	pop	{r4, r5, r6, pc}
 800e308:	220c      	movs	r2, #12
 800e30a:	6002      	str	r2, [r0, #0]
 800e30c:	e7f9      	b.n	800e302 <_calloc_r+0x12>
 800e30e:	462a      	mov	r2, r5
 800e310:	4621      	mov	r1, r4
 800e312:	f7fe fc22 	bl	800cb5a <memset>
 800e316:	e7f5      	b.n	800e304 <_calloc_r+0x14>

0800e318 <__ascii_mbtowc>:
 800e318:	b082      	sub	sp, #8
 800e31a:	b901      	cbnz	r1, 800e31e <__ascii_mbtowc+0x6>
 800e31c:	a901      	add	r1, sp, #4
 800e31e:	b142      	cbz	r2, 800e332 <__ascii_mbtowc+0x1a>
 800e320:	b14b      	cbz	r3, 800e336 <__ascii_mbtowc+0x1e>
 800e322:	7813      	ldrb	r3, [r2, #0]
 800e324:	600b      	str	r3, [r1, #0]
 800e326:	7812      	ldrb	r2, [r2, #0]
 800e328:	1e10      	subs	r0, r2, #0
 800e32a:	bf18      	it	ne
 800e32c:	2001      	movne	r0, #1
 800e32e:	b002      	add	sp, #8
 800e330:	4770      	bx	lr
 800e332:	4610      	mov	r0, r2
 800e334:	e7fb      	b.n	800e32e <__ascii_mbtowc+0x16>
 800e336:	f06f 0001 	mvn.w	r0, #1
 800e33a:	e7f8      	b.n	800e32e <__ascii_mbtowc+0x16>

0800e33c <__ascii_wctomb>:
 800e33c:	4603      	mov	r3, r0
 800e33e:	4608      	mov	r0, r1
 800e340:	b141      	cbz	r1, 800e354 <__ascii_wctomb+0x18>
 800e342:	2aff      	cmp	r2, #255	@ 0xff
 800e344:	d904      	bls.n	800e350 <__ascii_wctomb+0x14>
 800e346:	228a      	movs	r2, #138	@ 0x8a
 800e348:	601a      	str	r2, [r3, #0]
 800e34a:	f04f 30ff 	mov.w	r0, #4294967295
 800e34e:	4770      	bx	lr
 800e350:	700a      	strb	r2, [r1, #0]
 800e352:	2001      	movs	r0, #1
 800e354:	4770      	bx	lr
	...

0800e358 <fiprintf>:
 800e358:	b40e      	push	{r1, r2, r3}
 800e35a:	b503      	push	{r0, r1, lr}
 800e35c:	4601      	mov	r1, r0
 800e35e:	ab03      	add	r3, sp, #12
 800e360:	4805      	ldr	r0, [pc, #20]	@ (800e378 <fiprintf+0x20>)
 800e362:	f853 2b04 	ldr.w	r2, [r3], #4
 800e366:	6800      	ldr	r0, [r0, #0]
 800e368:	9301      	str	r3, [sp, #4]
 800e36a:	f000 f837 	bl	800e3dc <_vfiprintf_r>
 800e36e:	b002      	add	sp, #8
 800e370:	f85d eb04 	ldr.w	lr, [sp], #4
 800e374:	b003      	add	sp, #12
 800e376:	4770      	bx	lr
 800e378:	2400001c 	.word	0x2400001c

0800e37c <abort>:
 800e37c:	b508      	push	{r3, lr}
 800e37e:	2006      	movs	r0, #6
 800e380:	f000 fa00 	bl	800e784 <raise>
 800e384:	2001      	movs	r0, #1
 800e386:	f7f3 f9f1 	bl	800176c <_exit>

0800e38a <__sfputc_r>:
 800e38a:	6893      	ldr	r3, [r2, #8]
 800e38c:	3b01      	subs	r3, #1
 800e38e:	2b00      	cmp	r3, #0
 800e390:	b410      	push	{r4}
 800e392:	6093      	str	r3, [r2, #8]
 800e394:	da08      	bge.n	800e3a8 <__sfputc_r+0x1e>
 800e396:	6994      	ldr	r4, [r2, #24]
 800e398:	42a3      	cmp	r3, r4
 800e39a:	db01      	blt.n	800e3a0 <__sfputc_r+0x16>
 800e39c:	290a      	cmp	r1, #10
 800e39e:	d103      	bne.n	800e3a8 <__sfputc_r+0x1e>
 800e3a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e3a4:	f000 b932 	b.w	800e60c <__swbuf_r>
 800e3a8:	6813      	ldr	r3, [r2, #0]
 800e3aa:	1c58      	adds	r0, r3, #1
 800e3ac:	6010      	str	r0, [r2, #0]
 800e3ae:	7019      	strb	r1, [r3, #0]
 800e3b0:	4608      	mov	r0, r1
 800e3b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e3b6:	4770      	bx	lr

0800e3b8 <__sfputs_r>:
 800e3b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3ba:	4606      	mov	r6, r0
 800e3bc:	460f      	mov	r7, r1
 800e3be:	4614      	mov	r4, r2
 800e3c0:	18d5      	adds	r5, r2, r3
 800e3c2:	42ac      	cmp	r4, r5
 800e3c4:	d101      	bne.n	800e3ca <__sfputs_r+0x12>
 800e3c6:	2000      	movs	r0, #0
 800e3c8:	e007      	b.n	800e3da <__sfputs_r+0x22>
 800e3ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e3ce:	463a      	mov	r2, r7
 800e3d0:	4630      	mov	r0, r6
 800e3d2:	f7ff ffda 	bl	800e38a <__sfputc_r>
 800e3d6:	1c43      	adds	r3, r0, #1
 800e3d8:	d1f3      	bne.n	800e3c2 <__sfputs_r+0xa>
 800e3da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e3dc <_vfiprintf_r>:
 800e3dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3e0:	460d      	mov	r5, r1
 800e3e2:	b09d      	sub	sp, #116	@ 0x74
 800e3e4:	4614      	mov	r4, r2
 800e3e6:	4698      	mov	r8, r3
 800e3e8:	4606      	mov	r6, r0
 800e3ea:	b118      	cbz	r0, 800e3f4 <_vfiprintf_r+0x18>
 800e3ec:	6a03      	ldr	r3, [r0, #32]
 800e3ee:	b90b      	cbnz	r3, 800e3f4 <_vfiprintf_r+0x18>
 800e3f0:	f7fe fb3a 	bl	800ca68 <__sinit>
 800e3f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e3f6:	07d9      	lsls	r1, r3, #31
 800e3f8:	d405      	bmi.n	800e406 <_vfiprintf_r+0x2a>
 800e3fa:	89ab      	ldrh	r3, [r5, #12]
 800e3fc:	059a      	lsls	r2, r3, #22
 800e3fe:	d402      	bmi.n	800e406 <_vfiprintf_r+0x2a>
 800e400:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e402:	f7fe fc28 	bl	800cc56 <__retarget_lock_acquire_recursive>
 800e406:	89ab      	ldrh	r3, [r5, #12]
 800e408:	071b      	lsls	r3, r3, #28
 800e40a:	d501      	bpl.n	800e410 <_vfiprintf_r+0x34>
 800e40c:	692b      	ldr	r3, [r5, #16]
 800e40e:	b99b      	cbnz	r3, 800e438 <_vfiprintf_r+0x5c>
 800e410:	4629      	mov	r1, r5
 800e412:	4630      	mov	r0, r6
 800e414:	f000 f938 	bl	800e688 <__swsetup_r>
 800e418:	b170      	cbz	r0, 800e438 <_vfiprintf_r+0x5c>
 800e41a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e41c:	07dc      	lsls	r4, r3, #31
 800e41e:	d504      	bpl.n	800e42a <_vfiprintf_r+0x4e>
 800e420:	f04f 30ff 	mov.w	r0, #4294967295
 800e424:	b01d      	add	sp, #116	@ 0x74
 800e426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e42a:	89ab      	ldrh	r3, [r5, #12]
 800e42c:	0598      	lsls	r0, r3, #22
 800e42e:	d4f7      	bmi.n	800e420 <_vfiprintf_r+0x44>
 800e430:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e432:	f7fe fc11 	bl	800cc58 <__retarget_lock_release_recursive>
 800e436:	e7f3      	b.n	800e420 <_vfiprintf_r+0x44>
 800e438:	2300      	movs	r3, #0
 800e43a:	9309      	str	r3, [sp, #36]	@ 0x24
 800e43c:	2320      	movs	r3, #32
 800e43e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e442:	f8cd 800c 	str.w	r8, [sp, #12]
 800e446:	2330      	movs	r3, #48	@ 0x30
 800e448:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e5f8 <_vfiprintf_r+0x21c>
 800e44c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e450:	f04f 0901 	mov.w	r9, #1
 800e454:	4623      	mov	r3, r4
 800e456:	469a      	mov	sl, r3
 800e458:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e45c:	b10a      	cbz	r2, 800e462 <_vfiprintf_r+0x86>
 800e45e:	2a25      	cmp	r2, #37	@ 0x25
 800e460:	d1f9      	bne.n	800e456 <_vfiprintf_r+0x7a>
 800e462:	ebba 0b04 	subs.w	fp, sl, r4
 800e466:	d00b      	beq.n	800e480 <_vfiprintf_r+0xa4>
 800e468:	465b      	mov	r3, fp
 800e46a:	4622      	mov	r2, r4
 800e46c:	4629      	mov	r1, r5
 800e46e:	4630      	mov	r0, r6
 800e470:	f7ff ffa2 	bl	800e3b8 <__sfputs_r>
 800e474:	3001      	adds	r0, #1
 800e476:	f000 80a7 	beq.w	800e5c8 <_vfiprintf_r+0x1ec>
 800e47a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e47c:	445a      	add	r2, fp
 800e47e:	9209      	str	r2, [sp, #36]	@ 0x24
 800e480:	f89a 3000 	ldrb.w	r3, [sl]
 800e484:	2b00      	cmp	r3, #0
 800e486:	f000 809f 	beq.w	800e5c8 <_vfiprintf_r+0x1ec>
 800e48a:	2300      	movs	r3, #0
 800e48c:	f04f 32ff 	mov.w	r2, #4294967295
 800e490:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e494:	f10a 0a01 	add.w	sl, sl, #1
 800e498:	9304      	str	r3, [sp, #16]
 800e49a:	9307      	str	r3, [sp, #28]
 800e49c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e4a0:	931a      	str	r3, [sp, #104]	@ 0x68
 800e4a2:	4654      	mov	r4, sl
 800e4a4:	2205      	movs	r2, #5
 800e4a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e4aa:	4853      	ldr	r0, [pc, #332]	@ (800e5f8 <_vfiprintf_r+0x21c>)
 800e4ac:	f7f1 ff18 	bl	80002e0 <memchr>
 800e4b0:	9a04      	ldr	r2, [sp, #16]
 800e4b2:	b9d8      	cbnz	r0, 800e4ec <_vfiprintf_r+0x110>
 800e4b4:	06d1      	lsls	r1, r2, #27
 800e4b6:	bf44      	itt	mi
 800e4b8:	2320      	movmi	r3, #32
 800e4ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e4be:	0713      	lsls	r3, r2, #28
 800e4c0:	bf44      	itt	mi
 800e4c2:	232b      	movmi	r3, #43	@ 0x2b
 800e4c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e4c8:	f89a 3000 	ldrb.w	r3, [sl]
 800e4cc:	2b2a      	cmp	r3, #42	@ 0x2a
 800e4ce:	d015      	beq.n	800e4fc <_vfiprintf_r+0x120>
 800e4d0:	9a07      	ldr	r2, [sp, #28]
 800e4d2:	4654      	mov	r4, sl
 800e4d4:	2000      	movs	r0, #0
 800e4d6:	f04f 0c0a 	mov.w	ip, #10
 800e4da:	4621      	mov	r1, r4
 800e4dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e4e0:	3b30      	subs	r3, #48	@ 0x30
 800e4e2:	2b09      	cmp	r3, #9
 800e4e4:	d94b      	bls.n	800e57e <_vfiprintf_r+0x1a2>
 800e4e6:	b1b0      	cbz	r0, 800e516 <_vfiprintf_r+0x13a>
 800e4e8:	9207      	str	r2, [sp, #28]
 800e4ea:	e014      	b.n	800e516 <_vfiprintf_r+0x13a>
 800e4ec:	eba0 0308 	sub.w	r3, r0, r8
 800e4f0:	fa09 f303 	lsl.w	r3, r9, r3
 800e4f4:	4313      	orrs	r3, r2
 800e4f6:	9304      	str	r3, [sp, #16]
 800e4f8:	46a2      	mov	sl, r4
 800e4fa:	e7d2      	b.n	800e4a2 <_vfiprintf_r+0xc6>
 800e4fc:	9b03      	ldr	r3, [sp, #12]
 800e4fe:	1d19      	adds	r1, r3, #4
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	9103      	str	r1, [sp, #12]
 800e504:	2b00      	cmp	r3, #0
 800e506:	bfbb      	ittet	lt
 800e508:	425b      	neglt	r3, r3
 800e50a:	f042 0202 	orrlt.w	r2, r2, #2
 800e50e:	9307      	strge	r3, [sp, #28]
 800e510:	9307      	strlt	r3, [sp, #28]
 800e512:	bfb8      	it	lt
 800e514:	9204      	strlt	r2, [sp, #16]
 800e516:	7823      	ldrb	r3, [r4, #0]
 800e518:	2b2e      	cmp	r3, #46	@ 0x2e
 800e51a:	d10a      	bne.n	800e532 <_vfiprintf_r+0x156>
 800e51c:	7863      	ldrb	r3, [r4, #1]
 800e51e:	2b2a      	cmp	r3, #42	@ 0x2a
 800e520:	d132      	bne.n	800e588 <_vfiprintf_r+0x1ac>
 800e522:	9b03      	ldr	r3, [sp, #12]
 800e524:	1d1a      	adds	r2, r3, #4
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	9203      	str	r2, [sp, #12]
 800e52a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e52e:	3402      	adds	r4, #2
 800e530:	9305      	str	r3, [sp, #20]
 800e532:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e608 <_vfiprintf_r+0x22c>
 800e536:	7821      	ldrb	r1, [r4, #0]
 800e538:	2203      	movs	r2, #3
 800e53a:	4650      	mov	r0, sl
 800e53c:	f7f1 fed0 	bl	80002e0 <memchr>
 800e540:	b138      	cbz	r0, 800e552 <_vfiprintf_r+0x176>
 800e542:	9b04      	ldr	r3, [sp, #16]
 800e544:	eba0 000a 	sub.w	r0, r0, sl
 800e548:	2240      	movs	r2, #64	@ 0x40
 800e54a:	4082      	lsls	r2, r0
 800e54c:	4313      	orrs	r3, r2
 800e54e:	3401      	adds	r4, #1
 800e550:	9304      	str	r3, [sp, #16]
 800e552:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e556:	4829      	ldr	r0, [pc, #164]	@ (800e5fc <_vfiprintf_r+0x220>)
 800e558:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e55c:	2206      	movs	r2, #6
 800e55e:	f7f1 febf 	bl	80002e0 <memchr>
 800e562:	2800      	cmp	r0, #0
 800e564:	d03f      	beq.n	800e5e6 <_vfiprintf_r+0x20a>
 800e566:	4b26      	ldr	r3, [pc, #152]	@ (800e600 <_vfiprintf_r+0x224>)
 800e568:	bb1b      	cbnz	r3, 800e5b2 <_vfiprintf_r+0x1d6>
 800e56a:	9b03      	ldr	r3, [sp, #12]
 800e56c:	3307      	adds	r3, #7
 800e56e:	f023 0307 	bic.w	r3, r3, #7
 800e572:	3308      	adds	r3, #8
 800e574:	9303      	str	r3, [sp, #12]
 800e576:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e578:	443b      	add	r3, r7
 800e57a:	9309      	str	r3, [sp, #36]	@ 0x24
 800e57c:	e76a      	b.n	800e454 <_vfiprintf_r+0x78>
 800e57e:	fb0c 3202 	mla	r2, ip, r2, r3
 800e582:	460c      	mov	r4, r1
 800e584:	2001      	movs	r0, #1
 800e586:	e7a8      	b.n	800e4da <_vfiprintf_r+0xfe>
 800e588:	2300      	movs	r3, #0
 800e58a:	3401      	adds	r4, #1
 800e58c:	9305      	str	r3, [sp, #20]
 800e58e:	4619      	mov	r1, r3
 800e590:	f04f 0c0a 	mov.w	ip, #10
 800e594:	4620      	mov	r0, r4
 800e596:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e59a:	3a30      	subs	r2, #48	@ 0x30
 800e59c:	2a09      	cmp	r2, #9
 800e59e:	d903      	bls.n	800e5a8 <_vfiprintf_r+0x1cc>
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d0c6      	beq.n	800e532 <_vfiprintf_r+0x156>
 800e5a4:	9105      	str	r1, [sp, #20]
 800e5a6:	e7c4      	b.n	800e532 <_vfiprintf_r+0x156>
 800e5a8:	fb0c 2101 	mla	r1, ip, r1, r2
 800e5ac:	4604      	mov	r4, r0
 800e5ae:	2301      	movs	r3, #1
 800e5b0:	e7f0      	b.n	800e594 <_vfiprintf_r+0x1b8>
 800e5b2:	ab03      	add	r3, sp, #12
 800e5b4:	9300      	str	r3, [sp, #0]
 800e5b6:	462a      	mov	r2, r5
 800e5b8:	4b12      	ldr	r3, [pc, #72]	@ (800e604 <_vfiprintf_r+0x228>)
 800e5ba:	a904      	add	r1, sp, #16
 800e5bc:	4630      	mov	r0, r6
 800e5be:	f7fd fe1f 	bl	800c200 <_printf_float>
 800e5c2:	4607      	mov	r7, r0
 800e5c4:	1c78      	adds	r0, r7, #1
 800e5c6:	d1d6      	bne.n	800e576 <_vfiprintf_r+0x19a>
 800e5c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e5ca:	07d9      	lsls	r1, r3, #31
 800e5cc:	d405      	bmi.n	800e5da <_vfiprintf_r+0x1fe>
 800e5ce:	89ab      	ldrh	r3, [r5, #12]
 800e5d0:	059a      	lsls	r2, r3, #22
 800e5d2:	d402      	bmi.n	800e5da <_vfiprintf_r+0x1fe>
 800e5d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e5d6:	f7fe fb3f 	bl	800cc58 <__retarget_lock_release_recursive>
 800e5da:	89ab      	ldrh	r3, [r5, #12]
 800e5dc:	065b      	lsls	r3, r3, #25
 800e5de:	f53f af1f 	bmi.w	800e420 <_vfiprintf_r+0x44>
 800e5e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e5e4:	e71e      	b.n	800e424 <_vfiprintf_r+0x48>
 800e5e6:	ab03      	add	r3, sp, #12
 800e5e8:	9300      	str	r3, [sp, #0]
 800e5ea:	462a      	mov	r2, r5
 800e5ec:	4b05      	ldr	r3, [pc, #20]	@ (800e604 <_vfiprintf_r+0x228>)
 800e5ee:	a904      	add	r1, sp, #16
 800e5f0:	4630      	mov	r0, r6
 800e5f2:	f7fe f88d 	bl	800c710 <_printf_i>
 800e5f6:	e7e4      	b.n	800e5c2 <_vfiprintf_r+0x1e6>
 800e5f8:	0800ee7f 	.word	0x0800ee7f
 800e5fc:	0800ee89 	.word	0x0800ee89
 800e600:	0800c201 	.word	0x0800c201
 800e604:	0800e3b9 	.word	0x0800e3b9
 800e608:	0800ee85 	.word	0x0800ee85

0800e60c <__swbuf_r>:
 800e60c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e60e:	460e      	mov	r6, r1
 800e610:	4614      	mov	r4, r2
 800e612:	4605      	mov	r5, r0
 800e614:	b118      	cbz	r0, 800e61e <__swbuf_r+0x12>
 800e616:	6a03      	ldr	r3, [r0, #32]
 800e618:	b90b      	cbnz	r3, 800e61e <__swbuf_r+0x12>
 800e61a:	f7fe fa25 	bl	800ca68 <__sinit>
 800e61e:	69a3      	ldr	r3, [r4, #24]
 800e620:	60a3      	str	r3, [r4, #8]
 800e622:	89a3      	ldrh	r3, [r4, #12]
 800e624:	071a      	lsls	r2, r3, #28
 800e626:	d501      	bpl.n	800e62c <__swbuf_r+0x20>
 800e628:	6923      	ldr	r3, [r4, #16]
 800e62a:	b943      	cbnz	r3, 800e63e <__swbuf_r+0x32>
 800e62c:	4621      	mov	r1, r4
 800e62e:	4628      	mov	r0, r5
 800e630:	f000 f82a 	bl	800e688 <__swsetup_r>
 800e634:	b118      	cbz	r0, 800e63e <__swbuf_r+0x32>
 800e636:	f04f 37ff 	mov.w	r7, #4294967295
 800e63a:	4638      	mov	r0, r7
 800e63c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e63e:	6823      	ldr	r3, [r4, #0]
 800e640:	6922      	ldr	r2, [r4, #16]
 800e642:	1a98      	subs	r0, r3, r2
 800e644:	6963      	ldr	r3, [r4, #20]
 800e646:	b2f6      	uxtb	r6, r6
 800e648:	4283      	cmp	r3, r0
 800e64a:	4637      	mov	r7, r6
 800e64c:	dc05      	bgt.n	800e65a <__swbuf_r+0x4e>
 800e64e:	4621      	mov	r1, r4
 800e650:	4628      	mov	r0, r5
 800e652:	f7ff fde9 	bl	800e228 <_fflush_r>
 800e656:	2800      	cmp	r0, #0
 800e658:	d1ed      	bne.n	800e636 <__swbuf_r+0x2a>
 800e65a:	68a3      	ldr	r3, [r4, #8]
 800e65c:	3b01      	subs	r3, #1
 800e65e:	60a3      	str	r3, [r4, #8]
 800e660:	6823      	ldr	r3, [r4, #0]
 800e662:	1c5a      	adds	r2, r3, #1
 800e664:	6022      	str	r2, [r4, #0]
 800e666:	701e      	strb	r6, [r3, #0]
 800e668:	6962      	ldr	r2, [r4, #20]
 800e66a:	1c43      	adds	r3, r0, #1
 800e66c:	429a      	cmp	r2, r3
 800e66e:	d004      	beq.n	800e67a <__swbuf_r+0x6e>
 800e670:	89a3      	ldrh	r3, [r4, #12]
 800e672:	07db      	lsls	r3, r3, #31
 800e674:	d5e1      	bpl.n	800e63a <__swbuf_r+0x2e>
 800e676:	2e0a      	cmp	r6, #10
 800e678:	d1df      	bne.n	800e63a <__swbuf_r+0x2e>
 800e67a:	4621      	mov	r1, r4
 800e67c:	4628      	mov	r0, r5
 800e67e:	f7ff fdd3 	bl	800e228 <_fflush_r>
 800e682:	2800      	cmp	r0, #0
 800e684:	d0d9      	beq.n	800e63a <__swbuf_r+0x2e>
 800e686:	e7d6      	b.n	800e636 <__swbuf_r+0x2a>

0800e688 <__swsetup_r>:
 800e688:	b538      	push	{r3, r4, r5, lr}
 800e68a:	4b29      	ldr	r3, [pc, #164]	@ (800e730 <__swsetup_r+0xa8>)
 800e68c:	4605      	mov	r5, r0
 800e68e:	6818      	ldr	r0, [r3, #0]
 800e690:	460c      	mov	r4, r1
 800e692:	b118      	cbz	r0, 800e69c <__swsetup_r+0x14>
 800e694:	6a03      	ldr	r3, [r0, #32]
 800e696:	b90b      	cbnz	r3, 800e69c <__swsetup_r+0x14>
 800e698:	f7fe f9e6 	bl	800ca68 <__sinit>
 800e69c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e6a0:	0719      	lsls	r1, r3, #28
 800e6a2:	d422      	bmi.n	800e6ea <__swsetup_r+0x62>
 800e6a4:	06da      	lsls	r2, r3, #27
 800e6a6:	d407      	bmi.n	800e6b8 <__swsetup_r+0x30>
 800e6a8:	2209      	movs	r2, #9
 800e6aa:	602a      	str	r2, [r5, #0]
 800e6ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e6b0:	81a3      	strh	r3, [r4, #12]
 800e6b2:	f04f 30ff 	mov.w	r0, #4294967295
 800e6b6:	e033      	b.n	800e720 <__swsetup_r+0x98>
 800e6b8:	0758      	lsls	r0, r3, #29
 800e6ba:	d512      	bpl.n	800e6e2 <__swsetup_r+0x5a>
 800e6bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e6be:	b141      	cbz	r1, 800e6d2 <__swsetup_r+0x4a>
 800e6c0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e6c4:	4299      	cmp	r1, r3
 800e6c6:	d002      	beq.n	800e6ce <__swsetup_r+0x46>
 800e6c8:	4628      	mov	r0, r5
 800e6ca:	f7ff f8a7 	bl	800d81c <_free_r>
 800e6ce:	2300      	movs	r3, #0
 800e6d0:	6363      	str	r3, [r4, #52]	@ 0x34
 800e6d2:	89a3      	ldrh	r3, [r4, #12]
 800e6d4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e6d8:	81a3      	strh	r3, [r4, #12]
 800e6da:	2300      	movs	r3, #0
 800e6dc:	6063      	str	r3, [r4, #4]
 800e6de:	6923      	ldr	r3, [r4, #16]
 800e6e0:	6023      	str	r3, [r4, #0]
 800e6e2:	89a3      	ldrh	r3, [r4, #12]
 800e6e4:	f043 0308 	orr.w	r3, r3, #8
 800e6e8:	81a3      	strh	r3, [r4, #12]
 800e6ea:	6923      	ldr	r3, [r4, #16]
 800e6ec:	b94b      	cbnz	r3, 800e702 <__swsetup_r+0x7a>
 800e6ee:	89a3      	ldrh	r3, [r4, #12]
 800e6f0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e6f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e6f8:	d003      	beq.n	800e702 <__swsetup_r+0x7a>
 800e6fa:	4621      	mov	r1, r4
 800e6fc:	4628      	mov	r0, r5
 800e6fe:	f000 f883 	bl	800e808 <__smakebuf_r>
 800e702:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e706:	f013 0201 	ands.w	r2, r3, #1
 800e70a:	d00a      	beq.n	800e722 <__swsetup_r+0x9a>
 800e70c:	2200      	movs	r2, #0
 800e70e:	60a2      	str	r2, [r4, #8]
 800e710:	6962      	ldr	r2, [r4, #20]
 800e712:	4252      	negs	r2, r2
 800e714:	61a2      	str	r2, [r4, #24]
 800e716:	6922      	ldr	r2, [r4, #16]
 800e718:	b942      	cbnz	r2, 800e72c <__swsetup_r+0xa4>
 800e71a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e71e:	d1c5      	bne.n	800e6ac <__swsetup_r+0x24>
 800e720:	bd38      	pop	{r3, r4, r5, pc}
 800e722:	0799      	lsls	r1, r3, #30
 800e724:	bf58      	it	pl
 800e726:	6962      	ldrpl	r2, [r4, #20]
 800e728:	60a2      	str	r2, [r4, #8]
 800e72a:	e7f4      	b.n	800e716 <__swsetup_r+0x8e>
 800e72c:	2000      	movs	r0, #0
 800e72e:	e7f7      	b.n	800e720 <__swsetup_r+0x98>
 800e730:	2400001c 	.word	0x2400001c

0800e734 <_raise_r>:
 800e734:	291f      	cmp	r1, #31
 800e736:	b538      	push	{r3, r4, r5, lr}
 800e738:	4605      	mov	r5, r0
 800e73a:	460c      	mov	r4, r1
 800e73c:	d904      	bls.n	800e748 <_raise_r+0x14>
 800e73e:	2316      	movs	r3, #22
 800e740:	6003      	str	r3, [r0, #0]
 800e742:	f04f 30ff 	mov.w	r0, #4294967295
 800e746:	bd38      	pop	{r3, r4, r5, pc}
 800e748:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e74a:	b112      	cbz	r2, 800e752 <_raise_r+0x1e>
 800e74c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e750:	b94b      	cbnz	r3, 800e766 <_raise_r+0x32>
 800e752:	4628      	mov	r0, r5
 800e754:	f000 f830 	bl	800e7b8 <_getpid_r>
 800e758:	4622      	mov	r2, r4
 800e75a:	4601      	mov	r1, r0
 800e75c:	4628      	mov	r0, r5
 800e75e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e762:	f000 b817 	b.w	800e794 <_kill_r>
 800e766:	2b01      	cmp	r3, #1
 800e768:	d00a      	beq.n	800e780 <_raise_r+0x4c>
 800e76a:	1c59      	adds	r1, r3, #1
 800e76c:	d103      	bne.n	800e776 <_raise_r+0x42>
 800e76e:	2316      	movs	r3, #22
 800e770:	6003      	str	r3, [r0, #0]
 800e772:	2001      	movs	r0, #1
 800e774:	e7e7      	b.n	800e746 <_raise_r+0x12>
 800e776:	2100      	movs	r1, #0
 800e778:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e77c:	4620      	mov	r0, r4
 800e77e:	4798      	blx	r3
 800e780:	2000      	movs	r0, #0
 800e782:	e7e0      	b.n	800e746 <_raise_r+0x12>

0800e784 <raise>:
 800e784:	4b02      	ldr	r3, [pc, #8]	@ (800e790 <raise+0xc>)
 800e786:	4601      	mov	r1, r0
 800e788:	6818      	ldr	r0, [r3, #0]
 800e78a:	f7ff bfd3 	b.w	800e734 <_raise_r>
 800e78e:	bf00      	nop
 800e790:	2400001c 	.word	0x2400001c

0800e794 <_kill_r>:
 800e794:	b538      	push	{r3, r4, r5, lr}
 800e796:	4d07      	ldr	r5, [pc, #28]	@ (800e7b4 <_kill_r+0x20>)
 800e798:	2300      	movs	r3, #0
 800e79a:	4604      	mov	r4, r0
 800e79c:	4608      	mov	r0, r1
 800e79e:	4611      	mov	r1, r2
 800e7a0:	602b      	str	r3, [r5, #0]
 800e7a2:	f7f2 ffd3 	bl	800174c <_kill>
 800e7a6:	1c43      	adds	r3, r0, #1
 800e7a8:	d102      	bne.n	800e7b0 <_kill_r+0x1c>
 800e7aa:	682b      	ldr	r3, [r5, #0]
 800e7ac:	b103      	cbz	r3, 800e7b0 <_kill_r+0x1c>
 800e7ae:	6023      	str	r3, [r4, #0]
 800e7b0:	bd38      	pop	{r3, r4, r5, pc}
 800e7b2:	bf00      	nop
 800e7b4:	2400072c 	.word	0x2400072c

0800e7b8 <_getpid_r>:
 800e7b8:	f7f2 bfc0 	b.w	800173c <_getpid>

0800e7bc <__swhatbuf_r>:
 800e7bc:	b570      	push	{r4, r5, r6, lr}
 800e7be:	460c      	mov	r4, r1
 800e7c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e7c4:	2900      	cmp	r1, #0
 800e7c6:	b096      	sub	sp, #88	@ 0x58
 800e7c8:	4615      	mov	r5, r2
 800e7ca:	461e      	mov	r6, r3
 800e7cc:	da0d      	bge.n	800e7ea <__swhatbuf_r+0x2e>
 800e7ce:	89a3      	ldrh	r3, [r4, #12]
 800e7d0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e7d4:	f04f 0100 	mov.w	r1, #0
 800e7d8:	bf14      	ite	ne
 800e7da:	2340      	movne	r3, #64	@ 0x40
 800e7dc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e7e0:	2000      	movs	r0, #0
 800e7e2:	6031      	str	r1, [r6, #0]
 800e7e4:	602b      	str	r3, [r5, #0]
 800e7e6:	b016      	add	sp, #88	@ 0x58
 800e7e8:	bd70      	pop	{r4, r5, r6, pc}
 800e7ea:	466a      	mov	r2, sp
 800e7ec:	f000 f848 	bl	800e880 <_fstat_r>
 800e7f0:	2800      	cmp	r0, #0
 800e7f2:	dbec      	blt.n	800e7ce <__swhatbuf_r+0x12>
 800e7f4:	9901      	ldr	r1, [sp, #4]
 800e7f6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e7fa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e7fe:	4259      	negs	r1, r3
 800e800:	4159      	adcs	r1, r3
 800e802:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e806:	e7eb      	b.n	800e7e0 <__swhatbuf_r+0x24>

0800e808 <__smakebuf_r>:
 800e808:	898b      	ldrh	r3, [r1, #12]
 800e80a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e80c:	079d      	lsls	r5, r3, #30
 800e80e:	4606      	mov	r6, r0
 800e810:	460c      	mov	r4, r1
 800e812:	d507      	bpl.n	800e824 <__smakebuf_r+0x1c>
 800e814:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e818:	6023      	str	r3, [r4, #0]
 800e81a:	6123      	str	r3, [r4, #16]
 800e81c:	2301      	movs	r3, #1
 800e81e:	6163      	str	r3, [r4, #20]
 800e820:	b003      	add	sp, #12
 800e822:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e824:	ab01      	add	r3, sp, #4
 800e826:	466a      	mov	r2, sp
 800e828:	f7ff ffc8 	bl	800e7bc <__swhatbuf_r>
 800e82c:	9f00      	ldr	r7, [sp, #0]
 800e82e:	4605      	mov	r5, r0
 800e830:	4639      	mov	r1, r7
 800e832:	4630      	mov	r0, r6
 800e834:	f7ff f866 	bl	800d904 <_malloc_r>
 800e838:	b948      	cbnz	r0, 800e84e <__smakebuf_r+0x46>
 800e83a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e83e:	059a      	lsls	r2, r3, #22
 800e840:	d4ee      	bmi.n	800e820 <__smakebuf_r+0x18>
 800e842:	f023 0303 	bic.w	r3, r3, #3
 800e846:	f043 0302 	orr.w	r3, r3, #2
 800e84a:	81a3      	strh	r3, [r4, #12]
 800e84c:	e7e2      	b.n	800e814 <__smakebuf_r+0xc>
 800e84e:	89a3      	ldrh	r3, [r4, #12]
 800e850:	6020      	str	r0, [r4, #0]
 800e852:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e856:	81a3      	strh	r3, [r4, #12]
 800e858:	9b01      	ldr	r3, [sp, #4]
 800e85a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e85e:	b15b      	cbz	r3, 800e878 <__smakebuf_r+0x70>
 800e860:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e864:	4630      	mov	r0, r6
 800e866:	f000 f81d 	bl	800e8a4 <_isatty_r>
 800e86a:	b128      	cbz	r0, 800e878 <__smakebuf_r+0x70>
 800e86c:	89a3      	ldrh	r3, [r4, #12]
 800e86e:	f023 0303 	bic.w	r3, r3, #3
 800e872:	f043 0301 	orr.w	r3, r3, #1
 800e876:	81a3      	strh	r3, [r4, #12]
 800e878:	89a3      	ldrh	r3, [r4, #12]
 800e87a:	431d      	orrs	r5, r3
 800e87c:	81a5      	strh	r5, [r4, #12]
 800e87e:	e7cf      	b.n	800e820 <__smakebuf_r+0x18>

0800e880 <_fstat_r>:
 800e880:	b538      	push	{r3, r4, r5, lr}
 800e882:	4d07      	ldr	r5, [pc, #28]	@ (800e8a0 <_fstat_r+0x20>)
 800e884:	2300      	movs	r3, #0
 800e886:	4604      	mov	r4, r0
 800e888:	4608      	mov	r0, r1
 800e88a:	4611      	mov	r1, r2
 800e88c:	602b      	str	r3, [r5, #0]
 800e88e:	f7f2 ffbd 	bl	800180c <_fstat>
 800e892:	1c43      	adds	r3, r0, #1
 800e894:	d102      	bne.n	800e89c <_fstat_r+0x1c>
 800e896:	682b      	ldr	r3, [r5, #0]
 800e898:	b103      	cbz	r3, 800e89c <_fstat_r+0x1c>
 800e89a:	6023      	str	r3, [r4, #0]
 800e89c:	bd38      	pop	{r3, r4, r5, pc}
 800e89e:	bf00      	nop
 800e8a0:	2400072c 	.word	0x2400072c

0800e8a4 <_isatty_r>:
 800e8a4:	b538      	push	{r3, r4, r5, lr}
 800e8a6:	4d06      	ldr	r5, [pc, #24]	@ (800e8c0 <_isatty_r+0x1c>)
 800e8a8:	2300      	movs	r3, #0
 800e8aa:	4604      	mov	r4, r0
 800e8ac:	4608      	mov	r0, r1
 800e8ae:	602b      	str	r3, [r5, #0]
 800e8b0:	f7f2 ffbc 	bl	800182c <_isatty>
 800e8b4:	1c43      	adds	r3, r0, #1
 800e8b6:	d102      	bne.n	800e8be <_isatty_r+0x1a>
 800e8b8:	682b      	ldr	r3, [r5, #0]
 800e8ba:	b103      	cbz	r3, 800e8be <_isatty_r+0x1a>
 800e8bc:	6023      	str	r3, [r4, #0]
 800e8be:	bd38      	pop	{r3, r4, r5, pc}
 800e8c0:	2400072c 	.word	0x2400072c

0800e8c4 <_init>:
 800e8c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8c6:	bf00      	nop
 800e8c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e8ca:	bc08      	pop	{r3}
 800e8cc:	469e      	mov	lr, r3
 800e8ce:	4770      	bx	lr

0800e8d0 <_fini>:
 800e8d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8d2:	bf00      	nop
 800e8d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e8d6:	bc08      	pop	{r3}
 800e8d8:	469e      	mov	lr, r3
 800e8da:	4770      	bx	lr
